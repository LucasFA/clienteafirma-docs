{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"markdown_strict/AF_Firmar_AutoFirma_Linux/","text":"AutoFirma Linux es una aplicaci\u00f3n Java que se empaqueta en un archivo .deb para su instalaci\u00f3n en sistemas Linux derivados o compatibles con Debian. En Linux, se ejecuta directamente el archivo JAR de AutoFirma. No existe un ejecutable propio de Linux. El fichero .deb mediante el que se instala AutoFirma no ir\u00e1 firmado . Esto se debe a que en Unix existen varios mecanismos de firma y el sistema operativo, que por defecto no comprueba las firmas, puede ser compatible s\u00f3lo con uno de ellos. Firmar las aplicaciones para el instalador podr\u00eda originar errores en algunos sistemas en los que se hubiese habilitado la comprobaci\u00f3n de firmas, mientras que al no firmarlas esto no ocurrir\u00eda. As\u00ed pues, el proceso completo de firma y empaquetado de AutoFirma Linux ser\u00e1: Firma de los archivos JAR \u201cAutoFirma.jar\u201d y \u201cAutoFirmaConfigurador.jar\u201d. Empaquetado de los JAR firmados en un paquete instalador ( .deb ). Firma de los JAR de AutoFirma El proceso de firma de firma de los JAR de AutoFirma Linux es el mismo que en el resto de sistemas operativos. Se deber\u00e1n firmar los ficheros \u201cAutoFirma.jar\u201d y \u201cAutoFirmaConfigurator.jar\u201d. Se puede revisar la documentaci\u00f3n del comando de firma en el siguiente enlace: http://docs.oracle.com/javase/6/docs/technotes/tools/windows/jarsigner.html","title":"AF Firmar AutoFirma Linux"},{"location":"markdown_strict/AF_Firmar_AutoFirma_Linux/#firma-de-los-jar-de-autofirma","text":"El proceso de firma de firma de los JAR de AutoFirma Linux es el mismo que en el resto de sistemas operativos. Se deber\u00e1n firmar los ficheros \u201cAutoFirma.jar\u201d y \u201cAutoFirmaConfigurator.jar\u201d. Se puede revisar la documentaci\u00f3n del comando de firma en el siguiente enlace: http://docs.oracle.com/javase/6/docs/technotes/tools/windows/jarsigner.html","title":"Firma de los JAR de AutoFirma"},{"location":"markdown_strict/AF_Firmar_AutoFirma_OS_X/","text":"Las aplicaciones OS X ( .app ) pueden ir firmadas, al igual que lo pueden ir sus instaladores ( .pkg ). Sin embargo, el proceso de firma de AutoFirma, debido a su naturaleza de aplicaci\u00f3n Java y su mecanismo de instalaci\u00f3n presenta varias particularidades. El proceso de empaquetado y firma de AutoFirma para OS X, requiere: Firma de los archivos JAR \u201cAutoFirma.jar\u201d y \u201cAutoFirmaConfigurador.jar\u201d. Empaquetado de los JAR firmados en una aplicaci\u00f3n ( .app ). Empaquetado de la aplicaci\u00f3n ( .app ) en un paquete instalador ( .pkg ). Firma del paquete instalador ( .pkg ) A continuaci\u00f3n se describen los distintos procesos de firma involucrados (incluido el proceso de firma del .app que NO se debe llevar a cabo). Firma de los JAR de AutoFirma El proceso de firma de firma de los JAR de AutoFirma OS X es el mismo que en el resto de sistemas operativos. Se deber\u00e1n firmar los ficheros \u201cAutoFirma.jar\u201d y \u201cAutoFirmaConfigurator.jar\u201d. Se puede revisar la documentaci\u00f3n del comando de firma en el siguiente enlace: http://docs.oracle.com/javase/6/docs/technotes/tools/windows/jarsigner.html Firma de la APP Aunque las aplicaciones OS X pueden ir firmadas, no se debe firmar la aplicaci\u00f3n AutoFirma para OS X . Las aplicaciones OS X ( .app ) consisten en un directorio con nombre terminado en \u201c.app\u201d, lo que hace que el sistema de ventanas lo presente como un fichero. Este directorio dispone de una estructura de ficheros determinada y puede ser firmado. Sin embargo, durante el proceso de instalaci\u00f3n de AutoFirma es necesario que se creen nuevos ficheros dentro del directorio .app lo que hace que las firmas sobre este directorio (realizadas antes del empaquetado en el instalador) aparezcan corruptas. Por este motivo, no se firmar\u00e1 el .app en OS X. Firma del PKG Para firmar el fichero .pkg ser\u00e1 necesario disponer de un equipo OS X y un certificado de desarrollador expedido por Apple v\u00e1lido para la distribuci\u00f3n de aplicaciones OS X. Para comprobar que el certificado sea v\u00e1lido, hay que abrir Xcode -> Preferencias -> Cuentas. Seleccionar el ID de la cuenta de desarrollador en el panel de la izquierda, y el nombre del perfil en el panel de la derecha. Una vez seleccionados pulsar el bot\u00f3n inferior \u201cVer detalles\u2026\u201d < En el panel de identidades de firma debe estar creada la opci\u00f3n \u201cDeveloper ID installer\u201d, en caso de no estar creado, pulsar el bot\u00f3n de la derecha \u201cCrear\u201d, y se importar\u00e1 autom\u00e1ticamente el certificado en el llavero.< El certificado debe estar importado en el llavero como se muestra a continuaci\u00f3n. (consulte con Apple para m\u00e1s informaci\u00f3n). Para firmar hay que ejecutar el siguiente comando (el nombre del instalador firmado se puede modificar): productsign \u2013sign <Nombre certificado> <original.pkg> <firmado.pkg> < Nombre certificado > Nombre del certificado tal como aparece en el llavero de OS X (podemos observarlo en la siguiente imagen). < < original.pkg > Nombre del fichero .pkg que queremos firmar. < firmado.pkg > Nombre del .pkg firmado (No tiene por qu\u00e9 ser el mismo nombre que el original). Ejemplo: productsign \u2013sign \u201cDeveloper ID installer: Ministerio de Hacienda y Administraciones P\u00fablicas (2H36E8KFN2)\u201d ./Desktop/test/\u201dCliente @firma para OS X.pkg\u201d AutoFirma_1.4.2_installer_signed.pkg < Si todo ha ocurrido sin problemas se mostrar\u00e1n los siguientes mensajes: productsign: adding certificate \u201cApple Application Integration Certification Authority\u201d productsign: adding certificate \u201cApple Root CA\u201d productsign: Wrote signed_product archive to AutoFirma_1.4.2_installer_signed.pkg Para una informaci\u00f3n m\u00e1s detallada sobre el comando productsign y sus par\u00e1metros consultar la ayuda de Apple: https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/productsign.1.html","title":"AF Firmar AutoFirma OS X"},{"location":"markdown_strict/AF_Firmar_AutoFirma_OS_X/#firma-de-los-jar-de-autofirma","text":"El proceso de firma de firma de los JAR de AutoFirma OS X es el mismo que en el resto de sistemas operativos. Se deber\u00e1n firmar los ficheros \u201cAutoFirma.jar\u201d y \u201cAutoFirmaConfigurator.jar\u201d. Se puede revisar la documentaci\u00f3n del comando de firma en el siguiente enlace: http://docs.oracle.com/javase/6/docs/technotes/tools/windows/jarsigner.html","title":"Firma de los JAR de AutoFirma"},{"location":"markdown_strict/AF_Firmar_AutoFirma_OS_X/#firma-de-la-app","text":"Aunque las aplicaciones OS X pueden ir firmadas, no se debe firmar la aplicaci\u00f3n AutoFirma para OS X . Las aplicaciones OS X ( .app ) consisten en un directorio con nombre terminado en \u201c.app\u201d, lo que hace que el sistema de ventanas lo presente como un fichero. Este directorio dispone de una estructura de ficheros determinada y puede ser firmado. Sin embargo, durante el proceso de instalaci\u00f3n de AutoFirma es necesario que se creen nuevos ficheros dentro del directorio .app lo que hace que las firmas sobre este directorio (realizadas antes del empaquetado en el instalador) aparezcan corruptas. Por este motivo, no se firmar\u00e1 el .app en OS X.","title":"Firma de la APP"},{"location":"markdown_strict/AF_Firmar_AutoFirma_OS_X/#firma-del-pkg","text":"Para firmar el fichero .pkg ser\u00e1 necesario disponer de un equipo OS X y un certificado de desarrollador expedido por Apple v\u00e1lido para la distribuci\u00f3n de aplicaciones OS X. Para comprobar que el certificado sea v\u00e1lido, hay que abrir Xcode -> Preferencias -> Cuentas. Seleccionar el ID de la cuenta de desarrollador en el panel de la izquierda, y el nombre del perfil en el panel de la derecha. Una vez seleccionados pulsar el bot\u00f3n inferior \u201cVer detalles\u2026\u201d < En el panel de identidades de firma debe estar creada la opci\u00f3n \u201cDeveloper ID installer\u201d, en caso de no estar creado, pulsar el bot\u00f3n de la derecha \u201cCrear\u201d, y se importar\u00e1 autom\u00e1ticamente el certificado en el llavero.< El certificado debe estar importado en el llavero como se muestra a continuaci\u00f3n. (consulte con Apple para m\u00e1s informaci\u00f3n). Para firmar hay que ejecutar el siguiente comando (el nombre del instalador firmado se puede modificar): productsign \u2013sign <Nombre certificado> <original.pkg> <firmado.pkg> < Nombre certificado > Nombre del certificado tal como aparece en el llavero de OS X (podemos observarlo en la siguiente imagen). < < original.pkg > Nombre del fichero .pkg que queremos firmar. < firmado.pkg > Nombre del .pkg firmado (No tiene por qu\u00e9 ser el mismo nombre que el original). Ejemplo: productsign \u2013sign \u201cDeveloper ID installer: Ministerio de Hacienda y Administraciones P\u00fablicas (2H36E8KFN2)\u201d ./Desktop/test/\u201dCliente @firma para OS X.pkg\u201d AutoFirma_1.4.2_installer_signed.pkg < Si todo ha ocurrido sin problemas se mostrar\u00e1n los siguientes mensajes: productsign: adding certificate \u201cApple Application Integration Certification Authority\u201d productsign: adding certificate \u201cApple Root CA\u201d productsign: Wrote signed_product archive to AutoFirma_1.4.2_installer_signed.pkg Para una informaci\u00f3n m\u00e1s detallada sobre el comando productsign y sus par\u00e1metros consultar la ayuda de Apple: https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/productsign.1.html","title":"Firma del PKG"},{"location":"markdown_strict/AF_Instalador%20Linux/","text":"Preparaci\u00f3n del entorno Los recursos para la generaci\u00f3n del instalador .deb de AutoFirma se encuentran comprimidos en formato TAR en GitHub, en la direcci\u00f3n https://github.com/ctt-gob-es/clienteafirma/blob/master/afirma-simple-installer/linux/AutoFirmaLinuxInstaller_deb.tar.gz Este archivo contiene la estructura de directorios y los recursos necesarios para generar el instalador de la aplicaci\u00f3n. Este archivo debe descomprimirse \u00fanicamente en un sistema Unix para garantizar que los permisos de los ficheros no se ven alterados. La estructura de directorios contenida en el archivo y su utilidad de describe a continuaci\u00f3n: src -> Directorio ra\u00edz /DEBIAN -> Directorio donde se incluye la configuraci\u00f3n y los scripts . control -> fichero de configuraci\u00f3n postint -> script de post-instalaci\u00f3n postrm -> script de post-borrado prerm -> script de pre-borrado /etc /firefox /pref AutoFirma.js -> JavaScript que asocia el protocolo \u201cafirma\u201d /usr -> Los ficheros de este directorio se copiar\u00e1n en las carpetas respectivas de Linux /bin AutoFirma -> Ejecuta AutoFirma.jar con los par\u00e1metros recibidos por URL /lib /AutoFirma -> Directorio con los JAR de AutoFirma y su configurador AutoFirma.jar -> Biblioteca de Autofirma. (DEBE INCLUIRLA EL ADMINISTRADOR). AutoFirmaConfigurador.jar -> Biblioteca del instalador de AutoFirma. (DEBE INCLUIRLA EL ADMINISTRADOR). /share /applications afirma.desktop -> Propiedades de AutoFirma como aplicaci\u00f3n de escritorio /AutoFirma AutoFirma.png -> Icono de la aplicaci\u00f3n /doc /AutoFirma copyright -> Informaci\u00f3n sobre la licencia de AutoFirma Configuraci\u00f3n de la dependencia con Java El instalador funciona indistintamente con Oracle JDK o con OpenJDK, pero si se desea restringir a un entorno de ejecuci\u00f3n de Java en concreto o si se quiere cambiar de versi\u00f3n, en el fichero \u201ccontrol\u201d hay que editar la opci\u00f3n depends en funci\u00f3n de la versi\u00f3n de java con la que se quiere generar el instalador. En este caso: Depends: libnss3-tools Recomends : openjdk-11-jre Adicionalmente, en este fichero se define la informaci\u00f3n de la aplicaci\u00f3n (versi\u00f3n, tama\u00f1o, etc.). Configuraci\u00f3n de la versi\u00f3n de AutoFirma Cada nueva versi\u00f3n de AutoFirma puede requerir que se actualicen diversos textos de los ficheros de instalaci\u00f3n. Ejemplos claros son el n\u00famero de versi\u00f3n y la fecha del copyright . Los textos susceptibles de actualizarse se encuentran en los siguientes ficheros de la estructura de directorios: src -> DEBIAN -> control En este fichero se encuentran textos como el n\u00famero de versi\u00f3n de AutoFirma, el correo de contacto, el tama\u00f1o que ocupa la aplicaci\u00f3n una vez instalada o la URL de la p\u00e1gina del producto. src -> DEBIAN -> copyright En este fichero se muestra la informaci\u00f3n de licencia del producto y el a\u00f1o de copyright . src -> usr -> share -> doc -> AutoFirma -> copyright En este fichero se muestra la informaci\u00f3n de licencia del producto. Generaci\u00f3n del instalador (.deb) Para generar el instalador de AutoFirma es necesario a\u00f1adir los JAR de la \u00faltima versi\u00f3n de AutoFirma y del configurador al directorio \u201csrc/usr/lib/AutoFirma\u201d de la estructura previamente comentada. Estos ficheros deber\u00e1n aparecer con los nombres: AutoFirma.jar: \u00daltima versi\u00f3n de AutoFirma (m\u00f3dulo \u201cafirma-simple\u201d de GitHub generado con la opci\u00f3n \u201c-Denv=install\u201d para que incluya todas las dependencias necesarias). AutoFirmaConfigurador.jar : \u00daltima versi\u00f3n del configurador de AutoFirma (m\u00f3dulo \u201cafirma-ui-simple-configurator\u201d de GitHub generado con la opci\u00f3n \u201c-Denv=install\u201d para que incluya todas las dependencias necesarias). Para la generaci\u00f3n crearemos el fichero por l\u00ednea de comandos. Abriremos una consola, nos situaremos a la altura del directorio \u201csrc\u201d de la estructura de directorios del paquete instalador y utilizaremos el siguiente comando: fakeroot dpkg-deb --build src AutoFirma_X_Y.deb Como resultado, se habr\u00e1 generado en el directorio actual el archivo instalador \u201cAutoFirma_X_Y.deb\u201d. La subcadena \u201cX_Y\u201d se deber\u00e1 sustituir por el n\u00famero de versi\u00f3n asignado a la aplicaci\u00f3n. Instalaci\u00f3n de la aplicaci\u00f3n Para instalar el fichero generado existen dos opciones. Hacer doble clic sobre el fichero, el fichero se instalar\u00e1 mediante la instalaci\u00f3n de paquetes de Ubuntu. Instalaci\u00f3n por l\u00ednea de comandos, ejecutando uno de los siguientes comandos (se supone que el .deb generado se llama AutoFirma_X_Y.deb): sudo dpkg -i AutoFirma_X_Y.deb Si el comando anterior da un error por no encontrarse instaladas las dependencias necesarias, se deber\u00e1 ejecutar a continuaci\u00f3n el comando: sudo apt-get \u2013f install ./AutoFirma_X_Y.deb Seg\u00fan la versi\u00f3n de Ubuntu, tambi\u00e9n puede ser necesario ejecutar: sudo apt --fix-broken install Desinstalaci\u00f3n de la aplicaci\u00f3n Para realizar la desinstalaci\u00f3n de un fichero .deb en el sistema hay que escribir el siguiente comando en la consola (requiere permisos de administraci\u00f3n) sudo apt-get remove --purge autofirma autofirma es el nombre del paquete con el que se ha instalado en la aplicaci\u00f3n, dicho nombre viene definido en el fichero control dentro de src/DEBIAN Instalador .rpm Preparaci\u00f3n del entorno En el repositorio se incluye por duplicado el directorio de recursos necesario para generar el instalador de AutoFirma, uno pensado para la generaci\u00f3n del paquete RPM para Fedora y otro para OpenSuse. Este directorio deber\u00e1 situarse en su sistema de tal forma que en el directorio ra\u00edz del usuario se encuentre inmediatamente el subdirectorio \u201crpmbuild\u201d. La estructura de este directorio se describe a continuaci\u00f3n: rpmbuild BUILD autofirma.js: Fichero que indica a Firefox como abrir AutoFirma. autofirma.png: Icono de la aplicaci\u00f3n. autofirma.jar: Biblioteca de Autofirma. (DEBE INCLUIRLA EL ADMINISTRADOR). autofirmaConfigurador.jar: Biblioteca del instalador de AutoFirma. (DEBE INCLUIRLA EL ADMINISTRADOR). LICENSE: Fichero de licencia. BUILDROOT RPMS SOURCES autofirma.tar.gz: Archivo en el que se encuentra un fichero indicando donde se encuentra los ficheros fuente de la aplicaci\u00f3n. Puede sustituirse por el mismo archivo con los aut\u00e9nticos ficheros fuente. SPECS autofirma.spec: Fichero de definici\u00f3n del proceso de instalaci\u00f3n. SRPMS Diferenciaci\u00f3n de los entornos Fedora y OpenSUSE Los recursos utilizados para el empaquetado de las versiones de AutoFirma para Fedora y OpenSUSE son muy similares. En ambos casos se genera un instalador RPM, pero las diferencias entre ambas distribuciones hacen necesario respetar una serie de diferencias. Se proporciona un directorio con los recursos para cada instalador para que no sea necesario modificar los distintos ficheros cada vez que deseen construirse, pero se se\u00f1alan a continuaci\u00f3n las diferencias para que quede constancia: Los nombres de las dependencias de NSS son distintos en ambos entornos, por ello, en el fichero \u201cautofirma.spec\u201d, esta dependencia se marca de la siguiente forma: Fedora: Requires: nss-tools OpenSuse: Requires: mozilla-nss-tools En OpenSuse, en el script de construcci\u00f3n, no se indicar\u00e1 en la primera l\u00ednea el int\u00e9rprete a utilizar. Por ello, en el apartado \u201c%build\u201d del fichero \u201cautofirma.spec\u201d: Fedora: La primera l\u00ednea ser\u00e1 \u201c#!/bin/bash\u201d. OpenSuse: Se escriben las l\u00edneas del script sin cabecera. Cambia el directorio cl\u00e1sico para los ficheros independientes de arquitectura. Por ello, en \u201cautofirma.spec\u201d, cambiar\u00e1n algunas rutas: Fedora: Se utilizar\u00e1 la ruta \u201c/usr/share/\u201d. OpenSuse: Se utilizar\u00e1n las rutas \u201c/usr/share/\u201d y \u201c/usr/local/share/\u201d. Indicaciones adicionales para el registro del esquema afirma en OpenSuse. En OpenSuse se registra el esquema \u201cafirma\u201d tambi\u00e9n en los ficheros: /usr/local/share/applications/mimeapps.list /usr/share/applications/gnome-mimeapps.list /usr/local/share/applications/gnome-mimeapps.list Configuraci\u00f3n de la versi\u00f3n de AutoFirma Cada nueva versi\u00f3n de AutoFirma puede requerir que se actualicen diversos textos de los ficheros de instalaci\u00f3n. Ejemplos claros son el n\u00famero de versi\u00f3n y la fecha del copyright . Los textos susceptibles de actualizarse se encuentran en los siguientes ficheros de la estructura de directorios: rpmbuild -> SPEC -> autofirma.spec En este fichero se encuentra el n\u00famero de versi\u00f3n y revisi\u00f3n de la aplicaci\u00f3n. Su licencia y el log de cambios de la versi\u00f3n. rpmbuild -> BUILD -> LICENSE En este fichero se incluye el texto de licencia del producto. Generaci\u00f3n del instalador (.rpm) Para generar el instalador de AutoFirma es necesario a\u00f1adir los JAR de la \u00faltima versi\u00f3n de AutoFirma y del configurador al directorio \u201c~/rpmbuild/SOURCES\u201d de la estructura previamente comentada. Estos ficheros deber\u00e1n aparecer con los nombres: autofirma.jar: \u00daltima versi\u00f3n de AutoFirma (m\u00f3dulo \u201cafirma-simple\u201d de GitHub generado con la opci\u00f3n \u201c-Denv=install\u201d para que incluya todas las dependencias necesarias). autofirmaConfigurador.jar : \u00daltima versi\u00f3n del configurador de AutoFirma (m\u00f3dulo \u201cafirma-ui-simple-configurator\u201d de GitHub generado con la opci\u00f3n \u201c-Denv=install\u201d para que incluya todas las dependencias necesarias). Generaremos el instalador desde l\u00ednea de comandos. Para ello, abriremos una consola, nos situaremos a la altura del directorio \u201crpmbuild\u201d de la estructura de directorios del paquete instalador y utilizaremos el siguiente comando: rpmbuild -bb SPECS/autofirma.spec Como resultado, se habr\u00e1 generado en el directorio \u201cRPMS\u201d un directorio \u201cnoarch\u201d con el archivo instalador \u201cautofirma-X.Y.Z-R.noarch.rpm\u201d. La subcadena \u201cX.Y.Z-R\u201d ser\u00e1 el n\u00famero de versi\u00f3n seguida de la revisi\u00f3n de la aplicaci\u00f3n. Firma de los RPM Para la firma de los RPM utilizaremos una clave PGP. Configurar entorno Para la firma con claves PGP, primeramente, ser\u00e1 necesario configurar el entorno: Instalar las claves en el almac\u00e9n de claves local. Para ello, usaremos el comendo: gpg --import private_key.asc En este comando, \u201cprivate_key.asc\u201d ser\u00e1 el fichero con las claves p\u00fablica y privada. Crearemos o editaremos el fichero \"~/.rpmmacros\" con el siguiente contenido, indicando en el las rutas correspondientes: # Este valor siempre ser\u00e1 \u201cgpg\u201d %_signature gpg # Ruta completa al fichero \u201c.gnupg\u201d, com\u00fanmente situado en el # directorio de usuario %_gpg_path /home/usuario/.gnupg # Nombre con el que se cre\u00f3 la clave PGP. Se puede consultar con # el comando: gpg --list-secret-keys %_gpg_name NOMBRE DE LA ENTIDAD # Ruta completa de ejecutable \u201cgpg\u201d. Puede obtenerse con el comando: # which gpg %_gpgbin /usr/bin/gpg Si no se tiene ya, instalar \u201crpm-sign\u201d mediante el siguiente comando: sudo yum install rpm-sign Firmar RPM Para la firmar el instalador, basta con ejecutar el comando: rpm --addsign autofirma-X.Y.Z.noarch.rpm Comprobaci\u00f3n de firma interna Para comprobar un RPM firmado usaremos el comando: rpm --checksig autofirma-X.Y.Z.noarch.rpm Comprobaci\u00f3n de firma externa Para comprobar una firma externa (.sig) usaremos el comando: gpg --verify autofirma-X.Y.Z.noarch.rpm.sig autofirma-X.Y.Z.noarch.rpm Generaci\u00f3n de sha1sum Al publicar el instalador es recomendable publicar tambi\u00e9n en la web las huellas digitales de cada uno de los ficheros para que los usuarios puedan comprobar la validez de los ficheros descargados. Se puede generar la huella de todos los ficheros que deseemos con el comando: sha1sum FICHERO Para calcular la huella de todos los ficheros, se puede usar en el directorio: sha1sum * Instalaci\u00f3n de la aplicaci\u00f3n Antes de instalar la aplicaci\u00f3n, si el instalador RPM de esta se ha firmado, se deber\u00eda agregar la clave p\u00fablica PGP del firmante al almac\u00e9n de confianza del sistema. La clave p\u00fablica PGP puede descargarse como un fichero \u201c.asc\u201d junto al archivo de instalaci\u00f3n. Para importar esta clave PGP a nuestro almac\u00e9n usaremos el comendo: sudo rpm --import PUBLIC_KEY.asc En este comando, \u201cPUBLIC_KEY.asc\u201d ser\u00e1 el fichero con la clave p\u00fablica. Una vez importada la clave PGP, el sistema podr\u00e1 validar autom\u00e1ticamente la firma del instalador RPM. Para instalar AutoFirma a partir del archivo RPM existen varias opciones, de las cuales se presentan dos: Hacer doble clic sobre el fichero, el fichero se instalar\u00e1 mediante el instalador de paquetes del sistema. Desde l\u00ednea de comandos, ejecutar: sudo rpm -i autofirma-X.Y.Z.noarch.rpm En la sentencia anterior, \u201cautofirma-X.Y.Z.noarch.rpm\u201d ser\u00eda el nombre del fichero RPM que se desea instalar. Desinstalaci\u00f3n de la aplicaci\u00f3n Para realizar la desinstalaci\u00f3n de un fichero RPM en el sistema hay que escribir el siguiente comando en la consola (requiere permisos de administraci\u00f3n) sudo rpm \u2013e autofirma En la sentencia anterior, \u201cautofirma\u201d es el nombre predefinido del paquete con el que se ha instalado en la aplicaci\u00f3n, dicho nombre viene definido en el fichero de especificaci\u00f3n del instalador, por lo que la sentencia debe escribirse tal cual. Actualizaci\u00f3n de la aplicaci\u00f3n El proceso de actualizaci\u00f3n de los RPM implica la instalaci\u00f3n de una versi\u00f3n y la desinstalaci\u00f3n de la anterior. Debido a un problema en el proceso de desinstalaci\u00f3n de AutoFirma 1.7.1 y anteriores, al desinstalarlas se eliminan tambi\u00e9n recursos de la versi\u00f3n a la que se estaba desinstalando. Por este motivo, cuando queramos actualizar desde AutoFirma 1.8 a una posterior, bastar\u00e1 usar el comando: sudo rpm -U autofirma-X.Y.Z.noarch.rpm Sin embargo, cuando estemos actualizando desde una versi\u00f3n anterior, deberemos indicar que no se ejecute el proceso de desinstalaci\u00f3n de esa versi\u00f3n. Para ello usaremos el comando. sudo rpm -U --nopreun --nopostun autofirma-X.Y.Z.noarch.rpm","title":"Preparaci\u00f3n del entorno"},{"location":"markdown_strict/AF_Instalador%20Linux/#preparacion-del-entorno","text":"Los recursos para la generaci\u00f3n del instalador .deb de AutoFirma se encuentran comprimidos en formato TAR en GitHub, en la direcci\u00f3n https://github.com/ctt-gob-es/clienteafirma/blob/master/afirma-simple-installer/linux/AutoFirmaLinuxInstaller_deb.tar.gz Este archivo contiene la estructura de directorios y los recursos necesarios para generar el instalador de la aplicaci\u00f3n. Este archivo debe descomprimirse \u00fanicamente en un sistema Unix para garantizar que los permisos de los ficheros no se ven alterados. La estructura de directorios contenida en el archivo y su utilidad de describe a continuaci\u00f3n: src -> Directorio ra\u00edz /DEBIAN -> Directorio donde se incluye la configuraci\u00f3n y los scripts . control -> fichero de configuraci\u00f3n postint -> script de post-instalaci\u00f3n postrm -> script de post-borrado prerm -> script de pre-borrado /etc /firefox /pref AutoFirma.js -> JavaScript que asocia el protocolo \u201cafirma\u201d /usr -> Los ficheros de este directorio se copiar\u00e1n en las carpetas respectivas de Linux /bin AutoFirma -> Ejecuta AutoFirma.jar con los par\u00e1metros recibidos por URL /lib /AutoFirma -> Directorio con los JAR de AutoFirma y su configurador AutoFirma.jar -> Biblioteca de Autofirma. (DEBE INCLUIRLA EL ADMINISTRADOR). AutoFirmaConfigurador.jar -> Biblioteca del instalador de AutoFirma. (DEBE INCLUIRLA EL ADMINISTRADOR). /share /applications afirma.desktop -> Propiedades de AutoFirma como aplicaci\u00f3n de escritorio /AutoFirma AutoFirma.png -> Icono de la aplicaci\u00f3n /doc /AutoFirma copyright -> Informaci\u00f3n sobre la licencia de AutoFirma","title":"Preparaci\u00f3n del entorno"},{"location":"markdown_strict/AF_Instalador%20Linux/#configuracion-de-la-dependencia-con-java","text":"El instalador funciona indistintamente con Oracle JDK o con OpenJDK, pero si se desea restringir a un entorno de ejecuci\u00f3n de Java en concreto o si se quiere cambiar de versi\u00f3n, en el fichero \u201ccontrol\u201d hay que editar la opci\u00f3n depends en funci\u00f3n de la versi\u00f3n de java con la que se quiere generar el instalador. En este caso: Depends: libnss3-tools Recomends : openjdk-11-jre Adicionalmente, en este fichero se define la informaci\u00f3n de la aplicaci\u00f3n (versi\u00f3n, tama\u00f1o, etc.).","title":"Configuraci\u00f3n de la dependencia con Java"},{"location":"markdown_strict/AF_Instalador%20Linux/#configuracion-de-la-version-de-autofirma","text":"Cada nueva versi\u00f3n de AutoFirma puede requerir que se actualicen diversos textos de los ficheros de instalaci\u00f3n. Ejemplos claros son el n\u00famero de versi\u00f3n y la fecha del copyright . Los textos susceptibles de actualizarse se encuentran en los siguientes ficheros de la estructura de directorios: src -> DEBIAN -> control En este fichero se encuentran textos como el n\u00famero de versi\u00f3n de AutoFirma, el correo de contacto, el tama\u00f1o que ocupa la aplicaci\u00f3n una vez instalada o la URL de la p\u00e1gina del producto. src -> DEBIAN -> copyright En este fichero se muestra la informaci\u00f3n de licencia del producto y el a\u00f1o de copyright . src -> usr -> share -> doc -> AutoFirma -> copyright En este fichero se muestra la informaci\u00f3n de licencia del producto.","title":"Configuraci\u00f3n de la versi\u00f3n de AutoFirma"},{"location":"markdown_strict/AF_Instalador%20Linux/#generacion-del-instalador-deb","text":"Para generar el instalador de AutoFirma es necesario a\u00f1adir los JAR de la \u00faltima versi\u00f3n de AutoFirma y del configurador al directorio \u201csrc/usr/lib/AutoFirma\u201d de la estructura previamente comentada. Estos ficheros deber\u00e1n aparecer con los nombres: AutoFirma.jar: \u00daltima versi\u00f3n de AutoFirma (m\u00f3dulo \u201cafirma-simple\u201d de GitHub generado con la opci\u00f3n \u201c-Denv=install\u201d para que incluya todas las dependencias necesarias). AutoFirmaConfigurador.jar : \u00daltima versi\u00f3n del configurador de AutoFirma (m\u00f3dulo \u201cafirma-ui-simple-configurator\u201d de GitHub generado con la opci\u00f3n \u201c-Denv=install\u201d para que incluya todas las dependencias necesarias). Para la generaci\u00f3n crearemos el fichero por l\u00ednea de comandos. Abriremos una consola, nos situaremos a la altura del directorio \u201csrc\u201d de la estructura de directorios del paquete instalador y utilizaremos el siguiente comando: fakeroot dpkg-deb --build src AutoFirma_X_Y.deb Como resultado, se habr\u00e1 generado en el directorio actual el archivo instalador \u201cAutoFirma_X_Y.deb\u201d. La subcadena \u201cX_Y\u201d se deber\u00e1 sustituir por el n\u00famero de versi\u00f3n asignado a la aplicaci\u00f3n.","title":"Generaci\u00f3n del instalador (.deb)"},{"location":"markdown_strict/AF_Instalador%20Linux/#instalacion-de-la-aplicacion","text":"Para instalar el fichero generado existen dos opciones. Hacer doble clic sobre el fichero, el fichero se instalar\u00e1 mediante la instalaci\u00f3n de paquetes de Ubuntu. Instalaci\u00f3n por l\u00ednea de comandos, ejecutando uno de los siguientes comandos (se supone que el .deb generado se llama AutoFirma_X_Y.deb): sudo dpkg -i AutoFirma_X_Y.deb Si el comando anterior da un error por no encontrarse instaladas las dependencias necesarias, se deber\u00e1 ejecutar a continuaci\u00f3n el comando: sudo apt-get \u2013f install ./AutoFirma_X_Y.deb Seg\u00fan la versi\u00f3n de Ubuntu, tambi\u00e9n puede ser necesario ejecutar: sudo apt --fix-broken install","title":"Instalaci\u00f3n de la aplicaci\u00f3n"},{"location":"markdown_strict/AF_Instalador%20Linux/#desinstalacion-de-la-aplicacion","text":"Para realizar la desinstalaci\u00f3n de un fichero .deb en el sistema hay que escribir el siguiente comando en la consola (requiere permisos de administraci\u00f3n) sudo apt-get remove --purge autofirma autofirma es el nombre del paquete con el que se ha instalado en la aplicaci\u00f3n, dicho nombre viene definido en el fichero control dentro de src/DEBIAN","title":"Desinstalaci\u00f3n de la aplicaci\u00f3n"},{"location":"markdown_strict/AF_Instalador%20Linux/#instalador-rpm","text":"","title":"Instalador .rpm"},{"location":"markdown_strict/AF_Instalador%20Linux/#preparacion-del-entorno_1","text":"En el repositorio se incluye por duplicado el directorio de recursos necesario para generar el instalador de AutoFirma, uno pensado para la generaci\u00f3n del paquete RPM para Fedora y otro para OpenSuse. Este directorio deber\u00e1 situarse en su sistema de tal forma que en el directorio ra\u00edz del usuario se encuentre inmediatamente el subdirectorio \u201crpmbuild\u201d. La estructura de este directorio se describe a continuaci\u00f3n: rpmbuild BUILD autofirma.js: Fichero que indica a Firefox como abrir AutoFirma. autofirma.png: Icono de la aplicaci\u00f3n. autofirma.jar: Biblioteca de Autofirma. (DEBE INCLUIRLA EL ADMINISTRADOR). autofirmaConfigurador.jar: Biblioteca del instalador de AutoFirma. (DEBE INCLUIRLA EL ADMINISTRADOR). LICENSE: Fichero de licencia. BUILDROOT RPMS SOURCES autofirma.tar.gz: Archivo en el que se encuentra un fichero indicando donde se encuentra los ficheros fuente de la aplicaci\u00f3n. Puede sustituirse por el mismo archivo con los aut\u00e9nticos ficheros fuente. SPECS autofirma.spec: Fichero de definici\u00f3n del proceso de instalaci\u00f3n. SRPMS","title":"Preparaci\u00f3n del entorno"},{"location":"markdown_strict/AF_Instalador%20Linux/#diferenciacion-de-los-entornos-fedora-y-opensuse","text":"Los recursos utilizados para el empaquetado de las versiones de AutoFirma para Fedora y OpenSUSE son muy similares. En ambos casos se genera un instalador RPM, pero las diferencias entre ambas distribuciones hacen necesario respetar una serie de diferencias. Se proporciona un directorio con los recursos para cada instalador para que no sea necesario modificar los distintos ficheros cada vez que deseen construirse, pero se se\u00f1alan a continuaci\u00f3n las diferencias para que quede constancia: Los nombres de las dependencias de NSS son distintos en ambos entornos, por ello, en el fichero \u201cautofirma.spec\u201d, esta dependencia se marca de la siguiente forma: Fedora: Requires: nss-tools OpenSuse: Requires: mozilla-nss-tools En OpenSuse, en el script de construcci\u00f3n, no se indicar\u00e1 en la primera l\u00ednea el int\u00e9rprete a utilizar. Por ello, en el apartado \u201c%build\u201d del fichero \u201cautofirma.spec\u201d: Fedora: La primera l\u00ednea ser\u00e1 \u201c#!/bin/bash\u201d. OpenSuse: Se escriben las l\u00edneas del script sin cabecera. Cambia el directorio cl\u00e1sico para los ficheros independientes de arquitectura. Por ello, en \u201cautofirma.spec\u201d, cambiar\u00e1n algunas rutas: Fedora: Se utilizar\u00e1 la ruta \u201c/usr/share/\u201d. OpenSuse: Se utilizar\u00e1n las rutas \u201c/usr/share/\u201d y \u201c/usr/local/share/\u201d. Indicaciones adicionales para el registro del esquema afirma en OpenSuse. En OpenSuse se registra el esquema \u201cafirma\u201d tambi\u00e9n en los ficheros: /usr/local/share/applications/mimeapps.list /usr/share/applications/gnome-mimeapps.list /usr/local/share/applications/gnome-mimeapps.list","title":"Diferenciaci\u00f3n de los entornos Fedora y OpenSUSE"},{"location":"markdown_strict/AF_Instalador%20Linux/#configuracion-de-la-version-de-autofirma_1","text":"Cada nueva versi\u00f3n de AutoFirma puede requerir que se actualicen diversos textos de los ficheros de instalaci\u00f3n. Ejemplos claros son el n\u00famero de versi\u00f3n y la fecha del copyright . Los textos susceptibles de actualizarse se encuentran en los siguientes ficheros de la estructura de directorios: rpmbuild -> SPEC -> autofirma.spec En este fichero se encuentra el n\u00famero de versi\u00f3n y revisi\u00f3n de la aplicaci\u00f3n. Su licencia y el log de cambios de la versi\u00f3n. rpmbuild -> BUILD -> LICENSE En este fichero se incluye el texto de licencia del producto.","title":"Configuraci\u00f3n de la versi\u00f3n de AutoFirma"},{"location":"markdown_strict/AF_Instalador%20Linux/#generacion-del-instalador-rpm","text":"Para generar el instalador de AutoFirma es necesario a\u00f1adir los JAR de la \u00faltima versi\u00f3n de AutoFirma y del configurador al directorio \u201c~/rpmbuild/SOURCES\u201d de la estructura previamente comentada. Estos ficheros deber\u00e1n aparecer con los nombres: autofirma.jar: \u00daltima versi\u00f3n de AutoFirma (m\u00f3dulo \u201cafirma-simple\u201d de GitHub generado con la opci\u00f3n \u201c-Denv=install\u201d para que incluya todas las dependencias necesarias). autofirmaConfigurador.jar : \u00daltima versi\u00f3n del configurador de AutoFirma (m\u00f3dulo \u201cafirma-ui-simple-configurator\u201d de GitHub generado con la opci\u00f3n \u201c-Denv=install\u201d para que incluya todas las dependencias necesarias). Generaremos el instalador desde l\u00ednea de comandos. Para ello, abriremos una consola, nos situaremos a la altura del directorio \u201crpmbuild\u201d de la estructura de directorios del paquete instalador y utilizaremos el siguiente comando: rpmbuild -bb SPECS/autofirma.spec Como resultado, se habr\u00e1 generado en el directorio \u201cRPMS\u201d un directorio \u201cnoarch\u201d con el archivo instalador \u201cautofirma-X.Y.Z-R.noarch.rpm\u201d. La subcadena \u201cX.Y.Z-R\u201d ser\u00e1 el n\u00famero de versi\u00f3n seguida de la revisi\u00f3n de la aplicaci\u00f3n.","title":"Generaci\u00f3n del instalador (.rpm)"},{"location":"markdown_strict/AF_Instalador%20Linux/#firma-de-los-rpm","text":"Para la firma de los RPM utilizaremos una clave PGP.","title":"Firma de los RPM"},{"location":"markdown_strict/AF_Instalador%20Linux/#configurar-entorno","text":"Para la firma con claves PGP, primeramente, ser\u00e1 necesario configurar el entorno: Instalar las claves en el almac\u00e9n de claves local. Para ello, usaremos el comendo: gpg --import private_key.asc En este comando, \u201cprivate_key.asc\u201d ser\u00e1 el fichero con las claves p\u00fablica y privada. Crearemos o editaremos el fichero \"~/.rpmmacros\" con el siguiente contenido, indicando en el las rutas correspondientes: # Este valor siempre ser\u00e1 \u201cgpg\u201d %_signature gpg # Ruta completa al fichero \u201c.gnupg\u201d, com\u00fanmente situado en el # directorio de usuario %_gpg_path /home/usuario/.gnupg # Nombre con el que se cre\u00f3 la clave PGP. Se puede consultar con # el comando: gpg --list-secret-keys %_gpg_name NOMBRE DE LA ENTIDAD # Ruta completa de ejecutable \u201cgpg\u201d. Puede obtenerse con el comando: # which gpg %_gpgbin /usr/bin/gpg Si no se tiene ya, instalar \u201crpm-sign\u201d mediante el siguiente comando: sudo yum install rpm-sign","title":"Configurar entorno"},{"location":"markdown_strict/AF_Instalador%20Linux/#firmar-rpm","text":"Para la firmar el instalador, basta con ejecutar el comando: rpm --addsign autofirma-X.Y.Z.noarch.rpm","title":"Firmar RPM"},{"location":"markdown_strict/AF_Instalador%20Linux/#comprobacion-de-firma-interna","text":"Para comprobar un RPM firmado usaremos el comando: rpm --checksig autofirma-X.Y.Z.noarch.rpm","title":"Comprobaci\u00f3n de firma interna"},{"location":"markdown_strict/AF_Instalador%20Linux/#comprobacion-de-firma-externa","text":"Para comprobar una firma externa (.sig) usaremos el comando: gpg --verify autofirma-X.Y.Z.noarch.rpm.sig autofirma-X.Y.Z.noarch.rpm","title":"Comprobaci\u00f3n de firma externa"},{"location":"markdown_strict/AF_Instalador%20Linux/#generacion-de-sha1sum","text":"Al publicar el instalador es recomendable publicar tambi\u00e9n en la web las huellas digitales de cada uno de los ficheros para que los usuarios puedan comprobar la validez de los ficheros descargados. Se puede generar la huella de todos los ficheros que deseemos con el comando: sha1sum FICHERO Para calcular la huella de todos los ficheros, se puede usar en el directorio: sha1sum *","title":"Generaci\u00f3n de sha1sum"},{"location":"markdown_strict/AF_Instalador%20Linux/#instalacion-de-la-aplicacion_1","text":"Antes de instalar la aplicaci\u00f3n, si el instalador RPM de esta se ha firmado, se deber\u00eda agregar la clave p\u00fablica PGP del firmante al almac\u00e9n de confianza del sistema. La clave p\u00fablica PGP puede descargarse como un fichero \u201c.asc\u201d junto al archivo de instalaci\u00f3n. Para importar esta clave PGP a nuestro almac\u00e9n usaremos el comendo: sudo rpm --import PUBLIC_KEY.asc En este comando, \u201cPUBLIC_KEY.asc\u201d ser\u00e1 el fichero con la clave p\u00fablica. Una vez importada la clave PGP, el sistema podr\u00e1 validar autom\u00e1ticamente la firma del instalador RPM. Para instalar AutoFirma a partir del archivo RPM existen varias opciones, de las cuales se presentan dos: Hacer doble clic sobre el fichero, el fichero se instalar\u00e1 mediante el instalador de paquetes del sistema. Desde l\u00ednea de comandos, ejecutar: sudo rpm -i autofirma-X.Y.Z.noarch.rpm En la sentencia anterior, \u201cautofirma-X.Y.Z.noarch.rpm\u201d ser\u00eda el nombre del fichero RPM que se desea instalar.","title":"Instalaci\u00f3n de la aplicaci\u00f3n"},{"location":"markdown_strict/AF_Instalador%20Linux/#desinstalacion-de-la-aplicacion_1","text":"Para realizar la desinstalaci\u00f3n de un fichero RPM en el sistema hay que escribir el siguiente comando en la consola (requiere permisos de administraci\u00f3n) sudo rpm \u2013e autofirma En la sentencia anterior, \u201cautofirma\u201d es el nombre predefinido del paquete con el que se ha instalado en la aplicaci\u00f3n, dicho nombre viene definido en el fichero de especificaci\u00f3n del instalador, por lo que la sentencia debe escribirse tal cual.","title":"Desinstalaci\u00f3n de la aplicaci\u00f3n"},{"location":"markdown_strict/AF_Instalador%20Linux/#actualizacion-de-la-aplicacion","text":"El proceso de actualizaci\u00f3n de los RPM implica la instalaci\u00f3n de una versi\u00f3n y la desinstalaci\u00f3n de la anterior. Debido a un problema en el proceso de desinstalaci\u00f3n de AutoFirma 1.7.1 y anteriores, al desinstalarlas se eliminan tambi\u00e9n recursos de la versi\u00f3n a la que se estaba desinstalando. Por este motivo, cuando queramos actualizar desde AutoFirma 1.8 a una posterior, bastar\u00e1 usar el comando: sudo rpm -U autofirma-X.Y.Z.noarch.rpm Sin embargo, cuando estemos actualizando desde una versi\u00f3n anterior, deberemos indicar que no se ejecute el proceso de desinstalaci\u00f3n de esa versi\u00f3n. Para ello usaremos el comando. sudo rpm -U --nopreun --nopostun autofirma-X.Y.Z.noarch.rpm","title":"Actualizaci\u00f3n de la aplicaci\u00f3n"},{"location":"markdown_strict/AF_Instalador%20Mac%20OS%20X/","text":"El proceso de generaci\u00f3n de un instalador . pkg de la aplicaci\u00f3n AutoFirma consta de cuatro fases principales. Una primera en la que se prepara un directorio .app con los ficheros necesarios para realizar la instalaci\u00f3n. Posteriormente este directorio debe ser firmado. En la tercera fase se genera el fichero .pkg a partir del directorio .app firmado anteriormente. Por \u00faltimo se firma el fichero .pkg generado. Para realizar las firmas es preferible que se realice con un certificado para firmar c\u00f3digo expedido por Apple. Generando la estructura de directorios y los scripts de pre y post instalaci\u00f3n. La estructura de carpetas para generaci\u00f3n el instalador es la siguiente: AutoFirma.app . Es la aplicaci\u00f3n AutoFirma. En realidad, esta aplicaci\u00f3n es una estructura de directorios con una organizaci\u00f3n concreta. scripts : Es la carpeta que contiene el script de postinstalaci\u00f3n. La estructura de carpetas para el empaquetado ya incluye todos los ficheros necesarios para el empaquetado del producto a excepci\u00f3n de los JAR de AutoFirma y el configurador. Para incluir estos ficheros debemos hacer clic en el fichero AutoFirma.app con el bot\u00f3n secundario del rat\u00f3n (o con el bot\u00f3n primario y la tecla Control pulsada) y seleccionar \u201cMostar el contenido del paquete\u201d. Los JAR se deber\u00e1n almacenar en el directorio / Contents/Resources/JAR con los nombres \u201c AutoFirma.jar \u201d y \u201c AutoFirmaConfigurador.jar \u201d, respectivamente. El contenido del directorio \u201c AutoFirma.app\u201d deber\u00eda quedar as\u00ed: < IMPORTANTE: Es importante tener en cuenta al instalar AutoFirma que, si existe una versi\u00f3n anterior ya instalada, la aplicaci\u00f3n se instalar\u00e1 en la misma ruta que esta y no en la carpeta Aplicaciones. Actualizaci\u00f3n de la JRE Si se desea actualizar la versi\u00f3n de Java incluida en el paquete de instalaci\u00f3n, se puede eliminar el contenido del directorio / Contents/Resources/Home y reemplazarlo por el directorio \u201cHome\u201d de la JRE que desee incluir. Se recomienda reducir el tama\u00f1o del JRE eliminando componentes que no utilice AutoFirma (como las extensiones y bibliotecas de JavaFX, por ejemplo). A continuaci\u00f3n: Hay que realizar una copia del ejecutable \u201cjava\u201d en el mismo directorio, y cambiarles el nombre al fichero original y a la copia para llamarlos: AutoFirma -> Se encargar\u00e1 de ejecutar AutoFirma.jar ejecutar -> Se encargar\u00e1 de ejecutar AutoFirmaConfigurador.jar No puede haber un fichero que se llame java Se debe copiar al directorio \u201cbin\u201d, donde se encuentran los de ejecutables de Java, las bibliotecas \u201clibnss3.dylib\u201d, \u201clibmozglue.dylib\u201d y \u201clibsoftokn3.dylib\u201d que vienen con Firefox. Esto es necesario porque ser\u00e1 en este directorio en donde busque Java estas bibliotecas cuando intente acceder al almac\u00e9n de certificados de Firefox. Se debe introducir en el almac\u00e9n de confianza de la nueva JRE los certificados de las autoridades de certificaci\u00f3n que se deseen. Para facilitar esta tarea, se provee del script \u201cinsert_certs.sh\u201d. Este script deber\u00e1 localizarse en el directorio de los certificados a insertar y deber\u00e1n reajustarse en el script las rutas de la JRE a la que se le desean agregar los certificados. Generar el fichero .pkg en OS X Para la generaci\u00f3n del instalador de AutoFirma se presentan 2 alternativas. Generaci\u00f3n mediante packages La aplicaci\u00f3n packages nos permite empaquetar una aplicaci\u00f3n, configurando aspectos que no es posible configurar mediante la herramienta pkgbuild (que se presenta m\u00e1s adelante). La estructura de empaquetado ya incluye un proyecto de packages, llamado AutoFirma.pkgproj , situado junto a \u201cAutoFirma.app\u201d y el directorio \u201cscripts\u201d, a los que hace referencia. Para la generaci\u00f3n del paquete, primeramente, se deber\u00e1 abrir el proyecto \u201c AutoFirma.pkgproj \u201d. La aplicaci\u00f3n packages se nos presentar\u00e1 con una apariencia similar a la siguiente: < En caso de que fuese necesario (por haber copiado el proyecto), se deber\u00e1n corregir las referencias a los directorios \u201cAutoFirma.app\u201d y \u201cscripts\u201d. Para construir el proyecto basta con acceder al men\u00fa \u201cBuild\u201d y pulsar en la opci\u00f3n \u201cBuild\u201d (Command+B). El paquete se crear\u00e1 con el nombre \u201cAutoFirma.pkg\u201d en el mismo directorio que el fichero de proyecto. Generaci\u00f3n por l\u00ednea de comandos Hay que ejecutar el comando pkgbuild con los siguientes par\u00e1metros: pkgbuild --install-location <installation-path> --scripts <scripts-path> --component <component-path> <package-output-path> installation-path : Ruta donde se instalar\u00e1 el paquete, la ruta habitual suele ser: /Applications scripts-path: Ruta donde se encuentra la carpeta con los scripts. component-path : Ruta del fichero .app que se a\u00f1ade al instalador. En nuestro caso \u201cCliente @firma para OS X.app\u201d package-output-path : Ruta donde se generar\u00e1 el instalador . pkg . En nuestro caso AutoFirmaInstaller.pkg Si todo ha ocurrido sin problemas se mostrar\u00e1n los siguientes mensajes: Pkgbuild: Adding component at component-path Pkgbuild: Addig top-level postinstall script (si hay preinstall script aparecer\u00e1 un mensaje an\u00e1logo) Pkgbuild: Wrote package to package-output-path El fichero .pkg se habr\u00e1 generado y se podr\u00e1 ejecutar haciendo doble clic. Si no sale el mensaje \u201cAdding top-level \u2026 script\u201d quiere decir que no ha reconocido el script de postinstalaci\u00f3n, repasa el punto 2. Para una informaci\u00f3n m\u00e1s detallada sobre el comando pkgbuild y sus par\u00e1metros consultar la ayuda de Apple: https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/pkgbuild.1.html Firmar el fichero .pkg en OS X Para firmar el fichero .pkg es necesario un certificado de desarrollador expedido por Apple v\u00e1lido para la distribuci\u00f3n de aplicaciones OS X (consulte con Apple para m\u00e1s informaci\u00f3n). Hay que ejecutar el siguiente comando: productsign \u2013sign <Nombre certificado> <original.pkg> <firmado.pkg> Nombre certificado: Nombre del certificado tal como aparece en el llavero de OS X (podemos observarlo en la siguiente imagen). original.pkg: Nombre del fichero .pkg que queremos firmar. firmado.pkg: Nombre del .pkg firmado (No tiene por qu\u00e9 ser el mismo nombre que el original). < Ejemplo: productsign \u2013sign com.apple.idms.appleid.prd.6f5772585537487363e4d76793868355a48413369673d3d ./Desktop/test/\u201dCliente @firma para OS X.pkg\u201d AutoFirma_1.5.pkg Si todo ha ocurrido sin problemas se mostrar\u00e1n los siguientes mensajes: productsign: adding certificate \u201cApple Application Integration Certification Authority\u201d productsign: adding certificate \u201cApple Root CA\u201d productsign: Wrote signed_product archive to AutoFirma_1.5_installer.pkg Tal como vemos en la siguiente imagen: < Para una informaci\u00f3n m\u00e1s detallada sobre el comando productsign y sus par\u00e1metros consultar la ayuda de Apple: https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/productsign.1.html","title":"AF Instalador Mac OS X"},{"location":"markdown_strict/AF_Instalador%20Mac%20OS%20X/#generando-la-estructura-de-directorios-y-los-scripts-de-pre-y-post-instalacion","text":"La estructura de carpetas para generaci\u00f3n el instalador es la siguiente: AutoFirma.app . Es la aplicaci\u00f3n AutoFirma. En realidad, esta aplicaci\u00f3n es una estructura de directorios con una organizaci\u00f3n concreta. scripts : Es la carpeta que contiene el script de postinstalaci\u00f3n. La estructura de carpetas para el empaquetado ya incluye todos los ficheros necesarios para el empaquetado del producto a excepci\u00f3n de los JAR de AutoFirma y el configurador. Para incluir estos ficheros debemos hacer clic en el fichero AutoFirma.app con el bot\u00f3n secundario del rat\u00f3n (o con el bot\u00f3n primario y la tecla Control pulsada) y seleccionar \u201cMostar el contenido del paquete\u201d. Los JAR se deber\u00e1n almacenar en el directorio / Contents/Resources/JAR con los nombres \u201c AutoFirma.jar \u201d y \u201c AutoFirmaConfigurador.jar \u201d, respectivamente. El contenido del directorio \u201c AutoFirma.app\u201d deber\u00eda quedar as\u00ed: < IMPORTANTE: Es importante tener en cuenta al instalar AutoFirma que, si existe una versi\u00f3n anterior ya instalada, la aplicaci\u00f3n se instalar\u00e1 en la misma ruta que esta y no en la carpeta Aplicaciones.","title":"Generando la estructura de directorios y los scripts de pre y post instalaci\u00f3n."},{"location":"markdown_strict/AF_Instalador%20Mac%20OS%20X/#actualizacion-de-la-jre","text":"Si se desea actualizar la versi\u00f3n de Java incluida en el paquete de instalaci\u00f3n, se puede eliminar el contenido del directorio / Contents/Resources/Home y reemplazarlo por el directorio \u201cHome\u201d de la JRE que desee incluir. Se recomienda reducir el tama\u00f1o del JRE eliminando componentes que no utilice AutoFirma (como las extensiones y bibliotecas de JavaFX, por ejemplo). A continuaci\u00f3n: Hay que realizar una copia del ejecutable \u201cjava\u201d en el mismo directorio, y cambiarles el nombre al fichero original y a la copia para llamarlos: AutoFirma -> Se encargar\u00e1 de ejecutar AutoFirma.jar ejecutar -> Se encargar\u00e1 de ejecutar AutoFirmaConfigurador.jar No puede haber un fichero que se llame java Se debe copiar al directorio \u201cbin\u201d, donde se encuentran los de ejecutables de Java, las bibliotecas \u201clibnss3.dylib\u201d, \u201clibmozglue.dylib\u201d y \u201clibsoftokn3.dylib\u201d que vienen con Firefox. Esto es necesario porque ser\u00e1 en este directorio en donde busque Java estas bibliotecas cuando intente acceder al almac\u00e9n de certificados de Firefox. Se debe introducir en el almac\u00e9n de confianza de la nueva JRE los certificados de las autoridades de certificaci\u00f3n que se deseen. Para facilitar esta tarea, se provee del script \u201cinsert_certs.sh\u201d. Este script deber\u00e1 localizarse en el directorio de los certificados a insertar y deber\u00e1n reajustarse en el script las rutas de la JRE a la que se le desean agregar los certificados.","title":"Actualizaci\u00f3n de la JRE"},{"location":"markdown_strict/AF_Instalador%20Mac%20OS%20X/#generar-el-fichero-pkg-en-os-x","text":"Para la generaci\u00f3n del instalador de AutoFirma se presentan 2 alternativas.","title":"Generar el fichero .pkg en OS X"},{"location":"markdown_strict/AF_Instalador%20Mac%20OS%20X/#generacion-mediante-packages","text":"La aplicaci\u00f3n packages nos permite empaquetar una aplicaci\u00f3n, configurando aspectos que no es posible configurar mediante la herramienta pkgbuild (que se presenta m\u00e1s adelante). La estructura de empaquetado ya incluye un proyecto de packages, llamado AutoFirma.pkgproj , situado junto a \u201cAutoFirma.app\u201d y el directorio \u201cscripts\u201d, a los que hace referencia. Para la generaci\u00f3n del paquete, primeramente, se deber\u00e1 abrir el proyecto \u201c AutoFirma.pkgproj \u201d. La aplicaci\u00f3n packages se nos presentar\u00e1 con una apariencia similar a la siguiente: < En caso de que fuese necesario (por haber copiado el proyecto), se deber\u00e1n corregir las referencias a los directorios \u201cAutoFirma.app\u201d y \u201cscripts\u201d. Para construir el proyecto basta con acceder al men\u00fa \u201cBuild\u201d y pulsar en la opci\u00f3n \u201cBuild\u201d (Command+B). El paquete se crear\u00e1 con el nombre \u201cAutoFirma.pkg\u201d en el mismo directorio que el fichero de proyecto.","title":"Generaci\u00f3n mediante packages"},{"location":"markdown_strict/AF_Instalador%20Mac%20OS%20X/#generacion-por-linea-de-comandos","text":"Hay que ejecutar el comando pkgbuild con los siguientes par\u00e1metros: pkgbuild --install-location <installation-path> --scripts <scripts-path> --component <component-path> <package-output-path> installation-path : Ruta donde se instalar\u00e1 el paquete, la ruta habitual suele ser: /Applications scripts-path: Ruta donde se encuentra la carpeta con los scripts. component-path : Ruta del fichero .app que se a\u00f1ade al instalador. En nuestro caso \u201cCliente @firma para OS X.app\u201d package-output-path : Ruta donde se generar\u00e1 el instalador . pkg . En nuestro caso AutoFirmaInstaller.pkg Si todo ha ocurrido sin problemas se mostrar\u00e1n los siguientes mensajes: Pkgbuild: Adding component at component-path Pkgbuild: Addig top-level postinstall script (si hay preinstall script aparecer\u00e1 un mensaje an\u00e1logo) Pkgbuild: Wrote package to package-output-path El fichero .pkg se habr\u00e1 generado y se podr\u00e1 ejecutar haciendo doble clic. Si no sale el mensaje \u201cAdding top-level \u2026 script\u201d quiere decir que no ha reconocido el script de postinstalaci\u00f3n, repasa el punto 2. Para una informaci\u00f3n m\u00e1s detallada sobre el comando pkgbuild y sus par\u00e1metros consultar la ayuda de Apple: https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/pkgbuild.1.html","title":"Generaci\u00f3n por l\u00ednea de comandos"},{"location":"markdown_strict/AF_Instalador%20Mac%20OS%20X/#firmar-el-fichero-pkg-en-os-x","text":"Para firmar el fichero .pkg es necesario un certificado de desarrollador expedido por Apple v\u00e1lido para la distribuci\u00f3n de aplicaciones OS X (consulte con Apple para m\u00e1s informaci\u00f3n). Hay que ejecutar el siguiente comando: productsign \u2013sign <Nombre certificado> <original.pkg> <firmado.pkg> Nombre certificado: Nombre del certificado tal como aparece en el llavero de OS X (podemos observarlo en la siguiente imagen). original.pkg: Nombre del fichero .pkg que queremos firmar. firmado.pkg: Nombre del .pkg firmado (No tiene por qu\u00e9 ser el mismo nombre que el original). < Ejemplo: productsign \u2013sign com.apple.idms.appleid.prd.6f5772585537487363e4d76793868355a48413369673d3d ./Desktop/test/\u201dCliente @firma para OS X.pkg\u201d AutoFirma_1.5.pkg Si todo ha ocurrido sin problemas se mostrar\u00e1n los siguientes mensajes: productsign: adding certificate \u201cApple Application Integration Certification Authority\u201d productsign: adding certificate \u201cApple Root CA\u201d productsign: Wrote signed_product archive to AutoFirma_1.5_installer.pkg Tal como vemos en la siguiente imagen: < Para una informaci\u00f3n m\u00e1s detallada sobre el comando productsign y sus par\u00e1metros consultar la ayuda de Apple: https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/productsign.1.html","title":"Firmar el fichero .pkg en OS X"},{"location":"markdown_strict/AF_Instalador%20Windows/","text":"AutoFirma cuenta con dos tipos de instaladores para sistemas operativos Windows: Fichero .exe : Permite instalar la aplicaci\u00f3n mediante una serie de di\u00e1logo gr\u00e1ficos que permiten seleccionar varias opciones de configuraci\u00f3n. El instalador .exe de AutoFirma est\u00e1 pensado para ser utilizado por los usuarios de la aplicaci\u00f3n. Fichero .msi: Permite automatizar el proceso de instalaci\u00f3n, reduciendo al m\u00ednimo la intervenci\u00f3n manual, ya que toda la informaci\u00f3n. El instalador .msi de AutoFirma est\u00e1 pensado para ser utilizado por administradores de sistemas que deseen realizar despliegues masivos de la aplicaci\u00f3n. Este documento tiene como objetivo la explicaci\u00f3n en detalle de los pasos necesarios para la generaci\u00f3n de ambos ficheros. Los instaladores Windows de AutoFirma incluyen la JRE con la que se va a ejecutar la aplicaci\u00f3n en el equipo del usuario. Para abarcar los equipos de 32 y 64 bits, se crear\u00e1 una versi\u00f3n para cada una de las arquitecturas en donde la aplicaci\u00f3n ser\u00e1 la misma y cambiar\u00e1 \u00fanicamente algunas propiedades del empaquetado y la versi\u00f3n de Java con la cual se empaqueta. As\u00ed pues, obtendremos 4 versiones del instalador de AutoFirma para Windows: AutoFirma_32_vX_Y_Z_installer.exe AutoFirma_64_vX_Y_Z_installer.exe AutoFirma_32_vX_Y_Z_installer.msi AutoFirma_64_vX_Y_Z_installer.msi Los proyectos java utilizados (AutoFirma y AutoFirmaConfigurador) son los mismos para todos los instaladores. Requisitos m\u00ednimos Sistema operativo: Windows XP SP3 con arquitectura 32 (x86) o 64 (x64) bits. Adicionalmente para la construcci\u00f3n de los instaladores se hace uso de las siguientes herramientas: Java SE Runtime Environment 8 o 9 (32 y 64 bits) ( http://www.oracle.com/technetwork/java/javase/downloads/index.html ) JREs con la que se empaquetar\u00e1n los instaladores. Launch4j ( https://sourceforge.net/projects/launch4j/files/launch4j-3/ ) Herramienta para la envoltura de los JAR de AutoFirma a modo de EXE. WiX ( http://wixtoolset.org/releases/ ) Herramienta para la generaci\u00f3n del instalador MSI. NSIS ( http://nsis.sourceforge.net/Download ) Herramienta para la generaci\u00f3n de los EXE de instalaci\u00f3n. Se requieren tambi\u00e9n los siguientes plugins: NsProcess Plugin ( http://nsis.sourceforge.net/NsProcess_plugin ) Plugin para permitir la detecci\u00f3n y manipulaci\u00f3n de procesos durante la instalaci\u00f3n. Registry Plugin ( https://nsis.sourceforge.io/Registry_plug-in ) Plugin para permitir la b\u00fasqueda de entradas en el registro. Deber\u00e1n localizarse los ficheros de los plugins seg\u00fan la siguiente jerarqu\u00eda: NSIS 2.x: NSIS/ \u251c\u2500\u2500 Include/ \u2502 \u2514\u2500\u2500 nsProcess.nsh \u2514\u2500\u2500 Plugins/ \u2514\u2500\u2500 nsProcess.dll \u2514\u2500\u2500 registry.dll NSIS 3.x: NSIS/ \u251c\u2500\u2500 Include/ \u2502 \u2514\u2500\u2500 nsProcess.nsh \u2502 \u2514\u2500\u2500 Registry.nsh \u2514\u2500\u2500 Plugins/ \u251c\u2500\u2500 x86-ansi/ \u2502 \u2514\u2500\u2500 nsProcess.dll \u2502 \u2514\u2500\u2500 registry.dll \u2514\u2500\u2500 x86-unicode/ \u2514\u2500\u2500 nsProcess.dll \u2514\u2500\u2500 registry.dll Preparaci\u00f3n del entorno Para la generaci\u00f3n del instalador de AutoFirma ser\u00e1 necesario disponer del software listado en el apartado de requisitos m\u00ednimos. Los distintos instaladores de AutoFirma se construir\u00e1n en base a la estructura de directorios y los recursos alojados en el m\u00f3dulo afirma-simple-installler del proyecto clienteafirma en GitHub ( https://github.com/ctt-gob-es/clienteafirma/tree/master/afirma-simple-installer ). Estructura de ficheros Los directorios y ficheros de utilidad que encontraremos dentro de este m\u00f3dulo son: AutoFirma32 Directorio en el que se generar\u00e1n los ejecutables de 32bits. AutoFirma64 Directorio en el que se generar\u00e1n los ejecutables de 64bits. certificados Directorio con los certificados SSL que deben considerarse de confianza. jar Directorio en el que guardar los JAR de AutoFirma. java32 Directorio en el que guardar la JRE que se dese empaquetar con AutoFirma 32bits. java64 Directorio en el que guardar la JRE que se dese empaquetar con AutoFirma 64bits. AutoFirma_32_installer.wxs Fichero para la construcci\u00f3n del instalador MSI de 32bits. AutoFirma_64_installer.wxs Fichero para la construcci\u00f3n del instalador MSI de 64bits. AutoFirma_launch4J_Configurador_project_32.xml Fichero para el empaquetado EXE 32bits de AutoFirmaConfigurador. AutoFirma_launch4J_Configurador_project_64.xml Fichero para el empaquetado EXE 64bits de AutoFirmaConfigurador. AutoFirma_launch4J_project_32.xml Fichero para el empaquetado EXE 32bits de AutoFirma. AutoFirma_launch4J_project_64.xml Fichero para el empaquetado EXE 64bits de AutoFirma. AutoFirma_NSIS_project_EXE_32.nsi Fichero para la generaci\u00f3n del instalador EXE de 32bits. AutoFirma_NSIS_project_EXE_64.nsi Fichero para la generaci\u00f3n del instalador EXE de 64bits. AutoFirma_NSIS_project_MSI_32.nsi Fichero para generar el EXE de instalaci\u00f3n a partir del cual se construye el instalador MSI de 32bits. AutoFirma_NSIS_project_MSI_64.nsi Fichero para generar el EXE de instalaci\u00f3n a partir del cual se construye el instalador MSI de 64bits. AutoFirmaCommandLine_launch4J_project_32.xml Fichero para el empaquetado EXE 32bits de AutoFirma para l\u00ednea de comandos. AutoFirmaCommandLine_launch4J_project_64.xml Fichero para el empaquetado EXE 64bits de AutoFirma para l\u00ednea de comandos. AutoFirmaConfigurator.manifest Fichero de permisos para que ejecuci\u00f3n de AutoFirmaConfigurador con permisos de administrador. AutoFirma_to_msi_32.bat Script para la creaci\u00f3n del instalador MSI de 32 bits a partir de su pre-instalador. AutoFirma_to_msi_64.bat Script para la creaci\u00f3n del instalador MSI de 64 bits a partir de su pre-instalador. ic_firmar.ico Icono de la aplicaci\u00f3n. ic_head.bmp Imagen de cabecera del instalador EXE. ic_install.bmp Imagen lateral del instalador EXE. ic_launcher.ico Icono del lanzador de la aplicaci\u00f3n. licencia.txt Informaci\u00f3n de la licencia del producto. no_ejecutar_x64.exe Desinstalador de la aplicaci\u00f3n para el MSI de 64bits. no_ejecutar_x86.exe Desinstalador de la aplicaci\u00f3n para el MSI de 32bits. splash.bmp Imagen splash que se muestra al abrir la aplicaci\u00f3n antes de que aparezca la primera pantalla. Configuraci\u00f3n de las JRE empaquetadas Las JRE con las que se empaquetar\u00e1n los instaladores de AutoFirma en Windows no est\u00e1n incluidos en el directorio cargado en el repositorio de c\u00f3digo. El desarrollador encargado de empaquetarlo deber\u00e1 introducirlos en su copia local de esta estructura. No se debe subir nunca su contenido al repositorio por su tama\u00f1o, que no siempre querremos usar la misma JRE y, seg\u00fan la versi\u00b4\u00e7on empleada, por problemas de licencia. Las instrucciones para la configuraci\u00f3n de las JRE son las siguientes: Copiar las JRE El usuario deber\u00e1 copiar a los directorios \u201cjava32\u201d y \u201cjava64\u201d una JRE de 32 y 64 bits respectivamente. Aqu\u00ed se debe copiar el directorio \u201cjre\u201d (directorio incluido) de la JRE que se desee utilizar. La estructura resultante ser\u00eda: java32 jre <ficheros_jre> java64 jre <ficheros_jre> Podemos, por ejemplo, instalarnos una JRE en nuestro equipo y luego copiar el directorio \u201cjre\u201d del directorio de instalaci\u00f3n en el directorio \u201cjava32\u201d o \u201cjava64\u201d seg\u00fan corresponda. Se debe utilizar una JRE 8 o superior, aunque se recomienda utilizar siempre la \u00faltima disponible en el momento de empaquetar. Las JRE de 32 y 64 bits utilizadas pueden tener distinta versi\u00f3n. Eliminar lo innecesario Opcionalmente, se pueden eliminar los ficheros de las JRE que se sepan que son innecesarios para el correcto funcionamiento de la JVM durante la ejecuci\u00f3n de AutoFirma. Esto sirve para reducir el tama\u00f1o del instalador final y deber\u00eda hacerse \u00fanica y exclusivamente cuando estemos seguros de que no afectar\u00e1 a la operativa de la aplicaci\u00f3n. Por ejemplo, se pueden eliminar ficheros relativos al uso de JavaFX, ya que este API no se utiliza en AutoFirma y no son parte imprescindible de la JRE. As\u00ed pues, se eliminar\u00edan, entre otros, la extensi\u00f3n \u201cjfxrt.jar\u201d (17 Mb) y la biblioteca \u201cjfxwebkit.dll\u201d (42 Mb). Instalar certificados SSL Para el correcto funcionamiento de AutoFirma frente a determinados servicios sobre SSL es necesario que se inserten en el almac\u00e9n de confianza de las JRE los certificados de las autoridades susceptibles a utilizar por los servicios y que no est\u00e9n reconocidas por defecto en Java. En el directorio \u201ccertificados\u201d se han guardado los certificados de ra\u00edces e intermedios de varias autoridades espa\u00f1olas. Si se desean agregar otros certificados como de confianza por defecto para AutoFirma, se deber\u00edan copiar los correspondientes certificados a este directorio. Para insertar los certificados del directorio \u201ccertificados\u201d en los almacenes de confianza de las dos JRE configuradas, se deber\u00e1 ejecutar el script \u201cinsert_cacerts.bat\u201d del directorio certificados. Este script utilizar\u00e1 la herramienta \u201ckeytool\u201d de las JRE para insertar todos los certificados del directorio \u201ccertificados\u201d en el almac\u00e9n de confianza (cacerts) de las propias JRE. Configuraci\u00f3n de la versi\u00f3n de AutoFirma Cada nueva versi\u00f3n de AutoFirma puede requerir que se actualicen diversos recursos de los ficheros de instalaci\u00f3n. Ejemplos claros son el n\u00famero de versi\u00f3n y la fecha del copyright . Los textos susceptibles de actualizarse en cada nueva versi\u00f3n de AutoFirma se encuentran en los siguientes ficheros de la estructura de directorios: AutoFirma_32_installer.wxs N\u00famero de versi\u00f3n de AutoFirma 32bits. AutoFirma_64_installer.wxs N\u00famero de versi\u00f3n de AutoFirma 64bits. AutoFirma_launch4J_project_32.xml N\u00famero de versi\u00f3n del configurador de 32bits. AutoFirma_launch4J_project_64.xml N\u00famero de versi\u00f3n del configurador de 64bits. AutoFirmaCommandLine_launch4J_project_32.xml N\u00famero de versi\u00f3n de AutoFirma 32bits. AutoFirmaCommandLine_launch4J_project_64.xml N\u00famero de versi\u00f3n de AutoFirma 32bits. AutoFirma_NSIS_project_EXE_32.nsi N\u00famero de versi\u00f3n y nombre del instalador EXE de 32bits. AutoFirma_NSIS_project_EXE_64.nsi N\u00famero de versi\u00f3n y nombre del instalador EXE de 64bits. AutoFirma_NSIS_project_MSI_32.nsi N\u00famero de versi\u00f3n de AutoFirma 32bits. AutoFirma_NSIS_project_MSI_64.nsi N\u00famero de versi\u00f3n de AutoFirma 64bits. AutoFirma_to_msi_32.bat N\u00famero de versi\u00f3n del nombre del instalador MSI de 32bits. AutoFirma_to_msi_64.bat N\u00famero de versi\u00f3n del nombre del instalador MSI de 64bits. licencia.txt Texto de licencia, versi\u00f3n y a\u00f1o de copyright . splash.bmp A\u00f1o del copyright . Generaci\u00f3n de los ejecutables JAR Como primer paso para la creaci\u00f3n de los instaladores de AutoFirma, es necesario generar sus ejecutables. Para ello, deberemos descargarnos el proyecto \u201cclienteafirma\u201d de GitHub ( https://github.com/ctt-gob-es/clienteafirma ) y generar los distintos artefactos. Todas las dependencias de este proyecto est\u00e1n en el repositorio central de Maven pero, si se estuviese utilizando una versi\u00f3n a\u00fan no publicada de las biblioteca modificadas de AutoFirma y del proyecto JMulticard, ser\u00eda necesario descargar y compilar tambi\u00e9n estos proyectos. Para compilar cada uno de los proyectos, deberemos ejecutar el siguiente comando en el directorio principal de cada uno de ellos: mvn clean install \u2013DskipTests El orden de ejecuci\u00f3n debe ser: Proyecto \u201cclienteafirma-external\u201d (S\u00f3lo si se usase una versi\u00f3n no publicada) Proyecto \u201cjmulticard\u201d (S\u00f3lo si se usase una versi\u00f3n no publicada) Proyecto \u201cclienteafirma\u201d Una vez hecho esto, se habr\u00e1n generado todos los artefactos del n\u00facleo del Cliente @firma. Para generar los artefactos distribuibles se deber\u00e1 ejecutar, en el directorio del proyecto \u201cclienteafirma\u201d el comando:: mvn clean install \u2013DskipTests \u2013Denv=install Esta ejecuci\u00f3n habr\u00e1 generado los JAR \u201c AutoFirma.jar \u201d y \u201c AutoFirmaConfigurador.jar \u201d dentro del directorio \u201ctarget\u201d de los m\u00f3dulos \u201cafirma-simple\u201d y \u201cafirma-ui-simple-configurator\u201d, respectivamente. Generaci\u00f3n de los ejecutables EXE El siguiente paso es generar los ficheros EXE de la aplicaci\u00f3n a partir de los archivos JAR que se generaron en el apartado anterior. Para ello, primeramente, copiaremos los ficheros \u201c AutoFirma.jar \u201d y \u201c AutoFirmaConfigurador.jar \u201d al directorio \u201cjar\u201d del m\u00f3dulo afirma-simple-installer . Para obtener los ejecutables EXE de AutoFirma se har\u00e1 uso de la aplicaci\u00f3n Launch4j. As\u00ed, deberemos abrir la aplicaci\u00f3n, seleccionar uno de los ficheros de configuraci\u00f3n (icono con el icono de carpeta) y pulsar el bot\u00f3n \u201cBuild wrapper\u201d (bot\u00f3n con el icono de engranaje) (Figuras 1 y 2). < Figura 1 < Figura 2 El proceso debe repetirse para los ficheros de configuraci\u00f3n: AutoFirma_launch4J_project_32.xml AutoFirmaCommandLine_launch4J_project_32.xml AutoFirmaConfigurator_launch4J_project_32.xml AutoFirma_launch4J_project_64.xml AutoFirmaCommandLine_launch4J_project_64.xml AutoFirmaConfigurator_launch4J_project_64.xml Como resultado, se deben haber generado los ficheros EXE \u201c AutoFirma.exe \u201d, \u201c AutoFirmaCommandLine.exe \u201d y \u201c AutoFirmaConfigurador.exe \u201d, tanto en el directorio \u201cAutoFirma32\u201d como en \u201cAutoFirma64\u201d (6 ficheros en total). Firma de los ejecutables La firma de los ejecutables generados en el apartado anterior es opcional, pero deber\u00eda hacerse cuando haya intenci\u00f3n de publicar el instalador que se va a generar. Los ejecutables anteriores no son corrientes, ya que en realidad son archivos JAR con una envoltura EXE. Este EXE, adem\u00e1s, no est\u00e1 preparado para ser firmado directamente y debe realizarse a trav\u00e9s de la herramienta \u201csign4j\u201d, que a su vez utilizar\u00e1 otra herramienta de firma. Un ejemplo del uso de esta herramienta para la firma del fichero EXE con la herramienta SignTool de Microsoft, algoritmo SHA256withRSA y un sello de tiempo ser\u00eda: sign4j signtool sign /f ALMACEN.p12 /p CONTRASE\u00d1A /a /fd SHA256 /tr http://sha256timestamp.ws.symantec.com/sha256/timestamp RUTA_EXE En este comando: ALMACEN.p12: Es la ruta del almac\u00e9n PKCS#12/PFX que contiene la clave de firma. CONTRASE\u00d1A: Es la contrase\u00f1a del almac\u00e9n de claves. RUTA_EXE: Es la ruta hacia el fichero EXE que se desea firmar. Generaci\u00f3n de los instaladores EXE Una vez disponemos de los ficheros ejecutables EXE (ya sea firmados o no) se generar\u00e1 el instalador mediante la herramienta NSIS. Para esto, se pincha con el bot\u00f3n derecho del rat\u00f3n en el fichero AutoFirma_NSIS_project_EXE_32.nsi y se pulsa en la opci\u00f3n \u201cCompile NSIS Script\u201d (Figura 3). Este proceso generar\u00e1 en el directorio \u201cAutoFirma32\u201d el instalador AutoFirma_32_vX_Y_Z_installer.exe (Figura 4). < Figura 3 < Figura 4 Al repetir el proceso con el fichero AutoFirma_NSIS_project_EXE_64.nsi, se obtendr\u00e1 el instalador AutoFirma_64_vX_Y_Z_installer.exe en el directorio \u201cAutoFirma64\u201d. Con esto, ya estar\u00edan operativos los ejecutables EXE. Sin embargo, en caso de que se deseasen publicar, es recomendable que se firmen antes con un certificado de firma de c\u00f3digo reconocido por Microsoft. El proceso de firma se detalla en el apartado Firma de los instaladores . Generaci\u00f3n de los instaladores MSI Para la generaci\u00f3n del instalador MSI se hace uso de las herramientas de WiX que deben descargarse, instalarse y agregarse su ruta de binarios a la variable de entorno PATH. La ruta en cuesti\u00f3n para la instalaci\u00f3n por defecto es C:\\Program Files (x86)\\WiX Toolset v3.11\\bin . A continuaci\u00f3n, se ejecutar\u00e1 el script NSIS AutoFirma_NSIS_project_MSI_32.nsi o AutoFirma_NSIS_project_MSI_64.nsi , seg\u00fan se desee generar el instalador de 32 o 64 bits. (Figura 5). < Figura 5 Esto dar\u00e1 lugar al ejecutable \u201cAutoFirmaGenerator.exe\u201d en el directorio \u201cAutoFirma32\u201d o \u201cAutoFirma64\u201d, seg\u00fan corresponda. A diferencia de los instaladores EXE generados anteriormente, el instalador MSI no crea ni elimina informaci\u00f3n del registro, ni tampoco genera un ejecutable de desinstalaci\u00f3n. \u00danicamente crea la estructura de directorios de la aplicaci\u00f3n y genera e importa los certificados necesarios. El resto de tareas las completa el ejecutable \u201cAutoFirmaGenerator.exe\u201d que acabamos de generar y que ya contiene las aplicaciones de AutoFirma y la JRE. Este ejecutable es el que se deber\u00e1 empaquetar en forma de MSI. Si el instalador MSI que vamos a generar va a publicarse, deber\u00edamos firmar antes el ejecutable \u201cAutoFirmaGenerator.exe\u201d. El proceso de firma de este ejecutable es igual que el de los propios instaladores. Consulte el apartado Firma de los instaladores para m\u00e1s informaci\u00f3n. Para generar el instalador MSI, ya se haya firmado \u201cAutoFirmaGenerator.exe\u201d o no, se deber\u00e1 ejecutar el script AutoFirma_to_msi_32.bat , o su equivalente para 64 bits. Este script utiliza los siguientes recursos para la generaci\u00f3n del instalador: AutoFirmaGenerator.exe: El pre-instalador generado anteriormente. no_ejecutar_x86.exe / no_ejecutar_x64.exe: Ejecutables para la desinstalaci\u00f3n parcial de la aplicaci\u00f3n. Se les ha asignado ese nombre para evitar que un usuario lo ejecute, dado que desinstalar\u00eda la aplicaci\u00f3n, pero no eliminar\u00eda su registro del panel de aplicaciones. Se encuentran ya en el directorio. AutoFirma_32_installer.wxs / AutoFirma_64_installer.wxs: Fichero de configuraci\u00f3n que definen el proceso de generaci\u00f3n del instalador MSI. Iconos de la aplicaci\u00f3n El instalador MSI creado habr\u00e1 aparecido en el directorio \u201cAutoFirma32\u201d con el nombre AutoFirma_32_vX_Y_Z_installer.msi , o en el directorio \u201cAutoFirma64\u201d con el nombre AutoFirma_64_vX_Y_Z_installer.msi, seg\u00fan cu\u00e1l se ejecutase. Con esto, ya estar\u00edan operativos los ejecutables MSI. Sin embargo, en caso de que se deseasen publicar, es recomendable que se firmen antes con un certificado de firma de c\u00f3digo reconocido por Microsoft. El proceso de firma se detalla en el apartado Firma de los instaladores . Crear nuevos desinstaladores Es necesario destacar que los desinstaladores de la aplicaci\u00f3n (\u201cno_ejecutar_x86.exe\u201d y \u201cno_ejecutar_x64.exe\u201d) no se generan como parte de la creaci\u00f3n del instalador MSI y por eso es necesario disponer de ellos antes de generar el instalador. Estos desinstaladores, en realidad, se han generado como parte de la creaci\u00f3n del instalador EXE. Sin embargo, los desinstaladores del MSI, al contrario que los del EXE, deben ser totalmente silenciosos, por lo que deben cerrar los navegadores web abiertos autom\u00e1ticamente y no pedir consentimiento al usuario. Para generar los desinstaladores del MSI es necesario modificar el script de desinstalaci\u00f3n del instalador EXE para que cierre autom\u00e1ticamente los navegadores web, despu\u00e9s generar una versi\u00f3n de los instaladores EXE (32 y 64 bits) con los scripts modificados, instalarlos y coger sus desinstaladores. Despu\u00e9s se les debe cambiar el nombre a no_ejecutar_x86.exe y no_ejecutar_x64.exe , seg\u00fan corresponde. La versi\u00f3n del instalador EXE generado debe desecharse, ya que el proceso de desinstalaci\u00f3n de los instaladores EXE, s\u00ed debe pedir al usuario que cierre los navegadores web abiertos. Si en alg\u00fan momento fuese necesario modificar el comportamiento del desinstalador del MSI, se deber\u00eda modificar el script de creaci\u00f3n del instalador EXE y repetir el proceso descrito. Para realizar el cambio concreto de cerrar los navegadores silenciosamente, en la secci\u00f3n \u201cuninstall\u201d de los ficheros de configuraci\u00f3n \u201cAutoFirma_NSIS_project_EXE_32.nsi\u201d y \u201cAutoFirma_NSIS_project_EXE_64.nsi\u201d se ha dejado comentado el cambio a realizar. Los nuevos desinstaladores deber\u00edan subirse al repositorio para evitar repetir el proceso cada vez. Firma de los instaladores Firmar los ejecutables con un certificado de firma de c\u00f3digo reconocido por Microsoft permitir\u00e1 a los usuarios identificar si la aplicaci\u00f3n est\u00e1 generada por una entidad de confianza. La firma de los instaladores EXE, MSI y del pre-instalador \u201cAutoFirmaGenerator.exe\u201d se puede realizar como el de cualquier otro ejecutable Microsoft Windows. Un ejemplo del comando para la firma con la herramienta SignTool de Microsoft, algoritmo SHA256withRSA y un sello de tiempo ser\u00eda: signtool sign /f ALMACEN.p12 /p CONTASE\u00d1A /a /fd SHA256 /tr http://sha256timestamp.ws.symantec.com/sha256/timestamp RUTA_EJECUTABLE En este comando: ALMACEN.p12: Es la ruta del almac\u00e9n PKCS#12/PFX que contiene la clave de firma. CONTRASE\u00d1A: Es la contrase\u00f1a del almac\u00e9n de claves. RUTA_EJECUTABLE: Es la ruta hacia el fichero EXE o MSI que se desea firmar. < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"AF Instalador Windows"},{"location":"markdown_strict/AF_Instalador%20Windows/#requisitos-minimos","text":"Sistema operativo: Windows XP SP3 con arquitectura 32 (x86) o 64 (x64) bits. Adicionalmente para la construcci\u00f3n de los instaladores se hace uso de las siguientes herramientas: Java SE Runtime Environment 8 o 9 (32 y 64 bits) ( http://www.oracle.com/technetwork/java/javase/downloads/index.html ) JREs con la que se empaquetar\u00e1n los instaladores. Launch4j ( https://sourceforge.net/projects/launch4j/files/launch4j-3/ ) Herramienta para la envoltura de los JAR de AutoFirma a modo de EXE. WiX ( http://wixtoolset.org/releases/ ) Herramienta para la generaci\u00f3n del instalador MSI. NSIS ( http://nsis.sourceforge.net/Download ) Herramienta para la generaci\u00f3n de los EXE de instalaci\u00f3n. Se requieren tambi\u00e9n los siguientes plugins: NsProcess Plugin ( http://nsis.sourceforge.net/NsProcess_plugin ) Plugin para permitir la detecci\u00f3n y manipulaci\u00f3n de procesos durante la instalaci\u00f3n. Registry Plugin ( https://nsis.sourceforge.io/Registry_plug-in ) Plugin para permitir la b\u00fasqueda de entradas en el registro. Deber\u00e1n localizarse los ficheros de los plugins seg\u00fan la siguiente jerarqu\u00eda: NSIS 2.x: NSIS/ \u251c\u2500\u2500 Include/ \u2502 \u2514\u2500\u2500 nsProcess.nsh \u2514\u2500\u2500 Plugins/ \u2514\u2500\u2500 nsProcess.dll \u2514\u2500\u2500 registry.dll NSIS 3.x: NSIS/ \u251c\u2500\u2500 Include/ \u2502 \u2514\u2500\u2500 nsProcess.nsh \u2502 \u2514\u2500\u2500 Registry.nsh \u2514\u2500\u2500 Plugins/ \u251c\u2500\u2500 x86-ansi/ \u2502 \u2514\u2500\u2500 nsProcess.dll \u2502 \u2514\u2500\u2500 registry.dll \u2514\u2500\u2500 x86-unicode/ \u2514\u2500\u2500 nsProcess.dll \u2514\u2500\u2500 registry.dll","title":"Requisitos m\u00ednimos"},{"location":"markdown_strict/AF_Instalador%20Windows/#preparacion-del-entorno","text":"Para la generaci\u00f3n del instalador de AutoFirma ser\u00e1 necesario disponer del software listado en el apartado de requisitos m\u00ednimos. Los distintos instaladores de AutoFirma se construir\u00e1n en base a la estructura de directorios y los recursos alojados en el m\u00f3dulo afirma-simple-installler del proyecto clienteafirma en GitHub ( https://github.com/ctt-gob-es/clienteafirma/tree/master/afirma-simple-installer ).","title":"Preparaci\u00f3n del entorno"},{"location":"markdown_strict/AF_Instalador%20Windows/#estructura-de-ficheros","text":"Los directorios y ficheros de utilidad que encontraremos dentro de este m\u00f3dulo son: AutoFirma32 Directorio en el que se generar\u00e1n los ejecutables de 32bits. AutoFirma64 Directorio en el que se generar\u00e1n los ejecutables de 64bits. certificados Directorio con los certificados SSL que deben considerarse de confianza. jar Directorio en el que guardar los JAR de AutoFirma. java32 Directorio en el que guardar la JRE que se dese empaquetar con AutoFirma 32bits. java64 Directorio en el que guardar la JRE que se dese empaquetar con AutoFirma 64bits. AutoFirma_32_installer.wxs Fichero para la construcci\u00f3n del instalador MSI de 32bits. AutoFirma_64_installer.wxs Fichero para la construcci\u00f3n del instalador MSI de 64bits. AutoFirma_launch4J_Configurador_project_32.xml Fichero para el empaquetado EXE 32bits de AutoFirmaConfigurador. AutoFirma_launch4J_Configurador_project_64.xml Fichero para el empaquetado EXE 64bits de AutoFirmaConfigurador. AutoFirma_launch4J_project_32.xml Fichero para el empaquetado EXE 32bits de AutoFirma. AutoFirma_launch4J_project_64.xml Fichero para el empaquetado EXE 64bits de AutoFirma. AutoFirma_NSIS_project_EXE_32.nsi Fichero para la generaci\u00f3n del instalador EXE de 32bits. AutoFirma_NSIS_project_EXE_64.nsi Fichero para la generaci\u00f3n del instalador EXE de 64bits. AutoFirma_NSIS_project_MSI_32.nsi Fichero para generar el EXE de instalaci\u00f3n a partir del cual se construye el instalador MSI de 32bits. AutoFirma_NSIS_project_MSI_64.nsi Fichero para generar el EXE de instalaci\u00f3n a partir del cual se construye el instalador MSI de 64bits. AutoFirmaCommandLine_launch4J_project_32.xml Fichero para el empaquetado EXE 32bits de AutoFirma para l\u00ednea de comandos. AutoFirmaCommandLine_launch4J_project_64.xml Fichero para el empaquetado EXE 64bits de AutoFirma para l\u00ednea de comandos. AutoFirmaConfigurator.manifest Fichero de permisos para que ejecuci\u00f3n de AutoFirmaConfigurador con permisos de administrador. AutoFirma_to_msi_32.bat Script para la creaci\u00f3n del instalador MSI de 32 bits a partir de su pre-instalador. AutoFirma_to_msi_64.bat Script para la creaci\u00f3n del instalador MSI de 64 bits a partir de su pre-instalador. ic_firmar.ico Icono de la aplicaci\u00f3n. ic_head.bmp Imagen de cabecera del instalador EXE. ic_install.bmp Imagen lateral del instalador EXE. ic_launcher.ico Icono del lanzador de la aplicaci\u00f3n. licencia.txt Informaci\u00f3n de la licencia del producto. no_ejecutar_x64.exe Desinstalador de la aplicaci\u00f3n para el MSI de 64bits. no_ejecutar_x86.exe Desinstalador de la aplicaci\u00f3n para el MSI de 32bits. splash.bmp Imagen splash que se muestra al abrir la aplicaci\u00f3n antes de que aparezca la primera pantalla.","title":"Estructura de ficheros"},{"location":"markdown_strict/AF_Instalador%20Windows/#configuracion-de-las-jre-empaquetadas","text":"Las JRE con las que se empaquetar\u00e1n los instaladores de AutoFirma en Windows no est\u00e1n incluidos en el directorio cargado en el repositorio de c\u00f3digo. El desarrollador encargado de empaquetarlo deber\u00e1 introducirlos en su copia local de esta estructura. No se debe subir nunca su contenido al repositorio por su tama\u00f1o, que no siempre querremos usar la misma JRE y, seg\u00fan la versi\u00b4\u00e7on empleada, por problemas de licencia. Las instrucciones para la configuraci\u00f3n de las JRE son las siguientes: Copiar las JRE El usuario deber\u00e1 copiar a los directorios \u201cjava32\u201d y \u201cjava64\u201d una JRE de 32 y 64 bits respectivamente. Aqu\u00ed se debe copiar el directorio \u201cjre\u201d (directorio incluido) de la JRE que se desee utilizar. La estructura resultante ser\u00eda: java32 jre <ficheros_jre> java64 jre <ficheros_jre> Podemos, por ejemplo, instalarnos una JRE en nuestro equipo y luego copiar el directorio \u201cjre\u201d del directorio de instalaci\u00f3n en el directorio \u201cjava32\u201d o \u201cjava64\u201d seg\u00fan corresponda. Se debe utilizar una JRE 8 o superior, aunque se recomienda utilizar siempre la \u00faltima disponible en el momento de empaquetar. Las JRE de 32 y 64 bits utilizadas pueden tener distinta versi\u00f3n. Eliminar lo innecesario Opcionalmente, se pueden eliminar los ficheros de las JRE que se sepan que son innecesarios para el correcto funcionamiento de la JVM durante la ejecuci\u00f3n de AutoFirma. Esto sirve para reducir el tama\u00f1o del instalador final y deber\u00eda hacerse \u00fanica y exclusivamente cuando estemos seguros de que no afectar\u00e1 a la operativa de la aplicaci\u00f3n. Por ejemplo, se pueden eliminar ficheros relativos al uso de JavaFX, ya que este API no se utiliza en AutoFirma y no son parte imprescindible de la JRE. As\u00ed pues, se eliminar\u00edan, entre otros, la extensi\u00f3n \u201cjfxrt.jar\u201d (17 Mb) y la biblioteca \u201cjfxwebkit.dll\u201d (42 Mb). Instalar certificados SSL Para el correcto funcionamiento de AutoFirma frente a determinados servicios sobre SSL es necesario que se inserten en el almac\u00e9n de confianza de las JRE los certificados de las autoridades susceptibles a utilizar por los servicios y que no est\u00e9n reconocidas por defecto en Java. En el directorio \u201ccertificados\u201d se han guardado los certificados de ra\u00edces e intermedios de varias autoridades espa\u00f1olas. Si se desean agregar otros certificados como de confianza por defecto para AutoFirma, se deber\u00edan copiar los correspondientes certificados a este directorio. Para insertar los certificados del directorio \u201ccertificados\u201d en los almacenes de confianza de las dos JRE configuradas, se deber\u00e1 ejecutar el script \u201cinsert_cacerts.bat\u201d del directorio certificados. Este script utilizar\u00e1 la herramienta \u201ckeytool\u201d de las JRE para insertar todos los certificados del directorio \u201ccertificados\u201d en el almac\u00e9n de confianza (cacerts) de las propias JRE.","title":"Configuraci\u00f3n de las JRE empaquetadas"},{"location":"markdown_strict/AF_Instalador%20Windows/#configuracion-de-la-version-de-autofirma","text":"Cada nueva versi\u00f3n de AutoFirma puede requerir que se actualicen diversos recursos de los ficheros de instalaci\u00f3n. Ejemplos claros son el n\u00famero de versi\u00f3n y la fecha del copyright . Los textos susceptibles de actualizarse en cada nueva versi\u00f3n de AutoFirma se encuentran en los siguientes ficheros de la estructura de directorios: AutoFirma_32_installer.wxs N\u00famero de versi\u00f3n de AutoFirma 32bits. AutoFirma_64_installer.wxs N\u00famero de versi\u00f3n de AutoFirma 64bits. AutoFirma_launch4J_project_32.xml N\u00famero de versi\u00f3n del configurador de 32bits. AutoFirma_launch4J_project_64.xml N\u00famero de versi\u00f3n del configurador de 64bits. AutoFirmaCommandLine_launch4J_project_32.xml N\u00famero de versi\u00f3n de AutoFirma 32bits. AutoFirmaCommandLine_launch4J_project_64.xml N\u00famero de versi\u00f3n de AutoFirma 32bits. AutoFirma_NSIS_project_EXE_32.nsi N\u00famero de versi\u00f3n y nombre del instalador EXE de 32bits. AutoFirma_NSIS_project_EXE_64.nsi N\u00famero de versi\u00f3n y nombre del instalador EXE de 64bits. AutoFirma_NSIS_project_MSI_32.nsi N\u00famero de versi\u00f3n de AutoFirma 32bits. AutoFirma_NSIS_project_MSI_64.nsi N\u00famero de versi\u00f3n de AutoFirma 64bits. AutoFirma_to_msi_32.bat N\u00famero de versi\u00f3n del nombre del instalador MSI de 32bits. AutoFirma_to_msi_64.bat N\u00famero de versi\u00f3n del nombre del instalador MSI de 64bits. licencia.txt Texto de licencia, versi\u00f3n y a\u00f1o de copyright . splash.bmp A\u00f1o del copyright .","title":"Configuraci\u00f3n de la versi\u00f3n de AutoFirma"},{"location":"markdown_strict/AF_Instalador%20Windows/#generacion-de-los-ejecutables-jar","text":"Como primer paso para la creaci\u00f3n de los instaladores de AutoFirma, es necesario generar sus ejecutables. Para ello, deberemos descargarnos el proyecto \u201cclienteafirma\u201d de GitHub ( https://github.com/ctt-gob-es/clienteafirma ) y generar los distintos artefactos. Todas las dependencias de este proyecto est\u00e1n en el repositorio central de Maven pero, si se estuviese utilizando una versi\u00f3n a\u00fan no publicada de las biblioteca modificadas de AutoFirma y del proyecto JMulticard, ser\u00eda necesario descargar y compilar tambi\u00e9n estos proyectos. Para compilar cada uno de los proyectos, deberemos ejecutar el siguiente comando en el directorio principal de cada uno de ellos: mvn clean install \u2013DskipTests El orden de ejecuci\u00f3n debe ser: Proyecto \u201cclienteafirma-external\u201d (S\u00f3lo si se usase una versi\u00f3n no publicada) Proyecto \u201cjmulticard\u201d (S\u00f3lo si se usase una versi\u00f3n no publicada) Proyecto \u201cclienteafirma\u201d Una vez hecho esto, se habr\u00e1n generado todos los artefactos del n\u00facleo del Cliente @firma. Para generar los artefactos distribuibles se deber\u00e1 ejecutar, en el directorio del proyecto \u201cclienteafirma\u201d el comando:: mvn clean install \u2013DskipTests \u2013Denv=install Esta ejecuci\u00f3n habr\u00e1 generado los JAR \u201c AutoFirma.jar \u201d y \u201c AutoFirmaConfigurador.jar \u201d dentro del directorio \u201ctarget\u201d de los m\u00f3dulos \u201cafirma-simple\u201d y \u201cafirma-ui-simple-configurator\u201d, respectivamente.","title":"Generaci\u00f3n de los ejecutables JAR"},{"location":"markdown_strict/AF_Instalador%20Windows/#generacion-de-los-ejecutables-exe","text":"El siguiente paso es generar los ficheros EXE de la aplicaci\u00f3n a partir de los archivos JAR que se generaron en el apartado anterior. Para ello, primeramente, copiaremos los ficheros \u201c AutoFirma.jar \u201d y \u201c AutoFirmaConfigurador.jar \u201d al directorio \u201cjar\u201d del m\u00f3dulo afirma-simple-installer . Para obtener los ejecutables EXE de AutoFirma se har\u00e1 uso de la aplicaci\u00f3n Launch4j. As\u00ed, deberemos abrir la aplicaci\u00f3n, seleccionar uno de los ficheros de configuraci\u00f3n (icono con el icono de carpeta) y pulsar el bot\u00f3n \u201cBuild wrapper\u201d (bot\u00f3n con el icono de engranaje) (Figuras 1 y 2). < Figura 1 < Figura 2 El proceso debe repetirse para los ficheros de configuraci\u00f3n: AutoFirma_launch4J_project_32.xml AutoFirmaCommandLine_launch4J_project_32.xml AutoFirmaConfigurator_launch4J_project_32.xml AutoFirma_launch4J_project_64.xml AutoFirmaCommandLine_launch4J_project_64.xml AutoFirmaConfigurator_launch4J_project_64.xml Como resultado, se deben haber generado los ficheros EXE \u201c AutoFirma.exe \u201d, \u201c AutoFirmaCommandLine.exe \u201d y \u201c AutoFirmaConfigurador.exe \u201d, tanto en el directorio \u201cAutoFirma32\u201d como en \u201cAutoFirma64\u201d (6 ficheros en total).","title":"Generaci\u00f3n de los ejecutables EXE"},{"location":"markdown_strict/AF_Instalador%20Windows/#firma-de-los-ejecutables","text":"La firma de los ejecutables generados en el apartado anterior es opcional, pero deber\u00eda hacerse cuando haya intenci\u00f3n de publicar el instalador que se va a generar. Los ejecutables anteriores no son corrientes, ya que en realidad son archivos JAR con una envoltura EXE. Este EXE, adem\u00e1s, no est\u00e1 preparado para ser firmado directamente y debe realizarse a trav\u00e9s de la herramienta \u201csign4j\u201d, que a su vez utilizar\u00e1 otra herramienta de firma. Un ejemplo del uso de esta herramienta para la firma del fichero EXE con la herramienta SignTool de Microsoft, algoritmo SHA256withRSA y un sello de tiempo ser\u00eda: sign4j signtool sign /f ALMACEN.p12 /p CONTRASE\u00d1A /a /fd SHA256 /tr http://sha256timestamp.ws.symantec.com/sha256/timestamp RUTA_EXE En este comando: ALMACEN.p12: Es la ruta del almac\u00e9n PKCS#12/PFX que contiene la clave de firma. CONTRASE\u00d1A: Es la contrase\u00f1a del almac\u00e9n de claves. RUTA_EXE: Es la ruta hacia el fichero EXE que se desea firmar.","title":"Firma de los ejecutables"},{"location":"markdown_strict/AF_Instalador%20Windows/#generacion-de-los-instaladores-exe","text":"Una vez disponemos de los ficheros ejecutables EXE (ya sea firmados o no) se generar\u00e1 el instalador mediante la herramienta NSIS. Para esto, se pincha con el bot\u00f3n derecho del rat\u00f3n en el fichero AutoFirma_NSIS_project_EXE_32.nsi y se pulsa en la opci\u00f3n \u201cCompile NSIS Script\u201d (Figura 3). Este proceso generar\u00e1 en el directorio \u201cAutoFirma32\u201d el instalador AutoFirma_32_vX_Y_Z_installer.exe (Figura 4). < Figura 3 < Figura 4 Al repetir el proceso con el fichero AutoFirma_NSIS_project_EXE_64.nsi, se obtendr\u00e1 el instalador AutoFirma_64_vX_Y_Z_installer.exe en el directorio \u201cAutoFirma64\u201d. Con esto, ya estar\u00edan operativos los ejecutables EXE. Sin embargo, en caso de que se deseasen publicar, es recomendable que se firmen antes con un certificado de firma de c\u00f3digo reconocido por Microsoft. El proceso de firma se detalla en el apartado Firma de los instaladores .","title":"Generaci\u00f3n de los instaladores EXE"},{"location":"markdown_strict/AF_Instalador%20Windows/#generacion-de-los-instaladores-msi","text":"Para la generaci\u00f3n del instalador MSI se hace uso de las herramientas de WiX que deben descargarse, instalarse y agregarse su ruta de binarios a la variable de entorno PATH. La ruta en cuesti\u00f3n para la instalaci\u00f3n por defecto es C:\\Program Files (x86)\\WiX Toolset v3.11\\bin . A continuaci\u00f3n, se ejecutar\u00e1 el script NSIS AutoFirma_NSIS_project_MSI_32.nsi o AutoFirma_NSIS_project_MSI_64.nsi , seg\u00fan se desee generar el instalador de 32 o 64 bits. (Figura 5). < Figura 5 Esto dar\u00e1 lugar al ejecutable \u201cAutoFirmaGenerator.exe\u201d en el directorio \u201cAutoFirma32\u201d o \u201cAutoFirma64\u201d, seg\u00fan corresponda. A diferencia de los instaladores EXE generados anteriormente, el instalador MSI no crea ni elimina informaci\u00f3n del registro, ni tampoco genera un ejecutable de desinstalaci\u00f3n. \u00danicamente crea la estructura de directorios de la aplicaci\u00f3n y genera e importa los certificados necesarios. El resto de tareas las completa el ejecutable \u201cAutoFirmaGenerator.exe\u201d que acabamos de generar y que ya contiene las aplicaciones de AutoFirma y la JRE. Este ejecutable es el que se deber\u00e1 empaquetar en forma de MSI. Si el instalador MSI que vamos a generar va a publicarse, deber\u00edamos firmar antes el ejecutable \u201cAutoFirmaGenerator.exe\u201d. El proceso de firma de este ejecutable es igual que el de los propios instaladores. Consulte el apartado Firma de los instaladores para m\u00e1s informaci\u00f3n. Para generar el instalador MSI, ya se haya firmado \u201cAutoFirmaGenerator.exe\u201d o no, se deber\u00e1 ejecutar el script AutoFirma_to_msi_32.bat , o su equivalente para 64 bits. Este script utiliza los siguientes recursos para la generaci\u00f3n del instalador: AutoFirmaGenerator.exe: El pre-instalador generado anteriormente. no_ejecutar_x86.exe / no_ejecutar_x64.exe: Ejecutables para la desinstalaci\u00f3n parcial de la aplicaci\u00f3n. Se les ha asignado ese nombre para evitar que un usuario lo ejecute, dado que desinstalar\u00eda la aplicaci\u00f3n, pero no eliminar\u00eda su registro del panel de aplicaciones. Se encuentran ya en el directorio. AutoFirma_32_installer.wxs / AutoFirma_64_installer.wxs: Fichero de configuraci\u00f3n que definen el proceso de generaci\u00f3n del instalador MSI. Iconos de la aplicaci\u00f3n El instalador MSI creado habr\u00e1 aparecido en el directorio \u201cAutoFirma32\u201d con el nombre AutoFirma_32_vX_Y_Z_installer.msi , o en el directorio \u201cAutoFirma64\u201d con el nombre AutoFirma_64_vX_Y_Z_installer.msi, seg\u00fan cu\u00e1l se ejecutase. Con esto, ya estar\u00edan operativos los ejecutables MSI. Sin embargo, en caso de que se deseasen publicar, es recomendable que se firmen antes con un certificado de firma de c\u00f3digo reconocido por Microsoft. El proceso de firma se detalla en el apartado Firma de los instaladores .","title":"Generaci\u00f3n de los instaladores MSI"},{"location":"markdown_strict/AF_Instalador%20Windows/#crear-nuevos-desinstaladores","text":"Es necesario destacar que los desinstaladores de la aplicaci\u00f3n (\u201cno_ejecutar_x86.exe\u201d y \u201cno_ejecutar_x64.exe\u201d) no se generan como parte de la creaci\u00f3n del instalador MSI y por eso es necesario disponer de ellos antes de generar el instalador. Estos desinstaladores, en realidad, se han generado como parte de la creaci\u00f3n del instalador EXE. Sin embargo, los desinstaladores del MSI, al contrario que los del EXE, deben ser totalmente silenciosos, por lo que deben cerrar los navegadores web abiertos autom\u00e1ticamente y no pedir consentimiento al usuario. Para generar los desinstaladores del MSI es necesario modificar el script de desinstalaci\u00f3n del instalador EXE para que cierre autom\u00e1ticamente los navegadores web, despu\u00e9s generar una versi\u00f3n de los instaladores EXE (32 y 64 bits) con los scripts modificados, instalarlos y coger sus desinstaladores. Despu\u00e9s se les debe cambiar el nombre a no_ejecutar_x86.exe y no_ejecutar_x64.exe , seg\u00fan corresponde. La versi\u00f3n del instalador EXE generado debe desecharse, ya que el proceso de desinstalaci\u00f3n de los instaladores EXE, s\u00ed debe pedir al usuario que cierre los navegadores web abiertos. Si en alg\u00fan momento fuese necesario modificar el comportamiento del desinstalador del MSI, se deber\u00eda modificar el script de creaci\u00f3n del instalador EXE y repetir el proceso descrito. Para realizar el cambio concreto de cerrar los navegadores silenciosamente, en la secci\u00f3n \u201cuninstall\u201d de los ficheros de configuraci\u00f3n \u201cAutoFirma_NSIS_project_EXE_32.nsi\u201d y \u201cAutoFirma_NSIS_project_EXE_64.nsi\u201d se ha dejado comentado el cambio a realizar. Los nuevos desinstaladores deber\u00edan subirse al repositorio para evitar repetir el proceso cada vez.","title":"Crear nuevos desinstaladores"},{"location":"markdown_strict/AF_Instalador%20Windows/#firma-de-los-instaladores","text":"Firmar los ejecutables con un certificado de firma de c\u00f3digo reconocido por Microsoft permitir\u00e1 a los usuarios identificar si la aplicaci\u00f3n est\u00e1 generada por una entidad de confianza. La firma de los instaladores EXE, MSI y del pre-instalador \u201cAutoFirmaGenerator.exe\u201d se puede realizar como el de cualquier otro ejecutable Microsoft Windows. Un ejemplo del comando para la firma con la herramienta SignTool de Microsoft, algoritmo SHA256withRSA y un sello de tiempo ser\u00eda: signtool sign /f ALMACEN.p12 /p CONTASE\u00d1A /a /fd SHA256 /tr http://sha256timestamp.ws.symantec.com/sha256/timestamp RUTA_EJECUTABLE En este comando: ALMACEN.p12: Es la ruta del almac\u00e9n PKCS#12/PFX que contiene la clave de firma. CONTRASE\u00d1A: Es la contrase\u00f1a del almac\u00e9n de claves. RUTA_EJECUTABLE: Es la ruta hacia el fichero EXE o MSI que se desea firmar. < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"Firma de los instaladores"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/","text":"AutoFirma es una herramienta de escritorio con interfaz gr\u00e1fica que permite la ejecuci\u00f3n de operaciones de firma de ficheros locales en entornos de escritorio (Windows, Linux y OS X). Tambi\u00e9n puede utilizarse a trav\u00e9s de consola o ser invocada por otras aplicaciones mediante protocolo para la ejecuci\u00f3n de operaciones de firma. Esta \u00faltima funcionalidad puede usarse principalmente mediante el JavaScript de despliegue del Cliente @firma, que permitir\u00eda que se utilizase AutoFirma para generar las firmas de un tr\u00e1mite web. AutoFirma incluye un sistema b\u00e1sico de plugins que permiten modificar el comportamiento de las operaciones de firma y proporcionar nueva funcionalidad cuando se utiliza como aplicaci\u00f3n de escritorio. Es decir, los plugins s\u00f3lo se activan cuando la aplicaci\u00f3n se ejecuta en modo gr\u00e1fico. No afecta a las operaciones de firma cuando se invoca desde otra aplicaci\u00f3n (como un navegador web) ni cuando se ejecuta mediante l\u00ednea de comandos. Un plugin consiste en una biblioteca Java que extiende una clase concreta y que proporcionar un fichero JSON con la informaci\u00f3n necesaria para la integraci\u00f3n con AutoFirma. El desarrollo del plugin requiere labores de programaci\u00f3n, mientras que la instalaci\u00f3n y desinstalaci\u00f3n de los plugins puede ser llevada a cabo por los usuarios de AutoFirma. El mecanismo de plugins actual podr\u00eda modificarse en un futuro para permitir nuevas funcionalidades y opciones de integraci\u00f3n. AutoFirma es una aplicaci\u00f3n de Software Libre que se puede usar, a su elecci\u00f3n, bajo licencia GNU General Public License versi\u00f3n 2 (GPLv2) o superior o bajo licencia European Software License 1.1 (EUPL 1.1) o superior. AutoFirma puede descargarse desde el Portal de Administraci\u00f3n Electr\u00f3nica: https://firmaelectronica.gob.es/Home/Descargas.html El c\u00f3digo fuente de AutoFirma se encuentra disponible desde el repositorio p\u00fablico de GitHub: https://github.com/ctt-gob-es/clienteafirma Alcance funcional de los plugins Un usuario puede instalar, configurar y desinstalar plugins de AutoFirma. Al instalar un plugin , el fichero de plugin se copia en el directorio de AutoFirma, se ejecuta un proceso de instalaci\u00f3n definido por el propio plugin y, a partir de ese momento, el plugin pasa a estar activo y podr\u00e1 afectar a los procesos de firma y mostrar botones en las pantallas de AutoFirma. En el proceso de instalaci\u00f3n se comprueban los permisos solicitados por el plugin. Un plugin no puede integrarse de un modo concreto si no ha solicitado el permiso necesario para ello en el proceso de instalaci\u00f3n. Los plugins pueden implementar una interfaz gr\u00e1fica de configuraci\u00f3n. En caso de hacerlo, en el mismo di\u00e1logo de gesti\u00f3n de plugins , aparecer\u00e1 un bot\u00f3n de configuraci\u00f3n para iniciar esta interfaz. Con ella, el usuario deber\u00e1 poder establecer los aspectos configurables del plugin . Al desinstalar un plugin , se ejecuta un proceso de desinstalaci\u00f3n definido por el propio plugin , se descarga de memoria y, finalmente, se elimina del directorio de AutoFirma. Los plugins se integran con AutoFirma de las siguientes formas: Integraci\u00f3n en el proceso de firma desde la interfaz gr\u00e1fica. El plugin puede afectar a las operaciones de firma de dos formas: Preprocesando los datos a firmar. Postprocesando las firmas generadas. Integraci\u00f3n en el proceso de firma iniciada mediante protocolo desde una aplicaci\u00f3n externa. El plugin puede afectar a las operaciones de firma de dos formas: Preconfiguraci\u00f3n de la operaci\u00f3n de firma, pudiendo dividir \u00e9sta en varias operaciones. Composici\u00f3n de los datos a devolver a partir de las firmas generadas. Integraci\u00f3n en las pantallas de AutoFirma. Pueden agregarse botones que pueden aparecer en diversas pantallas de la aplicaci\u00f3n y asignarles un comportamiento. Los botones pueden aparecer en las siguientes pantallas: Carga de datos Resultado de firma. Resultado de firma masiva. Visualizaci\u00f3n de datos de firma. Puede definirse un men\u00fa que aparezca en la barra de men\u00fas de la aplicaci\u00f3n, definir submen\u00fas sobre el mismo y acciones que ejecutar con cada una de sus opciones. Nuevos comandos por l\u00ednea de comandos: Se puede agregar nuevos comandos para ejecutarlos desde la l\u00ednea de comandos. Integraci\u00f3n en el proceso de firma desde la interfaz gr\u00e1fica Un plugin puede intervenir en el proceso de firma que se ejecuta desde la interfaz gr\u00e1fica preprocesando los datos que se van a firmar o postprocesando las firmas generadas. Este plugin es libre de mostrar di\u00e1logos gr\u00e1ficos durante su ejecuci\u00f3n, ya sean bloqueantes (por ejemplo, cuando se solicite confirmaci\u00f3n o un dato al usuario) o no (por ejemplo, un di\u00e1logo de espera). IMPORTANTE : No existe limitaci\u00f3n al n\u00famero de plugins instalados que pueden efectuar esta operaci\u00f3n y su ejecuci\u00f3n siempre se realizar\u00e1 seg\u00fan el orden de carga. Es decir, si tuvi\u00e9semos varios plugins que preprocesasen los datos antes de firmar, el primer plugin que se cargue podr\u00e1 modificarlos, el segundo recibir\u00e1 la salida del primero, el tercero la salida del segundo y as\u00ed sucesivamente. Por regla general, s\u00f3lo se deber\u00eda tener instalado un plugin que preprocese los datos o postprocese la firma y deber\u00eda ser este el que ejecutase todas las operaciones sobre ambos elementos. Preprocesando los datos que se van a firmar El m\u00e9todo de preprocesado de datos nos permite obtener los datos del fichero que carg\u00f3 el usuario, devolver a la aplicaci\u00f3n los datos que realmente se firmar\u00e1n y reconfigurar la propia operaci\u00f3n de firma. Esto es \u00fatil si deseamos restringir o condicionar los datos que se firman en nuestro organismo. Algunos ejemplos en los que se podr\u00eda necesitar esta operaci\u00f3n ser\u00edan: Si los documentos PDF que se firmasen en el organismo siempre deben declarar una serie de metadados. Se podr\u00eda implementar el m\u00e9todo para que detectase cuando la firma a realizar es PAdES, modificase los PDF que vamos a firmar (previa comprobaci\u00f3n de que no incluye firmas anteriores), agregase los metadatos necesarios y lo devolviese modificado. Si se desease que el usuario seleccionase por cada operaci\u00f3n si quiere que las firmas CAdES sean impl\u00edcitas (incluyan los datos) o explicita (no los incluyan). Se podr\u00eda implementar el m\u00e9todo para que detectase cuando la firma a realizar es CAdES, mostrarse un di\u00e1logo al usuario de consulta al usuario y, seg\u00fan lo respondido, modificase la configuraci\u00f3n para que la firma fuese impl\u00edcita o expl\u00edcita. Postprocesado de la firma generada El m\u00e9todo de postprocesado de firma nos permite modificar una firma generada antes de que se guarde a disco. Este mecanismo recibe la firma generada y cierta informaci\u00f3n sobre ella y devuelve los datos que finalmente se almacenaran. Algunos ejemplos en los que se podr\u00eda utilizar esta aplicaci\u00f3n ser\u00edan: Si todas nuestras firmas deben contener un sello de tiempo, independientemente de que no se presenten ante una entidad. Se podr\u00eda implementar un m\u00e9todo para tomase la firma generada, conectase contra una TSA, generase un sello de tiempo y lo insertase en la firma. Despu\u00e9s devolver\u00eda la firma ya con el sello. Si en nuestro organismo todas las firmas se debiesen guardar en un repositorio o gestor en la nube. Se podr\u00eda implementar este m\u00e9todo para que preguntase al usuario si desea enviar la firma al gestor. Si el usuario respondiese afirmativamente, se podr\u00eda enviar la firma al servicio remoto. Ya se env\u00ede o no la firma, se devolver\u00eda la propia firma y ser\u00eda esta la que se guardar\u00eda en disco. Integraci\u00f3n en el proceso de firma mediante protocolo Un plugin puede definir un modo de intervenir en el proceso de firma cuando se ejecuta desde una aplicaci\u00f3n externa en una llamada por protocolo. En este caso, puede definir los par\u00e1metros de la operaci\u00f3n de firma (datos y configuraci\u00f3n), incluso realizar m\u00faltiples firmas a partir de una \u00fanica llamada. Los datos resultantes de las operaciones de firma son devueltos al plugin y es este el que define la respuesta al cliente que realiz\u00f3 la operaci\u00f3n. La operaci\u00f3n definida por el plugin se ejecutar\u00e1 cuando se cumpla una condici\u00f3n de activaci\u00f3n tambi\u00e9n prefijada por \u00e9l. As\u00ed, si hubiese varios plugin que definiesen un comportamiento a ejecutar durante la firma, s\u00f3lo se activar\u00eda aquel para el que primero se cumpliese la condici\u00f3n de activaci\u00f3n. Preconfiguraci\u00f3n de la firma Una vez se activa, el plugin recibe los datos recibidos para la configuraci\u00f3n de la operaci\u00f3n (los datos a firmar, el formato, el algoritmo...), as\u00ed como cualquier par\u00e1metro adicional que se haya enviado con la petici\u00f3n y que pueda servir para definir c\u00f3mo se debe operar. En base a esta configuraci\u00f3n, el plugin definir\u00e1 una serie de configuraciones de firma que son las que realmente se van a aplicar. Esto nos permitir\u00eda establecer mediante un plugin una serie de configuraciones de firma preestablecidas o definir m\u00faltiples operaciones de firma en una sola llamada a AutoFirma. Algunos ejemplos en los que se podr\u00eda necesitar esta operaci\u00f3n ser\u00edan: Su se desease permitir que AutoFirma realizase una operaci\u00f3n de firma masiva a ra\u00edz de una \u00fanica llamada: Se podr\u00edan enviar m\u00faltiples datos concatenados en el par\u00e1metro de datos, subdividirlos mediante la operaci\u00f3n de preconfiguraci\u00f3n y aplicar la misma configuraci\u00f3n de firma a todos ellos. Si se desease que las operaciones de firma de nuestro organismo fueran homog\u00e9neas o que se pudiesen reconfigurar sin necesidad de modificar las aplicaciones web: Se podr\u00edan incorporar al plugin las configuraciones de firma deseadas y aplicarlas cuando se detecte un par\u00e1metro de configuraci\u00f3n concreto enviado por la aplicaci\u00f3n. Composici\u00f3n de la respuesta de firma El m\u00e9todo de composici\u00f3n de la respuesta permite definir cu\u00e1l es el resultado que se devolver\u00e1 a la aplicaci\u00f3n cliente. Para componer este resultado puede utilizarse el conjunto de firmas generada y la configuraci\u00f3n de firma inicial. Este dato ser\u00e1 procesado por el JavaScript de despliegue con el que se haya hecho la integraci\u00f3n. As\u00ed pues, es necesario devolver un resultado compatible con el mismo o utilizar un JavaScript propio o modificado que se adapte a la respuesta que se desea devolver. Algunos ejemplos en los que se podr\u00eda utilizar esta aplicaci\u00f3n ser\u00edan: Su se desease permitir que AutoFirma realizase una operaci\u00f3n de firma masiva a ra\u00edz de una \u00fanica llamada: Se podr\u00edan componer el resultado con todas las firmas y utilizar un JavaScript de despliegue adaptado para que separe las firmas generadas. En el caso de una firma trif\u00e1sica, ni siquiera tendr\u00eda que ser necesaria la adaptaci\u00f3n de la respuesta. Si en nuestro organismo debiesen aplicarse medidas de seguridad adicionales sobre las firmas: Se podr\u00eda implementar en este m\u00e9todo los mecanismos adicionales de seguridad, como el uso de algoritmos de cifrado seguro a partir de una clave proporcionada por la propia aplicaci\u00f3n. De esta forma, la firma viajar\u00eda cifrada todo el tiempo y no se descifrar\u00eda hasta llegar al servidor de destino. Integraci\u00f3n en las pantallas de firma Botones de acci\u00f3n Los plugins pueden agregar botones en una barra para tal fin en algunas de las pantallas de AutoFirma. Estos botones pueden ejecutar procesos separados de la propia generaci\u00f3n de la firma electr\u00f3nica y acceder a la informaci\u00f3n de la pantalla en cuesti\u00f3n. < Las acciones asignadas a los botones agregados pueden mostrar di\u00e1logos gr\u00e1ficos durante su ejecuci\u00f3n, ya sean bloqueantes (por ejemplo, cuando se solicite confirmaci\u00f3n o un dato al usuario) o no (por ejemplo, un di\u00e1logo de espera). Incluso pueden mostrar un di\u00e1logo que permita realizar operaciones completas totalmente independientes del proceso de firma. Algunos ejemplos de utilidad para esta funci\u00f3n ser\u00edan: Si en nuestro organismo trabajamos con un tipo de fichero concreto, por ejemplo, facturas electr\u00f3nicas, se podr\u00eda crear un plugin que agregue un bot\u00f3n a la pantalla de carga de datos y que permitiese al usuario que va a firmar pulsarlo para visualizar los datos cargado de tal forma que simplifique determinar si debe firmarse o no. Siguiendo el mismo ejemplo, se podr\u00eda mostrar una relaci\u00f3n con los conceptos y precios de la factura junto con los datos del proveedor. Si queremos realizar una validaci\u00f3n completa de todas nuestras firmas, se podr\u00eda implementar un plugin que agregue un bot\u00f3n a la pantalla que muestra el resultado de la firma. Al pulsar ese bot\u00f3n se leer\u00eda la firma y se enviar\u00eda a un servicio remoto encargado de validarla. Si quisi\u00e9semos agregar una funcionalidad a AutoFirma que nada tiene que ver con la firma (por ejemplo, generaci\u00f3n de hashes de ficheros), se podr\u00eda implementar un plugin que agregue un bot\u00f3n a todas las pantallas que lo permiten y que, al pulsarlo, por ejemplo, muestre un di\u00e1logo modal que ofrezca la funcionalidad deseada. Las pantallas a las que se pueden agregar acciones en bot\u00f3n son: Pantalla de carga de datos Permite procesar los datos de entrada y el formato de firma que se va a emplear. Pantalla de resultado de una firma simple. Permite procesar la firma generada, el formato de firma empleado, los certificados contenidos por la firma y el certificado utilizado para firmar. Pantalla de resultado de un proceso de firma masiva. Permite procesar las firmas generadas, el formato de firma empleado para cada uno de ellos, los certificados contenidos por la firma y el certificado utilizado para firmar. Pantalla del visor de firma. Permite procesar la firma mostrada, su formato y el \u00e1rbol de firmantes contenido en la misma. Men\u00fa Los plugins permiten crear un men\u00fa propio en la barra de men\u00fas de la aplicaci\u00f3n. Este men\u00fa ser\u00eda visible desde todas las pantallas de la aplicaci\u00f3n en las que se muestra la barra. Las opciones de este men\u00fa pueden ser submen\u00fas o tener asociadas acciones. Estas acciones permiten ejecutar operaciones independientes. No reciben informaci\u00f3n de la pantalla que se muestra actualmente en la aplicaci\u00f3n como hacen los botones. Esta funcionalidad est\u00e1 orientada a ampliar el funcionamiento de AutoFirma. Por ejemplo, ha permitido externalizar a un plugin la funcionalidad de c\u00e1lculo y comprobaci\u00f3n de hashes de AutoFirma 1.7. Las operaciones de hashes ahora estar\u00e1n disponibles a trav\u00e9s de las opciones de un men\u00fa. Vista de la barra de men\u00fas sin plugins instalados: < Vista de la barra de men\u00fas con el plugin de c\u00e1lculo de hashes: < Vista de la barra de men\u00fas con el men\u00fa del plugin de c\u00e1lculo de hashes desplegado: < Nuevos comandos Los plugins permiten introducir nuevos comandos que un usuario pueda utilizar al ejecutar AutoFirma desde l\u00ednea de comandos. Una vez se instala el plugin, los nuevos comandos estar\u00e1n disponibles para su ejecuci\u00f3n tanto desde el ejecutable de AutoFirma (en todos los sistemas), como desde AutoFirmaCommandLine (s\u00f3lo en Windows). El desarrollador del plugin tiene pleno control sobre la l\u00f3gica de los comandos implementados y ser\u00e1 el encargado de definir toda la funcionalidad, as\u00ed como el tratamiento que debe hacer de sus par\u00e1metros. El desarrollador es libre de definir los par\u00e1metros que desee para sus comandos, aunque se recomienda por homogeneidad utilizar los mismos par\u00e1metros que los comandos nativos de AutoFirma cuando ya existan para indicar un tipo de par\u00e1metro concreto (datos de entrada, formato, etc). < Configuraci\u00f3n de los plugins Los plugins puede permitir o no su configuraci\u00f3n al usuario. Por ejemplo, un plugin que valide el certificado de firma utilizado contra su Distribution Point (propiedad del propio certificado y en la que se incluye la URL para su validaci\u00f3n), podr\u00eda no necesitar configuraci\u00f3n por parte del usuario. En cambio, un plugin que valide firmas contra una plataforma externa de la que el usuario deba configurar sus credenciales s\u00ed que lo necesitar\u00eda. Las opciones de configuraci\u00f3n de un plugin que lo permita se encuentran en el di\u00e1logo de gesti\u00f3n de plugins . En esta pantalla se mostrar\u00e1 un bot\u00f3n para el acceso a las opciones de configuraci\u00f3n del plugin . La interfaz gr\u00e1fica de configuraci\u00f3n deber\u00e1 proporcionarla el propio plugin y desde esta se podr\u00e1n definir y configurar las distintas opciones. AutoFirma se encargar\u00e1 de almacenar las propiedades definidas, no ser\u00e1 necesario que lo haga el propio plugin , y se las proporcionar\u00e1 a las distintas funciones del plugins (operaciones de preproceso de los datos y postproceso de la firma, acciones asignadas a los distintos botones definidos, etc.). Estas mismas opciones se devolver\u00e1n a la propia interfaz de configuraci\u00f3n cuando se vuelva a abrir para que muestre predefinidas las opciones configuradas. Permisos de plugins El sistema de plugins de AutoFirma define una serie de permisos con los que se concede a los plugins permiso para integrarse de cada una de las formas se\u00f1aladas anteriormente. Los permisos de un plugin se declaran en el fichero plugin.json del plugin, y AutoFirma no permitir\u00e1 que un plugin se integre de un poco concreto si este modo no estaba declarado expresamente en este fichero. AutoFirma mostrar\u00e1 al usuario los permisos declarados por el plugin antes de proceder a su instalaci\u00f3n y s\u00f3lo lo instalar\u00e1 si el usuario da su consentimiento. Ejemplo de di\u00e1logo de solicitud de permisos: < Los permisos que puede solicitar un plugin son: Instalaci\u00f3n: Permiso para implementar los m\u00e9todos de instalaci\u00f3n y desinstalaci\u00f3n. Este es el m\u00e9todo que permite hacer cambios en el equipo durante la instalaci\u00f3n y la desinstalaci\u00f3n del plugin. Reinicio: Permiso para reiniciar la aplicaci\u00f3n. Al conceder este permiso, tanto finalizar la instalaci\u00f3n como la desinstalaci\u00f3n, se reiniciar\u00e1 AutoFirma. Esto es necesario para poder aplicar los cambios de algunos modos de integraci\u00f3n, como la integraci\u00f3n de un nuevo men\u00fa. Firma en l\u00ednea: Permisos para implementar los m\u00e9todos de preconfiguraci\u00f3n y composici\u00f3n de la respuesta de los procesos de firma cuando se solicitan por protocolo. Preprocesado: Permiso para procesar los datos antes de las operaciones de firma realizadas desde la interfaz gr\u00e1fica. Postprocesado: Permiso para procesar las firmas una vez generadas desde la interfaz gr\u00e1fica de la aplicaci\u00f3n. Nuevos botones: Permisos para agregar botones a la interfaz de la aplicaci\u00f3n. Nuevo men\u00fa: Permisos para agregar un nuevo men\u00fa a la interfaz de la aplicaci\u00f3n. Nuevos comandos: Permisos para agregar nuevos comandos ejecutables por l\u00ednea de comandos. Desarrollo de plugins Un plugin de AutoFirma es una biblioteca Java en la que una de sus clases extiende la clase base de plugins . Para extender esta clase, ser\u00e1 necesario importar en nuestro proyecto el m\u00f3dulo que contiene las clases base para el uso de los plugins . Un desarrollador puede importar este m\u00f3dulo utilizando Apache Maven y la dependencia: <dependency> <groupId>es.gob.afirma</groupId> <artifactId>afirma-ui-simpleafirma-plugins</artifactId> <version>1.8.0</version> </dependency> AutoFirma es compatible con Java 8 y superiores. En concreto, las distribuciones de 32bits de AutoFirma se incorpora Java 8 y las de 64bits con Java 11. Si deseamos que nuestros plugins sean compatibles con todas las instalaciones de AutoFirma, deber\u00e1n implementarse para ser compatibles con Java 8. Actualmente, AutoFirma s\u00f3lo soporta plugins empaquetados en forma de un \u00fanico archivo JAR. Los plugins que se implementen deber\u00e1n incluir todas sus clases y dependencias en un \u00fanico JAR o implementar por su cuenta un mecanismo de carga de dependencias. Nunca se deben insertar en el JAR del plugin las clases del m\u00f3dulo \u201cafirma-ui-simpleafirma-plugins\u201d ni ninguna otra clase de AutoFirma, ya que estas ya se encontrar\u00e1n disponibles en la aplicaci\u00f3n. Construir un plugin Como se ha mencionado, y salvo que se implementen mecanismos de carga propios, un plugin se presenta en forma de un \u00fanico JAR que contiene todas las clases y recursos que necesita. Ya que en AutoFirma se pueden cargar m\u00faltiples plugins simult\u00e1neamente y desconocemos donde almacenar\u00e1n sus recursos, cada plugin deber\u00eda establecer un nombre de paquete propio y agregar todas sus clases y recursos en dicho paquete. Una vez importado el m\u00f3dulo, se deber\u00e1n seguir los siguientes pasos para desarrollar nuestro plugin : Crear un fichero plugin.json Este fichero se agregar\u00e1 al paquete que hayamos definido y contendr\u00e1 los metadatos de nuestro plugin y referencias a todos los elementos que definen su comportamiento (botones que agrega, di\u00e1logo gr\u00e1fico para su configuraci\u00f3n, etc). Este fichero deber\u00e1 codificarse en UTF-8. La estructura del JSON contendr\u00e1 los elementos: info: Este contendr\u00e1 los datos y la configuraci\u00f3n del plugin . Los elementos que albergar\u00e1 son: name: Nombre interno del plugin (sin espacios). title: Nombre legible del plugin . version_code: Opcional. N\u00famero natural que identifica la versi\u00f3n del plugin . Por defecto, 1. version: Opcional. Cadena con la versi\u00f3n del plugin en formato libre. Por defecto, \u201c1.0\u201d. authors: Opcional. Lista con el nombre de los autores del plugin . contacts: Opcional. Lista con la informaci\u00f3n de contacto de los autores. description: Descripci\u00f3n del plugin . configuration_panel: Opcional. Nombre de la clase que implementa el panel de configuraci\u00f3n. Si no se indica, no habr\u00e1 panel de configuraci\u00f3n del plugin . permissions: Opcional. Listado de nombres de permiso que requiere el plugin. Los permisos disponibles son: INSTALL: Permiso para ejecutar c\u00f3digo en la instalaci\u00f3n/desinstalaci\u00f3n del plugin. RESET: Permiso para reiniciar AutoFIrma tras la instalaci\u00f3n/desinstalaci\u00f3n. El reinicio se realiza de forma autom\u00e1tica. INLINE_PROCESS: Permisos para modificar el procesado de las peticiones realizadas desde el navegador. PRESIGN: Permiso para preprocesar los datos antes de una operaci\u00f3n de firma a trav\u00e9s de la interfaz de escritorio. POSTSIGN: Permiso para postprocesar las firmas generadas en una operaci\u00f3n de firma a trav\u00e9s de la interfaz de escritorio. BUTTONS: Permiso para agregar acciones a la interfaz de escritorio a trav\u00e9s de botones. MENU: Permiso para agregar un men\u00fa con acciones a la interfaz de escritorio. COMMANDS: Permiso para agregar nuevos comandos para usar por l\u00ednea de comandos. inline_processor: Opcional. Nombre de una clase que implementa es.gob.afirma.standalone.plugins.SignDataProcessor. Esta clase puede definir el modo de procesar los datos y la firma en una operaci\u00f3n invocada desde un navegador web. buttons: Opcional. Lista de botones que se deber\u00e1n mostrar en la interfaz de AutoFirma. Cada bot\u00f3n define: title: Opcional. Texto que mostrar en el bot\u00f3n. El bot\u00f3n deber\u00eda definir este atributo y/o un icono. icon: Opcional. Imagen que mostrar en el bot\u00f3n a modo de icono. El bot\u00f3n deber\u00eda definir este atributo y/o un texto. tooltip: Opcional. Texto de ayuda que asociar al bot\u00f3n. accesible_description: Opcional. Texto accesible que asociar al bot\u00f3n. window: Ventana en la que mostrar el bot\u00f3n. action: Nombre de la clase que define la acci\u00f3n a realizar por el bot\u00f3n. menu: Opcional. Nueva opci\u00f3n que se agregar\u00e1 a la barra de men\u00fas de AutoFirma. Puede contener un listado de opciones y submen\u00fas. Un men\u00fa define: title: Texto del men\u00fa. El texto del men\u00fa principal es el que se mostrara en la barra de men\u00fas de AutoFirma. items: Opcional. Listado de submen\u00fas de este. Cada submen\u00fa se define igual que un men\u00fa. action: Opcional. Nombre de la clase que define la acci\u00f3n a realizar por esta opci\u00f3n de men\u00fa. Si se declar\u00f3 un listado de submen\u00fas para este men\u00fa, este no podr\u00e1 tener una acci\u00f3n asociada. commands: Opcional. Listado de comandos que se agregaran para su uso por l\u00ednea de comandos. Por cada uno de ellos se define: name: Nombre del comando. description: Texto descriptivo de la operaci\u00f3n. action: Nombre de la clase que implementa el comando. A continuaci\u00f3n, se presenta la declaraci\u00f3n formal del JSON mediante su esquema (conforme al borrador 7 del documento de definici\u00f3n de esquemas JSON): { \"$schema\": \"http://json-schema.org/draft-07/schema#\" , \"definitions\": { \"info\": { \"type\": \"object\" , \"properties\": { \"name\": { \"type\": \"string\" }, \"title\": { \"type\": \"string\" }, \"version_code\": { \"type\": \"integer\" , \"default\": 1 }, \"version\": { \"type\": \"string\" , \"default\": \"1.0\" }, \"authors\": { \"type\": \"array\" , \"items\": { \"type\": \"string\" }, \"default\": [] }, \"contacts\": { \"type\": \"array\" , \"items\": { \"type\": \"string\" }, \"default\": [] }, \"description\": { \"type\": \"string\" }, \"configuration_panel\": { \"type\": \"string\" } }, \"required\": [ \"name\" , \"title\" , \"description\" ] }, \"permissions\": { \"type\": \"array\" , \"items\": { \"type\": \"string\" , \"enum\": [ \"INSTALL\" , \"INLINE_PROCESS\" , \"RESET\" , \"PRESIGN\" , \"POSTSIGN\" , \"BUTTONS\" , \"MENU\" , \"COMMANDS\" ] }, \"default\": [] }, \"button\": { \"type\": \"object\" , \"properties\": { \"title\": { \"type\": \"string\" }, \"icon\": { \"type\": \"string\" }, \"tooltip\": { \"type\": \"string\" }, \"accesible_description\":{ \"type\": \"string\" }, \"window\": { \"type\": { \"enum\": [ \"input\" , \"single_result\" , \"multi_result\" , \"visor\" ] } }, \"action\": { \"type\": \"string\" } }, \"required\": [ \"window\" , \"action\" ] } }, \"menu\": { \"type\": \"object\" , \"properties\": { \"title\": { \"type\": \"string\" }, \"action\": { \"type\": \"string\" }, \"items\": { \"type\": \"array\" , \"items\": { \"$ref\": \"#/definitions/menu\" }, \"default\": [] } }, \"required\": [ \"title\" ] }, \"command\": { \"type\": \"object\" , \"properties\": { \"name\": { \"type\": \"string\" }, \"description\": { \"type\": \"string\" }, \"action\": { \"type\": \"string\" } }, \"required\": [ \"name\" , \"action\" ] } \"type\": \"object\" , \"properties\": { \"info\": { \"$ref\": \"#/definitions/info\" }, \"permissions\": { \"$ref\": \"#/definitions/permissions\" }, \"inline_processor\": { \"type\": \"string\" }, \"buttons\": { \"type\": \"array\" , \"items\": { \"$ref\": \"#/definitions/button\" }, \"default\": [] }, \"menu\": { \"$ref\": \"#/definitions/menu\" }, \"commands\": { \"type\": \"array\" , \"items\": { \"$ref\": \"#/definitions/command\" }, \"default\": [] } }, \"required\": [ \"info\" ] } Un ejemplo de \u201cplugin.json\u201d ser\u00eda: { \"info\": { \"name\" : \"validate_certs\" , \"title\" : \"Validaci\u00f3n de certificados\" , \"version_code\" : 1, \"version\" : \"1.0\" , \"authors\" : [ \"Gobierno de Espa\u00f1a\" ], \"description\" : \"Plugin para la comprobaci\u00f3n del estado de certificados de firma.<br><br>Este plugin permite validar los certificados utilizados para firmar con AutoFirma. La validaci\u00f3n se realiza mediante mecanismos predefinidos para los certificados de algunos prestadores de servicios de confianza y, en caso de no tener estos mecanismos predefinidos, contra la CRL o el OCSP declarado en el propio certificado.<br><br>Aseg\u00farese de utilizar \u00fanicamente certificados emitidos por prestadores de confianza para firmar, ya que un certificado de un origen desconocido podr\u00eda declarar mecanismos de validaci\u00f3n no seguros.\" }, \"permissions\" : [ \"BUTTONS\" ], \"buttons\" : [ { \"title\" : \"Validar certificado de firma\" , \"icon\" : \"es/gob/afirma/plugin/certvalidation/certificate_16.png\" , \"tooltip\" : \"Validar el certificado con el que se ha realizado la firma\" , \"accesible_description\" : \"Valida el certificado utilizado para firmar\" , \"window\" : \"single_result\" , \"action\" : \"es.gob.afirma.plugin.certvalidation.ValidateCertAction\" }, { \"title\" : \"Validar certificado de firma\" , \"icon\" : \"es/gob/afirma/plugin/certvalidation/certificate_16.png\" , \"tooltip\" : \"Validar el certificado con el que se ha realizado la firma\" , \"accesible_description\" : \"Valida el certificado utilizado para firmar\" , \"window\" : \"multi_result\" , \"action\" : \"es.gob.afirma.plugin.certvalidation.ValidateCertAction\" } ] } Al instalar este plugin en AutoFirma, su aspecto en el di\u00e1logo de gesti\u00f3n de plugins ser\u00e1: < Implementar AfirmaPlugin Todo plugin deber\u00e1 tener una clase que herede de AfirmaPlugin. Esta ser\u00e1 la clase principal del plugin y deber\u00e1 encontrarse en el mismo paquete que el fichero \u201cplugin.json\u201d. En esta clase se podr\u00e1n implementar los siguientes comportamientos: Instalaci\u00f3n del plugin : Se ejecuta una \u00fanica vez al importar el plugin en AutoFirma. Si fuese necesario, en \u00e9l se deben configurar el sistema y preparar los recursos que requiera el plugin para su funcionamiento. Desinstalaci\u00f3n del plugin : Se ejecuta una \u00fanica vez al eliminar el plugin de AutoFirma. En \u00e9l se deben deshacer las opciones realizadas en el m\u00e9todo de instalaci\u00f3n. Preproceso de los datos Se ejecuta antes de la firma de cada uno de los datos de entrada. Este m\u00e9todo permite manipular o realizar operaciones en base a los datos que van a firmarse y devuelve los datos que realmente se firmar\u00e1n. Postproceso de la firma Se ejecuta despu\u00e9s de generar una firma electr\u00f3nica y antes de almacenarla en disco. Este m\u00e9todo permite manipular la firma resultante o realizar operaciones en base a ella y devuelve los datos que finalmente se almacenar\u00e1n en disco. Tambi\u00e9n recibe el formato de firma utilizado y la cadena de certificaci\u00f3n del certificado de firma. Fin de operaci\u00f3n Se ejecuta despu\u00e9s de haber finalizado la operaci\u00f3n: En el caso de una firma simple, se ejecutar\u00e1 despu\u00e9s del postprocesado de la firma. En caso de una firma masiva, se ejecutar\u00e1 una \u00fanica vez, tras haber postprocesado todas las firmas. Puede usarse si se almacena informaci\u00f3n en el proceso de postfirma que afecte a todas las firmas, para poder restablecer los datos a sus valores iniciales. Por ejemplo, en una firma masiva, se podr\u00eda comprobar en el postprocesado si el usuario ha aceptado manipular la firma de alguna manera. Si a\u00fan no se le pregunt\u00f3, se le pregunta; si ya se pregunt\u00f3, se hace lo que se decidiera. En el m\u00e9todo de fin de operaci\u00f3n se eliminar\u00eda la respuesta del usuario para que en futuras operaciones se volviese a preguntar. Para saber m\u00e1s sobre c\u00f3mo implementar los m\u00e9todos de instalaci\u00f3n y desinstalaci\u00f3n del plugin , consulte el apartado 4.3 M\u00e9todos de instalaci\u00f3n y desinstalaci\u00f3n . Para saber m\u00e1s sobre c\u00f3mo implementar los m\u00e9todos de preproceso de datos, postproceso de firma y fin de la operaci\u00f3n, consulte el apartado 4.4 M\u00e9todos de preconfiguraci\u00f3n y respuesta de las peticiones de firma Los plugins permiten definir un mecanismo para tratar las firmas electr\u00f3nicas solicitadas por una aplicaci\u00f3n externa mediante protocolo. Estos m\u00e9todos, a diferencia de los de prefirma y postfirma no tiene que implementarse en la clase principal del plugin (AfirmaPlugin), sino en una clase independiente que herede de la clase SignDataProcessor. Para configurar el uso de esta clase, se deber\u00e1 establecer la propiedad \u201cinline_processor\u201d del fichero \u201cplugin.json\u201d. La clase define varios m\u00e9todos abstractos que se deber\u00e1n implementar: - - boolean checkTrigger(SignOperation operation)Identifica cuando debe activarse la operativa de este plugin. En el par\u00e1metro operation se recibe toda la configuraci\u00f3n de firma establecida.Si devuelve true, se ejecutar\u00e1n las funciones preProcess y postProcess sobre los datos de la operaci\u00f3n. Si devuelve false, no se ejecutar\u00e1n y se consultar\u00e1 el criterio del siguiente plugin de la lista.Criterios comunes de activaci\u00f3n que pueden usarse son:Se est\u00e1 procesando un dato concreto o con un formato concreto. Por ejemplo:Se ha proporcionado un token de autenticaci\u00f3n concreto.Se ha proporcionado una cadena de datos Base64 concatenados con un separador en lugar de un Base 64 \u00fanico.Se han proporcionado propiedades espec\u00edficas en el par\u00e1metro extraParams. Por ejemplo:Se han proporcionado las propiedades necesarias para la firma visible PDF.Se ha proporcionado una propiedad no recogida por AutoFirma que se utiliza expresamente para la activaci\u00f3n de este plugin.Se ha proporcionado un par\u00e1metro distinto de los soportados por AutoFirma. Estos par\u00e1metros se obtienen a trav\u00e9s del m\u00e9todo getAnotherParams() del objeto operationList<SignOperation> preProcess(SignOperation operation)Operaci\u00f3n de preconfiguraci\u00f3n.Esta operaci\u00f3n se ejecuta antes de la operaci\u00f3n de firma y permite redefinir los par\u00e1metros de entrada como un listado de par\u00e1metros del mismo tipo. Esto permite transformar una operaci\u00f3n de firma en muchas o redefinir los par\u00e1metros de la operaci\u00f3n.StringBuilder postProcess(List<SignResult> results, SignOperation signOperation) throws EncryptingException, PluginControlledExceptionOperaci\u00f3n de composici\u00f3n de la respuesta de la operaci\u00f3n.Esta operaci\u00f3n se ejecuta despu\u00e9s de haber generado los resultados de todas las operaciones de firma definidas.Recibe el resultado de todas las operaciones de firma y la configuraci\u00f3n de firma original recibida por la aplicaci\u00f3nDevuelve la cadena de texto que devolver a la aplicaci\u00f3n que solicit\u00f3 la operaci\u00f3n de firma. void setCipherKey( byte [] key)Establece la clave de cifrado proporcionada por la aplicaci\u00f3n para que el plugin la aplique como considere en la composici\u00f3n de la respuesta de la operaci\u00f3n. boolean isErrorsAllowed()Establece si, al procesar m\u00e1s de una firma, deber\u00eda interrumpirse la operaci\u00f3n cuando falle al menos una de ellas. Para permitir que un plugin modifique la operativa de las operaciones solicitadas por una aplicaci\u00f3n cliente, es necesario que declare el permiso INLINE_PROCESS. M\u00e9todos de prefirma y postfirma desde la interfaz gr\u00e1fica. Un plugin podr\u00eda no sobrescribir ninguno de los m\u00e9todos de AfirmaPlugin si no act\u00faa en ninguno de los procesos listados. En ese caso, la clase aparecer\u00e1 vac\u00eda y la interacci\u00f3n del usuario con el plugin se deber\u00e1 realizar a trav\u00e9s de los botones declarados en \u201cplugin.json\u201d. Un ejemplo de clase de este tipo ser\u00eda: public class MiNuevoPlugin extends AfirmaPlugin { // No se define ningun comportamiento especial para el plugin } Declarar un servicio AfirmaPlugin Es necesario notificar a AutoFirma cu\u00e1l de las clases de nuestra biblioteca es la que implementa la clase AfirmaPlugin. Para hacer esto, anunciaremos nuestra clase como servicio creando en el directorio \u201cMETA-INF/services\u201d del proyecto el fichero \u201ces.gob.afirma.standalone.plugins.AfirmaPlugin\u201d. El contenido de este fichero debe ser el nombre completo de la clase que implementa AfirmaPlugin. Por ejemplo, es.gob.afirma.plugin.certvalidation.ValidateCertsPlugin Estructura del plugin Una vez se hayan seguido los pasos anteriores para la construcci\u00f3n b\u00e1sica del plugin , la estructura m\u00ednima del proyecto debe ser la siguiente: < En el diagrama mostrado: X , Y y Z , representan el paquete al que pertenece nuestro plugin y que no deber\u00eda coincidir con el de ning\u00fan otro. MiNuevoPlugin.java representa a la clase que implementa AfirmaPlugin. resources ser\u00eda un directorio en el que podr\u00edamos almacenar los recursos (im\u00e1genes, ficheros de propiedades o cualquier otra cosa) que requiera nuestro plugin . Este directorio no tiene porqu\u00e9 existir, podr\u00eda no haber recursos que almacenar o incluirse estos directamente en la estructura del paquete sin incluir un directorio adicional; podr\u00eda tener cualquier otro nombre o podr\u00edan separarse los recursos en diversos directorios. En este caso, el contenido del fichero \u201ces.gob.afirma.standalone.plugins.AfirmaPlugin\u201d ser\u00eda: X.Y.Z.MiNuevoPlugin Opciones de configuraci\u00f3n Diversos tipos de plugins podr\u00edan permitir al usuario configurar su comportamiento incluso el configurarlos podr\u00eda ser totalmente necesario para su funcionamiento. Por ejemplo, un plugin podr\u00eda permitir configurar el algoritmo que utilizar\u00e1 al realizar una operaci\u00f3n, mientras que otro podr\u00eda necesitar que el usuario configurase sus credenciales para acceder a un almac\u00e9n externo. La configuraci\u00f3n de todos los plugins deber\u00e1 establecerse desde el di\u00e1logo de gesti\u00f3n de plugins . Cuando un usuario seleccione un plugin y este disponga de opciones configurables, se mostrar\u00e1 un bot\u00f3n \u201cConfigurar\u201d. Al pulsarlo, se mostrar\u00e1 al usuario un di\u00e1logo en el que se mostrar\u00e1n las opciones configurables. La apariencia de este di\u00e1logo y las opciones que contiene se definir\u00e1 program\u00e1ticamente mediante la herencia de la clase ConfigurationPanel. Esta clase es un JPanel sobre el que se deber\u00e1 construir la apariencia del di\u00e1logo de configuraci\u00f3n. Nuestra clase deber\u00e1 ser p\u00fablica e implementar el constructor por defecto (sin par\u00e1metros), en el que se agregar\u00e1n los distintos componentes gr\u00e1ficos que se requieran para la configuraci\u00f3n (cajas de texto, listas de selecci\u00f3n, cuadros de verificaci\u00f3n, etc.) estructurados en directamente en el panel, en subpaneles o en pesta\u00f1as seg\u00fan se desee. La clase ConfigurationPanel deber\u00e1 adem\u00e1s implementar los siguientes m\u00e9todos: Properties getConfiguration() Este m\u00e9todo construir\u00e1 un objeto Properties en el que almacenar\u00e1 todos los valores configurados asign\u00e1ndoles un nombre de propiedad a cada uno de ellos. El nombre asignado a cada opci\u00f3n de configuraci\u00f3n y con el que se guarda en el Properties ser\u00e1 el nombre con el que se podr\u00e1 recuperar el valor durante la ejecuci\u00f3n del plugin . Todas las opciones configurables deber\u00edan tener una propiedad asignada, incluso si no se estableci\u00f3 un valor para ella, ya que el no hacerlo podr\u00eda resultar en que se utilicen valores nulos al solicitar las opciones configuradas. Este m\u00e9todo se llama al aceptar el di\u00e1logo de selecci\u00f3n de la configuraci\u00f3n y se encarga de guardar todas las propiedades definidas. void init(Properties config) Este m\u00e9todo recibe un objeto Properties con los valores actualmente asignados a las opciones configurables. Si nunca se les ha asignado un valor, devolver\u00e1 nulo. En este m\u00e9todo se deber\u00edan obtener los valores configurados en el objeto y establecerlos en las opciones de configuraci\u00f3n de nuestro di\u00e1logo gr\u00e1fico. Las propiedades que definen el valor configurado para cada opci\u00f3n de configuraci\u00f3n son las que se le hayan asignado en la llamada a getConfiguration(). Este m\u00e9todo se llama al pulsar el bot\u00f3n \u201cConfigurar\u201d para abrir el di\u00e1logo de configuraci\u00f3n del plugin . Un ejemplo de implementaci\u00f3n de di\u00e1logo de configuraci\u00f3n en el que se permite la configuraci\u00f3n de un cuadro de texto ser\u00eda la siguiente: public class MiDialogoConfiguracionPanel extends ConfigurationPanel { private static final String PROP_NOMBRE_FIRMANTE = \"nombreFirmante\"; private final JTextField tfNombreFirmante; public MiDialogoConfiguracionPanel() { // Establecemos un layout setLayout( new GridBagLayout()); // Construimos los distintos componentes graficos this .tfNombreFirmante = new JTextField(); final JLabel lbNombreFirmante = new JLabel(\"Nombre del firmante:\"); lbNombreFirmante.setLabelFor( this .tfNombreFirmante); // Posicionamos los componentes en el panel final GridBagConstraints c = new GridBagConstraints(); c.fill = GridBagConstraints. HORIZONTAL ; c.weightx = 1.0; c.gridy = 0; add(lbNombreFirmante, c); c.gridy++; add( this .tfNombreFirmante, c); } @Override public void init( final Properties config) { // Inicializamos el campo con el valor previamente configurado o con // un valor por defecto si no se encontro String nombre = config.getProperty( PROP_NOMBRE_FIRMANTE , \"\"); this .tfNombreFirmante.setText(nombre); } @Override public Properties getConfiguration() { // Creamos el objeto de propiedades y guardamos en el valor del // campo que permitimos configurar final Properties config = new Properties(); config.setProperty( PROP_NOMBRE_FIRMANTE , this .tfNombreFirmante.getText()); return config; } } Para poder indicar al plugin cu\u00e1l es nuestra clase de di\u00e1logo de configuraci\u00f3n estableceremos el nombre de la clase en la propiedad \u201cconfiguration_panel\u201d en el apartado \u201cInfo\u201d del fichero \u201cplugin.json\u201d. { \"info\": { \"name\" : \"miplugin\" , \"title\" : \"Inserci\u00f3n del nombre del firmante\" , \"version_code\" : 1, \"version\" : \"1.0\" , \"description\" : \"Plugin de prueba\" , \"configuration_panel\" : \"X.Y.Z.MiDialogoConfiguracionPanel\" } \u2026 Con un fichero \u201cplugin.json\u201d con el del ejemplo, se mostrar\u00eda la informaci\u00f3n del plugin y el bot\u00f3n de configuraci\u00f3n como sigue: < En caso de implementar el di\u00e1logo de configuraci\u00f3n como en el ejemplo, al pulsar el bot\u00f3n de \u201cConfigurar\u201d se mostrar\u00eda: < Acceso a las opciones de configuraci\u00f3n AutoFirma implementa un mecanismo para la recuperaci\u00f3n de la configuraci\u00f3n del plugin desde cualquier punto de su c\u00f3digo. Esto se har\u00e1 mediante la llamada al m\u00e9todo getConfig() de las clases AfirmaPlugin y PluginAction. Properties getConfig() Este m\u00e9todo devuelve el conjunto de propiedades en el que hayamos almacenado los valores establecidos en nuestro di\u00e1logo de configuraci\u00f3n. As\u00ed, por ejemplo, desde las acciones de preprocesado de datos, postprocesado de firma o la acci\u00f3n de un bot\u00f3n, podemos hacer una llamada solicitando las opciones de configuraci\u00f3n que tenemos establecidas: @Override public byte [] postSignProcess( byte [] signature, String format, Certificate[] certChain) throws PluginControlledException { String firmante = getConfig().getProperty( MiDialogoConfiguracionPanel. PROP_NOMBRE_FIRMANTE ); \u2026 } M\u00e9todos de instalaci\u00f3n y desinstalaci\u00f3n Los plugins permiten establecer un procedimiento de instalaci\u00f3n y desinstalaci\u00f3n que preparen el sistema para su funcionamiento y lo devuelvan a su estado original, respectivamente. Estos procedimientos se implementan en la clase principal del plugin , extensi\u00f3n de AfimaPlugin: Instalaci\u00f3n del plugin : Genera o establece la configuraci\u00f3n necesaria en el sistema para el funcionamiento del plugin . void install() throws PluginControlledException Se ejecuta durante el proceso de importaci\u00f3n del plugin en la aplicaci\u00f3n. En caso de error irrecuperable, se lanzar\u00eda una excepci\u00f3n de tipo PluginControlledException. En ese caso, se mostrar\u00eda un mensaje de error al usuario, se deshar\u00edan las tareas de instalaci\u00f3n realizadas y se ejecutar\u00eda el proceso de desinstalaci\u00f3n establecido por el propio plugin . Desinstalaci\u00f3n del plugin : Deshace las acciones realizadas durante el proceso de instalaci\u00f3n, adem\u00e1s de eliminar cualquier otro recurso agregado o deshacer las acciones realizadas durante el funcionamiento del plugin . void uninstall() throws PluginControlledException Se ejecuta durante el proceso de desinstalaci\u00f3n de un plugin . En caso de error irrecuperable, se lanzar\u00eda una excepci\u00f3n de tipo PluginControlledException. En ese caso, se mostrar\u00eda un mensaje de error al usuario y se eliminar\u00eda el plugin de la aplicaci\u00f3n, aunque no se completase el proceso. Para permitir que un plugin defina acciones a ejecutar durante la instalaci\u00f3n y desinstalaci\u00f3n, es necesario que declare el permiso INSTALL. Si adicionalmente se desea que se reinicie AutoFirma despu\u00e9s de la instalaci\u00f3n y desinstalaci\u00f3n, deber\u00e1 declararse el permiso RESET. M\u00e9todos de preconfiguraci\u00f3n y respuesta de las peticiones de firma Los plugins permiten definir un mecanismo para tratar las firmas electr\u00f3nicas solicitadas por una aplicaci\u00f3n externa mediante protocolo. Estos m\u00e9todos, a diferencia de los de prefirma y postfirma no tiene que implementarse en la clase principal del plugin (AfirmaPlugin), sino en una clase independiente que herede de la clase SignDataProcessor. Para configurar el uso de esta clase, se deber\u00e1 establecer la propiedad \u201cinline_processor\u201d del fichero \u201cplugin.json\u201d. La clase define varios m\u00e9todos abstractos que se deber\u00e1n implementar: boolean checkTrigger(SignOperation operation) Identifica cuando debe activarse la operativa de este plugin. En el par\u00e1metro operation se recibe toda la configuraci\u00f3n de firma establecida. Si devuelve true, se ejecutar\u00e1n las funciones preProcess y postProcess sobre los datos de la operaci\u00f3n. Si devuelve false, no se ejecutar\u00e1n y se consultar\u00e1 el criterio del siguiente plugin de la lista. Criterios comunes de activaci\u00f3n que pueden usarse son: Se est\u00e1 procesando un dato concreto o con un formato concreto. Por ejemplo: Se ha proporcionado un token de autenticaci\u00f3n concreto. Se ha proporcionado una cadena de datos Base64 concatenados con un separador en lugar de un Base 64 \u00fanico. Se han proporcionado propiedades espec\u00edficas en el par\u00e1metro extraParams. Por ejemplo: Se han proporcionado las propiedades necesarias para la firma visible PDF. Se ha proporcionado una propiedad no recogida por AutoFirma que se utiliza expresamente para la activaci\u00f3n de este plugin. Se ha proporcionado un par\u00e1metro distinto de los soportados por AutoFirma. Estos par\u00e1metros se obtienen a trav\u00e9s del m\u00e9todo getAnotherParams() del objeto operation List<SignOperation> preProcess(SignOperation operation) Operaci\u00f3n de preconfiguraci\u00f3n. Esta operaci\u00f3n se ejecuta antes de la operaci\u00f3n de firma y permite redefinir los par\u00e1metros de entrada como un listado de par\u00e1metros del mismo tipo. Esto permite transformar una operaci\u00f3n de firma en muchas o redefinir los par\u00e1metros de la operaci\u00f3n. StringBuilder postProcess(List<SignResult> results, SignOperation signOperation) throws EncryptingException, PluginControlledException Operaci\u00f3n de composici\u00f3n de la respuesta de la operaci\u00f3n. Esta operaci\u00f3n se ejecuta despu\u00e9s de haber generado los resultados de todas las operaciones de firma definidas. Recibe el resultado de todas las operaciones de firma y la configuraci\u00f3n de firma original recibida por la aplicaci\u00f3n Devuelve la cadena de texto que devolver a la aplicaci\u00f3n que solicit\u00f3 la operaci\u00f3n de firma. void setCipherKey( byte [] key) Establece la clave de cifrado proporcionada por la aplicaci\u00f3n para que el plugin la aplique como considere en la composici\u00f3n de la respuesta de la operaci\u00f3n. boolean isErrorsAllowed() Establece si, al procesar m\u00e1s de una firma, deber\u00eda interrumpirse la operaci\u00f3n cuando falle al menos una de ellas. Para permitir que un plugin modifique la operativa de las operaciones solicitadas por una aplicaci\u00f3n cliente, es necesario que declare el permiso INLINE_PROCESS. M\u00e9todos de prefirma y postfirma desde la interfaz gr\u00e1fica Los m\u00e9todos de preprocesado de los datos antes de firmarlos a trav\u00e9s de la interfaz gr\u00e1fica, el de postprocesado de la firma antes de almacenarla y el de fin de la operaci\u00f3n de firma se implementan en la clase principal del plugin , extensi\u00f3n de AfirmaPlugin: Preproceso de los datos: Procesa o act\u00faa sobre los datos a firmar. byte [] preSignProcess( byte [] data, String format) throws PluginControlledException Recibe los datos que van a firmarse y el formato de firma que se utilizar\u00e1. Devuelve los datos que finalmente se firmar\u00e1n. En caso de error irrecuperable, se lanzar\u00eda una excepci\u00f3n de tipo PluginControlledException. En ese caso, se mostrar\u00eda un mensaje de error al usuario, pero el proceso de firma continuar\u00e1 normalmente. Postproceso de la firma: Procesa o act\u00faa sobre la firma reci\u00e9n generada. byte [] postSignProcess( byte [] signature, String format, Certificate[] certChain) throws PluginControlledException Recibe la firma generada, el formato de firma utilizado y la cadena de certificaci\u00f3n del certificado con el que se ha firmado. La cadena de certificaci\u00f3n podr\u00eda no estar completa si no se encontrasen los certificados emisores en el almac\u00e9n. Devuelve la firma modificada. En caso de error irrecuperable, se lanzar\u00eda una excepci\u00f3n de tipo PluginControlledException. En ese caso, se mostrar\u00eda un mensaje de error al usuario, pero el proceso continuar\u00e1 normalmente con la firma original. Finalizaci\u00f3n del proceso de firma: Finaliza un proceso de firma simple o masiva, restableciendo lo que sea necesario para permitir una futura operaci\u00f3n. void reset() throws PluginControlledException En caso de error irrecuperable, se lanzar\u00eda una excepci\u00f3n de tipo PluginControlledException. En ese caso, se mostrar\u00eda un mensaje de error al usuario, pero la aplicaci\u00f3n continuar\u00eda funcionando normalmente. Para permitir que un plugin defina acciones a ejecutar para le preproceso de los datos y el postproceso de la firma, es necesario que declaren los permisos PRESIGN y POSTSIGN, respectivamente. Botones de acci\u00f3n Los botones de acci\u00f3n son botones que aparecen en diversas pantallas de AutoFirma y que permiten realizar operaciones con la informaci\u00f3n cargada en dicha pantalla, como los datos que se van a firmar o la firma que ya se ha generado. Estos botones aparecen ordenados y en serie en una barra de botones situada en la zona inferior de AutoFirma. Al pulsar un bot\u00f3n, se desencadena la opci\u00f3n configurada. Para el uso de botones de acci\u00f3n en un plugin es necesario realizar los siguientes pasos: Implementar la acci\u00f3n del bot\u00f3n Las acciones de los botones se implementar\u00e1n en clases Java que hereden de la clase PluginAction. De esta clase se puede sobrescribir el siguiente m\u00e9todo para definir su comportamiento: void start( final Window parent) Sin embargo, si se desea que nuestra acci\u00f3n utilice los datos cargados en la pantalla de AutoFirma en la que se muestre, nuestra acci\u00f3n deber\u00e1 heredar de alguna de las clases hija de PluginAction: DataProcessAction: Permite utilizar los datos cargados en AutoFirma. SignatureProcessAction: Permitir utilizar la firma generada o mostrada en AutoFirma y sus certificados. Seg\u00fan la pantalla en la que deseemos mostrar el bot\u00f3n, se deber\u00e1 implementar una u otra clase: Pantalla de carga de datos: DataProcessAction. Pantalla con el resultado de una firma simple: SignatureProcessAction. Pantalla con el resultado de una firma masiva: SignatureProcessAction. Pantalla de visualizaci\u00f3n de datos de firma: SignatureProcessAction. Al heredar de la clase DataProcessAction se debe sobrescribir el m\u00e9todo: void processData(InputData[] data, Window parent) Este m\u00e9todo recibe los datos de entrada de la pantalla y la ventana que padre en la que se muestran. El listado de objetos de datos de entrada. Este listado contendr\u00e1 un \u00fanico elemento en las operaciones de firma simple y varios en las operaciones de firma masiva. Cada uno de estos objetos nos da acceso a: El fichero de datos cargado. El formato de firma con el que se firmar\u00edan esos datos. La ventana padre nos sirve para utilizarla como ventana padre de cualquier di\u00e1logo gr\u00e1fico que deseemos mostrar. Al heredar la clase SignatureProcessAction se debe sobrescribir el m\u00e9todo: void processSignatures(OutputData[] outputs, X509Certificate signingCert, Window parent) Este m\u00e9todo recibe los datos de salida de la pantalla, el certificado de firma utilizado y la ventana que padre en la que se muestran los datos. El listado de objetos de datos de salida. Este listado contendr\u00e1 un \u00fanico elemento en las operaciones de firma simple y varios en las operaciones de firma masiva. Cada uno de estos objetos nos da acceso a: El fichero en el que se encuentra la firma. En caso de no existir, la firma debi\u00f3 finalizar con errores. Si la firma termin\u00f3 correctamente o no. El formato de la firma. Los certificados contenidos en la firma, que ser\u00e1 el certificado utilizado en la firma (si se ha firmado) y los certificados de firmas previas. El certificado de firma nos permite saber con qu\u00e9 certificado ha firmado el usuario. Este par\u00e1metro podr\u00eda llegar nulo si el usuario no hubiese firmado, por ejemplo, porque nos encontremos en la pantalla de visualizaci\u00f3n de firmas, en cuyo caso se carg\u00f3 una firma que ya estaba hecha y no una que acabe de hacer el usuario. La ventana padre nos sirve para utilizarla como ventana padre de cualquier di\u00e1logo gr\u00e1fico que deseemos mostrar. Por ejemplo, si quisi\u00e9ramos crear un plugin que permitiese validar los certificados de firma, podr\u00edamos crear una clase que herede de SignatureProcessAction, que implemente el m\u00e9todo processSignatures(), que tomase los certificados de la firma, los enviase a validar en base a su Distribution Point y mostrase un mensaje al usuario con el resultado de la validaci\u00f3n. Definir el aspecto del bot\u00f3n y la ventana en la que aparecer\u00e1 Una vez creada la acci\u00f3n del bot\u00f3n deber\u00e1 registrarse en el plugin para indicar d\u00f3nde aparecer\u00e1 y su aspecto. Esto se har\u00e1 desde el apartado \u201cbuttons\u201d del fichero plugin.json. Para cada uno de los botones se podr\u00e1 definir los siguientes atributos: title: Opcional. Texto que mostrar en el bot\u00f3n. El bot\u00f3n deber\u00eda definir este atributo y/o un icono. icon: Opcional. Imagen que mostrar en el bot\u00f3n a modo de icono. El bot\u00f3n deber\u00eda definir este atributo y/o un texto. tooltip: Opcional. Texto de ayuda que asociar al bot\u00f3n. accesible_description: Opcional. Texto accesible que asociar al bot\u00f3n para ser le\u00eddo por lectores de pantalla. Su uso est\u00e1 especialmente indicado cuando el bot\u00f3n muestra un icono y no texto. window: Ventana en la que mostrar el bot\u00f3n. Este atributo debe contener uno de los siguientes valores: input: El bot\u00f3n se mostrar\u00e1 en la pantalla de carga de datos. single_result: El bot\u00f3n se mostrar\u00e1 en la pantalla de resultado de una operaci\u00f3n firma simple. multi_result: El bot\u00f3n se mostrar\u00e1 en la pantalla de resultado de una operaci\u00f3n de firma masiva. visor: El bot\u00f3n se mostrar\u00e1 en la pantalla en la que se visualizan los datos de la firma a trav\u00e9s de la opci\u00f3n \u201cVer firma\u201d o al abrir la firma desde el sistema operativo. action: Nombre de la clase que define la acci\u00f3n a realizar por el bot\u00f3n. Esta clase debe heredar de PluginAction o de alguna de las clases que herede de ella. Por ejemplo, la subestructura JSON para definir un \u00fanico bot\u00f3n que aparecer\u00eda en la ventana del resultado de una firma simple ser\u00eda: \u2026 \"buttons\" : [ { \"title\" : \"Validar certificado de firma\" , \"icon\" : \"es/gob/afirma/plugin/certvalidation/certificate_16.png\" , \"tooltip\" : \"Validar el certificado con el que se ha realizado la firma\" , \"accesible_description\" : \"Valida el certificado utilizado para firmar\" , \"window\" : \"single_result\" , \"action\" : \"es.gob.afirma.plugin.certvalidation.ValidateCertAction\" } ] \u2026 Si se desease que el bot\u00f3n apareciera en varias de las pantallas admitidas ser\u00eda necesario declararlo m\u00faltiples veces en el fichero plugin.json. Debe recordarse que, si se desean utilizar los datos disponibles en una pantalla, nuestra acci\u00f3n deber\u00e1 heredar de una clase concreta para esa pantalla (DataProcessAction, SignatureProcessAction\u2026) ya que es la que recoge esos datos de la pantalla. Consulte en el paso 1 de este mismo apartado la acci\u00f3n que deber\u00e1 heredarse para poder utilizar los datos de cada una de las pantallas que lo admiten. En caso de querer realizar una misma acci\u00f3n desde diversas ventanas y que los datos de entrada no sean necesarios, podr\u00edamos implementar nuestra clase de acci\u00f3n heredando directamente de la clase PluginAction. Otorgar el permiso para la integraci\u00f3n de botones en la interfaz En el fichero de declaraci\u00f3n del plugin (plugin.json), se deber\u00e1 declarar el permiso BUTTONS. Men\u00fa de opciones Un plugin puede agregar un \u00fanico men\u00fa a la barra de men\u00fas de la aplicaci\u00f3n. Este men\u00fa puede definir varios submen\u00fas y/u opciones de men\u00fa con acciones definidas. Los elementos del men\u00fa aparecen con el orden en que se declararon en el fichero de configuraci\u00f3n del plugin. Cada una de las opciones del men\u00fa puede ser un submen\u00fa con nuevas opciones o tener declarada una acci\u00f3n a ejecutar. Para el uso de las opciones de men\u00fa en un plugin es necesario realizar los siguientes pasos: Implementar las acciones de las opciones del men\u00fa y sus submen\u00fas Las acciones de las opciones de men\u00fa se implementar\u00e1n en clases Java que hereden de la clase PluginAction. De esta clase se puede sobrescribir el siguiente m\u00e9todo para definir su comportamiento: void start( final Window parent) Este m\u00e9todo recibe como par\u00e1metro de entrada la ventana de AutoFirma para servidor como componente padre sobre el que mostrar cualquier di\u00e1logo gr\u00e1fico que sea necesario. Por ejemplo, si quisi\u00e9ramos que nuestro plugin mostrase un di\u00e1logo al pulsar sobre alguna de sus opciones de men\u00fa, podr\u00edamos crear una clase que herede de PluginAction, implemente el m\u00e9todo start() y en \u00e9l construya y muestre el di\u00e1logo. Definir la estructura y las opciones del men\u00fa Una vez creadas todas las acciones del men\u00fa, deberemos definir la estructura del mismo. Esto se har\u00e1 desde el apartado \u201cmenu\u201d del fichero plugin.json. Definiremos el atributo \u201cmenu\u201d con un listado de elementos. Cada elemento declarar\u00e1 un atributo \u201ctitle\u201d en el que se indicar\u00e1 el texto que se mostrar\u00e1 en esa opci\u00f3n de men\u00fa. A su vez, cada elemento deber\u00e1 declarar uno de los siguientes atributos: items: Se usar\u00e1 cuando se desee que la nueva opci\u00f3n sea un submen\u00fa. Estos atributos declarar\u00e1n un nuevo listado de elementos de men\u00fa. action: Se usar\u00e1 cuando se desee que sea la nueva opci\u00f3n tenga una acci\u00f3n asociada. Estos atributos declarar\u00e1n el nombre de la clase que implementa la acci\u00f3n que se desea desencadenar con esa opci\u00f3n. Por ejemplo, la subestructura JSON para definir un men\u00fa con dos submen\u00fas y cada uno de ellos con dos opciones ser\u00eda: \u2026 \"menu\": { \"title\": \"Huellas digitales\" , \"items\": [ { \"title\": \"Fichero\" , \"items\": [ { \"title\": \"Calcular huella digital\" , \"action\": \"es.gob.afirma.hash.CalculateHashFileAction\" }, { \"title\": \"Comprobar huella digital\" , \"action\": \"es.gob.afirma.hash.CheckHashFileAction\" } ] }, { \"title\": \"Directorio\" , \"items\": [ { \"title\": \"Calcular huella digital en directorio\" , \"action\": \"es.gob.afirma.hash.CalculateHashDirAction\" }, { \"title\": \"Comprobar huella digital en directorio\" , \"action\": \"es.gob.afirma.hash.CheckHashDirAction\" } ] } ] }, \u2026 Otorgar el permiso para la integraci\u00f3n de botones en la interfaz En el fichero de declaraci\u00f3n del plugin (plugin.json), se deber\u00e1 declarar el permiso MENU. Comandos Un plugin puede agregar m\u00faltiples comandos a AutoFirma para que puedan ser ejecutados por l\u00ednea de comandos. Estos comandos pueden implementar la funcionalidad que se desee, aunque su finalidad suele ser la de responder alguna de las siguientes necesidades: Permitir que un usuario calcule un resultado a trav\u00e9s de la terminal de comandos del sistema. Permitir que una aplicaci\u00f3n externa se valga de AutoFirma para ejecutar una de las operativas que esta implementa. Esto puede ser mediante llamadas directas a la aplicaci\u00f3n o mediante scripts del sistema. El sistema de plugin proporciona el modo de que los comandos agregados a AutoFirma mediante plugins se listen junto al resto de comandos. Sin embargo, cualquier acci\u00f3n o texto de ayuda propio del comando deber\u00e1 ser gestionado por el propio plugin. Para el uso de las opciones de men\u00fa en un plugin es necesario realizar los siguientes pasos: Implementar las acciones de los comandos Las acciones de los comandos se implementar\u00e1n en clases Java que hereden de la clase PluginCommandAction. De esta clase se deben implementar los siguientes m\u00e9todos para definir su comportamiento: Constructor por defecto . Este constructor sin par\u00e1metros deber\u00eda llamar al constructor de la clase padre que recibe una cadena y le deber\u00eda pasar el propio nombre del comando. Por ejemplo, si mi clase de acci\u00f3n se llamase MiAction y se debiese ejecutar cuando se usase el comando \u201cmicomando\u201d, el constructor ser\u00eda: public MiAction() { super ( \"micomando\" ); } M\u00e9todo : String getHelpText() Este m\u00e9todo deber\u00eda devolver una cadena de ayuda con la sintaxis que admite el comando y una explicaci\u00f3n sobre los distintos par\u00e1metros de configuraci\u00f3n. A modo orientativo, cuando AutoFirma muestra la sintaxis de un comando lo hace mediante un texto con la siguiente forma: Sintaxis: \u00b7\u00b7AutoFirma\u00b7COMANDO\u00b7SINTAXIS-\u00b7DESCRIPCION Par\u00e1metros: \u00b7\u00b7PARAMETRO1(DESCRIPCION_PARAMETRO1) \u00b7\u00b7PARAMETRO2(DESCRIPCION_PARAMETRO2) \u2026 En la sintaxis anterior, los puntos a media altura simbolizan espacios y las flechas a la derecha simbolizan tabuladores. La cantidad de tabuladores necesaria para alinear los elementos puede variar seg\u00fan la longitud de los textos. Los elementos incluidos en la estructura anterior son: COMANDO: Nombre del comando. SINTAXIS: Estructura de la sintaxis (opciones par\u00e1metros) DESCRIPCION: Descripci\u00f3n del comando En caso de que hubiese varios formatos de sintaxis, se podr\u00eda repetir esta l\u00ednea con los distintos formatos. PARAMETROX: Identificador del par\u00e1metro. DESCRIPCION_PARAMETROX: Descripci\u00f3n de la funcionalidad del par\u00e1metro. M\u00e9todo : String process(String[] args) throws PluginControlledException Este m\u00e9todo recibe como par\u00e1metro el listado de argumentos proporcionado en la llamada a AutoFirma. Los par\u00e1metros recibidos no contendr\u00e1n el nombre del ejecutable de AutoFirma o el propio comando ejecutado, s\u00f3lo los par\u00e1metros que este recibi\u00f3. La excepci\u00f3n PluginControlledException se deber\u00eda lanzar cuando falle la ejecuci\u00f3n del comando. Se mostrar\u00e1 al usuario el mensaje incluido en esta excepci\u00f3n. El plugin tiene control total sobre su comportamiento, aunque se recomienda seguir las siguientes directrices por homogeneidad con el resto de los comandos de Autofirma: Si el primer argumento recibido se corresponde con la cadena \u201c-help\u201d o si el comando recibe un conjunto de par\u00e1metros no v\u00e1lidos, se deber\u00eda llamar a getHelpText() para devolver el texto de ayuda. Utilizar los mismos par\u00e1metros que el resto de los comandos de AutoFirma. Algunos ejemplos son: \u201c-i\u201d y \u201c-o\u201d para designar el fichero de entrada y salida. \u201c-xml\u201d para determinar que la salida se estructure en forma de XML. \u201c-gui\u201d si se desea que el comando utilice interfaz gr\u00e1fica para solicitar datos. Declarar los comandos Una vez definido el comportamiento de los comandos, deberemos declararlos en el fichero plugin.json. Los comandos se definir\u00e1n bajo un nuevo apartado \u201ccommands\u201d en el que se listar\u00e1n los nuevos comandos. De cada uno de los comandos deberemos definir los atributos: name: Nombre del comando que se deber\u00e1 usar por l\u00ednea de comandos. description: Descripci\u00f3n del comando (se mostrar\u00e1 al ejecutar la ayuda de AutoFirma por l\u00ednea de comandos). action: Nombre de la clase que hereda de PluginCommandAction e implementa la l\u00f3gica del comando. Una subestructura JSON de ejemplo que defina dos comandos podr\u00eda ser la siguiente: \u2026 \"commands\": [ { \"name\": \"createdigest\" , \"description\": \"Creaci\u00f3n de huellas digitales con interfaz gr\u00e1fica\" , \"action\": \"es.gob.afirma.plugin.hash.command.CreateHashCommand\" }, { \"name\": \"checkdigest\" , \"description\": \"Comprobaci\u00f3n de huellas digitales con interfaz gr\u00e1fica\" , \"action\": \"es.gob.afirma.plugin.hash.command.CheckHashCommand\" } ], \u2026 Otorgar el permiso para agregar nuevos comandos a la aplicaci\u00f3n En el fichero de declaraci\u00f3n del plugin (plugin.json), se deber\u00e1 declarar el permiso COMMANDS. Empaquetado de los plugins Los plugins deben distribuirse en forma de un \u00fanico archivo JAR con toda la operativa del plugin en su interior. En caso de tener dependencias con otras clases no incluidas en AutoFirma, deber\u00e1n importarse en el propio archivo. En caso de tener dependencias con clases de AutoFirma, estas no deber\u00edan incluirse en el JAR. Firma de los plugins Los plugins podr\u00e1n firmarse mediante el proceso de firma del JAR que lo integra. La firma del JAR se realizar\u00e1 conforme a los requisitos establecidos por Oracle: https://docs.oracle.com/javase/tutorial/deployment/jar/signing.html Antes de proceder a la instalaci\u00f3n de un plugin, AutoFirma comprueba su firma. Durante esta comprobaci\u00f3n pueden surgir tres situaciones distintas: El plugin est\u00e1 correctamente firmado. En ese caso, se le indicar\u00e1 al usuario por qui\u00e9n est\u00e1 firmado el plugin seg\u00fan el certificado utilizado. Adem\u00e1s, se le permitir\u00e1 extraer el certificado de firma por si el usuario quiere validar el certificado o realizar comprobaciones adicionales. AutoFirma no comprueba la confianza en el certificado firmante. El plugin no se encuentra firmado. En ese caso, se indica la situaci\u00f3n al usuario. La firma del plugin presenta errores. En ese caso, se informa al usuario del error. Ejemplo de di\u00e1logo con la informaci\u00f3n de la firma de un plugin: < En todos los casos el usuario puede continuar el proceso de firma del plugin indicando si conf\u00eda o no en el mismo. Preguntas y respuestas \u00bfEs posible realizar la instalaci\u00f3n masiva de un plugin en los equipos de mis usuarios? No existe un mecanismo particular para la instalaci\u00f3n masiva de plugins de AutoFirma. Para realizar esto, ser\u00eda necesario copiar al equipo de los usuarios objetivos el fichero con el plugin y modificar el fichero con la relaci\u00f3n de plugins instalados. El directorio de instalaci\u00f3n de los plugins varia de un sistema a otro: Directorio Windows: %ALLUSERSPROFILE%/AutoFirma Directorio Linux: ~/AutoFirma. Directorio macOS: ~/Library/Application Support/AutoFirma En esos directorios se crea un subdirectorio \u201cplugins\u201d y dentro del mismo se sit\u00faa un fichero con el listado de plugins instalados (installed) y un directorio por cada plugin . Para instalar program\u00e1ticamente cada plugin es necesario: Crear dentro del directorio \u201cplugins\u201d un subdirectorio con el nombre interno del plugin que deseamos instalar (el nombre indicado en la propiedad \u201cname\u201d de su \u201cplugin.json\u201d). Copiar el JAR del plugin al directorio creado para el mismo. Agregar al fichero \u201cinstalled\u201d una nueva l\u00ednea con el nombre del plugin instalado y su n\u00famero de versi\u00f3n (tal como se indica en la propiedad \u201cversion_code\u201d de su \u201cplugin.json\u201d). La estructura resultante ser\u00eda: < El contenido del fichero \u201cinstalled\u201d, en este caso, podr\u00eda ser: validate_certs:1 < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"AF manual desarrollo plugins ES"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#alcance-funcional-de-los-plugins","text":"Un usuario puede instalar, configurar y desinstalar plugins de AutoFirma. Al instalar un plugin , el fichero de plugin se copia en el directorio de AutoFirma, se ejecuta un proceso de instalaci\u00f3n definido por el propio plugin y, a partir de ese momento, el plugin pasa a estar activo y podr\u00e1 afectar a los procesos de firma y mostrar botones en las pantallas de AutoFirma. En el proceso de instalaci\u00f3n se comprueban los permisos solicitados por el plugin. Un plugin no puede integrarse de un modo concreto si no ha solicitado el permiso necesario para ello en el proceso de instalaci\u00f3n. Los plugins pueden implementar una interfaz gr\u00e1fica de configuraci\u00f3n. En caso de hacerlo, en el mismo di\u00e1logo de gesti\u00f3n de plugins , aparecer\u00e1 un bot\u00f3n de configuraci\u00f3n para iniciar esta interfaz. Con ella, el usuario deber\u00e1 poder establecer los aspectos configurables del plugin . Al desinstalar un plugin , se ejecuta un proceso de desinstalaci\u00f3n definido por el propio plugin , se descarga de memoria y, finalmente, se elimina del directorio de AutoFirma. Los plugins se integran con AutoFirma de las siguientes formas: Integraci\u00f3n en el proceso de firma desde la interfaz gr\u00e1fica. El plugin puede afectar a las operaciones de firma de dos formas: Preprocesando los datos a firmar. Postprocesando las firmas generadas. Integraci\u00f3n en el proceso de firma iniciada mediante protocolo desde una aplicaci\u00f3n externa. El plugin puede afectar a las operaciones de firma de dos formas: Preconfiguraci\u00f3n de la operaci\u00f3n de firma, pudiendo dividir \u00e9sta en varias operaciones. Composici\u00f3n de los datos a devolver a partir de las firmas generadas. Integraci\u00f3n en las pantallas de AutoFirma. Pueden agregarse botones que pueden aparecer en diversas pantallas de la aplicaci\u00f3n y asignarles un comportamiento. Los botones pueden aparecer en las siguientes pantallas: Carga de datos Resultado de firma. Resultado de firma masiva. Visualizaci\u00f3n de datos de firma. Puede definirse un men\u00fa que aparezca en la barra de men\u00fas de la aplicaci\u00f3n, definir submen\u00fas sobre el mismo y acciones que ejecutar con cada una de sus opciones. Nuevos comandos por l\u00ednea de comandos: Se puede agregar nuevos comandos para ejecutarlos desde la l\u00ednea de comandos.","title":"Alcance funcional de los plugins"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#integracion-en-el-proceso-de-firma-desde-la-interfaz-grafica","text":"Un plugin puede intervenir en el proceso de firma que se ejecuta desde la interfaz gr\u00e1fica preprocesando los datos que se van a firmar o postprocesando las firmas generadas. Este plugin es libre de mostrar di\u00e1logos gr\u00e1ficos durante su ejecuci\u00f3n, ya sean bloqueantes (por ejemplo, cuando se solicite confirmaci\u00f3n o un dato al usuario) o no (por ejemplo, un di\u00e1logo de espera). IMPORTANTE : No existe limitaci\u00f3n al n\u00famero de plugins instalados que pueden efectuar esta operaci\u00f3n y su ejecuci\u00f3n siempre se realizar\u00e1 seg\u00fan el orden de carga. Es decir, si tuvi\u00e9semos varios plugins que preprocesasen los datos antes de firmar, el primer plugin que se cargue podr\u00e1 modificarlos, el segundo recibir\u00e1 la salida del primero, el tercero la salida del segundo y as\u00ed sucesivamente. Por regla general, s\u00f3lo se deber\u00eda tener instalado un plugin que preprocese los datos o postprocese la firma y deber\u00eda ser este el que ejecutase todas las operaciones sobre ambos elementos.","title":"Integraci\u00f3n en el proceso de firma desde la interfaz gr\u00e1fica"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#preprocesando-los-datos-que-se-van-a-firmar","text":"El m\u00e9todo de preprocesado de datos nos permite obtener los datos del fichero que carg\u00f3 el usuario, devolver a la aplicaci\u00f3n los datos que realmente se firmar\u00e1n y reconfigurar la propia operaci\u00f3n de firma. Esto es \u00fatil si deseamos restringir o condicionar los datos que se firman en nuestro organismo. Algunos ejemplos en los que se podr\u00eda necesitar esta operaci\u00f3n ser\u00edan: Si los documentos PDF que se firmasen en el organismo siempre deben declarar una serie de metadados. Se podr\u00eda implementar el m\u00e9todo para que detectase cuando la firma a realizar es PAdES, modificase los PDF que vamos a firmar (previa comprobaci\u00f3n de que no incluye firmas anteriores), agregase los metadatos necesarios y lo devolviese modificado. Si se desease que el usuario seleccionase por cada operaci\u00f3n si quiere que las firmas CAdES sean impl\u00edcitas (incluyan los datos) o explicita (no los incluyan). Se podr\u00eda implementar el m\u00e9todo para que detectase cuando la firma a realizar es CAdES, mostrarse un di\u00e1logo al usuario de consulta al usuario y, seg\u00fan lo respondido, modificase la configuraci\u00f3n para que la firma fuese impl\u00edcita o expl\u00edcita.","title":"Preprocesando los datos que se van a firmar"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#postprocesado-de-la-firma-generada","text":"El m\u00e9todo de postprocesado de firma nos permite modificar una firma generada antes de que se guarde a disco. Este mecanismo recibe la firma generada y cierta informaci\u00f3n sobre ella y devuelve los datos que finalmente se almacenaran. Algunos ejemplos en los que se podr\u00eda utilizar esta aplicaci\u00f3n ser\u00edan: Si todas nuestras firmas deben contener un sello de tiempo, independientemente de que no se presenten ante una entidad. Se podr\u00eda implementar un m\u00e9todo para tomase la firma generada, conectase contra una TSA, generase un sello de tiempo y lo insertase en la firma. Despu\u00e9s devolver\u00eda la firma ya con el sello. Si en nuestro organismo todas las firmas se debiesen guardar en un repositorio o gestor en la nube. Se podr\u00eda implementar este m\u00e9todo para que preguntase al usuario si desea enviar la firma al gestor. Si el usuario respondiese afirmativamente, se podr\u00eda enviar la firma al servicio remoto. Ya se env\u00ede o no la firma, se devolver\u00eda la propia firma y ser\u00eda esta la que se guardar\u00eda en disco.","title":"Postprocesado de la firma generada"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#integracion-en-el-proceso-de-firma-mediante-protocolo","text":"Un plugin puede definir un modo de intervenir en el proceso de firma cuando se ejecuta desde una aplicaci\u00f3n externa en una llamada por protocolo. En este caso, puede definir los par\u00e1metros de la operaci\u00f3n de firma (datos y configuraci\u00f3n), incluso realizar m\u00faltiples firmas a partir de una \u00fanica llamada. Los datos resultantes de las operaciones de firma son devueltos al plugin y es este el que define la respuesta al cliente que realiz\u00f3 la operaci\u00f3n. La operaci\u00f3n definida por el plugin se ejecutar\u00e1 cuando se cumpla una condici\u00f3n de activaci\u00f3n tambi\u00e9n prefijada por \u00e9l. As\u00ed, si hubiese varios plugin que definiesen un comportamiento a ejecutar durante la firma, s\u00f3lo se activar\u00eda aquel para el que primero se cumpliese la condici\u00f3n de activaci\u00f3n.","title":"Integraci\u00f3n en el proceso de firma mediante protocolo"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#preconfiguracion-de-la-firma","text":"Una vez se activa, el plugin recibe los datos recibidos para la configuraci\u00f3n de la operaci\u00f3n (los datos a firmar, el formato, el algoritmo...), as\u00ed como cualquier par\u00e1metro adicional que se haya enviado con la petici\u00f3n y que pueda servir para definir c\u00f3mo se debe operar. En base a esta configuraci\u00f3n, el plugin definir\u00e1 una serie de configuraciones de firma que son las que realmente se van a aplicar. Esto nos permitir\u00eda establecer mediante un plugin una serie de configuraciones de firma preestablecidas o definir m\u00faltiples operaciones de firma en una sola llamada a AutoFirma. Algunos ejemplos en los que se podr\u00eda necesitar esta operaci\u00f3n ser\u00edan: Su se desease permitir que AutoFirma realizase una operaci\u00f3n de firma masiva a ra\u00edz de una \u00fanica llamada: Se podr\u00edan enviar m\u00faltiples datos concatenados en el par\u00e1metro de datos, subdividirlos mediante la operaci\u00f3n de preconfiguraci\u00f3n y aplicar la misma configuraci\u00f3n de firma a todos ellos. Si se desease que las operaciones de firma de nuestro organismo fueran homog\u00e9neas o que se pudiesen reconfigurar sin necesidad de modificar las aplicaciones web: Se podr\u00edan incorporar al plugin las configuraciones de firma deseadas y aplicarlas cuando se detecte un par\u00e1metro de configuraci\u00f3n concreto enviado por la aplicaci\u00f3n.","title":"Preconfiguraci\u00f3n de la firma"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#composicion-de-la-respuesta-de-firma","text":"El m\u00e9todo de composici\u00f3n de la respuesta permite definir cu\u00e1l es el resultado que se devolver\u00e1 a la aplicaci\u00f3n cliente. Para componer este resultado puede utilizarse el conjunto de firmas generada y la configuraci\u00f3n de firma inicial. Este dato ser\u00e1 procesado por el JavaScript de despliegue con el que se haya hecho la integraci\u00f3n. As\u00ed pues, es necesario devolver un resultado compatible con el mismo o utilizar un JavaScript propio o modificado que se adapte a la respuesta que se desea devolver. Algunos ejemplos en los que se podr\u00eda utilizar esta aplicaci\u00f3n ser\u00edan: Su se desease permitir que AutoFirma realizase una operaci\u00f3n de firma masiva a ra\u00edz de una \u00fanica llamada: Se podr\u00edan componer el resultado con todas las firmas y utilizar un JavaScript de despliegue adaptado para que separe las firmas generadas. En el caso de una firma trif\u00e1sica, ni siquiera tendr\u00eda que ser necesaria la adaptaci\u00f3n de la respuesta. Si en nuestro organismo debiesen aplicarse medidas de seguridad adicionales sobre las firmas: Se podr\u00eda implementar en este m\u00e9todo los mecanismos adicionales de seguridad, como el uso de algoritmos de cifrado seguro a partir de una clave proporcionada por la propia aplicaci\u00f3n. De esta forma, la firma viajar\u00eda cifrada todo el tiempo y no se descifrar\u00eda hasta llegar al servidor de destino.","title":"Composici\u00f3n de la respuesta de firma"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#integracion-en-las-pantallas-de-firma","text":"","title":"Integraci\u00f3n en las pantallas de firma"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#botones-de-accion","text":"Los plugins pueden agregar botones en una barra para tal fin en algunas de las pantallas de AutoFirma. Estos botones pueden ejecutar procesos separados de la propia generaci\u00f3n de la firma electr\u00f3nica y acceder a la informaci\u00f3n de la pantalla en cuesti\u00f3n. < Las acciones asignadas a los botones agregados pueden mostrar di\u00e1logos gr\u00e1ficos durante su ejecuci\u00f3n, ya sean bloqueantes (por ejemplo, cuando se solicite confirmaci\u00f3n o un dato al usuario) o no (por ejemplo, un di\u00e1logo de espera). Incluso pueden mostrar un di\u00e1logo que permita realizar operaciones completas totalmente independientes del proceso de firma. Algunos ejemplos de utilidad para esta funci\u00f3n ser\u00edan: Si en nuestro organismo trabajamos con un tipo de fichero concreto, por ejemplo, facturas electr\u00f3nicas, se podr\u00eda crear un plugin que agregue un bot\u00f3n a la pantalla de carga de datos y que permitiese al usuario que va a firmar pulsarlo para visualizar los datos cargado de tal forma que simplifique determinar si debe firmarse o no. Siguiendo el mismo ejemplo, se podr\u00eda mostrar una relaci\u00f3n con los conceptos y precios de la factura junto con los datos del proveedor. Si queremos realizar una validaci\u00f3n completa de todas nuestras firmas, se podr\u00eda implementar un plugin que agregue un bot\u00f3n a la pantalla que muestra el resultado de la firma. Al pulsar ese bot\u00f3n se leer\u00eda la firma y se enviar\u00eda a un servicio remoto encargado de validarla. Si quisi\u00e9semos agregar una funcionalidad a AutoFirma que nada tiene que ver con la firma (por ejemplo, generaci\u00f3n de hashes de ficheros), se podr\u00eda implementar un plugin que agregue un bot\u00f3n a todas las pantallas que lo permiten y que, al pulsarlo, por ejemplo, muestre un di\u00e1logo modal que ofrezca la funcionalidad deseada. Las pantallas a las que se pueden agregar acciones en bot\u00f3n son: Pantalla de carga de datos Permite procesar los datos de entrada y el formato de firma que se va a emplear. Pantalla de resultado de una firma simple. Permite procesar la firma generada, el formato de firma empleado, los certificados contenidos por la firma y el certificado utilizado para firmar. Pantalla de resultado de un proceso de firma masiva. Permite procesar las firmas generadas, el formato de firma empleado para cada uno de ellos, los certificados contenidos por la firma y el certificado utilizado para firmar. Pantalla del visor de firma. Permite procesar la firma mostrada, su formato y el \u00e1rbol de firmantes contenido en la misma.","title":"Botones de acci\u00f3n"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#menu","text":"Los plugins permiten crear un men\u00fa propio en la barra de men\u00fas de la aplicaci\u00f3n. Este men\u00fa ser\u00eda visible desde todas las pantallas de la aplicaci\u00f3n en las que se muestra la barra. Las opciones de este men\u00fa pueden ser submen\u00fas o tener asociadas acciones. Estas acciones permiten ejecutar operaciones independientes. No reciben informaci\u00f3n de la pantalla que se muestra actualmente en la aplicaci\u00f3n como hacen los botones. Esta funcionalidad est\u00e1 orientada a ampliar el funcionamiento de AutoFirma. Por ejemplo, ha permitido externalizar a un plugin la funcionalidad de c\u00e1lculo y comprobaci\u00f3n de hashes de AutoFirma 1.7. Las operaciones de hashes ahora estar\u00e1n disponibles a trav\u00e9s de las opciones de un men\u00fa. Vista de la barra de men\u00fas sin plugins instalados: < Vista de la barra de men\u00fas con el plugin de c\u00e1lculo de hashes: < Vista de la barra de men\u00fas con el men\u00fa del plugin de c\u00e1lculo de hashes desplegado: <","title":"Men\u00fa"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#nuevos-comandos","text":"Los plugins permiten introducir nuevos comandos que un usuario pueda utilizar al ejecutar AutoFirma desde l\u00ednea de comandos. Una vez se instala el plugin, los nuevos comandos estar\u00e1n disponibles para su ejecuci\u00f3n tanto desde el ejecutable de AutoFirma (en todos los sistemas), como desde AutoFirmaCommandLine (s\u00f3lo en Windows). El desarrollador del plugin tiene pleno control sobre la l\u00f3gica de los comandos implementados y ser\u00e1 el encargado de definir toda la funcionalidad, as\u00ed como el tratamiento que debe hacer de sus par\u00e1metros. El desarrollador es libre de definir los par\u00e1metros que desee para sus comandos, aunque se recomienda por homogeneidad utilizar los mismos par\u00e1metros que los comandos nativos de AutoFirma cuando ya existan para indicar un tipo de par\u00e1metro concreto (datos de entrada, formato, etc). <","title":"Nuevos comandos"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#configuracion-de-los-plugins","text":"Los plugins puede permitir o no su configuraci\u00f3n al usuario. Por ejemplo, un plugin que valide el certificado de firma utilizado contra su Distribution Point (propiedad del propio certificado y en la que se incluye la URL para su validaci\u00f3n), podr\u00eda no necesitar configuraci\u00f3n por parte del usuario. En cambio, un plugin que valide firmas contra una plataforma externa de la que el usuario deba configurar sus credenciales s\u00ed que lo necesitar\u00eda. Las opciones de configuraci\u00f3n de un plugin que lo permita se encuentran en el di\u00e1logo de gesti\u00f3n de plugins . En esta pantalla se mostrar\u00e1 un bot\u00f3n para el acceso a las opciones de configuraci\u00f3n del plugin . La interfaz gr\u00e1fica de configuraci\u00f3n deber\u00e1 proporcionarla el propio plugin y desde esta se podr\u00e1n definir y configurar las distintas opciones. AutoFirma se encargar\u00e1 de almacenar las propiedades definidas, no ser\u00e1 necesario que lo haga el propio plugin , y se las proporcionar\u00e1 a las distintas funciones del plugins (operaciones de preproceso de los datos y postproceso de la firma, acciones asignadas a los distintos botones definidos, etc.). Estas mismas opciones se devolver\u00e1n a la propia interfaz de configuraci\u00f3n cuando se vuelva a abrir para que muestre predefinidas las opciones configuradas.","title":"Configuraci\u00f3n de los plugins"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#permisos-de-plugins","text":"El sistema de plugins de AutoFirma define una serie de permisos con los que se concede a los plugins permiso para integrarse de cada una de las formas se\u00f1aladas anteriormente. Los permisos de un plugin se declaran en el fichero plugin.json del plugin, y AutoFirma no permitir\u00e1 que un plugin se integre de un poco concreto si este modo no estaba declarado expresamente en este fichero. AutoFirma mostrar\u00e1 al usuario los permisos declarados por el plugin antes de proceder a su instalaci\u00f3n y s\u00f3lo lo instalar\u00e1 si el usuario da su consentimiento. Ejemplo de di\u00e1logo de solicitud de permisos: < Los permisos que puede solicitar un plugin son: Instalaci\u00f3n: Permiso para implementar los m\u00e9todos de instalaci\u00f3n y desinstalaci\u00f3n. Este es el m\u00e9todo que permite hacer cambios en el equipo durante la instalaci\u00f3n y la desinstalaci\u00f3n del plugin. Reinicio: Permiso para reiniciar la aplicaci\u00f3n. Al conceder este permiso, tanto finalizar la instalaci\u00f3n como la desinstalaci\u00f3n, se reiniciar\u00e1 AutoFirma. Esto es necesario para poder aplicar los cambios de algunos modos de integraci\u00f3n, como la integraci\u00f3n de un nuevo men\u00fa. Firma en l\u00ednea: Permisos para implementar los m\u00e9todos de preconfiguraci\u00f3n y composici\u00f3n de la respuesta de los procesos de firma cuando se solicitan por protocolo. Preprocesado: Permiso para procesar los datos antes de las operaciones de firma realizadas desde la interfaz gr\u00e1fica. Postprocesado: Permiso para procesar las firmas una vez generadas desde la interfaz gr\u00e1fica de la aplicaci\u00f3n. Nuevos botones: Permisos para agregar botones a la interfaz de la aplicaci\u00f3n. Nuevo men\u00fa: Permisos para agregar un nuevo men\u00fa a la interfaz de la aplicaci\u00f3n. Nuevos comandos: Permisos para agregar nuevos comandos ejecutables por l\u00ednea de comandos.","title":"Permisos de plugins"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#desarrollo-de-plugins","text":"Un plugin de AutoFirma es una biblioteca Java en la que una de sus clases extiende la clase base de plugins . Para extender esta clase, ser\u00e1 necesario importar en nuestro proyecto el m\u00f3dulo que contiene las clases base para el uso de los plugins . Un desarrollador puede importar este m\u00f3dulo utilizando Apache Maven y la dependencia: <dependency> <groupId>es.gob.afirma</groupId> <artifactId>afirma-ui-simpleafirma-plugins</artifactId> <version>1.8.0</version> </dependency> AutoFirma es compatible con Java 8 y superiores. En concreto, las distribuciones de 32bits de AutoFirma se incorpora Java 8 y las de 64bits con Java 11. Si deseamos que nuestros plugins sean compatibles con todas las instalaciones de AutoFirma, deber\u00e1n implementarse para ser compatibles con Java 8. Actualmente, AutoFirma s\u00f3lo soporta plugins empaquetados en forma de un \u00fanico archivo JAR. Los plugins que se implementen deber\u00e1n incluir todas sus clases y dependencias en un \u00fanico JAR o implementar por su cuenta un mecanismo de carga de dependencias. Nunca se deben insertar en el JAR del plugin las clases del m\u00f3dulo \u201cafirma-ui-simpleafirma-plugins\u201d ni ninguna otra clase de AutoFirma, ya que estas ya se encontrar\u00e1n disponibles en la aplicaci\u00f3n.","title":"Desarrollo de plugins"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#construir-un-plugin","text":"Como se ha mencionado, y salvo que se implementen mecanismos de carga propios, un plugin se presenta en forma de un \u00fanico JAR que contiene todas las clases y recursos que necesita. Ya que en AutoFirma se pueden cargar m\u00faltiples plugins simult\u00e1neamente y desconocemos donde almacenar\u00e1n sus recursos, cada plugin deber\u00eda establecer un nombre de paquete propio y agregar todas sus clases y recursos en dicho paquete. Una vez importado el m\u00f3dulo, se deber\u00e1n seguir los siguientes pasos para desarrollar nuestro plugin : Crear un fichero plugin.json Este fichero se agregar\u00e1 al paquete que hayamos definido y contendr\u00e1 los metadatos de nuestro plugin y referencias a todos los elementos que definen su comportamiento (botones que agrega, di\u00e1logo gr\u00e1fico para su configuraci\u00f3n, etc). Este fichero deber\u00e1 codificarse en UTF-8. La estructura del JSON contendr\u00e1 los elementos: info: Este contendr\u00e1 los datos y la configuraci\u00f3n del plugin . Los elementos que albergar\u00e1 son: name: Nombre interno del plugin (sin espacios). title: Nombre legible del plugin . version_code: Opcional. N\u00famero natural que identifica la versi\u00f3n del plugin . Por defecto, 1. version: Opcional. Cadena con la versi\u00f3n del plugin en formato libre. Por defecto, \u201c1.0\u201d. authors: Opcional. Lista con el nombre de los autores del plugin . contacts: Opcional. Lista con la informaci\u00f3n de contacto de los autores. description: Descripci\u00f3n del plugin . configuration_panel: Opcional. Nombre de la clase que implementa el panel de configuraci\u00f3n. Si no se indica, no habr\u00e1 panel de configuraci\u00f3n del plugin . permissions: Opcional. Listado de nombres de permiso que requiere el plugin. Los permisos disponibles son: INSTALL: Permiso para ejecutar c\u00f3digo en la instalaci\u00f3n/desinstalaci\u00f3n del plugin. RESET: Permiso para reiniciar AutoFIrma tras la instalaci\u00f3n/desinstalaci\u00f3n. El reinicio se realiza de forma autom\u00e1tica. INLINE_PROCESS: Permisos para modificar el procesado de las peticiones realizadas desde el navegador. PRESIGN: Permiso para preprocesar los datos antes de una operaci\u00f3n de firma a trav\u00e9s de la interfaz de escritorio. POSTSIGN: Permiso para postprocesar las firmas generadas en una operaci\u00f3n de firma a trav\u00e9s de la interfaz de escritorio. BUTTONS: Permiso para agregar acciones a la interfaz de escritorio a trav\u00e9s de botones. MENU: Permiso para agregar un men\u00fa con acciones a la interfaz de escritorio. COMMANDS: Permiso para agregar nuevos comandos para usar por l\u00ednea de comandos. inline_processor: Opcional. Nombre de una clase que implementa es.gob.afirma.standalone.plugins.SignDataProcessor. Esta clase puede definir el modo de procesar los datos y la firma en una operaci\u00f3n invocada desde un navegador web. buttons: Opcional. Lista de botones que se deber\u00e1n mostrar en la interfaz de AutoFirma. Cada bot\u00f3n define: title: Opcional. Texto que mostrar en el bot\u00f3n. El bot\u00f3n deber\u00eda definir este atributo y/o un icono. icon: Opcional. Imagen que mostrar en el bot\u00f3n a modo de icono. El bot\u00f3n deber\u00eda definir este atributo y/o un texto. tooltip: Opcional. Texto de ayuda que asociar al bot\u00f3n. accesible_description: Opcional. Texto accesible que asociar al bot\u00f3n. window: Ventana en la que mostrar el bot\u00f3n. action: Nombre de la clase que define la acci\u00f3n a realizar por el bot\u00f3n. menu: Opcional. Nueva opci\u00f3n que se agregar\u00e1 a la barra de men\u00fas de AutoFirma. Puede contener un listado de opciones y submen\u00fas. Un men\u00fa define: title: Texto del men\u00fa. El texto del men\u00fa principal es el que se mostrara en la barra de men\u00fas de AutoFirma. items: Opcional. Listado de submen\u00fas de este. Cada submen\u00fa se define igual que un men\u00fa. action: Opcional. Nombre de la clase que define la acci\u00f3n a realizar por esta opci\u00f3n de men\u00fa. Si se declar\u00f3 un listado de submen\u00fas para este men\u00fa, este no podr\u00e1 tener una acci\u00f3n asociada. commands: Opcional. Listado de comandos que se agregaran para su uso por l\u00ednea de comandos. Por cada uno de ellos se define: name: Nombre del comando. description: Texto descriptivo de la operaci\u00f3n. action: Nombre de la clase que implementa el comando. A continuaci\u00f3n, se presenta la declaraci\u00f3n formal del JSON mediante su esquema (conforme al borrador 7 del documento de definici\u00f3n de esquemas JSON): { \"$schema\": \"http://json-schema.org/draft-07/schema#\" , \"definitions\": { \"info\": { \"type\": \"object\" , \"properties\": { \"name\": { \"type\": \"string\" }, \"title\": { \"type\": \"string\" }, \"version_code\": { \"type\": \"integer\" , \"default\": 1 }, \"version\": { \"type\": \"string\" , \"default\": \"1.0\" }, \"authors\": { \"type\": \"array\" , \"items\": { \"type\": \"string\" }, \"default\": [] }, \"contacts\": { \"type\": \"array\" , \"items\": { \"type\": \"string\" }, \"default\": [] }, \"description\": { \"type\": \"string\" }, \"configuration_panel\": { \"type\": \"string\" } }, \"required\": [ \"name\" , \"title\" , \"description\" ] }, \"permissions\": { \"type\": \"array\" , \"items\": { \"type\": \"string\" , \"enum\": [ \"INSTALL\" , \"INLINE_PROCESS\" , \"RESET\" , \"PRESIGN\" , \"POSTSIGN\" , \"BUTTONS\" , \"MENU\" , \"COMMANDS\" ] }, \"default\": [] }, \"button\": { \"type\": \"object\" , \"properties\": { \"title\": { \"type\": \"string\" }, \"icon\": { \"type\": \"string\" }, \"tooltip\": { \"type\": \"string\" }, \"accesible_description\":{ \"type\": \"string\" }, \"window\": { \"type\": { \"enum\": [ \"input\" , \"single_result\" , \"multi_result\" , \"visor\" ] } }, \"action\": { \"type\": \"string\" } }, \"required\": [ \"window\" , \"action\" ] } }, \"menu\": { \"type\": \"object\" , \"properties\": { \"title\": { \"type\": \"string\" }, \"action\": { \"type\": \"string\" }, \"items\": { \"type\": \"array\" , \"items\": { \"$ref\": \"#/definitions/menu\" }, \"default\": [] } }, \"required\": [ \"title\" ] }, \"command\": { \"type\": \"object\" , \"properties\": { \"name\": { \"type\": \"string\" }, \"description\": { \"type\": \"string\" }, \"action\": { \"type\": \"string\" } }, \"required\": [ \"name\" , \"action\" ] } \"type\": \"object\" , \"properties\": { \"info\": { \"$ref\": \"#/definitions/info\" }, \"permissions\": { \"$ref\": \"#/definitions/permissions\" }, \"inline_processor\": { \"type\": \"string\" }, \"buttons\": { \"type\": \"array\" , \"items\": { \"$ref\": \"#/definitions/button\" }, \"default\": [] }, \"menu\": { \"$ref\": \"#/definitions/menu\" }, \"commands\": { \"type\": \"array\" , \"items\": { \"$ref\": \"#/definitions/command\" }, \"default\": [] } }, \"required\": [ \"info\" ] } Un ejemplo de \u201cplugin.json\u201d ser\u00eda: { \"info\": { \"name\" : \"validate_certs\" , \"title\" : \"Validaci\u00f3n de certificados\" , \"version_code\" : 1, \"version\" : \"1.0\" , \"authors\" : [ \"Gobierno de Espa\u00f1a\" ], \"description\" : \"Plugin para la comprobaci\u00f3n del estado de certificados de firma.<br><br>Este plugin permite validar los certificados utilizados para firmar con AutoFirma. La validaci\u00f3n se realiza mediante mecanismos predefinidos para los certificados de algunos prestadores de servicios de confianza y, en caso de no tener estos mecanismos predefinidos, contra la CRL o el OCSP declarado en el propio certificado.<br><br>Aseg\u00farese de utilizar \u00fanicamente certificados emitidos por prestadores de confianza para firmar, ya que un certificado de un origen desconocido podr\u00eda declarar mecanismos de validaci\u00f3n no seguros.\" }, \"permissions\" : [ \"BUTTONS\" ], \"buttons\" : [ { \"title\" : \"Validar certificado de firma\" , \"icon\" : \"es/gob/afirma/plugin/certvalidation/certificate_16.png\" , \"tooltip\" : \"Validar el certificado con el que se ha realizado la firma\" , \"accesible_description\" : \"Valida el certificado utilizado para firmar\" , \"window\" : \"single_result\" , \"action\" : \"es.gob.afirma.plugin.certvalidation.ValidateCertAction\" }, { \"title\" : \"Validar certificado de firma\" , \"icon\" : \"es/gob/afirma/plugin/certvalidation/certificate_16.png\" , \"tooltip\" : \"Validar el certificado con el que se ha realizado la firma\" , \"accesible_description\" : \"Valida el certificado utilizado para firmar\" , \"window\" : \"multi_result\" , \"action\" : \"es.gob.afirma.plugin.certvalidation.ValidateCertAction\" } ] } Al instalar este plugin en AutoFirma, su aspecto en el di\u00e1logo de gesti\u00f3n de plugins ser\u00e1: < Implementar AfirmaPlugin Todo plugin deber\u00e1 tener una clase que herede de AfirmaPlugin. Esta ser\u00e1 la clase principal del plugin y deber\u00e1 encontrarse en el mismo paquete que el fichero \u201cplugin.json\u201d. En esta clase se podr\u00e1n implementar los siguientes comportamientos: Instalaci\u00f3n del plugin : Se ejecuta una \u00fanica vez al importar el plugin en AutoFirma. Si fuese necesario, en \u00e9l se deben configurar el sistema y preparar los recursos que requiera el plugin para su funcionamiento. Desinstalaci\u00f3n del plugin : Se ejecuta una \u00fanica vez al eliminar el plugin de AutoFirma. En \u00e9l se deben deshacer las opciones realizadas en el m\u00e9todo de instalaci\u00f3n. Preproceso de los datos Se ejecuta antes de la firma de cada uno de los datos de entrada. Este m\u00e9todo permite manipular o realizar operaciones en base a los datos que van a firmarse y devuelve los datos que realmente se firmar\u00e1n. Postproceso de la firma Se ejecuta despu\u00e9s de generar una firma electr\u00f3nica y antes de almacenarla en disco. Este m\u00e9todo permite manipular la firma resultante o realizar operaciones en base a ella y devuelve los datos que finalmente se almacenar\u00e1n en disco. Tambi\u00e9n recibe el formato de firma utilizado y la cadena de certificaci\u00f3n del certificado de firma. Fin de operaci\u00f3n Se ejecuta despu\u00e9s de haber finalizado la operaci\u00f3n: En el caso de una firma simple, se ejecutar\u00e1 despu\u00e9s del postprocesado de la firma. En caso de una firma masiva, se ejecutar\u00e1 una \u00fanica vez, tras haber postprocesado todas las firmas. Puede usarse si se almacena informaci\u00f3n en el proceso de postfirma que afecte a todas las firmas, para poder restablecer los datos a sus valores iniciales. Por ejemplo, en una firma masiva, se podr\u00eda comprobar en el postprocesado si el usuario ha aceptado manipular la firma de alguna manera. Si a\u00fan no se le pregunt\u00f3, se le pregunta; si ya se pregunt\u00f3, se hace lo que se decidiera. En el m\u00e9todo de fin de operaci\u00f3n se eliminar\u00eda la respuesta del usuario para que en futuras operaciones se volviese a preguntar. Para saber m\u00e1s sobre c\u00f3mo implementar los m\u00e9todos de instalaci\u00f3n y desinstalaci\u00f3n del plugin , consulte el apartado 4.3 M\u00e9todos de instalaci\u00f3n y desinstalaci\u00f3n . Para saber m\u00e1s sobre c\u00f3mo implementar los m\u00e9todos de preproceso de datos, postproceso de firma y fin de la operaci\u00f3n, consulte el apartado 4.4 M\u00e9todos de preconfiguraci\u00f3n y respuesta de las peticiones de firma Los plugins permiten definir un mecanismo para tratar las firmas electr\u00f3nicas solicitadas por una aplicaci\u00f3n externa mediante protocolo. Estos m\u00e9todos, a diferencia de los de prefirma y postfirma no tiene que implementarse en la clase principal del plugin (AfirmaPlugin), sino en una clase independiente que herede de la clase SignDataProcessor. Para configurar el uso de esta clase, se deber\u00e1 establecer la propiedad \u201cinline_processor\u201d del fichero \u201cplugin.json\u201d. La clase define varios m\u00e9todos abstractos que se deber\u00e1n implementar: -","title":"Construir un plugin"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#-","text":"boolean checkTrigger(SignOperation operation)Identifica cuando debe activarse la operativa de este plugin. En el par\u00e1metro operation se recibe toda la configuraci\u00f3n de firma establecida.Si devuelve true, se ejecutar\u00e1n las funciones preProcess y postProcess sobre los datos de la operaci\u00f3n. Si devuelve false, no se ejecutar\u00e1n y se consultar\u00e1 el criterio del siguiente plugin de la lista.Criterios comunes de activaci\u00f3n que pueden usarse son:Se est\u00e1 procesando un dato concreto o con un formato concreto. Por ejemplo:Se ha proporcionado un token de autenticaci\u00f3n concreto.Se ha proporcionado una cadena de datos Base64 concatenados con un separador en lugar de un Base 64 \u00fanico.Se han proporcionado propiedades espec\u00edficas en el par\u00e1metro extraParams. Por ejemplo:Se han proporcionado las propiedades necesarias para la firma visible PDF.Se ha proporcionado una propiedad no recogida por AutoFirma que se utiliza expresamente para la activaci\u00f3n de este plugin.Se ha proporcionado un par\u00e1metro distinto de los soportados por AutoFirma. Estos par\u00e1metros se obtienen a trav\u00e9s del m\u00e9todo getAnotherParams() del objeto operationList<SignOperation> preProcess(SignOperation operation)Operaci\u00f3n de preconfiguraci\u00f3n.Esta operaci\u00f3n se ejecuta antes de la operaci\u00f3n de firma y permite redefinir los par\u00e1metros de entrada como un listado de par\u00e1metros del mismo tipo. Esto permite transformar una operaci\u00f3n de firma en muchas o redefinir los par\u00e1metros de la operaci\u00f3n.StringBuilder postProcess(List<SignResult> results, SignOperation signOperation) throws EncryptingException, PluginControlledExceptionOperaci\u00f3n de composici\u00f3n de la respuesta de la operaci\u00f3n.Esta operaci\u00f3n se ejecuta despu\u00e9s de haber generado los resultados de todas las operaciones de firma definidas.Recibe el resultado de todas las operaciones de firma y la configuraci\u00f3n de firma original recibida por la aplicaci\u00f3nDevuelve la cadena de texto que devolver a la aplicaci\u00f3n que solicit\u00f3 la operaci\u00f3n de firma. void setCipherKey( byte [] key)Establece la clave de cifrado proporcionada por la aplicaci\u00f3n para que el plugin la aplique como considere en la composici\u00f3n de la respuesta de la operaci\u00f3n. boolean isErrorsAllowed()Establece si, al procesar m\u00e1s de una firma, deber\u00eda interrumpirse la operaci\u00f3n cuando falle al menos una de ellas. Para permitir que un plugin modifique la operativa de las operaciones solicitadas por una aplicaci\u00f3n cliente, es necesario que declare el permiso INLINE_PROCESS. M\u00e9todos de prefirma y postfirma desde la interfaz gr\u00e1fica. Un plugin podr\u00eda no sobrescribir ninguno de los m\u00e9todos de AfirmaPlugin si no act\u00faa en ninguno de los procesos listados. En ese caso, la clase aparecer\u00e1 vac\u00eda y la interacci\u00f3n del usuario con el plugin se deber\u00e1 realizar a trav\u00e9s de los botones declarados en \u201cplugin.json\u201d. Un ejemplo de clase de este tipo ser\u00eda: public class MiNuevoPlugin extends AfirmaPlugin { // No se define ningun comportamiento especial para el plugin } Declarar un servicio AfirmaPlugin Es necesario notificar a AutoFirma cu\u00e1l de las clases de nuestra biblioteca es la que implementa la clase AfirmaPlugin. Para hacer esto, anunciaremos nuestra clase como servicio creando en el directorio \u201cMETA-INF/services\u201d del proyecto el fichero \u201ces.gob.afirma.standalone.plugins.AfirmaPlugin\u201d. El contenido de este fichero debe ser el nombre completo de la clase que implementa AfirmaPlugin. Por ejemplo, es.gob.afirma.plugin.certvalidation.ValidateCertsPlugin","title":"-"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#estructura-del-plugin","text":"Una vez se hayan seguido los pasos anteriores para la construcci\u00f3n b\u00e1sica del plugin , la estructura m\u00ednima del proyecto debe ser la siguiente: < En el diagrama mostrado: X , Y y Z , representan el paquete al que pertenece nuestro plugin y que no deber\u00eda coincidir con el de ning\u00fan otro. MiNuevoPlugin.java representa a la clase que implementa AfirmaPlugin. resources ser\u00eda un directorio en el que podr\u00edamos almacenar los recursos (im\u00e1genes, ficheros de propiedades o cualquier otra cosa) que requiera nuestro plugin . Este directorio no tiene porqu\u00e9 existir, podr\u00eda no haber recursos que almacenar o incluirse estos directamente en la estructura del paquete sin incluir un directorio adicional; podr\u00eda tener cualquier otro nombre o podr\u00edan separarse los recursos en diversos directorios. En este caso, el contenido del fichero \u201ces.gob.afirma.standalone.plugins.AfirmaPlugin\u201d ser\u00eda: X.Y.Z.MiNuevoPlugin","title":"Estructura del plugin"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#opciones-de-configuracion","text":"Diversos tipos de plugins podr\u00edan permitir al usuario configurar su comportamiento incluso el configurarlos podr\u00eda ser totalmente necesario para su funcionamiento. Por ejemplo, un plugin podr\u00eda permitir configurar el algoritmo que utilizar\u00e1 al realizar una operaci\u00f3n, mientras que otro podr\u00eda necesitar que el usuario configurase sus credenciales para acceder a un almac\u00e9n externo. La configuraci\u00f3n de todos los plugins deber\u00e1 establecerse desde el di\u00e1logo de gesti\u00f3n de plugins . Cuando un usuario seleccione un plugin y este disponga de opciones configurables, se mostrar\u00e1 un bot\u00f3n \u201cConfigurar\u201d. Al pulsarlo, se mostrar\u00e1 al usuario un di\u00e1logo en el que se mostrar\u00e1n las opciones configurables. La apariencia de este di\u00e1logo y las opciones que contiene se definir\u00e1 program\u00e1ticamente mediante la herencia de la clase ConfigurationPanel. Esta clase es un JPanel sobre el que se deber\u00e1 construir la apariencia del di\u00e1logo de configuraci\u00f3n. Nuestra clase deber\u00e1 ser p\u00fablica e implementar el constructor por defecto (sin par\u00e1metros), en el que se agregar\u00e1n los distintos componentes gr\u00e1ficos que se requieran para la configuraci\u00f3n (cajas de texto, listas de selecci\u00f3n, cuadros de verificaci\u00f3n, etc.) estructurados en directamente en el panel, en subpaneles o en pesta\u00f1as seg\u00fan se desee. La clase ConfigurationPanel deber\u00e1 adem\u00e1s implementar los siguientes m\u00e9todos: Properties getConfiguration() Este m\u00e9todo construir\u00e1 un objeto Properties en el que almacenar\u00e1 todos los valores configurados asign\u00e1ndoles un nombre de propiedad a cada uno de ellos. El nombre asignado a cada opci\u00f3n de configuraci\u00f3n y con el que se guarda en el Properties ser\u00e1 el nombre con el que se podr\u00e1 recuperar el valor durante la ejecuci\u00f3n del plugin . Todas las opciones configurables deber\u00edan tener una propiedad asignada, incluso si no se estableci\u00f3 un valor para ella, ya que el no hacerlo podr\u00eda resultar en que se utilicen valores nulos al solicitar las opciones configuradas. Este m\u00e9todo se llama al aceptar el di\u00e1logo de selecci\u00f3n de la configuraci\u00f3n y se encarga de guardar todas las propiedades definidas. void init(Properties config) Este m\u00e9todo recibe un objeto Properties con los valores actualmente asignados a las opciones configurables. Si nunca se les ha asignado un valor, devolver\u00e1 nulo. En este m\u00e9todo se deber\u00edan obtener los valores configurados en el objeto y establecerlos en las opciones de configuraci\u00f3n de nuestro di\u00e1logo gr\u00e1fico. Las propiedades que definen el valor configurado para cada opci\u00f3n de configuraci\u00f3n son las que se le hayan asignado en la llamada a getConfiguration(). Este m\u00e9todo se llama al pulsar el bot\u00f3n \u201cConfigurar\u201d para abrir el di\u00e1logo de configuraci\u00f3n del plugin . Un ejemplo de implementaci\u00f3n de di\u00e1logo de configuraci\u00f3n en el que se permite la configuraci\u00f3n de un cuadro de texto ser\u00eda la siguiente: public class MiDialogoConfiguracionPanel extends ConfigurationPanel { private static final String PROP_NOMBRE_FIRMANTE = \"nombreFirmante\"; private final JTextField tfNombreFirmante; public MiDialogoConfiguracionPanel() { // Establecemos un layout setLayout( new GridBagLayout()); // Construimos los distintos componentes graficos this .tfNombreFirmante = new JTextField(); final JLabel lbNombreFirmante = new JLabel(\"Nombre del firmante:\"); lbNombreFirmante.setLabelFor( this .tfNombreFirmante); // Posicionamos los componentes en el panel final GridBagConstraints c = new GridBagConstraints(); c.fill = GridBagConstraints. HORIZONTAL ; c.weightx = 1.0; c.gridy = 0; add(lbNombreFirmante, c); c.gridy++; add( this .tfNombreFirmante, c); } @Override public void init( final Properties config) { // Inicializamos el campo con el valor previamente configurado o con // un valor por defecto si no se encontro String nombre = config.getProperty( PROP_NOMBRE_FIRMANTE , \"\"); this .tfNombreFirmante.setText(nombre); } @Override public Properties getConfiguration() { // Creamos el objeto de propiedades y guardamos en el valor del // campo que permitimos configurar final Properties config = new Properties(); config.setProperty( PROP_NOMBRE_FIRMANTE , this .tfNombreFirmante.getText()); return config; } } Para poder indicar al plugin cu\u00e1l es nuestra clase de di\u00e1logo de configuraci\u00f3n estableceremos el nombre de la clase en la propiedad \u201cconfiguration_panel\u201d en el apartado \u201cInfo\u201d del fichero \u201cplugin.json\u201d. { \"info\": { \"name\" : \"miplugin\" , \"title\" : \"Inserci\u00f3n del nombre del firmante\" , \"version_code\" : 1, \"version\" : \"1.0\" , \"description\" : \"Plugin de prueba\" , \"configuration_panel\" : \"X.Y.Z.MiDialogoConfiguracionPanel\" } \u2026 Con un fichero \u201cplugin.json\u201d con el del ejemplo, se mostrar\u00eda la informaci\u00f3n del plugin y el bot\u00f3n de configuraci\u00f3n como sigue: < En caso de implementar el di\u00e1logo de configuraci\u00f3n como en el ejemplo, al pulsar el bot\u00f3n de \u201cConfigurar\u201d se mostrar\u00eda: <","title":"Opciones de configuraci\u00f3n"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#acceso-a-las-opciones-de-configuracion","text":"AutoFirma implementa un mecanismo para la recuperaci\u00f3n de la configuraci\u00f3n del plugin desde cualquier punto de su c\u00f3digo. Esto se har\u00e1 mediante la llamada al m\u00e9todo getConfig() de las clases AfirmaPlugin y PluginAction. Properties getConfig() Este m\u00e9todo devuelve el conjunto de propiedades en el que hayamos almacenado los valores establecidos en nuestro di\u00e1logo de configuraci\u00f3n. As\u00ed, por ejemplo, desde las acciones de preprocesado de datos, postprocesado de firma o la acci\u00f3n de un bot\u00f3n, podemos hacer una llamada solicitando las opciones de configuraci\u00f3n que tenemos establecidas: @Override public byte [] postSignProcess( byte [] signature, String format, Certificate[] certChain) throws PluginControlledException { String firmante = getConfig().getProperty( MiDialogoConfiguracionPanel. PROP_NOMBRE_FIRMANTE ); \u2026 }","title":"Acceso a las opciones de configuraci\u00f3n"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#metodos-de-instalacion-y-desinstalacion","text":"Los plugins permiten establecer un procedimiento de instalaci\u00f3n y desinstalaci\u00f3n que preparen el sistema para su funcionamiento y lo devuelvan a su estado original, respectivamente. Estos procedimientos se implementan en la clase principal del plugin , extensi\u00f3n de AfimaPlugin: Instalaci\u00f3n del plugin : Genera o establece la configuraci\u00f3n necesaria en el sistema para el funcionamiento del plugin . void install() throws PluginControlledException Se ejecuta durante el proceso de importaci\u00f3n del plugin en la aplicaci\u00f3n. En caso de error irrecuperable, se lanzar\u00eda una excepci\u00f3n de tipo PluginControlledException. En ese caso, se mostrar\u00eda un mensaje de error al usuario, se deshar\u00edan las tareas de instalaci\u00f3n realizadas y se ejecutar\u00eda el proceso de desinstalaci\u00f3n establecido por el propio plugin . Desinstalaci\u00f3n del plugin : Deshace las acciones realizadas durante el proceso de instalaci\u00f3n, adem\u00e1s de eliminar cualquier otro recurso agregado o deshacer las acciones realizadas durante el funcionamiento del plugin . void uninstall() throws PluginControlledException Se ejecuta durante el proceso de desinstalaci\u00f3n de un plugin . En caso de error irrecuperable, se lanzar\u00eda una excepci\u00f3n de tipo PluginControlledException. En ese caso, se mostrar\u00eda un mensaje de error al usuario y se eliminar\u00eda el plugin de la aplicaci\u00f3n, aunque no se completase el proceso. Para permitir que un plugin defina acciones a ejecutar durante la instalaci\u00f3n y desinstalaci\u00f3n, es necesario que declare el permiso INSTALL. Si adicionalmente se desea que se reinicie AutoFirma despu\u00e9s de la instalaci\u00f3n y desinstalaci\u00f3n, deber\u00e1 declararse el permiso RESET.","title":"M\u00e9todos de instalaci\u00f3n y desinstalaci\u00f3n"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#metodos-de-preconfiguracion-y-respuesta-de-las-peticiones-de-firma","text":"Los plugins permiten definir un mecanismo para tratar las firmas electr\u00f3nicas solicitadas por una aplicaci\u00f3n externa mediante protocolo. Estos m\u00e9todos, a diferencia de los de prefirma y postfirma no tiene que implementarse en la clase principal del plugin (AfirmaPlugin), sino en una clase independiente que herede de la clase SignDataProcessor. Para configurar el uso de esta clase, se deber\u00e1 establecer la propiedad \u201cinline_processor\u201d del fichero \u201cplugin.json\u201d. La clase define varios m\u00e9todos abstractos que se deber\u00e1n implementar: boolean checkTrigger(SignOperation operation) Identifica cuando debe activarse la operativa de este plugin. En el par\u00e1metro operation se recibe toda la configuraci\u00f3n de firma establecida. Si devuelve true, se ejecutar\u00e1n las funciones preProcess y postProcess sobre los datos de la operaci\u00f3n. Si devuelve false, no se ejecutar\u00e1n y se consultar\u00e1 el criterio del siguiente plugin de la lista. Criterios comunes de activaci\u00f3n que pueden usarse son: Se est\u00e1 procesando un dato concreto o con un formato concreto. Por ejemplo: Se ha proporcionado un token de autenticaci\u00f3n concreto. Se ha proporcionado una cadena de datos Base64 concatenados con un separador en lugar de un Base 64 \u00fanico. Se han proporcionado propiedades espec\u00edficas en el par\u00e1metro extraParams. Por ejemplo: Se han proporcionado las propiedades necesarias para la firma visible PDF. Se ha proporcionado una propiedad no recogida por AutoFirma que se utiliza expresamente para la activaci\u00f3n de este plugin. Se ha proporcionado un par\u00e1metro distinto de los soportados por AutoFirma. Estos par\u00e1metros se obtienen a trav\u00e9s del m\u00e9todo getAnotherParams() del objeto operation List<SignOperation> preProcess(SignOperation operation) Operaci\u00f3n de preconfiguraci\u00f3n. Esta operaci\u00f3n se ejecuta antes de la operaci\u00f3n de firma y permite redefinir los par\u00e1metros de entrada como un listado de par\u00e1metros del mismo tipo. Esto permite transformar una operaci\u00f3n de firma en muchas o redefinir los par\u00e1metros de la operaci\u00f3n. StringBuilder postProcess(List<SignResult> results, SignOperation signOperation) throws EncryptingException, PluginControlledException Operaci\u00f3n de composici\u00f3n de la respuesta de la operaci\u00f3n. Esta operaci\u00f3n se ejecuta despu\u00e9s de haber generado los resultados de todas las operaciones de firma definidas. Recibe el resultado de todas las operaciones de firma y la configuraci\u00f3n de firma original recibida por la aplicaci\u00f3n Devuelve la cadena de texto que devolver a la aplicaci\u00f3n que solicit\u00f3 la operaci\u00f3n de firma. void setCipherKey( byte [] key) Establece la clave de cifrado proporcionada por la aplicaci\u00f3n para que el plugin la aplique como considere en la composici\u00f3n de la respuesta de la operaci\u00f3n. boolean isErrorsAllowed() Establece si, al procesar m\u00e1s de una firma, deber\u00eda interrumpirse la operaci\u00f3n cuando falle al menos una de ellas. Para permitir que un plugin modifique la operativa de las operaciones solicitadas por una aplicaci\u00f3n cliente, es necesario que declare el permiso INLINE_PROCESS.","title":"M\u00e9todos de preconfiguraci\u00f3n y respuesta de las peticiones de firma"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#metodos-de-prefirma-y-postfirma-desde-la-interfaz-grafica","text":"Los m\u00e9todos de preprocesado de los datos antes de firmarlos a trav\u00e9s de la interfaz gr\u00e1fica, el de postprocesado de la firma antes de almacenarla y el de fin de la operaci\u00f3n de firma se implementan en la clase principal del plugin , extensi\u00f3n de AfirmaPlugin: Preproceso de los datos: Procesa o act\u00faa sobre los datos a firmar. byte [] preSignProcess( byte [] data, String format) throws PluginControlledException Recibe los datos que van a firmarse y el formato de firma que se utilizar\u00e1. Devuelve los datos que finalmente se firmar\u00e1n. En caso de error irrecuperable, se lanzar\u00eda una excepci\u00f3n de tipo PluginControlledException. En ese caso, se mostrar\u00eda un mensaje de error al usuario, pero el proceso de firma continuar\u00e1 normalmente. Postproceso de la firma: Procesa o act\u00faa sobre la firma reci\u00e9n generada. byte [] postSignProcess( byte [] signature, String format, Certificate[] certChain) throws PluginControlledException Recibe la firma generada, el formato de firma utilizado y la cadena de certificaci\u00f3n del certificado con el que se ha firmado. La cadena de certificaci\u00f3n podr\u00eda no estar completa si no se encontrasen los certificados emisores en el almac\u00e9n. Devuelve la firma modificada. En caso de error irrecuperable, se lanzar\u00eda una excepci\u00f3n de tipo PluginControlledException. En ese caso, se mostrar\u00eda un mensaje de error al usuario, pero el proceso continuar\u00e1 normalmente con la firma original. Finalizaci\u00f3n del proceso de firma: Finaliza un proceso de firma simple o masiva, restableciendo lo que sea necesario para permitir una futura operaci\u00f3n. void reset() throws PluginControlledException En caso de error irrecuperable, se lanzar\u00eda una excepci\u00f3n de tipo PluginControlledException. En ese caso, se mostrar\u00eda un mensaje de error al usuario, pero la aplicaci\u00f3n continuar\u00eda funcionando normalmente. Para permitir que un plugin defina acciones a ejecutar para le preproceso de los datos y el postproceso de la firma, es necesario que declaren los permisos PRESIGN y POSTSIGN, respectivamente.","title":"M\u00e9todos de prefirma y postfirma desde la interfaz gr\u00e1fica"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#botones-de-accion_1","text":"Los botones de acci\u00f3n son botones que aparecen en diversas pantallas de AutoFirma y que permiten realizar operaciones con la informaci\u00f3n cargada en dicha pantalla, como los datos que se van a firmar o la firma que ya se ha generado. Estos botones aparecen ordenados y en serie en una barra de botones situada en la zona inferior de AutoFirma. Al pulsar un bot\u00f3n, se desencadena la opci\u00f3n configurada. Para el uso de botones de acci\u00f3n en un plugin es necesario realizar los siguientes pasos: Implementar la acci\u00f3n del bot\u00f3n Las acciones de los botones se implementar\u00e1n en clases Java que hereden de la clase PluginAction. De esta clase se puede sobrescribir el siguiente m\u00e9todo para definir su comportamiento: void start( final Window parent) Sin embargo, si se desea que nuestra acci\u00f3n utilice los datos cargados en la pantalla de AutoFirma en la que se muestre, nuestra acci\u00f3n deber\u00e1 heredar de alguna de las clases hija de PluginAction: DataProcessAction: Permite utilizar los datos cargados en AutoFirma. SignatureProcessAction: Permitir utilizar la firma generada o mostrada en AutoFirma y sus certificados. Seg\u00fan la pantalla en la que deseemos mostrar el bot\u00f3n, se deber\u00e1 implementar una u otra clase: Pantalla de carga de datos: DataProcessAction. Pantalla con el resultado de una firma simple: SignatureProcessAction. Pantalla con el resultado de una firma masiva: SignatureProcessAction. Pantalla de visualizaci\u00f3n de datos de firma: SignatureProcessAction. Al heredar de la clase DataProcessAction se debe sobrescribir el m\u00e9todo: void processData(InputData[] data, Window parent) Este m\u00e9todo recibe los datos de entrada de la pantalla y la ventana que padre en la que se muestran. El listado de objetos de datos de entrada. Este listado contendr\u00e1 un \u00fanico elemento en las operaciones de firma simple y varios en las operaciones de firma masiva. Cada uno de estos objetos nos da acceso a: El fichero de datos cargado. El formato de firma con el que se firmar\u00edan esos datos. La ventana padre nos sirve para utilizarla como ventana padre de cualquier di\u00e1logo gr\u00e1fico que deseemos mostrar. Al heredar la clase SignatureProcessAction se debe sobrescribir el m\u00e9todo: void processSignatures(OutputData[] outputs, X509Certificate signingCert, Window parent) Este m\u00e9todo recibe los datos de salida de la pantalla, el certificado de firma utilizado y la ventana que padre en la que se muestran los datos. El listado de objetos de datos de salida. Este listado contendr\u00e1 un \u00fanico elemento en las operaciones de firma simple y varios en las operaciones de firma masiva. Cada uno de estos objetos nos da acceso a: El fichero en el que se encuentra la firma. En caso de no existir, la firma debi\u00f3 finalizar con errores. Si la firma termin\u00f3 correctamente o no. El formato de la firma. Los certificados contenidos en la firma, que ser\u00e1 el certificado utilizado en la firma (si se ha firmado) y los certificados de firmas previas. El certificado de firma nos permite saber con qu\u00e9 certificado ha firmado el usuario. Este par\u00e1metro podr\u00eda llegar nulo si el usuario no hubiese firmado, por ejemplo, porque nos encontremos en la pantalla de visualizaci\u00f3n de firmas, en cuyo caso se carg\u00f3 una firma que ya estaba hecha y no una que acabe de hacer el usuario. La ventana padre nos sirve para utilizarla como ventana padre de cualquier di\u00e1logo gr\u00e1fico que deseemos mostrar. Por ejemplo, si quisi\u00e9ramos crear un plugin que permitiese validar los certificados de firma, podr\u00edamos crear una clase que herede de SignatureProcessAction, que implemente el m\u00e9todo processSignatures(), que tomase los certificados de la firma, los enviase a validar en base a su Distribution Point y mostrase un mensaje al usuario con el resultado de la validaci\u00f3n. Definir el aspecto del bot\u00f3n y la ventana en la que aparecer\u00e1 Una vez creada la acci\u00f3n del bot\u00f3n deber\u00e1 registrarse en el plugin para indicar d\u00f3nde aparecer\u00e1 y su aspecto. Esto se har\u00e1 desde el apartado \u201cbuttons\u201d del fichero plugin.json. Para cada uno de los botones se podr\u00e1 definir los siguientes atributos: title: Opcional. Texto que mostrar en el bot\u00f3n. El bot\u00f3n deber\u00eda definir este atributo y/o un icono. icon: Opcional. Imagen que mostrar en el bot\u00f3n a modo de icono. El bot\u00f3n deber\u00eda definir este atributo y/o un texto. tooltip: Opcional. Texto de ayuda que asociar al bot\u00f3n. accesible_description: Opcional. Texto accesible que asociar al bot\u00f3n para ser le\u00eddo por lectores de pantalla. Su uso est\u00e1 especialmente indicado cuando el bot\u00f3n muestra un icono y no texto. window: Ventana en la que mostrar el bot\u00f3n. Este atributo debe contener uno de los siguientes valores: input: El bot\u00f3n se mostrar\u00e1 en la pantalla de carga de datos. single_result: El bot\u00f3n se mostrar\u00e1 en la pantalla de resultado de una operaci\u00f3n firma simple. multi_result: El bot\u00f3n se mostrar\u00e1 en la pantalla de resultado de una operaci\u00f3n de firma masiva. visor: El bot\u00f3n se mostrar\u00e1 en la pantalla en la que se visualizan los datos de la firma a trav\u00e9s de la opci\u00f3n \u201cVer firma\u201d o al abrir la firma desde el sistema operativo. action: Nombre de la clase que define la acci\u00f3n a realizar por el bot\u00f3n. Esta clase debe heredar de PluginAction o de alguna de las clases que herede de ella. Por ejemplo, la subestructura JSON para definir un \u00fanico bot\u00f3n que aparecer\u00eda en la ventana del resultado de una firma simple ser\u00eda: \u2026 \"buttons\" : [ { \"title\" : \"Validar certificado de firma\" , \"icon\" : \"es/gob/afirma/plugin/certvalidation/certificate_16.png\" , \"tooltip\" : \"Validar el certificado con el que se ha realizado la firma\" , \"accesible_description\" : \"Valida el certificado utilizado para firmar\" , \"window\" : \"single_result\" , \"action\" : \"es.gob.afirma.plugin.certvalidation.ValidateCertAction\" } ] \u2026 Si se desease que el bot\u00f3n apareciera en varias de las pantallas admitidas ser\u00eda necesario declararlo m\u00faltiples veces en el fichero plugin.json. Debe recordarse que, si se desean utilizar los datos disponibles en una pantalla, nuestra acci\u00f3n deber\u00e1 heredar de una clase concreta para esa pantalla (DataProcessAction, SignatureProcessAction\u2026) ya que es la que recoge esos datos de la pantalla. Consulte en el paso 1 de este mismo apartado la acci\u00f3n que deber\u00e1 heredarse para poder utilizar los datos de cada una de las pantallas que lo admiten. En caso de querer realizar una misma acci\u00f3n desde diversas ventanas y que los datos de entrada no sean necesarios, podr\u00edamos implementar nuestra clase de acci\u00f3n heredando directamente de la clase PluginAction. Otorgar el permiso para la integraci\u00f3n de botones en la interfaz En el fichero de declaraci\u00f3n del plugin (plugin.json), se deber\u00e1 declarar el permiso BUTTONS.","title":"Botones de acci\u00f3n"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#menu-de-opciones","text":"Un plugin puede agregar un \u00fanico men\u00fa a la barra de men\u00fas de la aplicaci\u00f3n. Este men\u00fa puede definir varios submen\u00fas y/u opciones de men\u00fa con acciones definidas. Los elementos del men\u00fa aparecen con el orden en que se declararon en el fichero de configuraci\u00f3n del plugin. Cada una de las opciones del men\u00fa puede ser un submen\u00fa con nuevas opciones o tener declarada una acci\u00f3n a ejecutar. Para el uso de las opciones de men\u00fa en un plugin es necesario realizar los siguientes pasos: Implementar las acciones de las opciones del men\u00fa y sus submen\u00fas Las acciones de las opciones de men\u00fa se implementar\u00e1n en clases Java que hereden de la clase PluginAction. De esta clase se puede sobrescribir el siguiente m\u00e9todo para definir su comportamiento: void start( final Window parent) Este m\u00e9todo recibe como par\u00e1metro de entrada la ventana de AutoFirma para servidor como componente padre sobre el que mostrar cualquier di\u00e1logo gr\u00e1fico que sea necesario. Por ejemplo, si quisi\u00e9ramos que nuestro plugin mostrase un di\u00e1logo al pulsar sobre alguna de sus opciones de men\u00fa, podr\u00edamos crear una clase que herede de PluginAction, implemente el m\u00e9todo start() y en \u00e9l construya y muestre el di\u00e1logo. Definir la estructura y las opciones del men\u00fa Una vez creadas todas las acciones del men\u00fa, deberemos definir la estructura del mismo. Esto se har\u00e1 desde el apartado \u201cmenu\u201d del fichero plugin.json. Definiremos el atributo \u201cmenu\u201d con un listado de elementos. Cada elemento declarar\u00e1 un atributo \u201ctitle\u201d en el que se indicar\u00e1 el texto que se mostrar\u00e1 en esa opci\u00f3n de men\u00fa. A su vez, cada elemento deber\u00e1 declarar uno de los siguientes atributos: items: Se usar\u00e1 cuando se desee que la nueva opci\u00f3n sea un submen\u00fa. Estos atributos declarar\u00e1n un nuevo listado de elementos de men\u00fa. action: Se usar\u00e1 cuando se desee que sea la nueva opci\u00f3n tenga una acci\u00f3n asociada. Estos atributos declarar\u00e1n el nombre de la clase que implementa la acci\u00f3n que se desea desencadenar con esa opci\u00f3n. Por ejemplo, la subestructura JSON para definir un men\u00fa con dos submen\u00fas y cada uno de ellos con dos opciones ser\u00eda: \u2026 \"menu\": { \"title\": \"Huellas digitales\" , \"items\": [ { \"title\": \"Fichero\" , \"items\": [ { \"title\": \"Calcular huella digital\" , \"action\": \"es.gob.afirma.hash.CalculateHashFileAction\" }, { \"title\": \"Comprobar huella digital\" , \"action\": \"es.gob.afirma.hash.CheckHashFileAction\" } ] }, { \"title\": \"Directorio\" , \"items\": [ { \"title\": \"Calcular huella digital en directorio\" , \"action\": \"es.gob.afirma.hash.CalculateHashDirAction\" }, { \"title\": \"Comprobar huella digital en directorio\" , \"action\": \"es.gob.afirma.hash.CheckHashDirAction\" } ] } ] }, \u2026 Otorgar el permiso para la integraci\u00f3n de botones en la interfaz En el fichero de declaraci\u00f3n del plugin (plugin.json), se deber\u00e1 declarar el permiso MENU.","title":"Men\u00fa de opciones"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#comandos","text":"Un plugin puede agregar m\u00faltiples comandos a AutoFirma para que puedan ser ejecutados por l\u00ednea de comandos. Estos comandos pueden implementar la funcionalidad que se desee, aunque su finalidad suele ser la de responder alguna de las siguientes necesidades: Permitir que un usuario calcule un resultado a trav\u00e9s de la terminal de comandos del sistema. Permitir que una aplicaci\u00f3n externa se valga de AutoFirma para ejecutar una de las operativas que esta implementa. Esto puede ser mediante llamadas directas a la aplicaci\u00f3n o mediante scripts del sistema. El sistema de plugin proporciona el modo de que los comandos agregados a AutoFirma mediante plugins se listen junto al resto de comandos. Sin embargo, cualquier acci\u00f3n o texto de ayuda propio del comando deber\u00e1 ser gestionado por el propio plugin. Para el uso de las opciones de men\u00fa en un plugin es necesario realizar los siguientes pasos: Implementar las acciones de los comandos Las acciones de los comandos se implementar\u00e1n en clases Java que hereden de la clase PluginCommandAction. De esta clase se deben implementar los siguientes m\u00e9todos para definir su comportamiento: Constructor por defecto . Este constructor sin par\u00e1metros deber\u00eda llamar al constructor de la clase padre que recibe una cadena y le deber\u00eda pasar el propio nombre del comando. Por ejemplo, si mi clase de acci\u00f3n se llamase MiAction y se debiese ejecutar cuando se usase el comando \u201cmicomando\u201d, el constructor ser\u00eda: public MiAction() { super ( \"micomando\" ); } M\u00e9todo : String getHelpText() Este m\u00e9todo deber\u00eda devolver una cadena de ayuda con la sintaxis que admite el comando y una explicaci\u00f3n sobre los distintos par\u00e1metros de configuraci\u00f3n. A modo orientativo, cuando AutoFirma muestra la sintaxis de un comando lo hace mediante un texto con la siguiente forma: Sintaxis: \u00b7\u00b7AutoFirma\u00b7COMANDO\u00b7SINTAXIS-\u00b7DESCRIPCION Par\u00e1metros: \u00b7\u00b7PARAMETRO1(DESCRIPCION_PARAMETRO1) \u00b7\u00b7PARAMETRO2(DESCRIPCION_PARAMETRO2) \u2026 En la sintaxis anterior, los puntos a media altura simbolizan espacios y las flechas a la derecha simbolizan tabuladores. La cantidad de tabuladores necesaria para alinear los elementos puede variar seg\u00fan la longitud de los textos. Los elementos incluidos en la estructura anterior son: COMANDO: Nombre del comando. SINTAXIS: Estructura de la sintaxis (opciones par\u00e1metros) DESCRIPCION: Descripci\u00f3n del comando En caso de que hubiese varios formatos de sintaxis, se podr\u00eda repetir esta l\u00ednea con los distintos formatos. PARAMETROX: Identificador del par\u00e1metro. DESCRIPCION_PARAMETROX: Descripci\u00f3n de la funcionalidad del par\u00e1metro. M\u00e9todo : String process(String[] args) throws PluginControlledException Este m\u00e9todo recibe como par\u00e1metro el listado de argumentos proporcionado en la llamada a AutoFirma. Los par\u00e1metros recibidos no contendr\u00e1n el nombre del ejecutable de AutoFirma o el propio comando ejecutado, s\u00f3lo los par\u00e1metros que este recibi\u00f3. La excepci\u00f3n PluginControlledException se deber\u00eda lanzar cuando falle la ejecuci\u00f3n del comando. Se mostrar\u00e1 al usuario el mensaje incluido en esta excepci\u00f3n. El plugin tiene control total sobre su comportamiento, aunque se recomienda seguir las siguientes directrices por homogeneidad con el resto de los comandos de Autofirma: Si el primer argumento recibido se corresponde con la cadena \u201c-help\u201d o si el comando recibe un conjunto de par\u00e1metros no v\u00e1lidos, se deber\u00eda llamar a getHelpText() para devolver el texto de ayuda. Utilizar los mismos par\u00e1metros que el resto de los comandos de AutoFirma. Algunos ejemplos son: \u201c-i\u201d y \u201c-o\u201d para designar el fichero de entrada y salida. \u201c-xml\u201d para determinar que la salida se estructure en forma de XML. \u201c-gui\u201d si se desea que el comando utilice interfaz gr\u00e1fica para solicitar datos. Declarar los comandos Una vez definido el comportamiento de los comandos, deberemos declararlos en el fichero plugin.json. Los comandos se definir\u00e1n bajo un nuevo apartado \u201ccommands\u201d en el que se listar\u00e1n los nuevos comandos. De cada uno de los comandos deberemos definir los atributos: name: Nombre del comando que se deber\u00e1 usar por l\u00ednea de comandos. description: Descripci\u00f3n del comando (se mostrar\u00e1 al ejecutar la ayuda de AutoFirma por l\u00ednea de comandos). action: Nombre de la clase que hereda de PluginCommandAction e implementa la l\u00f3gica del comando. Una subestructura JSON de ejemplo que defina dos comandos podr\u00eda ser la siguiente: \u2026 \"commands\": [ { \"name\": \"createdigest\" , \"description\": \"Creaci\u00f3n de huellas digitales con interfaz gr\u00e1fica\" , \"action\": \"es.gob.afirma.plugin.hash.command.CreateHashCommand\" }, { \"name\": \"checkdigest\" , \"description\": \"Comprobaci\u00f3n de huellas digitales con interfaz gr\u00e1fica\" , \"action\": \"es.gob.afirma.plugin.hash.command.CheckHashCommand\" } ], \u2026 Otorgar el permiso para agregar nuevos comandos a la aplicaci\u00f3n En el fichero de declaraci\u00f3n del plugin (plugin.json), se deber\u00e1 declarar el permiso COMMANDS.","title":"Comandos"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#empaquetado-de-los-plugins","text":"Los plugins deben distribuirse en forma de un \u00fanico archivo JAR con toda la operativa del plugin en su interior. En caso de tener dependencias con otras clases no incluidas en AutoFirma, deber\u00e1n importarse en el propio archivo. En caso de tener dependencias con clases de AutoFirma, estas no deber\u00edan incluirse en el JAR.","title":"Empaquetado de los plugins"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#firma-de-los-plugins","text":"Los plugins podr\u00e1n firmarse mediante el proceso de firma del JAR que lo integra. La firma del JAR se realizar\u00e1 conforme a los requisitos establecidos por Oracle: https://docs.oracle.com/javase/tutorial/deployment/jar/signing.html Antes de proceder a la instalaci\u00f3n de un plugin, AutoFirma comprueba su firma. Durante esta comprobaci\u00f3n pueden surgir tres situaciones distintas: El plugin est\u00e1 correctamente firmado. En ese caso, se le indicar\u00e1 al usuario por qui\u00e9n est\u00e1 firmado el plugin seg\u00fan el certificado utilizado. Adem\u00e1s, se le permitir\u00e1 extraer el certificado de firma por si el usuario quiere validar el certificado o realizar comprobaciones adicionales. AutoFirma no comprueba la confianza en el certificado firmante. El plugin no se encuentra firmado. En ese caso, se indica la situaci\u00f3n al usuario. La firma del plugin presenta errores. En ese caso, se informa al usuario del error. Ejemplo de di\u00e1logo con la informaci\u00f3n de la firma de un plugin: < En todos los casos el usuario puede continuar el proceso de firma del plugin indicando si conf\u00eda o no en el mismo.","title":"Firma de los plugins"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#preguntas-y-respuestas","text":"","title":"Preguntas y respuestas"},{"location":"markdown_strict/AF_manual_desarrollo_plugins_ES/#es-posible-realizar-la-instalacion-masiva-de-un-plugin-en-los-equipos-de-mis-usuarios","text":"No existe un mecanismo particular para la instalaci\u00f3n masiva de plugins de AutoFirma. Para realizar esto, ser\u00eda necesario copiar al equipo de los usuarios objetivos el fichero con el plugin y modificar el fichero con la relaci\u00f3n de plugins instalados. El directorio de instalaci\u00f3n de los plugins varia de un sistema a otro: Directorio Windows: %ALLUSERSPROFILE%/AutoFirma Directorio Linux: ~/AutoFirma. Directorio macOS: ~/Library/Application Support/AutoFirma En esos directorios se crea un subdirectorio \u201cplugins\u201d y dentro del mismo se sit\u00faa un fichero con el listado de plugins instalados (installed) y un directorio por cada plugin . Para instalar program\u00e1ticamente cada plugin es necesario: Crear dentro del directorio \u201cplugins\u201d un subdirectorio con el nombre interno del plugin que deseamos instalar (el nombre indicado en la propiedad \u201cname\u201d de su \u201cplugin.json\u201d). Copiar el JAR del plugin al directorio creado para el mismo. Agregar al fichero \u201cinstalled\u201d una nueva l\u00ednea con el nombre del plugin instalado y su n\u00famero de versi\u00f3n (tal como se indica en la propiedad \u201cversion_code\u201d de su \u201cplugin.json\u201d). La estructura resultante ser\u00eda: < El contenido del fichero \u201cinstalled\u201d, en este caso, podr\u00eda ser: validate_certs:1 < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"\u00bfEs posible realizar la instalaci\u00f3n masiva de un plugin en los equipos de mis usuarios?"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/","text":"AutoFirma es una herramienta de escritorio con interfaz gr\u00e1fica que permite la ejecuci\u00f3n de operaciones de firma de ficheros locales en entornos de escritorio (Windows, Linux y macOS). Tambi\u00e9n puede utilizarse a trav\u00e9s de consola o ser invocada por otras aplicaciones mediante protocolo para la ejecuci\u00f3n de operaciones de firma. El presente documento gu\u00eda al usuario final de AutoFirma a trav\u00e9s del proceso de instalaci\u00f3n, presenta las posibilidades de uso de AutoFirma a trav\u00e9s de consola, el uso de tarjetas inteligentes y lista diversos problemas que pueden surgir en la instalaci\u00f3n y ejecuci\u00f3n de la aplicaci\u00f3n. AutoFirma hace uso de los certificados digitales X.509v3 y de las claves privadas asociadas a estos que est\u00e9n instalados en el almac\u00e9n de claves ( KeyStore ) del sistema operativo o del navegador Web (Internet Explorer, Mozilla Firefox, etc.) en caso de realizarse la operaci\u00f3n desde un tr\u00e1mite web. Tambi\u00e9n permite el uso de dispositivos externos (tarjetas inteligentes, dispositivos USB) configurados en estos almacenes de claves (como, por ejemplo, el DNI Electr\u00f3nico o DNIe). AutoFirma hace uso de las claves privadas asociadas a los certificados del usuario y no permite que estos salgan en ning\u00fan momento del almac\u00e9n (tarjeta, dispositivo USB o repositorio local) ubicado en su PC. AutoFirma no almacena ning\u00fan tipo de informaci\u00f3n personal del usuario, ni hace uso de cookies ni ning\u00fan otro mecanismo para la gesti\u00f3n de datos de sesi\u00f3n. AutoFirma s\u00ed almacena trazas de su \u00faltima ejecuci\u00f3n a efectos de ofrecer soporte al usuario si se encontrase alg\u00fan error. Estas trazas de ejecuci\u00f3n no contienen ning\u00fan tipo de informaci\u00f3n personal y la aplicaci\u00f3n no facilita de ninguna forma el acceso a estos datos almacenados. AutoFirma es una aplicaci\u00f3n de Software Libre publicado que se puede usar, a su elecci\u00f3n, bajo licencia GNU General Public License versi\u00f3n 2 (GPLv2) o superior o bajo licencia European Software License 1.1 (EUPL 1.1) o superior. Puede consultar la informaci\u00f3n relativa al proyecto Cliente @firma, dentro del cual se encuentra AutoFirma, y descargar el c\u00f3digo fuente y los binarios de la aplicaci\u00f3n en la siguiente direcci\u00f3n Web: https://administracionelectronica.gob.es/ctt/clienteafirma#.X1o8YcH7RPY Requisitos m\u00ednimos El uso de AutoFirma como herramienta de firma integrada dentro del proceso de firma de tr\u00e1mites web tiene los siguientes requerimientos en cuanto a entorno operativo: Sistema Operativo Microsoft Windows. Soportado directamente en 7, 8, 8.1 y 10 y 11. En 32 o 64 bits. Linux Distribuciones probadas: Ubuntu, Fedora y OpenSuse. Apple macOS. Soportado directamente en Sierra, High Sierra, Mojave. Navegadores Web (para la invocaci\u00f3n por protocolo) Microsoft Windows Google Chrome 46 o superior. Mozilla Firefox 41.0.2 o superior. Microsoft Internet Explorer 8 o superior. Microsoft Edge 60 o superior. Linux Mozilla Firefox 41.0.1 o superior. Apple macOS Apple Safari 12.0 o superior. Google Chrome 46 o superior. Mozilla Firefox 65 o superior. ADVERTENCIA: El funcionamiento de AutoFirma al invocarlo desde versiones de Internet Explorer anteriores a la 11 (o Internet Explorer 11 en modo de compatibilidad con una versi\u00f3n anterior) est\u00e1 supeditado a que el administrador de la aplicaci\u00f3n web haya cumplido ciertos requisitos durante el despliegue. Para asegurar el correcto funcionamiento de las operaciones de firma online utilice otro de los navegadores soportados. En entornos macOS y Windows no es necesario tener instalado un entorno de ejecuci\u00f3n de Java. En Linux se necesita un entorno de ejecuci\u00f3n de Java 11 de Oracle u OpenJDK 11 (marcado como dependencia en el instalador integrado de AutoFirma). Es obligatorio que AutoFirma sea instalado antes de iniciar el tr\u00e1mite web en el que se usar\u00e1 para ejecutar las operaciones de firma. Enlaces de descarga Puede descargar la \u00faltima versi\u00f3n disponible de AutoFirma desde la siguiente p\u00e1gina web: http://firmaelectronica.gob.es/Home/Descargas.html Instalaci\u00f3n La instalaci\u00f3n de AutoFirma en el sistema del usuario se asemeja a la instalaci\u00f3n de cualquier otra aplicaci\u00f3n. Sin embargo, el proceso de instalaci\u00f3n incluye un paso de vital importancia para la compatibilidad de AutoFirma con las aplicaciones web que integren procesos de firma con el Cliente @firma. La comunicaci\u00f3n entre una p\u00e1gina web y AutoFirma se puede realizar de varias maneras, siendo la principal a trav\u00e9s de WebSocket por medio de un canal cifrado mediante certificado SSL generado en la m\u00e1quina local durante el proceso de instalaci\u00f3n. Para que sea posible la comunicaci\u00f3n entre el navegador web y AutoFirma, ser\u00e1 necesario que durante la instalaci\u00f3n se genere el par de claves del certificado, que este se almacene en disco y que el certificado generado sea dado de alta en los almacenes de confianza de los navegadores del sistema. Debido a las medidas de seguridad establecidas por cada navegador web, es posible que esto implique la aparici\u00f3n de un di\u00e1logo gr\u00e1fico de seguridad en el que se debe conceder permisos para realizar esta operaci\u00f3n o insertar la contrase\u00f1a del almac\u00e9n o del usuario administrador del sistema. El proceso de instalaci\u00f3n guarda el almac\u00e9n de claves generado en el directorio \u201c .afirma \u201d dentro del directorio del usuario que instal\u00f3 la aplicaci\u00f3n. El nombre del fichero de trazas se almacena en ese mismo directorio con el nombre \u201c AUTOFIRMA_CONFIGURATOR.afirma.log.xml \u201d. En el caso de Linux y macOS, la instalaci\u00f3n se realiza con el usuario administrador y el log se guarda en el directorio temporal del sistema o, si no se puede ah\u00ed, en \u201c /var/tmp \u201d para facilitar su acceso. Microsoft Windows Instalador EXE La instalaci\u00f3n de AutoFirma sobre Microsoft Windows debe ser realizada por un usuario con permisos de administrador. Esta aplicaci\u00f3n de instalaci\u00f3n se distribuye con el nombre \u201cAutoFirma_W_vX.Y.Z_installer.exe\u201d, donde X, Y y Z son los n\u00fameros de versi\u00f3n y W, la arquitectura de sistema para la que est\u00e1 preparada. Por ejemplo, \u201cAutoFirma_32_v1.8.0_installer.exe\u201d se corresponder\u00eda con el instalador de AutoFirma versi\u00f3n 1.8.0 para sistema de 32bits. Al ejecutar el instalador, se mostrar\u00e1 una pantalla de bienvenida y se guiar\u00e1 al usuario a trav\u00e9s de unos sencillos pasos: < Al pulsar sobre el bot\u00f3n \u201cSiguiente >\u201d seremos redirigidos a la pantalla de licencia de la aplicaci\u00f3n. < En esta pantalla, el usuario puede leer el texto de licencia de AutoFirma. Para continuar con el proceso de instalaci\u00f3n es necesario pulsar el bot\u00f3n \u201cAcepto\u201d, tras lo cual se mostrar\u00e1 la pantalla de configuraci\u00f3n de la ruta de instalaci\u00f3n. < Puede dejar la ruta que se le muestra por defecto (recomendado) o seleccionar cualquier otra ubicaci\u00f3n. En caso de modificar el directorio por defecto, aseg\u00farese de instalar AutoFirma en un directorio propio y no en uno compartido con m\u00e1s aplicaciones o documentos. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se mostrar\u00e1 la pantalla de configuraci\u00f3n de las opciones avanzadas de integraci\u00f3n. < Las opciones de integraci\u00f3n de AutoFirma que pueden configurarse son: Agregar al men\u00fa inicio: Al activarlo, se crear\u00e1 un submen\u00fa en el men\u00fa inicio de Windows con accesos directos a AutoFirma y a su desinstalador. Crear acceso directo en el escritorio: Al activarlo, se crear\u00e1 un acceso directo en el escritorio de Windows. Configurar Firefox para que conf\u00ede en los certificados ra\u00edz del sistema: Al activarlo, se modificar\u00e1 la configuraci\u00f3n de Firefox para que conf\u00ede en los certificados SSL expedidos por los prestadores de confianza del sistema, sin necesidad de que estos prestadores est\u00e9n dados de alta en el almac\u00e9n confianza del navegador. La extracci\u00f3n y copia de ficheros al sistema se iniciar\u00e1 al pulsar el bot\u00f3n \u201cInstalar\u201d. < Una vez finalizada la copia de ficheros, se instalar\u00e1 un certificado de confianza SSL generado localmente en su almac\u00e9n local de Windows. El proceso de instalaci\u00f3n tambi\u00e9n afecta a los perfiles de Mozilla Firefox y a la configuraci\u00f3n de Google Chrome. En caso de encontrarse abiertos estos navegadores, se le informar\u00e1 al usuario mediante una ventana de advertencia y este deber\u00e1 cerrarlos manualmente para poder continuar. Los procesos de estos navegadores pueden tardar un tiempo en finalizar despu\u00e9s de haber cerrado la ventana de la aplicaci\u00f3n. Si vuelve a aparecer el di\u00e1logo solicit\u00e1ndole que cierre la aplicaci\u00f3n, compruebe que no se encuentre abierta y espere unos segundos antes de pulsar el bot\u00f3n para continuar con el proceso. T\u00e9ngase en cuenta que el navegador Google Chrome puede quedar abierto incluso despu\u00e9s de cerrar su ventana. En esos casos, aparecer\u00e1 un icono en el \u00e1rea de notificaciones del escritorio del usuario y deber\u00e1 cerrarse a trav\u00e9s de la opci\u00f3n proporcionada en el men\u00fa contextual de este icono. Al completarse el instalador, se mostrar\u00e1 el mensaje de \u201cCompletado\u201d. < Al pulsar el bot\u00f3n \u201cSiguiente\u201d, se mostrar\u00e1 el resultado de la instalaci\u00f3n. < Una vez completada la instalaci\u00f3n, las aplicaciones Web que integren el proceso de firma con el Cliente @firma podr\u00e1n usar su versi\u00f3n instalada de AutoFirma para firmar. Durante la ejecuci\u00f3n de AutoFirma, es posible que este solicite permisos para acceder a la red. Consulte el apartado 4.1.3 Permisos adicionales para obtener m\u00e1s informaci\u00f3n. Desinstalaci\u00f3n La desinstalaci\u00f3n de Autofirma puede realizarse desde la ventana \u201cProgramas y caracter\u00edsticas\u201d del de \u201cPanel de control\u201d de Windows. < Una vez lanzado, el desinstalador presenta un sencillo asistente: < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se mostrar\u00e1 la opci\u00f3n de desinstalaci\u00f3n. < Al pulsar el bot\u00f3n de \u201cDesinstalar\u201d se iniciar\u00e1 el proceso de desinstalaci\u00f3n. < Este proceso de desinstalaci\u00f3n tambi\u00e9n afecta a los perfiles de Mozilla Firefox y a la configuraci\u00f3n de Google Chrome. En caso de encontrarse abiertos estos navegadores, se le informar\u00e1 al usuario mediante una ventana de advertencia y este deber\u00e1 cerrarlos manualmente para poder continuar. Los procesos de estos navegadores pueden tardar un tiempo en finalizar despu\u00e9s de haber cerrado la ventana de la aplicaci\u00f3n. Si vuelve a aparecer el di\u00e1logo solicit\u00e1ndole que cierre la aplicaci\u00f3n, compruebe que no se encuentre abierta y espere unos segundos antes de pulsar el bot\u00f3n para continuar con el proceso. T\u00e9ngase en cuenta que el navegador Google Chrome puede quedar abierto incluso despu\u00e9s de cerrar su ventana. En esos casos, aparecer\u00e1 un icono en el \u00e1rea de notificaciones del escritorio del usuario y deber\u00e1 cerrarse a trav\u00e9s de la opci\u00f3n proporcionada en el men\u00fa contextual de este icono. Cuando el proceso termina, la aplicaci\u00f3n ha sido correctamente desinstalada de Windows. < Permisos adicionales Es probable que despu\u00e9s de la instalaci\u00f3n de AutoFirma, al ejecutarlo como aplicaci\u00f3n de escritorio o como parte de un proceso de firma Web, la m\u00e1quina virtual de Java instalada junto con AutoFirma solicite permisos para el acceso a Internet pasando por el Firewall de Windows. Es necesario conceder estos permisos para que AutoFirma pueda ejecutar tareas propias de su funcionamiento habitual, como son la b\u00fasqueda de actualizaciones o la comunicaci\u00f3n con el navegador Web en los procesos de firma web. Linux La instalaci\u00f3n de AutoFirma en Linux debe ser realizada por un usuario con permisos de administrador. Se distribuyen varias versiones del instalador de AutoFirma para Linux: autofirma-X.Y.Z.deb : Instalador DEB para distribuciones derivadas de Debian/Ubuntu. autofirma-X.Y.Z-1.noarch_FEDORA.rpm : Instalador RPM para distribuciones derivadas de RedHat/Fedora. autofirma-X.Y.Z-1.noarch_SUSE.rpm : Instalador RPM para distribuciones derivadas de SUSE. NOTA: Se han encontrado problemas de compatibilidad con el Firefox por defecto instalado con el sistema operativo con el entorno KDE. En este caso, Firefox no atiende las llamadas realizadas por la p\u00e1gina para que abra la aplicaci\u00f3n. Se recomienda la instalaci\u00f3n del Firefox oficial de la web de Mozilla. En los nombres anteriores, las letras X, Y y Z (opcional) son los n\u00fameros de versi\u00f3n. Por ejemplo \u201cautofirma-1.8.deb\u201d corresponder\u00eda a AutoFirma versi\u00f3n 1.8 para distribuciones Ubuntu/Debian. Todos los instaladores incluyen la misma versi\u00f3n de AutoFirma, pero cada uno de ellos est\u00e1 preparado para la instalaci\u00f3n en un conjunto distinto de distribuciones de Linux. La principal diferencia entre los dos instaladores RPM son las dependencias declaradas, dado que las NSS Tools se encuentran con distinto nombre en los repositorios por defecto de algunas distribuciones. Para poder ejecutar AutoFirma son necesarias las siguientes dependencias, as\u00ed que estas se comprueban durante el proceso de instalaci\u00f3n: JRE (Java Runtine Environment) de Oracle u OpenJDK (versi\u00f3n 8 o superior). Biblioteca NSS Tools. El funcionamiento de AutoFirma esta verificado en distribuciones Ubuntu, Fedora y OpenSuse. Una vez instalada, puede usarse como aplicaci\u00f3n de escritorio e invocarse desde los navegadores web Mozilla Firefox y Google Chrome. Hay dos opciones de instalaci\u00f3n: por l\u00ednea de comandos y desde la interfaz de escritorio. La instalaci\u00f3n por ambos medios dejar\u00e1 la aplicaci\u00f3n instalada por defecto en el directorio: /usr/lib/AutoFirma Instalador DEB Instalaci\u00f3n Instalaci\u00f3n por l\u00ednea de comandos del instalador DEB Para instalaci\u00f3n por l\u00ednea de comandos, en una consola ejecutaremos: sudo dpkg \u2013i RUTA_INSTALABLE_AUTOFIRMA Donde RUTA_INSTALABLE_AUTOFIRMA es la ruta al instalador en funci\u00f3n de la distribuci\u00f3n escogida. Si no tenemos instaladas las dependencias anteriormente listadas, se nos mostrar\u00e1n mensajes de advertencia al respecto. En caso de ser as\u00ed, podremos instalar estas bibliotecas con el comando: sudo apt-get \u2013f install Despu\u00e9s de esto, se debe volver a ejecutar el comando de instalaci\u00f3n de AutoFirma para asegurar su correcta instalaci\u00f3n: sudo dpkg \u2013i RUTA_INSTALABLE_AUTOFIRMA Instalaci\u00f3n de Oracle Java con el fichero tar.gz de Oracle Si se tuviese Oracle Java instalado en el sistema mediante el fichero tar.gz de la web de Oracle, la JRE no habr\u00e1 quedado registrada en el gestor de paquetes. En ese caso, cuando se intente instalar AutoFirma, el gestor de paquetes considerar\u00e1 que no se cumplen los requisitos necesarios y se negar\u00e1 a instalarlo. Para forzar al uso de la JRE de Oracle se debe: Instalar la biblioteca \u201clibnss3-tools\u201d. Esta biblioteca es requisito indispensable de la aplicaci\u00f3n: sudo apt-get install libnss3-tools Configurar la variable JAVA_HOME con la JRE instalada y su directorio \u201cbin\u201d como parte del PATH del sistema. Esto se puede hacer, por ejemplo, editando el fichero \u201c/etc/environment\u201d y agregando a la variable PATH la ruta del directorio bin de Java y la nueva variable: PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/java/jdk-11.0.8/bin\" JAVA_HOME=\"/usr/java/jdk-11.0.8\" Podemos hacer que el sistema recargue la configuraci\u00f3n de este fichero (y as\u00ed no sea necesario reiniciarlo) con el comando: source /etc/environment Instalaci\u00f3n de muestra mediante el asistente de paquetes de Ubuntu Para la instalaci\u00f3n mediante el asistente de paquetes, se debe hacer doble clic en el fichero de la distribuci\u00f3n (.deb). Se abrir\u00e1 una ventana similar a la siguiente. < Se debe pulsar el bot\u00f3n instalar, que se encuentra arriba a la derecha. Si no se tienen permisos de administrador, el sistema solicitar\u00e1 la clave de \u201cs\u00faper usuario\u201d para poder realizar la instalaci\u00f3n. < Si no ha ocurrido ning\u00fan problema, se mostrar\u00e1 un mensaje de confirmaci\u00f3n. < Desinstalaci\u00f3n Desinstalaci\u00f3n del paquete DEB Para realizar la desinstalaci\u00f3n del sistema se puede utilizar el siguiente comando. sudo dpkg -r autofirma Cuando el proceso termina, la aplicaci\u00f3n ha sido correctamente desinstalada del sistema. Instalador RPM Importaci\u00f3n de la clave p\u00fablica PGP del instalador Antes de instalar la aplicaci\u00f3n, se deber\u00eda agregar la clave p\u00fablica PGP del firmante del instalador al almac\u00e9n de confianza del sistema. La clave p\u00fablica PGP puede descargarse como un fichero \u201c.asc\u201d junto al archivo de instalaci\u00f3n. Para importar esta clave PGP a nuestro almac\u00e9n usaremos el comando: sudo rpm --import PUBLIC_KEY.asc En este comando, \u201cPUBLIC_KEY.asc\u201d ser\u00e1 el fichero con la clave p\u00fablica. Una vez importada la clave PGP, el sistema podr\u00e1 validar autom\u00e1ticamente la firma del instalador RPM. Instalaci\u00f3n Instalaci\u00f3n por l\u00ednea de comandos con RPM Para instalaci\u00f3n por l\u00ednea de comandos con RPM, en una consola ejecutaremos: sudo rpm -i autofirma-X.Y.Z.noarch.rpm En el comando anterior \u201cautofirma-X.Y.Z.noarch.rpm\u201d ser\u00e1 el nombre del fichero instalador apropiado para nuestro sistema. Si no tuviese instalados todas las dependencias del paquete, deber\u00e1 instalarlas por separado Instalaci\u00f3n por l\u00ednea de comandos con Zypper Puede instalarse la aplicaci\u00f3n y todas sus dependencias con el gestor de paquetes Zypper mediante el siguiente comando: sudo zypper in autofirma-X.Y.Z.noarch.rpm En el comando anterior \u201cautofirma-X.Y.Z.noarch.rpm\u201d ser\u00e1 el nombre del fichero instalador apropiado para nuestro sistema. El propio gestor de paquetes ya se encargar\u00e1 de buscar las dependencias necesarias y se ofrecer\u00e1 a instalarlas. Instalaci\u00f3n por l\u00ednea de comandos con Yum Puede instalarse la aplicaci\u00f3n y todas sus dependencias con el gestor de paquetes Yum mediante el siguiente comando: sudo yum localinstall autofirma-X.Y.Z.noarch.rpm En el comando anterior \u201cautofirma-X.Y.Z.noarch.rpm\u201d ser\u00e1 el nombre del fichero instalador apropiado para nuestro sistema. El propio gestor de paquetes ya se encargar\u00e1 de buscar las dependencias necesarias y se ofrecer\u00e1 a instalarlas. Instalaci\u00f3n mediante el asistente de paquetes Tenga en cuenta que el uso de un asistente de paquetes tambi\u00e9n puede requerir que se importe la clave PGP del firmante del instalador, para que as\u00ed el sistema lo valide. Si no se importase la clave del firmante, algunos gestores de paquetes dar\u00e1n un error durante el proceso de instalaci\u00f3n sin indicar el motivo del error. Para la instalaci\u00f3n mediante el asistente de paquetes, se debe hacer doble clic en el fichero de la distribuci\u00f3n (.rpm), tras lo cual se pedir\u00e1 la contrase\u00f1a de administrador. Una vez introducida, se abrir\u00e1 una ventana similar a la siguiente, seg\u00fan sea el gestor de paquetes del sistema. En el ejemplo mostrado, se puede ver el gestor de paquetes YaST. < Al pulsar el bot\u00f3n Aceptar, se inicia el proceso de instalaci\u00f3n: < Tras finalizar el proceso de instalaci\u00f3n, se mostrar\u00e1 una pantalla con el resultado del mismo: < Desinstalaci\u00f3n Desinstalaci\u00f3n del paquete con RPM Para realizar la desinstalaci\u00f3n del sistema se puede utilizar el siguiente comando. sudo rpm \u2013e autofirma Cuando el proceso termine, la aplicaci\u00f3n habr\u00e1 sido correctamente desinstalada del sistema. Desinstalaci\u00f3n del paquete con Zypper Para realizar la desinstalaci\u00f3n del sistema se puede utilizar el siguiente comando. sudo zypper rm autofirma Cuando el proceso termine, la aplicaci\u00f3n habr\u00e1 sido correctamente desinstalada del sistema. Actualizaci\u00f3n Actualizaci\u00f3n del paquete con RPM Para actualizar desde AutoFirma 1.8 a una posterior usaremos el comando: sudo rpm -U autofirma-X.Y.Z.noarch.rpm Sin embargo, cuando queremos actualizar desde una versi\u00f3n anterior a AutoFirma 1.8, deberemos indicar que durante la actualizaci\u00f3n no se ejecute el proceso de desinstalaci\u00f3n de esa versi\u00f3n, ya que inclu\u00eda un error que imped\u00eda el proceso. Para ello usaremos el comando: sudo rpm -U --nopreun --nopostun autofirma-X.Y.Z.noarch.rpm Cuando el proceso termine, la aplicaci\u00f3n habr\u00e1 sido correctamente actualizada. Apple macOS Instalador PKG La instalaci\u00f3n de AutoFirma en macOS debe realizarla un usuario con permisos de administrador. El archivo de instalaci\u00f3n se distribuye con el nombre \u201cAutoFirma_X.Y.Z.pkg\u201d, donde X, Y y Z (opcional) son los n\u00fameros de la versi\u00f3n. Por ejemplo, \u201cAutoFirma_1.6.pkg\u201d corresponder\u00eda a AutoFirma versi\u00f3n 1.6. AutoFirma es compatible con las versiones de macOS Sierra y superiores. Los navegadores compatibles son Apple Safari, Google Chrome y Mozilla Firefox. Para la instalaci\u00f3n de la aplicaci\u00f3n, se debe hacer doble clic sobre el fichero. El sistema abrir\u00e1 el asistente que se encargar\u00e1 de realizar los pasos a seguir para la correcta instalaci\u00f3n de la aplicaci\u00f3n. < Para iniciar el proceso de instalaci\u00f3n, hay que pulsar el bot\u00f3n \u201cContinuar\u201d, tras lo que se nos mostrar\u00e1 el acuerdo de licencia. < Una vez le\u00edda la licencia del producto, se puede pulsar \u201cContinuar\u201d. En ese momento, se indicar\u00e1 que se debe aceptar la licencia. Al pulsar el bot\u00f3n \"Aceptar\u201d se acepta la licencia y contin\u00faa con la instalaci\u00f3n. En la siguiente pantalla se mostrar\u00e1 seleccionar la unidad en la que se almacenar\u00e1 la aplicaci\u00f3n: < En esta pantalla se debe seleccionar la unidad principal y pulsar \u201cContinuar\u201d para ver el detalle resumen del proceso de instalaci\u00f3n. < En esta pantalla se puede ver cu\u00e1nto espacio en disco ocupar\u00e1 la aplicaci\u00f3n. Al pulsar el bot\u00f3n \u201cInstalar\u201d, se comienza la instalaci\u00f3n del producto. Para completar la instalaci\u00f3n ser\u00e1 necesario indicar el nombre de usuario y contrase\u00f1a de un usuario con permisos de administrador, ya que ser\u00e1 necesario instalar certificados de confianza en el almac\u00e9n del sistema y Firefox. < En caso de detectarse que el navegador Mozilla Firefox est\u00e1 en ejecuci\u00f3n, se pedir\u00e1 al usuario que lo cierre para continuar con el proceso de instalaci\u00f3n. Finalmente, se informar\u00e1 del resultado de la instalaci\u00f3n. < Desinstalaci\u00f3n Para desinstalar la aplicaci\u00f3n basta con eliminar la carpeta que se gener\u00f3 en el directorio /Applications. Tambi\u00e9n es recomendable eliminar los certificados identificados como \u201cAutoFirma ROOT\u201d y \u201c127.0.0.1\u201d del llavero de macOS. Puede realizarse esto accediendo a la aplicaci\u00f3n \u201cAcceso a Llaveros\u201d, seleccion\u00e1ndose el llavero \u201cSistema\u201d y eliminando del listado los certificados mencionados. Uso de DNIe y tarjetas inteligentes El Cliente @firma utiliza la biblioteca JMulticard para permitir firmar con DNIe y tarjetas inteligentes de la F\u00e1brica Nacional de Moneda y Timbre (FNMT) sin necesidad de que los usuarios tengan instalados los controladores de la tarjeta. Por defecto, siempre que se seleccione un certificado de DNIe o uno insertado en una tarjeta de la FNMT, se utilizar\u00e1 JMulticard para ejecutar la operaci\u00f3n de firma. El uso de JMulticard sobre el controlador oficial de estas tarjetas conlleva ciertas ventajas, ya que existen ciertas incompatibilidades de AutoFirma con estos que impiden que funcionen correctamente, sobre todo cuando se realizan firmas de m\u00faltiples documentos. JMulticard est\u00e1 activado por defecto en AutoFIrma, pero puede desactivarlo para usar el controlador oficial de la tarjeta, que deber\u00e1 estar instalado en el sistema, siga las instrucciones indicadas a continuaci\u00f3n: Abra la aplicaci\u00f3n AutoFirma. Seleccione el men\u00fa \u201cHerramientas\u201d y la opci\u00f3n \u201cPreferencias\u201d. En la pesta\u00f1a \u201cGeneral\u201d se muestra la opci\u00f3n \u201cHabilitar JMulticard para el uso de las tarjetas de la FNMT y DNIe\u201d. Despu\u00e9s de modificar esta opci\u00f3n, deber\u00e1 pulsar Aceptar en el panel de preferencias. La configuraci\u00f3n ser\u00e1 efectiva la pr\u00f3xima vez que se abra AutoFirma. < Cuando se desactiva el uso de JMulticard, no se usa esta biblioteca para firmar, ni en la firma local de documentos ni en las firmas dentro de un tr\u00e1mite web, en donde se utilizar\u00e1 el mismo controlador que utilice el navegador web utilizado. La \u00fanica excepci\u00f3n a esto es cuando, al abrir AutoFirma, se selecciona expresamente la opci\u00f3n \u201cContinuar con DNIe\u201d. Se recomienda mantener activado JMulticard por defecto, pero puede plantearse modificar esta configuraci\u00f3n seg\u00fan el uso habitual de firma. Mant\u00e9ngalo activado cuando habitualmente: No utilice tarjetas para firmar. Use tarjetas inteligentes o utilice el DNIe y tarjetas de la FNMT. Mant\u00e9ngalo desactivado e instale los controladores oficiales de su tarjeta cuando habitualmente: Utilice una nueva versi\u00f3n de DNIe o tarjeta inteligente y haya comprobado que AutoFirma no funciona correctamente con ellas. Utilice tarjetas distintas a DNIe y tarjetas de la FNMT. JMulticard no impedir\u00e1 su uso, pero s\u00ed puede alterar su comportamiento, por ejemplo, impidiendo que el controlador guarde en cach\u00e9 el PIN del usuario para reutilizarlo en firmas consecutivas. Realice los tr\u00e1mites web desde Firefox y advierta que se producen problemas al firmar con su tarjeta (puede ocurrir con versiones antiguas de tarjetas de la FNMT). La biblioteca JMulticard pedir\u00e1 el PIN de las tarjetas siempre que lo requiera, lo que puede suponer insertarlo por cada documento de firma en los procesos de firma masiva. Para evitar esto, el propio di\u00e1logo de inserci\u00f3n de contrase\u00f1a ofrece al usuario la posibilidad de seleccionar que se recuerde la contrase\u00f1a durante la sesi\u00f3n de firma. Esta opci\u00f3n, sin embargo, podr\u00eda no funcionar en tr\u00e1mites web (seg\u00fan la integraci\u00f3n realizada del tr\u00e1mite y el navegador del usuario). En esos casos, se seguir\u00e1 pidiendo la contrase\u00f1a por cada documento. Este comportamiento podr\u00eda corregirse con el uso del controlador de oficial de la tarjeta, aunque esto puede conllevar otros inconvenientes (necesidad de tener instalado el controlador, posibles incompatibilidades de arquitectura, posibles problemas de conexi\u00f3n con el dispositivo, etc.). Uso por l\u00ednea de comandos AutoFirma permite su uso a trav\u00e9s de l\u00ednea de comandos, proporcionando funcionalidades de firma, firma de lotes y creaci\u00f3n y verificaci\u00f3n de hashes. El ejecutable o script a utilizar para la ejecuci\u00f3n de AutoFirma por l\u00ednea de comandos var\u00eda en funci\u00f3n del sistema: Windows El proceso de instalaci\u00f3n copia en el directorio de AutoFirma el ejecutable \u201cAutoFirmaCommandLine\u201d. Utilice este ejecutable desde l\u00ednea de comandos para realizar las distintas operaciones que se soportan. Linux El proceso de instalaci\u00f3n genera en el directorio \u201c/usr/bin\u201d el script \u201cautofirma\u201d. Utilice este script para ejecutar la aplicaci\u00f3n proporcion\u00e1ndole directamente los par\u00e1metros de la operaci\u00f3n que desee. macOS Para el uso de la aplicaci\u00f3n por l\u00ednea se facilita un script. Utilice este script para ejecutar la aplicaci\u00f3n proporcion\u00e1ndole directamente los par\u00e1metros de la operaci\u00f3n que desee. Aquellos par\u00e1metros que incluyan saltos de l\u00ednea deber\u00e1n proporcionarse enmarcados entre comillas simples. Por ejemplo, se puede ejecutar AutoFirma y listar las distintas operaciones disponibles a trav\u00e9s de la l\u00ednea de comandos con el comando \u201c-help\u201d de la siguiente manera: En Windows: AutoFirmaCommandLine \u2013help En Linux: /usr/bin/AutoFirma \u2013help En Mac: /Applications/AutoFirma.app/Contents/MacOS/AutoFirmaCommandLine \u2013help Esto dar\u00eda como resultado: Herramienta de firma de documentos. Sintaxis: AutoFirma cmd [options...] Comandos cmd: sign (firma de fichero) cosign (cofirma de fichero) countersign (contrafirma de fichero) listaliases (lista los alias disponibles en el almacen) verify (abre un panel con la informacion de validacion de una firma o certificado) batchsign (firma/multifirma de lotes de ficheros) Utilice \"AutoFirma cmd -help\" para ver la sintaxis del comando \"cmd\" Algunos plugins, como el de las funcionalidades de c\u00e1lculo de hashes, pueden agregar nuevos comandos accesibles por consola. Para listar las opciones de configuraci\u00f3n de alguno de los comandos, puede utilizar la opci\u00f3n \u201c-help\u201d sobre cualquiera de ellos. Por ejemplo: AutoFirmaCommandLine sign \u2013help Esto dar\u00eda como resultado: Sintaxis: AutoFirma sign [opciones...] Opciones: -gui (Realiza la operacion con entorno grafico. Tiene prioridad sobre -certgui) -certgui (Usa un dialogo grafico para la seleccion del certificado de firma) -i inputfile (Ruta del fichero de entrada) -o outputfile (Ruta del fichero de salida) -algorithm algo (Algoritmo de firma) -format (Establece el formato de firma) auto (Seleccion de formato en base al fichero de entrada) cades (Formato CAdES) pades (Formato PAdES) xades (Formato XAdES) facturae (Firma de factura electronica) -config extraParams (Properties en texto plano con la configuracion de la operacion) -store (Establece el almacen de claves. Por defecto, el del sistema) auto (Almacen de claves del sistema) windows (Almacen de claves de Windows) mac (Almacen de claves de macOS) mozilla (Almacen de claves de Mozilla Firefox) dni (DNI electronico) pkcs12:p12file (Almacen PKCS#12. \"p12file\" es la ruta del almacen) pkcs11:p11file (Almacen PKCS#11. \"p11file\" es la ruta del controlador) -password password (Establece la contrasena del almacen) -alias alias (Alias del certificado de firma) -filter filter (Filtro para seleccionar el certificado de firma) -xml (Formatea la respuesta como XML) Habilitar en Firefox la confianza en los certificados ra\u00edz del sistema Mozilla Firefox permite un modo de configuraci\u00f3n en Windows y macOS con el cual, adem\u00e1s de confiar en los certificados ra\u00edz de su almac\u00e9n de confianza, puede confiar tambi\u00e9n en los certificados en el almac\u00e9n de confianza del sistema. Habilitar esta configuraci\u00f3n implica diversas ventajas para el usuario: Puede instalar los certificados \u00fanicamente en el almac\u00e9n del sistema. No es necesario que los instale en el almac\u00e9n de confianza de Firefox En entornos en los datos de la cuenta del usuario se carga desde un servidor, no es necesario transferir los datos del almac\u00e9n de confianza de Firefox. La configuraci\u00f3n del almac\u00e9n de confianza de Firefox se puede establecer durante la instalaci\u00f3n de AutoFirma en Windows o mediante la opci\u00f3n de \u201cReparaci\u00f3n de la instalaci\u00f3n\u201d de la aplicaci\u00f3n en Windows o macOS. La opci\u00f3n de reparaci\u00f3n de la instalaci\u00f3n habilitar\u00e1 o deshabilitar\u00e1 esta opci\u00f3n seg\u00fan se haya marcado no la casilla de verificaci\u00f3n antes de iniciar el proceso de restauraci\u00f3n. < Problemas conocidos Al instalar AutoFirma falla la instalaci\u00f3n de los certificados de confianza SSL AutoFirma requiere permisos de administrador para ser instalado y para insertar el certificado de confianza SSL para el funcionamiento de la firma en los tr\u00e1mites online. Si falla el proceso de instalaci\u00f3n de los certificados, acceda al apartado de reparaci\u00f3n de la instalaci\u00f3n de AutoFirma (Men\u00fa \u201cHerramientas\u201d \u00e0 \u201cRestaurar la instalaci\u00f3n\u201d) y ejecute el proceso de reinstalaci\u00f3n. En el caso de que la instalaci\u00f3n de los certificados falle \u00fanicamente en Firefox, valore la el activar la confianza de Firefox en el almac\u00e9n del sistema (s\u00f3lo para sistemas Windows y macOS). Si no puede instalar AutoFirma o el certificado de confianza y no es usted el administrador del sistema, solicite al administrador de su sistema que realice la instalaci\u00f3n de la aplicaci\u00f3n. Al instalar AutoFirma en Windows se muestra el error: \u201cError abriendo archivo para escritura\u201d Es posible que durante la instalaci\u00f3n se le muestre un error como el que sigue: < Si ya ten\u00eda instalado AutoFirma, compruebe que este no se est\u00e1 ejecutando, en cuyo caso el instalador no podr\u00e1 sobrescribir los ficheros de instalaci\u00f3n. Cierre AutoFirma y pulse el bot\u00f3n reintentar. Si AutoFirma no se est\u00e1 ejecutando, es posible que el archivo en cuesti\u00f3n se encuentre bloqueado por una ejecuci\u00f3n o intento de instalaci\u00f3n previo. Reinicie su equipo y pruebe a instalar nuevamente la aplicaci\u00f3n. No se puede instalar AutoFirma en Windows porque indica que la versi\u00f3n ya est\u00e1 instalada o que hay una superior Al desinstalarse AutoFirma puede ocurrir alg\u00fan error que deje entradas de registro residentes en el sistema que hagan creer que AutoFirma sigue instalado en el sistema. En estos casos, es posible que AutoFirma ya no aparezca en el listado de programas instalados, pero que al intentar volver a instalar AutoFirma se informe de que una versi\u00f3n superior o la misma versi\u00f3n de la aplicaci\u00f3n ya est\u00e1 instalada. Primeramente, se deber\u00eda reiniciar el equipo para asegurar que ning\u00fan recurso de la anterior instalaci\u00f3n se encuentra en uso. Si tras el reinicio, ni aparece la versi\u00f3n que se instal\u00f3 de AutoFirma ni se puede instalar la nueva versi\u00f3n a partir del instalador EXE, pruebe a utilizar el instalador MSI de AutoFirma. Este forzar\u00e1 la instalaci\u00f3n de la nueva versi\u00f3n. Al instalar AutoFirma en Linux a partir del paquete RPM con el gestor de paquetes del sistema se muestra el mensaje de error \u201cError interno\u201d Es posible que no se haya importado la clave PGP de firma en el almac\u00e9n de confianza. Siga las instrucciones del apartado 4.2.2.1 Importaci\u00f3n de la clave p\u00fablica PGP del instalador para la importaci\u00f3n de la clave PGP. Al instalar AutoFirma en Linux a partir del paquete RPM desde consola aparece el error \u201cNOKEY\u201d El mensaje \u201cNOKEY\u201d se muestra cuando se detecta que el instalador est\u00e1 firmado pero la clave no se ha importado en el sistema. Seg\u00fan el sistema, es posible que el instalador contin\u00fae con el proceso de instalaci\u00f3n o no despu\u00e9s de mostrar el mensaje. Si el instalador no completa la instalaci\u00f3n, prueba a importar la clave de firma en su sistema y repetir el proceso de instalaci\u00f3n. Puede consultar como importar la clave PGP en el apartado 4.2.2.1 Importaci\u00f3n de la clave p\u00fablica PGP del instalador . Al actualizar AutoFirma en Linux a partir del paquete RPM deja de funcionar AutoFirma 1.7.1 y anteriores inclu\u00edan un error en su desinstalador que imped\u00eda la correcta actualizaci\u00f3n a versiones posteriores. Para actualizar desde AutoFirma 1.7.1 o anterior a una nueva versi\u00f3n de AutoFirma es necesario indicar que no se debe ejecutar el desinstalador de la versi\u00f3n anterior durante el proceso. Por ejemplo, para actualizar mediante \u201crpm\u201d deber\u00edamos usa el comando: sudo rpm -U --nopreun --nopostun autofirma-X.Y.Z.noarch.rpm Si ya intent\u00f3 actualizar AutoFirma y ahora no funciona, desinst\u00e1lela e instale directamente la nueva versi\u00f3n. Cuando se instala Mozilla Firefox o se crea un nuevo perfil de usuario despu\u00e9s de la instalaci\u00f3n de AutoFirma, este no funciona en Firefox Durante el proceso de instalaci\u00f3n de AutoFirma se genera un certificado para la comunicaci\u00f3n entre la p\u00e1gina web y la aplicaci\u00f3n, y lo instala en los almacenes de confianza del sistema y de Firefox. Si se crea un perfil de usuario de Firefox o se instala el propio Firefox despu\u00e9s de la instalaci\u00f3n de AutoFirma, este no contar\u00e1 con el certificado entre los que considera de confianza. Para resolver este problema utilice la funci\u00f3n de restauraci\u00f3n de la instalaci\u00f3n de AutoFirma: Men\u00fa \u201cHerramientas\u201d \u00e0 \u201cRestaurar instalaci\u00f3n\u201d. AutoFirma se cierra inmediatamente tras ser invocado desde el navegador web Cuando se abre AutoFirma por petici\u00f3n de un navegador web inmediatamente se abre una conexi\u00f3n entre ambas aplicaciones. Si AutoFirma detecta cualquier problema que evita que se pueda establecer esa comunicaci\u00f3n, se cierra. Esto dar\u00e1 lugar a que, pasado un tiempo, la p\u00e1gina web que intent\u00f3 realizar la operaci\u00f3n de firma informe de que no se pudo conectar con AutoFirma. Para resolver este problema utilice la funci\u00f3n de restauraci\u00f3n de la instalaci\u00f3n de AutoFirma: Men\u00fa \u201cHerramientas\u201d \u00e0 \u201cRestaurar instalaci\u00f3n\u201d. Esta funci\u00f3n permitir\u00e1 reestablecer la configuraci\u00f3n y los recursos necesarios para que se pueda establecer la comunicaci\u00f3n entre el navegador y AutoFirma. No se detectan tarjetas inteligentes en macOS Muchas tarjetas inteligentes no disponen de los controladores necesarios para su uso a trav\u00e9s del llavero de Apple (almac\u00e9n utilizado por AutoFirma cuando se usa a trav\u00e9s de Safari, Chrome o como aplicaci\u00f3n de escritorio). En el caso concreto del DNIe, AutoFirma es capaz de utilizarlo por medio del controlador Java que incorpora, pero con el resto de las tarjetas no es posible. Para utilizar tarjetas criptogr\u00e1ficas en macOS, instale sus controladores PKCS#11 como dispositivos de seguridad en Mozilla Firefox y utilice AutoFirma a trav\u00e9s de este navegador. AutoFirma muestra un tama\u00f1o de letra m\u00e1s grande o peque\u00f1o de lo habitual en Windows Windows puede modificar el tama\u00f1o de letra con el que se muestran algunas aplicaciones al detectar pantallas de alta densidad, como monitores 4K. En el caso de hacerlo, es probable que AutoFirma se muestre con un tama\u00f1o de letra que resulte molesto o impida su correcto usa. Para corregir esto es necesario indicarlo al sistema que restablezca el tama\u00f1o de letra. Podemos hacer esto desde el \u201cPanel de Control\u201d, en el apartado \u201cFuentes\u201d. En esta pantalla se podr\u00e1 encontrar la opci\u00f3n \u201cConfiguraci\u00f3n de fuentes\u201d y dentro de la misma habr\u00e1 un bot\u00f3n \u201cRestaurar configuraci\u00f3n de fuente predeterminada\u201d. Tras restaurar la configuraci\u00f3n de fuentes y arrancar AutoFirma, veremos que el tama\u00f1o de fuente ha vuelto a la normalidad. < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"AF manual instalacion usuarios ES"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#requisitos-minimos","text":"El uso de AutoFirma como herramienta de firma integrada dentro del proceso de firma de tr\u00e1mites web tiene los siguientes requerimientos en cuanto a entorno operativo: Sistema Operativo Microsoft Windows. Soportado directamente en 7, 8, 8.1 y 10 y 11. En 32 o 64 bits. Linux Distribuciones probadas: Ubuntu, Fedora y OpenSuse. Apple macOS. Soportado directamente en Sierra, High Sierra, Mojave. Navegadores Web (para la invocaci\u00f3n por protocolo) Microsoft Windows Google Chrome 46 o superior. Mozilla Firefox 41.0.2 o superior. Microsoft Internet Explorer 8 o superior. Microsoft Edge 60 o superior. Linux Mozilla Firefox 41.0.1 o superior. Apple macOS Apple Safari 12.0 o superior. Google Chrome 46 o superior. Mozilla Firefox 65 o superior. ADVERTENCIA: El funcionamiento de AutoFirma al invocarlo desde versiones de Internet Explorer anteriores a la 11 (o Internet Explorer 11 en modo de compatibilidad con una versi\u00f3n anterior) est\u00e1 supeditado a que el administrador de la aplicaci\u00f3n web haya cumplido ciertos requisitos durante el despliegue. Para asegurar el correcto funcionamiento de las operaciones de firma online utilice otro de los navegadores soportados. En entornos macOS y Windows no es necesario tener instalado un entorno de ejecuci\u00f3n de Java. En Linux se necesita un entorno de ejecuci\u00f3n de Java 11 de Oracle u OpenJDK 11 (marcado como dependencia en el instalador integrado de AutoFirma). Es obligatorio que AutoFirma sea instalado antes de iniciar el tr\u00e1mite web en el que se usar\u00e1 para ejecutar las operaciones de firma.","title":"Requisitos m\u00ednimos"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#enlaces-de-descarga","text":"Puede descargar la \u00faltima versi\u00f3n disponible de AutoFirma desde la siguiente p\u00e1gina web: http://firmaelectronica.gob.es/Home/Descargas.html","title":"Enlaces de descarga"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#instalacion","text":"La instalaci\u00f3n de AutoFirma en el sistema del usuario se asemeja a la instalaci\u00f3n de cualquier otra aplicaci\u00f3n. Sin embargo, el proceso de instalaci\u00f3n incluye un paso de vital importancia para la compatibilidad de AutoFirma con las aplicaciones web que integren procesos de firma con el Cliente @firma. La comunicaci\u00f3n entre una p\u00e1gina web y AutoFirma se puede realizar de varias maneras, siendo la principal a trav\u00e9s de WebSocket por medio de un canal cifrado mediante certificado SSL generado en la m\u00e1quina local durante el proceso de instalaci\u00f3n. Para que sea posible la comunicaci\u00f3n entre el navegador web y AutoFirma, ser\u00e1 necesario que durante la instalaci\u00f3n se genere el par de claves del certificado, que este se almacene en disco y que el certificado generado sea dado de alta en los almacenes de confianza de los navegadores del sistema. Debido a las medidas de seguridad establecidas por cada navegador web, es posible que esto implique la aparici\u00f3n de un di\u00e1logo gr\u00e1fico de seguridad en el que se debe conceder permisos para realizar esta operaci\u00f3n o insertar la contrase\u00f1a del almac\u00e9n o del usuario administrador del sistema. El proceso de instalaci\u00f3n guarda el almac\u00e9n de claves generado en el directorio \u201c .afirma \u201d dentro del directorio del usuario que instal\u00f3 la aplicaci\u00f3n. El nombre del fichero de trazas se almacena en ese mismo directorio con el nombre \u201c AUTOFIRMA_CONFIGURATOR.afirma.log.xml \u201d. En el caso de Linux y macOS, la instalaci\u00f3n se realiza con el usuario administrador y el log se guarda en el directorio temporal del sistema o, si no se puede ah\u00ed, en \u201c /var/tmp \u201d para facilitar su acceso.","title":"Instalaci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#microsoft-windows","text":"","title":"Microsoft Windows"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#instalador-exe","text":"La instalaci\u00f3n de AutoFirma sobre Microsoft Windows debe ser realizada por un usuario con permisos de administrador. Esta aplicaci\u00f3n de instalaci\u00f3n se distribuye con el nombre \u201cAutoFirma_W_vX.Y.Z_installer.exe\u201d, donde X, Y y Z son los n\u00fameros de versi\u00f3n y W, la arquitectura de sistema para la que est\u00e1 preparada. Por ejemplo, \u201cAutoFirma_32_v1.8.0_installer.exe\u201d se corresponder\u00eda con el instalador de AutoFirma versi\u00f3n 1.8.0 para sistema de 32bits. Al ejecutar el instalador, se mostrar\u00e1 una pantalla de bienvenida y se guiar\u00e1 al usuario a trav\u00e9s de unos sencillos pasos: < Al pulsar sobre el bot\u00f3n \u201cSiguiente >\u201d seremos redirigidos a la pantalla de licencia de la aplicaci\u00f3n. < En esta pantalla, el usuario puede leer el texto de licencia de AutoFirma. Para continuar con el proceso de instalaci\u00f3n es necesario pulsar el bot\u00f3n \u201cAcepto\u201d, tras lo cual se mostrar\u00e1 la pantalla de configuraci\u00f3n de la ruta de instalaci\u00f3n. < Puede dejar la ruta que se le muestra por defecto (recomendado) o seleccionar cualquier otra ubicaci\u00f3n. En caso de modificar el directorio por defecto, aseg\u00farese de instalar AutoFirma en un directorio propio y no en uno compartido con m\u00e1s aplicaciones o documentos. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se mostrar\u00e1 la pantalla de configuraci\u00f3n de las opciones avanzadas de integraci\u00f3n. < Las opciones de integraci\u00f3n de AutoFirma que pueden configurarse son: Agregar al men\u00fa inicio: Al activarlo, se crear\u00e1 un submen\u00fa en el men\u00fa inicio de Windows con accesos directos a AutoFirma y a su desinstalador. Crear acceso directo en el escritorio: Al activarlo, se crear\u00e1 un acceso directo en el escritorio de Windows. Configurar Firefox para que conf\u00ede en los certificados ra\u00edz del sistema: Al activarlo, se modificar\u00e1 la configuraci\u00f3n de Firefox para que conf\u00ede en los certificados SSL expedidos por los prestadores de confianza del sistema, sin necesidad de que estos prestadores est\u00e9n dados de alta en el almac\u00e9n confianza del navegador. La extracci\u00f3n y copia de ficheros al sistema se iniciar\u00e1 al pulsar el bot\u00f3n \u201cInstalar\u201d. < Una vez finalizada la copia de ficheros, se instalar\u00e1 un certificado de confianza SSL generado localmente en su almac\u00e9n local de Windows. El proceso de instalaci\u00f3n tambi\u00e9n afecta a los perfiles de Mozilla Firefox y a la configuraci\u00f3n de Google Chrome. En caso de encontrarse abiertos estos navegadores, se le informar\u00e1 al usuario mediante una ventana de advertencia y este deber\u00e1 cerrarlos manualmente para poder continuar. Los procesos de estos navegadores pueden tardar un tiempo en finalizar despu\u00e9s de haber cerrado la ventana de la aplicaci\u00f3n. Si vuelve a aparecer el di\u00e1logo solicit\u00e1ndole que cierre la aplicaci\u00f3n, compruebe que no se encuentre abierta y espere unos segundos antes de pulsar el bot\u00f3n para continuar con el proceso. T\u00e9ngase en cuenta que el navegador Google Chrome puede quedar abierto incluso despu\u00e9s de cerrar su ventana. En esos casos, aparecer\u00e1 un icono en el \u00e1rea de notificaciones del escritorio del usuario y deber\u00e1 cerrarse a trav\u00e9s de la opci\u00f3n proporcionada en el men\u00fa contextual de este icono. Al completarse el instalador, se mostrar\u00e1 el mensaje de \u201cCompletado\u201d. < Al pulsar el bot\u00f3n \u201cSiguiente\u201d, se mostrar\u00e1 el resultado de la instalaci\u00f3n. < Una vez completada la instalaci\u00f3n, las aplicaciones Web que integren el proceso de firma con el Cliente @firma podr\u00e1n usar su versi\u00f3n instalada de AutoFirma para firmar. Durante la ejecuci\u00f3n de AutoFirma, es posible que este solicite permisos para acceder a la red. Consulte el apartado 4.1.3 Permisos adicionales para obtener m\u00e1s informaci\u00f3n.","title":"Instalador EXE"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#desinstalacion","text":"La desinstalaci\u00f3n de Autofirma puede realizarse desde la ventana \u201cProgramas y caracter\u00edsticas\u201d del de \u201cPanel de control\u201d de Windows. < Una vez lanzado, el desinstalador presenta un sencillo asistente: < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se mostrar\u00e1 la opci\u00f3n de desinstalaci\u00f3n. < Al pulsar el bot\u00f3n de \u201cDesinstalar\u201d se iniciar\u00e1 el proceso de desinstalaci\u00f3n. < Este proceso de desinstalaci\u00f3n tambi\u00e9n afecta a los perfiles de Mozilla Firefox y a la configuraci\u00f3n de Google Chrome. En caso de encontrarse abiertos estos navegadores, se le informar\u00e1 al usuario mediante una ventana de advertencia y este deber\u00e1 cerrarlos manualmente para poder continuar. Los procesos de estos navegadores pueden tardar un tiempo en finalizar despu\u00e9s de haber cerrado la ventana de la aplicaci\u00f3n. Si vuelve a aparecer el di\u00e1logo solicit\u00e1ndole que cierre la aplicaci\u00f3n, compruebe que no se encuentre abierta y espere unos segundos antes de pulsar el bot\u00f3n para continuar con el proceso. T\u00e9ngase en cuenta que el navegador Google Chrome puede quedar abierto incluso despu\u00e9s de cerrar su ventana. En esos casos, aparecer\u00e1 un icono en el \u00e1rea de notificaciones del escritorio del usuario y deber\u00e1 cerrarse a trav\u00e9s de la opci\u00f3n proporcionada en el men\u00fa contextual de este icono. Cuando el proceso termina, la aplicaci\u00f3n ha sido correctamente desinstalada de Windows. <","title":"Desinstalaci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#permisos-adicionales","text":"Es probable que despu\u00e9s de la instalaci\u00f3n de AutoFirma, al ejecutarlo como aplicaci\u00f3n de escritorio o como parte de un proceso de firma Web, la m\u00e1quina virtual de Java instalada junto con AutoFirma solicite permisos para el acceso a Internet pasando por el Firewall de Windows. Es necesario conceder estos permisos para que AutoFirma pueda ejecutar tareas propias de su funcionamiento habitual, como son la b\u00fasqueda de actualizaciones o la comunicaci\u00f3n con el navegador Web en los procesos de firma web.","title":"Permisos adicionales"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#linux","text":"La instalaci\u00f3n de AutoFirma en Linux debe ser realizada por un usuario con permisos de administrador. Se distribuyen varias versiones del instalador de AutoFirma para Linux: autofirma-X.Y.Z.deb : Instalador DEB para distribuciones derivadas de Debian/Ubuntu. autofirma-X.Y.Z-1.noarch_FEDORA.rpm : Instalador RPM para distribuciones derivadas de RedHat/Fedora. autofirma-X.Y.Z-1.noarch_SUSE.rpm : Instalador RPM para distribuciones derivadas de SUSE. NOTA: Se han encontrado problemas de compatibilidad con el Firefox por defecto instalado con el sistema operativo con el entorno KDE. En este caso, Firefox no atiende las llamadas realizadas por la p\u00e1gina para que abra la aplicaci\u00f3n. Se recomienda la instalaci\u00f3n del Firefox oficial de la web de Mozilla. En los nombres anteriores, las letras X, Y y Z (opcional) son los n\u00fameros de versi\u00f3n. Por ejemplo \u201cautofirma-1.8.deb\u201d corresponder\u00eda a AutoFirma versi\u00f3n 1.8 para distribuciones Ubuntu/Debian. Todos los instaladores incluyen la misma versi\u00f3n de AutoFirma, pero cada uno de ellos est\u00e1 preparado para la instalaci\u00f3n en un conjunto distinto de distribuciones de Linux. La principal diferencia entre los dos instaladores RPM son las dependencias declaradas, dado que las NSS Tools se encuentran con distinto nombre en los repositorios por defecto de algunas distribuciones. Para poder ejecutar AutoFirma son necesarias las siguientes dependencias, as\u00ed que estas se comprueban durante el proceso de instalaci\u00f3n: JRE (Java Runtine Environment) de Oracle u OpenJDK (versi\u00f3n 8 o superior). Biblioteca NSS Tools. El funcionamiento de AutoFirma esta verificado en distribuciones Ubuntu, Fedora y OpenSuse. Una vez instalada, puede usarse como aplicaci\u00f3n de escritorio e invocarse desde los navegadores web Mozilla Firefox y Google Chrome. Hay dos opciones de instalaci\u00f3n: por l\u00ednea de comandos y desde la interfaz de escritorio. La instalaci\u00f3n por ambos medios dejar\u00e1 la aplicaci\u00f3n instalada por defecto en el directorio: /usr/lib/AutoFirma","title":"Linux"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#instalador-deb","text":"","title":"Instalador DEB"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#instalacion_1","text":"","title":"Instalaci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#instalacion-por-linea-de-comandos-del-instalador-deb","text":"Para instalaci\u00f3n por l\u00ednea de comandos, en una consola ejecutaremos: sudo dpkg \u2013i RUTA_INSTALABLE_AUTOFIRMA Donde RUTA_INSTALABLE_AUTOFIRMA es la ruta al instalador en funci\u00f3n de la distribuci\u00f3n escogida. Si no tenemos instaladas las dependencias anteriormente listadas, se nos mostrar\u00e1n mensajes de advertencia al respecto. En caso de ser as\u00ed, podremos instalar estas bibliotecas con el comando: sudo apt-get \u2013f install Despu\u00e9s de esto, se debe volver a ejecutar el comando de instalaci\u00f3n de AutoFirma para asegurar su correcta instalaci\u00f3n: sudo dpkg \u2013i RUTA_INSTALABLE_AUTOFIRMA","title":"Instalaci\u00f3n por l\u00ednea de comandos del instalador DEB"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#instalacion-de-oracle-java-con-el-fichero-targz-de-oracle","text":"Si se tuviese Oracle Java instalado en el sistema mediante el fichero tar.gz de la web de Oracle, la JRE no habr\u00e1 quedado registrada en el gestor de paquetes. En ese caso, cuando se intente instalar AutoFirma, el gestor de paquetes considerar\u00e1 que no se cumplen los requisitos necesarios y se negar\u00e1 a instalarlo. Para forzar al uso de la JRE de Oracle se debe: Instalar la biblioteca \u201clibnss3-tools\u201d. Esta biblioteca es requisito indispensable de la aplicaci\u00f3n: sudo apt-get install libnss3-tools Configurar la variable JAVA_HOME con la JRE instalada y su directorio \u201cbin\u201d como parte del PATH del sistema. Esto se puede hacer, por ejemplo, editando el fichero \u201c/etc/environment\u201d y agregando a la variable PATH la ruta del directorio bin de Java y la nueva variable: PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/java/jdk-11.0.8/bin\" JAVA_HOME=\"/usr/java/jdk-11.0.8\" Podemos hacer que el sistema recargue la configuraci\u00f3n de este fichero (y as\u00ed no sea necesario reiniciarlo) con el comando: source /etc/environment","title":"Instalaci\u00f3n de Oracle Java con el fichero tar.gz de Oracle"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#instalacion-de-muestra-mediante-el-asistente-de-paquetes-de-ubuntu","text":"Para la instalaci\u00f3n mediante el asistente de paquetes, se debe hacer doble clic en el fichero de la distribuci\u00f3n (.deb). Se abrir\u00e1 una ventana similar a la siguiente. < Se debe pulsar el bot\u00f3n instalar, que se encuentra arriba a la derecha. Si no se tienen permisos de administrador, el sistema solicitar\u00e1 la clave de \u201cs\u00faper usuario\u201d para poder realizar la instalaci\u00f3n. < Si no ha ocurrido ning\u00fan problema, se mostrar\u00e1 un mensaje de confirmaci\u00f3n. <","title":"Instalaci\u00f3n de muestra mediante el asistente de paquetes de Ubuntu"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#desinstalacion_1","text":"","title":"Desinstalaci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#desinstalacion-del-paquete-deb","text":"Para realizar la desinstalaci\u00f3n del sistema se puede utilizar el siguiente comando. sudo dpkg -r autofirma Cuando el proceso termina, la aplicaci\u00f3n ha sido correctamente desinstalada del sistema.","title":"Desinstalaci\u00f3n del paquete DEB"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#instalador-rpm","text":"","title":"Instalador RPM"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#importacion-de-la-clave-publica-pgp-del-instalador","text":"Antes de instalar la aplicaci\u00f3n, se deber\u00eda agregar la clave p\u00fablica PGP del firmante del instalador al almac\u00e9n de confianza del sistema. La clave p\u00fablica PGP puede descargarse como un fichero \u201c.asc\u201d junto al archivo de instalaci\u00f3n. Para importar esta clave PGP a nuestro almac\u00e9n usaremos el comando: sudo rpm --import PUBLIC_KEY.asc En este comando, \u201cPUBLIC_KEY.asc\u201d ser\u00e1 el fichero con la clave p\u00fablica. Una vez importada la clave PGP, el sistema podr\u00e1 validar autom\u00e1ticamente la firma del instalador RPM.","title":"Importaci\u00f3n de la clave p\u00fablica PGP del instalador"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#instalacion_2","text":"","title":"Instalaci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#instalacion-por-linea-de-comandos-con-rpm","text":"Para instalaci\u00f3n por l\u00ednea de comandos con RPM, en una consola ejecutaremos: sudo rpm -i autofirma-X.Y.Z.noarch.rpm En el comando anterior \u201cautofirma-X.Y.Z.noarch.rpm\u201d ser\u00e1 el nombre del fichero instalador apropiado para nuestro sistema. Si no tuviese instalados todas las dependencias del paquete, deber\u00e1 instalarlas por separado","title":"Instalaci\u00f3n por l\u00ednea de comandos con RPM"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#instalacion-por-linea-de-comandos-con-zypper","text":"Puede instalarse la aplicaci\u00f3n y todas sus dependencias con el gestor de paquetes Zypper mediante el siguiente comando: sudo zypper in autofirma-X.Y.Z.noarch.rpm En el comando anterior \u201cautofirma-X.Y.Z.noarch.rpm\u201d ser\u00e1 el nombre del fichero instalador apropiado para nuestro sistema. El propio gestor de paquetes ya se encargar\u00e1 de buscar las dependencias necesarias y se ofrecer\u00e1 a instalarlas.","title":"Instalaci\u00f3n por l\u00ednea de comandos con Zypper"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#instalacion-por-linea-de-comandos-con-yum","text":"Puede instalarse la aplicaci\u00f3n y todas sus dependencias con el gestor de paquetes Yum mediante el siguiente comando: sudo yum localinstall autofirma-X.Y.Z.noarch.rpm En el comando anterior \u201cautofirma-X.Y.Z.noarch.rpm\u201d ser\u00e1 el nombre del fichero instalador apropiado para nuestro sistema. El propio gestor de paquetes ya se encargar\u00e1 de buscar las dependencias necesarias y se ofrecer\u00e1 a instalarlas.","title":"Instalaci\u00f3n por l\u00ednea de comandos con Yum"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#instalacion-mediante-el-asistente-de-paquetes","text":"Tenga en cuenta que el uso de un asistente de paquetes tambi\u00e9n puede requerir que se importe la clave PGP del firmante del instalador, para que as\u00ed el sistema lo valide. Si no se importase la clave del firmante, algunos gestores de paquetes dar\u00e1n un error durante el proceso de instalaci\u00f3n sin indicar el motivo del error. Para la instalaci\u00f3n mediante el asistente de paquetes, se debe hacer doble clic en el fichero de la distribuci\u00f3n (.rpm), tras lo cual se pedir\u00e1 la contrase\u00f1a de administrador. Una vez introducida, se abrir\u00e1 una ventana similar a la siguiente, seg\u00fan sea el gestor de paquetes del sistema. En el ejemplo mostrado, se puede ver el gestor de paquetes YaST. < Al pulsar el bot\u00f3n Aceptar, se inicia el proceso de instalaci\u00f3n: < Tras finalizar el proceso de instalaci\u00f3n, se mostrar\u00e1 una pantalla con el resultado del mismo: <","title":"Instalaci\u00f3n mediante el asistente de paquetes"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#desinstalacion_2","text":"","title":"Desinstalaci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#desinstalacion-del-paquete-con-rpm","text":"Para realizar la desinstalaci\u00f3n del sistema se puede utilizar el siguiente comando. sudo rpm \u2013e autofirma Cuando el proceso termine, la aplicaci\u00f3n habr\u00e1 sido correctamente desinstalada del sistema.","title":"Desinstalaci\u00f3n del paquete con RPM"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#desinstalacion-del-paquete-con-zypper","text":"Para realizar la desinstalaci\u00f3n del sistema se puede utilizar el siguiente comando. sudo zypper rm autofirma Cuando el proceso termine, la aplicaci\u00f3n habr\u00e1 sido correctamente desinstalada del sistema.","title":"Desinstalaci\u00f3n del paquete con Zypper"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#actualizacion","text":"","title":"Actualizaci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#actualizacion-del-paquete-con-rpm","text":"Para actualizar desde AutoFirma 1.8 a una posterior usaremos el comando: sudo rpm -U autofirma-X.Y.Z.noarch.rpm Sin embargo, cuando queremos actualizar desde una versi\u00f3n anterior a AutoFirma 1.8, deberemos indicar que durante la actualizaci\u00f3n no se ejecute el proceso de desinstalaci\u00f3n de esa versi\u00f3n, ya que inclu\u00eda un error que imped\u00eda el proceso. Para ello usaremos el comando: sudo rpm -U --nopreun --nopostun autofirma-X.Y.Z.noarch.rpm Cuando el proceso termine, la aplicaci\u00f3n habr\u00e1 sido correctamente actualizada.","title":"Actualizaci\u00f3n del paquete con RPM"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#apple-macos","text":"","title":"Apple macOS"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#instalador-pkg","text":"La instalaci\u00f3n de AutoFirma en macOS debe realizarla un usuario con permisos de administrador. El archivo de instalaci\u00f3n se distribuye con el nombre \u201cAutoFirma_X.Y.Z.pkg\u201d, donde X, Y y Z (opcional) son los n\u00fameros de la versi\u00f3n. Por ejemplo, \u201cAutoFirma_1.6.pkg\u201d corresponder\u00eda a AutoFirma versi\u00f3n 1.6. AutoFirma es compatible con las versiones de macOS Sierra y superiores. Los navegadores compatibles son Apple Safari, Google Chrome y Mozilla Firefox. Para la instalaci\u00f3n de la aplicaci\u00f3n, se debe hacer doble clic sobre el fichero. El sistema abrir\u00e1 el asistente que se encargar\u00e1 de realizar los pasos a seguir para la correcta instalaci\u00f3n de la aplicaci\u00f3n. < Para iniciar el proceso de instalaci\u00f3n, hay que pulsar el bot\u00f3n \u201cContinuar\u201d, tras lo que se nos mostrar\u00e1 el acuerdo de licencia. < Una vez le\u00edda la licencia del producto, se puede pulsar \u201cContinuar\u201d. En ese momento, se indicar\u00e1 que se debe aceptar la licencia. Al pulsar el bot\u00f3n \"Aceptar\u201d se acepta la licencia y contin\u00faa con la instalaci\u00f3n. En la siguiente pantalla se mostrar\u00e1 seleccionar la unidad en la que se almacenar\u00e1 la aplicaci\u00f3n: < En esta pantalla se debe seleccionar la unidad principal y pulsar \u201cContinuar\u201d para ver el detalle resumen del proceso de instalaci\u00f3n. < En esta pantalla se puede ver cu\u00e1nto espacio en disco ocupar\u00e1 la aplicaci\u00f3n. Al pulsar el bot\u00f3n \u201cInstalar\u201d, se comienza la instalaci\u00f3n del producto. Para completar la instalaci\u00f3n ser\u00e1 necesario indicar el nombre de usuario y contrase\u00f1a de un usuario con permisos de administrador, ya que ser\u00e1 necesario instalar certificados de confianza en el almac\u00e9n del sistema y Firefox. < En caso de detectarse que el navegador Mozilla Firefox est\u00e1 en ejecuci\u00f3n, se pedir\u00e1 al usuario que lo cierre para continuar con el proceso de instalaci\u00f3n. Finalmente, se informar\u00e1 del resultado de la instalaci\u00f3n. <","title":"Instalador PKG"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#desinstalacion_3","text":"Para desinstalar la aplicaci\u00f3n basta con eliminar la carpeta que se gener\u00f3 en el directorio /Applications. Tambi\u00e9n es recomendable eliminar los certificados identificados como \u201cAutoFirma ROOT\u201d y \u201c127.0.0.1\u201d del llavero de macOS. Puede realizarse esto accediendo a la aplicaci\u00f3n \u201cAcceso a Llaveros\u201d, seleccion\u00e1ndose el llavero \u201cSistema\u201d y eliminando del listado los certificados mencionados.","title":"Desinstalaci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#uso-de-dnie-y-tarjetas-inteligentes","text":"El Cliente @firma utiliza la biblioteca JMulticard para permitir firmar con DNIe y tarjetas inteligentes de la F\u00e1brica Nacional de Moneda y Timbre (FNMT) sin necesidad de que los usuarios tengan instalados los controladores de la tarjeta. Por defecto, siempre que se seleccione un certificado de DNIe o uno insertado en una tarjeta de la FNMT, se utilizar\u00e1 JMulticard para ejecutar la operaci\u00f3n de firma. El uso de JMulticard sobre el controlador oficial de estas tarjetas conlleva ciertas ventajas, ya que existen ciertas incompatibilidades de AutoFirma con estos que impiden que funcionen correctamente, sobre todo cuando se realizan firmas de m\u00faltiples documentos. JMulticard est\u00e1 activado por defecto en AutoFIrma, pero puede desactivarlo para usar el controlador oficial de la tarjeta, que deber\u00e1 estar instalado en el sistema, siga las instrucciones indicadas a continuaci\u00f3n: Abra la aplicaci\u00f3n AutoFirma. Seleccione el men\u00fa \u201cHerramientas\u201d y la opci\u00f3n \u201cPreferencias\u201d. En la pesta\u00f1a \u201cGeneral\u201d se muestra la opci\u00f3n \u201cHabilitar JMulticard para el uso de las tarjetas de la FNMT y DNIe\u201d. Despu\u00e9s de modificar esta opci\u00f3n, deber\u00e1 pulsar Aceptar en el panel de preferencias. La configuraci\u00f3n ser\u00e1 efectiva la pr\u00f3xima vez que se abra AutoFirma. < Cuando se desactiva el uso de JMulticard, no se usa esta biblioteca para firmar, ni en la firma local de documentos ni en las firmas dentro de un tr\u00e1mite web, en donde se utilizar\u00e1 el mismo controlador que utilice el navegador web utilizado. La \u00fanica excepci\u00f3n a esto es cuando, al abrir AutoFirma, se selecciona expresamente la opci\u00f3n \u201cContinuar con DNIe\u201d. Se recomienda mantener activado JMulticard por defecto, pero puede plantearse modificar esta configuraci\u00f3n seg\u00fan el uso habitual de firma. Mant\u00e9ngalo activado cuando habitualmente: No utilice tarjetas para firmar. Use tarjetas inteligentes o utilice el DNIe y tarjetas de la FNMT. Mant\u00e9ngalo desactivado e instale los controladores oficiales de su tarjeta cuando habitualmente: Utilice una nueva versi\u00f3n de DNIe o tarjeta inteligente y haya comprobado que AutoFirma no funciona correctamente con ellas. Utilice tarjetas distintas a DNIe y tarjetas de la FNMT. JMulticard no impedir\u00e1 su uso, pero s\u00ed puede alterar su comportamiento, por ejemplo, impidiendo que el controlador guarde en cach\u00e9 el PIN del usuario para reutilizarlo en firmas consecutivas. Realice los tr\u00e1mites web desde Firefox y advierta que se producen problemas al firmar con su tarjeta (puede ocurrir con versiones antiguas de tarjetas de la FNMT). La biblioteca JMulticard pedir\u00e1 el PIN de las tarjetas siempre que lo requiera, lo que puede suponer insertarlo por cada documento de firma en los procesos de firma masiva. Para evitar esto, el propio di\u00e1logo de inserci\u00f3n de contrase\u00f1a ofrece al usuario la posibilidad de seleccionar que se recuerde la contrase\u00f1a durante la sesi\u00f3n de firma. Esta opci\u00f3n, sin embargo, podr\u00eda no funcionar en tr\u00e1mites web (seg\u00fan la integraci\u00f3n realizada del tr\u00e1mite y el navegador del usuario). En esos casos, se seguir\u00e1 pidiendo la contrase\u00f1a por cada documento. Este comportamiento podr\u00eda corregirse con el uso del controlador de oficial de la tarjeta, aunque esto puede conllevar otros inconvenientes (necesidad de tener instalado el controlador, posibles incompatibilidades de arquitectura, posibles problemas de conexi\u00f3n con el dispositivo, etc.).","title":"Uso de DNIe y tarjetas inteligentes"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#uso-por-linea-de-comandos","text":"AutoFirma permite su uso a trav\u00e9s de l\u00ednea de comandos, proporcionando funcionalidades de firma, firma de lotes y creaci\u00f3n y verificaci\u00f3n de hashes. El ejecutable o script a utilizar para la ejecuci\u00f3n de AutoFirma por l\u00ednea de comandos var\u00eda en funci\u00f3n del sistema: Windows El proceso de instalaci\u00f3n copia en el directorio de AutoFirma el ejecutable \u201cAutoFirmaCommandLine\u201d. Utilice este ejecutable desde l\u00ednea de comandos para realizar las distintas operaciones que se soportan. Linux El proceso de instalaci\u00f3n genera en el directorio \u201c/usr/bin\u201d el script \u201cautofirma\u201d. Utilice este script para ejecutar la aplicaci\u00f3n proporcion\u00e1ndole directamente los par\u00e1metros de la operaci\u00f3n que desee. macOS Para el uso de la aplicaci\u00f3n por l\u00ednea se facilita un script. Utilice este script para ejecutar la aplicaci\u00f3n proporcion\u00e1ndole directamente los par\u00e1metros de la operaci\u00f3n que desee. Aquellos par\u00e1metros que incluyan saltos de l\u00ednea deber\u00e1n proporcionarse enmarcados entre comillas simples. Por ejemplo, se puede ejecutar AutoFirma y listar las distintas operaciones disponibles a trav\u00e9s de la l\u00ednea de comandos con el comando \u201c-help\u201d de la siguiente manera: En Windows: AutoFirmaCommandLine \u2013help En Linux: /usr/bin/AutoFirma \u2013help En Mac: /Applications/AutoFirma.app/Contents/MacOS/AutoFirmaCommandLine \u2013help Esto dar\u00eda como resultado: Herramienta de firma de documentos. Sintaxis: AutoFirma cmd [options...] Comandos cmd: sign (firma de fichero) cosign (cofirma de fichero) countersign (contrafirma de fichero) listaliases (lista los alias disponibles en el almacen) verify (abre un panel con la informacion de validacion de una firma o certificado) batchsign (firma/multifirma de lotes de ficheros) Utilice \"AutoFirma cmd -help\" para ver la sintaxis del comando \"cmd\" Algunos plugins, como el de las funcionalidades de c\u00e1lculo de hashes, pueden agregar nuevos comandos accesibles por consola. Para listar las opciones de configuraci\u00f3n de alguno de los comandos, puede utilizar la opci\u00f3n \u201c-help\u201d sobre cualquiera de ellos. Por ejemplo: AutoFirmaCommandLine sign \u2013help Esto dar\u00eda como resultado: Sintaxis: AutoFirma sign [opciones...] Opciones: -gui (Realiza la operacion con entorno grafico. Tiene prioridad sobre -certgui) -certgui (Usa un dialogo grafico para la seleccion del certificado de firma) -i inputfile (Ruta del fichero de entrada) -o outputfile (Ruta del fichero de salida) -algorithm algo (Algoritmo de firma) -format (Establece el formato de firma) auto (Seleccion de formato en base al fichero de entrada) cades (Formato CAdES) pades (Formato PAdES) xades (Formato XAdES) facturae (Firma de factura electronica) -config extraParams (Properties en texto plano con la configuracion de la operacion) -store (Establece el almacen de claves. Por defecto, el del sistema) auto (Almacen de claves del sistema) windows (Almacen de claves de Windows) mac (Almacen de claves de macOS) mozilla (Almacen de claves de Mozilla Firefox) dni (DNI electronico) pkcs12:p12file (Almacen PKCS#12. \"p12file\" es la ruta del almacen) pkcs11:p11file (Almacen PKCS#11. \"p11file\" es la ruta del controlador) -password password (Establece la contrasena del almacen) -alias alias (Alias del certificado de firma) -filter filter (Filtro para seleccionar el certificado de firma) -xml (Formatea la respuesta como XML)","title":"Uso por l\u00ednea de comandos"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#habilitar-en-firefox-la-confianza-en-los-certificados-raiz-del-sistema","text":"Mozilla Firefox permite un modo de configuraci\u00f3n en Windows y macOS con el cual, adem\u00e1s de confiar en los certificados ra\u00edz de su almac\u00e9n de confianza, puede confiar tambi\u00e9n en los certificados en el almac\u00e9n de confianza del sistema. Habilitar esta configuraci\u00f3n implica diversas ventajas para el usuario: Puede instalar los certificados \u00fanicamente en el almac\u00e9n del sistema. No es necesario que los instale en el almac\u00e9n de confianza de Firefox En entornos en los datos de la cuenta del usuario se carga desde un servidor, no es necesario transferir los datos del almac\u00e9n de confianza de Firefox. La configuraci\u00f3n del almac\u00e9n de confianza de Firefox se puede establecer durante la instalaci\u00f3n de AutoFirma en Windows o mediante la opci\u00f3n de \u201cReparaci\u00f3n de la instalaci\u00f3n\u201d de la aplicaci\u00f3n en Windows o macOS. La opci\u00f3n de reparaci\u00f3n de la instalaci\u00f3n habilitar\u00e1 o deshabilitar\u00e1 esta opci\u00f3n seg\u00fan se haya marcado no la casilla de verificaci\u00f3n antes de iniciar el proceso de restauraci\u00f3n. <","title":"Habilitar en Firefox la confianza en los certificados ra\u00edz del sistema"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#problemas-conocidos","text":"","title":"Problemas conocidos"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#al-instalar-autofirma-falla-la-instalacion-de-los-certificados-de-confianza-ssl","text":"AutoFirma requiere permisos de administrador para ser instalado y para insertar el certificado de confianza SSL para el funcionamiento de la firma en los tr\u00e1mites online. Si falla el proceso de instalaci\u00f3n de los certificados, acceda al apartado de reparaci\u00f3n de la instalaci\u00f3n de AutoFirma (Men\u00fa \u201cHerramientas\u201d \u00e0 \u201cRestaurar la instalaci\u00f3n\u201d) y ejecute el proceso de reinstalaci\u00f3n. En el caso de que la instalaci\u00f3n de los certificados falle \u00fanicamente en Firefox, valore la el activar la confianza de Firefox en el almac\u00e9n del sistema (s\u00f3lo para sistemas Windows y macOS). Si no puede instalar AutoFirma o el certificado de confianza y no es usted el administrador del sistema, solicite al administrador de su sistema que realice la instalaci\u00f3n de la aplicaci\u00f3n.","title":"Al instalar AutoFirma falla la instalaci\u00f3n de los certificados de confianza SSL"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#al-instalar-autofirma-en-windows-se-muestra-el-error-error-abriendo-archivo-para-escritura","text":"Es posible que durante la instalaci\u00f3n se le muestre un error como el que sigue: < Si ya ten\u00eda instalado AutoFirma, compruebe que este no se est\u00e1 ejecutando, en cuyo caso el instalador no podr\u00e1 sobrescribir los ficheros de instalaci\u00f3n. Cierre AutoFirma y pulse el bot\u00f3n reintentar. Si AutoFirma no se est\u00e1 ejecutando, es posible que el archivo en cuesti\u00f3n se encuentre bloqueado por una ejecuci\u00f3n o intento de instalaci\u00f3n previo. Reinicie su equipo y pruebe a instalar nuevamente la aplicaci\u00f3n.","title":"Al instalar AutoFirma en Windows se muestra el error: \u201cError abriendo archivo para escritura\u201d"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#no-se-puede-instalar-autofirma-en-windows-porque-indica-que-la-version-ya-esta-instalada-o-que-hay-una-superior","text":"Al desinstalarse AutoFirma puede ocurrir alg\u00fan error que deje entradas de registro residentes en el sistema que hagan creer que AutoFirma sigue instalado en el sistema. En estos casos, es posible que AutoFirma ya no aparezca en el listado de programas instalados, pero que al intentar volver a instalar AutoFirma se informe de que una versi\u00f3n superior o la misma versi\u00f3n de la aplicaci\u00f3n ya est\u00e1 instalada. Primeramente, se deber\u00eda reiniciar el equipo para asegurar que ning\u00fan recurso de la anterior instalaci\u00f3n se encuentra en uso. Si tras el reinicio, ni aparece la versi\u00f3n que se instal\u00f3 de AutoFirma ni se puede instalar la nueva versi\u00f3n a partir del instalador EXE, pruebe a utilizar el instalador MSI de AutoFirma. Este forzar\u00e1 la instalaci\u00f3n de la nueva versi\u00f3n.","title":"No se puede instalar AutoFirma en Windows porque indica que la versi\u00f3n ya est\u00e1 instalada o que hay una superior"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#al-instalar-autofirma-en-linux-a-partir-del-paquete-rpm-con-el-gestor-de-paquetes-del-sistema-se-muestra-el-mensaje-de-error-error-interno","text":"Es posible que no se haya importado la clave PGP de firma en el almac\u00e9n de confianza. Siga las instrucciones del apartado 4.2.2.1 Importaci\u00f3n de la clave p\u00fablica PGP del instalador para la importaci\u00f3n de la clave PGP.","title":"Al instalar AutoFirma en Linux a partir del paquete RPM con el gestor de paquetes del sistema se muestra el mensaje de error \u201cError interno\u201d"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#al-instalar-autofirma-en-linux-a-partir-del-paquete-rpm-desde-consola-aparece-el-error-nokey","text":"El mensaje \u201cNOKEY\u201d se muestra cuando se detecta que el instalador est\u00e1 firmado pero la clave no se ha importado en el sistema. Seg\u00fan el sistema, es posible que el instalador contin\u00fae con el proceso de instalaci\u00f3n o no despu\u00e9s de mostrar el mensaje. Si el instalador no completa la instalaci\u00f3n, prueba a importar la clave de firma en su sistema y repetir el proceso de instalaci\u00f3n. Puede consultar como importar la clave PGP en el apartado 4.2.2.1 Importaci\u00f3n de la clave p\u00fablica PGP del instalador .","title":"Al instalar AutoFirma en Linux a partir del paquete RPM desde consola aparece el error \u201cNOKEY\u201d"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#al-actualizar-autofirma-en-linux-a-partir-del-paquete-rpm-deja-de-funcionar","text":"AutoFirma 1.7.1 y anteriores inclu\u00edan un error en su desinstalador que imped\u00eda la correcta actualizaci\u00f3n a versiones posteriores. Para actualizar desde AutoFirma 1.7.1 o anterior a una nueva versi\u00f3n de AutoFirma es necesario indicar que no se debe ejecutar el desinstalador de la versi\u00f3n anterior durante el proceso. Por ejemplo, para actualizar mediante \u201crpm\u201d deber\u00edamos usa el comando: sudo rpm -U --nopreun --nopostun autofirma-X.Y.Z.noarch.rpm Si ya intent\u00f3 actualizar AutoFirma y ahora no funciona, desinst\u00e1lela e instale directamente la nueva versi\u00f3n.","title":"Al actualizar AutoFirma en Linux a partir del paquete RPM deja de funcionar"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#cuando-se-instala-mozilla-firefox-o-se-crea-un-nuevo-perfil-de-usuario-despues-de-la-instalacion-de-autofirma-este-no-funciona-en-firefox","text":"Durante el proceso de instalaci\u00f3n de AutoFirma se genera un certificado para la comunicaci\u00f3n entre la p\u00e1gina web y la aplicaci\u00f3n, y lo instala en los almacenes de confianza del sistema y de Firefox. Si se crea un perfil de usuario de Firefox o se instala el propio Firefox despu\u00e9s de la instalaci\u00f3n de AutoFirma, este no contar\u00e1 con el certificado entre los que considera de confianza. Para resolver este problema utilice la funci\u00f3n de restauraci\u00f3n de la instalaci\u00f3n de AutoFirma: Men\u00fa \u201cHerramientas\u201d \u00e0 \u201cRestaurar instalaci\u00f3n\u201d.","title":"Cuando se instala Mozilla Firefox o se crea un nuevo perfil de usuario despu\u00e9s de la instalaci\u00f3n de AutoFirma, este no funciona en Firefox"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#autofirma-se-cierra-inmediatamente-tras-ser-invocado-desde-el-navegador-web","text":"Cuando se abre AutoFirma por petici\u00f3n de un navegador web inmediatamente se abre una conexi\u00f3n entre ambas aplicaciones. Si AutoFirma detecta cualquier problema que evita que se pueda establecer esa comunicaci\u00f3n, se cierra. Esto dar\u00e1 lugar a que, pasado un tiempo, la p\u00e1gina web que intent\u00f3 realizar la operaci\u00f3n de firma informe de que no se pudo conectar con AutoFirma. Para resolver este problema utilice la funci\u00f3n de restauraci\u00f3n de la instalaci\u00f3n de AutoFirma: Men\u00fa \u201cHerramientas\u201d \u00e0 \u201cRestaurar instalaci\u00f3n\u201d. Esta funci\u00f3n permitir\u00e1 reestablecer la configuraci\u00f3n y los recursos necesarios para que se pueda establecer la comunicaci\u00f3n entre el navegador y AutoFirma.","title":"AutoFirma se cierra inmediatamente tras ser invocado desde el navegador web"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#no-se-detectan-tarjetas-inteligentes-en-macos","text":"Muchas tarjetas inteligentes no disponen de los controladores necesarios para su uso a trav\u00e9s del llavero de Apple (almac\u00e9n utilizado por AutoFirma cuando se usa a trav\u00e9s de Safari, Chrome o como aplicaci\u00f3n de escritorio). En el caso concreto del DNIe, AutoFirma es capaz de utilizarlo por medio del controlador Java que incorpora, pero con el resto de las tarjetas no es posible. Para utilizar tarjetas criptogr\u00e1ficas en macOS, instale sus controladores PKCS#11 como dispositivos de seguridad en Mozilla Firefox y utilice AutoFirma a trav\u00e9s de este navegador.","title":"No se detectan tarjetas inteligentes en macOS"},{"location":"markdown_strict/AF_manual_instalacion_usuarios_ES/#autofirma-muestra-un-tamano-de-letra-mas-grande-o-pequeno-de-lo-habitual-en-windows","text":"Windows puede modificar el tama\u00f1o de letra con el que se muestran algunas aplicaciones al detectar pantallas de alta densidad, como monitores 4K. En el caso de hacerlo, es probable que AutoFirma se muestre con un tama\u00f1o de letra que resulte molesto o impida su correcto usa. Para corregir esto es necesario indicarlo al sistema que restablezca el tama\u00f1o de letra. Podemos hacer esto desde el \u201cPanel de Control\u201d, en el apartado \u201cFuentes\u201d. En esta pantalla se podr\u00e1 encontrar la opci\u00f3n \u201cConfiguraci\u00f3n de fuentes\u201d y dentro de la misma habr\u00e1 un bot\u00f3n \u201cRestaurar configuraci\u00f3n de fuente predeterminada\u201d. Tras restaurar la configuraci\u00f3n de fuentes y arrancar AutoFirma, veremos que el tama\u00f1o de fuente ha vuelto a la normalidad. < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"AutoFirma muestra un tama\u00f1o de letra m\u00e1s grande o peque\u00f1o de lo habitual en Windows"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/","text":"AutoFirma es una herramienta de escritorio con interfaz gr\u00e1fica que permite la ejecuci\u00f3n de operaciones de firma de ficheros locales en entornos de escritorio (Windows, Linux y macOS). Tambi\u00e9n puede utilizarse a trav\u00e9s de consola o ser invocada por otras aplicaciones mediante protocolo para la ejecuci\u00f3n de operaciones de firma. El presente documento gu\u00eda al usuario final de AutoFirma a trav\u00e9s del proceso de instalaci\u00f3n, presenta las posibilidades de uso de AutoFirma a trav\u00e9s de consola, el uso de tarjetas inteligentes y lista diversos problemas que pueden surgir en la instalaci\u00f3n y ejecuci\u00f3n de la aplicaci\u00f3n. AutoFirma hace uso de los certificados digitales X.509v3 y de las claves privadas asociadas a estos que est\u00e9n instalados en el almac\u00e9n de claves ( KeyStore ) del sistema operativo o del navegador Web (Internet Explorer, Mozilla Firefox, etc.) en caso de realizarse la operaci\u00f3n desde un tr\u00e1mite web. Tambi\u00e9n permite el uso de dispositivos externos (tarjetas inteligentes, dispositivos USB) configurados en estos almacenes de claves (como, por ejemplo, el DNI Electr\u00f3nico o DNIe). AutoFirma hace uso de las claves privadas asociadas a los certificados del usuario y no permite que estos salgan en ning\u00fan momento del almac\u00e9n (tarjeta, dispositivo USB o repositorio local) ubicado en su PC. AutoFirma no almacena ning\u00fan tipo de informaci\u00f3n personal del usuario, ni hace uso de cookies ni ning\u00fan otro mecanismo para la gesti\u00f3n de datos de sesi\u00f3n. AutoFirma s\u00ed almacena trazas de su \u00faltima ejecuci\u00f3n a efectos de ofrecer soporte al usuario si se encontrase alg\u00fan error. Estas trazas de ejecuci\u00f3n no contienen ning\u00fan tipo de informaci\u00f3n personal y la aplicaci\u00f3n no facilita de ninguna forma el acceso a estos datos almacenados. AutoFirma es una aplicaci\u00f3n de Software Libre publicado que se puede usar, a su elecci\u00f3n, bajo licencia GNU General Public License versi\u00f3n 2 (GPLv2) o superior o bajo licencia European Software License 1.1 (EUPL 1.1) o superior. Puede consultar la informaci\u00f3n relativa al proyecto Cliente @firma, dentro del cual se encuentra AutoFirma, y descargar el c\u00f3digo fuente y los binarios de la aplicaci\u00f3n en la siguiente direcci\u00f3n Web: https://administracionelectronica.gob.es/ctt/clienteafirma#.X1o8YcH7RPY Adecuaci\u00f3n al Esquema Nacional de Seguridad Los productos de la Suite de @firma pueden contener entre los algoritmos disponibles, algunos no recomendados por la Gu\u00eda 807 del Esquema Nacional de Seguridad (ENS; editada por el Centro Criptol\u00f3gico Nacional, CCN) vigente en el momento de publicaci\u00f3n de este documento. Por lo que queda bajo la responsabilidad de las aplicaciones que hacen uso de estos productos el configurar adecuadamente las llamadas a los mismos para generar el resultado esperado, v\u00e1lido y adecuado para ese momento y el nivel de seguridad deseado, utilizando para ello algoritmos de la familia SHA-2 tal y como especifica dicha norma para la generaci\u00f3n de firmas electr\u00f3nicas. Puede consultar la norma vigente desde el siguiente enlace: https://www.ccn-cert.cni.es/series-ccn-stic/800-guia-esquema-nacional-de-seguridad/513-ccn-stic-807-criptologia-de-empleo-en-el-ens/file.html Requisitos m\u00ednimos El uso de AutoFirma como herramienta de firma integrada dentro del proceso de firma de tr\u00e1mites web tiene los siguientes requerimientos en cuanto a entorno operativo: Sistema Operativo Microsoft Windows. Soportado directamente en 7, 8, 8.1 y 10. En 32 o 64 bits. Linux Distribuciones probadas: Ubuntu, Fedora y OpenSuse. Apple macOS. Soportado directamente en Sierra, High Sierra, Mojave. Navegadores Web (para la invocaci\u00f3n por protocolo) Microsoft Windows Microsoft Internet Explorer 8 o superior. Google Chrome 46 o superior. Mozilla Firefox 41.0.2 o superior. Microsoft Edge 60 o superior. Linux Mozilla Firefox 41.0.1 o superior. Apple macOS Apple Safari 12.0 o superior. Google Chrome 46 o superior. Mozilla Firefox 65 o superior. ADVERTENCIA: El funcionamiento de AutoFirma al invocarlo desde versiones de Internet Explorer anteriores a la 11 (o Internet Explorer 11 en modo de compatibilidad con una versi\u00f3n anterior) est\u00e1 supeditado a que el administrador de la aplicaci\u00f3n web haya cumplido ciertos requisitos durante el despliegue. Para asegurar el correcto funcionamiento de las operaciones de firma online utilice otro de los navegadores soportados. En entornos macOS y Windows no es necesario tener instalado un entorno de ejecuci\u00f3n de Java. En Linux se necesita un entorno de ejecuci\u00f3n de Java 11 de Oracle u OpenJDK 11 (marcado como dependencia en el instalador integrado de AutoFirma). Es obligatorio que AutoFirma sea instalado antes de iniciar el tr\u00e1mite web en el que se usar\u00e1 para ejecutar las operaciones de firma. Enlaces de descarga Para instar al usuario que se instale AutoFirma, redir\u00edjalo a la siguiente p\u00e1gina web: http://firmaelectronica.gob.es/Home/Descargas.html Funcionamiento de AutoFirma AutoFirma permite tanto su uso a trav\u00e9s de su interfaz gr\u00e1fica para la generaci\u00f3n de firmas de documentos locales del usuario, como su uso como herramienta de firma dentro de un flujo de firma web. Para que AutoFirma se inicie para permitir firmar en un tr\u00e1mite web, se necesario que dicho tr\u00e1mite se configure tal como se describe en el manual del integrador del Cliente @firma ( MCF_manual-integrador_ES ). Es requisito tambi\u00e9n que AutoFirma est\u00e9 instalado en el equipo del usuario antes de iniciar el tr\u00e1mite de firma. Es responsabilidad del integrador alertar de este hecho cuando sea susceptible que los usuarios no tengan instalada la aplicaci\u00f3n. Ya se ejecute AutoFirma como aplicaci\u00f3n de escritorio o sea lanzada por el navegador web, AutoFirma registra la operativa de su \u00faltima ejecuci\u00f3n en un fichero de trazas en el subdirectorio oculto \u201c .afirma \u201d del directorio del usuario. Por ejemplo, \u201c C:\\Users\\miusuario\\afirma \u201d. El fichero generado tiene el nombre \u201c AUTOFIRMA.afirma.log.xml \u201d. Los ficheros de trazas del Cliente @firma en ning\u00fan caso almacenan informaci\u00f3n de car\u00e1cter personal. Uso del DNIe y tarjetas inteligentes El Cliente @firma utiliza la biblioteca JMulticard para permitir firmar con DNIe y tarjetas inteligentes de la F\u00e1brica Nacional de Moneda y Timbre (FNMT) sin necesidad de que los usuarios tengan instalados los controladores de la tarjeta. Por defecto, siempre que se seleccione un certificado de DNIe o uno insertado en una tarjeta de la FNMT, se utilizar\u00e1 JMulticard para ejecutar la operaci\u00f3n de firma. El uso de JMulticard sobre el controlador oficial de estas tarjetas conlleva ciertas ventajas, ya que existen ciertas incompatibilidades de AutoFirma con estos que impiden que funcionen correctamente, sobre todo cuando se realizan firmas de m\u00faltiples documentos. JMulticard est\u00e1 activado por defecto en AutoFIrma, pero puede desactivarlo para usar el controlador oficial de la tarjeta, que deber\u00e1 estar instalado en el sistema, siga las instrucciones indicadas a continuaci\u00f3n: Abra la aplicaci\u00f3n AutoFirma. Seleccione el men\u00fa \u201cHerramientas\u201d y la opci\u00f3n \u201cPreferencias\u201d. En la pesta\u00f1a \u201cGeneral\u201d se muestra la opci\u00f3n \u201cHabilitar JMulticard para el uso de las tarjetas de la FNMT y DNIe\u201d. Despu\u00e9s de modificar esta opci\u00f3n, deber\u00e1 pulsar Aceptar en el panel de preferencias. La configuraci\u00f3n ser\u00e1 efectiva la pr\u00f3xima vez que se abra AutoFirma. < Cuando se desactiva el uso de JMulticard, no se usa esta biblioteca para firmar, ni en la firma local de documentos ni en las firmas dentro de un tr\u00e1mite web, en donde se utilizar\u00e1 el mismo controlador que utilice el navegador web utilizado. La \u00fanica excepci\u00f3n a esto es cuando, al abrir AutoFirma, se selecciona expresamente la opci\u00f3n \u201cContinuar con DNIe\u201d. Se recomienda mantener activado JMulticard por defecto, pero puede plantearse modificar esta configuraci\u00f3n seg\u00fan el uso habitual de firma. Mant\u00e9ngalo activado cuando habitualmente: No utilice tarjetas para firmar. Use tarjetas inteligentes o utilice el DNIe y tarjetas de la FNMT. Mant\u00e9ngalo desactivado e instale los controladores oficiales de su tarjeta cuando habitualmente: Utilice una nueva versi\u00f3n de DNIe o tarjeta inteligente y haya comprobado que AutoFirma no funciona correctamente con ellas. Utilice tarjetas distintas a DNIe y tarjetas de la FNMT. JMulticard no impedir\u00e1 su uso, pero s\u00ed puede alterar su comportamiento, por ejemplo, impidiendo que el controlador guarde en cach\u00e9 el PIN del usuario para reutilizarlo en firmas consecutivas. Realice los tr\u00e1mites web desde Firefox y advierta que se producen problemas al firmar con su tarjeta (puede ocurrir con versiones antiguas de tarjetas de la FNMT). La biblioteca JMulticard pedir\u00e1 el PIN de las tarjetas siempre que lo requiera, lo que puede suponer insertarlo por cada documento de firma en los procesos de firma masiva. Para evitar esto, el propio di\u00e1logo de inserci\u00f3n de contrase\u00f1a ofrece al usuario la posibilidad de seleccionar que se recuerde la contrase\u00f1a durante la sesi\u00f3n de firma. Esta opci\u00f3n, sin embargo, podr\u00eda no funcionar en tr\u00e1mites web (seg\u00fan la integraci\u00f3n realizada del tr\u00e1mite y el navegador del usuario). En esos casos, se seguir\u00e1 pidiendo la contrase\u00f1a por cada documento. Este comportamiento podr\u00eda corregirse con el uso del controlador de oficial de la tarjeta, aunque esto puede conllevar otros inconvenientes (necesidad de tener instalado el controlador, posibles incompatibilidades de arquitectura, posibles problemas de conexi\u00f3n con el dispositivo, etc.). El administrador de entornos gestionados podr\u00eda activar o desactivar el uso de JMulticard seg\u00fan el uso que estime que van a hacer sus usuarios de la aplicaci\u00f3n. Por ejemplo, si disponen de tarjeta de funcionario/empleado no compatible con JMulticard, podr\u00edan optar para desactivarlo. Para hacer esto pueden modificar esta configuraci\u00f3n de AutoFIrma tal como el resto de sus opciones. Comunicaci\u00f3n con servicios externos Cuando AutoFirma se comunica con servicios externos, por ejemplo, para comprobar si existe una nueva versi\u00f3n o para la comunicaci\u00f3n con el navegador web a trav\u00e9s del servidor intermedio (consulte el apartado \u201cCompatibilidad con dispositivos m\u00f3viles y AutoFirma\u201d del manual \u201cMCF_manual-integrador_ES\u201d para m\u00e1s informaci\u00f3n), se utiliza la configuraci\u00f3n de proxy de red establecida en AutoFirma y el almac\u00e9n de confianza de la JRE con la cual se ejecute la aplicaci\u00f3n. Para saber m\u00e1s sobre la configuraci\u00f3n del proxy de red en AutoFirma consulte la ayuda integrada de AutoFirma (para la configuraci\u00f3n a trav\u00e9s de interfaz gr\u00e1fica) o las opciones de configuraci\u00f3n referentes al proxy en el apartado \u201c 6.4.1 Opciones Generales \u201d (para la configuraci\u00f3n de la aplicaci\u00f3n por parte de un administrador). En el caso de los certificados de confianza, AutoFirma utilizar\u00e1 el almac\u00e9n de confianza de la JRE instalada junto a la propia aplicaci\u00f3n (en las instalaciones de Windows o macOS) o el almac\u00e9n de confianza de la JRE instalada en el sistema que se utilice para ejecutarla (en el caso de Linux). Cuando AutoFirma intente acceder a un recurso de red o servicio externo sobre una comunicaci\u00f3n SSL, rechazar\u00e1 por defecto la conexi\u00f3n en caso de que la conexi\u00f3n se cifrase utilizando un certificado SSL emitido por un prestador distinto a los incluidos en el almac\u00e9n de confianza o cuando fuese expedido para un dominio distinto al que se intenta acceder. Esta medida de seguridad es necesaria para evitar ataques de seguridad que redireccionen las peticiones del cliente a servidores inseguros. Sin embargo, es posible que un usuario necesite hacer uso de aplicaciones web desplegadas en dominios con certificados no reconocidos por Java, por ejemplo, porque sea un certificado emitido por un prestador s\u00f3lo reconocido a nivel nacional o porque se trate de una aplicaci\u00f3n o un entorno de pruebas. En estos casos, el usuario podr\u00eda desactivar la verificaci\u00f3n del certificado SSL desde el panel de preferencias de AutoFirma. < Para evitar problemas de conexi\u00f3n, aseg\u00farese de cifrar su comunicaci\u00f3n SSL con certificados reconocidos por defecto por Java. En caso contrario, el usuario o el administrador de los equipos deber\u00e1n incluir los certificados de la entidad emisora del certificado SSL en el almac\u00e9n de confianza de la JRE utilizada. Para facilitar el despliegue a las entidades que utilizan certificados SSL emitidos por autoridades espa\u00f1olas, en el almac\u00e9n de confianza de las JRE con las que se distribuyen las versiones de Windows y macOS se incluyen por defecto los certificados ra\u00edces de los siguientes prestadores: Agencia de Tecnolog\u00eda y Certificaci\u00f3n Electr\u00f3nica (ACCV) F\u00e1brica Nacional de Moneda y Timbre (FNMT) Firma Profesional (FNMT) As\u00ed pues, AutoFirma permitir\u00e1 por defecto la conexi\u00f3n con los servicios desplegados sobre conexiones SSL construidas con certificados de estos prestadores. Esta lista de prestadores podr\u00e1 variar en futuras versiones de AutoFirma seg\u00fan las solicitudes realizadas por los propios prestadores o entidades p\u00fablicas que utilicen sus certificados. Requisito indispensable para incorporar un nuevo prestador a esta lista es que se trate de un prestador reconocido por el Ministerio de Industria, Comercio y Turismo. Instalaci\u00f3n La instalaci\u00f3n de AutoFirma en el sistema del usuario se asemeja a la instalaci\u00f3n de cualquier otra aplicaci\u00f3n. Sin embargo, el proceso de instalaci\u00f3n incluye un paso de vital importancia para la compatibilidad de AutoFirma con las aplicaciones web que integren procesos de firma con el Cliente @firma. La comunicaci\u00f3n entre una p\u00e1gina web y AutoFirma se puede realizar de varias maneras, siendo la principal a trav\u00e9s de WebSocket por medio de un canal cifrado mediante certificado SSL generado en la m\u00e1quina local durante el proceso de instalaci\u00f3n. Para que sea posible la comunicaci\u00f3n entre el navegador web y AutoFirma, ser\u00e1 necesario que durante la instalaci\u00f3n se genere el par de claves del certificado, que este se almacene en disco y que el certificado generado sea dado de alta en los almacenes de confianza de los navegadores del sistema. Debido a las medidas de seguridad establecidas por cada navegador web, es posible que esto implique la aparici\u00f3n de un di\u00e1logo gr\u00e1fico de seguridad en el que se debe conceder permisos para realizar esta operaci\u00f3n o insertar la contrase\u00f1a del almac\u00e9n o del usuario administrador del sistema. El proceso de instalaci\u00f3n guarda el almac\u00e9n de claves generado en el directorio \u201c .afirma \u201d dentro del directorio del usuario que instal\u00f3 la aplicaci\u00f3n. El nombre del fichero de trazas se almacena en ese mismo directorio con el nombre \u201c AUTOFIRMA_CONFIGURATOR.afirma.log.xml \u201d. En el caso de Linux y macOS, la instalaci\u00f3n se realiza con el usuario administrador y el log se guarda en el directorio temporal del sistema o, si no se puede ah\u00ed, en \u201c /var/tmp \u201d para facilitar su acceso. Microsoft Windows Instalador EXE La instalaci\u00f3n de AutoFirma sobre Microsoft Windows debe ser realizada por un usuario con permisos de administrador. Esta aplicaci\u00f3n de instalaci\u00f3n se distribuye con el nombre \u201cAutoFirma_W_vX.Y.Z_installer.exe\u201d, donde X, Y y Z son los n\u00fameros de versi\u00f3n y W, la arquitectura de sistema para la que est\u00e1 preparada. Por ejemplo, \u201cAutoFirma_32_v1.8.0_installer.exe\u201d se corresponder\u00eda con el instalador de AutoFirma versi\u00f3n 1.8.0 para sistema de 32bits. AutoFirma es compatible con Windows 7 o superior en 32 y 64 bits (x86 o x64). Una vez instalada, puede usarse desde pr\u00e1cticamente cualquier navegador Web. Los navegadores oficialmente soportados son: Microsoft Internet Explorer 8 y superiores Google Chrome 46 o superior Mozilla Firefox 41.0.2 o superior Microsoft Edge v60 o superior AutoFirma puede funcionar correctamente con otros navegadores, pero no se ofrece soporte sobre ellos. El uso de versiones de Internet Explorer anteriores a la 11 (o la versi\u00f3n 11 en modo de compatibilidad con una versi\u00f3n anterior) requiere que el despliegue del Cliente @firma permita la comunicaci\u00f3n a trav\u00e9s de servidor intermedio. Consulte el manual del integrador del Cliente @firma para m\u00e1s detalles. AutoFirma se distribuye en versiones de 32 y 64 bits para Windows. Esta diferenciaci\u00f3n afecta \u00fanicamente a la cantidad de recursos del sistema que la aplicaci\u00f3n es capaz de utilizar. Si se desea utilizar AutoFirma para la generaci\u00f3n de firmas de ficheros grandes se deber\u00e1 usar la versi\u00f3n de 64 bits de AutoFirma. Al ejecutar el instalador, se mostrar\u00e1 una pantalla de bienvenida y se guiar\u00e1 al usuario a trav\u00e9s de unos sencillos pasos: < Al pulsar sobre el bot\u00f3n \u201cSiguiente >\u201d seremos redirigidos a la pantalla de licencia de la aplicaci\u00f3n. < En esta pantalla, el usuario puede leer el texto de licencia de AutoFirma. Para continuar con el proceso de instalaci\u00f3n es necesario pulsar el bot\u00f3n \u201cAcepto\u201d, tras lo cual se mostrar\u00e1 la pantalla de configuraci\u00f3n de la ruta de instalaci\u00f3n. < Puede dejar la ruta que se le muestra por defecto (recomendado) o seleccionar cualquier otra ubicaci\u00f3n. En caso de modificar el directorio por defecto, aseg\u00farese de instalar AutoFirma en un directorio propio y no en uno compartido con m\u00e1s aplicaciones o documentos. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se mostrar\u00e1 la pantalla de configuraci\u00f3n de las opciones avanzadas de integraci\u00f3n. < Las opciones de integraci\u00f3n de AutoFirma que pueden configurarse son: Agregar al men\u00fa inicio: Al activarlo, se crear\u00e1 un submen\u00fa en el men\u00fa inicio de Windows con accesos directos a AutoFirma y a su desinstalador. Crear acceso directo en el escritorio: Al activarlo, se crear\u00e1 un acceso directo en el escritorio de Windows. Configurar Firefox para que conf\u00ede en los certificados ra\u00edz del sistema: Al activarlo, se modificar\u00e1 la configuraci\u00f3n de Firefox para que conf\u00ede en los certificados SSL expedidos por los prestadores de confianza del sistema, sin necesidad de que estos prestadores est\u00e9n dados de alta en el almac\u00e9n confianza del navegador. La extracci\u00f3n y copia de ficheros al sistema se iniciar\u00e1 al pulsar el bot\u00f3n \u201cInstalar\u201d. < Una vez finalizada la copia de ficheros, se instalar\u00e1 un certificado de confianza SSL generado localmente en su almac\u00e9n local de Windows. ADVERTENCIA : El proceso de instalaci\u00f3n afecta a los perfiles de Mozilla Firefox y a la configuraci\u00f3n de Google Chrome. Estos navegadores se cerrar\u00e1n autom\u00e1ticamente durante el proceso de instalaci\u00f3n desatendido mediante el instalador MSI. Si se utiliza el instalador EXE, ser\u00e1 necesario que el usuario cierre manualmente estos navegadores. En el caso de la instalaci\u00f3n con el instalar EXE, tenga en cuenta que los procesos de los navegadores pueden tardar un tiempo en finalizar despu\u00e9s de haber cerrado la ventana de la aplicaci\u00f3n. Si vuelve a aparecer el di\u00e1logo solicit\u00e1ndole que cierre la aplicaci\u00f3n, compruebe que no se encuentre abierta y espere unos segundos antes de pulsar el bot\u00f3n para continuar con el proceso. T\u00e9ngase en cuenta que el navegador Google Chrome puede quedar abierto incluso despu\u00e9s de cerrar su ventana. En esos casos, aparecer\u00e1 un icono en el \u00e1rea de notificaciones del escritorio del usuario y deber\u00e1 cerrarse a trav\u00e9s de la opci\u00f3n proporcionada en el men\u00fa contextual de este icono. Al completarse el instalador, se mostrar\u00e1 el mensaje de \u201cCompletado\u201d. < Al pulsar el bot\u00f3n \u201cSiguiente\u201d, se mostrar\u00e1 el resultado de la instalaci\u00f3n. < Una vez completada la instalaci\u00f3n, las aplicaciones Web que integren el proceso de firma con el Cliente @firma podr\u00e1n usar su versi\u00f3n instalada de AutoFirma para firmar. Durante la ejecuci\u00f3n de AutoFirma, es posible que este solicite permisos para acceder a la red. Consulte el apartado \uf0b7 KEYSTORE_PATHPermite indicar si se desea proporcionar un almac\u00e9n de confianza distinto al generado en una instalaci\u00f3n normal. La contrase\u00f1a para este almac\u00e9n debe ser obligatoriamente \u201c654321\u201d para su correcto funcionamiento. En el valor debe indicarse la ruta absoluta del almac\u00e9n que se quiere proporcionar. El archivo debe de existir en la ruta que se proporciona, en caso contrario, la instalaci\u00f3n no se realizar\u00e1. Este par\u00e1metro debe de usarse junto con el par\u00e1metro CERTIFICATE_PATH, donde se indicar\u00e1 el certificado a instalar. En caso de que no se usen conjuntamente, no se realizar\u00e1 la instalaci\u00f3n. Las rutas absolutas que se indiquen en ambos par\u00e1metros deben indicarse con barra invertida (\u2018\\). El administrador tambi\u00e9n podr\u00eda instalar AutoFirma normalmente en un equipo y utilizar el almac\u00e9n y certificado generados para utilizarlos en otras instalaciones. Ejemplo:Instalaci\u00f3n con almac\u00e9n y certificados proporcionados por el administrador:msiexec /i \"AutoFirma_installer.msi\" /quiet KEYSTORE_PATH=\"C:\\pruebas\\almacen_prueba.pfx\" CERTIFICATE_PATH=\"C:\\pruebas\\certificado_prueba.cer\" CERTIFICATE_PATHPermite indicar si se desea proporcionar un certificado distinto generado en una instalaci\u00f3n normal. En el valor debe indicarse la ruta absoluta del certificado que se quiere proporcionar. El archivo debe de existir en la ruta que se proporciona, en caso contrario, la instalaci\u00f3n no se realizar\u00e1. Este par\u00e1metro debe de usarse junto con el par\u00e1metro KEYSTORE_PATH, donde se indicar\u00e1 el almac\u00e9n de confianza a instalar. En caso de que no se usen conjuntamente, no se realizar\u00e1 la instalaci\u00f3n. Las rutas absolutas que se indiquen en ambos par\u00e1metros deben indicarse con barra invertida (\u2018\\). El administrador tambi\u00e9n podr\u00eda instalar AutoFirma normalmente en un equipo y utilizar el almac\u00e9n y certificado generados para utilizarlos en otras instalaciones. Ejemplo:Instalaci\u00f3n con almac\u00e9n y certificados proporcionados por el administrador:msiexec /i AutoFirma_installer.msi /quiet KEYSTORE_PATH=\"C:\\pruebas\\almacen_prueba.pfx\" CERTIFICATE_PATH=\"C:\\pruebas\\certificado_prueba.cer\" Permisos adicionales para obtener m\u00e1s informaci\u00f3n. Desinstalaci\u00f3n La desinstalaci\u00f3n de Autofirma puede realizarse desde la ventana \u201cProgramas y caracter\u00edsticas\u201d del de \u201cPanel de control\u201d de Windows. < Una vez lanzado, el desinstalador presenta un sencillo asistente: < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se mostrar\u00e1 la opci\u00f3n de desinstalaci\u00f3n. < Al pulsar el bot\u00f3n de \u201cDesinstalar\u201d se iniciar\u00e1 el proceso de desinstalaci\u00f3n. < ADVERTENCIA : El proceso de desinstalaci\u00f3n afecta a los perfiles de Mozilla Firefox y a la configuraci\u00f3n de Google Chrome. Estos navegadores se cerrar\u00e1n autom\u00e1ticamente durante el proceso de desinstalaci\u00f3n desatendido mediante el instalador MSI. Si se utiliza el instalador EXE, ser\u00e1 necesario que el usuario cierre manualmente estos navegadores. En el caso de haberse instalado la aplicaci\u00f3n con el instalador EXE, tenga en cuenta que los procesos de estos navegadores pueden tardar un tiempo en finalizar despu\u00e9s de haber cerrado la ventana de la aplicaci\u00f3n. Si vuelve a aparecer el di\u00e1logo solicit\u00e1ndole que cierre la aplicaci\u00f3n, compruebe que no se encuentre abierta y espere unos segundos antes de pulsar el bot\u00f3n para continuar con el proceso. Compruebe tambi\u00e9n que el navegador Google Chrome no muestra un icono en el \u00e1rea de notificaciones del escritorio del usuario y, en caso de que se muestre, cierre la aplicaci\u00f3n a trav\u00e9s de la opci\u00f3n proporcionada en el men\u00fa contextual de este icono. Cuando el proceso termina, la aplicaci\u00f3n ha sido correctamente desinstalada de Windows. < Despliegue masivo de la aplicaci\u00f3n (Instalador MSI) AutoFirma tambi\u00e9n se distribuye en forma de instalador MSI (32 y 64bits) orientado a su despliegue masivo por parte de un administrador que gestione las aplicaciones de un conjunto de usuarios. En caso de existir versiones previas de AutoFirma instaladas en los equipos de los usuarios, se recomienda proceder a la desinstalaci\u00f3n de las mismas antes de instalar la nueva versi\u00f3n. Si se instalase AutoFirma como parte de un despliegue masivo y el usuario hubiese instalado AutoFirma (mediante su instalador EXE) en el mismo equipo, es posible que ambas versiones convivan en el equipo, aunque s\u00f3lo la \u00faltima atender\u00eda las peticiones realizadas mediante protocolo. Sin embargo, al desinstalar una de estas versiones, es posible que la otra dejase de funcionar. El instalador MSI realiza la instalaci\u00f3n silenciosa en el equipo de los usuarios. El administrador debe asegurarse, en cualquier caso, de que el proceso de instalaci\u00f3n no se realiza mientras los usuarios trabajan en sus equipos, ya que los navegadores Chrome y Firefox se cerrar\u00e1n durante la instalaci\u00f3n/desinstalaci\u00f3n. Para realizar la instalaci\u00f3n silenciosa mediante consola, un usuario administrador puede emplear el comando: msiexec /i \"_RUTA_\\AutoFirma_installer.msi\" /quiet Para su desinstalaci\u00f3n, se emplear\u00eda este otro: msiexec /x \"_RUTA_\\AutoFirma_installer.msi\" /quiet Consulte el manual de su software de instalaci\u00f3n masiva de aplicaciones para saber c\u00f3mo realizar el despliegue sobre m\u00faltiples m\u00e1quinas. Par\u00e1metros de configuraci\u00f3n El instalador MSI de AutoFirma soporta los siguientes par\u00e1metros para adecuar la instalaci\u00f3n a los requisitos del organismo: CREATE_ICON Permite indicar si se desea que se cree el icono de AutoFirma en el escritorio del usuario. Si se indica el valor \u201cfalse\u201d el icono no se crear\u00e1. En cualquier otro caso, s\u00ed se crear\u00e1. Ejemplo: Para una que no se cree el icono en el escritorio de los usuarios: msiexec /i \"AutoFirma_installer.msi\" /quiet CREATE_ICON=\"false\" FIREFOX_SECURITY_ROOTS Permite indicar si se desea configurar Firefox para que conf\u00ede en los certificados ra\u00edz del almac\u00e9n entidades de confianza de Windows. Si se indica el valor \u201ctrue\u201d, se configurar\u00e1 esta opci\u00f3n de Firefox. En cualquier otro caso, no se modificar\u00e1 la configuraci\u00f3n. Ejemplo: Para una que Firefox conf\u00ede en los certificados ra\u00edz del sistema: msiexec /i \"AutoFirma_installer.msi\" /quiet FIREFOX_SECURITY_ROOTS=\"true\" KEYSTORE_PATH Permite indicar si se desea proporcionar un almac\u00e9n de confianza distinto al generado en una instalaci\u00f3n normal. La contrase\u00f1a para este almac\u00e9n debe ser obligatoriamente \u201c654321\u201d para su correcto funcionamiento. En el valor debe indicarse la ruta absoluta del almac\u00e9n que se quiere proporcionar. El archivo debe de existir en la ruta que se proporciona, en caso contrario, la instalaci\u00f3n no se realizar\u00e1. Este par\u00e1metro debe de usarse junto con el par\u00e1metro CERTIFICATE_PATH, donde se indicar\u00e1 el certificado a instalar. En caso de que no se usen conjuntamente, no se realizar\u00e1 la instalaci\u00f3n. Las rutas absolutas que se indiquen en ambos par\u00e1metros deben indicarse con barra invertida (\u2018\\). El administrador tambi\u00e9n podr\u00eda instalar AutoFirma normalmente en un equipo y utilizar el almac\u00e9n y certificado generados para utilizarlos en otras instalaciones. Ejemplo: Instalaci\u00f3n con almac\u00e9n y certificados proporcionados por el administrador: msiexec /i \"AutoFirma_installer.msi\" /quiet KEYSTORE_PATH=\"C:\\pruebas\\almacen_prueba.pfx\" CERTIFICATE_PATH=\"C:\\pruebas\\certificado_prueba.cer\" CERTIFICATE_PATH Permite indicar si se desea proporcionar un certificado distinto generado en una instalaci\u00f3n normal. En el valor debe indicarse la ruta absoluta del certificado que se quiere proporcionar. El archivo debe de existir en la ruta que se proporciona, en caso contrario, la instalaci\u00f3n no se realizar\u00e1. Este par\u00e1metro debe de usarse junto con el par\u00e1metro KEYSTORE_PATH, donde se indicar\u00e1 el almac\u00e9n de confianza a instalar. En caso de que no se usen conjuntamente, no se realizar\u00e1 la instalaci\u00f3n. Las rutas absolutas que se indiquen en ambos par\u00e1metros deben indicarse con barra invertida (\u2018\\). El administrador tambi\u00e9n podr\u00eda instalar AutoFirma normalmente en un equipo y utilizar el almac\u00e9n y certificado generados para utilizarlos en otras instalaciones. Ejemplo: Instalaci\u00f3n con almac\u00e9n y certificados proporcionados por el administrador: msiexec /i AutoFirma_installer.msi /quiet KEYSTORE_PATH=\"C:\\pruebas\\almacen_prueba.pfx\" CERTIFICATE_PATH=\"C:\\pruebas\\certificado_prueba.cer\" Permisos adicionales Es probable que despu\u00e9s de la instalaci\u00f3n de AutoFirma, al ejecutarlo como aplicaci\u00f3n de escritorio o como parte de un proceso de firma Web, la m\u00e1quina virtual de Java instalada junto con AutoFirma solicite permisos para el acceso a Internet pasando por el Firewall de Windows. Es necesario conceder estos permisos para que AutoFirma pueda ejecutar tareas propias de su funcionamiento habitual, como son la b\u00fasqueda de actualizaciones o la comunicaci\u00f3n con el navegador Web en los procesos de firma web. En el caso de un despliegue masivo de AutoFirma, ser\u00eda necesario que el administrador del sistema concediese estos permisos para el ejecutable \u201cjavaw.exe\u201d del JRE residente en el directorio de instalaci\u00f3n de AutoFirma. Linux La instalaci\u00f3n de AutoFirma en Linux debe ser realizada por un usuario con permisos de administrador. Se distribuyen varias versiones del instalador de AutoFirma para Linux: AutoFirma_X.Y.Z.deb : Instalador DEB para distribuciones derivadas de Debian/Ubuntu. autofirma-X.Y.Z-1.noarch_FEDORA.rpm : Instalador RPM para distribuciones derivadas de RedHat/Fedora. autofirma-X.Y.Z-1.noarch_SUSE.rpm : Instalador RPM para distribuciones derivadas de SUSE. NOTA: Se han encontrado problemas de compatibilidad con el Firefox por defecto instalado con el sistema operativo con el entorno KDE. En este caso, Firefox no atiende las llamadas realizadas por la p\u00e1gina para que abra la aplicaci\u00f3n. Se recomienda la instalaci\u00f3n del Firefox oficial de la web de Mozilla. En los nombres anteriores, las letras X, Y y Z (opcional) son los n\u00fameros de versi\u00f3n. Por ejemplo \u201cAutoFirma_1.8.deb\u201d corresponder\u00eda a AutoFirma versi\u00f3n 1.8 para distribuciones Ubuntu/Debian. Todos los instaladores incluyen la misma versi\u00f3n de AutoFirma, pero cada uno de ellos est\u00e1 preparado para la instalaci\u00f3n en un conjunto distinto de distribuciones de Linux. La diferencia entre los dos instaladores RPM son las dependencias declaradas, dado que las NSS Tools se encuentran con distinto nombre en los repositorios por defecto de algunas distribuciones. Para poder ejecutar AutoFirma son necesarias las siguientes dependencias, as\u00ed que estas se comprueban durante el proceso de instalaci\u00f3n: JRE (Java Runtine Environment) de Oracle u OpenJDK (versi\u00f3n 11 o superior). Biblioteca NSS Tools. El funcionamiento de AutoFirma esta verificado en distribuciones Ubuntu, Fedora y OpenSuse. Una vez instalada, puede usarse como aplicaci\u00f3n de escritorio e invocarse desde los navegadores web Mozilla Firefox y Google Chrome. Hay dos opciones de instalaci\u00f3n: por l\u00ednea de comandos y desde la interfaz de escritorio. La instalaci\u00f3n por ambos medios dejar\u00e1 la aplicaci\u00f3n instalada por defecto en el directorio: /usr/lib/AutoFirma Instalador DEB Instalaci\u00f3n por l\u00ednea de comandos del instalador DEB Para instalaci\u00f3n por l\u00ednea de comandos, en una consola ejecutaremos: sudo dpkg \u2013i RUTA_INSTALABLE_AUTOFIRMA Donde RUTA_INSTALABLE_AUTOFIRMA es la ruta al instalador correspondiente a la distribuci\u00f3n escogida. Si no tenemos instaladas las dependencias anteriormente listadas, se nos mostrar\u00e1n mensajes de advertencia al respecto. En caso de ser as\u00ed, podremos instalar estas bibliotecas con el comando: sudo apt-get \u2013f install Despu\u00e9s de esto, se debe volver a ejecutar el comando de instalaci\u00f3n de AutoFirma para asegurar su correcta instalaci\u00f3n: sudo dpkg \u2013i RUTA_INSTALABLE_AUTOFIRMA Instalaci\u00f3n de Oracle Java con el fichero tar.gz de Oracle Si se tuviese Oracle Java instalado en el sistema mediante el fichero tar.gz de la web de Oracle, la JRE no habr\u00e1 quedado registrada en el gestor de paquetes. En ese caso, cuando se intente instalar AutoFirma, el gestor de paquetes considerar\u00e1 que no se cumplen los requisitos necesarios y se negar\u00e1 a instalarlo. Para forzar al uso de la JRE de Oracle se debe: Instalar la biblioteca \u201clibnss3-tools\u201d. Esta biblioteca es requisito indispensable de la aplicaci\u00f3n: sudo apt-get install libnss3-tools Configurar la variable JAVA_HOME con la JRE instalada y su directorio \u201cbin\u201d como parte del PATH del sistema. Esto se puede hacer, por ejemplo, editando el fichero \u201c/etc/environment\u201d y agregando a la variable PATH la ruta del directorio bin de Java y la nueva variable: PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/java/jdk-11.0.8/bin\" JAVA_HOME=\"/usr/java/jdk-11.0.8\" Podemos hacer que el sistema recargue la configuraci\u00f3n de este fichero (y as\u00ed no sea necesario reiniciarlo) con el comando: source /etc/environment Instalaci\u00f3n de muestra mediante el asistente de paquetes de Ubuntu/Guadalinex Para la instalaci\u00f3n mediante el asistente de paquetes, se debe hacer doble clic en el fichero de la distribuci\u00f3n (.deb). Se abrir\u00e1 una ventana similar a la siguiente. < Se debe pulsar el bot\u00f3n instalar, que se encuentra arriba a la derecha. Si no se tienen permisos de administrador, el sistema solicitar\u00e1 la clave de \u201cs\u00faper usuario\u201d para poder realizar la instalaci\u00f3n. < Si no ha ocurrido ning\u00fan problema, se mostrar\u00e1 un mensaje de confirmaci\u00f3n. < Desinstalaci\u00f3n del paquete DEB Para realizar la desinstalaci\u00f3n del sistema se puede utilizar el siguiente comando. sudo apt-get remove \u2013-purge autofirma Cuando el proceso termina, la aplicaci\u00f3n ha sido correctamente desinstalada del sistema. Instalador RPM Importaci\u00f3n de la clave p\u00fablica PGP del instalador Antes de instalar la aplicaci\u00f3n, se deber\u00eda agregar la clave p\u00fablica PGP del firmante del instalador al almac\u00e9n de confianza del sistema. La clave p\u00fablica PGP puede descargarse como un fichero \u201c.asc\u201d junto al archivo de instalaci\u00f3n. Para importar esta clave PGP a nuestro almac\u00e9n usaremos el comando: sudo rpm --import PUBLIC_KEY.asc En este comando, \u201cPUBLIC_KEY.asc\u201d ser\u00e1 el fichero con la clave p\u00fablica. Una vez importada la clave PGP, el sistema podr\u00e1 validar autom\u00e1ticamente la firma del instalador RPM. Instalaci\u00f3n por l\u00ednea de comandos del instalador RPM Para instalaci\u00f3n por l\u00ednea de comandos, en una consola ejecutaremos: sudo rpm -i autofirma-X.Y.Z.noarch.rpm En el comando anterior \u201cautofirma-X.Y.Z.noarch.rpm\u201d ser\u00e1 el nombre del fichero instalador apropiado para nuestro sistema. Instalaci\u00f3n mediante el asistente de paquetes Tenga en cuenta que el uso de un asistente de paquetes tambi\u00e9n puede requerir que se importe la clave PGP del firmante del instalador, para que as\u00ed el sistema lo valide. Si no se importase la clave del firmante, algunos gestores de paquetes dar\u00e1n un error durante el proceso de instalaci\u00f3n sin indicar el motivo del error. Para la instalaci\u00f3n mediante el asistente de paquetes, se debe hacer doble clic en el fichero de la distribuci\u00f3n (.rpm), tras lo cual se pedir\u00e1 la contrase\u00f1a de administrador. Una vez introducida, se abrir\u00e1 una ventana similar a la siguiente, seg\u00fan sea el gestor de paquetes del sistema. En el ejemplo mostrado, se puede ver el gestor de paquetes YaST. < Al pulsar el bot\u00f3n Aceptar, se inicia el proceso de instalaci\u00f3n: < Tras finalizar el proceso de instalaci\u00f3n, se mostrar\u00e1 una pantalla con el resultado del mismo: < Desinstalaci\u00f3n del paquete RPM Para realizar la desinstalaci\u00f3n del sistema se puede utilizar el siguiente comando. sudo rpm \u2013e autofirma Cuando el proceso termine, la aplicaci\u00f3n habr\u00e1 sido correctamente desinstalada del sistema. Actualizaci\u00f3n Actualizaci\u00f3n del paquete con RPM Para actualizar desde AutoFirma 1.8 a una posterior usaremos el comando: sudo rpm -U autofirma-X.Y.Z.noarch.rpm Sin embargo, cuando queremos actualizar desde una versi\u00f3n anterior a AutoFirma 1.8, deberemos indicar que durante la actualizaci\u00f3n no se ejecute el proceso de desinstalaci\u00f3n de esa versi\u00f3n, ya que inclu\u00eda un error que imped\u00eda el proceso. Para ello usaremos el comando: sudo rpm -U --nopreun --nopostun autofirma-X.Y.Z.noarch.rpm Cuando el proceso termine, la aplicaci\u00f3n habr\u00e1 sido correctamente actualizada. Apple macOS Instalador PKG La instalaci\u00f3n de AutoFirma en macOS debe realizarla un usuario con permisos de administrador. El archivo de instalaci\u00f3n se distribuye con el nombre \u201cAutoFirma_X.Y.Z.pkg\u201d, donde X, Y y Z (opcional) son los n\u00fameros de la versi\u00f3n. Por ejemplo, \u201cAutoFirma_1.6.pkg\u201d corresponder\u00eda a AutoFirma versi\u00f3n 1.6. AutoFirma es compatible con las versiones de macOS Sierra y superiores. Los navegadores compatibles son Apple Safari, Google Chrome y Mozilla Firefox. Para la instalaci\u00f3n de la aplicaci\u00f3n, se debe hacer doble clic sobre el fichero. El sistema abrir\u00e1 el asistente que se encargar\u00e1 de realizar los pasos a seguir para la correcta instalaci\u00f3n de la aplicaci\u00f3n. < Para iniciar el proceso de instalaci\u00f3n, hay que pulsar el bot\u00f3n \u201cContinuar\u201d, tras lo que se nos mostrar\u00e1 el acuerdo de licencia. < Una vez le\u00edda la licencia del producto, se puede pulsar \u201cContinuar\u201d. En ese momento, se indicar\u00e1 que se debe aceptar la licencia. Al pulsar el bot\u00f3n \"Aceptar\u201d se acepta la licencia y contin\u00faa con la instalaci\u00f3n. En la siguiente pantalla se mostrar\u00e1 seleccionar la unidad en la que se almacenar\u00e1 la aplicaci\u00f3n: < En esta pantalla se debe seleccionar la unidad principal y pulsar \u201cContinuar\u201d para ver el detalle resumen del proceso de instalaci\u00f3n. < En esta pantalla se puede ver cu\u00e1nto espacio en disco ocupar\u00e1 la aplicaci\u00f3n. Al pulsar el bot\u00f3n \u201cInstalar\u201d, se comienza la instalaci\u00f3n del producto. Para completar la instalaci\u00f3n ser\u00e1 necesario indicar el nombre de usuario y contrase\u00f1a de un usuario con permisos de administrador, ya que ser\u00e1 necesario instalar certificados de confianza en el almac\u00e9n del sistema y Firefox. < En caso de detectarse que el navegador Mozilla Firefox est\u00e1 en ejecuci\u00f3n, se pedir\u00e1 al usuario que lo cierre para continuar con el proceso de instalaci\u00f3n. Finalmente, se informar\u00e1 del resultado de la instalaci\u00f3n. < Desinstalaci\u00f3n Para desinstalar la aplicaci\u00f3n basta con eliminar la carpeta que se gener\u00f3 en el directorio /Applications. Tambi\u00e9n es recomendable eliminar los certificados identificados como \u201cAutoFirma ROOT\u201d y \u201c127.0.0.1\u201d del llavero de macOS. Puede realizarse esto accediendo a la aplicaci\u00f3n \u201cAcceso a Llaveros\u201d, seleccion\u00e1ndose el llavero \u201cSistema\u201d y eliminando del listado los certificados mencionados. Gesti\u00f3n de AutoFirma Comprobaciones de nuevas versiones al inicio de la aplicaci\u00f3n AutoFirma siempre comprueba al arrancar si hay una versi\u00f3n m\u00e1s actual disponible para descarga desde la p\u00e1gina Web del proyecto para evitar que se realicen tr\u00e1mites de firma con una versi\u00f3n obsoleta o antigua que pudiese tener instalada el ciudadano. Es posible deshabilitar esta comprobaci\u00f3n de diversas maneras: Un usuario puede desactivar la actualizaci\u00f3n por medio de la opci\u00f3n \u201cBuscar actualizaciones al inicio\u201d en la pesta\u00f1a General del men\u00fa de preferencias de la aplicaci\u00f3n. Un usuario o administrador puede desactivar la actualizaci\u00f3n por medio del fichero de configuraci\u00f3n con la opci\u00f3n checkForUpdates. Consulte el apartado 6.2 Configuraci\u00f3n a trav\u00e9s de fichero para m\u00e1s informaci\u00f3n. Un usuario o administrador puede desactivar la actualizaci\u00f3n estableciendo, a nivel de sistema operativo, la siguiente variable de entorno AUTOFIRMA_AVOID_UPDATE_CHECK con el valor true. Es posible que sea necesario reiniciar el equipo para que la JVM detecte correctamente el nuevo valor de esta variable. En el caso de Windows, por ejemplo, esto ser\u00eda: < La inhabilitaci\u00f3n de las comprobaciones de actualizaci\u00f3n s\u00f3lo ser\u00eda recomendable en entornos controlados (corporativos, internos a una administraci\u00f3n, etc.) o cuando se sepa de problemas de incompatibilidad de las nuevas versiones con alguna aplicaci\u00f3n. Por regla general, siempre es conveniente descargar e instalar las \u00faltimas versiones disponibles. La URL a la que se conecta AutoFirma por defecto para comprobar la existencia de actualizaciones es: http://estaticos.redsara.es/comunes/autofirma/autofirma.version El c\u00f3digo de versi\u00f3n de AutoFirma 1.8 es: 13 En caso de detectarse una nueva versi\u00f3n, AutoFirma permitir\u00e1 al usuario abrir la p\u00e1gina de descarga de la aplicaci\u00f3n. La p\u00e1gina que se abrir\u00e1 por defecto es: http://firmaelectronica.gob.es/Home/Descargas.html Tanto la URL del c\u00f3digo de la versi\u00f3n m\u00e1s reciente de AutoFirma como la URL de descarga se pueden configurar mediante el fichero de configuraci\u00f3n. Esto es \u00fatil para evitar en entornos controlados que AutoFirma informe a los usuarios de las actualizaciones oficiales de la aplicaci\u00f3n y no sea hasta que los administradores comprueben su correcto funcionamiento cuando se les notifique y se les redirija a una web de descargas del propio organismo. Esto se realiza mediante las opciones updater.url.version y updater.url.site. Consulte el apartado 6.2 Configuraci\u00f3n a trav\u00e9s de fichero para m\u00e1s informaci\u00f3n. El administrador de red debe asegurar que los equipos de los usuarios tienen acceso a estas URL si se desea que sean los propios usuarios los encargados de identificar las nuevas versiones e instalarlas en sus equipos. Configuraci\u00f3n a trav\u00e9s de fichero AutoFirma permite que se configure a trav\u00e9s de un fichero importado desde la pesta\u00f1a General del panel de Preferencias de la aplicaci\u00f3n. Esta opci\u00f3n est\u00e1 orientada principalmente a su uso por parte de administradores que hagan despliegues de la aplicaci\u00f3n y que requieren que sus usuarios utilicen siempre unas propiedades concretas de firma. El fichero de configuraci\u00f3n debe tener como extensi\u00f3n \u201c.afconfig\u201d. Es importante notar que las propiedades establecidas a trav\u00e9s del men\u00fa de preferencias s\u00f3lo afectan a la ejecuci\u00f3n de la aplicaci\u00f3n en modo escritorio. En las operaciones de firma solicitadas desde un navegador web siempre se utilizar\u00e1 la configuraci\u00f3n de firma proporcionada por la aplicaci\u00f3n web. Excepci\u00f3n a esto es la configuraci\u00f3n de red (proxy y criterios de seguridad sobre los certificados SSL), que afectar\u00e1n a la ejecuci\u00f3n de la aplicaci\u00f3n en ambas modalidades. Este fichero no tiene porqu\u00e9 contener todas las propiedades que admite la aplicaci\u00f3n, puede contener s\u00f3lo aquellas que deseamos configurar. Si se importa un fichero que no define el valor de alguna propiedad, esta propiedad tendr\u00e1 asignada el valor por defecto de la aplicaci\u00f3n o, si se modific\u00f3 previamente, el valor que ya tuviese asignado. Las opciones que se podr\u00e1n configurar ser\u00e1n todas aquellas que pueden establecerse a trav\u00e9s del panel de preferencias de la aplicaci\u00f3n, adem\u00e1s de alguna opci\u00f3n adicional. El listado completo de opciones configurables aparece en el apartado 6.4 Opciones configurables . El fichero de configuraci\u00f3n en cuesti\u00f3n, ser\u00e1 un fichero PList, compuesto por un diccionario con el listado de claves y valores de las propiedades. Las claves siempre se designar\u00e1n mediante una cadena de texto y el valor puede ser una cadena (String) o un valor de tipo verdadero/falso (true/false). Este fichero PList puede firmarse con una firma en formato XAdES Enveloped. Si se delega en los usuarios la importaci\u00f3n del fichero de configuraci\u00f3n, puede pedir que comprueben el firmante del fichero con una herramienta externa como VALIDe para que confirmen que se firm\u00f3 con el certificado adecuado. Bloqueo de la configuraci\u00f3n Un uso interesante de la configuraci\u00f3n de la aplicaci\u00f3n entre los usuarios de un organismo o entidad es que permite bloquear las opciones que el usuario va a poder modificar. Hay opciones que son especialmente interesantes de fijar para que se apliquen a todas las firmas, como las pol\u00edticas de firma, y otras que no se pueden bloquear debido a que afectan en gran medida al contexto de cada firma, como el lugar de realizaci\u00f3n de la firma o si se quiere hacer visible la firma de los PDF. La configuraci\u00f3n de la aplicaci\u00f3n puede bloquearse por medio de la opci\u00f3n \u201cpreferencesUnprotected\u201d, como se describe en el apartado 6.4.6 Opciones no configurables desde la ventana de preferencias . Se indican aqu\u00ed las propiedades del panel de preferencias que el usuario va a poder seguir configurando, aunque se bloquee la configuraci\u00f3n general de la aplicaci\u00f3n: Pesta\u00f1a General No pedir confirmaci\u00f3n al cerrar la aplicaci\u00f3n No mostrar la pantalla inicial de DNIe y trabajar siempre con cualquier certificado Buscar actualizaciones al inicio Enviar estad\u00edsticas de uso de forma an\u00f3nima para ayudar a mejorar el uso de la aplicaci\u00f3n Validar confianza SSL Configuraci\u00f3n del proxy < Pesta\u00f1a Firmas PAdES Metadatos para firmas PAdES Firma visible < Pesta\u00f1a Firmas XAdES Metadatos de las firmas XAdES < Pesta\u00f1a Factura electr\u00f3nica Metadatos de las facturas electr\u00f3nicas Papel del firmante de la factura electr\u00f3nica < Firma del fichero de configuraci\u00f3n El fichero de configuraci\u00f3n deber\u00e1 estar firmado con una firma XAdES Enveloped y un certificado emitido por la autoridad intermedia definida por el Ministerio de Defensa en el momento de empaquetar la aplicaci\u00f3n AutoFirma para su distribuci\u00f3n. El administrador encargado de configurar y distribuir este fichero puede firmarlo con la propia herramienta AutoFirma. Los pasos para preparar la aplicaci\u00f3n para la firma de este fichero son: Disponer del certificado de firma en el almac\u00e9n prioritario configurado en la aplicaci\u00f3n o en el almac\u00e9n por defecto, si no se dispone del certificado en tarjeta criptogr\u00e1fica. Desde la pesta\u00f1a de configuraci\u00f3n \u201cGeneral\u201d de las preferencias de la aplicaci\u00f3n, configurar que los \u201cFicheros XML gen\u00e9ricos\u201d se firmen con firma \u201cXAdES\u201d. En la pesta\u00f1a \u201cFirma XAdES\u201d de las preferencias de la aplicaci\u00f3n, configurar que el formato de firma XAdES sea \u201cXAdES Enveloped\u201d. A continuaci\u00f3n, podr\u00e1 firmarse el fichero de configuraci\u00f3n normalmente, seleccionando como certificado de firma el configurado en el primer paso. Ejemplo de fichero de configuraci\u00f3n A continuaci\u00f3n se muestra el contenido de un fichero simple de configuraci\u00f3n: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <plist version=\"1.0\"> <dict> <key>cadesImplicitMode</key> <string>attached</string> <key>createHashAsBase64</key> <true/ > </dict> </plist> En este fichero se establece que las firmas CAdES contengan por defecto los datos firmados (cadesImplicitMode) y que las huellas digitales realizadas se generen en base 64 (createHashAsBase64). El resto de la configuraci\u00f3n del usuario permanecer\u00e1 tal como estaba en el momento de importar el fichero de configuraci\u00f3n. En este ejemplo, el fichero de configuraci\u00f3n no est\u00e1 firmado. Configuraci\u00f3n a trav\u00e9s del registro en Microsoft Windows Es com\u00fan que en los entornos controlados de usuarios se disponga de herramientas para el despliegue masivo de aplicaciones y que estas tambi\u00e9n permitan la configuraci\u00f3n del sistema alterando directamente el registro de Microsoft Windows. Cuando este es el caso, el administrador del sistema podr\u00e1 configurar el comportamiento de AutoFirma modificando diversas claves de registro. AutoFirma almacena en el registro de Windows todas las opciones de configuraci\u00f3n establecidas mediante el panel de preferencias o un fichero de configuraci\u00f3n importado. Concretamente, la configuraci\u00f3n de AutoFirma se almacena en la clave de registro: HKEY_CURRENT_USER\\Software\\JavaSoft\\Prefs\\es\\gob\\afirma\\standalone\\ui\\preferences Un administrador puede establecer a trav\u00e9s del registro todas las opciones declaradas en el apartado 6.4 Opciones configurables para determinar as\u00ed el comportamiento de AutoFirma. Opciones configurables Las opciones de configuraci\u00f3n que se pueden establecer mediante fichero o a trav\u00e9s del registro de Windows se presentan a continuaci\u00f3n, separadas seg\u00fan la pesta\u00f1a del panel de preferencias en la que se encuentran y reunidas en un apartado \u201cOpciones globales\u201d aquellas que no puede configurar directamente el usuario. Opciones Generales Clave Tipo Descripci\u00f3n omitAskOnClose true/false Evita la confirmaci\u00f3n al cerrar la aplicaci\u00f3n o no. Un valor de true en esta preferencia permitir\u00e1 cerrar la aplicaci\u00f3n sin ning\u00fan di\u00e1logo de advertencia. Un valor de false (por defecto) har\u00e1 que se muestre un di\u00e1logo para que el usuario confirme que realmente desea cerrar la aplicaci\u00f3n. hideDnieStartScreen true/false No mostrar la pantalla inicial de uso de DNIe. Un valor de true en esta preferencia hace que nunca se muestre la pantalla inicial que sugiere al usuario el uso directo del DNIe como almac\u00e9n de claves. Un valor de false (por defecto) har\u00e1 que se muestre esta pantalla al inicio siempre que se detecte un lector de tarjetas en el sistema. checkForUpdates true/false Buscar actualizaciones al iniciar la aplicaci\u00f3n. Un valor de true (por defecto) en esta preferencia hace que, al iniciar la aplicaci\u00f3n, se compruebe autom\u00e1ticamente si hay publicadas versiones m\u00e1s actuales. Un valor de false har\u00e1 que no se haga esta comprobaci\u00f3n. useAnalytics true/false Env\u00eda estad\u00edsticas de uso. El valor true (por defecto) hace que, al arrancar, la aplicaci\u00f3n env\u00ede de forma an\u00f3nima estad\u00edsticas de uso a Google Analytics . El valor false har\u00e1 que no se env\u00ede ning\u00fan dato. enabledJmulticard true/false Habilita el uso de JMulticard para la firma con DNIe y tarjetas CERES. El valor true (por defecto) hace que tanto al seleccionar \u201cUsar cualquier certificado\u201d en la pantalla principal como cuando se invoca a AutoFirma desde un navegador, se utilice JMulticard si el usuario selecciona un certificado en tarjeta CERES o DNIe. El valor false har\u00e1 que se utilicen los controladores oficiales de estas tarjetas para listar los certificados y firmar con ellos. signatureHashAlgorithm String Algoritmo de huella para la firma. Esta preferencia debe tener uno de estos valores: SHA1 SHA256 (Por defecto) SHA384 SHA512 defaultSignatureFormatPdf String Formato en el que se firmar\u00e1n los documentos PDF. Esta preferencia debe tener uno de estos valores: PAdES (Por defecto) CAdES XAdES defaultSignatureFormatOoxml String Formato en el que se firmar\u00e1n los documentos OOXML. Esta preferencia debe tener uno de estos valores: OOXML (Office Open XML) (Por defecto) CAdES XAdES defaultSignatureFormatFacturae String Formato en el que se firmar\u00e1n las facturas electr\u00f3nicas. Esta preferencia debe tener uno de estos valores: FacturaE (Por defecto) CAdES XAdES defaultSignatureFormatXml String Formato en el que se firmar\u00e1n los documentos XML. Esta preferencia debe tener uno de estos valores: XAdES (Por defecto) CAdES defaultSignatureFormatOdf String Formato en el que se firmar\u00e1n los documentos ODF (LibreOffice, OpenOffice.org\u2026). Esta preferencia debe tener uno de estos valores: ODF (Open Document Format) (Por defecto) CAdES XAdES defaultSignatureFormatBin String Formato en el que se firmar\u00e1n los ficheros binarios. Esta preferencia debe tener uno de estos valores: CAdES (Por defecto) XAdES confirmToSign true/false Solicitar confirmaci\u00f3n para firmar. El valor true (por defecto) har\u00e1 que antes de cada proceso de firma se muestre un di\u00e1logo de confirmaci\u00f3n, mientras que el valor false lo omitir\u00e1. showExpiredCerts true/false Permitir el uso de certificados caducados para firmar. El valor true mostrar\u00e1 estos certificados en el di\u00e1logo de selecci\u00f3n y permitir\u00e1 la firma con ellos, mientras que el valor false (por defecto) los omitir\u00e1. allowInvalidSignatures true/false Omitir la validaci\u00f3n de las firmas de entrada. El valor true omitir\u00e1 la validaci\u00f3n de las firmas, de tal forma que se podr\u00e1n cofirmar y contrafirmar firmas que se ha identificado que no son v\u00e1lidas (esta validaci\u00f3n no incluye la del certificado de firma). El valor false (por defecto), hace que se obvie la validez de las firmas. massiveOverride true/false Establece que, en las operaciones de firma masiva, se sobreescriban los ficheros que se encuentren en el directorio de salida con el mismo nombre que los nuevos ficheros que se van a guardar. El valor true sobreescribir\u00e1 los ficheros. El valor false (por defecto), cambiar\u00e1 el nombre del nuevo fichero agreg\u00e1ndole un n\u00famero entre par\u00e9ntesis cuando ya existiese un fichero con ese nombre en el directorio de salida. secureConnections true/false Comprobar la confianza de los certificados SSL. Si se deshabilita, se permitir\u00e1 conectar con servicios con un cifrado SSL realizado con certificados caducados, emitidos para otros dominios o expedidos por prestadores desconocidos. Puede ser necesario si usamos certificados SSL emitidos por algunos prestadores espa\u00f1oles, aunque, en ese caso, se recomienda introducir sus certificados de CA en el almac\u00e9n de confianza de la JRE. proxyType CUSTOM / Tipo de configuraci\u00f3n del proxy. Admite los valores: NONE: Sin proxy. SYSTEM: Configuraci\u00f3n del sistema. Esta opci\u00f3n podr\u00eda no heredar excepciones o la configuraci\u00f3n de seguridad para el acceso al servicio proxy. CUSTOM: Configuraci\u00f3n manual. En este caso, se deben configurar, al menos, las propiedades \u201cproxyHost\u201d y \u201cproxyPort\u201d. proxyHost String URL del servicio del servidor proxy. proxyPort String N\u00famero de puerto para la comunicaci\u00f3n con el servidor proxy. proxyUsername String Nombre de usuario con el que acceder al servidor proxy. proxyPassword String Contrase\u00f1a del usuario para la conexi\u00f3n con el servidor proxy. proxyExcludedUrls String Listado de nombres de dominios y direcciones IP, separados por comas (\u2018,\u2019) y en los que se puede usar asterisco (\u2018*\u2019) como comod\u00edn, para los que AutoFirma no deber\u00eda utilizar proxy. IMPORTANTE: Aqu\u00ed deber\u00edan incluirse las direcciones de nuestra intranet. De no hacerlo, es posible que AutoFirma no funcione correctamente en los tr\u00e1mites web desplegados en dominios de la intranet. Firmas PAdES (PDF) Clave Tipo Descripci\u00f3n padesPolicyIdentifier String Identificador de la pol\u00edtica de firma para PAdES. padesPolicyIdentifierHash String Huella digital, en Base64, del identificador de la pol\u00edtica de firma para PAdES. padesPolicyIdentifierHashAlgorithm String Algoritmo de la huella digital del identificador de la pol\u00edtica de firma para PAdES. Esta preferencia debe tener uno de estos valores: SHA1 (Por defecto) SHA-512 SHA-384 SHA-256 padesPolicyQualifier String Calificador de la pol\u00edtica de firma para PAdES. padesSignReason String Motivo de la firma en firmas PAdES. padesSignProductionCity String Ciudad de firma para firmas PAdES. padesSignerContact String Contacto del firmante en firmas PAdES. padesBasicFormat String Formato de firma PAdES. Esta preferencia debe tener uno de estos valores: PAdES-BES PAdES B\u00e1sico (Por defecto) padesObfuscateCertInfo true/false Omitir informaci\u00f3n del documento de identidad del usuario de la firma visible PDF. Si est\u00e1 establecido a true, se detectar\u00e1n los identificadores del usuario (n\u00famero de DNI, NIE, pasaporte, etc.) extra\u00eddos del certificado y se omitir\u00e1n en la firma visible PDF (s\u00f3lo en la presentaci\u00f3n visible, los datos del certificado ser\u00e1n los que correspondan). Si est\u00e1 a false (valor por defecto), no se codificar\u00e1 esta informaci\u00f3n. padesVisibleSignature true/false Si est\u00e1 establecido a true, establece por defecto que se pida al usuario que determine mediante di\u00e1logos gr\u00e1ficos los par\u00e1metros de una firma visible PDF y se inserte como tal en el documento. Si est\u00e1 a false (valor por defecto), se realizar\u00e1n firmas invisibles PDF. padesVisibleStamp true/false Si est\u00e1 establecido a true, establece por defecto que se pida al usuario que determine mediante di\u00e1logos gr\u00e1ficos los par\u00e1metros de una marca visible PDF (que podr\u00e1 agregarse a m\u00e1s de una p\u00e1gina). Esta marca es una imagen que se agregar\u00e1 al documento antes de ejecutar la firma. Si est\u00e1 a false (valor por defecto), no se permitir\u00e1 agregar esta imagen. Firmas CAdES Clave Tipo Descripci\u00f3n cadesPolicyIdentifier String Identificador de la pol\u00edtica de firma para CAdES. cadesPolicyIdentifierHash String Huella digital, en Base64, del identificador de la pol\u00edtica de firma para CAdES. cadesPolicyIdentifierHashAlgorithm String Algoritmo de la huella digital del identificador de la pol\u00edtica de firma para CAdES. Esta preferencia debe tener uno de estos valores: SHA1 (Por defecto) SHA-512 SHA-384 SHA-256 cadesPolicyQualifier String Calificador de la pol\u00edtica de firma para CAdES. cadesImplicitMode String Indica si la firma CAdES debe realizarse en modo impl\u00edcito ( attached ) (por defecto) o no ( detached ). cadesMultisignCosign true/false Indica que, por defecto, las multifirmas CAdES deben ser cofirmas. Esta opci\u00f3n es excluyente con el resto de opciones \u201ccadesMultisign\u201d. cadesMultisignCountersignLeafs true/false Indica que, por defecto, las multifirmas CAdES deben ser contrafirmas de los nodos hoja. Esta opci\u00f3n es excluyente con el resto de opciones \u201ccadesMultisign\u201d. cadesMultisignCountersignTree true/false Indica que, por defecto, las multifirmas CAdES deben ser contrafirmas de todo el \u00e1rbol de firma. Esta opci\u00f3n es excluyente con el resto de opciones \u201ccadesMultisign\u201d. Firmas XAdES Clave Tipo Descripci\u00f3n xadesPolicyIdentifier String Identificador de la pol\u00edtica de firma para XAdES. xadesPolicyIdentifierHash String Huella digital, en Base64, del identificador de la pol\u00edtica de firma para XAdES. xadesPolicyIdentifierHashAlgorithm String Algoritmo de la huella digital del identificador de la pol\u00edtica de firma para XAdES. Esta preferencia debe tener uno de estos valores: SHA1 (Por defecto) SHA-512 SHA-384 SHA-256 xadesPolicyQualifier String Calificador de la pol\u00edtica de firma para XAdES. xadesSignatureProductionCity String Ciudad en la que se realiza la firma. xadesSignatureProductionProvince String Provincia en la que se realiza la firma. xadesSignatureProductionPostalCode String C\u00f3digo postal en la que se realiza la firma. xadesSignatureProductionCountry String Pa\u00eds en la que se realiza la firma. xadesSignerClaimedRole String Cargo supuesto para el firmante. xadesSignFormat String Formato de las firmas XAdES. Esta preferencia debe tener uno de estos valores: XAdES Detached XAdES Enveloping (Por defecto) XAdES Enveloped xadesMultisignCosign true/false Indica que, por defecto, las multifirmas XAdES deben ser cofirmas. Esta opci\u00f3n es excluyente con el resto de opciones \u201cxadesMultisign\u201d. xadesMultisignCountersignLeafs true/false Indica que, por defecto, las multifirmas XAdES deben ser contrafirmas de los nodos hoja. Esta opci\u00f3n es excluyente con el resto de opciones \u201cxadesMultisign\u201d. xadesMultisignCountersignTree true/false Indica que, por defecto, las multifirmas XAdES deben ser contrafirmas de todo el \u00e1rbol de firma. Esta opci\u00f3n es excluyente con el resto de opciones \u201cxadesMultisign\u201d. Firmas Factura Electr\u00f3nica Clave Tipo Descripci\u00f3n facturaEPolicy String Versi\u00f3n de la pol\u00edtica de firma de factura electr\u00f3nica. Los valores posibles son: 3.0: Policita de firma 3.0. 3.1: Policita de firma 3.1 (por defecto). Esta propiedad configura el resto de propiedades de la pol\u00edtica de firma de factura cuando se establece desde la interfaz gr\u00e1fica. Al establecerlo mediante fichero de configuraci\u00f3n es necesario establecer tambi\u00e9n las siguientes 3 propiedades: facturaePolicyIdentifier, facturaePolicyIdentifierHash y facturaePolicyIdentifierHashAlgorithm facturaePolicyIdentifier String Establece el identificador de la pol\u00edtica de firma de factura electr\u00f3nica. Para configurar la pol\u00edtica de firma 3.0 se debe establecer el valor: http://www.facturae.es/politica de firma formato facturae/politica de firma formato facturae v3_0.pdf Para configurar la pol\u00edtica de firma 3.0 se debe establecer el valor: http://www.facturae.es/politica_ de_firma_formato_facturae/ politica_de_firma_formato_ facturae_v3_1.pdf facturaePolicyIdentifierHash String Establece la huella digital de la pol\u00edtica de firma de factura electr\u00f3nica. Para configurar la pol\u00edtica de firma 3.0 se debe establecer el valor: xmfh8D/Ec/hHeE1IB4zPd61zHIY= Para configurar la pol\u00edtica de firma 3.0 se debe establecer el valor: Ohixl6upD6av8N7pEvDABhEL6hM= facturaePolicyIdentifierHashAlgorithm String Algoritmo de la huella digital del identificador de la pol\u00edtica de firma de factura electr\u00f3nica. Para configurar las pol\u00edticas de firma 3.0 y 3.1 se debe establecer el valor: SHA1 facturaeSignatureProductionCity String Ciudad en la que se realiza la firma. facturaeSignatureProductionProvince String Provincia en la que se realiza la firma. facturaeSignatureProductionPostalCode String C\u00f3digo postal en el que se realiza la firma. facturaeSignatureProductionCountry String Pa\u00eds en el que se realiza la firma. facturaeSignerRole String Rol ejercido por el firmante en el proceso de firma. Debe tener uno de estos valores: Emisor (Por defecto) Receptor Tercero Opciones no configurables desde la ventana de preferencias Clave Tipo Descripci\u00f3n preferencesBlocked true/false Proteger cambios en preferencias. Un valor de true en esta preferencia indica que deben limitarse las opciones de configuraci\u00f3n mediante interfaz gr\u00e1fico, apareciendo de forma deshabilitada (solo para consulta). Un valor de false habilitar\u00e1 que cualquier opci\u00f3n de configuraci\u00f3n pueda ser alterada por parte del usuario mediante el interfaz gr\u00e1fico. createHashAsBase64 true/false Si est\u00e1 establecido a true (valor por defecto), se generan las huellas digitales de fichero en base64. Si es false, se generar\u00e1n en binario. createHashAlgorithm String Algoritmo de huella digital por defecto para la creaci\u00f3n de huellas digitales. Esta preferencia debe tener uno de estos valores: SHA1 SHA-512 (Por defecto) SHA-384 SHA-256 createHashCopyToClipBoard true/false Copiar huella al portapapeles. El valor true (por defecto) indica que, por defecto, se debe copiar al portapapeles del sistema el valor de huella generado. El valor false indica que no se copie. createHashFormat String Formato en el que almacenar la huella digital de un fichero. Esta preferencia debe tener uno de estos valores: hex: Codificada en hexadecimal. Valor por defecto. b64: Codificada en Base 64. bin: Binario sin codificar. createHashDirectoryAlgorithm String Algoritmo de huella digital por defecto para la creaci\u00f3n de huellas digitales de directorios. Esta preferencia debe tener uno de estos valores: SHA1 SHA-512 (Por defecto) SHA-384 SHA-256 createHashDirectoryRecursive true/false Procesar subdirectorios en la operaci\u00f3n de c\u00e1lculo de huella digital de directorios. El valor true (por defecto) hace que se procesen, mientras que el valor false configura que no se procesen. updater.url.version String URL remota del fichero que define el c\u00f3digo de versi\u00f3n de la versi\u00f3n m\u00e1s reciente de AutoFirma. Consulte el apartado \u201cComprobaciones de nuevas versiones al inicio de la aplicaci\u00f3n\u201d para m\u00e1s detalles. updater.url.site String URL de la p\u00e1gina web desde la que descargar las nuevas versiones de AutoFirma. Consulte el apartado \u201cComprobaciones de nuevas versiones al inicio de la aplicaci\u00f3n\u201d para m\u00e1s detalles. Obtenci\u00f3n de estad\u00edsticas con Google Analytics AutoFirma utiliza Google Analytics para recoger informaci\u00f3n acerca de su uso. Esta informaci\u00f3n se limita al hecho de haber ejecutado AutoFirma y la IP del equipo. En ning\u00fan momento se recoge informaci\u00f3n personal del usuario u otra informaci\u00f3n del equipo m\u00e1s que la IP asignada. A la informaci\u00f3n recabada s\u00f3lo puede acceder el grupo de trabajo del Cliente @firma y este se compromete a que su uso se limita a conocer el n\u00famero aproximado de usuarios de la herramienta. La obtenci\u00f3n de estos datos se realiza en segundo plano al ejecutarse AutoFirma y el resultado de su obtenci\u00f3n y env\u00edo no afecta al uso de la propia herramienta. As\u00ed pues, AutoFirma podr\u00eda no llegar a enviar los datos obtenidos, por ejemplo, por encontrarse detr\u00e1s de un proxy de red, sin que esto afecte a su funcionalidad. El usuario puede deshabilitar el env\u00edo de informaci\u00f3n a Google Analytics desde el panel de preferencias de la herramienta. Tambi\u00e9n se puede configurar que deje de enviarse esta informaci\u00f3n por medio de la variable de entorno \u201ces.gob.afirma.doNotSendAnalytics\u201d. En caso de establecer esta variable a \u201ctrue\u201d se deshabilitar\u00e1 el env\u00edo de informaci\u00f3n. En caso contrario, se seguir\u00e1 enviando. En caso de configurarse la mencionada variable, no se enviar\u00e1 ninguna informaci\u00f3n a Google Analytics, independientemente de que el usuario haya configurado o no el env\u00edo de los datos a trav\u00e9s del men\u00fa de preferencias de AutoFirma. Habilitar en Firefox la confianza en los certificados ra\u00edz del sistema Mozilla Firefox permite un modo de configuraci\u00f3n en Windows y macOS con el cual, adem\u00e1s de confiar en los certificados ra\u00edz de su almac\u00e9n de confianza, puede confiar tambi\u00e9n en los certificados en el almac\u00e9n de confianza del sistema. Habilitar esta configuraci\u00f3n implica diversas ventajas para el usuario: Puede instalar los certificados \u00fanicamente en el almac\u00e9n del sistema. No es necesario que los instale en el almac\u00e9n de confianza de Firefox En entornos en los datos de la cuenta del usuario se carga desde un servidor, no es necesario transferir los datos del almac\u00e9n de confianza de Firefox. La configuraci\u00f3n del almac\u00e9n de confianza de Firefox se puede establecer durante la instalaci\u00f3n de AutoFirma en Windows o mediante la opci\u00f3n de \u201cReparaci\u00f3n de la instalaci\u00f3n\u201d de la aplicaci\u00f3n en Windows o macOS. La opci\u00f3n de reparaci\u00f3n de la instalaci\u00f3n habilitar\u00e1 o deshabilitar\u00e1 esta opci\u00f3n seg\u00fan se haya marcado no la casilla de verificaci\u00f3n antes de iniciar el proceso de restauraci\u00f3n. < Problemas conocidos Al instalar AutoFirma falla la instalaci\u00f3n de los certificados de confianza SSL AutoFirma requiere permisos de administrador para ser instalado y para insertar el certificado de confianza SSL para el funcionamiento de la firma en los tr\u00e1mites online. Si falla el proceso de instalaci\u00f3n de los certificados, acceda al apartado de reparaci\u00f3n de la instalaci\u00f3n de AutoFirma (Men\u00fa \u201cHerramientas\u201d \u201cRestaurar la instalaci\u00f3n\u201d) y ejecute el proceso de reinstalaci\u00f3n. En el caso de que la instalaci\u00f3n de los certificados falle \u00fanicamente en Firefox, valore la el activar la confianza de Firefox en el almac\u00e9n del sistema (s\u00f3lo para sistemas Windows y macOS). Si no puede instalar AutoFirma o el certificado de confianza y no es usted el administrador del sistema, solicite al administrador de su sistema que realice la instalaci\u00f3n de la aplicaci\u00f3n. Al instalar AutoFirma en Windows se muestra el error: \u201cError abriendo archivo para escritura\u201d Es posible que durante la instalaci\u00f3n se le muestre un error como el que sigue: < Si ya ten\u00eda instalado AutoFirma, compruebe que este no se est\u00e1 ejecutando, en cuyo caso el instalador no podr\u00e1 sobrescribir los ficheros de instalaci\u00f3n. Cierre AutoFirma y pulse el bot\u00f3n reintentar. Si AutoFirma no se est\u00e1 ejecutando, es posible que el archivo en cuesti\u00f3n se encuentre bloqueado por una ejecuci\u00f3n o intento de instalaci\u00f3n previo. Reinicie su equipo y pruebe a instalar nuevamente la aplicaci\u00f3n. nuevamente la aplicaci\u00f3n. Al instalar AutoFirma en Linux a partir del paquete RPM con el gestor de paquetes del sistema se muestra el mensaje de error \u201cError interno\u201d Es posible que no se haya importado la clave PGP de firma en el almac\u00e9n de confianza. Siga las instrucciones del apartado 5.2.2.1 Importaci\u00f3n de la clave p\u00fablica PGP del instalador para la importaci\u00f3n de la clave PGP. Al instalar AutoFirma en Linux a partir del paquete RPM desde consola aparece el error \u201cNOKEY\u201d El mensaje \u201cNOKEY\u201d se muestra cuando se detecta que el instalador est\u00e1 firmado pero la clave no se ha importado en el sistema. Seg\u00fan el sistema, es posible que el instalador contin\u00fae con el proceso de instalaci\u00f3n o no despu\u00e9s de mostrar el mensaje. Si el instalador no completa la instalaci\u00f3n, prueba a importar la clave de firma en su sistema y repetir el proceso de instalaci\u00f3n. Puede consultar como importar la clave PGP en el apartado 5.2.2.1 Importaci\u00f3n de la clave p\u00fablica PGP del instalador . Al actualizar AutoFirma en Linux a partir del paquete RPM deja de funcionar AutoFirma 1.7.1 y anteriores inclu\u00edan un error en su desinstalador que imped\u00eda la correcta actualizaci\u00f3n a versiones posteriores. Para actualizar desde AutoFirma 1.7.1 o anterior a una nueva versi\u00f3n de AutoFirma es necesario indicar que no se debe ejecutar el desinstalador de la versi\u00f3n anterior durante el proceso. Por ejemplo, para actualizar mediante \u201crpm\u201d deber\u00edamos usa el comando: sudo rpm -U --nopreun --nopostun autofirma-X.Y.Z.noarch.rpm Si ya intent\u00f3 actualizar AutoFirma y ahora no funciona, desinst\u00e1lela e instale directamente la nueva versi\u00f3n. Cuando se instala Mozilla Firefox o se crea un nuevo perfil de usuario despu\u00e9s de la instalaci\u00f3n de AutoFirma, este no funciona en Firefox Durante el proceso de instalaci\u00f3n de AutoFirma se genera un certificado para la comunicaci\u00f3n entre la p\u00e1gina web y la aplicaci\u00f3n, y lo instala en los almacenes de confianza del sistema y de Firefox. Si se crea un perfil de usuario de Firefox o se instala el propio Firefox despu\u00e9s de la instalaci\u00f3n de AutoFirma, este no contar\u00e1 con el certificado entre los que considera de confianza. Para resolver este problema utilice la funci\u00f3n de restauraci\u00f3n de la instalaci\u00f3n de AutoFirma: Men\u00fa \u201cHerramientas\u201d \u201cRestaurar instalaci\u00f3n\u201d. AutoFirma se cierra inmediatamente tras ser invocado desde el navegador web Cuando se abre AutoFirma por petici\u00f3n de un navegador web inmediatamente se abre una conexi\u00f3n entre ambas aplicaciones. Si AutoFirma detecta cualquier problema que evita que se pueda establecer esa comunicaci\u00f3n, se cierra. Esto dar\u00e1 lugar a que, pasado un tiempo, la p\u00e1gina web que intent\u00f3 realizar la operaci\u00f3n de firma informe de que no se pudo conectar con AutoFirma. Si se encuentra en esta situaci\u00f3n, utilice la funci\u00f3n de \u201cRestaurar instalaci\u00f3n\u201d de AutoFirma. Esta funci\u00f3n permitir\u00e1 reestablecer la configuraci\u00f3n y los recursos necesarios para que se pueda establecer la comunicaci\u00f3n entre el navegador y AutoFirma. La funci\u00f3n de \u201cRestauraci\u00f3n instalaci\u00f3n\u201d se encuentra disponible en el men\u00fa de herramientas de AutoFirma. No se detectan tarjetas inteligentes en macOS Muchas tarjetas inteligentes no disponen de los controladores necesarios para su uso a trav\u00e9s del llavero de Apple (almac\u00e9n utilizado por AutoFirma cuando se usa a trav\u00e9s de Safari, Chrome o como aplicaci\u00f3n de escritorio). En el caso concreto del DNIe y tarjetas CERES, AutoFirma es capaz de utilizarlo por medio del controlador Java que incorpora, pero con el resto de tarjetas no es posible. Para utilizar tarjetas criptogr\u00e1ficas en macOS, instale sus controladores PKCS#11 como dispositivos de seguridad en Mozilla Firefox y utilice AutoFirma a trav\u00e9s de este navegador. AutoFirma en macOS no muestra el t\u00edtulo de los di\u00e1logos de cargar y guardado de ficheros Las nuevas versiones de macOS omiten el t\u00edtulo de los di\u00e1logos de carga y guardado de ficheros. En caso en que el integrador delegue en AutoFirma la selecci\u00f3n y el guardado de las firmas generadas, deber\u00eda tener la precauci\u00f3n de informar al usuario de esto para que en todo momento sepa qu\u00e9 operaci\u00f3n est\u00e1 realizando (carga de un fichero de datos para firma, carga de un fichero de firma para cofirma/contrafirma, guardado de una firma generada\u2026). Error al importar las opciones de configuraci\u00f3n desde un fichero Si generase un fichero de configuraci\u00f3n para la importaci\u00f3n de las opciones de configuraci\u00f3n en AutoFirma y al importarlo se mostrase el mensaje de error \u201cEl fichero de preferencias es inv\u00e1lido, no se realizar\u00e1 ning\u00fan cambio en la configuraci\u00f3n\u201d, es probable que el fichero utilizado no sea un XML v\u00e1lido o que tenga alg\u00fan problema de codificaci\u00f3n. Verifique que su fichero de configuraci\u00f3n est\u00e1 bien formado y que la codificaci\u00f3n utilizada es correcta. AutoFirma no puede comunicarse con el navegador en macOS En algunos casos la instalaci\u00f3n de AutoFirma en macOS finaliza sin errores, pero no se instala el perfil de seguridad que permiten que AutoFirma se comunique de forma segura con el navegador web. En estos casos, al realizar una operaci\u00f3n de firma, se arrancar\u00e1 correctamente AutoFirma, pero este no ser\u00e1 capaz de transmitir el resultado de la firma al navegador web. Esto puede generar un error del navegador con el texto \u201cNo se ha podido conectar con AutoFirma.\u201d. Para solventar ese problema, utilice la funci\u00f3n de \u201cRestaurar instalaci\u00f3n\u201d de AutoFirma. Esta funci\u00f3n permitir\u00e1 reestablecer la configuraci\u00f3n y los recursos necesarios para que se pueda establecer la comunicaci\u00f3n entre el navegador y AutoFirma. La funci\u00f3n de \u201cRestauraci\u00f3n instalaci\u00f3n\u201d se encuentra disponible en el men\u00fa de herramientas de AutoFirma. En caso de que el proceso autom\u00e1tico de restauraci\u00f3n no funcione, ser\u00e1 necesario configurar manualmente la confianza en los certificados de AutoFirma. Para ello: Acceda a la aplicaci\u00f3n \u201cAcceso a llavero\u201d. Acceda al llavero \u201cSISTEMA\u201d y a la opci\u00f3n \u201cCertificados\u201d. En el listado de certificados mostrados deben aparecer los certificados \u201c127.0.0.1\u201d y \u201cAutoFirma ROOT\u201d. Si el icono que aparece junto a estos muestra el signo \u2018+\u2019, se conf\u00eda en los certificados y la comunicaci\u00f3n con AutoFirma deber\u00eda funcionar correctamente. Si no, contin\u00fae con el proceso. Haga clic sobre el certificado \u201c127.0.0.1\u201d y pulse en la opci\u00f3n \u201cConfiar\u201d. En el di\u00e1logo que debe haber aparecido, despliegue el listado \u201cAl utilizar este certificado\u201d y seleccione la opci\u00f3n \u201cConfiar siempre\u201d. Repita los pasos 4 y 5 para el certificado \u201cAutoFirma ROOT\u201d. Compruebe que en ambos certificados aparece ahora el s\u00edmbolo \u2018+\u2019 junto a su icono. Cierre la ventana de los llaveros. Introduzca la contrase\u00f1a de su usuario en el di\u00e1logo para confirmar el cambio en la configuraci\u00f3n de seguridad. < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"AF manual instalacion y gestion ES"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#adecuacion-al-esquema-nacional-de-seguridad","text":"Los productos de la Suite de @firma pueden contener entre los algoritmos disponibles, algunos no recomendados por la Gu\u00eda 807 del Esquema Nacional de Seguridad (ENS; editada por el Centro Criptol\u00f3gico Nacional, CCN) vigente en el momento de publicaci\u00f3n de este documento. Por lo que queda bajo la responsabilidad de las aplicaciones que hacen uso de estos productos el configurar adecuadamente las llamadas a los mismos para generar el resultado esperado, v\u00e1lido y adecuado para ese momento y el nivel de seguridad deseado, utilizando para ello algoritmos de la familia SHA-2 tal y como especifica dicha norma para la generaci\u00f3n de firmas electr\u00f3nicas. Puede consultar la norma vigente desde el siguiente enlace: https://www.ccn-cert.cni.es/series-ccn-stic/800-guia-esquema-nacional-de-seguridad/513-ccn-stic-807-criptologia-de-empleo-en-el-ens/file.html","title":"Adecuaci\u00f3n al Esquema Nacional de Seguridad"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#requisitos-minimos","text":"El uso de AutoFirma como herramienta de firma integrada dentro del proceso de firma de tr\u00e1mites web tiene los siguientes requerimientos en cuanto a entorno operativo: Sistema Operativo Microsoft Windows. Soportado directamente en 7, 8, 8.1 y 10. En 32 o 64 bits. Linux Distribuciones probadas: Ubuntu, Fedora y OpenSuse. Apple macOS. Soportado directamente en Sierra, High Sierra, Mojave. Navegadores Web (para la invocaci\u00f3n por protocolo) Microsoft Windows Microsoft Internet Explorer 8 o superior. Google Chrome 46 o superior. Mozilla Firefox 41.0.2 o superior. Microsoft Edge 60 o superior. Linux Mozilla Firefox 41.0.1 o superior. Apple macOS Apple Safari 12.0 o superior. Google Chrome 46 o superior. Mozilla Firefox 65 o superior. ADVERTENCIA: El funcionamiento de AutoFirma al invocarlo desde versiones de Internet Explorer anteriores a la 11 (o Internet Explorer 11 en modo de compatibilidad con una versi\u00f3n anterior) est\u00e1 supeditado a que el administrador de la aplicaci\u00f3n web haya cumplido ciertos requisitos durante el despliegue. Para asegurar el correcto funcionamiento de las operaciones de firma online utilice otro de los navegadores soportados. En entornos macOS y Windows no es necesario tener instalado un entorno de ejecuci\u00f3n de Java. En Linux se necesita un entorno de ejecuci\u00f3n de Java 11 de Oracle u OpenJDK 11 (marcado como dependencia en el instalador integrado de AutoFirma). Es obligatorio que AutoFirma sea instalado antes de iniciar el tr\u00e1mite web en el que se usar\u00e1 para ejecutar las operaciones de firma.","title":"Requisitos m\u00ednimos"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#enlaces-de-descarga","text":"Para instar al usuario que se instale AutoFirma, redir\u00edjalo a la siguiente p\u00e1gina web: http://firmaelectronica.gob.es/Home/Descargas.html","title":"Enlaces de descarga"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#funcionamiento-de-autofirma","text":"AutoFirma permite tanto su uso a trav\u00e9s de su interfaz gr\u00e1fica para la generaci\u00f3n de firmas de documentos locales del usuario, como su uso como herramienta de firma dentro de un flujo de firma web. Para que AutoFirma se inicie para permitir firmar en un tr\u00e1mite web, se necesario que dicho tr\u00e1mite se configure tal como se describe en el manual del integrador del Cliente @firma ( MCF_manual-integrador_ES ). Es requisito tambi\u00e9n que AutoFirma est\u00e9 instalado en el equipo del usuario antes de iniciar el tr\u00e1mite de firma. Es responsabilidad del integrador alertar de este hecho cuando sea susceptible que los usuarios no tengan instalada la aplicaci\u00f3n. Ya se ejecute AutoFirma como aplicaci\u00f3n de escritorio o sea lanzada por el navegador web, AutoFirma registra la operativa de su \u00faltima ejecuci\u00f3n en un fichero de trazas en el subdirectorio oculto \u201c .afirma \u201d del directorio del usuario. Por ejemplo, \u201c C:\\Users\\miusuario\\afirma \u201d. El fichero generado tiene el nombre \u201c AUTOFIRMA.afirma.log.xml \u201d. Los ficheros de trazas del Cliente @firma en ning\u00fan caso almacenan informaci\u00f3n de car\u00e1cter personal.","title":"Funcionamiento de AutoFirma"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#uso-del-dnie-y-tarjetas-inteligentes","text":"El Cliente @firma utiliza la biblioteca JMulticard para permitir firmar con DNIe y tarjetas inteligentes de la F\u00e1brica Nacional de Moneda y Timbre (FNMT) sin necesidad de que los usuarios tengan instalados los controladores de la tarjeta. Por defecto, siempre que se seleccione un certificado de DNIe o uno insertado en una tarjeta de la FNMT, se utilizar\u00e1 JMulticard para ejecutar la operaci\u00f3n de firma. El uso de JMulticard sobre el controlador oficial de estas tarjetas conlleva ciertas ventajas, ya que existen ciertas incompatibilidades de AutoFirma con estos que impiden que funcionen correctamente, sobre todo cuando se realizan firmas de m\u00faltiples documentos. JMulticard est\u00e1 activado por defecto en AutoFIrma, pero puede desactivarlo para usar el controlador oficial de la tarjeta, que deber\u00e1 estar instalado en el sistema, siga las instrucciones indicadas a continuaci\u00f3n: Abra la aplicaci\u00f3n AutoFirma. Seleccione el men\u00fa \u201cHerramientas\u201d y la opci\u00f3n \u201cPreferencias\u201d. En la pesta\u00f1a \u201cGeneral\u201d se muestra la opci\u00f3n \u201cHabilitar JMulticard para el uso de las tarjetas de la FNMT y DNIe\u201d. Despu\u00e9s de modificar esta opci\u00f3n, deber\u00e1 pulsar Aceptar en el panel de preferencias. La configuraci\u00f3n ser\u00e1 efectiva la pr\u00f3xima vez que se abra AutoFirma. < Cuando se desactiva el uso de JMulticard, no se usa esta biblioteca para firmar, ni en la firma local de documentos ni en las firmas dentro de un tr\u00e1mite web, en donde se utilizar\u00e1 el mismo controlador que utilice el navegador web utilizado. La \u00fanica excepci\u00f3n a esto es cuando, al abrir AutoFirma, se selecciona expresamente la opci\u00f3n \u201cContinuar con DNIe\u201d. Se recomienda mantener activado JMulticard por defecto, pero puede plantearse modificar esta configuraci\u00f3n seg\u00fan el uso habitual de firma. Mant\u00e9ngalo activado cuando habitualmente: No utilice tarjetas para firmar. Use tarjetas inteligentes o utilice el DNIe y tarjetas de la FNMT. Mant\u00e9ngalo desactivado e instale los controladores oficiales de su tarjeta cuando habitualmente: Utilice una nueva versi\u00f3n de DNIe o tarjeta inteligente y haya comprobado que AutoFirma no funciona correctamente con ellas. Utilice tarjetas distintas a DNIe y tarjetas de la FNMT. JMulticard no impedir\u00e1 su uso, pero s\u00ed puede alterar su comportamiento, por ejemplo, impidiendo que el controlador guarde en cach\u00e9 el PIN del usuario para reutilizarlo en firmas consecutivas. Realice los tr\u00e1mites web desde Firefox y advierta que se producen problemas al firmar con su tarjeta (puede ocurrir con versiones antiguas de tarjetas de la FNMT). La biblioteca JMulticard pedir\u00e1 el PIN de las tarjetas siempre que lo requiera, lo que puede suponer insertarlo por cada documento de firma en los procesos de firma masiva. Para evitar esto, el propio di\u00e1logo de inserci\u00f3n de contrase\u00f1a ofrece al usuario la posibilidad de seleccionar que se recuerde la contrase\u00f1a durante la sesi\u00f3n de firma. Esta opci\u00f3n, sin embargo, podr\u00eda no funcionar en tr\u00e1mites web (seg\u00fan la integraci\u00f3n realizada del tr\u00e1mite y el navegador del usuario). En esos casos, se seguir\u00e1 pidiendo la contrase\u00f1a por cada documento. Este comportamiento podr\u00eda corregirse con el uso del controlador de oficial de la tarjeta, aunque esto puede conllevar otros inconvenientes (necesidad de tener instalado el controlador, posibles incompatibilidades de arquitectura, posibles problemas de conexi\u00f3n con el dispositivo, etc.). El administrador de entornos gestionados podr\u00eda activar o desactivar el uso de JMulticard seg\u00fan el uso que estime que van a hacer sus usuarios de la aplicaci\u00f3n. Por ejemplo, si disponen de tarjeta de funcionario/empleado no compatible con JMulticard, podr\u00edan optar para desactivarlo. Para hacer esto pueden modificar esta configuraci\u00f3n de AutoFIrma tal como el resto de sus opciones.","title":"Uso del DNIe y tarjetas inteligentes"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#comunicacion-con-servicios-externos","text":"Cuando AutoFirma se comunica con servicios externos, por ejemplo, para comprobar si existe una nueva versi\u00f3n o para la comunicaci\u00f3n con el navegador web a trav\u00e9s del servidor intermedio (consulte el apartado \u201cCompatibilidad con dispositivos m\u00f3viles y AutoFirma\u201d del manual \u201cMCF_manual-integrador_ES\u201d para m\u00e1s informaci\u00f3n), se utiliza la configuraci\u00f3n de proxy de red establecida en AutoFirma y el almac\u00e9n de confianza de la JRE con la cual se ejecute la aplicaci\u00f3n. Para saber m\u00e1s sobre la configuraci\u00f3n del proxy de red en AutoFirma consulte la ayuda integrada de AutoFirma (para la configuraci\u00f3n a trav\u00e9s de interfaz gr\u00e1fica) o las opciones de configuraci\u00f3n referentes al proxy en el apartado \u201c 6.4.1 Opciones Generales \u201d (para la configuraci\u00f3n de la aplicaci\u00f3n por parte de un administrador). En el caso de los certificados de confianza, AutoFirma utilizar\u00e1 el almac\u00e9n de confianza de la JRE instalada junto a la propia aplicaci\u00f3n (en las instalaciones de Windows o macOS) o el almac\u00e9n de confianza de la JRE instalada en el sistema que se utilice para ejecutarla (en el caso de Linux). Cuando AutoFirma intente acceder a un recurso de red o servicio externo sobre una comunicaci\u00f3n SSL, rechazar\u00e1 por defecto la conexi\u00f3n en caso de que la conexi\u00f3n se cifrase utilizando un certificado SSL emitido por un prestador distinto a los incluidos en el almac\u00e9n de confianza o cuando fuese expedido para un dominio distinto al que se intenta acceder. Esta medida de seguridad es necesaria para evitar ataques de seguridad que redireccionen las peticiones del cliente a servidores inseguros. Sin embargo, es posible que un usuario necesite hacer uso de aplicaciones web desplegadas en dominios con certificados no reconocidos por Java, por ejemplo, porque sea un certificado emitido por un prestador s\u00f3lo reconocido a nivel nacional o porque se trate de una aplicaci\u00f3n o un entorno de pruebas. En estos casos, el usuario podr\u00eda desactivar la verificaci\u00f3n del certificado SSL desde el panel de preferencias de AutoFirma. < Para evitar problemas de conexi\u00f3n, aseg\u00farese de cifrar su comunicaci\u00f3n SSL con certificados reconocidos por defecto por Java. En caso contrario, el usuario o el administrador de los equipos deber\u00e1n incluir los certificados de la entidad emisora del certificado SSL en el almac\u00e9n de confianza de la JRE utilizada. Para facilitar el despliegue a las entidades que utilizan certificados SSL emitidos por autoridades espa\u00f1olas, en el almac\u00e9n de confianza de las JRE con las que se distribuyen las versiones de Windows y macOS se incluyen por defecto los certificados ra\u00edces de los siguientes prestadores: Agencia de Tecnolog\u00eda y Certificaci\u00f3n Electr\u00f3nica (ACCV) F\u00e1brica Nacional de Moneda y Timbre (FNMT) Firma Profesional (FNMT) As\u00ed pues, AutoFirma permitir\u00e1 por defecto la conexi\u00f3n con los servicios desplegados sobre conexiones SSL construidas con certificados de estos prestadores. Esta lista de prestadores podr\u00e1 variar en futuras versiones de AutoFirma seg\u00fan las solicitudes realizadas por los propios prestadores o entidades p\u00fablicas que utilicen sus certificados. Requisito indispensable para incorporar un nuevo prestador a esta lista es que se trate de un prestador reconocido por el Ministerio de Industria, Comercio y Turismo.","title":"Comunicaci\u00f3n con servicios externos"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#instalacion","text":"La instalaci\u00f3n de AutoFirma en el sistema del usuario se asemeja a la instalaci\u00f3n de cualquier otra aplicaci\u00f3n. Sin embargo, el proceso de instalaci\u00f3n incluye un paso de vital importancia para la compatibilidad de AutoFirma con las aplicaciones web que integren procesos de firma con el Cliente @firma. La comunicaci\u00f3n entre una p\u00e1gina web y AutoFirma se puede realizar de varias maneras, siendo la principal a trav\u00e9s de WebSocket por medio de un canal cifrado mediante certificado SSL generado en la m\u00e1quina local durante el proceso de instalaci\u00f3n. Para que sea posible la comunicaci\u00f3n entre el navegador web y AutoFirma, ser\u00e1 necesario que durante la instalaci\u00f3n se genere el par de claves del certificado, que este se almacene en disco y que el certificado generado sea dado de alta en los almacenes de confianza de los navegadores del sistema. Debido a las medidas de seguridad establecidas por cada navegador web, es posible que esto implique la aparici\u00f3n de un di\u00e1logo gr\u00e1fico de seguridad en el que se debe conceder permisos para realizar esta operaci\u00f3n o insertar la contrase\u00f1a del almac\u00e9n o del usuario administrador del sistema. El proceso de instalaci\u00f3n guarda el almac\u00e9n de claves generado en el directorio \u201c .afirma \u201d dentro del directorio del usuario que instal\u00f3 la aplicaci\u00f3n. El nombre del fichero de trazas se almacena en ese mismo directorio con el nombre \u201c AUTOFIRMA_CONFIGURATOR.afirma.log.xml \u201d. En el caso de Linux y macOS, la instalaci\u00f3n se realiza con el usuario administrador y el log se guarda en el directorio temporal del sistema o, si no se puede ah\u00ed, en \u201c /var/tmp \u201d para facilitar su acceso.","title":"Instalaci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#microsoft-windows","text":"","title":"Microsoft Windows"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#instalador-exe","text":"La instalaci\u00f3n de AutoFirma sobre Microsoft Windows debe ser realizada por un usuario con permisos de administrador. Esta aplicaci\u00f3n de instalaci\u00f3n se distribuye con el nombre \u201cAutoFirma_W_vX.Y.Z_installer.exe\u201d, donde X, Y y Z son los n\u00fameros de versi\u00f3n y W, la arquitectura de sistema para la que est\u00e1 preparada. Por ejemplo, \u201cAutoFirma_32_v1.8.0_installer.exe\u201d se corresponder\u00eda con el instalador de AutoFirma versi\u00f3n 1.8.0 para sistema de 32bits. AutoFirma es compatible con Windows 7 o superior en 32 y 64 bits (x86 o x64). Una vez instalada, puede usarse desde pr\u00e1cticamente cualquier navegador Web. Los navegadores oficialmente soportados son: Microsoft Internet Explorer 8 y superiores Google Chrome 46 o superior Mozilla Firefox 41.0.2 o superior Microsoft Edge v60 o superior AutoFirma puede funcionar correctamente con otros navegadores, pero no se ofrece soporte sobre ellos. El uso de versiones de Internet Explorer anteriores a la 11 (o la versi\u00f3n 11 en modo de compatibilidad con una versi\u00f3n anterior) requiere que el despliegue del Cliente @firma permita la comunicaci\u00f3n a trav\u00e9s de servidor intermedio. Consulte el manual del integrador del Cliente @firma para m\u00e1s detalles. AutoFirma se distribuye en versiones de 32 y 64 bits para Windows. Esta diferenciaci\u00f3n afecta \u00fanicamente a la cantidad de recursos del sistema que la aplicaci\u00f3n es capaz de utilizar. Si se desea utilizar AutoFirma para la generaci\u00f3n de firmas de ficheros grandes se deber\u00e1 usar la versi\u00f3n de 64 bits de AutoFirma. Al ejecutar el instalador, se mostrar\u00e1 una pantalla de bienvenida y se guiar\u00e1 al usuario a trav\u00e9s de unos sencillos pasos: < Al pulsar sobre el bot\u00f3n \u201cSiguiente >\u201d seremos redirigidos a la pantalla de licencia de la aplicaci\u00f3n. < En esta pantalla, el usuario puede leer el texto de licencia de AutoFirma. Para continuar con el proceso de instalaci\u00f3n es necesario pulsar el bot\u00f3n \u201cAcepto\u201d, tras lo cual se mostrar\u00e1 la pantalla de configuraci\u00f3n de la ruta de instalaci\u00f3n. < Puede dejar la ruta que se le muestra por defecto (recomendado) o seleccionar cualquier otra ubicaci\u00f3n. En caso de modificar el directorio por defecto, aseg\u00farese de instalar AutoFirma en un directorio propio y no en uno compartido con m\u00e1s aplicaciones o documentos. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se mostrar\u00e1 la pantalla de configuraci\u00f3n de las opciones avanzadas de integraci\u00f3n. < Las opciones de integraci\u00f3n de AutoFirma que pueden configurarse son: Agregar al men\u00fa inicio: Al activarlo, se crear\u00e1 un submen\u00fa en el men\u00fa inicio de Windows con accesos directos a AutoFirma y a su desinstalador. Crear acceso directo en el escritorio: Al activarlo, se crear\u00e1 un acceso directo en el escritorio de Windows. Configurar Firefox para que conf\u00ede en los certificados ra\u00edz del sistema: Al activarlo, se modificar\u00e1 la configuraci\u00f3n de Firefox para que conf\u00ede en los certificados SSL expedidos por los prestadores de confianza del sistema, sin necesidad de que estos prestadores est\u00e9n dados de alta en el almac\u00e9n confianza del navegador. La extracci\u00f3n y copia de ficheros al sistema se iniciar\u00e1 al pulsar el bot\u00f3n \u201cInstalar\u201d. < Una vez finalizada la copia de ficheros, se instalar\u00e1 un certificado de confianza SSL generado localmente en su almac\u00e9n local de Windows. ADVERTENCIA : El proceso de instalaci\u00f3n afecta a los perfiles de Mozilla Firefox y a la configuraci\u00f3n de Google Chrome. Estos navegadores se cerrar\u00e1n autom\u00e1ticamente durante el proceso de instalaci\u00f3n desatendido mediante el instalador MSI. Si se utiliza el instalador EXE, ser\u00e1 necesario que el usuario cierre manualmente estos navegadores. En el caso de la instalaci\u00f3n con el instalar EXE, tenga en cuenta que los procesos de los navegadores pueden tardar un tiempo en finalizar despu\u00e9s de haber cerrado la ventana de la aplicaci\u00f3n. Si vuelve a aparecer el di\u00e1logo solicit\u00e1ndole que cierre la aplicaci\u00f3n, compruebe que no se encuentre abierta y espere unos segundos antes de pulsar el bot\u00f3n para continuar con el proceso. T\u00e9ngase en cuenta que el navegador Google Chrome puede quedar abierto incluso despu\u00e9s de cerrar su ventana. En esos casos, aparecer\u00e1 un icono en el \u00e1rea de notificaciones del escritorio del usuario y deber\u00e1 cerrarse a trav\u00e9s de la opci\u00f3n proporcionada en el men\u00fa contextual de este icono. Al completarse el instalador, se mostrar\u00e1 el mensaje de \u201cCompletado\u201d. < Al pulsar el bot\u00f3n \u201cSiguiente\u201d, se mostrar\u00e1 el resultado de la instalaci\u00f3n. < Una vez completada la instalaci\u00f3n, las aplicaciones Web que integren el proceso de firma con el Cliente @firma podr\u00e1n usar su versi\u00f3n instalada de AutoFirma para firmar. Durante la ejecuci\u00f3n de AutoFirma, es posible que este solicite permisos para acceder a la red. Consulte el apartado \uf0b7 KEYSTORE_PATHPermite indicar si se desea proporcionar un almac\u00e9n de confianza distinto al generado en una instalaci\u00f3n normal. La contrase\u00f1a para este almac\u00e9n debe ser obligatoriamente \u201c654321\u201d para su correcto funcionamiento. En el valor debe indicarse la ruta absoluta del almac\u00e9n que se quiere proporcionar. El archivo debe de existir en la ruta que se proporciona, en caso contrario, la instalaci\u00f3n no se realizar\u00e1. Este par\u00e1metro debe de usarse junto con el par\u00e1metro CERTIFICATE_PATH, donde se indicar\u00e1 el certificado a instalar. En caso de que no se usen conjuntamente, no se realizar\u00e1 la instalaci\u00f3n. Las rutas absolutas que se indiquen en ambos par\u00e1metros deben indicarse con barra invertida (\u2018\\). El administrador tambi\u00e9n podr\u00eda instalar AutoFirma normalmente en un equipo y utilizar el almac\u00e9n y certificado generados para utilizarlos en otras instalaciones. Ejemplo:Instalaci\u00f3n con almac\u00e9n y certificados proporcionados por el administrador:msiexec /i \"AutoFirma_installer.msi\" /quiet KEYSTORE_PATH=\"C:\\pruebas\\almacen_prueba.pfx\" CERTIFICATE_PATH=\"C:\\pruebas\\certificado_prueba.cer\" CERTIFICATE_PATHPermite indicar si se desea proporcionar un certificado distinto generado en una instalaci\u00f3n normal. En el valor debe indicarse la ruta absoluta del certificado que se quiere proporcionar. El archivo debe de existir en la ruta que se proporciona, en caso contrario, la instalaci\u00f3n no se realizar\u00e1. Este par\u00e1metro debe de usarse junto con el par\u00e1metro KEYSTORE_PATH, donde se indicar\u00e1 el almac\u00e9n de confianza a instalar. En caso de que no se usen conjuntamente, no se realizar\u00e1 la instalaci\u00f3n. Las rutas absolutas que se indiquen en ambos par\u00e1metros deben indicarse con barra invertida (\u2018\\). El administrador tambi\u00e9n podr\u00eda instalar AutoFirma normalmente en un equipo y utilizar el almac\u00e9n y certificado generados para utilizarlos en otras instalaciones. Ejemplo:Instalaci\u00f3n con almac\u00e9n y certificados proporcionados por el administrador:msiexec /i AutoFirma_installer.msi /quiet KEYSTORE_PATH=\"C:\\pruebas\\almacen_prueba.pfx\" CERTIFICATE_PATH=\"C:\\pruebas\\certificado_prueba.cer\" Permisos adicionales para obtener m\u00e1s informaci\u00f3n.","title":"Instalador EXE"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#desinstalacion","text":"La desinstalaci\u00f3n de Autofirma puede realizarse desde la ventana \u201cProgramas y caracter\u00edsticas\u201d del de \u201cPanel de control\u201d de Windows. < Una vez lanzado, el desinstalador presenta un sencillo asistente: < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se mostrar\u00e1 la opci\u00f3n de desinstalaci\u00f3n. < Al pulsar el bot\u00f3n de \u201cDesinstalar\u201d se iniciar\u00e1 el proceso de desinstalaci\u00f3n. < ADVERTENCIA : El proceso de desinstalaci\u00f3n afecta a los perfiles de Mozilla Firefox y a la configuraci\u00f3n de Google Chrome. Estos navegadores se cerrar\u00e1n autom\u00e1ticamente durante el proceso de desinstalaci\u00f3n desatendido mediante el instalador MSI. Si se utiliza el instalador EXE, ser\u00e1 necesario que el usuario cierre manualmente estos navegadores. En el caso de haberse instalado la aplicaci\u00f3n con el instalador EXE, tenga en cuenta que los procesos de estos navegadores pueden tardar un tiempo en finalizar despu\u00e9s de haber cerrado la ventana de la aplicaci\u00f3n. Si vuelve a aparecer el di\u00e1logo solicit\u00e1ndole que cierre la aplicaci\u00f3n, compruebe que no se encuentre abierta y espere unos segundos antes de pulsar el bot\u00f3n para continuar con el proceso. Compruebe tambi\u00e9n que el navegador Google Chrome no muestra un icono en el \u00e1rea de notificaciones del escritorio del usuario y, en caso de que se muestre, cierre la aplicaci\u00f3n a trav\u00e9s de la opci\u00f3n proporcionada en el men\u00fa contextual de este icono. Cuando el proceso termina, la aplicaci\u00f3n ha sido correctamente desinstalada de Windows. <","title":"Desinstalaci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#despliegue-masivo-de-la-aplicacion-instalador-msi","text":"AutoFirma tambi\u00e9n se distribuye en forma de instalador MSI (32 y 64bits) orientado a su despliegue masivo por parte de un administrador que gestione las aplicaciones de un conjunto de usuarios. En caso de existir versiones previas de AutoFirma instaladas en los equipos de los usuarios, se recomienda proceder a la desinstalaci\u00f3n de las mismas antes de instalar la nueva versi\u00f3n. Si se instalase AutoFirma como parte de un despliegue masivo y el usuario hubiese instalado AutoFirma (mediante su instalador EXE) en el mismo equipo, es posible que ambas versiones convivan en el equipo, aunque s\u00f3lo la \u00faltima atender\u00eda las peticiones realizadas mediante protocolo. Sin embargo, al desinstalar una de estas versiones, es posible que la otra dejase de funcionar. El instalador MSI realiza la instalaci\u00f3n silenciosa en el equipo de los usuarios. El administrador debe asegurarse, en cualquier caso, de que el proceso de instalaci\u00f3n no se realiza mientras los usuarios trabajan en sus equipos, ya que los navegadores Chrome y Firefox se cerrar\u00e1n durante la instalaci\u00f3n/desinstalaci\u00f3n. Para realizar la instalaci\u00f3n silenciosa mediante consola, un usuario administrador puede emplear el comando: msiexec /i \"_RUTA_\\AutoFirma_installer.msi\" /quiet Para su desinstalaci\u00f3n, se emplear\u00eda este otro: msiexec /x \"_RUTA_\\AutoFirma_installer.msi\" /quiet Consulte el manual de su software de instalaci\u00f3n masiva de aplicaciones para saber c\u00f3mo realizar el despliegue sobre m\u00faltiples m\u00e1quinas.","title":"Despliegue masivo de la aplicaci\u00f3n (Instalador MSI)"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#parametros-de-configuracion","text":"El instalador MSI de AutoFirma soporta los siguientes par\u00e1metros para adecuar la instalaci\u00f3n a los requisitos del organismo: CREATE_ICON Permite indicar si se desea que se cree el icono de AutoFirma en el escritorio del usuario. Si se indica el valor \u201cfalse\u201d el icono no se crear\u00e1. En cualquier otro caso, s\u00ed se crear\u00e1. Ejemplo: Para una que no se cree el icono en el escritorio de los usuarios: msiexec /i \"AutoFirma_installer.msi\" /quiet CREATE_ICON=\"false\" FIREFOX_SECURITY_ROOTS Permite indicar si se desea configurar Firefox para que conf\u00ede en los certificados ra\u00edz del almac\u00e9n entidades de confianza de Windows. Si se indica el valor \u201ctrue\u201d, se configurar\u00e1 esta opci\u00f3n de Firefox. En cualquier otro caso, no se modificar\u00e1 la configuraci\u00f3n. Ejemplo: Para una que Firefox conf\u00ede en los certificados ra\u00edz del sistema: msiexec /i \"AutoFirma_installer.msi\" /quiet FIREFOX_SECURITY_ROOTS=\"true\" KEYSTORE_PATH Permite indicar si se desea proporcionar un almac\u00e9n de confianza distinto al generado en una instalaci\u00f3n normal. La contrase\u00f1a para este almac\u00e9n debe ser obligatoriamente \u201c654321\u201d para su correcto funcionamiento. En el valor debe indicarse la ruta absoluta del almac\u00e9n que se quiere proporcionar. El archivo debe de existir en la ruta que se proporciona, en caso contrario, la instalaci\u00f3n no se realizar\u00e1. Este par\u00e1metro debe de usarse junto con el par\u00e1metro CERTIFICATE_PATH, donde se indicar\u00e1 el certificado a instalar. En caso de que no se usen conjuntamente, no se realizar\u00e1 la instalaci\u00f3n. Las rutas absolutas que se indiquen en ambos par\u00e1metros deben indicarse con barra invertida (\u2018\\). El administrador tambi\u00e9n podr\u00eda instalar AutoFirma normalmente en un equipo y utilizar el almac\u00e9n y certificado generados para utilizarlos en otras instalaciones. Ejemplo: Instalaci\u00f3n con almac\u00e9n y certificados proporcionados por el administrador: msiexec /i \"AutoFirma_installer.msi\" /quiet KEYSTORE_PATH=\"C:\\pruebas\\almacen_prueba.pfx\" CERTIFICATE_PATH=\"C:\\pruebas\\certificado_prueba.cer\" CERTIFICATE_PATH Permite indicar si se desea proporcionar un certificado distinto generado en una instalaci\u00f3n normal. En el valor debe indicarse la ruta absoluta del certificado que se quiere proporcionar. El archivo debe de existir en la ruta que se proporciona, en caso contrario, la instalaci\u00f3n no se realizar\u00e1. Este par\u00e1metro debe de usarse junto con el par\u00e1metro KEYSTORE_PATH, donde se indicar\u00e1 el almac\u00e9n de confianza a instalar. En caso de que no se usen conjuntamente, no se realizar\u00e1 la instalaci\u00f3n. Las rutas absolutas que se indiquen en ambos par\u00e1metros deben indicarse con barra invertida (\u2018\\). El administrador tambi\u00e9n podr\u00eda instalar AutoFirma normalmente en un equipo y utilizar el almac\u00e9n y certificado generados para utilizarlos en otras instalaciones. Ejemplo: Instalaci\u00f3n con almac\u00e9n y certificados proporcionados por el administrador: msiexec /i AutoFirma_installer.msi /quiet KEYSTORE_PATH=\"C:\\pruebas\\almacen_prueba.pfx\" CERTIFICATE_PATH=\"C:\\pruebas\\certificado_prueba.cer\"","title":"Par\u00e1metros de configuraci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#permisos-adicionales","text":"Es probable que despu\u00e9s de la instalaci\u00f3n de AutoFirma, al ejecutarlo como aplicaci\u00f3n de escritorio o como parte de un proceso de firma Web, la m\u00e1quina virtual de Java instalada junto con AutoFirma solicite permisos para el acceso a Internet pasando por el Firewall de Windows. Es necesario conceder estos permisos para que AutoFirma pueda ejecutar tareas propias de su funcionamiento habitual, como son la b\u00fasqueda de actualizaciones o la comunicaci\u00f3n con el navegador Web en los procesos de firma web. En el caso de un despliegue masivo de AutoFirma, ser\u00eda necesario que el administrador del sistema concediese estos permisos para el ejecutable \u201cjavaw.exe\u201d del JRE residente en el directorio de instalaci\u00f3n de AutoFirma.","title":"Permisos adicionales"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#linux","text":"La instalaci\u00f3n de AutoFirma en Linux debe ser realizada por un usuario con permisos de administrador. Se distribuyen varias versiones del instalador de AutoFirma para Linux: AutoFirma_X.Y.Z.deb : Instalador DEB para distribuciones derivadas de Debian/Ubuntu. autofirma-X.Y.Z-1.noarch_FEDORA.rpm : Instalador RPM para distribuciones derivadas de RedHat/Fedora. autofirma-X.Y.Z-1.noarch_SUSE.rpm : Instalador RPM para distribuciones derivadas de SUSE. NOTA: Se han encontrado problemas de compatibilidad con el Firefox por defecto instalado con el sistema operativo con el entorno KDE. En este caso, Firefox no atiende las llamadas realizadas por la p\u00e1gina para que abra la aplicaci\u00f3n. Se recomienda la instalaci\u00f3n del Firefox oficial de la web de Mozilla. En los nombres anteriores, las letras X, Y y Z (opcional) son los n\u00fameros de versi\u00f3n. Por ejemplo \u201cAutoFirma_1.8.deb\u201d corresponder\u00eda a AutoFirma versi\u00f3n 1.8 para distribuciones Ubuntu/Debian. Todos los instaladores incluyen la misma versi\u00f3n de AutoFirma, pero cada uno de ellos est\u00e1 preparado para la instalaci\u00f3n en un conjunto distinto de distribuciones de Linux. La diferencia entre los dos instaladores RPM son las dependencias declaradas, dado que las NSS Tools se encuentran con distinto nombre en los repositorios por defecto de algunas distribuciones. Para poder ejecutar AutoFirma son necesarias las siguientes dependencias, as\u00ed que estas se comprueban durante el proceso de instalaci\u00f3n: JRE (Java Runtine Environment) de Oracle u OpenJDK (versi\u00f3n 11 o superior). Biblioteca NSS Tools. El funcionamiento de AutoFirma esta verificado en distribuciones Ubuntu, Fedora y OpenSuse. Una vez instalada, puede usarse como aplicaci\u00f3n de escritorio e invocarse desde los navegadores web Mozilla Firefox y Google Chrome. Hay dos opciones de instalaci\u00f3n: por l\u00ednea de comandos y desde la interfaz de escritorio. La instalaci\u00f3n por ambos medios dejar\u00e1 la aplicaci\u00f3n instalada por defecto en el directorio: /usr/lib/AutoFirma","title":"Linux"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#instalador-deb","text":"","title":"Instalador DEB"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#instalacion-por-linea-de-comandos-del-instalador-deb","text":"Para instalaci\u00f3n por l\u00ednea de comandos, en una consola ejecutaremos: sudo dpkg \u2013i RUTA_INSTALABLE_AUTOFIRMA Donde RUTA_INSTALABLE_AUTOFIRMA es la ruta al instalador correspondiente a la distribuci\u00f3n escogida. Si no tenemos instaladas las dependencias anteriormente listadas, se nos mostrar\u00e1n mensajes de advertencia al respecto. En caso de ser as\u00ed, podremos instalar estas bibliotecas con el comando: sudo apt-get \u2013f install Despu\u00e9s de esto, se debe volver a ejecutar el comando de instalaci\u00f3n de AutoFirma para asegurar su correcta instalaci\u00f3n: sudo dpkg \u2013i RUTA_INSTALABLE_AUTOFIRMA","title":"Instalaci\u00f3n por l\u00ednea de comandos del instalador DEB"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#instalacion-de-oracle-java-con-el-fichero-targz-de-oracle","text":"Si se tuviese Oracle Java instalado en el sistema mediante el fichero tar.gz de la web de Oracle, la JRE no habr\u00e1 quedado registrada en el gestor de paquetes. En ese caso, cuando se intente instalar AutoFirma, el gestor de paquetes considerar\u00e1 que no se cumplen los requisitos necesarios y se negar\u00e1 a instalarlo. Para forzar al uso de la JRE de Oracle se debe: Instalar la biblioteca \u201clibnss3-tools\u201d. Esta biblioteca es requisito indispensable de la aplicaci\u00f3n: sudo apt-get install libnss3-tools Configurar la variable JAVA_HOME con la JRE instalada y su directorio \u201cbin\u201d como parte del PATH del sistema. Esto se puede hacer, por ejemplo, editando el fichero \u201c/etc/environment\u201d y agregando a la variable PATH la ruta del directorio bin de Java y la nueva variable: PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/java/jdk-11.0.8/bin\" JAVA_HOME=\"/usr/java/jdk-11.0.8\" Podemos hacer que el sistema recargue la configuraci\u00f3n de este fichero (y as\u00ed no sea necesario reiniciarlo) con el comando: source /etc/environment","title":"Instalaci\u00f3n de Oracle Java con el fichero tar.gz de Oracle"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#instalacion-de-muestra-mediante-el-asistente-de-paquetes-de-ubuntuguadalinex","text":"Para la instalaci\u00f3n mediante el asistente de paquetes, se debe hacer doble clic en el fichero de la distribuci\u00f3n (.deb). Se abrir\u00e1 una ventana similar a la siguiente. < Se debe pulsar el bot\u00f3n instalar, que se encuentra arriba a la derecha. Si no se tienen permisos de administrador, el sistema solicitar\u00e1 la clave de \u201cs\u00faper usuario\u201d para poder realizar la instalaci\u00f3n. < Si no ha ocurrido ning\u00fan problema, se mostrar\u00e1 un mensaje de confirmaci\u00f3n. <","title":"Instalaci\u00f3n de muestra mediante el asistente de paquetes de Ubuntu/Guadalinex"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#desinstalacion-del-paquete-deb","text":"Para realizar la desinstalaci\u00f3n del sistema se puede utilizar el siguiente comando. sudo apt-get remove \u2013-purge autofirma Cuando el proceso termina, la aplicaci\u00f3n ha sido correctamente desinstalada del sistema.","title":"Desinstalaci\u00f3n del paquete DEB"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#instalador-rpm","text":"","title":"Instalador RPM"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#importacion-de-la-clave-publica-pgp-del-instalador","text":"Antes de instalar la aplicaci\u00f3n, se deber\u00eda agregar la clave p\u00fablica PGP del firmante del instalador al almac\u00e9n de confianza del sistema. La clave p\u00fablica PGP puede descargarse como un fichero \u201c.asc\u201d junto al archivo de instalaci\u00f3n. Para importar esta clave PGP a nuestro almac\u00e9n usaremos el comando: sudo rpm --import PUBLIC_KEY.asc En este comando, \u201cPUBLIC_KEY.asc\u201d ser\u00e1 el fichero con la clave p\u00fablica. Una vez importada la clave PGP, el sistema podr\u00e1 validar autom\u00e1ticamente la firma del instalador RPM.","title":"Importaci\u00f3n de la clave p\u00fablica PGP del instalador"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#instalacion-por-linea-de-comandos-del-instalador-rpm","text":"Para instalaci\u00f3n por l\u00ednea de comandos, en una consola ejecutaremos: sudo rpm -i autofirma-X.Y.Z.noarch.rpm En el comando anterior \u201cautofirma-X.Y.Z.noarch.rpm\u201d ser\u00e1 el nombre del fichero instalador apropiado para nuestro sistema.","title":"Instalaci\u00f3n por l\u00ednea de comandos del instalador RPM"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#instalacion-mediante-el-asistente-de-paquetes","text":"Tenga en cuenta que el uso de un asistente de paquetes tambi\u00e9n puede requerir que se importe la clave PGP del firmante del instalador, para que as\u00ed el sistema lo valide. Si no se importase la clave del firmante, algunos gestores de paquetes dar\u00e1n un error durante el proceso de instalaci\u00f3n sin indicar el motivo del error. Para la instalaci\u00f3n mediante el asistente de paquetes, se debe hacer doble clic en el fichero de la distribuci\u00f3n (.rpm), tras lo cual se pedir\u00e1 la contrase\u00f1a de administrador. Una vez introducida, se abrir\u00e1 una ventana similar a la siguiente, seg\u00fan sea el gestor de paquetes del sistema. En el ejemplo mostrado, se puede ver el gestor de paquetes YaST. < Al pulsar el bot\u00f3n Aceptar, se inicia el proceso de instalaci\u00f3n: < Tras finalizar el proceso de instalaci\u00f3n, se mostrar\u00e1 una pantalla con el resultado del mismo: <","title":"Instalaci\u00f3n mediante el asistente de paquetes"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#desinstalacion-del-paquete-rpm","text":"Para realizar la desinstalaci\u00f3n del sistema se puede utilizar el siguiente comando. sudo rpm \u2013e autofirma Cuando el proceso termine, la aplicaci\u00f3n habr\u00e1 sido correctamente desinstalada del sistema.","title":"Desinstalaci\u00f3n del paquete RPM"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#actualizacion","text":"","title":"Actualizaci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#actualizacion-del-paquete-con-rpm","text":"Para actualizar desde AutoFirma 1.8 a una posterior usaremos el comando: sudo rpm -U autofirma-X.Y.Z.noarch.rpm Sin embargo, cuando queremos actualizar desde una versi\u00f3n anterior a AutoFirma 1.8, deberemos indicar que durante la actualizaci\u00f3n no se ejecute el proceso de desinstalaci\u00f3n de esa versi\u00f3n, ya que inclu\u00eda un error que imped\u00eda el proceso. Para ello usaremos el comando: sudo rpm -U --nopreun --nopostun autofirma-X.Y.Z.noarch.rpm Cuando el proceso termine, la aplicaci\u00f3n habr\u00e1 sido correctamente actualizada.","title":"Actualizaci\u00f3n del paquete con RPM"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#apple-macos","text":"","title":"Apple macOS"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#instalador-pkg","text":"La instalaci\u00f3n de AutoFirma en macOS debe realizarla un usuario con permisos de administrador. El archivo de instalaci\u00f3n se distribuye con el nombre \u201cAutoFirma_X.Y.Z.pkg\u201d, donde X, Y y Z (opcional) son los n\u00fameros de la versi\u00f3n. Por ejemplo, \u201cAutoFirma_1.6.pkg\u201d corresponder\u00eda a AutoFirma versi\u00f3n 1.6. AutoFirma es compatible con las versiones de macOS Sierra y superiores. Los navegadores compatibles son Apple Safari, Google Chrome y Mozilla Firefox. Para la instalaci\u00f3n de la aplicaci\u00f3n, se debe hacer doble clic sobre el fichero. El sistema abrir\u00e1 el asistente que se encargar\u00e1 de realizar los pasos a seguir para la correcta instalaci\u00f3n de la aplicaci\u00f3n. < Para iniciar el proceso de instalaci\u00f3n, hay que pulsar el bot\u00f3n \u201cContinuar\u201d, tras lo que se nos mostrar\u00e1 el acuerdo de licencia. < Una vez le\u00edda la licencia del producto, se puede pulsar \u201cContinuar\u201d. En ese momento, se indicar\u00e1 que se debe aceptar la licencia. Al pulsar el bot\u00f3n \"Aceptar\u201d se acepta la licencia y contin\u00faa con la instalaci\u00f3n. En la siguiente pantalla se mostrar\u00e1 seleccionar la unidad en la que se almacenar\u00e1 la aplicaci\u00f3n: < En esta pantalla se debe seleccionar la unidad principal y pulsar \u201cContinuar\u201d para ver el detalle resumen del proceso de instalaci\u00f3n. < En esta pantalla se puede ver cu\u00e1nto espacio en disco ocupar\u00e1 la aplicaci\u00f3n. Al pulsar el bot\u00f3n \u201cInstalar\u201d, se comienza la instalaci\u00f3n del producto. Para completar la instalaci\u00f3n ser\u00e1 necesario indicar el nombre de usuario y contrase\u00f1a de un usuario con permisos de administrador, ya que ser\u00e1 necesario instalar certificados de confianza en el almac\u00e9n del sistema y Firefox. < En caso de detectarse que el navegador Mozilla Firefox est\u00e1 en ejecuci\u00f3n, se pedir\u00e1 al usuario que lo cierre para continuar con el proceso de instalaci\u00f3n. Finalmente, se informar\u00e1 del resultado de la instalaci\u00f3n. <","title":"Instalador PKG"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#desinstalacion_1","text":"Para desinstalar la aplicaci\u00f3n basta con eliminar la carpeta que se gener\u00f3 en el directorio /Applications. Tambi\u00e9n es recomendable eliminar los certificados identificados como \u201cAutoFirma ROOT\u201d y \u201c127.0.0.1\u201d del llavero de macOS. Puede realizarse esto accediendo a la aplicaci\u00f3n \u201cAcceso a Llaveros\u201d, seleccion\u00e1ndose el llavero \u201cSistema\u201d y eliminando del listado los certificados mencionados.","title":"Desinstalaci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#gestion-de-autofirma","text":"","title":"Gesti\u00f3n de AutoFirma"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#comprobaciones-de-nuevas-versiones-al-inicio-de-la-aplicacion","text":"AutoFirma siempre comprueba al arrancar si hay una versi\u00f3n m\u00e1s actual disponible para descarga desde la p\u00e1gina Web del proyecto para evitar que se realicen tr\u00e1mites de firma con una versi\u00f3n obsoleta o antigua que pudiese tener instalada el ciudadano. Es posible deshabilitar esta comprobaci\u00f3n de diversas maneras: Un usuario puede desactivar la actualizaci\u00f3n por medio de la opci\u00f3n \u201cBuscar actualizaciones al inicio\u201d en la pesta\u00f1a General del men\u00fa de preferencias de la aplicaci\u00f3n. Un usuario o administrador puede desactivar la actualizaci\u00f3n por medio del fichero de configuraci\u00f3n con la opci\u00f3n checkForUpdates. Consulte el apartado 6.2 Configuraci\u00f3n a trav\u00e9s de fichero para m\u00e1s informaci\u00f3n. Un usuario o administrador puede desactivar la actualizaci\u00f3n estableciendo, a nivel de sistema operativo, la siguiente variable de entorno AUTOFIRMA_AVOID_UPDATE_CHECK con el valor true. Es posible que sea necesario reiniciar el equipo para que la JVM detecte correctamente el nuevo valor de esta variable. En el caso de Windows, por ejemplo, esto ser\u00eda: < La inhabilitaci\u00f3n de las comprobaciones de actualizaci\u00f3n s\u00f3lo ser\u00eda recomendable en entornos controlados (corporativos, internos a una administraci\u00f3n, etc.) o cuando se sepa de problemas de incompatibilidad de las nuevas versiones con alguna aplicaci\u00f3n. Por regla general, siempre es conveniente descargar e instalar las \u00faltimas versiones disponibles. La URL a la que se conecta AutoFirma por defecto para comprobar la existencia de actualizaciones es: http://estaticos.redsara.es/comunes/autofirma/autofirma.version El c\u00f3digo de versi\u00f3n de AutoFirma 1.8 es: 13 En caso de detectarse una nueva versi\u00f3n, AutoFirma permitir\u00e1 al usuario abrir la p\u00e1gina de descarga de la aplicaci\u00f3n. La p\u00e1gina que se abrir\u00e1 por defecto es: http://firmaelectronica.gob.es/Home/Descargas.html Tanto la URL del c\u00f3digo de la versi\u00f3n m\u00e1s reciente de AutoFirma como la URL de descarga se pueden configurar mediante el fichero de configuraci\u00f3n. Esto es \u00fatil para evitar en entornos controlados que AutoFirma informe a los usuarios de las actualizaciones oficiales de la aplicaci\u00f3n y no sea hasta que los administradores comprueben su correcto funcionamiento cuando se les notifique y se les redirija a una web de descargas del propio organismo. Esto se realiza mediante las opciones updater.url.version y updater.url.site. Consulte el apartado 6.2 Configuraci\u00f3n a trav\u00e9s de fichero para m\u00e1s informaci\u00f3n. El administrador de red debe asegurar que los equipos de los usuarios tienen acceso a estas URL si se desea que sean los propios usuarios los encargados de identificar las nuevas versiones e instalarlas en sus equipos.","title":"Comprobaciones de nuevas versiones al inicio de la aplicaci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#configuracion-a-traves-de-fichero","text":"AutoFirma permite que se configure a trav\u00e9s de un fichero importado desde la pesta\u00f1a General del panel de Preferencias de la aplicaci\u00f3n. Esta opci\u00f3n est\u00e1 orientada principalmente a su uso por parte de administradores que hagan despliegues de la aplicaci\u00f3n y que requieren que sus usuarios utilicen siempre unas propiedades concretas de firma. El fichero de configuraci\u00f3n debe tener como extensi\u00f3n \u201c.afconfig\u201d. Es importante notar que las propiedades establecidas a trav\u00e9s del men\u00fa de preferencias s\u00f3lo afectan a la ejecuci\u00f3n de la aplicaci\u00f3n en modo escritorio. En las operaciones de firma solicitadas desde un navegador web siempre se utilizar\u00e1 la configuraci\u00f3n de firma proporcionada por la aplicaci\u00f3n web. Excepci\u00f3n a esto es la configuraci\u00f3n de red (proxy y criterios de seguridad sobre los certificados SSL), que afectar\u00e1n a la ejecuci\u00f3n de la aplicaci\u00f3n en ambas modalidades. Este fichero no tiene porqu\u00e9 contener todas las propiedades que admite la aplicaci\u00f3n, puede contener s\u00f3lo aquellas que deseamos configurar. Si se importa un fichero que no define el valor de alguna propiedad, esta propiedad tendr\u00e1 asignada el valor por defecto de la aplicaci\u00f3n o, si se modific\u00f3 previamente, el valor que ya tuviese asignado. Las opciones que se podr\u00e1n configurar ser\u00e1n todas aquellas que pueden establecerse a trav\u00e9s del panel de preferencias de la aplicaci\u00f3n, adem\u00e1s de alguna opci\u00f3n adicional. El listado completo de opciones configurables aparece en el apartado 6.4 Opciones configurables . El fichero de configuraci\u00f3n en cuesti\u00f3n, ser\u00e1 un fichero PList, compuesto por un diccionario con el listado de claves y valores de las propiedades. Las claves siempre se designar\u00e1n mediante una cadena de texto y el valor puede ser una cadena (String) o un valor de tipo verdadero/falso (true/false). Este fichero PList puede firmarse con una firma en formato XAdES Enveloped. Si se delega en los usuarios la importaci\u00f3n del fichero de configuraci\u00f3n, puede pedir que comprueben el firmante del fichero con una herramienta externa como VALIDe para que confirmen que se firm\u00f3 con el certificado adecuado.","title":"Configuraci\u00f3n a trav\u00e9s de fichero"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#bloqueo-de-la-configuracion","text":"Un uso interesante de la configuraci\u00f3n de la aplicaci\u00f3n entre los usuarios de un organismo o entidad es que permite bloquear las opciones que el usuario va a poder modificar. Hay opciones que son especialmente interesantes de fijar para que se apliquen a todas las firmas, como las pol\u00edticas de firma, y otras que no se pueden bloquear debido a que afectan en gran medida al contexto de cada firma, como el lugar de realizaci\u00f3n de la firma o si se quiere hacer visible la firma de los PDF. La configuraci\u00f3n de la aplicaci\u00f3n puede bloquearse por medio de la opci\u00f3n \u201cpreferencesUnprotected\u201d, como se describe en el apartado 6.4.6 Opciones no configurables desde la ventana de preferencias . Se indican aqu\u00ed las propiedades del panel de preferencias que el usuario va a poder seguir configurando, aunque se bloquee la configuraci\u00f3n general de la aplicaci\u00f3n: Pesta\u00f1a General No pedir confirmaci\u00f3n al cerrar la aplicaci\u00f3n No mostrar la pantalla inicial de DNIe y trabajar siempre con cualquier certificado Buscar actualizaciones al inicio Enviar estad\u00edsticas de uso de forma an\u00f3nima para ayudar a mejorar el uso de la aplicaci\u00f3n Validar confianza SSL Configuraci\u00f3n del proxy < Pesta\u00f1a Firmas PAdES Metadatos para firmas PAdES Firma visible < Pesta\u00f1a Firmas XAdES Metadatos de las firmas XAdES < Pesta\u00f1a Factura electr\u00f3nica Metadatos de las facturas electr\u00f3nicas Papel del firmante de la factura electr\u00f3nica <","title":"Bloqueo de la configuraci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#firma-del-fichero-de-configuracion","text":"El fichero de configuraci\u00f3n deber\u00e1 estar firmado con una firma XAdES Enveloped y un certificado emitido por la autoridad intermedia definida por el Ministerio de Defensa en el momento de empaquetar la aplicaci\u00f3n AutoFirma para su distribuci\u00f3n. El administrador encargado de configurar y distribuir este fichero puede firmarlo con la propia herramienta AutoFirma. Los pasos para preparar la aplicaci\u00f3n para la firma de este fichero son: Disponer del certificado de firma en el almac\u00e9n prioritario configurado en la aplicaci\u00f3n o en el almac\u00e9n por defecto, si no se dispone del certificado en tarjeta criptogr\u00e1fica. Desde la pesta\u00f1a de configuraci\u00f3n \u201cGeneral\u201d de las preferencias de la aplicaci\u00f3n, configurar que los \u201cFicheros XML gen\u00e9ricos\u201d se firmen con firma \u201cXAdES\u201d. En la pesta\u00f1a \u201cFirma XAdES\u201d de las preferencias de la aplicaci\u00f3n, configurar que el formato de firma XAdES sea \u201cXAdES Enveloped\u201d. A continuaci\u00f3n, podr\u00e1 firmarse el fichero de configuraci\u00f3n normalmente, seleccionando como certificado de firma el configurado en el primer paso.","title":"Firma del fichero de configuraci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#ejemplo-de-fichero-de-configuracion","text":"A continuaci\u00f3n se muestra el contenido de un fichero simple de configuraci\u00f3n: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <plist version=\"1.0\"> <dict> <key>cadesImplicitMode</key> <string>attached</string> <key>createHashAsBase64</key> <true/ > </dict> </plist> En este fichero se establece que las firmas CAdES contengan por defecto los datos firmados (cadesImplicitMode) y que las huellas digitales realizadas se generen en base 64 (createHashAsBase64). El resto de la configuraci\u00f3n del usuario permanecer\u00e1 tal como estaba en el momento de importar el fichero de configuraci\u00f3n. En este ejemplo, el fichero de configuraci\u00f3n no est\u00e1 firmado.","title":"Ejemplo de fichero de configuraci\u00f3n"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#configuracion-a-traves-del-registro-en-microsoft-windows","text":"Es com\u00fan que en los entornos controlados de usuarios se disponga de herramientas para el despliegue masivo de aplicaciones y que estas tambi\u00e9n permitan la configuraci\u00f3n del sistema alterando directamente el registro de Microsoft Windows. Cuando este es el caso, el administrador del sistema podr\u00e1 configurar el comportamiento de AutoFirma modificando diversas claves de registro. AutoFirma almacena en el registro de Windows todas las opciones de configuraci\u00f3n establecidas mediante el panel de preferencias o un fichero de configuraci\u00f3n importado. Concretamente, la configuraci\u00f3n de AutoFirma se almacena en la clave de registro: HKEY_CURRENT_USER\\Software\\JavaSoft\\Prefs\\es\\gob\\afirma\\standalone\\ui\\preferences Un administrador puede establecer a trav\u00e9s del registro todas las opciones declaradas en el apartado 6.4 Opciones configurables para determinar as\u00ed el comportamiento de AutoFirma.","title":"Configuraci\u00f3n a trav\u00e9s del registro en Microsoft Windows"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#opciones-configurables","text":"Las opciones de configuraci\u00f3n que se pueden establecer mediante fichero o a trav\u00e9s del registro de Windows se presentan a continuaci\u00f3n, separadas seg\u00fan la pesta\u00f1a del panel de preferencias en la que se encuentran y reunidas en un apartado \u201cOpciones globales\u201d aquellas que no puede configurar directamente el usuario.","title":"Opciones configurables"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#opciones-generales","text":"Clave Tipo Descripci\u00f3n omitAskOnClose true/false Evita la confirmaci\u00f3n al cerrar la aplicaci\u00f3n o no. Un valor de true en esta preferencia permitir\u00e1 cerrar la aplicaci\u00f3n sin ning\u00fan di\u00e1logo de advertencia. Un valor de false (por defecto) har\u00e1 que se muestre un di\u00e1logo para que el usuario confirme que realmente desea cerrar la aplicaci\u00f3n. hideDnieStartScreen true/false No mostrar la pantalla inicial de uso de DNIe. Un valor de true en esta preferencia hace que nunca se muestre la pantalla inicial que sugiere al usuario el uso directo del DNIe como almac\u00e9n de claves. Un valor de false (por defecto) har\u00e1 que se muestre esta pantalla al inicio siempre que se detecte un lector de tarjetas en el sistema. checkForUpdates true/false Buscar actualizaciones al iniciar la aplicaci\u00f3n. Un valor de true (por defecto) en esta preferencia hace que, al iniciar la aplicaci\u00f3n, se compruebe autom\u00e1ticamente si hay publicadas versiones m\u00e1s actuales. Un valor de false har\u00e1 que no se haga esta comprobaci\u00f3n. useAnalytics true/false Env\u00eda estad\u00edsticas de uso. El valor true (por defecto) hace que, al arrancar, la aplicaci\u00f3n env\u00ede de forma an\u00f3nima estad\u00edsticas de uso a Google Analytics . El valor false har\u00e1 que no se env\u00ede ning\u00fan dato. enabledJmulticard true/false Habilita el uso de JMulticard para la firma con DNIe y tarjetas CERES. El valor true (por defecto) hace que tanto al seleccionar \u201cUsar cualquier certificado\u201d en la pantalla principal como cuando se invoca a AutoFirma desde un navegador, se utilice JMulticard si el usuario selecciona un certificado en tarjeta CERES o DNIe. El valor false har\u00e1 que se utilicen los controladores oficiales de estas tarjetas para listar los certificados y firmar con ellos. signatureHashAlgorithm String Algoritmo de huella para la firma. Esta preferencia debe tener uno de estos valores: SHA1 SHA256 (Por defecto) SHA384 SHA512 defaultSignatureFormatPdf String Formato en el que se firmar\u00e1n los documentos PDF. Esta preferencia debe tener uno de estos valores: PAdES (Por defecto) CAdES XAdES defaultSignatureFormatOoxml String Formato en el que se firmar\u00e1n los documentos OOXML. Esta preferencia debe tener uno de estos valores: OOXML (Office Open XML) (Por defecto) CAdES XAdES defaultSignatureFormatFacturae String Formato en el que se firmar\u00e1n las facturas electr\u00f3nicas. Esta preferencia debe tener uno de estos valores: FacturaE (Por defecto) CAdES XAdES defaultSignatureFormatXml String Formato en el que se firmar\u00e1n los documentos XML. Esta preferencia debe tener uno de estos valores: XAdES (Por defecto) CAdES defaultSignatureFormatOdf String Formato en el que se firmar\u00e1n los documentos ODF (LibreOffice, OpenOffice.org\u2026). Esta preferencia debe tener uno de estos valores: ODF (Open Document Format) (Por defecto) CAdES XAdES defaultSignatureFormatBin String Formato en el que se firmar\u00e1n los ficheros binarios. Esta preferencia debe tener uno de estos valores: CAdES (Por defecto) XAdES confirmToSign true/false Solicitar confirmaci\u00f3n para firmar. El valor true (por defecto) har\u00e1 que antes de cada proceso de firma se muestre un di\u00e1logo de confirmaci\u00f3n, mientras que el valor false lo omitir\u00e1. showExpiredCerts true/false Permitir el uso de certificados caducados para firmar. El valor true mostrar\u00e1 estos certificados en el di\u00e1logo de selecci\u00f3n y permitir\u00e1 la firma con ellos, mientras que el valor false (por defecto) los omitir\u00e1. allowInvalidSignatures true/false Omitir la validaci\u00f3n de las firmas de entrada. El valor true omitir\u00e1 la validaci\u00f3n de las firmas, de tal forma que se podr\u00e1n cofirmar y contrafirmar firmas que se ha identificado que no son v\u00e1lidas (esta validaci\u00f3n no incluye la del certificado de firma). El valor false (por defecto), hace que se obvie la validez de las firmas. massiveOverride true/false Establece que, en las operaciones de firma masiva, se sobreescriban los ficheros que se encuentren en el directorio de salida con el mismo nombre que los nuevos ficheros que se van a guardar. El valor true sobreescribir\u00e1 los ficheros. El valor false (por defecto), cambiar\u00e1 el nombre del nuevo fichero agreg\u00e1ndole un n\u00famero entre par\u00e9ntesis cuando ya existiese un fichero con ese nombre en el directorio de salida. secureConnections true/false Comprobar la confianza de los certificados SSL. Si se deshabilita, se permitir\u00e1 conectar con servicios con un cifrado SSL realizado con certificados caducados, emitidos para otros dominios o expedidos por prestadores desconocidos. Puede ser necesario si usamos certificados SSL emitidos por algunos prestadores espa\u00f1oles, aunque, en ese caso, se recomienda introducir sus certificados de CA en el almac\u00e9n de confianza de la JRE. proxyType CUSTOM / Tipo de configuraci\u00f3n del proxy. Admite los valores: NONE: Sin proxy. SYSTEM: Configuraci\u00f3n del sistema. Esta opci\u00f3n podr\u00eda no heredar excepciones o la configuraci\u00f3n de seguridad para el acceso al servicio proxy. CUSTOM: Configuraci\u00f3n manual. En este caso, se deben configurar, al menos, las propiedades \u201cproxyHost\u201d y \u201cproxyPort\u201d. proxyHost String URL del servicio del servidor proxy. proxyPort String N\u00famero de puerto para la comunicaci\u00f3n con el servidor proxy. proxyUsername String Nombre de usuario con el que acceder al servidor proxy. proxyPassword String Contrase\u00f1a del usuario para la conexi\u00f3n con el servidor proxy. proxyExcludedUrls String Listado de nombres de dominios y direcciones IP, separados por comas (\u2018,\u2019) y en los que se puede usar asterisco (\u2018*\u2019) como comod\u00edn, para los que AutoFirma no deber\u00eda utilizar proxy. IMPORTANTE: Aqu\u00ed deber\u00edan incluirse las direcciones de nuestra intranet. De no hacerlo, es posible que AutoFirma no funcione correctamente en los tr\u00e1mites web desplegados en dominios de la intranet.","title":"Opciones Generales"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#firmas-pades-pdf","text":"Clave Tipo Descripci\u00f3n padesPolicyIdentifier String Identificador de la pol\u00edtica de firma para PAdES. padesPolicyIdentifierHash String Huella digital, en Base64, del identificador de la pol\u00edtica de firma para PAdES. padesPolicyIdentifierHashAlgorithm String Algoritmo de la huella digital del identificador de la pol\u00edtica de firma para PAdES. Esta preferencia debe tener uno de estos valores: SHA1 (Por defecto) SHA-512 SHA-384 SHA-256 padesPolicyQualifier String Calificador de la pol\u00edtica de firma para PAdES. padesSignReason String Motivo de la firma en firmas PAdES. padesSignProductionCity String Ciudad de firma para firmas PAdES. padesSignerContact String Contacto del firmante en firmas PAdES. padesBasicFormat String Formato de firma PAdES. Esta preferencia debe tener uno de estos valores: PAdES-BES PAdES B\u00e1sico (Por defecto) padesObfuscateCertInfo true/false Omitir informaci\u00f3n del documento de identidad del usuario de la firma visible PDF. Si est\u00e1 establecido a true, se detectar\u00e1n los identificadores del usuario (n\u00famero de DNI, NIE, pasaporte, etc.) extra\u00eddos del certificado y se omitir\u00e1n en la firma visible PDF (s\u00f3lo en la presentaci\u00f3n visible, los datos del certificado ser\u00e1n los que correspondan). Si est\u00e1 a false (valor por defecto), no se codificar\u00e1 esta informaci\u00f3n. padesVisibleSignature true/false Si est\u00e1 establecido a true, establece por defecto que se pida al usuario que determine mediante di\u00e1logos gr\u00e1ficos los par\u00e1metros de una firma visible PDF y se inserte como tal en el documento. Si est\u00e1 a false (valor por defecto), se realizar\u00e1n firmas invisibles PDF. padesVisibleStamp true/false Si est\u00e1 establecido a true, establece por defecto que se pida al usuario que determine mediante di\u00e1logos gr\u00e1ficos los par\u00e1metros de una marca visible PDF (que podr\u00e1 agregarse a m\u00e1s de una p\u00e1gina). Esta marca es una imagen que se agregar\u00e1 al documento antes de ejecutar la firma. Si est\u00e1 a false (valor por defecto), no se permitir\u00e1 agregar esta imagen.","title":"Firmas PAdES (PDF)"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#firmas-cades","text":"Clave Tipo Descripci\u00f3n cadesPolicyIdentifier String Identificador de la pol\u00edtica de firma para CAdES. cadesPolicyIdentifierHash String Huella digital, en Base64, del identificador de la pol\u00edtica de firma para CAdES. cadesPolicyIdentifierHashAlgorithm String Algoritmo de la huella digital del identificador de la pol\u00edtica de firma para CAdES. Esta preferencia debe tener uno de estos valores: SHA1 (Por defecto) SHA-512 SHA-384 SHA-256 cadesPolicyQualifier String Calificador de la pol\u00edtica de firma para CAdES. cadesImplicitMode String Indica si la firma CAdES debe realizarse en modo impl\u00edcito ( attached ) (por defecto) o no ( detached ). cadesMultisignCosign true/false Indica que, por defecto, las multifirmas CAdES deben ser cofirmas. Esta opci\u00f3n es excluyente con el resto de opciones \u201ccadesMultisign\u201d. cadesMultisignCountersignLeafs true/false Indica que, por defecto, las multifirmas CAdES deben ser contrafirmas de los nodos hoja. Esta opci\u00f3n es excluyente con el resto de opciones \u201ccadesMultisign\u201d. cadesMultisignCountersignTree true/false Indica que, por defecto, las multifirmas CAdES deben ser contrafirmas de todo el \u00e1rbol de firma. Esta opci\u00f3n es excluyente con el resto de opciones \u201ccadesMultisign\u201d.","title":"Firmas CAdES"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#firmas-xades","text":"Clave Tipo Descripci\u00f3n xadesPolicyIdentifier String Identificador de la pol\u00edtica de firma para XAdES. xadesPolicyIdentifierHash String Huella digital, en Base64, del identificador de la pol\u00edtica de firma para XAdES. xadesPolicyIdentifierHashAlgorithm String Algoritmo de la huella digital del identificador de la pol\u00edtica de firma para XAdES. Esta preferencia debe tener uno de estos valores: SHA1 (Por defecto) SHA-512 SHA-384 SHA-256 xadesPolicyQualifier String Calificador de la pol\u00edtica de firma para XAdES. xadesSignatureProductionCity String Ciudad en la que se realiza la firma. xadesSignatureProductionProvince String Provincia en la que se realiza la firma. xadesSignatureProductionPostalCode String C\u00f3digo postal en la que se realiza la firma. xadesSignatureProductionCountry String Pa\u00eds en la que se realiza la firma. xadesSignerClaimedRole String Cargo supuesto para el firmante. xadesSignFormat String Formato de las firmas XAdES. Esta preferencia debe tener uno de estos valores: XAdES Detached XAdES Enveloping (Por defecto) XAdES Enveloped xadesMultisignCosign true/false Indica que, por defecto, las multifirmas XAdES deben ser cofirmas. Esta opci\u00f3n es excluyente con el resto de opciones \u201cxadesMultisign\u201d. xadesMultisignCountersignLeafs true/false Indica que, por defecto, las multifirmas XAdES deben ser contrafirmas de los nodos hoja. Esta opci\u00f3n es excluyente con el resto de opciones \u201cxadesMultisign\u201d. xadesMultisignCountersignTree true/false Indica que, por defecto, las multifirmas XAdES deben ser contrafirmas de todo el \u00e1rbol de firma. Esta opci\u00f3n es excluyente con el resto de opciones \u201cxadesMultisign\u201d.","title":"Firmas XAdES"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#firmas-factura-electronica","text":"Clave Tipo Descripci\u00f3n facturaEPolicy String Versi\u00f3n de la pol\u00edtica de firma de factura electr\u00f3nica. Los valores posibles son: 3.0: Policita de firma 3.0. 3.1: Policita de firma 3.1 (por defecto). Esta propiedad configura el resto de propiedades de la pol\u00edtica de firma de factura cuando se establece desde la interfaz gr\u00e1fica. Al establecerlo mediante fichero de configuraci\u00f3n es necesario establecer tambi\u00e9n las siguientes 3 propiedades: facturaePolicyIdentifier, facturaePolicyIdentifierHash y facturaePolicyIdentifierHashAlgorithm facturaePolicyIdentifier String Establece el identificador de la pol\u00edtica de firma de factura electr\u00f3nica. Para configurar la pol\u00edtica de firma 3.0 se debe establecer el valor: http://www.facturae.es/politica de firma formato facturae/politica de firma formato facturae v3_0.pdf Para configurar la pol\u00edtica de firma 3.0 se debe establecer el valor: http://www.facturae.es/politica_ de_firma_formato_facturae/ politica_de_firma_formato_ facturae_v3_1.pdf facturaePolicyIdentifierHash String Establece la huella digital de la pol\u00edtica de firma de factura electr\u00f3nica. Para configurar la pol\u00edtica de firma 3.0 se debe establecer el valor: xmfh8D/Ec/hHeE1IB4zPd61zHIY= Para configurar la pol\u00edtica de firma 3.0 se debe establecer el valor: Ohixl6upD6av8N7pEvDABhEL6hM= facturaePolicyIdentifierHashAlgorithm String Algoritmo de la huella digital del identificador de la pol\u00edtica de firma de factura electr\u00f3nica. Para configurar las pol\u00edticas de firma 3.0 y 3.1 se debe establecer el valor: SHA1 facturaeSignatureProductionCity String Ciudad en la que se realiza la firma. facturaeSignatureProductionProvince String Provincia en la que se realiza la firma. facturaeSignatureProductionPostalCode String C\u00f3digo postal en el que se realiza la firma. facturaeSignatureProductionCountry String Pa\u00eds en el que se realiza la firma. facturaeSignerRole String Rol ejercido por el firmante en el proceso de firma. Debe tener uno de estos valores: Emisor (Por defecto) Receptor Tercero","title":"Firmas Factura Electr\u00f3nica"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#opciones-no-configurables-desde-la-ventana-de-preferencias","text":"Clave Tipo Descripci\u00f3n preferencesBlocked true/false Proteger cambios en preferencias. Un valor de true en esta preferencia indica que deben limitarse las opciones de configuraci\u00f3n mediante interfaz gr\u00e1fico, apareciendo de forma deshabilitada (solo para consulta). Un valor de false habilitar\u00e1 que cualquier opci\u00f3n de configuraci\u00f3n pueda ser alterada por parte del usuario mediante el interfaz gr\u00e1fico. createHashAsBase64 true/false Si est\u00e1 establecido a true (valor por defecto), se generan las huellas digitales de fichero en base64. Si es false, se generar\u00e1n en binario. createHashAlgorithm String Algoritmo de huella digital por defecto para la creaci\u00f3n de huellas digitales. Esta preferencia debe tener uno de estos valores: SHA1 SHA-512 (Por defecto) SHA-384 SHA-256 createHashCopyToClipBoard true/false Copiar huella al portapapeles. El valor true (por defecto) indica que, por defecto, se debe copiar al portapapeles del sistema el valor de huella generado. El valor false indica que no se copie. createHashFormat String Formato en el que almacenar la huella digital de un fichero. Esta preferencia debe tener uno de estos valores: hex: Codificada en hexadecimal. Valor por defecto. b64: Codificada en Base 64. bin: Binario sin codificar. createHashDirectoryAlgorithm String Algoritmo de huella digital por defecto para la creaci\u00f3n de huellas digitales de directorios. Esta preferencia debe tener uno de estos valores: SHA1 SHA-512 (Por defecto) SHA-384 SHA-256 createHashDirectoryRecursive true/false Procesar subdirectorios en la operaci\u00f3n de c\u00e1lculo de huella digital de directorios. El valor true (por defecto) hace que se procesen, mientras que el valor false configura que no se procesen. updater.url.version String URL remota del fichero que define el c\u00f3digo de versi\u00f3n de la versi\u00f3n m\u00e1s reciente de AutoFirma. Consulte el apartado \u201cComprobaciones de nuevas versiones al inicio de la aplicaci\u00f3n\u201d para m\u00e1s detalles. updater.url.site String URL de la p\u00e1gina web desde la que descargar las nuevas versiones de AutoFirma. Consulte el apartado \u201cComprobaciones de nuevas versiones al inicio de la aplicaci\u00f3n\u201d para m\u00e1s detalles.","title":"Opciones no configurables desde la ventana de preferencias"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#obtencion-de-estadisticas-con-google-analytics","text":"AutoFirma utiliza Google Analytics para recoger informaci\u00f3n acerca de su uso. Esta informaci\u00f3n se limita al hecho de haber ejecutado AutoFirma y la IP del equipo. En ning\u00fan momento se recoge informaci\u00f3n personal del usuario u otra informaci\u00f3n del equipo m\u00e1s que la IP asignada. A la informaci\u00f3n recabada s\u00f3lo puede acceder el grupo de trabajo del Cliente @firma y este se compromete a que su uso se limita a conocer el n\u00famero aproximado de usuarios de la herramienta. La obtenci\u00f3n de estos datos se realiza en segundo plano al ejecutarse AutoFirma y el resultado de su obtenci\u00f3n y env\u00edo no afecta al uso de la propia herramienta. As\u00ed pues, AutoFirma podr\u00eda no llegar a enviar los datos obtenidos, por ejemplo, por encontrarse detr\u00e1s de un proxy de red, sin que esto afecte a su funcionalidad. El usuario puede deshabilitar el env\u00edo de informaci\u00f3n a Google Analytics desde el panel de preferencias de la herramienta. Tambi\u00e9n se puede configurar que deje de enviarse esta informaci\u00f3n por medio de la variable de entorno \u201ces.gob.afirma.doNotSendAnalytics\u201d. En caso de establecer esta variable a \u201ctrue\u201d se deshabilitar\u00e1 el env\u00edo de informaci\u00f3n. En caso contrario, se seguir\u00e1 enviando. En caso de configurarse la mencionada variable, no se enviar\u00e1 ninguna informaci\u00f3n a Google Analytics, independientemente de que el usuario haya configurado o no el env\u00edo de los datos a trav\u00e9s del men\u00fa de preferencias de AutoFirma.","title":"Obtenci\u00f3n de estad\u00edsticas con Google Analytics"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#habilitar-en-firefox-la-confianza-en-los-certificados-raiz-del-sistema","text":"Mozilla Firefox permite un modo de configuraci\u00f3n en Windows y macOS con el cual, adem\u00e1s de confiar en los certificados ra\u00edz de su almac\u00e9n de confianza, puede confiar tambi\u00e9n en los certificados en el almac\u00e9n de confianza del sistema. Habilitar esta configuraci\u00f3n implica diversas ventajas para el usuario: Puede instalar los certificados \u00fanicamente en el almac\u00e9n del sistema. No es necesario que los instale en el almac\u00e9n de confianza de Firefox En entornos en los datos de la cuenta del usuario se carga desde un servidor, no es necesario transferir los datos del almac\u00e9n de confianza de Firefox. La configuraci\u00f3n del almac\u00e9n de confianza de Firefox se puede establecer durante la instalaci\u00f3n de AutoFirma en Windows o mediante la opci\u00f3n de \u201cReparaci\u00f3n de la instalaci\u00f3n\u201d de la aplicaci\u00f3n en Windows o macOS. La opci\u00f3n de reparaci\u00f3n de la instalaci\u00f3n habilitar\u00e1 o deshabilitar\u00e1 esta opci\u00f3n seg\u00fan se haya marcado no la casilla de verificaci\u00f3n antes de iniciar el proceso de restauraci\u00f3n. <","title":"Habilitar en Firefox la confianza en los certificados ra\u00edz del sistema"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#problemas-conocidos","text":"","title":"Problemas conocidos"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#al-instalar-autofirma-falla-la-instalacion-de-los-certificados-de-confianza-ssl","text":"AutoFirma requiere permisos de administrador para ser instalado y para insertar el certificado de confianza SSL para el funcionamiento de la firma en los tr\u00e1mites online. Si falla el proceso de instalaci\u00f3n de los certificados, acceda al apartado de reparaci\u00f3n de la instalaci\u00f3n de AutoFirma (Men\u00fa \u201cHerramientas\u201d \u201cRestaurar la instalaci\u00f3n\u201d) y ejecute el proceso de reinstalaci\u00f3n. En el caso de que la instalaci\u00f3n de los certificados falle \u00fanicamente en Firefox, valore la el activar la confianza de Firefox en el almac\u00e9n del sistema (s\u00f3lo para sistemas Windows y macOS). Si no puede instalar AutoFirma o el certificado de confianza y no es usted el administrador del sistema, solicite al administrador de su sistema que realice la instalaci\u00f3n de la aplicaci\u00f3n.","title":"Al instalar AutoFirma falla la instalaci\u00f3n de los certificados de confianza SSL"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#al-instalar-autofirma-en-windows-se-muestra-el-error-error-abriendo-archivo-para-escritura","text":"Es posible que durante la instalaci\u00f3n se le muestre un error como el que sigue: < Si ya ten\u00eda instalado AutoFirma, compruebe que este no se est\u00e1 ejecutando, en cuyo caso el instalador no podr\u00e1 sobrescribir los ficheros de instalaci\u00f3n. Cierre AutoFirma y pulse el bot\u00f3n reintentar. Si AutoFirma no se est\u00e1 ejecutando, es posible que el archivo en cuesti\u00f3n se encuentre bloqueado por una ejecuci\u00f3n o intento de instalaci\u00f3n previo. Reinicie su equipo y pruebe a instalar nuevamente la aplicaci\u00f3n. nuevamente la aplicaci\u00f3n.","title":"Al instalar AutoFirma en Windows se muestra el error: \u201cError abriendo archivo para escritura\u201d"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#al-instalar-autofirma-en-linux-a-partir-del-paquete-rpm-con-el-gestor-de-paquetes-del-sistema-se-muestra-el-mensaje-de-error-error-interno","text":"Es posible que no se haya importado la clave PGP de firma en el almac\u00e9n de confianza. Siga las instrucciones del apartado 5.2.2.1 Importaci\u00f3n de la clave p\u00fablica PGP del instalador para la importaci\u00f3n de la clave PGP.","title":"Al instalar AutoFirma en Linux a partir del paquete RPM con el gestor de paquetes del sistema se muestra el mensaje de error \u201cError interno\u201d"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#al-instalar-autofirma-en-linux-a-partir-del-paquete-rpm-desde-consola-aparece-el-error-nokey","text":"El mensaje \u201cNOKEY\u201d se muestra cuando se detecta que el instalador est\u00e1 firmado pero la clave no se ha importado en el sistema. Seg\u00fan el sistema, es posible que el instalador contin\u00fae con el proceso de instalaci\u00f3n o no despu\u00e9s de mostrar el mensaje. Si el instalador no completa la instalaci\u00f3n, prueba a importar la clave de firma en su sistema y repetir el proceso de instalaci\u00f3n. Puede consultar como importar la clave PGP en el apartado 5.2.2.1 Importaci\u00f3n de la clave p\u00fablica PGP del instalador .","title":"Al instalar AutoFirma en Linux a partir del paquete RPM desde consola aparece el error \u201cNOKEY\u201d"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#al-actualizar-autofirma-en-linux-a-partir-del-paquete-rpm-deja-de-funcionar","text":"AutoFirma 1.7.1 y anteriores inclu\u00edan un error en su desinstalador que imped\u00eda la correcta actualizaci\u00f3n a versiones posteriores. Para actualizar desde AutoFirma 1.7.1 o anterior a una nueva versi\u00f3n de AutoFirma es necesario indicar que no se debe ejecutar el desinstalador de la versi\u00f3n anterior durante el proceso. Por ejemplo, para actualizar mediante \u201crpm\u201d deber\u00edamos usa el comando: sudo rpm -U --nopreun --nopostun autofirma-X.Y.Z.noarch.rpm Si ya intent\u00f3 actualizar AutoFirma y ahora no funciona, desinst\u00e1lela e instale directamente la nueva versi\u00f3n.","title":"Al actualizar AutoFirma en Linux a partir del paquete RPM deja de funcionar"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#cuando-se-instala-mozilla-firefox-o-se-crea-un-nuevo-perfil-de-usuario-despues-de-la-instalacion-de-autofirma-este-no-funciona-en-firefox","text":"Durante el proceso de instalaci\u00f3n de AutoFirma se genera un certificado para la comunicaci\u00f3n entre la p\u00e1gina web y la aplicaci\u00f3n, y lo instala en los almacenes de confianza del sistema y de Firefox. Si se crea un perfil de usuario de Firefox o se instala el propio Firefox despu\u00e9s de la instalaci\u00f3n de AutoFirma, este no contar\u00e1 con el certificado entre los que considera de confianza. Para resolver este problema utilice la funci\u00f3n de restauraci\u00f3n de la instalaci\u00f3n de AutoFirma: Men\u00fa \u201cHerramientas\u201d \u201cRestaurar instalaci\u00f3n\u201d.","title":"Cuando se instala Mozilla Firefox o se crea un nuevo perfil de usuario despu\u00e9s de la instalaci\u00f3n de AutoFirma, este no funciona en Firefox"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#autofirma-se-cierra-inmediatamente-tras-ser-invocado-desde-el-navegador-web","text":"Cuando se abre AutoFirma por petici\u00f3n de un navegador web inmediatamente se abre una conexi\u00f3n entre ambas aplicaciones. Si AutoFirma detecta cualquier problema que evita que se pueda establecer esa comunicaci\u00f3n, se cierra. Esto dar\u00e1 lugar a que, pasado un tiempo, la p\u00e1gina web que intent\u00f3 realizar la operaci\u00f3n de firma informe de que no se pudo conectar con AutoFirma. Si se encuentra en esta situaci\u00f3n, utilice la funci\u00f3n de \u201cRestaurar instalaci\u00f3n\u201d de AutoFirma. Esta funci\u00f3n permitir\u00e1 reestablecer la configuraci\u00f3n y los recursos necesarios para que se pueda establecer la comunicaci\u00f3n entre el navegador y AutoFirma. La funci\u00f3n de \u201cRestauraci\u00f3n instalaci\u00f3n\u201d se encuentra disponible en el men\u00fa de herramientas de AutoFirma.","title":"AutoFirma se cierra inmediatamente tras ser invocado desde el navegador web"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#no-se-detectan-tarjetas-inteligentes-en-macos","text":"Muchas tarjetas inteligentes no disponen de los controladores necesarios para su uso a trav\u00e9s del llavero de Apple (almac\u00e9n utilizado por AutoFirma cuando se usa a trav\u00e9s de Safari, Chrome o como aplicaci\u00f3n de escritorio). En el caso concreto del DNIe y tarjetas CERES, AutoFirma es capaz de utilizarlo por medio del controlador Java que incorpora, pero con el resto de tarjetas no es posible. Para utilizar tarjetas criptogr\u00e1ficas en macOS, instale sus controladores PKCS#11 como dispositivos de seguridad en Mozilla Firefox y utilice AutoFirma a trav\u00e9s de este navegador.","title":"No se detectan tarjetas inteligentes en macOS"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#autofirma-en-macos-no-muestra-el-titulo-de-los-dialogos-de-cargar-y-guardado-de-ficheros","text":"Las nuevas versiones de macOS omiten el t\u00edtulo de los di\u00e1logos de carga y guardado de ficheros. En caso en que el integrador delegue en AutoFirma la selecci\u00f3n y el guardado de las firmas generadas, deber\u00eda tener la precauci\u00f3n de informar al usuario de esto para que en todo momento sepa qu\u00e9 operaci\u00f3n est\u00e1 realizando (carga de un fichero de datos para firma, carga de un fichero de firma para cofirma/contrafirma, guardado de una firma generada\u2026).","title":"AutoFirma en macOS no muestra el t\u00edtulo de los di\u00e1logos de cargar y guardado de ficheros"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#error-al-importar-las-opciones-de-configuracion-desde-un-fichero","text":"Si generase un fichero de configuraci\u00f3n para la importaci\u00f3n de las opciones de configuraci\u00f3n en AutoFirma y al importarlo se mostrase el mensaje de error \u201cEl fichero de preferencias es inv\u00e1lido, no se realizar\u00e1 ning\u00fan cambio en la configuraci\u00f3n\u201d, es probable que el fichero utilizado no sea un XML v\u00e1lido o que tenga alg\u00fan problema de codificaci\u00f3n. Verifique que su fichero de configuraci\u00f3n est\u00e1 bien formado y que la codificaci\u00f3n utilizada es correcta.","title":"Error al importar las opciones de configuraci\u00f3n desde un fichero"},{"location":"markdown_strict/AF_manual_instalacion_y_gestion_ES/#autofirma-no-puede-comunicarse-con-el-navegador-en-macos","text":"En algunos casos la instalaci\u00f3n de AutoFirma en macOS finaliza sin errores, pero no se instala el perfil de seguridad que permiten que AutoFirma se comunique de forma segura con el navegador web. En estos casos, al realizar una operaci\u00f3n de firma, se arrancar\u00e1 correctamente AutoFirma, pero este no ser\u00e1 capaz de transmitir el resultado de la firma al navegador web. Esto puede generar un error del navegador con el texto \u201cNo se ha podido conectar con AutoFirma.\u201d. Para solventar ese problema, utilice la funci\u00f3n de \u201cRestaurar instalaci\u00f3n\u201d de AutoFirma. Esta funci\u00f3n permitir\u00e1 reestablecer la configuraci\u00f3n y los recursos necesarios para que se pueda establecer la comunicaci\u00f3n entre el navegador y AutoFirma. La funci\u00f3n de \u201cRestauraci\u00f3n instalaci\u00f3n\u201d se encuentra disponible en el men\u00fa de herramientas de AutoFirma. En caso de que el proceso autom\u00e1tico de restauraci\u00f3n no funcione, ser\u00e1 necesario configurar manualmente la confianza en los certificados de AutoFirma. Para ello: Acceda a la aplicaci\u00f3n \u201cAcceso a llavero\u201d. Acceda al llavero \u201cSISTEMA\u201d y a la opci\u00f3n \u201cCertificados\u201d. En el listado de certificados mostrados deben aparecer los certificados \u201c127.0.0.1\u201d y \u201cAutoFirma ROOT\u201d. Si el icono que aparece junto a estos muestra el signo \u2018+\u2019, se conf\u00eda en los certificados y la comunicaci\u00f3n con AutoFirma deber\u00eda funcionar correctamente. Si no, contin\u00fae con el proceso. Haga clic sobre el certificado \u201c127.0.0.1\u201d y pulse en la opci\u00f3n \u201cConfiar\u201d. En el di\u00e1logo que debe haber aparecido, despliegue el listado \u201cAl utilizar este certificado\u201d y seleccione la opci\u00f3n \u201cConfiar siempre\u201d. Repita los pasos 4 y 5 para el certificado \u201cAutoFirma ROOT\u201d. Compruebe que en ambos certificados aparece ahora el s\u00edmbolo \u2018+\u2019 junto a su icono. Cierre la ventana de los llaveros. Introduzca la contrase\u00f1a de su usuario en el di\u00e1logo para confirmar el cambio en la configuraci\u00f3n de seguridad. < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"AutoFirma no puede comunicarse con el navegador en macOS"},{"location":"markdown_strict/ANEXO_Firma-electronica-en-varias-fases/","text":"Firma electr\u00f3nica en tres fases Descripci\u00f3n La firma electr\u00f3nica en tres fases est\u00e1 pensada para entornos donde la clave privada reside en un sistema con al menos alguna de las siguientes restricciones: El sistema no es compatible con el Cliente @firma. En este caso, dado que el 95% del c\u00f3digo se ejecuta en un sistema externo, solo es necesario portar el 5% restante. El sistema tiene unas capacidades muy limitadas en cuanto a proceso computacional, memoria o comunicaciones por red. En este caso, el sistema solo realiza una operaci\u00f3n criptogr\u00e1fica, una firma PKCS#1, mucho menos demandante de potencia de proceso que una firma completa CAdES, y, adicionalmente, no trata el documento a firmar completo, sino \u00fanicamente una peque\u00f1a cantidad de datos resultante de un pre-proceso (la pre-firma) realizado por el sistema externo, lo que resulta en un enorme decremento en las necesidades de memoria y transmisi\u00f3n de datos (esto \u00faltimo si decide omitirse la transferencia del fichero a firmar). Por motivos de seguridad, el documento a firmar no puede salir de un sistema externo. Como se ha descrito en el punto anterior, en este caso es posible omitir por completo la salida del documento del sistema externo, y puede transferirse \u00fanicamente el resultado de la pre-firma, desde la cual es imposible reconstruir el documento original. Estos condicionantes convierten la firma trif\u00e1sica en una opci\u00f3n perfectamente adaptada a los dispositivos m\u00f3viles, donde se dan tanto la heterogeneidad de sistemas operativos (Apple iOS, Google Android, RIM BlackBerry, Microsoft Windows Phone, etc.) y las limitaciones en potencia de proceso, memoria y comunicaciones; en estas \u00faltimas hay que tener en cuenta el coste, especialmente si estamos haciendo uso de una red de otro operador en itinerancia ( roaming ). En una firma trif\u00e1sica, los datos que se transfieren entre servidor y cliente consisten en (previamente el cliente ha debido iniciar una petici\u00f3n de firma trif\u00e1sica indicando referencia de documento y enviando la cadena de certificados del firmante): Atributos firmados en el caso de CAdES. Atributos firmados m\u00e1s identificador de fichero PDF y fecha de inicio del proceso (para reutilizarla en todas sus fases) en el caso de PAdES. Nodo XML a firmar (que contiene las huellas digitales de las referencias a firmar) en el caso de XAdES. El cliente devuelve al servidor en todos los casos la firma PKCS#1, acompa\u00f1ada en el caso de PAdES del identificador de fichero PDF y la fecha de inicio del proceso. El funcionamiento t\u00edpico de una firma trif\u00e1sica en la que intervienen un dispositivo m\u00f3vil, un servidor Web (que hace la pre-firma y la post-firma) y un servidor documental podr\u00eda ser el siguiente: Pre-firma: < El dispositivo m\u00f3vil solicita una pre-firma al servidor Web indicando un identificador de documento. El servidor Web solicita el documento a servidor documental. El servidor documental entrega el documento al servidor Web.\u2028 Es importante recalcar que el servidor documental no necesita almacenar ning\u00fan dato de sesi\u00f3n y que este no est\u00e1 expuesto a Internet de forma directa en ning\u00fan momento. El servidor Web calcula la pre-firma, entregando el resultado (muy peque\u00f1o en tama\u00f1o) al dispositivo. Es importante recalcar que el servidor Web no necesita almacenar ning\u00fan dato de sesi\u00f3n ni exponer los documentos directamente al dispositivo. Firma: < El dispositivo m\u00f3vil realiza, de forma completamente aislada una firma electr\u00f3nica simple (computacionalmente ligera) de los datos de la pre-firma. La clave privada del usuario nunca sale del dispositivo y no se expone externamente en ning\u00fan momento. Post-firma: < El dispositivo m\u00f3vil solicita una post-firma al servidor Web indicando un identificador de documento y proporcionando el resultado de su pre-firma firmada. El servidor Web solicita el documento a servidor documental. El servidor documental entrega el documento al servidor Web. El servidor Web calcula la post-firma y compone el documento final firmado, entregando el resultado al servidor documental para su almac\u00e9n. El servidor documental almacena el nuevo documento y devuelve un identificador al servidor Web. El servidor Web comunica al dispositivo el \u00e9xito de la operaci\u00f3n y el identificador del fichero ya firmado y almacenado. El esquema podr\u00eda ser igualmente implementado sin servidor documental, pudiendo obtener el Servidor Web el documento desde otro origen, incluyendo el propio dispositivo m\u00f3vil. Igualmente, una vez firmado el documento, su destino puede ser cualquiera, incluyendo de nuevo al propio dispositivo. Es conveniente tener en cuenta al usar firmas trif\u00e1sicas que es necesario disponer de un mecanismo para que el usuario pueda ver en todo momento los documentos que est\u00e1 firmando (una copia que refleje con fidelidad el contenido firmado puede ser suficiente) para evitar situaciones de repudio. Una ventaja adicional en las firmas trif\u00e1sicas es que, puesto que la \u00faltima fase la realiza el servidor y cuenta ya con el documento Implementaci\u00f3n La implementaci\u00f3n de la firma trif\u00e1sica es posible en cualquier caso, pero siempre teniendo en cuenta las siguientes consideraciones: CAdES La implementaci\u00f3n de firma trif\u00e1sica CAdES no presenta complicaciones extraordinarias: Dificultad: Baja No es necesaria la modificaci\u00f3n de ning\u00fan API externo a @firma. PAdES La implementaci\u00f3n de firma trif\u00e1sica PAdES presenta las siguientes peculiaridades: Dificultad: Media-Alta Es necesario modificar el API iText. Realmente, la modificaci\u00f3n de iText no supone una traba en la evoluci\u00f3n de @firma, ya que este usa una versi\u00f3n antigua concreta (2.1.7) por temas de licenciado. La dificultad de la implementaci\u00f3n de las firmas trif\u00e1sicas PAdES radica en la adici\u00f3n de elementos aleatorios (por ejemplo, el identificador de fichero) y fechas de creaci\u00f3n de secciones dentro de los documentos PDF que son necesario sincronizar entre cliente y servidor para asegurar que las huellas digitales no difieren. XAdES La implementaci\u00f3n de firma trif\u00e1sica XAdES presenta ciertas dificultades dado el encapsulamiento del API XMLDSig de Java, siendo necesario implementar el concepto de Facets de firma XML. Dificultad: Alta Es necesario modificar el API JXAdES. Realmente, la modificaci\u00f3n de iText no supone una traba en la evoluci\u00f3n de @firma, ya que estas modificaciones se realizar\u00edan conjuntamente con el equipo de JXAdES atendiendo espec\u00edficamente a las necesidades de @firma, y las modificaciones se incorporar\u00edan de forma definitiva a JXAdES. Firma electr\u00f3nica en dos fases La firma electr\u00f3nica en dos fases comparte algunos escenarios de uso preferente con la firma en tres fases, pero presenta diferencias significativas: El 90% del c\u00f3digo se ejecuta en servidor, lo que facilita migrar el 10% restante a plataforma actualmente no soportadas por el Cliente @firma. El documento inicia el proceso desde el dispositivo y lo finaliza tambi\u00e9n en el dispositivo, por lo que es adecuado para procesos donde no interviene un servidor de documentos. Se reducen las conexiones de red respecto a la firma trif\u00e1sica (solo se necesita una conexi\u00f3n), pero el tr\u00e1fico de estas aumenta, lo cual simplifica la operaci\u00f3n cuando el servidor Web requiere autenticaci\u00f3n. Se mantiene, tal y como ocurre en la firma trif\u00e1sica, una demanda baja en cuanto a potencia computacional en el dispositivo, pero no as\u00ed la demanda de memoria. Este traslado de necesidades de memoria del servidor al dispositivo permite a este primero tratar un alt\u00edsimo volumen de peticiones con un hardware de gama media. En una firma bif\u00e1sica, los datos que se transfieren entre cliente y servidor constan de: Documento a firmar. Cadena de certificados del firmante. Y la respuesta del servidor al cliente: Documento pre-firmado. Datos a firmar mediante PKCS#1. Informaci\u00f3n necesaria para insertar esta firma PKCS#1 en el documento pre-firmado. Desplazamiento ( offset ) dentro del binario donde debe colocarse la firma PKCS#1, cadena de texto a sustituir por la firma PKCS#1 (en Base64 o en su representaci\u00f3n ASCII del hexadecimal, etc.). El funcionamiento t\u00edpico de una firma bif\u00e1sica en la que intervienen un dispositivo m\u00f3vil y un servidor Web (que hace la pre-firma) podr\u00eda ser el siguiente: Pre-firma < El dispositivo m\u00f3vil solicita una pre-firma al servidor Web enviando la cadena de certificados del firmante (puede enviar igualmente el documento o el servidor Web puede obtenerlo de una fuente externa, como un servidor de documentos). El servidor Web devuelve la pre-firma al dispositivo (que contiene el documento preparado para la firma final y los datos binarios a firmar mediante PKCS#1) y da por finalizado el proceso en su extremo. Firma < El dispositivo m\u00f3vil realiza, de forma completamente aislada una firma electr\u00f3nica simple (computacionalmente ligera) PKCS#1 de los datos de la pre-firma y realiza \u00e9l mismo el proceso de inserci\u00f3n en el documento pre-firmado. Este proceso es relativamente ligero en cuanto a potencia computacional, pero puede requerir mucha memoria en el dispositivo. Recomendaciones de incorporaci\u00f3n de tecnolog\u00edas multi-fase dentro del proyecto @firma Comunicaciones entre cliente y servidor y desarrollos en la parte servidora Para la comunicaci\u00f3n entre cliente y servidor se propone el uso de tecnolog\u00edas REST (Transferencia de Estado Representacional). REST presenta numerosas ventajas respecto a otros sistemas en el \u00e1mbito de las firmas multi-fase: Es un protocolo sin estado. Combinado con una implementaci\u00f3n en la que no es necesario almacenar ning\u00fan dato de sesi\u00f3n en el servidor incrementa la seguridad del sistema, ya que en caso de compromiso de este no hay documentos del usuario almacenados susceptibles de apropiaci\u00f3n indebida. Es un protocolo simple. La ausencia de SOAP y las limitaciones en el uso de XML lo hacen apto para dispositivos con capacidades limitadas, a la vez que facilitan una implementaci\u00f3n r\u00e1pida y f\u00e1cil de mantener en el lado cliente. Se propone una implementaci\u00f3n utilizando exclusivamente tecnolog\u00edas presentes en JEE6 (sin usar API de productos externos), lo cual permite una completa independencia tecnol\u00f3gica en cuanto a servidores de aplicaciones y blinda en cierto modo la futura obsolescencia. El plantea un servicio por completo independiente del resto de servicios de servidor de la plataforma @firma (que est\u00e1n ligados a versiones obsoletas de Axis, no aptas para implementar modernos servicios basados en REST). No obstante, la aplicaci\u00f3n servidora, en forma de EAR o WAR, podr\u00e1 desplegarse en el mismo servidor de aplicaciones que la plataforma @firma, siempre que este sea compatible JEE6. Para facilitar las labores de pruebas e implantaciones de referencia se plantea proporcionar adicionalmente un servidor GassFish Embedded configurado para el arranque autom\u00e1tico del servicio. Uso del Cliente @firma en un entorno servidor El servicio servidor har\u00e1 uso del Cliente @firma a modo de bibliotecas, benefici\u00e1ndose de los trabajos de organizaci\u00f3n en m\u00f3dulos ya iniciada. Este uso como bibliotecas requerir\u00e1 un trabajo adicional para adaptarse a los entornos servidores IBM en los que se usen m\u00e1quinas virtuales espec\u00edficas de este fabricante (por ejemplo, servidores de aplicaciones WebSphere sobre hardware IBM iSeries, tanto bajo Windows como con Linux, AIX, OS/400, Z/OS, etc.). Desarrollos en la parte cliente Para la implantaci\u00f3n en la parte cliente se propone inicialmente el desarrollo de una serie de bibliotecas que implementen todas las funcionalidades necesarias para las firmas en varias fases, separando en distinta biblioteca las firmas trif\u00e1sicas y las bif\u00e1sicas. Se plantea el desarrollo de estas bibliotecas para diferentes entornos operativos: Java, compatible con entornos JSE5 y JSE6 (Applets y aplicaciones Java gen\u00e9ricas) y Google Android 2 y superiores. Es posible su adaptaci\u00f3n para compatibilidad con entornos RIM PlayBook. Objective C, compatible con entornos Apple iOS (iPhone, iPad, iPod, etc.). .NET C#, compatible con entornos Windows Phone 7 y superiores (incluido Widows Phone 7.5 \u201cMango\u201d) y adaptable a controles ActiveX para Windows. Es posible igualmente su adaptaci\u00f3n a otras plataformas compatibles, como Microsoft Xbox o Linux-Mono. JME ( Java Micro Edition ), compatible con RIM BlackBerry. Es posible su adaptaci\u00f3n a otras plataformas JME, como MHP (TDT, BluRay), Symbian, MIDP, etc. Sobre cada una de las plataformas se realizara una \u201caplicaci\u00f3n de referencia\u201d que demuestre la correcci\u00f3n funcional de las bibliotecas y sirva como gu\u00eda de uso e implementaci\u00f3n. En el caso de Java, se propone adem\u00e1s la implementaci\u00f3n de un Applet JSE6 (realmente dos Apleta stinta biblioteca las firm(al estilo del actual \"an, MIDP, etc.)..).ativos:es, separando en distinta biblioteca las firmpplets, uno para firmas trif\u00e1sicas y otro para bif\u00e1sicas) que replique las funcionalidades b\u00e1sicas del Applet Cliente @firma (al estilo del actual \u201cMiniApplet\u201d), pero usando firmas en varias fases. Integraci\u00f3n de los nuevos trabajos en la Forja de @firma Los nuevos trabajos se integrar\u00edan de forma completa en la forja del proyecto Cliente @firma, lo cual comporta las siguientes implicaciones: El c\u00f3digo fuente debe publicarse con una licencia compatible con las actuales del proyecto. El c\u00f3digo fuente debe cumplir con las normativas en cuanto a est\u00e1ndares, calidad, estilo y procedimientos definidos en el proyecto. Incluyendo la necesidad de separaci\u00f3n modular en componentes independientes (con el m\u00ednimo acoplamiento posible) de las nuevas funcionalidades. La comunidad del proyecto (con el apoyo del Ministerio de Pol\u00edtica Territorial y Administraci\u00f3n P\u00fablica) asumir\u00eda una serie de tareas de mantenimiento, evoluci\u00f3n y pruebas del nuevo c\u00f3digo: Control de calidad, tareas para el mantenimiento y la mejora de la calidad. Pruebas unitarias y su incorporaci\u00f3n al servicio de integraci\u00f3n continua, incluyendo el mantenimiento de los casos de prueba. Mantenimiento correctivo del c\u00f3digo, incluyendo adecuaciones a nuevos entornos soportados por el proyecto e incorporaci\u00f3n de nuevas tecnolog\u00edas. Por ejemplo, soporte de nuevos sistemas operativos, nuevos entornos de ejecuci\u00f3n de Java, etc. Incorporaci\u00f3n a los sistemas de automatizaci\u00f3n y mantenimiento de estos. Adicionalmente, la entrada en la comunidad tambi\u00e9n conlleva una serie de obligaciones: El mantenimiento evolutivo del c\u00f3digo en cuanto a correcciones y evoluciones ligadas exclusivamente a requisitos de negocio debe correr por el aportante, en este caso la Junta de Andaluc\u00eda. Las pruebas funcionales que determinen la aceptaci\u00f3n en cuanto a requisitos funcionales deben ser realizadas por el aportante (la Junta de Andaluc\u00eda). Las correcciones t\u00e9cnicas de componentes software que afecten \u00fanicamente a requisitos funcionales o de negocio exclusivos del aportante deber\u00e1n ser igualmente realizadas por este (la Junta de Andaluc\u00eda). No obstante, si para la inclusi\u00f3n de las nuevas funcionalidades propuestas se ampliasen o modificasen componentes que afecten a funcionalidades o requisitos de negocio ya existente, el mantenimiento ser\u00e1 compartido por los integrantes de la forja existentes, con el apoyo del Ministerio de Pol\u00edtica Territorial y Administraci\u00f3n P\u00fablica.","title":"Firma electr\u00f3nica en tres fases"},{"location":"markdown_strict/ANEXO_Firma-electronica-en-varias-fases/#firma-electronica-en-tres-fases","text":"","title":"Firma electr\u00f3nica en tres fases"},{"location":"markdown_strict/ANEXO_Firma-electronica-en-varias-fases/#descripcion","text":"La firma electr\u00f3nica en tres fases est\u00e1 pensada para entornos donde la clave privada reside en un sistema con al menos alguna de las siguientes restricciones: El sistema no es compatible con el Cliente @firma. En este caso, dado que el 95% del c\u00f3digo se ejecuta en un sistema externo, solo es necesario portar el 5% restante. El sistema tiene unas capacidades muy limitadas en cuanto a proceso computacional, memoria o comunicaciones por red. En este caso, el sistema solo realiza una operaci\u00f3n criptogr\u00e1fica, una firma PKCS#1, mucho menos demandante de potencia de proceso que una firma completa CAdES, y, adicionalmente, no trata el documento a firmar completo, sino \u00fanicamente una peque\u00f1a cantidad de datos resultante de un pre-proceso (la pre-firma) realizado por el sistema externo, lo que resulta en un enorme decremento en las necesidades de memoria y transmisi\u00f3n de datos (esto \u00faltimo si decide omitirse la transferencia del fichero a firmar). Por motivos de seguridad, el documento a firmar no puede salir de un sistema externo. Como se ha descrito en el punto anterior, en este caso es posible omitir por completo la salida del documento del sistema externo, y puede transferirse \u00fanicamente el resultado de la pre-firma, desde la cual es imposible reconstruir el documento original. Estos condicionantes convierten la firma trif\u00e1sica en una opci\u00f3n perfectamente adaptada a los dispositivos m\u00f3viles, donde se dan tanto la heterogeneidad de sistemas operativos (Apple iOS, Google Android, RIM BlackBerry, Microsoft Windows Phone, etc.) y las limitaciones en potencia de proceso, memoria y comunicaciones; en estas \u00faltimas hay que tener en cuenta el coste, especialmente si estamos haciendo uso de una red de otro operador en itinerancia ( roaming ). En una firma trif\u00e1sica, los datos que se transfieren entre servidor y cliente consisten en (previamente el cliente ha debido iniciar una petici\u00f3n de firma trif\u00e1sica indicando referencia de documento y enviando la cadena de certificados del firmante): Atributos firmados en el caso de CAdES. Atributos firmados m\u00e1s identificador de fichero PDF y fecha de inicio del proceso (para reutilizarla en todas sus fases) en el caso de PAdES. Nodo XML a firmar (que contiene las huellas digitales de las referencias a firmar) en el caso de XAdES. El cliente devuelve al servidor en todos los casos la firma PKCS#1, acompa\u00f1ada en el caso de PAdES del identificador de fichero PDF y la fecha de inicio del proceso. El funcionamiento t\u00edpico de una firma trif\u00e1sica en la que intervienen un dispositivo m\u00f3vil, un servidor Web (que hace la pre-firma y la post-firma) y un servidor documental podr\u00eda ser el siguiente: Pre-firma: < El dispositivo m\u00f3vil solicita una pre-firma al servidor Web indicando un identificador de documento. El servidor Web solicita el documento a servidor documental. El servidor documental entrega el documento al servidor Web.\u2028 Es importante recalcar que el servidor documental no necesita almacenar ning\u00fan dato de sesi\u00f3n y que este no est\u00e1 expuesto a Internet de forma directa en ning\u00fan momento. El servidor Web calcula la pre-firma, entregando el resultado (muy peque\u00f1o en tama\u00f1o) al dispositivo. Es importante recalcar que el servidor Web no necesita almacenar ning\u00fan dato de sesi\u00f3n ni exponer los documentos directamente al dispositivo. Firma: < El dispositivo m\u00f3vil realiza, de forma completamente aislada una firma electr\u00f3nica simple (computacionalmente ligera) de los datos de la pre-firma. La clave privada del usuario nunca sale del dispositivo y no se expone externamente en ning\u00fan momento. Post-firma: < El dispositivo m\u00f3vil solicita una post-firma al servidor Web indicando un identificador de documento y proporcionando el resultado de su pre-firma firmada. El servidor Web solicita el documento a servidor documental. El servidor documental entrega el documento al servidor Web. El servidor Web calcula la post-firma y compone el documento final firmado, entregando el resultado al servidor documental para su almac\u00e9n. El servidor documental almacena el nuevo documento y devuelve un identificador al servidor Web. El servidor Web comunica al dispositivo el \u00e9xito de la operaci\u00f3n y el identificador del fichero ya firmado y almacenado. El esquema podr\u00eda ser igualmente implementado sin servidor documental, pudiendo obtener el Servidor Web el documento desde otro origen, incluyendo el propio dispositivo m\u00f3vil. Igualmente, una vez firmado el documento, su destino puede ser cualquiera, incluyendo de nuevo al propio dispositivo. Es conveniente tener en cuenta al usar firmas trif\u00e1sicas que es necesario disponer de un mecanismo para que el usuario pueda ver en todo momento los documentos que est\u00e1 firmando (una copia que refleje con fidelidad el contenido firmado puede ser suficiente) para evitar situaciones de repudio. Una ventaja adicional en las firmas trif\u00e1sicas es que, puesto que la \u00faltima fase la realiza el servidor y cuenta ya con el documento","title":"Descripci\u00f3n"},{"location":"markdown_strict/ANEXO_Firma-electronica-en-varias-fases/#implementacion","text":"La implementaci\u00f3n de la firma trif\u00e1sica es posible en cualquier caso, pero siempre teniendo en cuenta las siguientes consideraciones: CAdES La implementaci\u00f3n de firma trif\u00e1sica CAdES no presenta complicaciones extraordinarias: Dificultad: Baja No es necesaria la modificaci\u00f3n de ning\u00fan API externo a @firma. PAdES La implementaci\u00f3n de firma trif\u00e1sica PAdES presenta las siguientes peculiaridades: Dificultad: Media-Alta Es necesario modificar el API iText. Realmente, la modificaci\u00f3n de iText no supone una traba en la evoluci\u00f3n de @firma, ya que este usa una versi\u00f3n antigua concreta (2.1.7) por temas de licenciado. La dificultad de la implementaci\u00f3n de las firmas trif\u00e1sicas PAdES radica en la adici\u00f3n de elementos aleatorios (por ejemplo, el identificador de fichero) y fechas de creaci\u00f3n de secciones dentro de los documentos PDF que son necesario sincronizar entre cliente y servidor para asegurar que las huellas digitales no difieren. XAdES La implementaci\u00f3n de firma trif\u00e1sica XAdES presenta ciertas dificultades dado el encapsulamiento del API XMLDSig de Java, siendo necesario implementar el concepto de Facets de firma XML. Dificultad: Alta Es necesario modificar el API JXAdES. Realmente, la modificaci\u00f3n de iText no supone una traba en la evoluci\u00f3n de @firma, ya que estas modificaciones se realizar\u00edan conjuntamente con el equipo de JXAdES atendiendo espec\u00edficamente a las necesidades de @firma, y las modificaciones se incorporar\u00edan de forma definitiva a JXAdES.","title":"Implementaci\u00f3n"},{"location":"markdown_strict/ANEXO_Firma-electronica-en-varias-fases/#firma-electronica-en-dos-fases","text":"La firma electr\u00f3nica en dos fases comparte algunos escenarios de uso preferente con la firma en tres fases, pero presenta diferencias significativas: El 90% del c\u00f3digo se ejecuta en servidor, lo que facilita migrar el 10% restante a plataforma actualmente no soportadas por el Cliente @firma. El documento inicia el proceso desde el dispositivo y lo finaliza tambi\u00e9n en el dispositivo, por lo que es adecuado para procesos donde no interviene un servidor de documentos. Se reducen las conexiones de red respecto a la firma trif\u00e1sica (solo se necesita una conexi\u00f3n), pero el tr\u00e1fico de estas aumenta, lo cual simplifica la operaci\u00f3n cuando el servidor Web requiere autenticaci\u00f3n. Se mantiene, tal y como ocurre en la firma trif\u00e1sica, una demanda baja en cuanto a potencia computacional en el dispositivo, pero no as\u00ed la demanda de memoria. Este traslado de necesidades de memoria del servidor al dispositivo permite a este primero tratar un alt\u00edsimo volumen de peticiones con un hardware de gama media. En una firma bif\u00e1sica, los datos que se transfieren entre cliente y servidor constan de: Documento a firmar. Cadena de certificados del firmante. Y la respuesta del servidor al cliente: Documento pre-firmado. Datos a firmar mediante PKCS#1. Informaci\u00f3n necesaria para insertar esta firma PKCS#1 en el documento pre-firmado. Desplazamiento ( offset ) dentro del binario donde debe colocarse la firma PKCS#1, cadena de texto a sustituir por la firma PKCS#1 (en Base64 o en su representaci\u00f3n ASCII del hexadecimal, etc.). El funcionamiento t\u00edpico de una firma bif\u00e1sica en la que intervienen un dispositivo m\u00f3vil y un servidor Web (que hace la pre-firma) podr\u00eda ser el siguiente: Pre-firma < El dispositivo m\u00f3vil solicita una pre-firma al servidor Web enviando la cadena de certificados del firmante (puede enviar igualmente el documento o el servidor Web puede obtenerlo de una fuente externa, como un servidor de documentos). El servidor Web devuelve la pre-firma al dispositivo (que contiene el documento preparado para la firma final y los datos binarios a firmar mediante PKCS#1) y da por finalizado el proceso en su extremo. Firma < El dispositivo m\u00f3vil realiza, de forma completamente aislada una firma electr\u00f3nica simple (computacionalmente ligera) PKCS#1 de los datos de la pre-firma y realiza \u00e9l mismo el proceso de inserci\u00f3n en el documento pre-firmado. Este proceso es relativamente ligero en cuanto a potencia computacional, pero puede requerir mucha memoria en el dispositivo.","title":"Firma electr\u00f3nica en dos fases"},{"location":"markdown_strict/ANEXO_Firma-electronica-en-varias-fases/#recomendaciones-de-incorporacion-de-tecnologias-multi-fase-dentro-del-proyecto-firma","text":"","title":"Recomendaciones de incorporaci\u00f3n de tecnolog\u00edas multi-fase dentro del proyecto @firma"},{"location":"markdown_strict/ANEXO_Firma-electronica-en-varias-fases/#comunicaciones-entre-cliente-y-servidor-y-desarrollos-en-la-parte-servidora","text":"Para la comunicaci\u00f3n entre cliente y servidor se propone el uso de tecnolog\u00edas REST (Transferencia de Estado Representacional). REST presenta numerosas ventajas respecto a otros sistemas en el \u00e1mbito de las firmas multi-fase: Es un protocolo sin estado. Combinado con una implementaci\u00f3n en la que no es necesario almacenar ning\u00fan dato de sesi\u00f3n en el servidor incrementa la seguridad del sistema, ya que en caso de compromiso de este no hay documentos del usuario almacenados susceptibles de apropiaci\u00f3n indebida. Es un protocolo simple. La ausencia de SOAP y las limitaciones en el uso de XML lo hacen apto para dispositivos con capacidades limitadas, a la vez que facilitan una implementaci\u00f3n r\u00e1pida y f\u00e1cil de mantener en el lado cliente. Se propone una implementaci\u00f3n utilizando exclusivamente tecnolog\u00edas presentes en JEE6 (sin usar API de productos externos), lo cual permite una completa independencia tecnol\u00f3gica en cuanto a servidores de aplicaciones y blinda en cierto modo la futura obsolescencia. El plantea un servicio por completo independiente del resto de servicios de servidor de la plataforma @firma (que est\u00e1n ligados a versiones obsoletas de Axis, no aptas para implementar modernos servicios basados en REST). No obstante, la aplicaci\u00f3n servidora, en forma de EAR o WAR, podr\u00e1 desplegarse en el mismo servidor de aplicaciones que la plataforma @firma, siempre que este sea compatible JEE6. Para facilitar las labores de pruebas e implantaciones de referencia se plantea proporcionar adicionalmente un servidor GassFish Embedded configurado para el arranque autom\u00e1tico del servicio. Uso del Cliente @firma en un entorno servidor El servicio servidor har\u00e1 uso del Cliente @firma a modo de bibliotecas, benefici\u00e1ndose de los trabajos de organizaci\u00f3n en m\u00f3dulos ya iniciada. Este uso como bibliotecas requerir\u00e1 un trabajo adicional para adaptarse a los entornos servidores IBM en los que se usen m\u00e1quinas virtuales espec\u00edficas de este fabricante (por ejemplo, servidores de aplicaciones WebSphere sobre hardware IBM iSeries, tanto bajo Windows como con Linux, AIX, OS/400, Z/OS, etc.).","title":"Comunicaciones entre cliente y servidor y desarrollos en la parte servidora"},{"location":"markdown_strict/ANEXO_Firma-electronica-en-varias-fases/#desarrollos-en-la-parte-cliente","text":"Para la implantaci\u00f3n en la parte cliente se propone inicialmente el desarrollo de una serie de bibliotecas que implementen todas las funcionalidades necesarias para las firmas en varias fases, separando en distinta biblioteca las firmas trif\u00e1sicas y las bif\u00e1sicas. Se plantea el desarrollo de estas bibliotecas para diferentes entornos operativos: Java, compatible con entornos JSE5 y JSE6 (Applets y aplicaciones Java gen\u00e9ricas) y Google Android 2 y superiores. Es posible su adaptaci\u00f3n para compatibilidad con entornos RIM PlayBook. Objective C, compatible con entornos Apple iOS (iPhone, iPad, iPod, etc.). .NET C#, compatible con entornos Windows Phone 7 y superiores (incluido Widows Phone 7.5 \u201cMango\u201d) y adaptable a controles ActiveX para Windows. Es posible igualmente su adaptaci\u00f3n a otras plataformas compatibles, como Microsoft Xbox o Linux-Mono. JME ( Java Micro Edition ), compatible con RIM BlackBerry. Es posible su adaptaci\u00f3n a otras plataformas JME, como MHP (TDT, BluRay), Symbian, MIDP, etc. Sobre cada una de las plataformas se realizara una \u201caplicaci\u00f3n de referencia\u201d que demuestre la correcci\u00f3n funcional de las bibliotecas y sirva como gu\u00eda de uso e implementaci\u00f3n. En el caso de Java, se propone adem\u00e1s la implementaci\u00f3n de un Applet JSE6 (realmente dos Apleta stinta biblioteca las firm(al estilo del actual \"an, MIDP, etc.)..).ativos:es, separando en distinta biblioteca las firmpplets, uno para firmas trif\u00e1sicas y otro para bif\u00e1sicas) que replique las funcionalidades b\u00e1sicas del Applet Cliente @firma (al estilo del actual \u201cMiniApplet\u201d), pero usando firmas en varias fases.","title":"Desarrollos en la parte cliente"},{"location":"markdown_strict/ANEXO_Firma-electronica-en-varias-fases/#integracion-de-los-nuevos-trabajos-en-la-forja-de-firma","text":"Los nuevos trabajos se integrar\u00edan de forma completa en la forja del proyecto Cliente @firma, lo cual comporta las siguientes implicaciones: El c\u00f3digo fuente debe publicarse con una licencia compatible con las actuales del proyecto. El c\u00f3digo fuente debe cumplir con las normativas en cuanto a est\u00e1ndares, calidad, estilo y procedimientos definidos en el proyecto. Incluyendo la necesidad de separaci\u00f3n modular en componentes independientes (con el m\u00ednimo acoplamiento posible) de las nuevas funcionalidades. La comunidad del proyecto (con el apoyo del Ministerio de Pol\u00edtica Territorial y Administraci\u00f3n P\u00fablica) asumir\u00eda una serie de tareas de mantenimiento, evoluci\u00f3n y pruebas del nuevo c\u00f3digo: Control de calidad, tareas para el mantenimiento y la mejora de la calidad. Pruebas unitarias y su incorporaci\u00f3n al servicio de integraci\u00f3n continua, incluyendo el mantenimiento de los casos de prueba. Mantenimiento correctivo del c\u00f3digo, incluyendo adecuaciones a nuevos entornos soportados por el proyecto e incorporaci\u00f3n de nuevas tecnolog\u00edas. Por ejemplo, soporte de nuevos sistemas operativos, nuevos entornos de ejecuci\u00f3n de Java, etc. Incorporaci\u00f3n a los sistemas de automatizaci\u00f3n y mantenimiento de estos. Adicionalmente, la entrada en la comunidad tambi\u00e9n conlleva una serie de obligaciones: El mantenimiento evolutivo del c\u00f3digo en cuanto a correcciones y evoluciones ligadas exclusivamente a requisitos de negocio debe correr por el aportante, en este caso la Junta de Andaluc\u00eda. Las pruebas funcionales que determinen la aceptaci\u00f3n en cuanto a requisitos funcionales deben ser realizadas por el aportante (la Junta de Andaluc\u00eda). Las correcciones t\u00e9cnicas de componentes software que afecten \u00fanicamente a requisitos funcionales o de negocio exclusivos del aportante deber\u00e1n ser igualmente realizadas por este (la Junta de Andaluc\u00eda). No obstante, si para la inclusi\u00f3n de las nuevas funcionalidades propuestas se ampliasen o modificasen componentes que afecten a funcionalidades o requisitos de negocio ya existente, el mantenimiento ser\u00e1 compartido por los integrantes de la forja existentes, con el apoyo del Ministerio de Pol\u00edtica Territorial y Administraci\u00f3n P\u00fablica.","title":"Integraci\u00f3n de los nuevos trabajos en la Forja de @firma"},{"location":"markdown_strict/CF_arquitectura_ES/","text":"\u00cdndice de contenidos 1 Arquitectura de M\u00f3dulos del proyecto Cliente @firma [4](#arquitectura-de-m\u00f3dulos-del-proyecto-cliente-firma) 1.1 Descripci\u00f3n general [4](#descripci\u00f3n-general) 1.2 N\u00facleo [5](#n\u00facleo) 1.2.1 M\u00f3dulo afirma-core [5](#m\u00f3dulo-afirma-core) 1.2.2 M\u00f3dulo afirma-ui-core-jse [5](#m\u00f3dulo-afirma-ui-core-jse) 1.3 Gesti\u00f3n de almacenes de claves y certificados [6](#gesti\u00f3n-de-almacenes-de-claves-y-certificados) 1.3.1 M\u00f3dulo afirma-core-keystores [6](#m\u00f3dulo-afirma-core-keystores) 1.3.2 M\u00f3dulo afirma-keystores-mozilla [7](#m\u00f3dulo-afirma-keystores-mozilla) 1.3.3 M\u00f3dulo afirma-keystores-single [8](#m\u00f3dulo-afirma-keystores-single) 1.3.4 M\u00f3dulo afirma-keystores-capiaddressbook [9](#m\u00f3dulo-afirma-keystores-capiaddressbook) 1.4 Realizaci\u00f3n de firmas binarias [9](#realizaci\u00f3n-de-firmas-binarias) 1.4.1 M\u00f3dulo afirma-crypto-core-pkcs7 [10](#m\u00f3dulo-afirma-crypto-core-pkcs7) 1.4.2 M\u00f3dulo afirma-crypto-cades [11](#m\u00f3dulo-afirma-crypto-cades) 1.4.3 M\u00f3dulo afirma-crypto-cades-multi [12](#m\u00f3dulo-afirma-crypto-cades-multi) 1.4.4 M\u00f3dulo afirma-crypto-cades-enveloper [13](#m\u00f3dulo-afirma-crypto-cades-enveloper) 1.4.5 M\u00f3dulo afirma-crypto-pades [14](#m\u00f3dulo-afirma-crypto-pades) 1.4.6 M\u00f3dulo afirma-crypto-cms [15](#m\u00f3dulo-afirma-crypto-cms) 1.4.7 M\u00f3dulo afirma-crypto-cms-enveloper [16](#m\u00f3dulo-afirma-crypto-cms-enveloper) 1.5 Realizaci\u00f3n de firmas XML [17](#realizaci\u00f3n-de-firmas-xml) 1.5.1 M\u00f3dulo afirma-crypto-core-xml [17](#m\u00f3dulo-afirma-crypto-core-xml) 1.5.2 M\u00f3dulo afirma-crypto-xades [18](#m\u00f3dulo-afirma-crypto-xades) 1.5.3 M\u00f3dulo afirma-crypto-xmlsignature [19](#m\u00f3dulo-afirma-crypto-xmlsignature) 1.5.4 M\u00f3dulo afirma-crypto-odf [20](#m\u00f3dulo-afirma-crypto-odf) 1.5.5 M\u00f3dulo afirma-crypto-ooxml [20](#m\u00f3dulo-afirma-crypto-ooxml) 1.6 Realizaci\u00f3n de cifrados sim\u00e9tricos [22](#realizaci\u00f3n-de-cifrados-sim\u00e9tricos) 1.6.1 M\u00f3dulo afirma-crypto-cipher [22](#m\u00f3dulo-afirma-crypto-cipher) 1.7 Realizaci\u00f3n de firmas / multifirmas masivas [23](#realizaci\u00f3n-de-firmas-multifirmas-masivas) 1.7.1 M\u00f3dulo afirma-core-massive [23](#m\u00f3dulo-afirma-core-massive) 2 Dependencias del Applet @firma respecto a los m\u00f3dulos [25](#dependencias-del-applet-firma-respecto-a-los-m\u00f3dulos) 2.1 Descripci\u00f3n general [25](#descripci\u00f3n-general-1) 3 Dependencias del MiniApplet @firma respecto a los m\u00f3dulos [26](#dependencias-del-miniapplet-firma-respecto-a-los-m\u00f3dulos) 3.1 Descripci\u00f3n general [26](#descripci\u00f3n-general-2) 4 Dependencias del interfaz Standalone respecto a los m\u00f3dulos [27](#dependencias-del-interfaz-standalone-respecto-a-los-m\u00f3dulos) 4.1 Descripci\u00f3n general [27](#descripci\u00f3n-general-3) 5 Dependencias de SimpleAfirma respecto a los m\u00f3dulos [28](#dependencias-de-simpleafirma-respecto-a-los-m\u00f3dulos) 5.1 Descripci\u00f3n general [28](#descripci\u00f3n-general-4) Arquitectura de M\u00f3dulos del proyecto Cliente @firma Descripci\u00f3n general El proyecto @firma se compone de una serie de m\u00f3dulos funcionales con ciertas dependencias de cohesi\u00f3n y un m\u00ednimo acoplamiento que forman un \u00e1rbol de sub-proyectos. Esta separaci\u00f3n en m\u00f3dulos funcionales permite a los desarrolladores crear nuevos productos reutilizando partes de @firma de forma sencilla, a la vez que facilita la evoluci\u00f3n, el mantenimiento y la evoluci\u00f3n de las propias aplicaciones del proyecto Cliente @firma. N\u00facleo < M\u00f3dulo afirma-core El m\u00f3dulo central del proyecto (afirma-core) es la base para el resto de los m\u00f3dulos, y contiene tanto los interfaces que definen las funcionalidades clave del proyecto (firma electr\u00f3nica, cifrado, etc.) como una serie de clases de utilidad (incluyendo excepciones b\u00e1sicas) que son de uso generalizado para el resto de los m\u00f3dulos. El m\u00f3dulo afirma-core es compatible con JSE 1.5 (y superiores) y con Apache Batik (lo que le proporciona compatibilidad con Google Android 2.2 y superiores). El m\u00f3dulo, presenta a su vez dos dependencias: Dependencia din\u00e1mica con la biblioteca \u201cJava Mime Magic Library 0.1.0\u201d (que a su vez puede tener dependencias con \u201cApache Jakarta ORO 2.0.8\u201d), utilizada por la clase es.gob.afirma.core.misc.MimeHelper para la detecci\u00f3n de tipos de contenido. Al ser din\u00e1mica, el m\u00f3dulo afirma-core es funcional (no presenta errores ni en tiempo de ejecuci\u00f3n ni en tiempo de compilaci\u00f3n) incluso si esta biblioteca no se encuentra en el CLASSPATH, pero en este caso no se realizar\u00e1 detecci\u00f3n de tipo de contenido y siempre se devolver\u00e1 el valor por defecto (contenido binario gen\u00e9rico). Dependencia din\u00e1mica con el m\u00f3dulo afirma-ui-core-jse. Al ser din\u00e1mica, el m\u00f3dulo afirma-core no presenta errores en tiempo de compilaci\u00f3n) incluso si este m\u00f3dulo no se encuentra en el CLASSPATH, pero en este caso cualquier operaci\u00f3n que requiera un interfaz gr\u00e1fico resultar\u00e1 en error. Bibliotecas o c\u00f3digo de terceros Bibliotecas externas: Java Mime Magic Library 0.1.0 Apache Jakarta ORO 2.0.8 Apache Commons Logging 1.1.1 C\u00f3digo incluido: com.sun.deploy.util.WinRegistry basado en la clase de igual nombre de OpenJDK. es.gob.afirma.core.misc.Base64 basado en c\u00f3digo de Mikael Grev con licencia BSD. M\u00f3dulo afirma-ui-core-jse Para mejorar la portabilidad del n\u00facleo a plataformas que no cuenten con Swing o AWT para la creaci\u00f3n y gesti\u00f3n de interfaces gr\u00e1ficos, todas las operaciones relacionadas con estos interfaces gr\u00e1ficas se separan en un sub-proyecto diferente. Aunque las funcionalidades principales de este m\u00f3dulo se declaran en el interfaz es.gob.afirma.core.ui.AOUIManager, se incluyen tambi\u00e9n otras clases y m\u00e9todos de utilidad adicionales. Este m\u00f3dulo es compatible con JSE 1.5, y debe ser sustituido por implementaciones alternativas cuando se desee usar el Cliente @firma haciendo uso de las capacidades gr\u00e1ficas predefinidas en Google Android u otras plataformas distintas a JSE 1.5 (y superiores). Igualmente, es conveniente su sustituci\u00f3n cuando se use el Cliente @firma en sistemas servidores sin entorno gr\u00e1fico. Gesti\u00f3n de almacenes de claves y certificados Una de las funcionalidades m\u00e1s importante en cualquier aplicaci\u00f3n de firma electr\u00f3nica es el acceso a las funcionalidades de gesti\u00f3n de certificados y claves privadas con las que se van a realizar las firmas (u otras operaciones criptogr\u00e1ficas). Se soportan m\u00faltiples tipos de almacenes (PKCS#12, Windows CAPI, Mac OS X Keychain, Java, etc.), con la peculiaridad de que mediante dos \u00fanicas clases (es.gob.afirma.keystores.main.common.AOKeyStoreManager y es.gob.afirma.keystores.main.common.AOKeyStoreManagerFactory) se gestionan tanto almacenes de tipo KeyStore como de tipo CertStore. M\u00f3dulo afirma-core-keystores < Este m\u00f3dulo incorpora el soporte de la mayor\u00eda de tipos de almac\u00e9n, adem\u00e1s de las implementaciones de los interfaces del n\u00facleo relacionados con almacenes de claves y certificados. Los tipos soportados son: PKCS#12 Java KeyStore (todas las variantes). PKCS#11 Incluyendo DNIe v\u00eda PKCS#11 Windows CAPI Certificados personales Certificados ra\u00edz Llavero de Mac OS X El m\u00f3dulo hace uso de interfaces gr\u00e1ficas (solicitud de contrase\u00f1as o PIN), por lo que necesita que el n\u00facleo cuente con el m\u00f3dulo afirma-core-ui-jse (o una re-implementaci\u00f3n del mismo). El m\u00f3dulo afirma-core-keystores es compatible con JSE 1.5 (y superiores) y con Apache Batik (lo que le proporciona compatibilidad con Google Android 2.2 y superiores), con la precauci\u00f3n de que en entornos distintos a JSE 1.5 o superiores es necesaria una re-implementaci\u00f3n compatible del m\u00f3dulo afirma-core-ui-jse si se usan funcionalidades que necesiten interfaz gr\u00e1fico. M\u00f3dulo afirma-keystores-mozilla < La gesti\u00f3n de almacenes NSS ( Netscape Security Services ), usados por los productos Mozilla (Firefox, ThunderBird, SeaMonkey, etc.) presenta numerosas diferencias respecto a los otros tipos soportados por afirma-core-keystores, por lo que se encuentra separado en un m\u00f3dulo independiente. Pese a esta separaci\u00f3n, la factor\u00eda principal (es.gob.afirma.keystores.main.common.AOKeyStoreManagerFactory) ser\u00e1 capaz de trabajar con estos almacenes cuando afirma-keystores-mozilla est\u00e9 en el CLASSPATH. Este m\u00f3dulo soporta \u00fanicamente el almac\u00e9n de certificados personales (no ra\u00edz o autoridades intermedias), y necesita que el sistema cuente con las bibliotecas NSS (Netscape Security Services) correctamente instaladas y de la misma arquitectura que el JRE. El m\u00f3dulo afirma-keystores-mozilla es compatible con JSE 1.5 (y superiores), con la precauci\u00f3n de que en entornos distintos a JSE 1.5 o superiores es necesaria una re-implementaci\u00f3n compatible del m\u00f3dulo afirma-core-ui-jse si se usan funcionalidades que necesiten interfaz gr\u00e1fico. Ha sido probado con NSS de 32 y 64 bits en Windows, Linux, Mac OS X y Solaris. En Mac OS X puede requerir la realizaci\u00f3n de cambios persistentes en el sistema, para lo cual solicitar\u00e1 la contrase\u00f1a de administraci\u00f3n la primera vez que se ejecute. Bibliotecas o c\u00f3digo de terceros C\u00f3digo incluido: es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilities contiene porciones inspiradas en clases de OpenJDK. M\u00f3dulo afirma-keystores-single < El m\u00f3dulo afirma-keystores-single es directamente un proveedor criptogr\u00e1fico JCA/JCE que implementa el SPI ( Service Provider Interface ) KeyStore a\u00f1adiendo un almac\u00e9n llamado PKCS7 que permite tratar como KeyStore certificados en disco en formato PKCS#7 o directamente X.509 (tanto binarios como Base64). Para usar este m\u00f3dulo es necesario instalarlo en Java como proveedor criptogr\u00e1fico JCE/JCA y obtener el KeyStore de nombre PKCS7. No se implementa el SPI CertStore. El m\u00f3dulo afirma-keystores-single es compatible con JSE 1.5 (y superiores) y con Apache Batik (lo que le proporciona compatibilidad con Google Android 2.2 y superiores), con la precauci\u00f3n de que en entornos distintos a JSE 1.5 o superiores es necesaria una re-implementaci\u00f3n compatible del m\u00f3dulo afirma-core-ui-jse si se usan funcionalidades que necesiten interfaz gr\u00e1fico. M\u00f3dulo afirma-keystores-capiaddressbook Este m\u00f3dulo no tiene ninguna dependencia externa, ni con bibliotecas ni con otros m\u00f3dulos del Cliente @firma. El m\u00f3dulo afirma-keystores-capiaddressbook es directamente un proveedor criptogr\u00e1fico JCA/JCE que implementa el SPI ( Service Provider Interface ) KeyStore a\u00f1adiendo dos almacenes (llamados Windows-ADDESSBOOK y Windows-CA) permite tratar como KeyStore certificados en loa almacenes de Windows \u201cLibreta de Direcciones\u201d y \u201cAutoridades de Certificaci\u00f3n\u201d respectivamente. Para usar este m\u00f3dulo es necesario instalarlo en Java como proveedor criptogr\u00e1fico JCE/JCA y obtener el KeyStore de nombre PKCS7. No se implementa el SPI CertStore. El m\u00f3dulo afirma-core-addressbook es compatible con JSE 1.6 (y superiores) \u00fanicamente en entornos MS-Windows. En JRE 64 bits es necesario que este incluya el proveedor SunMSCAPI. No se soporta la arquitectura IA64. Bibliotecas o c\u00f3digo de terceros C\u00f3digo incluido: sun.security.mscapi contiene porciones del proveedor de seguridad SunMSCAPI de OpenJDK. Realizaci\u00f3n de firmas binarias Los m\u00f3dulos de realizaci\u00f3n de firmas binarias contienen las funcionalidades necesarias para la creaci\u00f3n y gesti\u00f3n de firmas electr\u00f3nicas y sobres digitales en formatos PKCS#7 y derivados, donde encontramos los siguientes formatos: Firmas electr\u00f3nicas CMS CAdES PAdES Sobres digitales CMS CAdES M\u00f3dulo afirma-crypto-core-pkcs7 < El m\u00f3dulo afirma-crypto-core-pkcs7 contiene m\u00e9todos de utilidad para la creaci\u00f3n de firmas electr\u00f3nicas en formatos derivados de PKCS#7, pero no provee ninguna funcionalidad directa a los usuarios (ni siquiera genera firmas en formato PKCS#7), es un m\u00f3dulo de uso interno por parte de otros m\u00f3dulos. Por motivos organizativos, este m\u00f3dulo presenta a su vez un sub-m\u00f3dulo llamado afirma-crypto-core-pkcs7-tsp, que por simplicidad no se trata de forma separada ni se muestra en los diagramas, consider\u00e1ndose que ambos forman un \u00fanico m\u00f3dulo integral. El m\u00f3dulo presenta dependencia directa \u00fanicamente con el n\u00facleo (m\u00f3dulo afirma-core) y con las bibliotecas externas BouncyCastle (proveedor, correo y TSP). El m\u00f3dulo no realiza ninguna llamada a interfaces gr\u00e1ficos y es compatible con JSE 1.5 y superiores y con Apache Batik (Android) 3 y superiores. Para compatibilidad con Android 2.x es necesario refactorizar el proyecto sustituyendo BouncyCastle por SpongyCastle. Bibliotecas o c\u00f3digo de terceros Bibliotecas externas: BouncyCastle 1.46. M\u00f3dulo afirma-crypto-cades < El m\u00f3dulo afirma-crypto-cades contiene la funcionalidad para la generaci\u00f3n de firmas electr\u00f3nicas binaria acordes al est\u00e1ndar CAdES. Adem\u00e1s de la propia funcionalidad de firma, contiene los m\u00e9todos necesarios para la generaci\u00f3n de multifirmas CAdES. El m\u00f3dulo presenta dependencia directa con el n\u00facleo (m\u00f3dulo afirma-core), con el m\u00f3dulo de firma binaria (afirma-crypto-core-pkcs7) y con las bibliotecas externas BouncyCastle (proveedor y correo). Para la generaci\u00f3n de multifirmas CAdES debe cubrirse tambi\u00e9n una dependencia din\u00e1mica con el m\u00f3dulo afirma-crypto-cades-multi. El m\u00f3dulo no realiza ninguna llamada a interfaces gr\u00e1ficos y es compatible con JSE 1.5 y superiores y con Apache Batik (Android) 3 y superiores. Para compatibilidad con Android 2.x es necesario refactorizar el proyecto sustituyendo BouncyCastle por SpongyCastle. Bibliotecas o c\u00f3digo de terceros Bibliotecas externas: BouncyCastle 1.46. M\u00f3dulo afirma-crypto-cades-multi < El m\u00f3dulo afirma-crypto-cades-multi contiene los m\u00e9todos para la generaci\u00f3n de multifirmas cades: cofirmas (firmas paralelas) y contrafirmas (firmas en cascada). Los usuarios no utilizar\u00e1n estos m\u00e9todos de forma directa, sino a trav\u00e9s del manejador de firma CAdES (es.gob.afirma.crypto.cades.AOCAdESSigner) existente en el m\u00f3dulo afirma-crypto-cades. El m\u00f3dulo presenta dependencia directa con el m\u00f3dulo de firma CAdES (afirma-crypto-cades), con las funcionalidades de firma binaria (afirma-crypto-core-pkcs7), as\u00ed como del propio de n\u00facleo (m\u00f3dulo afirma-core) y con las bibliotecas externas BouncyCastle (proveedor y correo). El m\u00f3dulo no realiza ninguna llamada a interfaces gr\u00e1ficos y es compatible con JSE 1.5 y superiores y con Apache Batik (Android) 3 y superiores. Para compatibilidad con Android 2.x es necesario refactorizar el proyecto sustituyendo BouncyCastle por SpongyCastle. Bibliotecas o c\u00f3digo de terceros Bibliotecas externas: BouncyCastle 1.46. M\u00f3dulo afirma-crypto-cades-enveloper < El m\u00f3dulo afirma-crypto-cades-enveloper contiene los m\u00e9todos para la generaci\u00f3n de las siguientes estructuras CAdES: Data DigestedData EncryptedData EnvelopedData SignedAndEnvelopedData El m\u00f3dulo presenta dependencia directa con el n\u00facleo (m\u00f3dulo afirma-core), el m\u00f3dulo CAdES (afirma-crypto-cades) , a trav\u00e9s del que realiza las firmas de los empaquetados que la requieren y con las bibliotecas externas BouncyCastle (proveedor y correo). Adicionalmente, existe una dependencia indirecta con el m\u00f3dulo PKCS#7 (afirma-crypto-core-pkcs7), necesario para el tratamiento de las firmas binarias. El m\u00f3dulo no realiza ninguna llamada a interfaces gr\u00e1ficos y es compatible con JSE 1.5 y superiores y con Apache Batik (Android) 3 y superiores. Para compatibilidad con Android 2.x es necesario refactorizar el proyecto sustituyendo BouncyCastle por SpongyCastle. Bibliotecas o c\u00f3digo de terceros Bibliotecas externas: BouncyCastle 1.46. M\u00f3dulo afirma-crypto-pades < El m\u00f3dulo afirma-crypto-pades contiene los m\u00e9todos para firmar electr\u00f3nicamente documentos PDF. La firma PAdES es una firma derivada de CAdES que se inserta dentro de un documento PDF y se registra de forma concreta en su diccionario interno. El m\u00f3dulo depende directamente del m\u00f3dulo de firma CAdES (afirma-crypto-cades), del n\u00facleo (m\u00f3dulo afirma-core) y de la biblioteca externa iText, para el manejo de documentos PDF. A su vez, depende indirectamente de las bibliotecas externas BouncyCastle (proveedor, correo y TSP) y del n\u00facleo de firma binaria (m\u00f3dulo afirma-crypto-core-pkcs7). Para su ejecuci\u00f3n desde entornos JSE, ser\u00e1 necesario cubrir la dependencia del n\u00facleo con el m\u00f3dulo afirma-core-ui-jse. El m\u00f3dulo es compatible con JSE 1.5 y superiores y con Apache Batik (Android) 3 y superiores. Para compatibilidad con Android 2.x es necesario refactorizar el proyecto sustituyendo BouncyCastle por SpongyCastle. En sistemas Android, ser\u00e1 necesario remplazar el m\u00f3dulo afirma-core-ui-jse por otro que maneje correctamente los interfaces gr\u00e1ficos del entorno. Bibliotecas o c\u00f3digo de terceros Bibliotecas externas: BouncyCastle 1.46. iText 2.1.7. M\u00f3dulo afirma-crypto-cms < El m\u00f3dulo afirma-crypto-cms contiene los m\u00e9todos para la firma y multifirma electr\u00f3nica binaria en formato CMS, variante evolucionada de PKCS#7. El \u00fanico contentType CMS soportado por este m\u00f3dulo es signedData , el correspondiente a las firmas electr\u00f3nicas CMS. El m\u00f3dulo presenta dependencia directa con el n\u00facleo (m\u00f3dulo afirma-core), con el m\u00f3dulo PKCS#7 (afirma-crypto-core-pkcs7) y con las bibliotecas externas BouncyCastle (proveedor y correo). El m\u00f3dulo no realiza ninguna llamada a interfaces gr\u00e1ficos y es compatible con JSE 1.5 y superiores y con Apache Batik (Android) 3 y superiores. Para compatibilidad con Android 2.x es necesario refactorizar el proyecto sustituyendo BouncyCastle por SpongyCastle. Bibliotecas o c\u00f3digo de terceros Bibliotecas externas: BouncyCastle 1.46. M\u00f3dulo afirma-crypto-cms-enveloper < El m\u00f3dulo afirma-crypto-cms-enveloper contiene los m\u00e9todos para la generaci\u00f3n de las siguientes estructuras CMS: AuthenticatedData AuthenticatedAndEnvelopedData CompressedData Data DigestedData EncryptedData EnvelopedData SignedAndEnvelopedData El m\u00f3dulo presenta dependencia directa con el n\u00facleo (m\u00f3dulo afirma-core), el m\u00f3dulo CMS (afirma-crypto-cms) , a trav\u00e9s del que realiza las firmas de los empaquetados que la requieren y con las bibliotecas externas BouncyCastle (proveedor y correo). Adicionalmente, existe una dependencia indirecta con el m\u00f3dulo PKCS#7 (afirma-crypto-core-pkcs7), necesario para el tratamiento de las firmas binarias. El m\u00f3dulo no realiza ninguna llamada a interfaces gr\u00e1ficos y es compatible con JSE 1.5 y superiores y con Apache Batik (Android) 3 y superiores. Para compatibilidad con Android 2.x es necesario refactorizar el proyecto sustituyendo BouncyCastle por SpongyCastle. Bibliotecas o c\u00f3digo de terceros Bibliotecas externas: BouncyCastle 1.46. Realizaci\u00f3n de firmas XML Los m\u00f3dulos de realizaci\u00f3n de firmas XML contienen las funcionalidades necesarias para la creaci\u00f3n y gesti\u00f3n de firmas electr\u00f3nicas XML. Los formatos de firma que se ajustan a esta categor\u00eda son: XAdES XMLDSig ODF OOXML M\u00f3dulo afirma-crypto-core-xml < El m\u00f3dulo afirma-crypto-core-xml contiene m\u00e9todos de utilidad necesarios para el tratamiento de firmas XML, independientemente de su formato concreto. Este m\u00f3dulo no provee ninguna funcionalidad directa a los usuarios, es un m\u00f3dulo de utilidad para su uso por otros m\u00f3dulos. El m\u00f3dulo presenta dependencia directa \u00fanicamente con el n\u00facleo del proyecto (m\u00f3dulo afirma-core). Desde este m\u00f3dulo no se realiza ninguna llamada a interfaces gr\u00e1ficos y es compatible con JSE 1.6 y superiores. M\u00f3dulo afirma-crypto-xades < El m\u00f3dulo afirma-crypto-xades contiene la funcionalidad para la generaci\u00f3n de firmas electr\u00f3nicas XML avanzadas acordes al est\u00e1ndar XAdES. El m\u00f3dulo est\u00e1 preparado para la generaci\u00f3n de este tipo de firmas en sus variantes Internally Detached, Enveloping y Enveloped. Tambi\u00e9n permite la multifirma en este formato. Existe dependencia directa de este m\u00f3dulo con el n\u00facleo del Cliente (m\u00f3dulo afirma-core), el m\u00f3dulo de firmas XML (afirma-crypto-core-xml) y la biblioteca externa JXAdES. Para tener acceso a la funcionalidad completa del m\u00f3dulo es necesario cubrir dos dependencias adicionales, la biblioteca externa JMimeMagic, que permite identificar el tipo de contenido firmado, y el m\u00f3dulo de interfaces gr\u00e1ficos correspondiente al entorno en cuesti\u00f3n, por defecto, JSE (afirma-core-ui-jse), que permite mostrar un di\u00e1logo auxiliar para localizar las hojas de estilo declaradas cuando es necesario. La biblioteca externa JMimeMagic tiene a su vez dependencias con las bibliotecas Apache Log4Java y Apache Oro. Debido a que estas son dependencias externas se omitir\u00e1n para simplificar el diagrama de arquitectura. El m\u00f3dulo es compatible con JSE 1.6 y superiores. Bibliotecas o c\u00f3digo de terceros Bibliotecas externas: JXAdES (Build 5705) JMimeMagic 0.1.0 M\u00f3dulo afirma-crypto-xmlsignature < El m\u00f3dulo afirma-crypto-xmlsignature contiene la funcionalidad para la generaci\u00f3n de firmas electr\u00f3nicas XML acordes al est\u00e1ndar XMLdSig. El m\u00f3dulo est\u00e1 preparado para la generaci\u00f3n de este tipo de firmas en sus variantes Internally Detached, Enveloping y Enveloped. Tambi\u00e9n permite la multifirma en este formato, completando las deficiencias en la declaraci\u00f3n de este est\u00e1ndar con estructuras propias de XAdES (firma avanzada). Este m\u00f3dulo presenta dependencias directas con el n\u00facleo del Cliente (m\u00f3dulo afirma-core) y el m\u00f3dulo de firmas XML (afirma-crypto-core-xml). Adicionalmente, para tener acceso a la funcionalidad completa del m\u00f3dulo es necesario cubrir dos dependencias adicionales, la biblioteca externa JMimeMagic, que permite identificar el tipo de contenido firmado, y el m\u00f3dulo de interfaces gr\u00e1ficos correspondiente al entorno en cuesti\u00f3n, por defecto, JSE (afirma-core-ui-jse), que permite mostrar un di\u00e1logo auxiliar para localizar las hojas de estilo declaradas cuando es necesario. La biblioteca externa JMimeMagic tiene a su vez dependencias con las bibliotecas Apache Log4Java y Apache Oro. Debido a que estas son dependencias externas se omitir\u00e1n para simplificar el diagrama de arquitectura. El m\u00f3dulo es compatible con JSE 1.6 y superiores. Bibliotecas o c\u00f3digo de terceros Bibliotecas externas: JMimeMagic 0.1.0 M\u00f3dulo afirma-crypto-odf < El m\u00f3dulo afirma-crypto-odf contiene la funcionalidad necesaria para agregar firmas a un documento ODF ( Open Document File ). Las firmas generadas son variantes de XMLdSig que se insertan y declaran en los documentos ODF. Las firmas generadas por el m\u00f3dulo son compatibles con LibreOffice y OpenOffice.org 3.2 y superiores. El m\u00f3dulo permite la creaci\u00f3n de firmas compatibles con OpenOffice.org 3.1, pero estas dejar\u00e1n de ser compatibles con versiones superiores de esta herramienta. Este m\u00f3dulo presenta dependencias directas con el n\u00facleo del Cliente (m\u00f3dulo afirma-core) y el m\u00f3dulo de firmas XML (afirma-crypto-core-xml). El m\u00f3dulo es compatible con JSE 1.6 y superiores. M\u00f3dulo afirma-crypto-ooxml < El m\u00f3dulo afirma-crypto-ooxml contiene la funcionalidad necesaria para agregar firmas electr\u00f3nicas a un documento OOXML ( Office Open XML ). Las firmas generadas son variantes de XMLdSig que se insertan y declaran en los documentos OOXML. Este m\u00f3dulo presenta dependencias directas con el n\u00facleo del Cliente (m\u00f3dulo afirma-core), el m\u00f3dulo de firma XMLdSig (afirma-crypto-xmlsignature, que a su vez depende de afirma-crypto-core-xml) y la biblioteca externa Apache Commons-IO. El m\u00f3dulo es compatible con JSE 1.6 y superiores. Realizaci\u00f3n de cifrados sim\u00e9tricos Los cifrados sim\u00e9tricos no hacen uso de certificados ni algoritmos RSA o DSA, sino que usan o claves adaptadas para los distintos algoritmos de cifrado o contrase\u00f1as que los usuarios pueden recordar e introducir directamente. M\u00f3dulo afirma-crypto-cipher < El m\u00f3dulo de cifrado (afirma-crypto-cipher) hace uso del proveedor Sun JCE para la realizaci\u00f3n de cifrados sim\u00e9tricos en base a claves y contrase\u00f1as. Los algoritmos de cifrado soportados son: Mediante clave AES ARCFOUR BLOWFISH DES TripleDES RC2 Mediante contrase\u00f1a PBE con SHA1 y TripleDES PBE con SHA1 y RC2.40 PBE con MD5 y DDES Este m\u00f3dulo depende directamente del n\u00facleo (m\u00f3dulo afirma-core) y, de forma indirecta, de un m\u00f3dulo de interfaces gr\u00e1ficos, por defecto, el de JSE (afirma-core-ui-jse). El m\u00f3dulo es compatible con JSE 1.5 y superiores. Realizaci\u00f3n de firmas / multifirmas masivas Se llaman firmas masivas a los procesos en los que se firman consecutivamente varios ficheros. Estas firmas consecutivas pueden realizarse sin interacci\u00f3n intermedia del usuario y las listas de ficheros a firmas pueden establecerse por varios medios, externamente de forma program\u00e1tica o con una l\u00f3gica interna basada en directorios y carpetas del sistema de ficheros. M\u00f3dulo afirma-core-massive < El m\u00f3dulo afirma-core-massive proporciona dos mecanismos para la firma masiva de datos. Estos son: Firma/Multifirma de directorios: Proporciona los m\u00e9todos para firmar y multifirmar los ficheros de un directorio. Admite configurar el comportamiento de las operaciones individuales, las opciones de firma, filtrar ficheros por extensi\u00f3n \u2026 Firma/Multifirma program\u00e1tica: Proporciona los m\u00e9todos necesarios para firmar o multifirmar datos, proporcionando estos, un fichero o su huella digital. Este m\u00f3dulo depende directamente del n\u00facleo (m\u00f3dulo afirma-core) del proyecto. A su vez, enlaza din\u00e1micamente con cualquier m\u00f3dulo de firma que agregue al proyecto, heredando todas sus dependencias. El m\u00f3dulo es compatible con JSE 1.5 y superiores. Utilidades M\u00f3dulo afirma-util El m\u00f3dulo afirma-util contiene clases de utilidad para la gesti\u00f3n de validez de certificados. Es compatible con Java 1.5 y superiores, depende \u00fanicamente del n\u00facleo y no usa bibliotecas externas ni contiene c\u00f3digo de terceros. Dependencias del Applet @firma respecto a los m\u00f3dulos Descripci\u00f3n general El Applet @firma es un Applet para la realizaci\u00f3n de firmas y multifirmas electr\u00f3nicas, cifrados sim\u00e9tricos y sobre digitales. Tambi\u00e9n permite la operaci\u00f3n de masiva de firmas electr\u00f3nicas. El applet @firma tiene como dependencias los m\u00f3dulos del Cliente del siguiente listado: afirma-core afirma-ui-core-jse afirma-core-keystores afirma-keystores-mozilla afirma-keystores-single afirma-keystores-capiaddressbook afirma-crypto-core-pkcs7 afirma-crypto-cades afirma-crypto-cades-multi afirma-crypto-pades afirma-crypto-cms afirma-crypto-cms-enveloper afirma-crypto-core-xml afirma-crypto-xades afirma-crypto-xmlsignature afirma-crypto-odf afirma-crypto-ooxml afirma-crypto-cipher afirma-core-massive afirma-util Dependencias del MiniApplet @firma respecto a los m\u00f3dulos Descripci\u00f3n general El MiniApplet @firma es un frontal de firma electr\u00f3nica en forma de Applet para su ejecuci\u00f3n en entorno Web. Este aplicativo permite su ejecuci\u00f3n desde cualquier navegador Web soportado por el Cliente y la generaci\u00f3n de firma en formatos CAdES, PAdES, XAdES y ODF. Los m\u00f3dulos del Cliente de los que depende el MiniApplet @firma son: afirma-core afirma-ui-core-jse afirma-core-keystores afirma-keystores-mozilla afirma-crypto-core-pkcs7 afirma-crypto-cades afirma-crypto-cades-multi afirma-crypto-pdf afirma-crypto-core-xml afirma-crypto-xades Dependencias del interfaz Standalone respecto a los m\u00f3dulos Descripci\u00f3n general El interfaz Standalone es un aplicativo de escritorio que permite la generaci\u00f3n de firmas electr\u00f3nicas, cifrados sim\u00e9tricos y sobre digitales, adem\u00e1s de permitir operaciones de firma masiva y la validaci\u00f3n y extracci\u00f3n de datos de firma. Los m\u00f3dulos del Cliente de los que depende el interfaz Standalone son: afirma-core afirma-ui-core-jse afirma-core-keystores afirma-keystores-mozilla afirma-keystores-single afirma-keystores-capiaddressbook afirma-crypto-core-pkcs7 afirma-crypto-cades afirma-crypto-cades-multi afirma-crypto-pdf afirma-crypto-cms afirma-crypto-cms-enveloper afirma-crypto-core-xml afirma-crypto-xades afirma-crypto-xmlsignature afirma-crypto-odf afirma-crypto-ooxml afirma-crypto-cipher afirma-core-massive afirma-util Dependencias de SimpleAfirma respecto a los m\u00f3dulos Descripci\u00f3n general El interfaz SimpleAfirma es un aplicativo de escritorio que permite la generaci\u00f3n sencilla de firmas electr\u00f3nicas. Los m\u00f3dulos del Cliente de los que depende el interfaz SimpleAfirma son: afirma-core afirma-ui-core-jse afirma-core-keystores afirma-keystores-mozilla afirma-crypto-core-pkcs7 afirma-crypto-cades afirma-crypto-cades-multi afirma-crypto-pdf afirma-crypto-core-xml afirma-crypto-xades afirma-util Tabla resumen de dependencias de las aplicaciones @firma respecto a los m\u00f3dulos M\u00f3dulos Applet MiniApplet StandAlone Simple afirma-core afirma-ui-core-jse afirma-core-keystores afirma-keystores-mozilla afirma-keystores-single afirma-keystores-capiaddressbook afirma-crypto-core-pkcs7 afirma-crypto-cades afirma-crypto-cades-multi afirma-crypto-pdf afirma-crypto-cms afirma-crypto-cms-enveloper afirma-crypto-core-xml afirma-crypto-xades afirma-crypto-xmlsignature afirma-crypto-odf afirma-crypto-ooxml afirma-crypto-cipher afirma-core-massive afirma-util Leyenda: Verde: Utiliza el m\u00f3dulo. Blanco: No utiliza el m\u00f3dulo","title":"CF arquitectura ES"},{"location":"markdown_strict/CF_arquitectura_ES/#arquitectura-de-modulos-del-proyecto-cliente-firma","text":"","title":"Arquitectura de M\u00f3dulos del proyecto Cliente @firma"},{"location":"markdown_strict/CF_arquitectura_ES/#descripcion-general","text":"El proyecto @firma se compone de una serie de m\u00f3dulos funcionales con ciertas dependencias de cohesi\u00f3n y un m\u00ednimo acoplamiento que forman un \u00e1rbol de sub-proyectos. Esta separaci\u00f3n en m\u00f3dulos funcionales permite a los desarrolladores crear nuevos productos reutilizando partes de @firma de forma sencilla, a la vez que facilita la evoluci\u00f3n, el mantenimiento y la evoluci\u00f3n de las propias aplicaciones del proyecto Cliente @firma.","title":"Descripci\u00f3n general"},{"location":"markdown_strict/CF_arquitectura_ES/#nucleo","text":"<","title":"N\u00facleo"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-core","text":"El m\u00f3dulo central del proyecto (afirma-core) es la base para el resto de los m\u00f3dulos, y contiene tanto los interfaces que definen las funcionalidades clave del proyecto (firma electr\u00f3nica, cifrado, etc.) como una serie de clases de utilidad (incluyendo excepciones b\u00e1sicas) que son de uso generalizado para el resto de los m\u00f3dulos. El m\u00f3dulo afirma-core es compatible con JSE 1.5 (y superiores) y con Apache Batik (lo que le proporciona compatibilidad con Google Android 2.2 y superiores). El m\u00f3dulo, presenta a su vez dos dependencias: Dependencia din\u00e1mica con la biblioteca \u201cJava Mime Magic Library 0.1.0\u201d (que a su vez puede tener dependencias con \u201cApache Jakarta ORO 2.0.8\u201d), utilizada por la clase es.gob.afirma.core.misc.MimeHelper para la detecci\u00f3n de tipos de contenido. Al ser din\u00e1mica, el m\u00f3dulo afirma-core es funcional (no presenta errores ni en tiempo de ejecuci\u00f3n ni en tiempo de compilaci\u00f3n) incluso si esta biblioteca no se encuentra en el CLASSPATH, pero en este caso no se realizar\u00e1 detecci\u00f3n de tipo de contenido y siempre se devolver\u00e1 el valor por defecto (contenido binario gen\u00e9rico). Dependencia din\u00e1mica con el m\u00f3dulo afirma-ui-core-jse. Al ser din\u00e1mica, el m\u00f3dulo afirma-core no presenta errores en tiempo de compilaci\u00f3n) incluso si este m\u00f3dulo no se encuentra en el CLASSPATH, pero en este caso cualquier operaci\u00f3n que requiera un interfaz gr\u00e1fico resultar\u00e1 en error.","title":"M\u00f3dulo afirma-core"},{"location":"markdown_strict/CF_arquitectura_ES/#bibliotecas-o-codigo-de-terceros","text":"Bibliotecas externas: Java Mime Magic Library 0.1.0 Apache Jakarta ORO 2.0.8 Apache Commons Logging 1.1.1 C\u00f3digo incluido: com.sun.deploy.util.WinRegistry basado en la clase de igual nombre de OpenJDK. es.gob.afirma.core.misc.Base64 basado en c\u00f3digo de Mikael Grev con licencia BSD.","title":"Bibliotecas o c\u00f3digo de terceros"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-ui-core-jse","text":"Para mejorar la portabilidad del n\u00facleo a plataformas que no cuenten con Swing o AWT para la creaci\u00f3n y gesti\u00f3n de interfaces gr\u00e1ficos, todas las operaciones relacionadas con estos interfaces gr\u00e1ficas se separan en un sub-proyecto diferente. Aunque las funcionalidades principales de este m\u00f3dulo se declaran en el interfaz es.gob.afirma.core.ui.AOUIManager, se incluyen tambi\u00e9n otras clases y m\u00e9todos de utilidad adicionales. Este m\u00f3dulo es compatible con JSE 1.5, y debe ser sustituido por implementaciones alternativas cuando se desee usar el Cliente @firma haciendo uso de las capacidades gr\u00e1ficas predefinidas en Google Android u otras plataformas distintas a JSE 1.5 (y superiores). Igualmente, es conveniente su sustituci\u00f3n cuando se use el Cliente @firma en sistemas servidores sin entorno gr\u00e1fico.","title":"M\u00f3dulo afirma-ui-core-jse"},{"location":"markdown_strict/CF_arquitectura_ES/#gestion-de-almacenes-de-claves-y-certificados","text":"Una de las funcionalidades m\u00e1s importante en cualquier aplicaci\u00f3n de firma electr\u00f3nica es el acceso a las funcionalidades de gesti\u00f3n de certificados y claves privadas con las que se van a realizar las firmas (u otras operaciones criptogr\u00e1ficas). Se soportan m\u00faltiples tipos de almacenes (PKCS#12, Windows CAPI, Mac OS X Keychain, Java, etc.), con la peculiaridad de que mediante dos \u00fanicas clases (es.gob.afirma.keystores.main.common.AOKeyStoreManager y es.gob.afirma.keystores.main.common.AOKeyStoreManagerFactory) se gestionan tanto almacenes de tipo KeyStore como de tipo CertStore.","title":"Gesti\u00f3n de almacenes de claves y certificados"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-core-keystores","text":"< Este m\u00f3dulo incorpora el soporte de la mayor\u00eda de tipos de almac\u00e9n, adem\u00e1s de las implementaciones de los interfaces del n\u00facleo relacionados con almacenes de claves y certificados. Los tipos soportados son: PKCS#12 Java KeyStore (todas las variantes). PKCS#11 Incluyendo DNIe v\u00eda PKCS#11 Windows CAPI Certificados personales Certificados ra\u00edz Llavero de Mac OS X El m\u00f3dulo hace uso de interfaces gr\u00e1ficas (solicitud de contrase\u00f1as o PIN), por lo que necesita que el n\u00facleo cuente con el m\u00f3dulo afirma-core-ui-jse (o una re-implementaci\u00f3n del mismo). El m\u00f3dulo afirma-core-keystores es compatible con JSE 1.5 (y superiores) y con Apache Batik (lo que le proporciona compatibilidad con Google Android 2.2 y superiores), con la precauci\u00f3n de que en entornos distintos a JSE 1.5 o superiores es necesaria una re-implementaci\u00f3n compatible del m\u00f3dulo afirma-core-ui-jse si se usan funcionalidades que necesiten interfaz gr\u00e1fico.","title":"M\u00f3dulo afirma-core-keystores"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-keystores-mozilla","text":"< La gesti\u00f3n de almacenes NSS ( Netscape Security Services ), usados por los productos Mozilla (Firefox, ThunderBird, SeaMonkey, etc.) presenta numerosas diferencias respecto a los otros tipos soportados por afirma-core-keystores, por lo que se encuentra separado en un m\u00f3dulo independiente. Pese a esta separaci\u00f3n, la factor\u00eda principal (es.gob.afirma.keystores.main.common.AOKeyStoreManagerFactory) ser\u00e1 capaz de trabajar con estos almacenes cuando afirma-keystores-mozilla est\u00e9 en el CLASSPATH. Este m\u00f3dulo soporta \u00fanicamente el almac\u00e9n de certificados personales (no ra\u00edz o autoridades intermedias), y necesita que el sistema cuente con las bibliotecas NSS (Netscape Security Services) correctamente instaladas y de la misma arquitectura que el JRE. El m\u00f3dulo afirma-keystores-mozilla es compatible con JSE 1.5 (y superiores), con la precauci\u00f3n de que en entornos distintos a JSE 1.5 o superiores es necesaria una re-implementaci\u00f3n compatible del m\u00f3dulo afirma-core-ui-jse si se usan funcionalidades que necesiten interfaz gr\u00e1fico. Ha sido probado con NSS de 32 y 64 bits en Windows, Linux, Mac OS X y Solaris. En Mac OS X puede requerir la realizaci\u00f3n de cambios persistentes en el sistema, para lo cual solicitar\u00e1 la contrase\u00f1a de administraci\u00f3n la primera vez que se ejecute.","title":"M\u00f3dulo afirma-keystores-mozilla"},{"location":"markdown_strict/CF_arquitectura_ES/#bibliotecas-o-codigo-de-terceros_1","text":"C\u00f3digo incluido: es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilities contiene porciones inspiradas en clases de OpenJDK.","title":"Bibliotecas o c\u00f3digo de terceros"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-keystores-single","text":"< El m\u00f3dulo afirma-keystores-single es directamente un proveedor criptogr\u00e1fico JCA/JCE que implementa el SPI ( Service Provider Interface ) KeyStore a\u00f1adiendo un almac\u00e9n llamado PKCS7 que permite tratar como KeyStore certificados en disco en formato PKCS#7 o directamente X.509 (tanto binarios como Base64). Para usar este m\u00f3dulo es necesario instalarlo en Java como proveedor criptogr\u00e1fico JCE/JCA y obtener el KeyStore de nombre PKCS7. No se implementa el SPI CertStore. El m\u00f3dulo afirma-keystores-single es compatible con JSE 1.5 (y superiores) y con Apache Batik (lo que le proporciona compatibilidad con Google Android 2.2 y superiores), con la precauci\u00f3n de que en entornos distintos a JSE 1.5 o superiores es necesaria una re-implementaci\u00f3n compatible del m\u00f3dulo afirma-core-ui-jse si se usan funcionalidades que necesiten interfaz gr\u00e1fico.","title":"M\u00f3dulo afirma-keystores-single"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-keystores-capiaddressbook","text":"Este m\u00f3dulo no tiene ninguna dependencia externa, ni con bibliotecas ni con otros m\u00f3dulos del Cliente @firma. El m\u00f3dulo afirma-keystores-capiaddressbook es directamente un proveedor criptogr\u00e1fico JCA/JCE que implementa el SPI ( Service Provider Interface ) KeyStore a\u00f1adiendo dos almacenes (llamados Windows-ADDESSBOOK y Windows-CA) permite tratar como KeyStore certificados en loa almacenes de Windows \u201cLibreta de Direcciones\u201d y \u201cAutoridades de Certificaci\u00f3n\u201d respectivamente. Para usar este m\u00f3dulo es necesario instalarlo en Java como proveedor criptogr\u00e1fico JCE/JCA y obtener el KeyStore de nombre PKCS7. No se implementa el SPI CertStore. El m\u00f3dulo afirma-core-addressbook es compatible con JSE 1.6 (y superiores) \u00fanicamente en entornos MS-Windows. En JRE 64 bits es necesario que este incluya el proveedor SunMSCAPI. No se soporta la arquitectura IA64.","title":"M\u00f3dulo afirma-keystores-capiaddressbook"},{"location":"markdown_strict/CF_arquitectura_ES/#bibliotecas-o-codigo-de-terceros_2","text":"C\u00f3digo incluido: sun.security.mscapi contiene porciones del proveedor de seguridad SunMSCAPI de OpenJDK.","title":"Bibliotecas o c\u00f3digo de terceros"},{"location":"markdown_strict/CF_arquitectura_ES/#realizacion-de-firmas-binarias","text":"Los m\u00f3dulos de realizaci\u00f3n de firmas binarias contienen las funcionalidades necesarias para la creaci\u00f3n y gesti\u00f3n de firmas electr\u00f3nicas y sobres digitales en formatos PKCS#7 y derivados, donde encontramos los siguientes formatos: Firmas electr\u00f3nicas CMS CAdES PAdES Sobres digitales CMS CAdES","title":"Realizaci\u00f3n de firmas binarias"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-crypto-core-pkcs7","text":"< El m\u00f3dulo afirma-crypto-core-pkcs7 contiene m\u00e9todos de utilidad para la creaci\u00f3n de firmas electr\u00f3nicas en formatos derivados de PKCS#7, pero no provee ninguna funcionalidad directa a los usuarios (ni siquiera genera firmas en formato PKCS#7), es un m\u00f3dulo de uso interno por parte de otros m\u00f3dulos. Por motivos organizativos, este m\u00f3dulo presenta a su vez un sub-m\u00f3dulo llamado afirma-crypto-core-pkcs7-tsp, que por simplicidad no se trata de forma separada ni se muestra en los diagramas, consider\u00e1ndose que ambos forman un \u00fanico m\u00f3dulo integral. El m\u00f3dulo presenta dependencia directa \u00fanicamente con el n\u00facleo (m\u00f3dulo afirma-core) y con las bibliotecas externas BouncyCastle (proveedor, correo y TSP). El m\u00f3dulo no realiza ninguna llamada a interfaces gr\u00e1ficos y es compatible con JSE 1.5 y superiores y con Apache Batik (Android) 3 y superiores. Para compatibilidad con Android 2.x es necesario refactorizar el proyecto sustituyendo BouncyCastle por SpongyCastle.","title":"M\u00f3dulo afirma-crypto-core-pkcs7"},{"location":"markdown_strict/CF_arquitectura_ES/#bibliotecas-o-codigo-de-terceros_3","text":"Bibliotecas externas: BouncyCastle 1.46.","title":"Bibliotecas o c\u00f3digo de terceros"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-crypto-cades","text":"< El m\u00f3dulo afirma-crypto-cades contiene la funcionalidad para la generaci\u00f3n de firmas electr\u00f3nicas binaria acordes al est\u00e1ndar CAdES. Adem\u00e1s de la propia funcionalidad de firma, contiene los m\u00e9todos necesarios para la generaci\u00f3n de multifirmas CAdES. El m\u00f3dulo presenta dependencia directa con el n\u00facleo (m\u00f3dulo afirma-core), con el m\u00f3dulo de firma binaria (afirma-crypto-core-pkcs7) y con las bibliotecas externas BouncyCastle (proveedor y correo). Para la generaci\u00f3n de multifirmas CAdES debe cubrirse tambi\u00e9n una dependencia din\u00e1mica con el m\u00f3dulo afirma-crypto-cades-multi. El m\u00f3dulo no realiza ninguna llamada a interfaces gr\u00e1ficos y es compatible con JSE 1.5 y superiores y con Apache Batik (Android) 3 y superiores. Para compatibilidad con Android 2.x es necesario refactorizar el proyecto sustituyendo BouncyCastle por SpongyCastle.","title":"M\u00f3dulo afirma-crypto-cades"},{"location":"markdown_strict/CF_arquitectura_ES/#bibliotecas-o-codigo-de-terceros_4","text":"Bibliotecas externas: BouncyCastle 1.46.","title":"Bibliotecas o c\u00f3digo de terceros"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-crypto-cades-multi","text":"< El m\u00f3dulo afirma-crypto-cades-multi contiene los m\u00e9todos para la generaci\u00f3n de multifirmas cades: cofirmas (firmas paralelas) y contrafirmas (firmas en cascada). Los usuarios no utilizar\u00e1n estos m\u00e9todos de forma directa, sino a trav\u00e9s del manejador de firma CAdES (es.gob.afirma.crypto.cades.AOCAdESSigner) existente en el m\u00f3dulo afirma-crypto-cades. El m\u00f3dulo presenta dependencia directa con el m\u00f3dulo de firma CAdES (afirma-crypto-cades), con las funcionalidades de firma binaria (afirma-crypto-core-pkcs7), as\u00ed como del propio de n\u00facleo (m\u00f3dulo afirma-core) y con las bibliotecas externas BouncyCastle (proveedor y correo). El m\u00f3dulo no realiza ninguna llamada a interfaces gr\u00e1ficos y es compatible con JSE 1.5 y superiores y con Apache Batik (Android) 3 y superiores. Para compatibilidad con Android 2.x es necesario refactorizar el proyecto sustituyendo BouncyCastle por SpongyCastle.","title":"M\u00f3dulo afirma-crypto-cades-multi"},{"location":"markdown_strict/CF_arquitectura_ES/#bibliotecas-o-codigo-de-terceros_5","text":"Bibliotecas externas: BouncyCastle 1.46.","title":"Bibliotecas o c\u00f3digo de terceros"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-crypto-cades-enveloper","text":"< El m\u00f3dulo afirma-crypto-cades-enveloper contiene los m\u00e9todos para la generaci\u00f3n de las siguientes estructuras CAdES: Data DigestedData EncryptedData EnvelopedData SignedAndEnvelopedData El m\u00f3dulo presenta dependencia directa con el n\u00facleo (m\u00f3dulo afirma-core), el m\u00f3dulo CAdES (afirma-crypto-cades) , a trav\u00e9s del que realiza las firmas de los empaquetados que la requieren y con las bibliotecas externas BouncyCastle (proveedor y correo). Adicionalmente, existe una dependencia indirecta con el m\u00f3dulo PKCS#7 (afirma-crypto-core-pkcs7), necesario para el tratamiento de las firmas binarias. El m\u00f3dulo no realiza ninguna llamada a interfaces gr\u00e1ficos y es compatible con JSE 1.5 y superiores y con Apache Batik (Android) 3 y superiores. Para compatibilidad con Android 2.x es necesario refactorizar el proyecto sustituyendo BouncyCastle por SpongyCastle.","title":"M\u00f3dulo afirma-crypto-cades-enveloper"},{"location":"markdown_strict/CF_arquitectura_ES/#bibliotecas-o-codigo-de-terceros_6","text":"Bibliotecas externas: BouncyCastle 1.46.","title":"Bibliotecas o c\u00f3digo de terceros"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-crypto-pades","text":"< El m\u00f3dulo afirma-crypto-pades contiene los m\u00e9todos para firmar electr\u00f3nicamente documentos PDF. La firma PAdES es una firma derivada de CAdES que se inserta dentro de un documento PDF y se registra de forma concreta en su diccionario interno. El m\u00f3dulo depende directamente del m\u00f3dulo de firma CAdES (afirma-crypto-cades), del n\u00facleo (m\u00f3dulo afirma-core) y de la biblioteca externa iText, para el manejo de documentos PDF. A su vez, depende indirectamente de las bibliotecas externas BouncyCastle (proveedor, correo y TSP) y del n\u00facleo de firma binaria (m\u00f3dulo afirma-crypto-core-pkcs7). Para su ejecuci\u00f3n desde entornos JSE, ser\u00e1 necesario cubrir la dependencia del n\u00facleo con el m\u00f3dulo afirma-core-ui-jse. El m\u00f3dulo es compatible con JSE 1.5 y superiores y con Apache Batik (Android) 3 y superiores. Para compatibilidad con Android 2.x es necesario refactorizar el proyecto sustituyendo BouncyCastle por SpongyCastle. En sistemas Android, ser\u00e1 necesario remplazar el m\u00f3dulo afirma-core-ui-jse por otro que maneje correctamente los interfaces gr\u00e1ficos del entorno.","title":"M\u00f3dulo afirma-crypto-pades"},{"location":"markdown_strict/CF_arquitectura_ES/#bibliotecas-o-codigo-de-terceros_7","text":"Bibliotecas externas: BouncyCastle 1.46. iText 2.1.7.","title":"Bibliotecas o c\u00f3digo de terceros"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-crypto-cms","text":"< El m\u00f3dulo afirma-crypto-cms contiene los m\u00e9todos para la firma y multifirma electr\u00f3nica binaria en formato CMS, variante evolucionada de PKCS#7. El \u00fanico contentType CMS soportado por este m\u00f3dulo es signedData , el correspondiente a las firmas electr\u00f3nicas CMS. El m\u00f3dulo presenta dependencia directa con el n\u00facleo (m\u00f3dulo afirma-core), con el m\u00f3dulo PKCS#7 (afirma-crypto-core-pkcs7) y con las bibliotecas externas BouncyCastle (proveedor y correo). El m\u00f3dulo no realiza ninguna llamada a interfaces gr\u00e1ficos y es compatible con JSE 1.5 y superiores y con Apache Batik (Android) 3 y superiores. Para compatibilidad con Android 2.x es necesario refactorizar el proyecto sustituyendo BouncyCastle por SpongyCastle.","title":"M\u00f3dulo afirma-crypto-cms"},{"location":"markdown_strict/CF_arquitectura_ES/#bibliotecas-o-codigo-de-terceros_8","text":"Bibliotecas externas: BouncyCastle 1.46.","title":"Bibliotecas o c\u00f3digo de terceros"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-crypto-cms-enveloper","text":"< El m\u00f3dulo afirma-crypto-cms-enveloper contiene los m\u00e9todos para la generaci\u00f3n de las siguientes estructuras CMS: AuthenticatedData AuthenticatedAndEnvelopedData CompressedData Data DigestedData EncryptedData EnvelopedData SignedAndEnvelopedData El m\u00f3dulo presenta dependencia directa con el n\u00facleo (m\u00f3dulo afirma-core), el m\u00f3dulo CMS (afirma-crypto-cms) , a trav\u00e9s del que realiza las firmas de los empaquetados que la requieren y con las bibliotecas externas BouncyCastle (proveedor y correo). Adicionalmente, existe una dependencia indirecta con el m\u00f3dulo PKCS#7 (afirma-crypto-core-pkcs7), necesario para el tratamiento de las firmas binarias. El m\u00f3dulo no realiza ninguna llamada a interfaces gr\u00e1ficos y es compatible con JSE 1.5 y superiores y con Apache Batik (Android) 3 y superiores. Para compatibilidad con Android 2.x es necesario refactorizar el proyecto sustituyendo BouncyCastle por SpongyCastle.","title":"M\u00f3dulo afirma-crypto-cms-enveloper"},{"location":"markdown_strict/CF_arquitectura_ES/#bibliotecas-o-codigo-de-terceros_9","text":"Bibliotecas externas: BouncyCastle 1.46.","title":"Bibliotecas o c\u00f3digo de terceros"},{"location":"markdown_strict/CF_arquitectura_ES/#realizacion-de-firmas-xml","text":"Los m\u00f3dulos de realizaci\u00f3n de firmas XML contienen las funcionalidades necesarias para la creaci\u00f3n y gesti\u00f3n de firmas electr\u00f3nicas XML. Los formatos de firma que se ajustan a esta categor\u00eda son: XAdES XMLDSig ODF OOXML","title":"Realizaci\u00f3n de firmas XML"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-crypto-core-xml","text":"< El m\u00f3dulo afirma-crypto-core-xml contiene m\u00e9todos de utilidad necesarios para el tratamiento de firmas XML, independientemente de su formato concreto. Este m\u00f3dulo no provee ninguna funcionalidad directa a los usuarios, es un m\u00f3dulo de utilidad para su uso por otros m\u00f3dulos. El m\u00f3dulo presenta dependencia directa \u00fanicamente con el n\u00facleo del proyecto (m\u00f3dulo afirma-core). Desde este m\u00f3dulo no se realiza ninguna llamada a interfaces gr\u00e1ficos y es compatible con JSE 1.6 y superiores.","title":"M\u00f3dulo afirma-crypto-core-xml"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-crypto-xades","text":"< El m\u00f3dulo afirma-crypto-xades contiene la funcionalidad para la generaci\u00f3n de firmas electr\u00f3nicas XML avanzadas acordes al est\u00e1ndar XAdES. El m\u00f3dulo est\u00e1 preparado para la generaci\u00f3n de este tipo de firmas en sus variantes Internally Detached, Enveloping y Enveloped. Tambi\u00e9n permite la multifirma en este formato. Existe dependencia directa de este m\u00f3dulo con el n\u00facleo del Cliente (m\u00f3dulo afirma-core), el m\u00f3dulo de firmas XML (afirma-crypto-core-xml) y la biblioteca externa JXAdES. Para tener acceso a la funcionalidad completa del m\u00f3dulo es necesario cubrir dos dependencias adicionales, la biblioteca externa JMimeMagic, que permite identificar el tipo de contenido firmado, y el m\u00f3dulo de interfaces gr\u00e1ficos correspondiente al entorno en cuesti\u00f3n, por defecto, JSE (afirma-core-ui-jse), que permite mostrar un di\u00e1logo auxiliar para localizar las hojas de estilo declaradas cuando es necesario. La biblioteca externa JMimeMagic tiene a su vez dependencias con las bibliotecas Apache Log4Java y Apache Oro. Debido a que estas son dependencias externas se omitir\u00e1n para simplificar el diagrama de arquitectura. El m\u00f3dulo es compatible con JSE 1.6 y superiores.","title":"M\u00f3dulo afirma-crypto-xades"},{"location":"markdown_strict/CF_arquitectura_ES/#bibliotecas-o-codigo-de-terceros_10","text":"Bibliotecas externas: JXAdES (Build 5705) JMimeMagic 0.1.0","title":"Bibliotecas o c\u00f3digo de terceros"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-crypto-xmlsignature","text":"< El m\u00f3dulo afirma-crypto-xmlsignature contiene la funcionalidad para la generaci\u00f3n de firmas electr\u00f3nicas XML acordes al est\u00e1ndar XMLdSig. El m\u00f3dulo est\u00e1 preparado para la generaci\u00f3n de este tipo de firmas en sus variantes Internally Detached, Enveloping y Enveloped. Tambi\u00e9n permite la multifirma en este formato, completando las deficiencias en la declaraci\u00f3n de este est\u00e1ndar con estructuras propias de XAdES (firma avanzada). Este m\u00f3dulo presenta dependencias directas con el n\u00facleo del Cliente (m\u00f3dulo afirma-core) y el m\u00f3dulo de firmas XML (afirma-crypto-core-xml). Adicionalmente, para tener acceso a la funcionalidad completa del m\u00f3dulo es necesario cubrir dos dependencias adicionales, la biblioteca externa JMimeMagic, que permite identificar el tipo de contenido firmado, y el m\u00f3dulo de interfaces gr\u00e1ficos correspondiente al entorno en cuesti\u00f3n, por defecto, JSE (afirma-core-ui-jse), que permite mostrar un di\u00e1logo auxiliar para localizar las hojas de estilo declaradas cuando es necesario. La biblioteca externa JMimeMagic tiene a su vez dependencias con las bibliotecas Apache Log4Java y Apache Oro. Debido a que estas son dependencias externas se omitir\u00e1n para simplificar el diagrama de arquitectura. El m\u00f3dulo es compatible con JSE 1.6 y superiores.","title":"M\u00f3dulo afirma-crypto-xmlsignature"},{"location":"markdown_strict/CF_arquitectura_ES/#bibliotecas-o-codigo-de-terceros_11","text":"Bibliotecas externas: JMimeMagic 0.1.0","title":"Bibliotecas o c\u00f3digo de terceros"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-crypto-odf","text":"< El m\u00f3dulo afirma-crypto-odf contiene la funcionalidad necesaria para agregar firmas a un documento ODF ( Open Document File ). Las firmas generadas son variantes de XMLdSig que se insertan y declaran en los documentos ODF. Las firmas generadas por el m\u00f3dulo son compatibles con LibreOffice y OpenOffice.org 3.2 y superiores. El m\u00f3dulo permite la creaci\u00f3n de firmas compatibles con OpenOffice.org 3.1, pero estas dejar\u00e1n de ser compatibles con versiones superiores de esta herramienta. Este m\u00f3dulo presenta dependencias directas con el n\u00facleo del Cliente (m\u00f3dulo afirma-core) y el m\u00f3dulo de firmas XML (afirma-crypto-core-xml). El m\u00f3dulo es compatible con JSE 1.6 y superiores.","title":"M\u00f3dulo afirma-crypto-odf"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-crypto-ooxml","text":"< El m\u00f3dulo afirma-crypto-ooxml contiene la funcionalidad necesaria para agregar firmas electr\u00f3nicas a un documento OOXML ( Office Open XML ). Las firmas generadas son variantes de XMLdSig que se insertan y declaran en los documentos OOXML. Este m\u00f3dulo presenta dependencias directas con el n\u00facleo del Cliente (m\u00f3dulo afirma-core), el m\u00f3dulo de firma XMLdSig (afirma-crypto-xmlsignature, que a su vez depende de afirma-crypto-core-xml) y la biblioteca externa Apache Commons-IO. El m\u00f3dulo es compatible con JSE 1.6 y superiores.","title":"M\u00f3dulo afirma-crypto-ooxml"},{"location":"markdown_strict/CF_arquitectura_ES/#realizacion-de-cifrados-simetricos","text":"Los cifrados sim\u00e9tricos no hacen uso de certificados ni algoritmos RSA o DSA, sino que usan o claves adaptadas para los distintos algoritmos de cifrado o contrase\u00f1as que los usuarios pueden recordar e introducir directamente.","title":"Realizaci\u00f3n de cifrados sim\u00e9tricos"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-crypto-cipher","text":"< El m\u00f3dulo de cifrado (afirma-crypto-cipher) hace uso del proveedor Sun JCE para la realizaci\u00f3n de cifrados sim\u00e9tricos en base a claves y contrase\u00f1as. Los algoritmos de cifrado soportados son: Mediante clave AES ARCFOUR BLOWFISH DES TripleDES RC2 Mediante contrase\u00f1a PBE con SHA1 y TripleDES PBE con SHA1 y RC2.40 PBE con MD5 y DDES Este m\u00f3dulo depende directamente del n\u00facleo (m\u00f3dulo afirma-core) y, de forma indirecta, de un m\u00f3dulo de interfaces gr\u00e1ficos, por defecto, el de JSE (afirma-core-ui-jse). El m\u00f3dulo es compatible con JSE 1.5 y superiores.","title":"M\u00f3dulo afirma-crypto-cipher"},{"location":"markdown_strict/CF_arquitectura_ES/#realizacion-de-firmas-multifirmas-masivas","text":"Se llaman firmas masivas a los procesos en los que se firman consecutivamente varios ficheros. Estas firmas consecutivas pueden realizarse sin interacci\u00f3n intermedia del usuario y las listas de ficheros a firmas pueden establecerse por varios medios, externamente de forma program\u00e1tica o con una l\u00f3gica interna basada en directorios y carpetas del sistema de ficheros.","title":"Realizaci\u00f3n de firmas / multifirmas masivas"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-core-massive","text":"< El m\u00f3dulo afirma-core-massive proporciona dos mecanismos para la firma masiva de datos. Estos son: Firma/Multifirma de directorios: Proporciona los m\u00e9todos para firmar y multifirmar los ficheros de un directorio. Admite configurar el comportamiento de las operaciones individuales, las opciones de firma, filtrar ficheros por extensi\u00f3n \u2026 Firma/Multifirma program\u00e1tica: Proporciona los m\u00e9todos necesarios para firmar o multifirmar datos, proporcionando estos, un fichero o su huella digital. Este m\u00f3dulo depende directamente del n\u00facleo (m\u00f3dulo afirma-core) del proyecto. A su vez, enlaza din\u00e1micamente con cualquier m\u00f3dulo de firma que agregue al proyecto, heredando todas sus dependencias. El m\u00f3dulo es compatible con JSE 1.5 y superiores.","title":"M\u00f3dulo afirma-core-massive"},{"location":"markdown_strict/CF_arquitectura_ES/#utilidades","text":"","title":"Utilidades"},{"location":"markdown_strict/CF_arquitectura_ES/#modulo-afirma-util","text":"El m\u00f3dulo afirma-util contiene clases de utilidad para la gesti\u00f3n de validez de certificados. Es compatible con Java 1.5 y superiores, depende \u00fanicamente del n\u00facleo y no usa bibliotecas externas ni contiene c\u00f3digo de terceros.","title":"M\u00f3dulo afirma-util"},{"location":"markdown_strict/CF_arquitectura_ES/#dependencias-del-applet-firma-respecto-a-los-modulos","text":"","title":"Dependencias del Applet @firma respecto a los m\u00f3dulos"},{"location":"markdown_strict/CF_arquitectura_ES/#descripcion-general_1","text":"El Applet @firma es un Applet para la realizaci\u00f3n de firmas y multifirmas electr\u00f3nicas, cifrados sim\u00e9tricos y sobre digitales. Tambi\u00e9n permite la operaci\u00f3n de masiva de firmas electr\u00f3nicas. El applet @firma tiene como dependencias los m\u00f3dulos del Cliente del siguiente listado: afirma-core afirma-ui-core-jse afirma-core-keystores afirma-keystores-mozilla afirma-keystores-single afirma-keystores-capiaddressbook afirma-crypto-core-pkcs7 afirma-crypto-cades afirma-crypto-cades-multi afirma-crypto-pades afirma-crypto-cms afirma-crypto-cms-enveloper afirma-crypto-core-xml afirma-crypto-xades afirma-crypto-xmlsignature afirma-crypto-odf afirma-crypto-ooxml afirma-crypto-cipher afirma-core-massive afirma-util","title":"Descripci\u00f3n general"},{"location":"markdown_strict/CF_arquitectura_ES/#dependencias-del-miniapplet-firma-respecto-a-los-modulos","text":"","title":"Dependencias del MiniApplet @firma respecto a los m\u00f3dulos"},{"location":"markdown_strict/CF_arquitectura_ES/#descripcion-general_2","text":"El MiniApplet @firma es un frontal de firma electr\u00f3nica en forma de Applet para su ejecuci\u00f3n en entorno Web. Este aplicativo permite su ejecuci\u00f3n desde cualquier navegador Web soportado por el Cliente y la generaci\u00f3n de firma en formatos CAdES, PAdES, XAdES y ODF. Los m\u00f3dulos del Cliente de los que depende el MiniApplet @firma son: afirma-core afirma-ui-core-jse afirma-core-keystores afirma-keystores-mozilla afirma-crypto-core-pkcs7 afirma-crypto-cades afirma-crypto-cades-multi afirma-crypto-pdf afirma-crypto-core-xml afirma-crypto-xades","title":"Descripci\u00f3n general"},{"location":"markdown_strict/CF_arquitectura_ES/#dependencias-del-interfaz-standalone-respecto-a-los-modulos","text":"","title":"Dependencias del interfaz Standalone respecto a los m\u00f3dulos"},{"location":"markdown_strict/CF_arquitectura_ES/#descripcion-general_3","text":"El interfaz Standalone es un aplicativo de escritorio que permite la generaci\u00f3n de firmas electr\u00f3nicas, cifrados sim\u00e9tricos y sobre digitales, adem\u00e1s de permitir operaciones de firma masiva y la validaci\u00f3n y extracci\u00f3n de datos de firma. Los m\u00f3dulos del Cliente de los que depende el interfaz Standalone son: afirma-core afirma-ui-core-jse afirma-core-keystores afirma-keystores-mozilla afirma-keystores-single afirma-keystores-capiaddressbook afirma-crypto-core-pkcs7 afirma-crypto-cades afirma-crypto-cades-multi afirma-crypto-pdf afirma-crypto-cms afirma-crypto-cms-enveloper afirma-crypto-core-xml afirma-crypto-xades afirma-crypto-xmlsignature afirma-crypto-odf afirma-crypto-ooxml afirma-crypto-cipher afirma-core-massive afirma-util","title":"Descripci\u00f3n general"},{"location":"markdown_strict/CF_arquitectura_ES/#dependencias-de-simpleafirma-respecto-a-los-modulos","text":"","title":"Dependencias de SimpleAfirma respecto a los m\u00f3dulos"},{"location":"markdown_strict/CF_arquitectura_ES/#descripcion-general_4","text":"El interfaz SimpleAfirma es un aplicativo de escritorio que permite la generaci\u00f3n sencilla de firmas electr\u00f3nicas. Los m\u00f3dulos del Cliente de los que depende el interfaz SimpleAfirma son: afirma-core afirma-ui-core-jse afirma-core-keystores afirma-keystores-mozilla afirma-crypto-core-pkcs7 afirma-crypto-cades afirma-crypto-cades-multi afirma-crypto-pdf afirma-crypto-core-xml afirma-crypto-xades afirma-util","title":"Descripci\u00f3n general"},{"location":"markdown_strict/CF_arquitectura_ES/#tabla-resumen-de-dependencias-de-las-aplicaciones-firma-respecto-a-los-modulos","text":"M\u00f3dulos Applet MiniApplet StandAlone Simple afirma-core afirma-ui-core-jse afirma-core-keystores afirma-keystores-mozilla afirma-keystores-single afirma-keystores-capiaddressbook afirma-crypto-core-pkcs7 afirma-crypto-cades afirma-crypto-cades-multi afirma-crypto-pdf afirma-crypto-cms afirma-crypto-cms-enveloper afirma-crypto-core-xml afirma-crypto-xades afirma-crypto-xmlsignature afirma-crypto-odf afirma-crypto-ooxml afirma-crypto-cipher afirma-core-massive afirma-util Leyenda: Verde: Utiliza el m\u00f3dulo. Blanco: No utiliza el m\u00f3dulo","title":"Tabla resumen de dependencias de las aplicaciones @firma respecto a los m\u00f3dulos"},{"location":"markdown_strict/CF_catalogo_aplicaciones/","text":"Cat\u00e1logo de aplicaciones de < < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported . \u00cdndice 1 La aplicaci\u00f3n Cliente @firma adecuada a sus necesidades [3](#la-aplicaci\u00f3n-cliente-firma-adecuada-a-sus-necesidades) 1.1 Las distintas aplicaciones del proyecto Cliente @firma [3](#las-distintas-aplicaciones-del-proyecto-cliente-firma) 1.1.1 Applet Cliente @firma [3](#applet-cliente-firma) 1.1.2 MiniApplet Cliente @firma [4](#miniapplet-cliente-firma) 1.1.3 Cliente @firma StandAlone [5](#cliente-firma-standalone) 1.1.4 \u201cFirma F\u00e1cil con @firma\u201d [6](#firma-f\u00e1cil-con-firma) 1.2 Tablas de caracter\u00edsticas de las aplicaciones del proyecto Cliente @firma [7](#tablas-de-caracter\u00edsticas-de-las-aplicaciones-del-proyecto-cliente-firma) 1.2.1 Compatibilidad con modos de despliegue/operaci\u00f3n [7](#compatibilidad-con-modos-de-despliegueoperaci\u00f3n) 1.2.2 Compatibilidad con sistemas operativos [7](#compatibilidad-con-sistemas-operativos) 1.2.3 Compatibilidad con navegadores Web (modo Applet) [8](#compatibilidad-con-navegadores-web-modo-applet) 1.2.4 Compatibilidad con versiones del entorno de ejecuci\u00f3n de Java (JRE) [8](#compatibilidad-con-versiones-del-entorno-de-ejecuci\u00f3n-de-java-jre) 1.2.5 Tipos de operaciones criptogr\u00e1ficas soportadas [8](#tipos-de-operaciones-criptogr\u00e1ficas-soportadas) 1.2.6 Formatos de firma electr\u00f3nica soportados [9](#formatos-de-firma-electr\u00f3nica-soportados) 1.2.7 Accesibilidad para personas con discapacidades [9](#accesibilidad-para-personas-con-discapacidades) La aplicaci\u00f3n Cliente @firma adecuada a sus necesidades Las distintas aplicaciones del proyecto Cliente @firma El proyecto @firma cuenta con un conjunto de cuatro aplicaciones independientes dise\u00f1adas para cubrir cualquier necesidad en cuanto a firmas electr\u00f3nicas. Es posible desplegar o utilizar una o varias de estas aplicaciones, y cada una de ellas cubre un segmento de funcionalidades y modos de operaci\u00f3n diferentes. Applet Cliente @firma El Applet Cliente @firma es la aplicaci\u00f3n dentro del proyecto m\u00e1s extendida actualmente entre las administraciones p\u00fablicas, y proporciona un ampl\u00edsimo rango de operaciones criptogr\u00e1ficas y de firma electr\u00f3nica para ser operadas v\u00eda Web con la m\u00e1xima compatibilidad con distintos entornos operativos. El Applet proporciona (entre otras) las siguientes funcionalidades: Firmas electr\u00f3nicas Consulte los formatos de firma soportados en el apartado Formatos de firma electr\u00f3nica soportados . Firmas electr\u00f3nicas masivas Basada en directorios Program\u00e1tica (hay que proveer la l\u00f3gica que indica los ficheros a firmar externamente) Cifrados sim\u00e9tricos Sobres digitales Filtros de certificados configurables M\u00e9todos de utilidad para funcionalidades avanzadas MiniApplet Cliente @firma El MiniApplet Cliente @firma no es una versi\u00f3n reducida del Applet Cliente @firma, sino una nueva implementaci\u00f3n de las funcionalidades m\u00e1s solicitadas en cuenta a firma electr\u00f3nica implementadas en un Applet de Java peque\u00f1o, eficiente y extremadamente \u00e1gil. Si sus necesidades en cuanto a firma se ven cubiertas por las soportadas por el MiniApplet, este ser\u00e1 siempre la opci\u00f3n preferente, ya que proporciona una mejor experiencia de usuario (menos tiempo de carga) y una mayor facilidad de integraci\u00f3n (operaci\u00f3n simplificada). El Applet proporciona (entre otras) las siguientes funcionalidades: Firmas electr\u00f3nicas Consulte los formatos de firma soportados en el apartado Formatos de firma electr\u00f3nica soportados . Filtros de certificados pre-configurados Cliente @firma StandAlone < Ilustraci\u00f3n 5: Interfaz del Cliente @firma StandAlone El Cliente @firma StandAlone no es una aplicaci\u00f3n Web, sino una aplicaci\u00f3n Java de escritorio compatible con cualquier sistema operativo y capaz de realizar pr\u00e1cticamente cualquier operaci\u00f3n criptogr\u00e1fica y tipo de firma electr\u00f3nica. Una notable caracter\u00edstica de esta aplicaci\u00f3n es su alto grado de accesibilidad, que la convierte en la opci\u00f3n preferente para garantizar su adecuado uso por parte de personas con alg\u00fan tipo de discapacidad. La aplicaci\u00f3n \u201cStandAlone\u201d proporciona (entre otras) las siguientes funcionalidades: Firmas electr\u00f3nicas Consulte los formatos de firma soportados en el apartado Formatos de firma electr\u00f3nica soportados . Firmas electr\u00f3nicas masivas basadas en directorios Validaci\u00f3n y extracci\u00f3n de datos de firma Cifrados sim\u00e9tricos Sobres digitales Interfaz gr\u00e1fico accesible \u201cFirma F\u00e1cil con @firma\u201d < Ilustraci\u00f3n 6: Interfaz gr\u00e1fico de \"Firma F\u00e1cil con @firma\" Cuando necesitamos una aplicaci\u00f3n de escritorio, pero deseamos \u00fanicamente realizar firmas electr\u00f3nicas avanzadas (AdES) y es conveniente una operaci\u00f3n f\u00e1cil y sencilla, la aplicaci\u00f3n \u201cFirma F\u00e1cil con @firma\u201d pasa a ser la opci\u00f3n m\u00e1s adecuada. \u201cFirma F\u00e1cil con @firma\u201d restringe la funcionalidad a firmas electr\u00f3nicas AdES, pero proporciona un interfaz gr\u00e1fico visualmente atractivo, intuitivo y f\u00e1cil de usar y perfectamente adaptado a los sistemas operativos modernos. La aplicaci\u00f3n \u201cFirma F\u00e1cil\u201d proporciona (entre otras) las siguientes funcionalidades: Firmas electr\u00f3nicas Consulte los formatos de firma soportados en el apartado Formatos de firma electr\u00f3nica soportados . Interfaz gr\u00e1fico avanzado Tablas de caracter\u00edsticas de las aplicaciones del proyecto Cliente @firma Compatibilidad con modos de despliegue/operaci\u00f3n Web Applet Escritorio PC/Mac Applet \uf061 \uf072 MiniApplet \uf061 \uf072 StandAlone \uf072 \uf061 FirmaF\u00e1cil \uf061 * \uf061 * La aplicaci\u00f3n \u201cFirma F\u00e1cil con @firma\u201d puede ser desplegada en forma de Applet de Java, pero no proporciona automatizaci\u00f3n ni integraci\u00f3n con JavaScript, manteniendo la operaci\u00f3n con su propio interfaz gr\u00e1fico, solo que empotrado en una p\u00e1gina Web. Ninguna de las aplicaciones actuales es compatible con despliegue sobre sistemas operativos m\u00f3viles, como Apple iOS, Google Android, RIM BlackBerry o Microsoft Windows Phone. Compatibilidad con sistemas operativos Microsoft Windows Linux Apple Mac OS X Applet \uf061 \uf061 \uf061 MiniApplet \uf061 \uf061 \uf061 StandAlone \uf061 \uf061 \uf061 FirmaF\u00e1cil \uf061 \uf061 \uf061 Puede consultar en los manuales de integraci\u00f3n de las aplicaciones \u201cApplet\u201d y \u201cMiniApplet\u201d, el manual de uso de la interfaz StandAlone y el fichero Readme de Firma F\u00e1cil para identificar las distintas versiones de sistemas operativos compatibles. Ninguna de las aplicaciones actuales es compatible con sistemas operativos m\u00f3viles, como Apple iOS, Google Android, RIM BlackBerry o Microsoft Windows Phone. Compatibilidad con navegadores Web (modo Applet) Internet Explorer Mozilla Firefox Google Chrome Apple Safari Opera Applet \uf061 \uf061 \uf061 \uf061 \uf061 MiniApplet \uf061 \uf061 \uf061 \uf061 \uf061 StandAlone N/A N/A N/A N/A N/A FirmaF\u00e1cil \uf061 * \uf061 * \uf061 * \uf061 * \uf061 * * La aplicaci\u00f3n \u201cFirma F\u00e1cil con @firma\u201d aunque compatible con despliegue Web en modo Applet, no permite automatizaci\u00f3n ni integraci\u00f3n mediante JavaScript. No se proporciona soporte sobre el despliegue como Applet de \u201cFirma F\u00e1cil con @firma\u201d. Puede consultar en los manuales de integraci\u00f3n de las aplicaciones \u201cApplet\u201d y \u201cMiniApplet\u201d las distintas versiones de navegadores compatibles. Compatibilidad con versiones del entorno de ejecuci\u00f3n de Java (JRE) Java 5 Java 6 Java 7 Applet \uf061 \uf061 \uf061 MiniApplet \uf072 \uf061 \uf061 StandAlone \uf072 \uf061 \uf061 FirmaF\u00e1cil \uf072 \uf061 \uf061 La compatibilidad se refiere tanto a versiones de 32 como de 64 bits. Tipos de operaciones criptogr\u00e1ficas soportadas Firmas Electr\u00f3nicas Firmas M\u00e1sivas Sobres Digitales Cifrados Sim\u00e9tricos Applet \uf061 \uf061 \uf061 \uf061 MiniApplet \uf061 \uf072 \uf072 \uf072 StandAlone \uf061 \uf061 \uf061 \uf061 FirmaF\u00e1cil \uf061 \uf072 * \uf072 \uf072 * Es posible simular medios de firma masiva con el MiniApplet usando programaci\u00f3n JavaScript y filtros de certificados pre-programados. Formatos de firma electr\u00f3nica soportados Salvo que se indique lo contrario las distintas herramientas soportan las variantes BES y EPES de los formatos de firma avanzados (AdES). XAdES PAdES CAdES OOXML ODF CMS XMLDSig Applet \uf061 \uf061 \uf061 \uf061 \uf061 \uf061 \uf061 MiniApplet \uf061 \uf061 \uf061 \uf072 \uf061 \uf072 \uf072 StandAlone \uf061 \uf061 \uf061 \uf061 \uf061 \uf072 \uf072 FirmaF\u00e1cil \uf061 * \uf061 * \uf061 * \uf072 \uf072 \uf072 \uf072 * La aplicaci\u00f3n \u201cFirma F\u00e1cil con @firma\u201d \u00fanicamente soporta las siguientes variantes de cada formato: PAdES: BES para fichero PDF ( Portable Document Format ). CAdES: BES Con contenido (impl\u00edcitas) para ficheros binarios. XAdES: EPES Enveloped para facturas electr\u00f3nicas y BES Enveloping para otros ficheros. Accesibilidad para personas con discapacidades Accesible Applet \uf072 MiniApplet \uf072 StandAlone \uf061 FirmaF\u00e1cil \uf061 * * La aplicaci\u00f3n \u201cFirma F\u00e1cil con @firma\u201d presenta un nivel alto de accesibilidad, aunque con ciertas carencias en las lecturas de textos en pantalla.","title":"CF catalogo aplicaciones"},{"location":"markdown_strict/CF_catalogo_aplicaciones/#la-aplicacion-cliente-firma-adecuada-a-sus-necesidades","text":"","title":"La aplicaci\u00f3n Cliente @firma adecuada a sus necesidades"},{"location":"markdown_strict/CF_catalogo_aplicaciones/#las-distintas-aplicaciones-del-proyecto-cliente-firma","text":"El proyecto @firma cuenta con un conjunto de cuatro aplicaciones independientes dise\u00f1adas para cubrir cualquier necesidad en cuanto a firmas electr\u00f3nicas. Es posible desplegar o utilizar una o varias de estas aplicaciones, y cada una de ellas cubre un segmento de funcionalidades y modos de operaci\u00f3n diferentes.","title":"Las distintas aplicaciones del proyecto Cliente @firma"},{"location":"markdown_strict/CF_catalogo_aplicaciones/#applet-cliente-firma","text":"El Applet Cliente @firma es la aplicaci\u00f3n dentro del proyecto m\u00e1s extendida actualmente entre las administraciones p\u00fablicas, y proporciona un ampl\u00edsimo rango de operaciones criptogr\u00e1ficas y de firma electr\u00f3nica para ser operadas v\u00eda Web con la m\u00e1xima compatibilidad con distintos entornos operativos. El Applet proporciona (entre otras) las siguientes funcionalidades: Firmas electr\u00f3nicas Consulte los formatos de firma soportados en el apartado Formatos de firma electr\u00f3nica soportados . Firmas electr\u00f3nicas masivas Basada en directorios Program\u00e1tica (hay que proveer la l\u00f3gica que indica los ficheros a firmar externamente) Cifrados sim\u00e9tricos Sobres digitales Filtros de certificados configurables M\u00e9todos de utilidad para funcionalidades avanzadas","title":"Applet Cliente @firma"},{"location":"markdown_strict/CF_catalogo_aplicaciones/#miniapplet-cliente-firma","text":"El MiniApplet Cliente @firma no es una versi\u00f3n reducida del Applet Cliente @firma, sino una nueva implementaci\u00f3n de las funcionalidades m\u00e1s solicitadas en cuenta a firma electr\u00f3nica implementadas en un Applet de Java peque\u00f1o, eficiente y extremadamente \u00e1gil. Si sus necesidades en cuanto a firma se ven cubiertas por las soportadas por el MiniApplet, este ser\u00e1 siempre la opci\u00f3n preferente, ya que proporciona una mejor experiencia de usuario (menos tiempo de carga) y una mayor facilidad de integraci\u00f3n (operaci\u00f3n simplificada). El Applet proporciona (entre otras) las siguientes funcionalidades: Firmas electr\u00f3nicas Consulte los formatos de firma soportados en el apartado Formatos de firma electr\u00f3nica soportados . Filtros de certificados pre-configurados","title":"MiniApplet Cliente @firma"},{"location":"markdown_strict/CF_catalogo_aplicaciones/#cliente-firma-standalone","text":"< Ilustraci\u00f3n 5: Interfaz del Cliente @firma StandAlone El Cliente @firma StandAlone no es una aplicaci\u00f3n Web, sino una aplicaci\u00f3n Java de escritorio compatible con cualquier sistema operativo y capaz de realizar pr\u00e1cticamente cualquier operaci\u00f3n criptogr\u00e1fica y tipo de firma electr\u00f3nica. Una notable caracter\u00edstica de esta aplicaci\u00f3n es su alto grado de accesibilidad, que la convierte en la opci\u00f3n preferente para garantizar su adecuado uso por parte de personas con alg\u00fan tipo de discapacidad. La aplicaci\u00f3n \u201cStandAlone\u201d proporciona (entre otras) las siguientes funcionalidades: Firmas electr\u00f3nicas Consulte los formatos de firma soportados en el apartado Formatos de firma electr\u00f3nica soportados . Firmas electr\u00f3nicas masivas basadas en directorios Validaci\u00f3n y extracci\u00f3n de datos de firma Cifrados sim\u00e9tricos Sobres digitales Interfaz gr\u00e1fico accesible","title":"Cliente @firma StandAlone"},{"location":"markdown_strict/CF_catalogo_aplicaciones/#firma-facil-con-firma","text":"< Ilustraci\u00f3n 6: Interfaz gr\u00e1fico de \"Firma F\u00e1cil con @firma\" Cuando necesitamos una aplicaci\u00f3n de escritorio, pero deseamos \u00fanicamente realizar firmas electr\u00f3nicas avanzadas (AdES) y es conveniente una operaci\u00f3n f\u00e1cil y sencilla, la aplicaci\u00f3n \u201cFirma F\u00e1cil con @firma\u201d pasa a ser la opci\u00f3n m\u00e1s adecuada. \u201cFirma F\u00e1cil con @firma\u201d restringe la funcionalidad a firmas electr\u00f3nicas AdES, pero proporciona un interfaz gr\u00e1fico visualmente atractivo, intuitivo y f\u00e1cil de usar y perfectamente adaptado a los sistemas operativos modernos. La aplicaci\u00f3n \u201cFirma F\u00e1cil\u201d proporciona (entre otras) las siguientes funcionalidades: Firmas electr\u00f3nicas Consulte los formatos de firma soportados en el apartado Formatos de firma electr\u00f3nica soportados . Interfaz gr\u00e1fico avanzado","title":"\u201cFirma F\u00e1cil con @firma\u201d"},{"location":"markdown_strict/CF_catalogo_aplicaciones/#tablas-de-caracteristicas-de-las-aplicaciones-del-proyecto-cliente-firma","text":"","title":"Tablas de caracter\u00edsticas de las aplicaciones del proyecto Cliente @firma"},{"location":"markdown_strict/CF_catalogo_aplicaciones/#compatibilidad-con-modos-de-despliegueoperacion","text":"Web Applet Escritorio PC/Mac Applet \uf061 \uf072 MiniApplet \uf061 \uf072 StandAlone \uf072 \uf061 FirmaF\u00e1cil \uf061 * \uf061 * La aplicaci\u00f3n \u201cFirma F\u00e1cil con @firma\u201d puede ser desplegada en forma de Applet de Java, pero no proporciona automatizaci\u00f3n ni integraci\u00f3n con JavaScript, manteniendo la operaci\u00f3n con su propio interfaz gr\u00e1fico, solo que empotrado en una p\u00e1gina Web. Ninguna de las aplicaciones actuales es compatible con despliegue sobre sistemas operativos m\u00f3viles, como Apple iOS, Google Android, RIM BlackBerry o Microsoft Windows Phone.","title":"Compatibilidad con modos de despliegue/operaci\u00f3n"},{"location":"markdown_strict/CF_catalogo_aplicaciones/#compatibilidad-con-sistemas-operativos","text":"Microsoft Windows Linux Apple Mac OS X Applet \uf061 \uf061 \uf061 MiniApplet \uf061 \uf061 \uf061 StandAlone \uf061 \uf061 \uf061 FirmaF\u00e1cil \uf061 \uf061 \uf061 Puede consultar en los manuales de integraci\u00f3n de las aplicaciones \u201cApplet\u201d y \u201cMiniApplet\u201d, el manual de uso de la interfaz StandAlone y el fichero Readme de Firma F\u00e1cil para identificar las distintas versiones de sistemas operativos compatibles. Ninguna de las aplicaciones actuales es compatible con sistemas operativos m\u00f3viles, como Apple iOS, Google Android, RIM BlackBerry o Microsoft Windows Phone.","title":"Compatibilidad con sistemas operativos"},{"location":"markdown_strict/CF_catalogo_aplicaciones/#compatibilidad-con-navegadores-web-modo-applet","text":"Internet Explorer Mozilla Firefox Google Chrome Apple Safari Opera Applet \uf061 \uf061 \uf061 \uf061 \uf061 MiniApplet \uf061 \uf061 \uf061 \uf061 \uf061 StandAlone N/A N/A N/A N/A N/A FirmaF\u00e1cil \uf061 * \uf061 * \uf061 * \uf061 * \uf061 * * La aplicaci\u00f3n \u201cFirma F\u00e1cil con @firma\u201d aunque compatible con despliegue Web en modo Applet, no permite automatizaci\u00f3n ni integraci\u00f3n mediante JavaScript. No se proporciona soporte sobre el despliegue como Applet de \u201cFirma F\u00e1cil con @firma\u201d. Puede consultar en los manuales de integraci\u00f3n de las aplicaciones \u201cApplet\u201d y \u201cMiniApplet\u201d las distintas versiones de navegadores compatibles.","title":"Compatibilidad con navegadores Web (modo Applet)"},{"location":"markdown_strict/CF_catalogo_aplicaciones/#compatibilidad-con-versiones-del-entorno-de-ejecucion-de-java-jre","text":"Java 5 Java 6 Java 7 Applet \uf061 \uf061 \uf061 MiniApplet \uf072 \uf061 \uf061 StandAlone \uf072 \uf061 \uf061 FirmaF\u00e1cil \uf072 \uf061 \uf061 La compatibilidad se refiere tanto a versiones de 32 como de 64 bits.","title":"Compatibilidad con versiones del entorno de ejecuci\u00f3n de Java (JRE)"},{"location":"markdown_strict/CF_catalogo_aplicaciones/#tipos-de-operaciones-criptograficas-soportadas","text":"Firmas Electr\u00f3nicas Firmas M\u00e1sivas Sobres Digitales Cifrados Sim\u00e9tricos Applet \uf061 \uf061 \uf061 \uf061 MiniApplet \uf061 \uf072 \uf072 \uf072 StandAlone \uf061 \uf061 \uf061 \uf061 FirmaF\u00e1cil \uf061 \uf072 * \uf072 \uf072 * Es posible simular medios de firma masiva con el MiniApplet usando programaci\u00f3n JavaScript y filtros de certificados pre-programados.","title":"Tipos de operaciones criptogr\u00e1ficas soportadas"},{"location":"markdown_strict/CF_catalogo_aplicaciones/#formatos-de-firma-electronica-soportados","text":"Salvo que se indique lo contrario las distintas herramientas soportan las variantes BES y EPES de los formatos de firma avanzados (AdES). XAdES PAdES CAdES OOXML ODF CMS XMLDSig Applet \uf061 \uf061 \uf061 \uf061 \uf061 \uf061 \uf061 MiniApplet \uf061 \uf061 \uf061 \uf072 \uf061 \uf072 \uf072 StandAlone \uf061 \uf061 \uf061 \uf061 \uf061 \uf072 \uf072 FirmaF\u00e1cil \uf061 * \uf061 * \uf061 * \uf072 \uf072 \uf072 \uf072 * La aplicaci\u00f3n \u201cFirma F\u00e1cil con @firma\u201d \u00fanicamente soporta las siguientes variantes de cada formato: PAdES: BES para fichero PDF ( Portable Document Format ). CAdES: BES Con contenido (impl\u00edcitas) para ficheros binarios. XAdES: EPES Enveloped para facturas electr\u00f3nicas y BES Enveloping para otros ficheros.","title":"Formatos de firma electr\u00f3nica soportados"},{"location":"markdown_strict/CF_catalogo_aplicaciones/#accesibilidad-para-personas-con-discapacidades","text":"Accesible Applet \uf072 MiniApplet \uf072 StandAlone \uf061 FirmaF\u00e1cil \uf061 * * La aplicaci\u00f3n \u201cFirma F\u00e1cil con @firma\u201d presenta un nivel alto de accesibilidad, aunque con ciertas carencias en las lecturas de textos en pantalla.","title":"Accesibilidad para personas con discapacidades"},{"location":"markdown_strict/CF_distribuciones/","text":"< < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported . \u00cdndice 1 Introducci\u00f3n [3](#introducci\u00f3n) 1.1 Objeto [3](#objeto) 2 Gesti\u00f3n de versiones [4](#gesti\u00f3n-de-versiones) 2.1 Cliente @firma [4](#cliente-firma) 2.1.1 Cliente v1.1 [4](#cliente-v1.1) 2.1.2 Cliente v1.2 [4](#cliente-v1.2) 2.1.3 Cliente v2.1 [5](#cliente-v2.1) 2.1.4 Cliente v2.3 [5](#cliente-v2.3) 2.1.5 Cliente v2.3.1 [6](#cliente-v2.3.1) 2.1.6 Cliente v2.3.2 [6](#cliente-v2.3.2) 2.1.7 Cliente v2.3.3 [6](#cliente-v2.3.3) 2.1.8 Cliente v2.3.5 [7](#cliente-v2.3.5) 2.1.9 Cliente v2.4 [8](#cliente-v2.4) 2.1.10 Cliente v3.0.1 [8](#cliente-v3.0.1) 2.1.11 Cliente v3.0.2 [9](#cliente-v3.0.2) 2.1.12 Cliente v3.1.0 [10](#cliente-v3.1.0) 2.1.13 Cliente v3.2.0 [11](#cliente-v3.2.0) 2.1.14 Cliente v3.3.0 [13](#cliente-v3.3.0) 2.1.15 Cliente v3.3.1 [14](#cliente-v3.3.1) 2.1.16 Cliente v3.4 [15](#cliente-v3.4) Creative Commons [16](#_Toc417992902) Introducci\u00f3n El Cliente de Firma es una herramienta de Firma Electr\u00f3nica que funciona en forma de Applet de Java integrado en una p\u00e1gina Web mediante JavaScript. El Cliente hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados ( keystore ) del navegador web ( Internet Explorer, Mozilla, Firefox ) o el sistema operativo as\u00ed como de los que est\u00e9n en dispositivos (tarjetas inteligentes , dispositivos USB ) configurados en el mismo (el caso de los DNI-e). El Cliente de Firma, como su nombre indica, es una aplicaci\u00f3n que se ejecuta en cliente (en el ordenador del usuario, no en el servidor Web). Esto es as\u00ed para evitar que la clave privada asociada a un certificado tenga que \u201csalir\u201d del contenedor del usuario (tarjeta, dispositivo USB o navegador) ubicado en su PC. De hecho, nunca llega a salir del navegador, el Cliente le env\u00eda los datos a firmar y \u00e9ste los devuelve firmados. El Cliente de Firma contiene las interfaces y componentes web necesarios para la realizaci\u00f3n de los siguientes procesos (adem\u00e1s de otros auxiliares como c\u00e1lculos de hash, lectura de ficheros, etc\u2026): Firma de datos y ficheros. Multifirma masiva de datos y ficheros. Cofirma (CoSignature) Multifirma al mismo nivel. Contrafirma (CounterSignature) Multifirma en cascada. Como complemento al cliente de firma, se encuentra un cliente de cifrado que nos permite realizar las funciones de encriptaci\u00f3n y desencriptaci\u00f3n de datos atendiendo a diferentes algoritmos y configuraciones. Adem\u00e1s permite la generaci\u00f3n de sobres digitales. Objeto El presente documento lista los cambios y agregados sufridos por el cliente @firma en cada una de sus versiones publicadas. Gesti\u00f3n de versiones Cliente @firma Cliente v1.1 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 1.1 Fecha 11/2006 Motivo Generaci\u00f3n Nuevas Funcionalidades Caracter\u00edsticas Incluidas Incorporaci\u00f3n de funciones de cifrado sim\u00e9trico. Incorporaci\u00f3n de modos de firma expl\u00edcito e impl\u00edcito en formato CMS. A\u00f1adida compatibilidad entre CMS y PKCS#7. A\u00f1adidos demostraciones de uso. Cliente v1.2 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 1.2 Fecha 12/2006 Motivo Generaci\u00f3n Nuevas Funcionalidades Caracter\u00edsticas Incluidas Incorporaci\u00f3n de los formatos de firma XMLDSignature y XAdES v1.1.1 como plugin. Mejoras en el m\u00f3dulo de cifrado. Incorporaci\u00f3n de claves alfanum\u00e9ricas no seguras. A\u00f1adida la capacidad de introducir atributos firmados y no firmados. A\u00f1adidos ejemplos en c\u00f3digo. Mejorada la instalaci\u00f3n e integraci\u00f3n de plugins. Cliente v2.1 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 2.1 Fecha 3/2007 Motivo Generaci\u00f3n Nuevas Funcionalidades Caracter\u00edsticas Incluidas Adaptaci\u00f3n del formato de firma XADES a est\u00e1ndar 1.3.2. Nueva distribuci\u00f3n de elementos de firma XML. Correcci\u00f3n de bugs relativos a representaci\u00f3n gr\u00e1fica en Linux. Correcci\u00f3n de bugs en generaci\u00f3n de firmas XML. Mejora del sistema de firmado en bloque. Cliente v2.3 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 2.3 Fecha 05/2007 Motivo Generaci\u00f3n Nuevas Funcionalidades y correcci\u00f3n de bugs Caracter\u00edsticas Incluidas Correcci\u00f3n de bug de interpretaci\u00f3n del \u00e1rbol de firmas CMS. Correcci\u00f3n de contrafirma y cofirma CMS. Capacidad de firma de ficheros remotos. Cliente v2.3.1 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 2.3.1 Fecha 06/2007 Motivo Generaci\u00f3n Correcci\u00f3n de bugs Caracter\u00edsticas Incluidas Correcci\u00f3n de bug relativo al filtrado de los certificados durante el proceso de firma. Cliente v2.3.2 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 2.3.2 Fecha 08/2007 Motivo Generaci\u00f3n Petici\u00f3n de la Junta de Andaluc\u00eda Caracter\u00edsticas Incluidas Posibilidad de parametrizaci\u00f3n de la aparici\u00f3n de la ventana que informa al usuario acerca del hash que va a proceder a firmar. Aparici\u00f3n del disclaimer del instalador en negrita. Cliente v2.3.3 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 2.3.3 Fecha 07/09/2007 Motivo Generaci\u00f3n Petici\u00f3n de la Junta de Andaluc\u00eda Caracter\u00edsticas Incluidas Modificaci\u00f3n de la DLL y del cliente para adaptaci\u00f3n a formato propietario de tarjetas SIEMENS, que no utilizan como alias de certificados cadenas con codificaci\u00f3n UTF-8. Cliente v2.3.5 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 2.3.5 Fecha 17/03/2008 Motivo Generaci\u00f3n Nuevas Funcionalidades Caracter\u00edsticas Incluidas Soporte para Windows Vista e Internet Explorer 7, Red Hat 4 y Guadalinex 4. Mejora del sistema de instalaci\u00f3n, se han quitado mensajes redundantes en la instalaci\u00f3n y desinstalaci\u00f3n en lo referente a sobrescritura de librer\u00edas y elementos compartidos. Se han incorporados avisos informativos para las versiones beta del cliente. Se ha mejorado la distribuci\u00f3n de librer\u00edas, reduciendo su peso. Mejora de la gesti\u00f3n de librar\u00edas din\u00e1micas. Se ha creado un sistema de factor\u00eda de las librer\u00edas requeridas por los sistemas operativos (dll y so). Este sistema facilita la multiinstanciaci\u00f3n del applet. Mejora/ampliaci\u00f3n del plugin XAdES. Se han a\u00f1adido modos de firma (enveloped, enveloping y detached). Se permite tanto especificar un mimetype a los datos de entrada como selecci\u00f3n autom\u00e1tica de \u00e9ste (siempre que sea posible). Mejorado el sistema de asignaci\u00f3n de identificadores. Mejorado el tratamiento interno del DOM. Se han quitado las librer\u00edas antiguas y la dependencia de XALAN y XERCES. Descifrado de sobres digitales. Totalmente funcional en XP. En firefox funciona tambi\u00e9n en Vista, Windows 2000, Guadalinex, Ubuntu y RedHat. Mejorado el sistema de mensajes de error. Corregido bug de Mozillla Firefox sobre SSL. Mejora del sistema de carga espec\u00edfica para librer\u00edas. Incluido soporte para la instalaci\u00f3n de distintas distribuciones en la misma m\u00e1quina cliente. Cliente v2.4 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 2.4 Fecha 14/04/2008 Motivo Generaci\u00f3n Correcci\u00f3n de problemas conocidos en el cliente v2.3.5 Caracter\u00edsticas Incluidas Parametrizaci\u00f3n en properties de los mensajes de usuario. Modificaci\u00f3n de mensajes de usuario para hacer el funcionamiento m\u00e1s intuitivo, e inclusi\u00f3n de referencias a manuales de errores conocidos. Cliente v3.0.1 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 3.0.1 Fecha 23/03/2010 Motivo Generaci\u00f3n Restructuraci\u00f3n y nuevas funcionalidades Caracter\u00edsticas Incluidas Re-implementaci\u00f3n completa del Cliente de firma, con los siguientes objetivos: El cliente se basa ahora en la arquitectura de certificaci\u00f3n y firma electr\u00f3nica definida en JCA ( Java Cryptography Architecture ), omitiendo API propietarios siempre que es posible. (DigiDoc, IAIK, etc.). Cese de la compatibilidad con Java 1.4, permite usar ahora las funcionalidades avanzadas de firma electr\u00f3nica de Java 6 (incluso en Java 5). El soporte de Windows CAPI pasa a ser el est\u00e1ndar de Java, omitiendo bibliotecas a medida, lo cual garantiza la compatibilidad con cualquier versi\u00f3n y arquitectura de Windows soportada por el proveedor de seguridad est\u00e1ndar de Java SunMSCAPI. Eliminaci\u00f3n de JSS y uso directo de NSS como dispositivo PKCS#11. Esto proporciona compatibilidad con cualquier versi\u00f3n de Mozilla / Firefox actual y futura. Mejora del proceso de instalaci\u00f3n, eliminando por completo la necesidad de permisos de Administrador en JRE 6. Actualizaci\u00f3n de la firma ODF a la versi\u00f3n 3 (y superiores) de OppenOffice.org, que difiere notablemente respecto a la versi\u00f3n 2 (y rompe la retro-compatibilidad). Soporte de SHA-2 en firmas PDF y ODF. Soporte parcial de SHA-2 en firmas binarias. Soporte preliminar de SHA-2 en firmas XML. Inclusi\u00f3n de la cadena de certificaci\u00f3n en las firmas siempre que es posible. Adecuaci\u00f3n de los di\u00e1logos de usuario a las recomendaciones de \u201cJava Look and Feel\u201d y \u201cWindows Power Experience\u201d. Uso de \u201cJava Logging API\u201d para el registro de errores, mensajes y advertencias. Eliminaci\u00f3n del sistema de plugins para adecuarse a las necesidades de despliegue de Applets de Java 1.6u17 y superiores. Distribuci\u00f3n del cliente en 3 configuraciones distintas: LITE (con las funcionalidades gen\u00e9ricas del cliente y los formatos de firma PKCS#7/CMS y CADES), MEDIA (con las capacidades de la configuraci\u00f3n LITE m\u00e1s los formatos de firma XMLdSig, XAdES y ODF) y COMPLETA (con las capacidades de la configuraci\u00f3n MEDIA m\u00e1s los formatos de firma PDF). S\u00f3lo se llega a publicar la construcci\u00f3n LITE. Cliente v3.0.2 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 3.0.2 Fecha 05/04/2010 Motivo Generaci\u00f3n Correcci\u00f3n de bugs y mejoras generales. Caracter\u00edsticas Incluidas Mejoras en el sistema de identificaci\u00f3n del formato de ficheros. Se agrega un mensaje de advertencia al cargar el almac\u00e9n de Firefox para avisar de que deben introducirse las tarjetas inteligentes en ese momento. Se soluciona el problema derivado de disponer de varios certificados con el mismo alias en el almac\u00e9n de Windows (CAPI). Cliente v3.1.0 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 3.1.0 Fecha 30/07/2010 Motivo Generaci\u00f3n Correcci\u00f3n de bugs y mejoras generales. Caracter\u00edsticas Incluidas Se corrigen problemas en la carga del cliente. Se habilita el uso de filtros de certificados acordes a la RFC 2254. Se agrega soporte para el acceso al almac\u00e9n con los certificados de \"Otras Personas\" (WINDOWS ADDRESSBOOK) en Windows. Siempre se accede al almac\u00e9n del repositorio activo de Mozilla Firefox. Se a\u00f1ade la funcionalidad SignText an\u00e1loga a la de los navegadores Netscape. Agregado nuevo sistema de despliegue basado en JNLP (necesario Java 6). Interfaz de escritorio para la ejecuci\u00f3n del cliente (necesario Java 6 u18 o superior). Intalador offline para la instalaci\u00f3n del cliente, la interfaz de escritorio y documentaci\u00f3n. Se eliminan dependencias nativas en sistemas Windows. Nuevo Formato de firma. Firmas OOXML compatible con Microsoft Office 2007, 2008 y 2010. Generaci\u00f3n de firmas PDF compatibles con el est\u00e1ndar PAdES (manteniendo compatibilidad con Adobe Reader y el est\u00e1ndar ISO 32000-1). Se permite la generaci\u00f3n de firmas binarias conforme al est\u00e1ndar CAdES 1.8.1. Se permite la generaci\u00f3n de firmas XML conforme al est\u00e1ndar XAdES 1.4.1. Se agrega la funcionalidad de firma de hojas de estilo XML. Soporte para agregar transformaciones personalizadas en las firmas XML. Correcci\u00f3n en la adecuaci\u00f3n a est\u00e1ndar de las firmas XAdES. Se incorpora la funcionalidad de la selecci\u00f3n del almac\u00e9n de certificados (incluidos certificados en disco). Se incorpora la funcionalidad de la recuperaci\u00f3n de certificados en base 64 desde servidores LDAP. Se incorpora la funcionalidad de almacenamiento y recuperaci\u00f3n de claves de cifrado en un almac\u00e9n del usuario del sistema asociado al cliente @firma. Cliente v3.2.0 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 3.2.0 Fecha 28/04/2011 Motivo Generaci\u00f3n Despliegue a prueba de fallos y mejoras generales. Caracter\u00edsticas Incluidas Inclusi\u00f3n de un comprobador de entorno (en sustituci\u00f3n del instalador cl\u00e1sico) que instala los componentes necesarios para compatibilizar el entorno de ejecuci\u00f3n de Java con el Cliente @firma (bibliotecas endorsed , proveedores criptogr\u00e1ficos, etc.). Se elimina el modo de despliegue con instalaci\u00f3n local de c\u00f3digo Java y sus funcionalidades asociadas (actualizar, etc.). Se comprueba que todos los ficheros instalados por el BootLoader est\u00e9n firmados, bien por el integrador, bien por Sun Microsystems / Oracle. Se utiliza el sistema de versionado de JNLP para reducir el tr\u00e1fico de red que causa solicitudes de autenticaci\u00f3n con HTTPS (Ticket 143881). Compatibilidad (limitada) con NSS 64 bits en Mac OS X con Java 64 bits. Compatibilidad con Opera. Se anexa el n\u00famero de serie de certificado en el texto del di\u00e1logo de selecci\u00f3n para evitar problemas causados por dos certificados (casi) iguales y el error 4165344 de Java (Ticket 145250). Cuando se convierte de texto a Base64 mediante getBase64FromText() se detecta la codificaci\u00f3n en el caso de que el texto fuese un XML bien formado y declarase el \"encoding\" en su cabecera (Ticket 147618). Uso de iText 2.1.7 para mejor compatibilidad de licencias. Compatibilidad con Java 7. Actualizaci\u00f3n a BouncyCastle 1.46. Se unifican las listas de destinatarios establecidas mediante los m\u00e9todos \"setRecipientsToCMS()\" y \"addRecipientToCMS()\". Se permite que los sobres \"Envuelto\", \"Firmado y Envuelto\" y \"Autenticado y Envuelto\" declaren varios remitentes. Mejorada la identificaci\u00f3n de ficheros PDF. Compatibilidad con PDF cifrados con contrase\u00f1a (no se soporta AES256 ni certificados). Advertencia cuando se intenta firmar un PDF certificado. Compatibilidad con firmas LibreOffice / OpenOffice.org 3.2 / 3.3. Creaci\u00f3n de un nodo UnsignedProperties en firmas XAdES independientemente si la firma incluye o no atributos sin firmar, para facilitar la introducci\u00f3n posterior de estos. Solventados errores en la cofirma de \u00e1rboles complejos de contrafirmas. Se elimina la generaci\u00f3n de firmas Externally Detached desde el Applet de firma. Cambio en el orden de las transformadas XML (enveloped siempre la primera) para evitar errores en analizadores XML estrictos. Tratamiento especial de los certificados sin cadena de confianza para evitar la aparici\u00f3n de problemas asociados al error 4906869 de Java. Compatibilidad con Firefox 4. Se introduce el m\u00e9todo \u201cchangeLanguage()\u201d para cambiar el idioma del Cliente a otro disponible. Mejoras gen\u00e9ricas en el despliegue en navegadores Safari. La licencia del producto se mostrar\u00e1 si est\u00e1 disponible en el idioma del sistema del usuario, si no lo est\u00e1 se mostrar\u00e1 en espa\u00f1ol. Cliente v3.3.0 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 3.3.0 Fecha 17/04/2012 Motivo Generaci\u00f3n Actualizaci\u00f3n a las nuevas versiones de navegadores y JRE, ampliaci\u00f3n de entornos compatibles, inclusi\u00f3n de medidas de seguridad y resoluci\u00f3n de errores. Caracter\u00edsticas Incluidas Organizaci\u00f3n interna seg\u00fan la nueva arquitectura modular del proyecto. El m\u00e9todo getSignCertificateBase64Encoded() devuelve siempre el certificado seleccionado, incluso si no hay filtros establecidos. El m\u00e9todo getFileBase64Encoded(URI, boolean) ya no muestra di\u00e1logos modales innecesarios. Ahora, el m\u00e9todo setElectronicSignature(String) sustituye la entrada de setElectronicSignatureFile(String) y viceversa. Se eliminan los m\u00e9todos Firma(), cipherData(byte[]), decipherData(byte[]) y getCMSData(). El m\u00e9todo setPlainData() siempre recibe una cadena en Base64 y getPlainData() la devuelve en Base64. Cuando no se indica el tipo de envoltura CMS que se desea generar, el m\u00e9todo buildCMSStructure() genera una firma EnvelopedData. El formato de firma por defecto pasa a ser CAdES. Se agregan nuevos par\u00e1metros al m\u00e9todo setpolicy() del Applet, el cualificador de la pol\u00edtica y su hash. Por motivos de seguridad se pide permiso al usuario mediante un di\u00e1logo modal cada vez que se vaya a cargar o guardar un fichero en disco sin que este lo haya seleccionado expl\u00edcitamente. Se depreca el m\u00e9todo getTextFromBase64() en favor del nuevo m\u00e9todo getTextFromBase64(charsetName). Se depreca el m\u00e9todo getBase64FromText() en favor del nuevo m\u00e9todo getBase64FromText(charsetName). Se depreca el m\u00e9todo getSignatureText() en favor del nuevo m\u00e9todo getSignatureText(charsetName). Se depreca el m\u00e9todo getTextFileContent() en favor del m\u00e9todo getFileBase64Encoded(String, boolean). Se agrega compatibilidad con Firefox 9. Se agrega compatibilidad con el almac\u00e9n de certificados de Firefox en Mac OS X. Se solventa el problema que imped\u00eda firmar textos planos con el formato de firma XAdES. Mejora de la compatibilidad de Firefox cuando el nombre de usuario de Windows contiene caracteres especiales. Cliente v3.3.1 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 3.3.1 Fecha 17/08/2012 Motivo Generaci\u00f3n Actualizaci\u00f3n a las nuevas versiones de navegadores, resoluci\u00f3n de errores y nuevas caracter\u00edsticas. Caracter\u00edsticas Incluidas Se actualiza el mensaje del di\u00e1logo de licencia. Se agrega la compatibilidad con Mozilla Firefox 11 y superiores. Se reconoce el tipo de fichero RAR para su identificaci\u00f3n en firmas. Las firmas CAdES generadas con un algoritmo SHA-2 siempre incluir\u00e1n el atributo SigningCertificateV2. Se agrega la propiedad \"includeOnlySignningCertificate\" mediante el cual se puede evitar que se incluya toda la cadena de certificaci\u00f3n en las firmas/multifirmas XAdES/XMLdSig (necesario para compatibilidad con versiones de la Plataforma @firma anteriores a la v5.5) Cuando no se puede acceder al almac\u00e9n del sistema, se configura el tipo de almac\u00e9n PKCS#12 para su uso. Los nombres generados durante los proceso de firma masiva de directorios ahora incluyen la part\u00edcula \".sign\" o \".cosign\" seg\u00fan se haya firmado o cofirmado el fichero. Ahora se permite el cambio de formato de firma en las operaciones de firma masiva program\u00e1tica (no aplica a cofirmas y contrafirmas). Se incluye la firma de factura electr\u00f3nica. Cliente v3.4 Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 3.4 Fecha 28/04/2015 Motivo Generaci\u00f3n Se abandonan entornos antiguos e incorporan otros nuevos, resoluci\u00f3n de errores y nuevas caracter\u00edsticas. Cambios realizados Se incorpora la compatibilidad con Java 8 y se abandona la compatibilidad con Java 5. Se ampl\u00eda la compatibilidad hasta su versi\u00f3n 37 de Mozilla Firefox. Se agrega la compatibilidad con Oracle Java en MacOS X. Se agrega la posibilidad de recargar los certificados del di\u00e1logo de selecci\u00f3n y el cargar un PKCS#12 en lugar de usar uno de los certificados del almac\u00e9n. Se hace posible agregar una r\u00fabrica a las firmas PAdES. Se habilita la funci\u00f3n de firmar mediante manifest en las firmas XAdES. Se eliminan advertencias innecesarias de cara al usuario. Se eliminan funcionales residuales y desaconsejadas de versiones antiguas del Cliente @firma: La firma de m\u00faltiples hashes. La funci\u00f3n de firma Web. Los filtros de certificados compatibles con el Cliente 2.4. El di\u00e1logo de confirmaci\u00f3n con el hash de los datos que se va a firmar Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported Usted es libre de: | < style=\"width:0.52083in;height:0.52083in\" alt=\"share\" /> | Compartir - copiar, distribuir, ejecutar y comunicar p\u00fablicamente la obra | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"remix\" /> | hacer obras derivadas | Bajo las condiciones siguientes: | < style=\"width:0.52083in;height:0.52083in\" alt=\"by\" /> | Atribuci\u00f3n \u2014 Debe reconocer los cr\u00e9ditos de la obra de la manera especificada por el autor o el licenciante (pero no de una manera que sugiera que tiene su apoyo o que apoyan el uso que hace de su obra). | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"nc\" /> | No Comercial \u2014 No puede utilizar esta obra para fines comerciales. | | < style=\"width:0.52083in;height:0.52083in\" alt=\"sa\" /> | Compartir bajo la Misma Licencia \u2014 Si altera o transforma esta obra, o genera una obra derivada, s\u00f3lo puede distribuir la obra generada bajo una licencia id\u00e9ntica a \u00e9sta. | Entendiendo que: Renuncia \u2014 Alguna de estas condiciones puede no aplicarse si se obtiene el permiso del titular de los derechos de autor Dominio P\u00fablico \u2014 Cuando la obra o alguno de sus elementos se halle en el dominio p\u00fablico seg\u00fan la ley vigente aplicable, esta situaci\u00f3n no quedar\u00e1 afectada por la licencia. Otros derechos \u2014 Los derechos siguientes no quedan afectados por la licencia de ninguna manera: Los derechos derivados de usos leg\u00edtimos u otras limitaciones reconocidas por ley no se ven afectados por lo anterior. Los derechos morales del auto; Derechos que pueden ostentar otras personas sobre la propia obra o su uso, como por ejemplo derechos de imagen o de privacidad. Aviso \u2014 Al reutilizar o distribuir la obra, tiene que dejar muy en claro los t\u00e9rminos de la licencia de esta obra. La mejor forma de hacerlo es enlazar a esta p\u00e1gina. Licencia LA OBRA O LA PRESTACI\u00d3N (SEG\u00daN SE DEFINEN M\u00c1S ADELANTE) SE PROPORCIONA BAJO LOS T\u00c9RMINOS DE ESTA LICENCIA P\u00daBLICA DE CREATIVE COMMONS (CCPL O LICENCIA). LA OBRA O LA PRESTACI\u00d3N SE ENCUENTRA PROTEGIDA POR LA LEY ESPA\u00d1OLA DE PROPIEDAD INTELECTUAL Y/O CUALESQUIERA OTRAS NORMAS QUE RESULTEN DE APLICACI\u00d3N. QUEDA PROHIBIDO CUALQUIER USO DE LA OBRA O PRESTACI\u00d3N DIFERENTE A LO AUTORIZADO BAJO ESTA LICENCIA O LO DISPUESTO EN LA LEY DE PROPIEDAD INTELECTUAL. MEDIANTE EL EJERCICIO DE CUALQUIER DERECHO SOBRE LA OBRA O LA PRESTACI\u00d3N, USTED ACEPTA Y CONSIENTE LAS LIMITACIONES Y OBLIGACIONES DE ESTA LICENCIA, SIN PERJUICIO DE LA NECESIDAD DE CONSENTIMIENTO EXPRESO EN CASO DE VIOLACI\u00d3N PREVIA DE LOS T\u00c9RMINOS DE LA MISMA. EL LICENCIADOR LE CONCEDE LOS DERECHOS CONTENIDOS EN ESTA LICENCIA, SIEMPRE QUE USTED ACEPTE LOS PRESENTES T\u00c9RMINOS Y CONDICIONES. 1. Definiciones La obra es la creaci\u00f3n literaria, art\u00edstica o cient\u00edfica ofrecida bajo los t\u00e9rminos de esta licencia. En esta licencia se considera una prestaci\u00f3n cualquier interpretaci\u00f3n, ejecuci\u00f3n, fonograma, grabaci\u00f3n audiovisual, emisi\u00f3n o transmisi\u00f3n, mera fotograf\u00eda u otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente aplicable. La aplicaci\u00f3n de esta licencia a una colecci\u00f3n (definida m\u00e1s adelante) afectar\u00e1 \u00fanicamente a su estructura en cuanto forma de expresi\u00f3n de la selecci\u00f3n o disposici\u00f3n de sus contenidos, no siendo extensiva a \u00e9stos. En este caso la colecci\u00f3n tendr\u00e1 la consideraci\u00f3n de obra a efectos de esta licencia. El titular originario es: En el caso de una obra literaria, art\u00edstica o cient\u00edfica, la persona natural o grupo de personas que cre\u00f3 la obra. En el caso de una obra colectiva, la persona que la edite y divulgue bajo su nombre, salvo pacto contrario. En el caso de una interpretaci\u00f3n o ejecuci\u00f3n, el actor, cantante, m\u00fasico, o cualquier otra persona que represente, cante, lea, recite, interprete o ejecute en cualquier forma una obra. En el caso de un fonograma, el productor fonogr\u00e1fico, es decir, la persona natural o jur\u00eddica bajo cuya iniciativa y responsabilidad se realiza por primera vez una fijaci\u00f3n exclusivamente sonora de la ejecuci\u00f3n de una obra o de otros sonidos. En el caso de una grabaci\u00f3n audiovisual, el productor de la grabaci\u00f3n, es decir, la persona natural o jur\u00eddica que tenga la iniciativa y asuma la responsabilidad de las fijaciones de un plano o secuencia de im\u00e1genes, con o sin sonido. En el caso de una emisi\u00f3n o una transmisi\u00f3n, la entidad de radiodifusi\u00f3n. En el caso de una mera fotograf\u00eda, aquella persona que la haya realizado. En el caso de otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente, la persona que \u00e9sta se\u00f1ale. Se considerar\u00e1n obras derivadas aquellas obras creadas a partir de la licenciada, como por ejemplo: las traducciones y adaptaciones; las revisiones, actualizaciones y anotaciones; los compendios, res\u00famenes y extractos; los arreglos musicales y, en general, cualesquiera transformaciones de una obra literaria, art\u00edstica o cient\u00edfica. Para evitar la duda, si la obra consiste en una composici\u00f3n musical o grabaci\u00f3n de sonidos, la sincronizaci\u00f3n temporal de la obra con una imagen en movimiento (synching) ser\u00e1 considerada como una obra derivada a efectos de esta licencia. Tendr\u00e1n la consideraci\u00f3n de colecciones la recopilaci\u00f3n de obras ajenas, de datos o de otros elementos independientes como las antolog\u00edas y las bases de datos que por la selecci\u00f3n o disposici\u00f3n de sus contenidos constituyan creaciones intelectuales. La mera incorporaci\u00f3n de una obra en una colecci\u00f3n no dar\u00e1 lugar a una derivada a efectos de esta licencia. El licenciador es la persona o la entidad que ofrece la obra o prestaci\u00f3n bajo los t\u00e9rminos de esta licencia y le concede los derechos de explotaci\u00f3n de la misma conforme a lo dispuesto en ella. Usted es la persona o la entidad que ejercita los derechos concedidos mediante esta licencia y que no ha violado previamente los t\u00e9rminos de la misma con respecto a la obra o la prestaci\u00f3n, o que ha recibido el permiso expreso del licenciador de ejercitar los derechos concedidos mediante esta licencia a pesar de una violaci\u00f3n anterior. La transformaci\u00f3n de una obra comprende su traducci\u00f3n, adaptaci\u00f3n y cualquier otra modificaci\u00f3n en su forma de la que se derive una obra diferente. La creaci\u00f3n resultante de la transformaci\u00f3n de una obra tendr\u00e1 la consideraci\u00f3n de obra derivada. Se entiende por reproducci\u00f3n la fijaci\u00f3n directa o indirecta, provisional o permanente, por cualquier medio y en cualquier forma, de toda la obra o la prestaci\u00f3n o de parte de ella, que permita su comunicaci\u00f3n o la obtenci\u00f3n de copias. Se entiende por distribuci\u00f3n la puesta a disposici\u00f3n del p\u00fablico del original o de las copias de la obra o la prestaci\u00f3n, en un soporte tangible, mediante su venta, alquiler, pr\u00e9stamo o de cualquier otra forma. Se entiende por comunicaci\u00f3n p\u00fablica todo acto por el cual una pluralidad de personas, que no pertenezcan al \u00e1mbito dom\u00e9stico de quien la lleva a cabo, pueda tener acceso a la obra o la prestaci\u00f3n sin previa distribuci\u00f3n de ejemplares a cada una de ellas. Se considera comunicaci\u00f3n p\u00fablica la puesta a disposici\u00f3n del p\u00fablico de obras o prestaciones por procedimientos al\u00e1mbricos o inal\u00e1mbricos, de tal forma que cualquier persona pueda acceder a ellas desde el lugar y en el momento que elija. La explotaci\u00f3n de la obra o la prestaci\u00f3n comprende la reproducci\u00f3n, la distribuci\u00f3n, la comunicaci\u00f3n p\u00fablica y, en su caso, la transformaci\u00f3n. 2. L\u00edmites de los derechos. Nada en esta licencia pretende reducir o restringir cualesquiera l\u00edmites legales de los derechos exclusivos del titular de los derechos de propiedad intelectual de acuerdo con la Ley de propiedad intelectual o cualesquiera otras leyes aplicables, ya sean derivados de usos leg\u00edtimos, tales como la copia privada o la cita, u otras limitaciones como la resultante de la primera venta de ejemplares (agotamiento). 3. Concesi\u00f3n de licencia. Conforme a los t\u00e9rminos y a las condiciones de esta licencia, el licenciador concede, por el plazo de protecci\u00f3n de los derechos de propiedad intelectual y a t\u00edtulo gratuito, una licencia de \u00e1mbito mundial no exclusiva que incluye los derechos siguientes: Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n. Derecho a incorporar la obra o la prestaci\u00f3n en una o m\u00e1s colecciones. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n l\u00edcitamente incorporada en una colecci\u00f3n. Derecho de transformaci\u00f3n de la obra para crear una obra derivada siempre y cuando se incluya en \u00e9sta una indicaci\u00f3n de la transformaci\u00f3n o modificaci\u00f3n efectuada. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de obras derivadas creadas a partir de la obra licenciada. Derecho a extraer y reutilizar la obra o la prestaci\u00f3n de una base de datos. Para evitar cualquier duda, el titular originario: Conserva el derecho a percibir las remuneraciones o compensaciones previstas por actos de explotaci\u00f3n de la obra o prestaci\u00f3n, calificadas por la ley como irrenunciables e inalienables, y sujetas a gesti\u00f3n colectiva obligatoria. Renuncia al derecho exclusivo a percibir, tanto individualmente como mediante una entidad de gesti\u00f3n colectiva de derechos, cualquier remuneraci\u00f3n derivada de actos de explotaci\u00f3n de la obra o prestaci\u00f3n que usted realice. Estos derechos se pueden ejercitar en todos los medios y formatos, tangibles o intangibles, conocidos en el momento de la concesi\u00f3n de esta licencia. Los derechos mencionados incluyen el derecho a efectuar las modificaciones que sean precisas t\u00e9cnicamente para el ejercicio de los derechos en otros medios y formatos. Todos los derechos no concedidos expresamente por el licenciador quedan reservados, incluyendo, a t\u00edtulo enunciativo pero no limitativo, los derechos morales irrenunciables reconocidos por la ley aplicable. En la medida en que el licenciador ostente derechos exclusivos previstos por la ley nacional vigente que implementa la directiva europea en materia de derecho sui generis sobre bases de datos, renuncia expresamente a dichos derechos exclusivos. 4. Restricciones. La concesi\u00f3n de derechos que supone esta licencia se encuentra sujeta y limitada a las restricciones siguientes: Usted puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n solamente bajo los t\u00e9rminos de esta licencia y debe incluir una copia de la misma, o su Identificador Uniforme de Recurso (URI). Usted no puede ofrecer o imponer ninguna condici\u00f3n sobre la obra o prestaci\u00f3n que altere o restrinja los t\u00e9rminos de esta licencia o el ejercicio de sus derechos por parte de los concesionarios de la misma. Usted no puede sublicenciar la obra o prestaci\u00f3n. Usted debe mantener intactos todos los avisos que se refieran a esta licencia y a la ausencia de garant\u00edas. Usted no puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n con medidas tecnol\u00f3gicas que controlen el acceso o el uso de una manera contraria a los t\u00e9rminos de esta licencia. Esta secci\u00f3n 4.a tambi\u00e9n afecta a la obra o prestaci\u00f3n incorporada en una colecci\u00f3n, pero ello no implica que \u00e9sta en su conjunto quede autom\u00e1ticamente o deba quedar sujeta a los t\u00e9rminos de la misma. En el caso que le sea requerido, previa comunicaci\u00f3n del licenciador, si usted incorpora la obra en una colecci\u00f3n y/o crea una obra derivada, deber\u00e1 quitar cualquier cr\u00e9dito requerido en el apartado 4.b, en la medida de lo posible. Si usted reproduce, distribuye o comunica p\u00fablicamente la obra o la prestaci\u00f3n, una colecci\u00f3n que la incorpore o cualquier obra derivada, debe mantener intactos todos los avisos sobre la propiedad intelectual e indicar, de manera razonable conforme al medio o a los medios que usted est\u00e9 utilizando: El nombre del autor original, o el seud\u00f3nimo si es el caso, as\u00ed como el del titular originario, si le es facilitado. El nombre de aquellas partes (por ejemplo: instituci\u00f3n, publicaci\u00f3n, revista) que el titular originario y/o el licenciador designen para ser reconocidos en el aviso legal, las condiciones de uso, o de cualquier otra manera razonable. El t\u00edtulo de la obra o la prestaci\u00f3n si le es facilitado. El URI, si existe, que el licenciador especifique para ser vinculado a la obra o la prestaci\u00f3n, a menos que tal URI no se refiera al aviso legal o a la informaci\u00f3n sobre la licencia de la obra o la prestaci\u00f3n. En el caso de una obra derivada, un aviso que identifique la transformaci\u00f3n de la obra en la obra derivada (p. ej., \"traducci\u00f3n castellana de la obra de Autor Original,\" o \"gui\u00f3n basado en obra original de Autor Original\"). Este reconocimiento debe hacerse de manera razonable. En el caso de una obra derivada o incorporaci\u00f3n en una colecci\u00f3n estos cr\u00e9ditos deber\u00e1n aparecer como m\u00ednimo en el mismo lugar donde se hallen los correspondientes a otros autores o titulares y de forma comparable a los mismos. Para evitar la duda, los cr\u00e9ditos requeridos en esta secci\u00f3n s\u00f3lo ser\u00e1n utilizados a efectos de atribuci\u00f3n de la obra o la prestaci\u00f3n en la manera especificada anteriormente. Sin un permiso previo por escrito, usted no puede afirmar ni dar a entender impl\u00edcitamente ni expl\u00edcitamente ninguna conexi\u00f3n, patrocinio o aprobaci\u00f3n por parte del titular originario, el licenciador y/o las partes reconocidas hacia usted o hacia el uso que hace de la obra o la prestaci\u00f3n. Para evitar cualquier duda, debe hacerse notar que las restricciones anteriores (p\u00e1rrafos 4.a y 4.b) no son de aplicaci\u00f3n a aquellas partes de la obra o la prestaci\u00f3n objeto de esta licencia que \u00fanicamente puedan ser protegidas mediante el derecho sui generis sobre bases de datos recogido por la ley nacional vigente implementando la directiva europea de bases de datos 5. Exoneraci\u00f3n de responsabilidad A MENOS QUE SE ACUERDE MUTUAMENTE ENTRE LAS PARTES, EL LICENCIADOR OFRECE LA OBRA O LA PRESTACI\u00d3N TAL CUAL (ON AN \"AS-IS\" BASIS) Y NO CONFIERE NINGUNA GARANT\u00cdA DE CUALQUIER TIPO RESPECTO DE LA OBRA O LA PRESTACI\u00d3N O DE LA PRESENCIA O AUSENCIA DE ERRORES QUE PUEDAN O NO SER DESCUBIERTOS. ALGUNAS JURISDICCIONES NO PERMITEN LA EXCLUSI\u00d3N DE TALES GARANT\u00cdAS, POR LO QUE TAL EXCLUSI\u00d3N PUEDE NO SER DE APLICACI\u00d3N A USTED. 6. Limitaci\u00f3n de responsabilidad. SALVO QUE LO DISPONGA EXPRESA E IMPERATIVAMENTE LA LEY APLICABLE, EN NING\u00daN CASO EL LICENCIADOR SER\u00c1 RESPONSABLE ANTE USTED POR CUALESQUIERA DA\u00d1OS RESULTANTES, GENERALES O ESPECIALES (INCLUIDO EL DA\u00d1O EMERGENTE Y EL LUCRO CESANTE), FORTUITOS O CAUSALES, DIRECTOS O INDIRECTOS, PRODUCIDOS EN CONEXI\u00d3N CON ESTA LICENCIA O EL USO DE LA OBRA O LA PRESTACI\u00d3N, INCLUSO SI EL LICENCIADOR HUBIERA SIDO INFORMADO DE LA POSIBILIDAD DE TALES DA\u00d1OS. 7. Finalizaci\u00f3n de la licencia Esta licencia y la concesi\u00f3n de los derechos que contiene terminar\u00e1n autom\u00e1ticamente en caso de cualquier incumplimiento de los t\u00e9rminos de la misma. Las personas o entidades que hayan recibido de usted obras derivadas o colecciones bajo esta licencia, sin embargo, no ver\u00e1n sus licencias finalizadas, siempre que tales personas o entidades se mantengan en el cumplimiento \u00edntegro de esta licencia. Las secciones 1, 2, 5, 6, 7 y 8 permanecer\u00e1n vigentes pese a cualquier finalizaci\u00f3n de esta licencia. Conforme a las condiciones y t\u00e9rminos anteriores, la concesi\u00f3n de derechos de esta licencia es vigente por todo el plazo de protecci\u00f3n de los derechos de propiedad intelectual seg\u00fan la ley aplicable. A pesar de lo anterior, el licenciador se reserva el derecho a divulgar o publicar la obra o la prestaci\u00f3n en condiciones distintas a las presentes, o de retirar la obra o la prestaci\u00f3n en cualquier momento. No obstante, ello no supondr\u00e1 dar por concluida esta licencia (o cualquier otra licencia que haya sido concedida, o sea necesario ser concedida, bajo los t\u00e9rminos de esta licencia), que continuar\u00e1 vigente y con efectos completos a no ser que haya finalizado conforme a lo establecido anteriormente, sin perjuicio del derecho moral de arrepentimiento en los t\u00e9rminos reconocidos por la ley de propiedad intelectual aplicable. 8. Miscel\u00e1nea Cada vez que usted realice cualquier tipo de explotaci\u00f3n de la obra o la prestaci\u00f3n, o de una colecci\u00f3n que la incorpore, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra o la prestaci\u00f3n en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Cada vez que usted realice cualquier tipo de explotaci\u00f3n de una obra derivada, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra objeto de esta licencia en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Si alguna disposici\u00f3n de esta licencia resulta inv\u00e1lida o inaplicable seg\u00fan la Ley vigente, ello no afectar\u00e1 la validez o aplicabilidad del resto de los t\u00e9rminos de esta licencia y, sin ninguna acci\u00f3n adicional por cualquiera las partes de este acuerdo, tal disposici\u00f3n se entender\u00e1 reformada en lo estrictamente necesario para hacer que tal disposici\u00f3n sea v\u00e1lida y ejecutiva. No se entender\u00e1 que existe renuncia respecto de alg\u00fan t\u00e9rmino o disposici\u00f3n de esta licencia, ni que se consiente violaci\u00f3n alguna de la misma, a menos que tal renuncia o consentimiento figure por escrito y lleve la firma de la parte que renuncie o consienta. Esta licencia constituye el acuerdo pleno entre las partes con respecto a la obra o la prestaci\u00f3n objeto de la licencia. No caben interpretaciones, acuerdos o condiciones con respecto a la obra o la prestaci\u00f3n que no se encuentren expresamente especificados en la presente licencia. El licenciador no estar\u00e1 obligado por ninguna disposici\u00f3n complementaria que pueda aparecer en cualquier comunicaci\u00f3n que le haga llegar usted. Esta licencia no se puede modificar sin el mutuo acuerdo por escrito entre el licenciador y usted.","title":"CF distribuciones"},{"location":"markdown_strict/CF_distribuciones/#introduccion","text":"El Cliente de Firma es una herramienta de Firma Electr\u00f3nica que funciona en forma de Applet de Java integrado en una p\u00e1gina Web mediante JavaScript. El Cliente hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados ( keystore ) del navegador web ( Internet Explorer, Mozilla, Firefox ) o el sistema operativo as\u00ed como de los que est\u00e9n en dispositivos (tarjetas inteligentes , dispositivos USB ) configurados en el mismo (el caso de los DNI-e). El Cliente de Firma, como su nombre indica, es una aplicaci\u00f3n que se ejecuta en cliente (en el ordenador del usuario, no en el servidor Web). Esto es as\u00ed para evitar que la clave privada asociada a un certificado tenga que \u201csalir\u201d del contenedor del usuario (tarjeta, dispositivo USB o navegador) ubicado en su PC. De hecho, nunca llega a salir del navegador, el Cliente le env\u00eda los datos a firmar y \u00e9ste los devuelve firmados. El Cliente de Firma contiene las interfaces y componentes web necesarios para la realizaci\u00f3n de los siguientes procesos (adem\u00e1s de otros auxiliares como c\u00e1lculos de hash, lectura de ficheros, etc\u2026): Firma de datos y ficheros. Multifirma masiva de datos y ficheros. Cofirma (CoSignature) Multifirma al mismo nivel. Contrafirma (CounterSignature) Multifirma en cascada. Como complemento al cliente de firma, se encuentra un cliente de cifrado que nos permite realizar las funciones de encriptaci\u00f3n y desencriptaci\u00f3n de datos atendiendo a diferentes algoritmos y configuraciones. Adem\u00e1s permite la generaci\u00f3n de sobres digitales.","title":"Introducci\u00f3n"},{"location":"markdown_strict/CF_distribuciones/#objeto","text":"El presente documento lista los cambios y agregados sufridos por el cliente @firma en cada una de sus versiones publicadas.","title":"Objeto"},{"location":"markdown_strict/CF_distribuciones/#gestion-de-versiones","text":"","title":"Gesti\u00f3n de versiones"},{"location":"markdown_strict/CF_distribuciones/#cliente-firma","text":"","title":"Cliente @firma"},{"location":"markdown_strict/CF_distribuciones/#cliente-v11","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 1.1 Fecha 11/2006 Motivo Generaci\u00f3n Nuevas Funcionalidades Caracter\u00edsticas Incluidas Incorporaci\u00f3n de funciones de cifrado sim\u00e9trico. Incorporaci\u00f3n de modos de firma expl\u00edcito e impl\u00edcito en formato CMS. A\u00f1adida compatibilidad entre CMS y PKCS#7. A\u00f1adidos demostraciones de uso.","title":"Cliente v1.1"},{"location":"markdown_strict/CF_distribuciones/#cliente-v12","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 1.2 Fecha 12/2006 Motivo Generaci\u00f3n Nuevas Funcionalidades Caracter\u00edsticas Incluidas Incorporaci\u00f3n de los formatos de firma XMLDSignature y XAdES v1.1.1 como plugin. Mejoras en el m\u00f3dulo de cifrado. Incorporaci\u00f3n de claves alfanum\u00e9ricas no seguras. A\u00f1adida la capacidad de introducir atributos firmados y no firmados. A\u00f1adidos ejemplos en c\u00f3digo. Mejorada la instalaci\u00f3n e integraci\u00f3n de plugins.","title":"Cliente v1.2"},{"location":"markdown_strict/CF_distribuciones/#cliente-v21","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 2.1 Fecha 3/2007 Motivo Generaci\u00f3n Nuevas Funcionalidades Caracter\u00edsticas Incluidas Adaptaci\u00f3n del formato de firma XADES a est\u00e1ndar 1.3.2. Nueva distribuci\u00f3n de elementos de firma XML. Correcci\u00f3n de bugs relativos a representaci\u00f3n gr\u00e1fica en Linux. Correcci\u00f3n de bugs en generaci\u00f3n de firmas XML. Mejora del sistema de firmado en bloque.","title":"Cliente v2.1"},{"location":"markdown_strict/CF_distribuciones/#cliente-v23","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 2.3 Fecha 05/2007 Motivo Generaci\u00f3n Nuevas Funcionalidades y correcci\u00f3n de bugs Caracter\u00edsticas Incluidas Correcci\u00f3n de bug de interpretaci\u00f3n del \u00e1rbol de firmas CMS. Correcci\u00f3n de contrafirma y cofirma CMS. Capacidad de firma de ficheros remotos.","title":"Cliente v2.3"},{"location":"markdown_strict/CF_distribuciones/#cliente-v231","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 2.3.1 Fecha 06/2007 Motivo Generaci\u00f3n Correcci\u00f3n de bugs Caracter\u00edsticas Incluidas Correcci\u00f3n de bug relativo al filtrado de los certificados durante el proceso de firma.","title":"Cliente v2.3.1"},{"location":"markdown_strict/CF_distribuciones/#cliente-v232","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 2.3.2 Fecha 08/2007 Motivo Generaci\u00f3n Petici\u00f3n de la Junta de Andaluc\u00eda Caracter\u00edsticas Incluidas Posibilidad de parametrizaci\u00f3n de la aparici\u00f3n de la ventana que informa al usuario acerca del hash que va a proceder a firmar. Aparici\u00f3n del disclaimer del instalador en negrita.","title":"Cliente v2.3.2"},{"location":"markdown_strict/CF_distribuciones/#cliente-v233","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 2.3.3 Fecha 07/09/2007 Motivo Generaci\u00f3n Petici\u00f3n de la Junta de Andaluc\u00eda Caracter\u00edsticas Incluidas Modificaci\u00f3n de la DLL y del cliente para adaptaci\u00f3n a formato propietario de tarjetas SIEMENS, que no utilizan como alias de certificados cadenas con codificaci\u00f3n UTF-8.","title":"Cliente v2.3.3"},{"location":"markdown_strict/CF_distribuciones/#cliente-v235","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 2.3.5 Fecha 17/03/2008 Motivo Generaci\u00f3n Nuevas Funcionalidades Caracter\u00edsticas Incluidas Soporte para Windows Vista e Internet Explorer 7, Red Hat 4 y Guadalinex 4. Mejora del sistema de instalaci\u00f3n, se han quitado mensajes redundantes en la instalaci\u00f3n y desinstalaci\u00f3n en lo referente a sobrescritura de librer\u00edas y elementos compartidos. Se han incorporados avisos informativos para las versiones beta del cliente. Se ha mejorado la distribuci\u00f3n de librer\u00edas, reduciendo su peso. Mejora de la gesti\u00f3n de librar\u00edas din\u00e1micas. Se ha creado un sistema de factor\u00eda de las librer\u00edas requeridas por los sistemas operativos (dll y so). Este sistema facilita la multiinstanciaci\u00f3n del applet. Mejora/ampliaci\u00f3n del plugin XAdES. Se han a\u00f1adido modos de firma (enveloped, enveloping y detached). Se permite tanto especificar un mimetype a los datos de entrada como selecci\u00f3n autom\u00e1tica de \u00e9ste (siempre que sea posible). Mejorado el sistema de asignaci\u00f3n de identificadores. Mejorado el tratamiento interno del DOM. Se han quitado las librer\u00edas antiguas y la dependencia de XALAN y XERCES. Descifrado de sobres digitales. Totalmente funcional en XP. En firefox funciona tambi\u00e9n en Vista, Windows 2000, Guadalinex, Ubuntu y RedHat. Mejorado el sistema de mensajes de error. Corregido bug de Mozillla Firefox sobre SSL. Mejora del sistema de carga espec\u00edfica para librer\u00edas. Incluido soporte para la instalaci\u00f3n de distintas distribuciones en la misma m\u00e1quina cliente.","title":"Cliente v2.3.5"},{"location":"markdown_strict/CF_distribuciones/#cliente-v24","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 2.4 Fecha 14/04/2008 Motivo Generaci\u00f3n Correcci\u00f3n de problemas conocidos en el cliente v2.3.5 Caracter\u00edsticas Incluidas Parametrizaci\u00f3n en properties de los mensajes de usuario. Modificaci\u00f3n de mensajes de usuario para hacer el funcionamiento m\u00e1s intuitivo, e inclusi\u00f3n de referencias a manuales de errores conocidos.","title":"Cliente v2.4"},{"location":"markdown_strict/CF_distribuciones/#cliente-v301","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 3.0.1 Fecha 23/03/2010 Motivo Generaci\u00f3n Restructuraci\u00f3n y nuevas funcionalidades Caracter\u00edsticas Incluidas Re-implementaci\u00f3n completa del Cliente de firma, con los siguientes objetivos: El cliente se basa ahora en la arquitectura de certificaci\u00f3n y firma electr\u00f3nica definida en JCA ( Java Cryptography Architecture ), omitiendo API propietarios siempre que es posible. (DigiDoc, IAIK, etc.). Cese de la compatibilidad con Java 1.4, permite usar ahora las funcionalidades avanzadas de firma electr\u00f3nica de Java 6 (incluso en Java 5). El soporte de Windows CAPI pasa a ser el est\u00e1ndar de Java, omitiendo bibliotecas a medida, lo cual garantiza la compatibilidad con cualquier versi\u00f3n y arquitectura de Windows soportada por el proveedor de seguridad est\u00e1ndar de Java SunMSCAPI. Eliminaci\u00f3n de JSS y uso directo de NSS como dispositivo PKCS#11. Esto proporciona compatibilidad con cualquier versi\u00f3n de Mozilla / Firefox actual y futura. Mejora del proceso de instalaci\u00f3n, eliminando por completo la necesidad de permisos de Administrador en JRE 6. Actualizaci\u00f3n de la firma ODF a la versi\u00f3n 3 (y superiores) de OppenOffice.org, que difiere notablemente respecto a la versi\u00f3n 2 (y rompe la retro-compatibilidad). Soporte de SHA-2 en firmas PDF y ODF. Soporte parcial de SHA-2 en firmas binarias. Soporte preliminar de SHA-2 en firmas XML. Inclusi\u00f3n de la cadena de certificaci\u00f3n en las firmas siempre que es posible. Adecuaci\u00f3n de los di\u00e1logos de usuario a las recomendaciones de \u201cJava Look and Feel\u201d y \u201cWindows Power Experience\u201d. Uso de \u201cJava Logging API\u201d para el registro de errores, mensajes y advertencias. Eliminaci\u00f3n del sistema de plugins para adecuarse a las necesidades de despliegue de Applets de Java 1.6u17 y superiores. Distribuci\u00f3n del cliente en 3 configuraciones distintas: LITE (con las funcionalidades gen\u00e9ricas del cliente y los formatos de firma PKCS#7/CMS y CADES), MEDIA (con las capacidades de la configuraci\u00f3n LITE m\u00e1s los formatos de firma XMLdSig, XAdES y ODF) y COMPLETA (con las capacidades de la configuraci\u00f3n MEDIA m\u00e1s los formatos de firma PDF). S\u00f3lo se llega a publicar la construcci\u00f3n LITE.","title":"Cliente v3.0.1"},{"location":"markdown_strict/CF_distribuciones/#cliente-v302","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 3.0.2 Fecha 05/04/2010 Motivo Generaci\u00f3n Correcci\u00f3n de bugs y mejoras generales. Caracter\u00edsticas Incluidas Mejoras en el sistema de identificaci\u00f3n del formato de ficheros. Se agrega un mensaje de advertencia al cargar el almac\u00e9n de Firefox para avisar de que deben introducirse las tarjetas inteligentes en ese momento. Se soluciona el problema derivado de disponer de varios certificados con el mismo alias en el almac\u00e9n de Windows (CAPI).","title":"Cliente v3.0.2"},{"location":"markdown_strict/CF_distribuciones/#cliente-v310","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 3.1.0 Fecha 30/07/2010 Motivo Generaci\u00f3n Correcci\u00f3n de bugs y mejoras generales. Caracter\u00edsticas Incluidas Se corrigen problemas en la carga del cliente. Se habilita el uso de filtros de certificados acordes a la RFC 2254. Se agrega soporte para el acceso al almac\u00e9n con los certificados de \"Otras Personas\" (WINDOWS ADDRESSBOOK) en Windows. Siempre se accede al almac\u00e9n del repositorio activo de Mozilla Firefox. Se a\u00f1ade la funcionalidad SignText an\u00e1loga a la de los navegadores Netscape. Agregado nuevo sistema de despliegue basado en JNLP (necesario Java 6). Interfaz de escritorio para la ejecuci\u00f3n del cliente (necesario Java 6 u18 o superior). Intalador offline para la instalaci\u00f3n del cliente, la interfaz de escritorio y documentaci\u00f3n. Se eliminan dependencias nativas en sistemas Windows. Nuevo Formato de firma. Firmas OOXML compatible con Microsoft Office 2007, 2008 y 2010. Generaci\u00f3n de firmas PDF compatibles con el est\u00e1ndar PAdES (manteniendo compatibilidad con Adobe Reader y el est\u00e1ndar ISO 32000-1). Se permite la generaci\u00f3n de firmas binarias conforme al est\u00e1ndar CAdES 1.8.1. Se permite la generaci\u00f3n de firmas XML conforme al est\u00e1ndar XAdES 1.4.1. Se agrega la funcionalidad de firma de hojas de estilo XML. Soporte para agregar transformaciones personalizadas en las firmas XML. Correcci\u00f3n en la adecuaci\u00f3n a est\u00e1ndar de las firmas XAdES. Se incorpora la funcionalidad de la selecci\u00f3n del almac\u00e9n de certificados (incluidos certificados en disco). Se incorpora la funcionalidad de la recuperaci\u00f3n de certificados en base 64 desde servidores LDAP. Se incorpora la funcionalidad de almacenamiento y recuperaci\u00f3n de claves de cifrado en un almac\u00e9n del usuario del sistema asociado al cliente @firma.","title":"Cliente v3.1.0"},{"location":"markdown_strict/CF_distribuciones/#cliente-v320","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 3.2.0 Fecha 28/04/2011 Motivo Generaci\u00f3n Despliegue a prueba de fallos y mejoras generales. Caracter\u00edsticas Incluidas Inclusi\u00f3n de un comprobador de entorno (en sustituci\u00f3n del instalador cl\u00e1sico) que instala los componentes necesarios para compatibilizar el entorno de ejecuci\u00f3n de Java con el Cliente @firma (bibliotecas endorsed , proveedores criptogr\u00e1ficos, etc.). Se elimina el modo de despliegue con instalaci\u00f3n local de c\u00f3digo Java y sus funcionalidades asociadas (actualizar, etc.). Se comprueba que todos los ficheros instalados por el BootLoader est\u00e9n firmados, bien por el integrador, bien por Sun Microsystems / Oracle. Se utiliza el sistema de versionado de JNLP para reducir el tr\u00e1fico de red que causa solicitudes de autenticaci\u00f3n con HTTPS (Ticket 143881). Compatibilidad (limitada) con NSS 64 bits en Mac OS X con Java 64 bits. Compatibilidad con Opera. Se anexa el n\u00famero de serie de certificado en el texto del di\u00e1logo de selecci\u00f3n para evitar problemas causados por dos certificados (casi) iguales y el error 4165344 de Java (Ticket 145250). Cuando se convierte de texto a Base64 mediante getBase64FromText() se detecta la codificaci\u00f3n en el caso de que el texto fuese un XML bien formado y declarase el \"encoding\" en su cabecera (Ticket 147618). Uso de iText 2.1.7 para mejor compatibilidad de licencias. Compatibilidad con Java 7. Actualizaci\u00f3n a BouncyCastle 1.46. Se unifican las listas de destinatarios establecidas mediante los m\u00e9todos \"setRecipientsToCMS()\" y \"addRecipientToCMS()\". Se permite que los sobres \"Envuelto\", \"Firmado y Envuelto\" y \"Autenticado y Envuelto\" declaren varios remitentes. Mejorada la identificaci\u00f3n de ficheros PDF. Compatibilidad con PDF cifrados con contrase\u00f1a (no se soporta AES256 ni certificados). Advertencia cuando se intenta firmar un PDF certificado. Compatibilidad con firmas LibreOffice / OpenOffice.org 3.2 / 3.3. Creaci\u00f3n de un nodo UnsignedProperties en firmas XAdES independientemente si la firma incluye o no atributos sin firmar, para facilitar la introducci\u00f3n posterior de estos. Solventados errores en la cofirma de \u00e1rboles complejos de contrafirmas. Se elimina la generaci\u00f3n de firmas Externally Detached desde el Applet de firma. Cambio en el orden de las transformadas XML (enveloped siempre la primera) para evitar errores en analizadores XML estrictos. Tratamiento especial de los certificados sin cadena de confianza para evitar la aparici\u00f3n de problemas asociados al error 4906869 de Java. Compatibilidad con Firefox 4. Se introduce el m\u00e9todo \u201cchangeLanguage()\u201d para cambiar el idioma del Cliente a otro disponible. Mejoras gen\u00e9ricas en el despliegue en navegadores Safari. La licencia del producto se mostrar\u00e1 si est\u00e1 disponible en el idioma del sistema del usuario, si no lo est\u00e1 se mostrar\u00e1 en espa\u00f1ol.","title":"Cliente v3.2.0"},{"location":"markdown_strict/CF_distribuciones/#cliente-v330","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 3.3.0 Fecha 17/04/2012 Motivo Generaci\u00f3n Actualizaci\u00f3n a las nuevas versiones de navegadores y JRE, ampliaci\u00f3n de entornos compatibles, inclusi\u00f3n de medidas de seguridad y resoluci\u00f3n de errores. Caracter\u00edsticas Incluidas Organizaci\u00f3n interna seg\u00fan la nueva arquitectura modular del proyecto. El m\u00e9todo getSignCertificateBase64Encoded() devuelve siempre el certificado seleccionado, incluso si no hay filtros establecidos. El m\u00e9todo getFileBase64Encoded(URI, boolean) ya no muestra di\u00e1logos modales innecesarios. Ahora, el m\u00e9todo setElectronicSignature(String) sustituye la entrada de setElectronicSignatureFile(String) y viceversa. Se eliminan los m\u00e9todos Firma(), cipherData(byte[]), decipherData(byte[]) y getCMSData(). El m\u00e9todo setPlainData() siempre recibe una cadena en Base64 y getPlainData() la devuelve en Base64. Cuando no se indica el tipo de envoltura CMS que se desea generar, el m\u00e9todo buildCMSStructure() genera una firma EnvelopedData. El formato de firma por defecto pasa a ser CAdES. Se agregan nuevos par\u00e1metros al m\u00e9todo setpolicy() del Applet, el cualificador de la pol\u00edtica y su hash. Por motivos de seguridad se pide permiso al usuario mediante un di\u00e1logo modal cada vez que se vaya a cargar o guardar un fichero en disco sin que este lo haya seleccionado expl\u00edcitamente. Se depreca el m\u00e9todo getTextFromBase64() en favor del nuevo m\u00e9todo getTextFromBase64(charsetName). Se depreca el m\u00e9todo getBase64FromText() en favor del nuevo m\u00e9todo getBase64FromText(charsetName). Se depreca el m\u00e9todo getSignatureText() en favor del nuevo m\u00e9todo getSignatureText(charsetName). Se depreca el m\u00e9todo getTextFileContent() en favor del m\u00e9todo getFileBase64Encoded(String, boolean). Se agrega compatibilidad con Firefox 9. Se agrega compatibilidad con el almac\u00e9n de certificados de Firefox en Mac OS X. Se solventa el problema que imped\u00eda firmar textos planos con el formato de firma XAdES. Mejora de la compatibilidad de Firefox cuando el nombre de usuario de Windows contiene caracteres especiales.","title":"Cliente v3.3.0"},{"location":"markdown_strict/CF_distribuciones/#cliente-v331","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 3.3.1 Fecha 17/08/2012 Motivo Generaci\u00f3n Actualizaci\u00f3n a las nuevas versiones de navegadores, resoluci\u00f3n de errores y nuevas caracter\u00edsticas. Caracter\u00edsticas Incluidas Se actualiza el mensaje del di\u00e1logo de licencia. Se agrega la compatibilidad con Mozilla Firefox 11 y superiores. Se reconoce el tipo de fichero RAR para su identificaci\u00f3n en firmas. Las firmas CAdES generadas con un algoritmo SHA-2 siempre incluir\u00e1n el atributo SigningCertificateV2. Se agrega la propiedad \"includeOnlySignningCertificate\" mediante el cual se puede evitar que se incluya toda la cadena de certificaci\u00f3n en las firmas/multifirmas XAdES/XMLdSig (necesario para compatibilidad con versiones de la Plataforma @firma anteriores a la v5.5) Cuando no se puede acceder al almac\u00e9n del sistema, se configura el tipo de almac\u00e9n PKCS#12 para su uso. Los nombres generados durante los proceso de firma masiva de directorios ahora incluyen la part\u00edcula \".sign\" o \".cosign\" seg\u00fan se haya firmado o cofirmado el fichero. Ahora se permite el cambio de formato de firma en las operaciones de firma masiva program\u00e1tica (no aplica a cofirmas y contrafirmas). Se incluye la firma de factura electr\u00f3nica.","title":"Cliente v3.3.1"},{"location":"markdown_strict/CF_distribuciones/#cliente-v34","text":"Emisi\u00f3n de Versi\u00f3n Desarrollo ClienteFirma N\u00ba Versi\u00f3n 3.4 Fecha 28/04/2015 Motivo Generaci\u00f3n Se abandonan entornos antiguos e incorporan otros nuevos, resoluci\u00f3n de errores y nuevas caracter\u00edsticas. Cambios realizados Se incorpora la compatibilidad con Java 8 y se abandona la compatibilidad con Java 5. Se ampl\u00eda la compatibilidad hasta su versi\u00f3n 37 de Mozilla Firefox. Se agrega la compatibilidad con Oracle Java en MacOS X. Se agrega la posibilidad de recargar los certificados del di\u00e1logo de selecci\u00f3n y el cargar un PKCS#12 en lugar de usar uno de los certificados del almac\u00e9n. Se hace posible agregar una r\u00fabrica a las firmas PAdES. Se habilita la funci\u00f3n de firmar mediante manifest en las firmas XAdES. Se eliminan advertencias innecesarias de cara al usuario. Se eliminan funcionales residuales y desaconsejadas de versiones antiguas del Cliente @firma: La firma de m\u00faltiples hashes. La funci\u00f3n de firma Web. Los filtros de certificados compatibles con el Cliente 2.4. El di\u00e1logo de confirmaci\u00f3n con el hash de los datos que se va a firmar Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported Usted es libre de: | < style=\"width:0.52083in;height:0.52083in\" alt=\"share\" /> | Compartir - copiar, distribuir, ejecutar y comunicar p\u00fablicamente la obra | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"remix\" /> | hacer obras derivadas | Bajo las condiciones siguientes: | < style=\"width:0.52083in;height:0.52083in\" alt=\"by\" /> | Atribuci\u00f3n \u2014 Debe reconocer los cr\u00e9ditos de la obra de la manera especificada por el autor o el licenciante (pero no de una manera que sugiera que tiene su apoyo o que apoyan el uso que hace de su obra). | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"nc\" /> | No Comercial \u2014 No puede utilizar esta obra para fines comerciales. | | < style=\"width:0.52083in;height:0.52083in\" alt=\"sa\" /> | Compartir bajo la Misma Licencia \u2014 Si altera o transforma esta obra, o genera una obra derivada, s\u00f3lo puede distribuir la obra generada bajo una licencia id\u00e9ntica a \u00e9sta. | Entendiendo que: Renuncia \u2014 Alguna de estas condiciones puede no aplicarse si se obtiene el permiso del titular de los derechos de autor Dominio P\u00fablico \u2014 Cuando la obra o alguno de sus elementos se halle en el dominio p\u00fablico seg\u00fan la ley vigente aplicable, esta situaci\u00f3n no quedar\u00e1 afectada por la licencia. Otros derechos \u2014 Los derechos siguientes no quedan afectados por la licencia de ninguna manera: Los derechos derivados de usos leg\u00edtimos u otras limitaciones reconocidas por ley no se ven afectados por lo anterior. Los derechos morales del auto; Derechos que pueden ostentar otras personas sobre la propia obra o su uso, como por ejemplo derechos de imagen o de privacidad. Aviso \u2014 Al reutilizar o distribuir la obra, tiene que dejar muy en claro los t\u00e9rminos de la licencia de esta obra. La mejor forma de hacerlo es enlazar a esta p\u00e1gina. Licencia LA OBRA O LA PRESTACI\u00d3N (SEG\u00daN SE DEFINEN M\u00c1S ADELANTE) SE PROPORCIONA BAJO LOS T\u00c9RMINOS DE ESTA LICENCIA P\u00daBLICA DE CREATIVE COMMONS (CCPL O LICENCIA). LA OBRA O LA PRESTACI\u00d3N SE ENCUENTRA PROTEGIDA POR LA LEY ESPA\u00d1OLA DE PROPIEDAD INTELECTUAL Y/O CUALESQUIERA OTRAS NORMAS QUE RESULTEN DE APLICACI\u00d3N. QUEDA PROHIBIDO CUALQUIER USO DE LA OBRA O PRESTACI\u00d3N DIFERENTE A LO AUTORIZADO BAJO ESTA LICENCIA O LO DISPUESTO EN LA LEY DE PROPIEDAD INTELECTUAL. MEDIANTE EL EJERCICIO DE CUALQUIER DERECHO SOBRE LA OBRA O LA PRESTACI\u00d3N, USTED ACEPTA Y CONSIENTE LAS LIMITACIONES Y OBLIGACIONES DE ESTA LICENCIA, SIN PERJUICIO DE LA NECESIDAD DE CONSENTIMIENTO EXPRESO EN CASO DE VIOLACI\u00d3N PREVIA DE LOS T\u00c9RMINOS DE LA MISMA. EL LICENCIADOR LE CONCEDE LOS DERECHOS CONTENIDOS EN ESTA LICENCIA, SIEMPRE QUE USTED ACEPTE LOS PRESENTES T\u00c9RMINOS Y CONDICIONES. 1. Definiciones La obra es la creaci\u00f3n literaria, art\u00edstica o cient\u00edfica ofrecida bajo los t\u00e9rminos de esta licencia. En esta licencia se considera una prestaci\u00f3n cualquier interpretaci\u00f3n, ejecuci\u00f3n, fonograma, grabaci\u00f3n audiovisual, emisi\u00f3n o transmisi\u00f3n, mera fotograf\u00eda u otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente aplicable. La aplicaci\u00f3n de esta licencia a una colecci\u00f3n (definida m\u00e1s adelante) afectar\u00e1 \u00fanicamente a su estructura en cuanto forma de expresi\u00f3n de la selecci\u00f3n o disposici\u00f3n de sus contenidos, no siendo extensiva a \u00e9stos. En este caso la colecci\u00f3n tendr\u00e1 la consideraci\u00f3n de obra a efectos de esta licencia. El titular originario es: En el caso de una obra literaria, art\u00edstica o cient\u00edfica, la persona natural o grupo de personas que cre\u00f3 la obra. En el caso de una obra colectiva, la persona que la edite y divulgue bajo su nombre, salvo pacto contrario. En el caso de una interpretaci\u00f3n o ejecuci\u00f3n, el actor, cantante, m\u00fasico, o cualquier otra persona que represente, cante, lea, recite, interprete o ejecute en cualquier forma una obra. En el caso de un fonograma, el productor fonogr\u00e1fico, es decir, la persona natural o jur\u00eddica bajo cuya iniciativa y responsabilidad se realiza por primera vez una fijaci\u00f3n exclusivamente sonora de la ejecuci\u00f3n de una obra o de otros sonidos. En el caso de una grabaci\u00f3n audiovisual, el productor de la grabaci\u00f3n, es decir, la persona natural o jur\u00eddica que tenga la iniciativa y asuma la responsabilidad de las fijaciones de un plano o secuencia de im\u00e1genes, con o sin sonido. En el caso de una emisi\u00f3n o una transmisi\u00f3n, la entidad de radiodifusi\u00f3n. En el caso de una mera fotograf\u00eda, aquella persona que la haya realizado. En el caso de otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente, la persona que \u00e9sta se\u00f1ale. Se considerar\u00e1n obras derivadas aquellas obras creadas a partir de la licenciada, como por ejemplo: las traducciones y adaptaciones; las revisiones, actualizaciones y anotaciones; los compendios, res\u00famenes y extractos; los arreglos musicales y, en general, cualesquiera transformaciones de una obra literaria, art\u00edstica o cient\u00edfica. Para evitar la duda, si la obra consiste en una composici\u00f3n musical o grabaci\u00f3n de sonidos, la sincronizaci\u00f3n temporal de la obra con una imagen en movimiento (synching) ser\u00e1 considerada como una obra derivada a efectos de esta licencia. Tendr\u00e1n la consideraci\u00f3n de colecciones la recopilaci\u00f3n de obras ajenas, de datos o de otros elementos independientes como las antolog\u00edas y las bases de datos que por la selecci\u00f3n o disposici\u00f3n de sus contenidos constituyan creaciones intelectuales. La mera incorporaci\u00f3n de una obra en una colecci\u00f3n no dar\u00e1 lugar a una derivada a efectos de esta licencia. El licenciador es la persona o la entidad que ofrece la obra o prestaci\u00f3n bajo los t\u00e9rminos de esta licencia y le concede los derechos de explotaci\u00f3n de la misma conforme a lo dispuesto en ella. Usted es la persona o la entidad que ejercita los derechos concedidos mediante esta licencia y que no ha violado previamente los t\u00e9rminos de la misma con respecto a la obra o la prestaci\u00f3n, o que ha recibido el permiso expreso del licenciador de ejercitar los derechos concedidos mediante esta licencia a pesar de una violaci\u00f3n anterior. La transformaci\u00f3n de una obra comprende su traducci\u00f3n, adaptaci\u00f3n y cualquier otra modificaci\u00f3n en su forma de la que se derive una obra diferente. La creaci\u00f3n resultante de la transformaci\u00f3n de una obra tendr\u00e1 la consideraci\u00f3n de obra derivada. Se entiende por reproducci\u00f3n la fijaci\u00f3n directa o indirecta, provisional o permanente, por cualquier medio y en cualquier forma, de toda la obra o la prestaci\u00f3n o de parte de ella, que permita su comunicaci\u00f3n o la obtenci\u00f3n de copias. Se entiende por distribuci\u00f3n la puesta a disposici\u00f3n del p\u00fablico del original o de las copias de la obra o la prestaci\u00f3n, en un soporte tangible, mediante su venta, alquiler, pr\u00e9stamo o de cualquier otra forma. Se entiende por comunicaci\u00f3n p\u00fablica todo acto por el cual una pluralidad de personas, que no pertenezcan al \u00e1mbito dom\u00e9stico de quien la lleva a cabo, pueda tener acceso a la obra o la prestaci\u00f3n sin previa distribuci\u00f3n de ejemplares a cada una de ellas. Se considera comunicaci\u00f3n p\u00fablica la puesta a disposici\u00f3n del p\u00fablico de obras o prestaciones por procedimientos al\u00e1mbricos o inal\u00e1mbricos, de tal forma que cualquier persona pueda acceder a ellas desde el lugar y en el momento que elija. La explotaci\u00f3n de la obra o la prestaci\u00f3n comprende la reproducci\u00f3n, la distribuci\u00f3n, la comunicaci\u00f3n p\u00fablica y, en su caso, la transformaci\u00f3n. 2. L\u00edmites de los derechos. Nada en esta licencia pretende reducir o restringir cualesquiera l\u00edmites legales de los derechos exclusivos del titular de los derechos de propiedad intelectual de acuerdo con la Ley de propiedad intelectual o cualesquiera otras leyes aplicables, ya sean derivados de usos leg\u00edtimos, tales como la copia privada o la cita, u otras limitaciones como la resultante de la primera venta de ejemplares (agotamiento). 3. Concesi\u00f3n de licencia. Conforme a los t\u00e9rminos y a las condiciones de esta licencia, el licenciador concede, por el plazo de protecci\u00f3n de los derechos de propiedad intelectual y a t\u00edtulo gratuito, una licencia de \u00e1mbito mundial no exclusiva que incluye los derechos siguientes: Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n. Derecho a incorporar la obra o la prestaci\u00f3n en una o m\u00e1s colecciones. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n l\u00edcitamente incorporada en una colecci\u00f3n. Derecho de transformaci\u00f3n de la obra para crear una obra derivada siempre y cuando se incluya en \u00e9sta una indicaci\u00f3n de la transformaci\u00f3n o modificaci\u00f3n efectuada. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de obras derivadas creadas a partir de la obra licenciada. Derecho a extraer y reutilizar la obra o la prestaci\u00f3n de una base de datos. Para evitar cualquier duda, el titular originario: Conserva el derecho a percibir las remuneraciones o compensaciones previstas por actos de explotaci\u00f3n de la obra o prestaci\u00f3n, calificadas por la ley como irrenunciables e inalienables, y sujetas a gesti\u00f3n colectiva obligatoria. Renuncia al derecho exclusivo a percibir, tanto individualmente como mediante una entidad de gesti\u00f3n colectiva de derechos, cualquier remuneraci\u00f3n derivada de actos de explotaci\u00f3n de la obra o prestaci\u00f3n que usted realice. Estos derechos se pueden ejercitar en todos los medios y formatos, tangibles o intangibles, conocidos en el momento de la concesi\u00f3n de esta licencia. Los derechos mencionados incluyen el derecho a efectuar las modificaciones que sean precisas t\u00e9cnicamente para el ejercicio de los derechos en otros medios y formatos. Todos los derechos no concedidos expresamente por el licenciador quedan reservados, incluyendo, a t\u00edtulo enunciativo pero no limitativo, los derechos morales irrenunciables reconocidos por la ley aplicable. En la medida en que el licenciador ostente derechos exclusivos previstos por la ley nacional vigente que implementa la directiva europea en materia de derecho sui generis sobre bases de datos, renuncia expresamente a dichos derechos exclusivos. 4. Restricciones. La concesi\u00f3n de derechos que supone esta licencia se encuentra sujeta y limitada a las restricciones siguientes: Usted puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n solamente bajo los t\u00e9rminos de esta licencia y debe incluir una copia de la misma, o su Identificador Uniforme de Recurso (URI). Usted no puede ofrecer o imponer ninguna condici\u00f3n sobre la obra o prestaci\u00f3n que altere o restrinja los t\u00e9rminos de esta licencia o el ejercicio de sus derechos por parte de los concesionarios de la misma. Usted no puede sublicenciar la obra o prestaci\u00f3n. Usted debe mantener intactos todos los avisos que se refieran a esta licencia y a la ausencia de garant\u00edas. Usted no puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n con medidas tecnol\u00f3gicas que controlen el acceso o el uso de una manera contraria a los t\u00e9rminos de esta licencia. Esta secci\u00f3n 4.a tambi\u00e9n afecta a la obra o prestaci\u00f3n incorporada en una colecci\u00f3n, pero ello no implica que \u00e9sta en su conjunto quede autom\u00e1ticamente o deba quedar sujeta a los t\u00e9rminos de la misma. En el caso que le sea requerido, previa comunicaci\u00f3n del licenciador, si usted incorpora la obra en una colecci\u00f3n y/o crea una obra derivada, deber\u00e1 quitar cualquier cr\u00e9dito requerido en el apartado 4.b, en la medida de lo posible. Si usted reproduce, distribuye o comunica p\u00fablicamente la obra o la prestaci\u00f3n, una colecci\u00f3n que la incorpore o cualquier obra derivada, debe mantener intactos todos los avisos sobre la propiedad intelectual e indicar, de manera razonable conforme al medio o a los medios que usted est\u00e9 utilizando: El nombre del autor original, o el seud\u00f3nimo si es el caso, as\u00ed como el del titular originario, si le es facilitado. El nombre de aquellas partes (por ejemplo: instituci\u00f3n, publicaci\u00f3n, revista) que el titular originario y/o el licenciador designen para ser reconocidos en el aviso legal, las condiciones de uso, o de cualquier otra manera razonable. El t\u00edtulo de la obra o la prestaci\u00f3n si le es facilitado. El URI, si existe, que el licenciador especifique para ser vinculado a la obra o la prestaci\u00f3n, a menos que tal URI no se refiera al aviso legal o a la informaci\u00f3n sobre la licencia de la obra o la prestaci\u00f3n. En el caso de una obra derivada, un aviso que identifique la transformaci\u00f3n de la obra en la obra derivada (p. ej., \"traducci\u00f3n castellana de la obra de Autor Original,\" o \"gui\u00f3n basado en obra original de Autor Original\"). Este reconocimiento debe hacerse de manera razonable. En el caso de una obra derivada o incorporaci\u00f3n en una colecci\u00f3n estos cr\u00e9ditos deber\u00e1n aparecer como m\u00ednimo en el mismo lugar donde se hallen los correspondientes a otros autores o titulares y de forma comparable a los mismos. Para evitar la duda, los cr\u00e9ditos requeridos en esta secci\u00f3n s\u00f3lo ser\u00e1n utilizados a efectos de atribuci\u00f3n de la obra o la prestaci\u00f3n en la manera especificada anteriormente. Sin un permiso previo por escrito, usted no puede afirmar ni dar a entender impl\u00edcitamente ni expl\u00edcitamente ninguna conexi\u00f3n, patrocinio o aprobaci\u00f3n por parte del titular originario, el licenciador y/o las partes reconocidas hacia usted o hacia el uso que hace de la obra o la prestaci\u00f3n. Para evitar cualquier duda, debe hacerse notar que las restricciones anteriores (p\u00e1rrafos 4.a y 4.b) no son de aplicaci\u00f3n a aquellas partes de la obra o la prestaci\u00f3n objeto de esta licencia que \u00fanicamente puedan ser protegidas mediante el derecho sui generis sobre bases de datos recogido por la ley nacional vigente implementando la directiva europea de bases de datos 5. Exoneraci\u00f3n de responsabilidad A MENOS QUE SE ACUERDE MUTUAMENTE ENTRE LAS PARTES, EL LICENCIADOR OFRECE LA OBRA O LA PRESTACI\u00d3N TAL CUAL (ON AN \"AS-IS\" BASIS) Y NO CONFIERE NINGUNA GARANT\u00cdA DE CUALQUIER TIPO RESPECTO DE LA OBRA O LA PRESTACI\u00d3N O DE LA PRESENCIA O AUSENCIA DE ERRORES QUE PUEDAN O NO SER DESCUBIERTOS. ALGUNAS JURISDICCIONES NO PERMITEN LA EXCLUSI\u00d3N DE TALES GARANT\u00cdAS, POR LO QUE TAL EXCLUSI\u00d3N PUEDE NO SER DE APLICACI\u00d3N A USTED. 6. Limitaci\u00f3n de responsabilidad. SALVO QUE LO DISPONGA EXPRESA E IMPERATIVAMENTE LA LEY APLICABLE, EN NING\u00daN CASO EL LICENCIADOR SER\u00c1 RESPONSABLE ANTE USTED POR CUALESQUIERA DA\u00d1OS RESULTANTES, GENERALES O ESPECIALES (INCLUIDO EL DA\u00d1O EMERGENTE Y EL LUCRO CESANTE), FORTUITOS O CAUSALES, DIRECTOS O INDIRECTOS, PRODUCIDOS EN CONEXI\u00d3N CON ESTA LICENCIA O EL USO DE LA OBRA O LA PRESTACI\u00d3N, INCLUSO SI EL LICENCIADOR HUBIERA SIDO INFORMADO DE LA POSIBILIDAD DE TALES DA\u00d1OS. 7. Finalizaci\u00f3n de la licencia Esta licencia y la concesi\u00f3n de los derechos que contiene terminar\u00e1n autom\u00e1ticamente en caso de cualquier incumplimiento de los t\u00e9rminos de la misma. Las personas o entidades que hayan recibido de usted obras derivadas o colecciones bajo esta licencia, sin embargo, no ver\u00e1n sus licencias finalizadas, siempre que tales personas o entidades se mantengan en el cumplimiento \u00edntegro de esta licencia. Las secciones 1, 2, 5, 6, 7 y 8 permanecer\u00e1n vigentes pese a cualquier finalizaci\u00f3n de esta licencia. Conforme a las condiciones y t\u00e9rminos anteriores, la concesi\u00f3n de derechos de esta licencia es vigente por todo el plazo de protecci\u00f3n de los derechos de propiedad intelectual seg\u00fan la ley aplicable. A pesar de lo anterior, el licenciador se reserva el derecho a divulgar o publicar la obra o la prestaci\u00f3n en condiciones distintas a las presentes, o de retirar la obra o la prestaci\u00f3n en cualquier momento. No obstante, ello no supondr\u00e1 dar por concluida esta licencia (o cualquier otra licencia que haya sido concedida, o sea necesario ser concedida, bajo los t\u00e9rminos de esta licencia), que continuar\u00e1 vigente y con efectos completos a no ser que haya finalizado conforme a lo establecido anteriormente, sin perjuicio del derecho moral de arrepentimiento en los t\u00e9rminos reconocidos por la ley de propiedad intelectual aplicable. 8. Miscel\u00e1nea Cada vez que usted realice cualquier tipo de explotaci\u00f3n de la obra o la prestaci\u00f3n, o de una colecci\u00f3n que la incorpore, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra o la prestaci\u00f3n en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Cada vez que usted realice cualquier tipo de explotaci\u00f3n de una obra derivada, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra objeto de esta licencia en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Si alguna disposici\u00f3n de esta licencia resulta inv\u00e1lida o inaplicable seg\u00fan la Ley vigente, ello no afectar\u00e1 la validez o aplicabilidad del resto de los t\u00e9rminos de esta licencia y, sin ninguna acci\u00f3n adicional por cualquiera las partes de este acuerdo, tal disposici\u00f3n se entender\u00e1 reformada en lo estrictamente necesario para hacer que tal disposici\u00f3n sea v\u00e1lida y ejecutiva. No se entender\u00e1 que existe renuncia respecto de alg\u00fan t\u00e9rmino o disposici\u00f3n de esta licencia, ni que se consiente violaci\u00f3n alguna de la misma, a menos que tal renuncia o consentimiento figure por escrito y lleve la firma de la parte que renuncie o consienta. Esta licencia constituye el acuerdo pleno entre las partes con respecto a la obra o la prestaci\u00f3n objeto de la licencia. No caben interpretaciones, acuerdos o condiciones con respecto a la obra o la prestaci\u00f3n que no se encuentren expresamente especificados en la presente licencia. El licenciador no estar\u00e1 obligado por ninguna disposici\u00f3n complementaria que pueda aparecer en cualquier comunicaci\u00f3n que le haga llegar usted. Esta licencia no se puede modificar sin el mutuo acuerdo por escrito entre el licenciador y usted.","title":"Cliente v3.4"},{"location":"markdown_strict/CF_funcional_ES/","text":"\u00cdndice de contenidos 1 Introducci\u00f3n [3](#introducci\u00f3n) 1.1 Objetivo [3](#objetivo) 1.2 Alcance [3](#alcance) 1.3 Descripci\u00f3n [4](#descripci\u00f3n) 2 Requisitos funcionales [7](#requisitos-funcionales) 3 Descomposici\u00f3n funcional [9](#descomposici\u00f3n-funcional) 3.1 Firma [9](#firma) 3.2 Cofirma [11](#cofirma) 3.3 Contrafirmar [13](#contrafirmar) 3.4 Firma masiva de hashes (Procedimiento deprecado) [15](#firma-masiva-de-hashes-procedimiento-deprecado) 3.5 Multifirma masiva de ficheros [17](#multifirma-masiva-de-ficheros) 3.6 Multifirma masiva program\u00e1tica [19](#multifirma-masiva-program\u00e1tica) 3.7 Cifrado sim\u00e9trico [21](#cifrado-sim\u00e9trico) 3.8 Descifrado sim\u00e9trico [23](#descifrado-sim\u00e9trico) 3.9 Ensobrado digital [25](#ensobrado-digital) 3.10 Abrir sobre digital [26](#abrir-sobre-digital) Anexo A. Algoritmos de cifrado [27](#algoritmos-de-cifrado) Anexo B. Sobres digitales [29](#sobres-digitales) Introducci\u00f3n Objetivo El objeto de este documento es realizar una descripci\u00f3n general y funcional del cliente de firma y cifrado de la Plataforma @Firma. Alcance Descripci\u00f3n del cliente de firma y cifrado y de las funcionalidades atribuidas. Abarcar\u00e1 los siguientes aspectos: Descripci\u00f3n de los tipos de firma y formatos soportados por el cliente. Identificaci\u00f3n y descripci\u00f3n de los procesos que permite realizar el cliente de firma. Identificaci\u00f3n de las funcionalidades de cifrado, los algoritmos empleados y la usabilidad de estos. Identificaci\u00f3n de los sobres digitales soportados y la usabilidad de estos. Descripci\u00f3n El cliente de firma, llamado Cliente @firma, es un componente que se ejecuta en la m\u00e1quina del usuario en forma de Applet y le permite realizar diversas operaciones criptogr\u00e1ficas: Firma / multifirma electr\u00f3nica de documentos. Procesos de firma / multifirma masiva. Cifrado / descifrado de datos. Generaci\u00f3n y apertura de sobre digitales. La firma electr\u00f3nica es el equivalente electr\u00f3nico a la firma manuscrita. El usuario puede seleccionar cualquier tipo de datos para firmar. El origen de los datos puede ser tanto un fichero, datos en memoria y, para algunos formatos de firma electr\u00f3nica, huellas digitales (hashes). Los formatos soportados por el sistema de firma son: PKCS#7 / CMS CAdES-BES / CAdES-EPES XMLdSig XAdES-BES / XAdES-EPES PAdES \u2013BES / PAdES-EPES (Firmas PDF) ODF OOXML Las firmas en formato CMS, CAdES, XMLdSig y XAdES soportar\u00e1n 2 modos de firma: Impl\u00edcita: La firma generada va acompa\u00f1ada de los datos, normalmente incluidos dentro de la firma. Explicita: La firma generada no mantiene relaci\u00f3n directa con los datos, salvo posiblemente una referencia externa a ellos o su huella digital. Las firmas PAdES, ODF y OOXML son por naturaleza impl\u00edcitas y no soportar\u00e1n este tipo de configuraci\u00f3n. El algoritmo utilizado por defecto ser\u00e1 SHA1withRSA, salvo cuando el formato de firma exija lo contrario. Para aquellos formatos que permitan configurar el algoritmo se soportar\u00e1n: MD5withRSA. SHA1withRSA. SHA256withRSA. SHA384withRSA. SHA512withRSA. Se permite seleccionar el certificado electr\u00f3nico para la firma de cualquiera de los siguientes almacenes de certificados: Almac\u00e9n de Windows / Internet Explorer. Almac\u00e9n de Mozilla Firefox. Almac\u00e9n de Apple. Ficheros PKCS#12 / PFX. Ficheros JKS. Dispositivos externos (configurados en alguno de los almacenes ya mencionados). El almac\u00e9n de claves por defecto viene dado por el navegador Web y el sistema operativo desde el que se ejecute el Cliente @firma. Se configurar\u00e1 siempre que sea posible el mismo almac\u00e9n que utiliza el navegador en ese sistema. La multifirma es el procedimiento que permite a varios usuarios firmar un \u00fanico documento de datos y almacenar sus firmas en un mismo documento de firma. La multifirma podr\u00e1 ser: Cofirma o firma paralela, en el cual todos los firmantes est\u00e1n al mismo nivel y no existe un orden prefijado Contrafirma o firma en cascada o jer\u00e1rquica, en la que los firmantes est\u00e1n en distintos niveles y s\u00ed existe orden entre las firmas. La multifirma masiva es el proceso que permite automatizar la firma o multifirma de grandes cantidades de datos, aplicando la configuraci\u00f3n en cada una de las operaciones (mismo certificado de firma, mismo algoritmo\u2026). La multifirma masiva dispone de dos medios de aplicaci\u00f3n: El usuario puede especificar el directorio con los ficheros que se desean multifirmar y configurar la operaci\u00f3n que se aplicar\u00e1 a las firmas. El usuario puede desarrollar un mecanismo program\u00e1tico que le permita multifirmar m\u00faltiples ficheros, datos o hashes de forma m\u00e1s sencilla que ejecutando la operaci\u00f3n concreta sobre cada uno de ellos. El Cliente @firma dispone tambi\u00e9n de un sistema de cifrado de datos. Todos los algoritmos contemplados por este sistema son sim\u00e9tricos, es decir, se utiliza la misma clave para cifrar y descifrar los datos. Esto supone que la clave siempre debe ser privada. Los algoritmos soportados por el sistema de cifrado son: AES Alleged RC4 3DES DES Blowfish RC2 PBEWithSHA1AndDESede PBEWithSHA1AndRC2_40 PBEWithMD5AndDES Los algoritmos PBE (los 3 \u00faltimos listados) utilizan contrase\u00f1as que puede insertar el propio usuario, aunque no son v\u00e1lidos todos los caracteres para estas. El resto de algoritmos usan directamente claves de cifrado que tienen unos requisitos espec\u00edficos para cada algoritmo por lo que el sistema deber\u00e1 tener en cuenta dichos requisitos. Los sobres digitales utilizan una combinaci\u00f3n de algoritmos de cifrado sim\u00e9trico y asim\u00e9trico que permiten cifrar datos de tal forma que s\u00f3lo una serie de personas ser\u00e1n capaces de descifrarlos, lo que los hace id\u00f3neos para la transmisi\u00f3n de datos cifrados a otras personas. Los distintos tipos de sobres digitales soportados se encuentran descritos en los anexos. Requisitos funcionales Los requisitos funcionales que debe cumplir son los expuestos a continuaci\u00f3n: El sistema debe ser multiplataforma, pudiendo ser ejecutado en Windows, Linux (Red Hat, Ubuntu), Solaris/ OpenSolaris y Mac OS X; as\u00ed mismo se debe poder ejecutar, al menos, en Internet Explorer, Firefox, Safari y Chrome. El componente acceder\u00e1 por defecto a los certificados instalados en el navegador donde se ejecute. Se permitir\u00e1 utilizar un almac\u00e9n de claves distinto al por defecto. Si el almac\u00e9n dispone de una clave de acceso, se le solicitar\u00e1 al usuario. Se pueden filtrar los certificados disponibles mediante filtros basados en la especificaci\u00f3n RFC2254 o mediantes expresiones regulares, definiendo valores cr\u00edticos para determinados campos. El componente de firma ser\u00e1 un applet e implementar\u00e1 toda la funcionalidad de la firma en la m\u00e1quina cliente, de forma que se ejecutar\u00e1 siempre el mismo componente independientemente del proceso de firma que se quiera lanzar (firma/multifirma de ficheros, masiva\u2026). El componente no instalar\u00e1 nada en la m\u00e1quina del usuario salvo que sea absolutamente necesario y siempre pedir\u00e1 confirmaci\u00f3n al usuario para llevar a cabo este proceso. El cliente podr\u00e1 ser cacheado por la m\u00e1quina virtual y esta cach\u00e9 se actualizar\u00e1 autom\u00e1ticamente cada vez que se detecte una actualizaci\u00f3n desplegada en servidor. El componente firmar\u00e1 los datos introducidos, utilizando el certificado que seleccione el usuario, mediante el algoritmo \u201cRSA\u201d configurado y con un formato preestablecido. Se permitir\u00e1 la generaci\u00f3n de firmas EPES al configurar un formato de firma avanzada (CAdES, XAdES y PAdES) y los datos de una pol\u00edtica de firma. El componente permitir\u00e1 realizar firmas en serie (cofirmas) y en cascada (contrafirma) como una operaci\u00f3n posterior a la operaci\u00f3n de firma. Las contrafirmas podr\u00e1n realizarse sobre firmas concretas del documento de firmas, sobre todas las firmas de uno o varios firmantes, sobre todas las firmas que no hayan sido anteriormente contrafirmadas o sobre todas las firmas. Se pueden guardar las firmas/multifirmas generadas en ficheros \u201c.csig\u201d (CMS y CAdES), \u201c.xsig\u201d (XADES y XMLDSIGN) y \u201c.sig\u201d (firma electr\u00f3nica simple, sin formato) o incrustadas en los documentos firmados (PDF/PAdES, ODF y OOXML). Las multifirmas masivas se pueden realizar sobre un grupo de ficheros o sobre un conjunto de hashes. Tambi\u00e9n podr\u00e1n realizarse definiendo un proceso program\u00e1tico simple. El sistema de cifrado permitir\u00e1 cifrar y descifrar contenidos en el cliente mediante algoritmos sim\u00e9tricos. Los algoritmos de cifrado disponibles ser\u00e1n: AES, Allleged RC4, Blowfish, TripleDES, DES, RC2, PBEWithSHA1AndDESede, PBEWithSHA1AndRC2_40 y PBEWithMD5AndDES. Se permitir\u00e1 generar autom\u00e1ticamente claves de cifrado para cada algoritmo de cifrado que lo soporte. Se podr\u00e1n almacenar las claves de cifrado utilizadas en un almac\u00e9n de claves \u00fanico del usuario y utilizar estas claves para el cifrado y descifrado de datos. Se da la posibilidad de crear un sobre digital CMS para transmitir mensajes cifrados a uno o varios receptores. La incorporaci\u00f3n de destinatarios a un sobre digital se deber\u00e1 hacer mediante ficheros \u201c.cer\u201d, cargando el certificado en memoria o desde alguno de los almacenes del sistema. Ser\u00e1 posible extraer certificados con clave p\u00fablica de servidores LDAP simples. Se permite guardar en ficheros los datos generados en cada momento: firmas, ficheros, cifrados y descifrados, sobres digitales\u2026 Descomposici\u00f3n funcional Una vez establecidos los requisitos funcionales, se van a identificar y definir cada uno de los procesos que deber\u00e1 implementar para cumplir con dichos requisitos. Firma Es el proceso mediante el cual el componente cliente firma unos datos utilizando la clave privada asociada a uno de los certificados que tiene el usuario instalado en su navegador. El Cliente mostrar\u00e1 al usuario una lista de los certificados instalados en el almac\u00e9n o dispositivo configurado y este deber\u00e1 seleccionar uno de ellos. Tambi\u00e9n podr\u00e1 configurarse que se filtren previamente estos certificados e, incluso, que se seleccione directamente uno de ellos sin que el usuario tenga que elegirlo. A continuaci\u00f3n se detalla el caso de uso asociado a esta operativa: < Actores Usuario: Usuario que quiere realizar la firma. Casos de Uso Configurar firma: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1 a la operaci\u00f3n de firma. Conf. Almac\u00e9n: Configuraci\u00f3n del almac\u00e9n del que se extraer\u00e1 el certificado de firma. Conf. Filtro: Configuraci\u00f3n de un filtro que restringir\u00e1 los certificados mediante los que se podr\u00e1 firmar. Se podr\u00e1 configurar que el certificado se seleccione directamente si es el \u00fanico que cumple ese filtro o que se muestre un di\u00e1logo de selecci\u00f3n para que el usuario tome la decisi\u00f3n de cu\u00e1l usar. Los filtros se basar\u00e1n en el uso de la RFC-2254 y los KeyUsage de los certificados y permitir\u00e1n filtrar por: Estructura del X509Principal del titular del certificado. Estructura del X509Principal del emisor del certificado. Utilidad declarada para el certificado (firma, autenticaci\u00f3n, envoltura de claves,\u2026). Conf. Pol\u00edtica: Configuraci\u00f3n de la pol\u00edtica de firma. Conf. Algoritmo: Configuraci\u00f3n del algoritmo de firma. Conf. Formato: Configuraci\u00f3n del formato de firma. Incluye el formato a utilizar y la configuraci\u00f3n espec\u00edfica que admita este (tipos de datos firmados, contexto de firma, versi\u00f3n del formato\u2026) Conf. Modo: Configuraci\u00f3n del modo de firma. Seleccionar documento: Es el proceso en el que se seleccionan los datos sobre los que se desea realizar la firma. Por defecto, se solicita seleccionar un fichero. Las alternativas son las siguientes: Configurar fichero: Establece un fichero sobre el que realizar la firma. Configurar datos: Establece los datos sobre los que realizar la firma. Configurar hash: Establece el hash sobre el que realizar la firma. La operaci\u00f3n de firma no aplicar\u00e1 algoritmo de hash. Seleccionar certificado: Es el proceso de selecci\u00f3n del certificado con el que se va a firmar. Las alternativas son: Configurar alias: El integrador establece el alias del certificado del almac\u00e9n configurado que se debe utilizar. Seleccionar en di\u00e1logo de certificados: Muestra un di\u00e1logo para la selecci\u00f3n del certificado por parte del usuario. En este di\u00e1logo s\u00f3lo aparecer\u00e1n los certificados que cumplan el filtro de certificados definido anteriormente. Firmar: Ejecuta la operaci\u00f3n de firma conforme a los par\u00e1metros configurados anteriormente. Obtener firma: Se toma el resultado de la operaci\u00f3n de firma. Las alternativas, no excluyentes, son: Extraer firma: Extrae la firma generada. Guardar firma: Almacena en disco la firma generada. Resultado Error: En caso de producirse un error, el proceso Firmar establecer\u00e1 el mensaje correspondiente y lo pondr\u00e1 a disposici\u00f3n del integrador. Cofirma Permite a varios usuarios firmar el mismo elemento. < Actores Usuario: Usuario que quiere realizar la cofirma. Casos de Uso Configurar firma: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1 a la operaci\u00f3n de firma. Conf. Almac\u00e9n: Configuraci\u00f3n del almac\u00e9n del que se extraer\u00e1 el certificado de firma. Conf. Filtro: Configuraci\u00f3n de un filtro que restringir\u00e1 los certificados mediante los que se podr\u00e1 firmar. Se podr\u00e1 configurar que el certificado se seleccione directamente si es el \u00fanico que cumple ese filtro o que se muestre un di\u00e1logo de selecci\u00f3n para que el usuario tome la decisi\u00f3n de cu\u00e1l usar. Los filtros se basar\u00e1n en el uso de la RFC-2254 y los KeyUsage de los certificados y permitir\u00e1n filtrar por: Estructura del X509Principal del titular del certificado. Estructura del X509Principal del emisor del certificado. Utilidad declarada para el certificado (firma, autenticaci\u00f3n, envoltura de claves,\u2026). Conf. Pol\u00edtica: Configuraci\u00f3n de la pol\u00edtica de firma. Conf. Algoritmo: Configuraci\u00f3n del algoritmo de firma. Conf. Formato: Configuraci\u00f3n del formato de firma. Incluye el formato a utilizar y la configuraci\u00f3n espec\u00edfica que admita este (tipos de datos firmados, contexto de firma, versi\u00f3n del formato\u2026) Conf. Modo: Configuraci\u00f3n del modo de firma. Seleccionar documento: Es el proceso en el que se seleccionan los datos sobre los que se desea realizar la firma. Por defecto, se solicita seleccionar un fichero. En el proceso de cofirma, la selecci\u00f3n del documento no es obligatorio cuando la firma que se selecciona en el paso siguiente contiene ya los datos que se firmaron originalmente. Configurar fichero: Establece un fichero sobre el que realizar la firma. Configurar datos: Establece los datos sobre los que realizar la firma. Configurar hash: Establece el hash sobre el que realizar la firma. La operaci\u00f3n de firma no aplicar\u00e1 algoritmo de hash. Seleccionar firma: Es el proceso de selecci\u00f3n del documento de firma al que se le desea agregar una nueva cofirma. Conf. Fichero firma: Configura el fichero de firma al que se le quiere agregar la cofirma. Conf. Datos firma: Configura la firma (en memoria) a la que se quiere agregar la cofirma. Seleccionar certificado: Es el proceso de selecci\u00f3n del certificado con el que se va a firmar. Configurar alias: Establece el alias del certificado en el almac\u00e9n configurado. Seleccionar en di\u00e1logo de certificados: Muestra un di\u00e1logo para la selecci\u00f3n del certificado por parte del usuario. Cofirmar: Ejecuta la operaci\u00f3n de cofirma conforme a los par\u00e1metros configurados anteriormente. Obtener firma: Se toma el resultado de la operaci\u00f3n de firma. Extraer firma: Extrae la firma generada. Guardar firma: Almacena en disco la firma generada. Resultado Error. En caso de producirse un error, el proceso Cofirmar establecer\u00e1 el mensaje correspondiente y lo pondr\u00e1 a disposici\u00f3n del integrador. Contrafirmar Permite firmar a un usuario la firma de otro usuario. La contrafirma se puede realizar sobre: todas las firmas de un documento, las firmas todav\u00eda no contrafirmadas, las firmas de un firmante o determinadas firmas. < Actores Usuario: Usuario que quiere realizar la contrafirma. Casos de Uso Configurar firma: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1 a la operaci\u00f3n de firma. Conf. Almac\u00e9n: Configuraci\u00f3n del almac\u00e9n del que se extraer\u00e1 el certificado de firma. Conf. Filtro: Configuraci\u00f3n de un filtro que restringir\u00e1 los certificados mediante los que se podr\u00e1 firmar. Se podr\u00e1 configurar que el certificado se seleccione directamente si es el \u00fanico que cumple ese filtro o que se muestre un di\u00e1logo de selecci\u00f3n para que el usuario tome la decisi\u00f3n de cu\u00e1l usar. Los filtros se basar\u00e1n en el uso de la RFC-2254 y los KeyUsage de los certificados y permitir\u00e1n filtrar por: Estructura del X509Principal del titular del certificado. Estructura del X509Principal del emisor del certificado. Utilidad declarada para el certificado (firma, autenticaci\u00f3n, envoltura de claves,\u2026). Conf. Pol\u00edtica: Configuraci\u00f3n de la pol\u00edtica de firma. Conf. Algoritmo: Configuraci\u00f3n del algoritmo de firma. Conf. Formato: Configuraci\u00f3n del formato de firma. Incluye el formato a utilizar y la configuraci\u00f3n espec\u00edfica que admita este (tipos de datos firmados, contexto de firma, versi\u00f3n del formato\u2026) Conf. Modo: Configuraci\u00f3n del modo de firma. Seleccionar firma: Es el proceso de selecci\u00f3n del documento de firma al que se le desea agregar las contrafirmas. Conf. Fichero firma: Configura el fichero con los datos de firma al que se le quiere agregar las contrafirmas. Conf. Datos firma: Configura los datos de firma a los que se quiere agregar las contrafirmas. Seleccionar certificado: Es el proceso de selecci\u00f3n del certificado con el que se va a firmar. Configurar alias: Establece el alias del certificado en el almac\u00e9n configurado. Seleccionar en di\u00e1logo de certificados: Muestra un di\u00e1logo para la selecci\u00f3n del certificado por parte del usuario. Contrafirmar: Ejecuta la operaci\u00f3n de contrafirma conforme a los par\u00e1metros configurados anteriormente. La operaci\u00f3n aplicar\u00e1 a una serie de nodos de firma. Cont. \u00c1rbol: Contrafirma todos los nodos. Cont. Hojas: Contrafirma los nodos hoja del \u00e1rbol. Cont. Nodos: Contrafirma una serie de nodos. Cont. Firmantes: Contrafirma todos los nodos de una serie de firmantes. Conf. Nodos: Configura los nodos/firmantes que se desean contrafirmar. Obtener firma: Se toma el resultado de la operaci\u00f3n de firma. Extraer firma: Extrae la firma generada. Guardar firma: Almacena en disco la firma generada. Resultado Error. En caso de producirse un error, la tarea Contrafirmar establecer\u00e1 el mensaje correspondiente y lo pondr\u00e1 a disposici\u00f3n del integrador. Firma masiva de hashes (Procedimiento deprecado) Permite firmar una serie de hashes. < Actores Usuario: Usuario que quiere realizar la firma masiva de hashes. Casos de Uso Configurar firma: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1 a la operaci\u00f3n de firma. Conf. Almac\u00e9n: Configuraci\u00f3n del almac\u00e9n del que se extraer\u00e1 el certificado de firma. Conf. Filtro: Configuraci\u00f3n de un filtro que restringir\u00e1 los certificados mediante los que se podr\u00e1 firmar. Se podr\u00e1 configurar que el certificado se seleccione directamente si es el \u00fanico que cumple ese filtro o que se muestre un di\u00e1logo de selecci\u00f3n para que el usuario tome la decisi\u00f3n de cu\u00e1l usar. Los filtros se basar\u00e1n en el uso de la RFC-2254 y los KeyUsage de los certificados y permitir\u00e1n filtrar por: Estructura del X509Principal del titular del certificado. Estructura del X509Principal del emisor del certificado. Utilidad declarada para el certificado (firma, autenticaci\u00f3n, envoltura de claves,\u2026). Conf. Pol\u00edtica: Configuraci\u00f3n de la pol\u00edtica de firma. Conf. Algoritmo: Configuraci\u00f3n del algoritmo de firma. Conf. Formato: Configuraci\u00f3n del formato de firma. Incluye el formato a utilizar y la configuraci\u00f3n espec\u00edfica que admita este (tipos de datos firmados, contexto de firma, versi\u00f3n del formato\u2026). Los \u00fanicos formatos que soportan esta operaci\u00f3n son CMS, CAdES, XMLdSIG y XAdES. Conf. Modo: Configuraci\u00f3n del modo de firma. Seleccionar hashes: Operaci\u00f3n mediante la que se seleccionan todos los hashes que se desean firmar. Seleccionar certificado: Es el proceso de selecci\u00f3n del certificado con el que se va a firmar. Configurar alias: Establece el alias del certificado en el almac\u00e9n configurado. Seleccionar en di\u00e1logo de certificados: Muestra un di\u00e1logo para la selecci\u00f3n del certificado por parte del usuario. Firmar hashes: Ejecuta la operaci\u00f3n de firma sobre cada uno de los hashes configurados. Obtener firmas: Obtiene todas las firmas generadas a partir de los hashes introducidos. Resultado Error. En caso de producirse un error, la tarea Firmar hashes establecer\u00e1 el mensaje correspondiente y lo pondr\u00e1 a disposici\u00f3n del integrador. Multifirma masiva de ficheros Permite multifirmar los ficheros de un directorio. Esto es, permite configurar una operaci\u00f3n de firma o multifirma, establecer una configuraci\u00f3n de firma y aplicarlas sobre cada uno de los ficheros de un directorio o una selecci\u00f3n de los mismos. < Actores Usuario: Usuario que quiere realizar la multifirma masiva de ficheros. Casos de Uso Configurar firma: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1 a la operaci\u00f3n de firma. Conf. Almac\u00e9n: Configuraci\u00f3n del almac\u00e9n del que se extraer\u00e1 el certificado de firma. Conf. Filtro: Configuraci\u00f3n de un filtro que restringir\u00e1 los certificados mediante los que se podr\u00e1 firmar. Se podr\u00e1 configurar que el certificado se seleccione directamente si es el \u00fanico que cumple ese filtro o que se muestre un di\u00e1logo de selecci\u00f3n para que el usuario tome la decisi\u00f3n de cu\u00e1l usar. Los filtros se basar\u00e1n en el uso de la RFC-2254 y los KeyUsage de los certificados y permitir\u00e1n filtrar por: Estructura del X509Principal del titular del certificado. Estructura del X509Principal del emisor del certificado. Utilidad declarada para el certificado (firma, autenticaci\u00f3n, envoltura de claves,\u2026). Conf. Pol\u00edtica: Configuraci\u00f3n de la pol\u00edtica de firma. Conf. Algoritmo: Configuraci\u00f3n del algoritmo de firma. Conf. Formato: Configuraci\u00f3n del formato de firma. Incluye el formato a utilizar y la configuraci\u00f3n espec\u00edfica que admita este (tipos de datos firmados, contexto de firma, versi\u00f3n del formato\u2026). Los \u00fanicos formatos que soportan esta operaci\u00f3n son CMS, CAdES, XMLdSIG y XAdES. Conf. Modo: Configuraci\u00f3n del modo de firma. Conf. Directorio salida: Configuraci\u00f3n del directorio en el que se almacenar\u00e1n las firmas generadas. Conf. Operaci\u00f3n: Configuraci\u00f3n de la operaci\u00f3n a realizar: firma, cofirma, contrafirma de todo el \u00e1rbol de firmas o contrafirma de los nodos hoja. Conf. Recursividad: Configuraci\u00f3n de la recursividad de proceso. Si se indica que sea recursivo, se firmar\u00e1n tambi\u00e9n los ficheros de los subdirectorios. Seleccionar directorio: Configuraci\u00f3n del directorio con los ficheros que se desean firmar. Seleccionar certificado: Es el proceso de selecci\u00f3n del certificado con el que se va a firmar. Configurar alias: Establece el alias del certificado en el almac\u00e9n configurado. Seleccionar en di\u00e1logo de certificados: Muestra un di\u00e1logo para la selecci\u00f3n del certificado por parte del usuario. Firmar directorio: Ejecuta la operaci\u00f3n de masiva sobre cada uno de los ficheros del directorio. Las firmas resultantes ir\u00e1n a parar al directorio de salida o al mismo directorio de entrada si no se configur\u00f3. El resultado de las firmas individuales se reflejar\u00e1 en un fichero de log en el directorio de salida de las firmas. Resultado Error. El proceso contin\u00faa hasta tratar todos los ficheros del directorio que sean objetivo de la operaci\u00f3n. En caso de producirse errores en operaciones individuales del proceso, se reflejar\u00e1n los mensajes correspondientes en el fichero de log generado. Multifirma masiva program\u00e1tica Permite firmar, cofirmar y contrafirmar datos, fichero y hashes con una misma configuraci\u00f3n de firma. Esta operaci\u00f3n permitir\u00e1 establecer una configuraci\u00f3n de firma \u00fanica y aplicarla en cada operaci\u00f3n individual. El integrador aplicar\u00e1 la operaci\u00f3n sobre cada objetivo de firma concreto, obteniendo directamente su resultado . Este proceso no se aplica a m\u00faltiples objetivos, el integrador debe ordenar expl\u00edcitamente cada operaci\u00f3n individual. Este modo de operaci\u00f3n est\u00e1 orientado a facilitar la integraci\u00f3n del cliente en sistemas de firma masiva de documentos. Por ejemplo, recorrer un listado de datos objetivo y aplicar la operaci\u00f3n sobre cada uno de ellos. < Actores Usuario: Usuario que quiere realizar la firma masiva de hashes. Casos de Uso Configurar firma: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1 a la operaci\u00f3n de firma. Conf. Almac\u00e9n: Configuraci\u00f3n del almac\u00e9n del que se extraer\u00e1 el certificado de firma. Conf. Filtro: Configuraci\u00f3n de un filtro que restringir\u00e1 los certificados mediante los que se podr\u00e1 firmar. Se podr\u00e1 configurar que el certificado se seleccione directamente si es el \u00fanico que cumple ese filtro o que se muestre un di\u00e1logo de selecci\u00f3n para que el usuario tome la decisi\u00f3n de cu\u00e1l usar. Los filtros se basar\u00e1n en el uso de la RFC-2254 y los KeyUsage de los certificados y permitir\u00e1n filtrar por: Estructura del X509Principal del titular del certificado. Estructura del X509Principal del emisor del certificado. Utilidad declarada para el certificado (firma, autenticaci\u00f3n, envoltura de claves,\u2026). Conf. Pol\u00edtica: Configuraci\u00f3n de la pol\u00edtica de firma. Conf. Algoritmo: Configuraci\u00f3n del algoritmo de firma. Conf. Formato: Configuraci\u00f3n del formato de firma. Incluye el formato a utilizar y la configuraci\u00f3n espec\u00edfica que admita este (tipos de datos firmados, contexto de firma, versi\u00f3n del formato\u2026). Los \u00fanicos formatos que soportan esta operaci\u00f3n son CMS, CAdES, XMLdSIG y XAdES. Conf. Modo: Configuraci\u00f3n del modo de firma. Seleccionar certificado: Es el proceso de selecci\u00f3n del certificado con el que se va a firmar. Configurar alias: Establece el alias del certificado en el almac\u00e9n configurado. Seleccionar en di\u00e1logo de certificados: Muestra un di\u00e1logo para la selecci\u00f3n del certificado por parte del usuario. Configurar operaci\u00f3n: Es el proceso por el que se configura el tipo de operaci\u00f3n que se debe realizar. Las operaciones permitidas ser\u00e1n: firma, cofirma, contrafirma de nodos hoja y contrafirma del \u00e1rbol de firma. Ejecutar operaci\u00f3n: Ejecuta la operaci\u00f3n configurada con los par\u00e1metros establecidos en los pasos anteriores. La operaci\u00f3n devuelve directamente el resultado, no siendo necesario recogerlo en un paso posterior. Resultado Error. En caso de producirse un error, la tarea Ejecutar operaci\u00f3n no generar\u00e1 la firma y establecer\u00e1 el mensaje correspondiente poni\u00e9ndolo a disposici\u00f3n del integrador. Cifrado sim\u00e9trico Permite el cifrado de datos por medio de una clave sim\u00e9trica. Esto es, se podr\u00e1n descifrar los datos mediante esa misma clave. < Actores Usuario: Usuario que quiere realizar el cifrado. Casos de Uso Configurar cifrado: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1n a la operaci\u00f3n de cifrado. Conf. Modo clave: Configuraci\u00f3n del origen de la clave de cifrado (autogenerada, insertada por el usuario, mediante contrase\u00f1a o desde almac\u00e9n). Conf. Algoritmo: Configuraci\u00f3n del algoritmo de cifrado. Conf. Clave/Contrase\u00f1a: Configuraci\u00f3n de la clave o contrase\u00f1a de cifrado. Conf. Almac\u00e9n cifrado: Configuraci\u00f3n del almac\u00e9n para extraer claves de cifrado. Seleccionar documento: Es el proceso en el que se selecciona el elemento que se desea cifrar. Por defecto, se solicita seleccionar un fichero. Configurar fichero: Establece un fichero a cifrar. Configurar datos: Establece los datos a cifrar. Cifrar: Ejecuta el cifrado conforme a los par\u00e1metros configurados anteriormente. Obtener cifrado: Se toma el resultado de la operaci\u00f3n de cifrado. Extraer cifrado: Recupera los datos cifrados. Guardar cifrado: Almacena en disco los datos cifrados obtenidos. Resultado Error. En caso de error, devuelve la cadena de texto asociada al error encontrado. Descifrado sim\u00e9trico Permite el descifrado sim\u00e9trico de datos especificando la clave de cifrado. < Actores Usuario: Usuario que quiere descifrar los datos. Casos de Uso Configurar descifrado: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1n a la operaci\u00f3n de descifrado. Conf. Modo clave: Configuraci\u00f3n del origen de la clave para el descifrado (insertada por el usuario, mediante contrase\u00f1a o desde almac\u00e9n). Conf. Algoritmo: Configuraci\u00f3n del algoritmo de cifrado. Conf. Clave/Contrase\u00f1a: Configuraci\u00f3n de la clave o contrase\u00f1a de cifrado. Conf. Almac\u00e9n cifrado: Configuraci\u00f3n del almac\u00e9n para la carga de claves de cifrado. Seleccionar cifrado: Es el proceso en el que se selecciona el documento cifrado que se desea descifrar. Por defecto, se solicita seleccionar un fichero. Configurar fichero: Establece la ruta del fichero cifrado. Configurar datos: Establece los datos cifrados. Descifrar: Ejecuta la operaci\u00f3n de descifrado conforme a los par\u00e1metros configurados. Obtener datos: Se toma el resultado de la operaci\u00f3n de cifrado. Extraer datos: Recupera los datos descifrados. Guardar datos: Almacena en disco los datos descifrados obtenidos. Resultado Error. En caso de error, devuelve la cadena de texto asociada al error encontrado. Ensobrado digital Permite generar un paquete de datos cifrados e indicar quienes podr\u00e1n descifrarlo. Se utilizar\u00e1 una estructura CMS como soporte de los datos resultantes. < Actores Usuario: Usuario que quiere generar el sobre digital. Casos de Uso Configurar sobre: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1n a la generaci\u00f3n del sobre digital. Conf. tipo sobre: Configuraci\u00f3n del tipo de sobre que se desea generar: Sobre simple (EnvelopedData), sobre firmado (SignedAndEnvelopedData) o sobre autenticado (AuthenticatedAndEnvelopedData). Seleccionar documento: Es el proceso en el que se selecciona el elemento que se desea ensobrar. Por defecto, se solicita seleccionar un fichero. Configurar fichero: Establece un fichero a ensobrar. Configurar datos: Establece los datos a ensobrar. Configurar destinatarios: Configura quienes son los destinatarios del sobre digital a partir de sus certificados con clave p\u00fablica. Estos certificados pueden tomarse de disco, de un almac\u00e9n, de un servidor LDAP o configurarse directamente. Configurar remitente: Configura el remitente del sobre a partir de su certificado en almac\u00e9n. Ensobrar: Genera el sobre digital conforme a los par\u00e1metros configurados anteriormente. Obtener sobre: Se toma el resultado de la operaci\u00f3n de ensobrado. Recuperar sobre: Recupera el sobre digital. Guardar sobre: Almacena en disco el sobre digital. Resultado Error. En caso de error, devuelve la cadena de texto asociada al error encontrado. Abrir sobre digital Permite al receptor de un sobre digital extraer su contenido utilizando su propia clave privada. < Actores Usuario: Destinatario del sobre digital. Casos de Uso Seleccionar sobre: Es el proceso en el que se selecciona el sobre digital del que se desean extraer los datos. Por defecto, se solicita seleccionar un fichero. Configurar fichero: Establece la ruta del sobre digital. Configurar datos: Establece el sobre digital. Seleccionar destinatario: Es el proceso de selecci\u00f3n del certificado con el que se va a descifrar el sobre digital. Configurar alias: Establece el alias del certificado en el almac\u00e9n configurado. Seleccionar en di\u00e1logo de certificados: Muestra un di\u00e1logo para la selecci\u00f3n del certificado por parte del usuario. Desensobrar: Ejecuta la operaci\u00f3n de extracci\u00f3n de datos del sobre digital. Obtener datos: Se toma el resultado de la operaci\u00f3n de desensobrado. Extraer datos: Recupera los datos extra\u00eddos del sobre. Guardar datos: Almacena en disco los datos extra\u00eddos del sobre. Resultado Error. En caso de error, devuelve la cadena de texto asociada al error encontrado. Algoritmos de cifrado Los algoritmos sim\u00e9tricos utilizan la misma clave tanto para cifrar como para descifrar, por lo que se recomienda una clave segura. Se incorporar\u00e1 un mecanismo de generaci\u00f3n de claves seguras. AES : Advanced Encryption Standard. Sistema de encriptaci\u00f3n adoptado por el gobierno de Estados Unidos (FIPS-PUB 197) y fue propuesto por el NIST. Cifrado sim\u00e9trico en bloques de 128 bits y con claves de 128, 192 o 256 bits. Este est\u00e1ndar contempla el algoritmo para 10, 12 o 14 vueltas aunque est\u00e1 previsto aumentarlas debido al \u00e9xito obtenido con criptoan\u00e1lisis que encuentra coincidencia con 277 bloques bajo 256 claves y requiere sobre 2224 pasos para completarse. ARCFOUR : Es el sistema de cifrado de flujo m\u00e1s utilizado y se usa en los protocolos m\u00e1s populares como Transport Layer Security (TLS/SSL) y Wired Equivalent Privacy (WEP) Este algoritmo fue excluido de los est\u00e1ndares de alta seguridad debido a su sistema de criptograf\u00eda muy inseguro. El factor principal de su popularidad es su velocidad y simplicidad, as\u00ed como la implementaci\u00f3n tanto en software como en hardware es sencilla de desarrollar. El algoritmo es simple, ya que consiste en la combinaci\u00f3n de 2 algoritmos 1-KSA y 2 PRGA BLOWFISH : Es un codificador de bloques sim\u00e9tricos, dise\u00f1ado por Bruce Schneier en 1993. Usa bloques de 64 bits y claves que van desde los 32 bits hasta los 448 bits. Es un codificador de 16 rondas Feistel y usa llaves que dependen de las Cajas-S. Este algoritmo de cifrado correr\u00e1 521 veces para generar todas las subclaves, con lo que cerca de 4Kb de datos son procesados. Data Encryption Standard (DES) : Es un algoritmo prototipado del cifrado por bloques, un algoritmo que toma un texto de una longitud fija de bits y lo transforma mediante una serie de operaciones b\u00e1sicas en otro texto cifrado de la misma longitud. DES utiliza tambi\u00e9n una clave criptogr\u00e1fica para modificar la transformaci\u00f3n, de modo que le descifrado s\u00f3lo puede ser realizado por aquellos que conozcan la clave concreta utilizada en el cifrado. El cifrado se realiza con una clave de 56 bits, la cual es corta, y debido a algunos elementos de dise\u00f1o clasificados propici\u00f3 las sospechas de la existencia de una puerta trasera para la National Security Agency. Triple DES (3DES) : Basado en DES (Data Encryption Standard). Cifrado en bloques de 64 bits con clave de 168 bits (192 incluyendo bits de paridad). Actualmente ha sido sustituido por AES, pero se sigue utilizando ampliamente. Los \u00faltimos criptoan\u00e1lisis revelan que son necesarias 2108 operaciones para romper una clave TripleDES, pero si se concentra en las 3 claves DES, basta con 290 operaciones. RC2 : Es un cifrado de bloques dise\u00f1ado por Ron Rivest en 1987. El desarrollo de RC2 fue patrocinado por Lotus el cual fue exportado como parte de su software Lotus Notes. Este cifrado cuyo tama\u00f1o de clave es de 40 bits fue aprobado para exportarlo en 1989 bajo la regulaci\u00f3n de los EEUU. RC2 es un cifrado de bloques de 64 bits con una clave de tama\u00f1o variable. Consta de 18 ciclos, 16 de un tipo MIXING y dos ciclos de otro tipo MASHING. Algoritmos PBE (Password Basic Encryptation) : Algoritmos que generan una clave secreta a partir de una contrase\u00f1a introducida por el usuario. Estas t\u00e9cnicas plantean problemas debido a que los requerimientos de usuario difieren de los requerimientos de seguridad del sistema, ya que el usuario desea una frase f\u00e1cil de recordar, sin embargo una clave segura actualmente requiere al menos 128 bits aleatorios. Adem\u00e1s, los sistemas de encriptaci\u00f3n basados en contrase\u00f1as son normalmente utilizados en aplicaciones donde un atacante puede repetidamente intentar adivinar la contrase\u00f1a, con lo que se pueden utilizar m\u00e9todos de fuerza bruta para obtener las contrase\u00f1as. Existen varios algoritmos que utilizan este sistema, como: PBEWithSHA1AndRC2_40 : Este modo encripta con 40-bits RC2 PBEWithMD5AndDES : Este algoritmo combina los beneficios de una lenta e insegura encriptaci\u00f3n de 56 bits con una insegura funci\u00f3n hash. No es recomendable su uso. Es definido como \u201cPKCS #5\u201d PBEWithSHA1AndDESede: Este algoritmo utiliza una encriptaci\u00f3n triple DES y una funci\u00f3n de hash sha1. Sobres digitales El est\u00e1ndar CMS permite define una arquitectura capaz de encapsular distintos tipos de contenido como datos planos, datos firmados, datos cifrados, hashes\u2026 Las estructuras definidas por CMS nos permiten construir sobres digitales. Nuestro objetivo al usar sobres digitales ser\u00e1 poder distribuir documentos de forma segura y privada a uno o varios destinatarios. La estructura general del sobre ser\u00e1: < Donde ContentType ser\u00e1 una cadena asociada ASN.1 que define el tipo del contenido y Content ser\u00e1 los datos contenidos en el CMS. Estos datos los dividiremos en dos modos de implementaci\u00f3n de CMS. Debemos recordar que los tipos CMS son anidables y que, por ejemplo, el contenido a encriptar puede ser un contenido previamente firmado y viceversa. CMS cifrado Es un sobre digital simple que contiene el elemento cifrado y en el cual no se incluye ninguna informaci\u00f3n sobre la clave de cifrado. Esto hace que la clave de cifrado deba ser transmitida de forma ajena al envoltorio CMS. La estructura de este CMS es la siguiente: < Donde: CMS versi\u00f3n ser\u00e1 0 si no existen atributos asociados y 2 si existen. EncryptedContentInfo contiene la informaci\u00f3n encriptada. ContentType: Define el tipo del contenido definida seg\u00fan ASN.1 ContentEncryptionAlgorithm: Indica el algoritmo utilizado para encriptar el contenido. EncryptedContent: Contenido cifrado por el algoritmo anteriormente indicado y la clave suministrada a los receptores. Attributes es un conjunto de atributos no encriptados que definen algunos par\u00e1metros como el algoritmo utilizado. CMS envuelto Este tipo de sobre digital permite cifrar un contenido y distribuirlo a varios receptores e incluye la clave de cifrado. La estructura es la siguiente: < Donde encontramos los siguientes elementos: CMS version , indica la versi\u00f3n de CMS y estar\u00e1 definido seg\u00fan los par\u00e1metros OriginatorInfo, RecipientInfo y Attributes (definidos en RFC3852). OriginatorInfo . Incluye opcionalmente informaci\u00f3n sobre el creador del mensaje. Puede incluir una lista de certificados, con intenci\u00f3n de crear un camino de certificaci\u00f3n hasta el root, o una colecci\u00f3n de CRLs. RecipientInfo . Incluye la informaci\u00f3n necesaria para que los destinatarios puedan descifrar el mensaje. Aunque existen varios tipos, el m\u00e1s \u00fatil para nuestro prop\u00f3sito es el que transporta la clave de cifrado y cuyos campos vienen definidos a continuaci\u00f3n: CMS version. Define la versi\u00f3n del campo en funci\u00f3n del tipo de identificador elegido. RecipientIdentifier. Puede incluir el emisor y n\u00famero de serie del certificado (versi\u00f3n 0) o un identificador del certificado (versi\u00f3n 2). KeyEncryptionAlgorithm. Define el algoritmo utilizado para cifrar la clave. EncryptedKey. Clave usada para cifrar el contenido del documento y cifrada a su vez por el algoritmo especificado anteriormente. EncryptedContentInfo. Se compone de: ContentType: Define el tipo del contenido definido seg\u00fan ASN.1 ContentEncryptionAlgorithm: Indica el algoritmo utilizado para cifrar el contenido. EncryptedContent: Contenido cifrado por el algoritmo anteriormente indicado y la clave suministrada a los receptores. PKCS#7 firmado y envuelto Este tipo de sobre no est\u00e1 definido dentro del est\u00e1ndar CMS sino de su predecesor, PKCS#7. Los PKCS#7 firmados y envueltos van firmados por quien genera el sobre y permiten cifrar un contenido y distribuirlo a varios receptores. La clave de cifrado del contenido va incrustada en el propio sobre. La estructura es la siguiente: Donde encontramos los siguientes elementos: Version , indica la versi\u00f3n de la sintaxis con la que se ha construido el objeto. RecipientInfo . Incluye la informaci\u00f3n necesaria para que los destinatarios puedan descifrar el mensaje. Aunque existen varios tipos, el m\u00e1s \u00fatil para nuestro prop\u00f3sito es el que transporta la clave de cifrado y cuyos campos vienen definidos a continuaci\u00f3n: Version. Indica la versi\u00f3n de la sintaxis con la que se ha construido el objeto. IssuerAndSerialNumber. Puede incluir el emisor y n\u00famero de serie del certificado. KeyEncryptionAlgorithm. Define el algoritmo utilizado para cifrar la clave. EncryptedKey. Clave usada para cifrar el contenido del documento y cifrada a su vez por el algoritmo especificado anteriormente. EncryptedContentInfo. Se compone de: ContentType: Define el tipo del contenido definido seg\u00fan ASN.1 ContentEncryptionAlgorithm: Indica el algoritmo utilizado para cifrar el contenido. EncryptedContent: Contenido cifrado por el algoritmo anteriormente indicado y la clave suministrada a los receptores. SignerInfos. Listado de firmas del contenido. CMS Autenticado y envuelto Este tipo de sobre viene definido en la RFC 5083, que actualiza el est\u00e1ndar CMS (RFC 3852). Este tipo de contenido combina los m\u00e9todos de autenticaci\u00f3n y encriptado de datos definidos en la RFC 3852. La estructura es la siguiente: Donde encontramos los siguientes elementos: Version , indica la versi\u00f3n de la sintaxis con la que se ha construido el objeto. OriginatorInfo . Incluye informaci\u00f3n sobre el creador del mensaje. Puede incluir una lista de certificados, con intenci\u00f3n de crear un camino de certificaci\u00f3n hasta el root, o una colecci\u00f3n de CRLs. RecipientInfo . Incluye la informaci\u00f3n necesaria para que los destinatarios puedan descifrar el mensaje. Aunque existen varios tipos, el m\u00e1s \u00fatil para nuestro prop\u00f3sito es el que transporta la clave de cifrado y cuyos campos vienen definidos a continuaci\u00f3n: Version. Indica la versi\u00f3n de la sintaxis con la que se ha construido el objeto. IssuerAndSerialNumber. Puede incluir el emisor y n\u00famero de serie del certificado. KeyEncryptionAlgorithm. Define el algoritmo utilizado para cifrar la clave. EncryptedKey. Clave usada para cifrar el contenido del documento y cifrada a su vez por el algoritmo especificado anteriormente. EncryptedContentInfo. Se compone de: ContentType: Define el tipo del contenido definido seg\u00fan ASN.1 ContentEncryptionAlgorithm: Indica el algoritmo utilizado para cifrar el contenido. EncryptedContent: Contenido cifrado por el algoritmo anteriormente indicado y la clave suministrada a los receptores. MenssageAuthenticationCode. C\u00f3digo de autenticaci\u00f3n del contenido.","title":"CF funcional ES"},{"location":"markdown_strict/CF_funcional_ES/#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"markdown_strict/CF_funcional_ES/#objetivo","text":"El objeto de este documento es realizar una descripci\u00f3n general y funcional del cliente de firma y cifrado de la Plataforma @Firma.","title":"Objetivo"},{"location":"markdown_strict/CF_funcional_ES/#alcance","text":"Descripci\u00f3n del cliente de firma y cifrado y de las funcionalidades atribuidas. Abarcar\u00e1 los siguientes aspectos: Descripci\u00f3n de los tipos de firma y formatos soportados por el cliente. Identificaci\u00f3n y descripci\u00f3n de los procesos que permite realizar el cliente de firma. Identificaci\u00f3n de las funcionalidades de cifrado, los algoritmos empleados y la usabilidad de estos. Identificaci\u00f3n de los sobres digitales soportados y la usabilidad de estos.","title":"Alcance"},{"location":"markdown_strict/CF_funcional_ES/#descripcion","text":"El cliente de firma, llamado Cliente @firma, es un componente que se ejecuta en la m\u00e1quina del usuario en forma de Applet y le permite realizar diversas operaciones criptogr\u00e1ficas: Firma / multifirma electr\u00f3nica de documentos. Procesos de firma / multifirma masiva. Cifrado / descifrado de datos. Generaci\u00f3n y apertura de sobre digitales. La firma electr\u00f3nica es el equivalente electr\u00f3nico a la firma manuscrita. El usuario puede seleccionar cualquier tipo de datos para firmar. El origen de los datos puede ser tanto un fichero, datos en memoria y, para algunos formatos de firma electr\u00f3nica, huellas digitales (hashes). Los formatos soportados por el sistema de firma son: PKCS#7 / CMS CAdES-BES / CAdES-EPES XMLdSig XAdES-BES / XAdES-EPES PAdES \u2013BES / PAdES-EPES (Firmas PDF) ODF OOXML Las firmas en formato CMS, CAdES, XMLdSig y XAdES soportar\u00e1n 2 modos de firma: Impl\u00edcita: La firma generada va acompa\u00f1ada de los datos, normalmente incluidos dentro de la firma. Explicita: La firma generada no mantiene relaci\u00f3n directa con los datos, salvo posiblemente una referencia externa a ellos o su huella digital. Las firmas PAdES, ODF y OOXML son por naturaleza impl\u00edcitas y no soportar\u00e1n este tipo de configuraci\u00f3n. El algoritmo utilizado por defecto ser\u00e1 SHA1withRSA, salvo cuando el formato de firma exija lo contrario. Para aquellos formatos que permitan configurar el algoritmo se soportar\u00e1n: MD5withRSA. SHA1withRSA. SHA256withRSA. SHA384withRSA. SHA512withRSA. Se permite seleccionar el certificado electr\u00f3nico para la firma de cualquiera de los siguientes almacenes de certificados: Almac\u00e9n de Windows / Internet Explorer. Almac\u00e9n de Mozilla Firefox. Almac\u00e9n de Apple. Ficheros PKCS#12 / PFX. Ficheros JKS. Dispositivos externos (configurados en alguno de los almacenes ya mencionados). El almac\u00e9n de claves por defecto viene dado por el navegador Web y el sistema operativo desde el que se ejecute el Cliente @firma. Se configurar\u00e1 siempre que sea posible el mismo almac\u00e9n que utiliza el navegador en ese sistema. La multifirma es el procedimiento que permite a varios usuarios firmar un \u00fanico documento de datos y almacenar sus firmas en un mismo documento de firma. La multifirma podr\u00e1 ser: Cofirma o firma paralela, en el cual todos los firmantes est\u00e1n al mismo nivel y no existe un orden prefijado Contrafirma o firma en cascada o jer\u00e1rquica, en la que los firmantes est\u00e1n en distintos niveles y s\u00ed existe orden entre las firmas. La multifirma masiva es el proceso que permite automatizar la firma o multifirma de grandes cantidades de datos, aplicando la configuraci\u00f3n en cada una de las operaciones (mismo certificado de firma, mismo algoritmo\u2026). La multifirma masiva dispone de dos medios de aplicaci\u00f3n: El usuario puede especificar el directorio con los ficheros que se desean multifirmar y configurar la operaci\u00f3n que se aplicar\u00e1 a las firmas. El usuario puede desarrollar un mecanismo program\u00e1tico que le permita multifirmar m\u00faltiples ficheros, datos o hashes de forma m\u00e1s sencilla que ejecutando la operaci\u00f3n concreta sobre cada uno de ellos. El Cliente @firma dispone tambi\u00e9n de un sistema de cifrado de datos. Todos los algoritmos contemplados por este sistema son sim\u00e9tricos, es decir, se utiliza la misma clave para cifrar y descifrar los datos. Esto supone que la clave siempre debe ser privada. Los algoritmos soportados por el sistema de cifrado son: AES Alleged RC4 3DES DES Blowfish RC2 PBEWithSHA1AndDESede PBEWithSHA1AndRC2_40 PBEWithMD5AndDES Los algoritmos PBE (los 3 \u00faltimos listados) utilizan contrase\u00f1as que puede insertar el propio usuario, aunque no son v\u00e1lidos todos los caracteres para estas. El resto de algoritmos usan directamente claves de cifrado que tienen unos requisitos espec\u00edficos para cada algoritmo por lo que el sistema deber\u00e1 tener en cuenta dichos requisitos. Los sobres digitales utilizan una combinaci\u00f3n de algoritmos de cifrado sim\u00e9trico y asim\u00e9trico que permiten cifrar datos de tal forma que s\u00f3lo una serie de personas ser\u00e1n capaces de descifrarlos, lo que los hace id\u00f3neos para la transmisi\u00f3n de datos cifrados a otras personas. Los distintos tipos de sobres digitales soportados se encuentran descritos en los anexos.","title":"Descripci\u00f3n"},{"location":"markdown_strict/CF_funcional_ES/#requisitos-funcionales","text":"Los requisitos funcionales que debe cumplir son los expuestos a continuaci\u00f3n: El sistema debe ser multiplataforma, pudiendo ser ejecutado en Windows, Linux (Red Hat, Ubuntu), Solaris/ OpenSolaris y Mac OS X; as\u00ed mismo se debe poder ejecutar, al menos, en Internet Explorer, Firefox, Safari y Chrome. El componente acceder\u00e1 por defecto a los certificados instalados en el navegador donde se ejecute. Se permitir\u00e1 utilizar un almac\u00e9n de claves distinto al por defecto. Si el almac\u00e9n dispone de una clave de acceso, se le solicitar\u00e1 al usuario. Se pueden filtrar los certificados disponibles mediante filtros basados en la especificaci\u00f3n RFC2254 o mediantes expresiones regulares, definiendo valores cr\u00edticos para determinados campos. El componente de firma ser\u00e1 un applet e implementar\u00e1 toda la funcionalidad de la firma en la m\u00e1quina cliente, de forma que se ejecutar\u00e1 siempre el mismo componente independientemente del proceso de firma que se quiera lanzar (firma/multifirma de ficheros, masiva\u2026). El componente no instalar\u00e1 nada en la m\u00e1quina del usuario salvo que sea absolutamente necesario y siempre pedir\u00e1 confirmaci\u00f3n al usuario para llevar a cabo este proceso. El cliente podr\u00e1 ser cacheado por la m\u00e1quina virtual y esta cach\u00e9 se actualizar\u00e1 autom\u00e1ticamente cada vez que se detecte una actualizaci\u00f3n desplegada en servidor. El componente firmar\u00e1 los datos introducidos, utilizando el certificado que seleccione el usuario, mediante el algoritmo \u201cRSA\u201d configurado y con un formato preestablecido. Se permitir\u00e1 la generaci\u00f3n de firmas EPES al configurar un formato de firma avanzada (CAdES, XAdES y PAdES) y los datos de una pol\u00edtica de firma. El componente permitir\u00e1 realizar firmas en serie (cofirmas) y en cascada (contrafirma) como una operaci\u00f3n posterior a la operaci\u00f3n de firma. Las contrafirmas podr\u00e1n realizarse sobre firmas concretas del documento de firmas, sobre todas las firmas de uno o varios firmantes, sobre todas las firmas que no hayan sido anteriormente contrafirmadas o sobre todas las firmas. Se pueden guardar las firmas/multifirmas generadas en ficheros \u201c.csig\u201d (CMS y CAdES), \u201c.xsig\u201d (XADES y XMLDSIGN) y \u201c.sig\u201d (firma electr\u00f3nica simple, sin formato) o incrustadas en los documentos firmados (PDF/PAdES, ODF y OOXML). Las multifirmas masivas se pueden realizar sobre un grupo de ficheros o sobre un conjunto de hashes. Tambi\u00e9n podr\u00e1n realizarse definiendo un proceso program\u00e1tico simple. El sistema de cifrado permitir\u00e1 cifrar y descifrar contenidos en el cliente mediante algoritmos sim\u00e9tricos. Los algoritmos de cifrado disponibles ser\u00e1n: AES, Allleged RC4, Blowfish, TripleDES, DES, RC2, PBEWithSHA1AndDESede, PBEWithSHA1AndRC2_40 y PBEWithMD5AndDES. Se permitir\u00e1 generar autom\u00e1ticamente claves de cifrado para cada algoritmo de cifrado que lo soporte. Se podr\u00e1n almacenar las claves de cifrado utilizadas en un almac\u00e9n de claves \u00fanico del usuario y utilizar estas claves para el cifrado y descifrado de datos. Se da la posibilidad de crear un sobre digital CMS para transmitir mensajes cifrados a uno o varios receptores. La incorporaci\u00f3n de destinatarios a un sobre digital se deber\u00e1 hacer mediante ficheros \u201c.cer\u201d, cargando el certificado en memoria o desde alguno de los almacenes del sistema. Ser\u00e1 posible extraer certificados con clave p\u00fablica de servidores LDAP simples. Se permite guardar en ficheros los datos generados en cada momento: firmas, ficheros, cifrados y descifrados, sobres digitales\u2026","title":"Requisitos funcionales"},{"location":"markdown_strict/CF_funcional_ES/#descomposicion-funcional","text":"Una vez establecidos los requisitos funcionales, se van a identificar y definir cada uno de los procesos que deber\u00e1 implementar para cumplir con dichos requisitos.","title":"Descomposici\u00f3n funcional"},{"location":"markdown_strict/CF_funcional_ES/#firma","text":"Es el proceso mediante el cual el componente cliente firma unos datos utilizando la clave privada asociada a uno de los certificados que tiene el usuario instalado en su navegador. El Cliente mostrar\u00e1 al usuario una lista de los certificados instalados en el almac\u00e9n o dispositivo configurado y este deber\u00e1 seleccionar uno de ellos. Tambi\u00e9n podr\u00e1 configurarse que se filtren previamente estos certificados e, incluso, que se seleccione directamente uno de ellos sin que el usuario tenga que elegirlo. A continuaci\u00f3n se detalla el caso de uso asociado a esta operativa: <","title":"Firma"},{"location":"markdown_strict/CF_funcional_ES/#actores","text":"Usuario: Usuario que quiere realizar la firma.","title":"Actores"},{"location":"markdown_strict/CF_funcional_ES/#casos-de-uso","text":"Configurar firma: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1 a la operaci\u00f3n de firma. Conf. Almac\u00e9n: Configuraci\u00f3n del almac\u00e9n del que se extraer\u00e1 el certificado de firma. Conf. Filtro: Configuraci\u00f3n de un filtro que restringir\u00e1 los certificados mediante los que se podr\u00e1 firmar. Se podr\u00e1 configurar que el certificado se seleccione directamente si es el \u00fanico que cumple ese filtro o que se muestre un di\u00e1logo de selecci\u00f3n para que el usuario tome la decisi\u00f3n de cu\u00e1l usar. Los filtros se basar\u00e1n en el uso de la RFC-2254 y los KeyUsage de los certificados y permitir\u00e1n filtrar por: Estructura del X509Principal del titular del certificado. Estructura del X509Principal del emisor del certificado. Utilidad declarada para el certificado (firma, autenticaci\u00f3n, envoltura de claves,\u2026). Conf. Pol\u00edtica: Configuraci\u00f3n de la pol\u00edtica de firma. Conf. Algoritmo: Configuraci\u00f3n del algoritmo de firma. Conf. Formato: Configuraci\u00f3n del formato de firma. Incluye el formato a utilizar y la configuraci\u00f3n espec\u00edfica que admita este (tipos de datos firmados, contexto de firma, versi\u00f3n del formato\u2026) Conf. Modo: Configuraci\u00f3n del modo de firma. Seleccionar documento: Es el proceso en el que se seleccionan los datos sobre los que se desea realizar la firma. Por defecto, se solicita seleccionar un fichero. Las alternativas son las siguientes: Configurar fichero: Establece un fichero sobre el que realizar la firma. Configurar datos: Establece los datos sobre los que realizar la firma. Configurar hash: Establece el hash sobre el que realizar la firma. La operaci\u00f3n de firma no aplicar\u00e1 algoritmo de hash. Seleccionar certificado: Es el proceso de selecci\u00f3n del certificado con el que se va a firmar. Las alternativas son: Configurar alias: El integrador establece el alias del certificado del almac\u00e9n configurado que se debe utilizar. Seleccionar en di\u00e1logo de certificados: Muestra un di\u00e1logo para la selecci\u00f3n del certificado por parte del usuario. En este di\u00e1logo s\u00f3lo aparecer\u00e1n los certificados que cumplan el filtro de certificados definido anteriormente. Firmar: Ejecuta la operaci\u00f3n de firma conforme a los par\u00e1metros configurados anteriormente. Obtener firma: Se toma el resultado de la operaci\u00f3n de firma. Las alternativas, no excluyentes, son: Extraer firma: Extrae la firma generada. Guardar firma: Almacena en disco la firma generada. Resultado Error: En caso de producirse un error, el proceso Firmar establecer\u00e1 el mensaje correspondiente y lo pondr\u00e1 a disposici\u00f3n del integrador.","title":"Casos de Uso"},{"location":"markdown_strict/CF_funcional_ES/#cofirma","text":"Permite a varios usuarios firmar el mismo elemento. <","title":"Cofirma"},{"location":"markdown_strict/CF_funcional_ES/#actores_1","text":"Usuario: Usuario que quiere realizar la cofirma.","title":"Actores"},{"location":"markdown_strict/CF_funcional_ES/#casos-de-uso_1","text":"Configurar firma: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1 a la operaci\u00f3n de firma. Conf. Almac\u00e9n: Configuraci\u00f3n del almac\u00e9n del que se extraer\u00e1 el certificado de firma. Conf. Filtro: Configuraci\u00f3n de un filtro que restringir\u00e1 los certificados mediante los que se podr\u00e1 firmar. Se podr\u00e1 configurar que el certificado se seleccione directamente si es el \u00fanico que cumple ese filtro o que se muestre un di\u00e1logo de selecci\u00f3n para que el usuario tome la decisi\u00f3n de cu\u00e1l usar. Los filtros se basar\u00e1n en el uso de la RFC-2254 y los KeyUsage de los certificados y permitir\u00e1n filtrar por: Estructura del X509Principal del titular del certificado. Estructura del X509Principal del emisor del certificado. Utilidad declarada para el certificado (firma, autenticaci\u00f3n, envoltura de claves,\u2026). Conf. Pol\u00edtica: Configuraci\u00f3n de la pol\u00edtica de firma. Conf. Algoritmo: Configuraci\u00f3n del algoritmo de firma. Conf. Formato: Configuraci\u00f3n del formato de firma. Incluye el formato a utilizar y la configuraci\u00f3n espec\u00edfica que admita este (tipos de datos firmados, contexto de firma, versi\u00f3n del formato\u2026) Conf. Modo: Configuraci\u00f3n del modo de firma. Seleccionar documento: Es el proceso en el que se seleccionan los datos sobre los que se desea realizar la firma. Por defecto, se solicita seleccionar un fichero. En el proceso de cofirma, la selecci\u00f3n del documento no es obligatorio cuando la firma que se selecciona en el paso siguiente contiene ya los datos que se firmaron originalmente. Configurar fichero: Establece un fichero sobre el que realizar la firma. Configurar datos: Establece los datos sobre los que realizar la firma. Configurar hash: Establece el hash sobre el que realizar la firma. La operaci\u00f3n de firma no aplicar\u00e1 algoritmo de hash. Seleccionar firma: Es el proceso de selecci\u00f3n del documento de firma al que se le desea agregar una nueva cofirma. Conf. Fichero firma: Configura el fichero de firma al que se le quiere agregar la cofirma. Conf. Datos firma: Configura la firma (en memoria) a la que se quiere agregar la cofirma. Seleccionar certificado: Es el proceso de selecci\u00f3n del certificado con el que se va a firmar. Configurar alias: Establece el alias del certificado en el almac\u00e9n configurado. Seleccionar en di\u00e1logo de certificados: Muestra un di\u00e1logo para la selecci\u00f3n del certificado por parte del usuario. Cofirmar: Ejecuta la operaci\u00f3n de cofirma conforme a los par\u00e1metros configurados anteriormente. Obtener firma: Se toma el resultado de la operaci\u00f3n de firma. Extraer firma: Extrae la firma generada. Guardar firma: Almacena en disco la firma generada. Resultado Error. En caso de producirse un error, el proceso Cofirmar establecer\u00e1 el mensaje correspondiente y lo pondr\u00e1 a disposici\u00f3n del integrador.","title":"Casos de Uso"},{"location":"markdown_strict/CF_funcional_ES/#contrafirmar","text":"Permite firmar a un usuario la firma de otro usuario. La contrafirma se puede realizar sobre: todas las firmas de un documento, las firmas todav\u00eda no contrafirmadas, las firmas de un firmante o determinadas firmas. <","title":"Contrafirmar"},{"location":"markdown_strict/CF_funcional_ES/#actores_2","text":"Usuario: Usuario que quiere realizar la contrafirma.","title":"Actores"},{"location":"markdown_strict/CF_funcional_ES/#casos-de-uso_2","text":"Configurar firma: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1 a la operaci\u00f3n de firma. Conf. Almac\u00e9n: Configuraci\u00f3n del almac\u00e9n del que se extraer\u00e1 el certificado de firma. Conf. Filtro: Configuraci\u00f3n de un filtro que restringir\u00e1 los certificados mediante los que se podr\u00e1 firmar. Se podr\u00e1 configurar que el certificado se seleccione directamente si es el \u00fanico que cumple ese filtro o que se muestre un di\u00e1logo de selecci\u00f3n para que el usuario tome la decisi\u00f3n de cu\u00e1l usar. Los filtros se basar\u00e1n en el uso de la RFC-2254 y los KeyUsage de los certificados y permitir\u00e1n filtrar por: Estructura del X509Principal del titular del certificado. Estructura del X509Principal del emisor del certificado. Utilidad declarada para el certificado (firma, autenticaci\u00f3n, envoltura de claves,\u2026). Conf. Pol\u00edtica: Configuraci\u00f3n de la pol\u00edtica de firma. Conf. Algoritmo: Configuraci\u00f3n del algoritmo de firma. Conf. Formato: Configuraci\u00f3n del formato de firma. Incluye el formato a utilizar y la configuraci\u00f3n espec\u00edfica que admita este (tipos de datos firmados, contexto de firma, versi\u00f3n del formato\u2026) Conf. Modo: Configuraci\u00f3n del modo de firma. Seleccionar firma: Es el proceso de selecci\u00f3n del documento de firma al que se le desea agregar las contrafirmas. Conf. Fichero firma: Configura el fichero con los datos de firma al que se le quiere agregar las contrafirmas. Conf. Datos firma: Configura los datos de firma a los que se quiere agregar las contrafirmas. Seleccionar certificado: Es el proceso de selecci\u00f3n del certificado con el que se va a firmar. Configurar alias: Establece el alias del certificado en el almac\u00e9n configurado. Seleccionar en di\u00e1logo de certificados: Muestra un di\u00e1logo para la selecci\u00f3n del certificado por parte del usuario. Contrafirmar: Ejecuta la operaci\u00f3n de contrafirma conforme a los par\u00e1metros configurados anteriormente. La operaci\u00f3n aplicar\u00e1 a una serie de nodos de firma. Cont. \u00c1rbol: Contrafirma todos los nodos. Cont. Hojas: Contrafirma los nodos hoja del \u00e1rbol. Cont. Nodos: Contrafirma una serie de nodos. Cont. Firmantes: Contrafirma todos los nodos de una serie de firmantes. Conf. Nodos: Configura los nodos/firmantes que se desean contrafirmar. Obtener firma: Se toma el resultado de la operaci\u00f3n de firma. Extraer firma: Extrae la firma generada. Guardar firma: Almacena en disco la firma generada. Resultado Error. En caso de producirse un error, la tarea Contrafirmar establecer\u00e1 el mensaje correspondiente y lo pondr\u00e1 a disposici\u00f3n del integrador.","title":"Casos de Uso"},{"location":"markdown_strict/CF_funcional_ES/#firma-masiva-de-hashes-procedimiento-deprecado","text":"Permite firmar una serie de hashes. <","title":"Firma masiva de hashes (Procedimiento deprecado)"},{"location":"markdown_strict/CF_funcional_ES/#actores_3","text":"Usuario: Usuario que quiere realizar la firma masiva de hashes.","title":"Actores"},{"location":"markdown_strict/CF_funcional_ES/#casos-de-uso_3","text":"Configurar firma: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1 a la operaci\u00f3n de firma. Conf. Almac\u00e9n: Configuraci\u00f3n del almac\u00e9n del que se extraer\u00e1 el certificado de firma. Conf. Filtro: Configuraci\u00f3n de un filtro que restringir\u00e1 los certificados mediante los que se podr\u00e1 firmar. Se podr\u00e1 configurar que el certificado se seleccione directamente si es el \u00fanico que cumple ese filtro o que se muestre un di\u00e1logo de selecci\u00f3n para que el usuario tome la decisi\u00f3n de cu\u00e1l usar. Los filtros se basar\u00e1n en el uso de la RFC-2254 y los KeyUsage de los certificados y permitir\u00e1n filtrar por: Estructura del X509Principal del titular del certificado. Estructura del X509Principal del emisor del certificado. Utilidad declarada para el certificado (firma, autenticaci\u00f3n, envoltura de claves,\u2026). Conf. Pol\u00edtica: Configuraci\u00f3n de la pol\u00edtica de firma. Conf. Algoritmo: Configuraci\u00f3n del algoritmo de firma. Conf. Formato: Configuraci\u00f3n del formato de firma. Incluye el formato a utilizar y la configuraci\u00f3n espec\u00edfica que admita este (tipos de datos firmados, contexto de firma, versi\u00f3n del formato\u2026). Los \u00fanicos formatos que soportan esta operaci\u00f3n son CMS, CAdES, XMLdSIG y XAdES. Conf. Modo: Configuraci\u00f3n del modo de firma. Seleccionar hashes: Operaci\u00f3n mediante la que se seleccionan todos los hashes que se desean firmar. Seleccionar certificado: Es el proceso de selecci\u00f3n del certificado con el que se va a firmar. Configurar alias: Establece el alias del certificado en el almac\u00e9n configurado. Seleccionar en di\u00e1logo de certificados: Muestra un di\u00e1logo para la selecci\u00f3n del certificado por parte del usuario. Firmar hashes: Ejecuta la operaci\u00f3n de firma sobre cada uno de los hashes configurados. Obtener firmas: Obtiene todas las firmas generadas a partir de los hashes introducidos. Resultado Error. En caso de producirse un error, la tarea Firmar hashes establecer\u00e1 el mensaje correspondiente y lo pondr\u00e1 a disposici\u00f3n del integrador.","title":"Casos de Uso"},{"location":"markdown_strict/CF_funcional_ES/#multifirma-masiva-de-ficheros","text":"Permite multifirmar los ficheros de un directorio. Esto es, permite configurar una operaci\u00f3n de firma o multifirma, establecer una configuraci\u00f3n de firma y aplicarlas sobre cada uno de los ficheros de un directorio o una selecci\u00f3n de los mismos. <","title":"Multifirma masiva de ficheros"},{"location":"markdown_strict/CF_funcional_ES/#actores_4","text":"Usuario: Usuario que quiere realizar la multifirma masiva de ficheros.","title":"Actores"},{"location":"markdown_strict/CF_funcional_ES/#casos-de-uso_4","text":"Configurar firma: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1 a la operaci\u00f3n de firma. Conf. Almac\u00e9n: Configuraci\u00f3n del almac\u00e9n del que se extraer\u00e1 el certificado de firma. Conf. Filtro: Configuraci\u00f3n de un filtro que restringir\u00e1 los certificados mediante los que se podr\u00e1 firmar. Se podr\u00e1 configurar que el certificado se seleccione directamente si es el \u00fanico que cumple ese filtro o que se muestre un di\u00e1logo de selecci\u00f3n para que el usuario tome la decisi\u00f3n de cu\u00e1l usar. Los filtros se basar\u00e1n en el uso de la RFC-2254 y los KeyUsage de los certificados y permitir\u00e1n filtrar por: Estructura del X509Principal del titular del certificado. Estructura del X509Principal del emisor del certificado. Utilidad declarada para el certificado (firma, autenticaci\u00f3n, envoltura de claves,\u2026). Conf. Pol\u00edtica: Configuraci\u00f3n de la pol\u00edtica de firma. Conf. Algoritmo: Configuraci\u00f3n del algoritmo de firma. Conf. Formato: Configuraci\u00f3n del formato de firma. Incluye el formato a utilizar y la configuraci\u00f3n espec\u00edfica que admita este (tipos de datos firmados, contexto de firma, versi\u00f3n del formato\u2026). Los \u00fanicos formatos que soportan esta operaci\u00f3n son CMS, CAdES, XMLdSIG y XAdES. Conf. Modo: Configuraci\u00f3n del modo de firma. Conf. Directorio salida: Configuraci\u00f3n del directorio en el que se almacenar\u00e1n las firmas generadas. Conf. Operaci\u00f3n: Configuraci\u00f3n de la operaci\u00f3n a realizar: firma, cofirma, contrafirma de todo el \u00e1rbol de firmas o contrafirma de los nodos hoja. Conf. Recursividad: Configuraci\u00f3n de la recursividad de proceso. Si se indica que sea recursivo, se firmar\u00e1n tambi\u00e9n los ficheros de los subdirectorios. Seleccionar directorio: Configuraci\u00f3n del directorio con los ficheros que se desean firmar. Seleccionar certificado: Es el proceso de selecci\u00f3n del certificado con el que se va a firmar. Configurar alias: Establece el alias del certificado en el almac\u00e9n configurado. Seleccionar en di\u00e1logo de certificados: Muestra un di\u00e1logo para la selecci\u00f3n del certificado por parte del usuario. Firmar directorio: Ejecuta la operaci\u00f3n de masiva sobre cada uno de los ficheros del directorio. Las firmas resultantes ir\u00e1n a parar al directorio de salida o al mismo directorio de entrada si no se configur\u00f3. El resultado de las firmas individuales se reflejar\u00e1 en un fichero de log en el directorio de salida de las firmas. Resultado Error. El proceso contin\u00faa hasta tratar todos los ficheros del directorio que sean objetivo de la operaci\u00f3n. En caso de producirse errores en operaciones individuales del proceso, se reflejar\u00e1n los mensajes correspondientes en el fichero de log generado.","title":"Casos de Uso"},{"location":"markdown_strict/CF_funcional_ES/#multifirma-masiva-programatica","text":"Permite firmar, cofirmar y contrafirmar datos, fichero y hashes con una misma configuraci\u00f3n de firma. Esta operaci\u00f3n permitir\u00e1 establecer una configuraci\u00f3n de firma \u00fanica y aplicarla en cada operaci\u00f3n individual. El integrador aplicar\u00e1 la operaci\u00f3n sobre cada objetivo de firma concreto, obteniendo directamente su resultado . Este proceso no se aplica a m\u00faltiples objetivos, el integrador debe ordenar expl\u00edcitamente cada operaci\u00f3n individual. Este modo de operaci\u00f3n est\u00e1 orientado a facilitar la integraci\u00f3n del cliente en sistemas de firma masiva de documentos. Por ejemplo, recorrer un listado de datos objetivo y aplicar la operaci\u00f3n sobre cada uno de ellos. <","title":"Multifirma masiva program\u00e1tica"},{"location":"markdown_strict/CF_funcional_ES/#actores_5","text":"Usuario: Usuario que quiere realizar la firma masiva de hashes.","title":"Actores"},{"location":"markdown_strict/CF_funcional_ES/#casos-de-uso_5","text":"Configurar firma: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1 a la operaci\u00f3n de firma. Conf. Almac\u00e9n: Configuraci\u00f3n del almac\u00e9n del que se extraer\u00e1 el certificado de firma. Conf. Filtro: Configuraci\u00f3n de un filtro que restringir\u00e1 los certificados mediante los que se podr\u00e1 firmar. Se podr\u00e1 configurar que el certificado se seleccione directamente si es el \u00fanico que cumple ese filtro o que se muestre un di\u00e1logo de selecci\u00f3n para que el usuario tome la decisi\u00f3n de cu\u00e1l usar. Los filtros se basar\u00e1n en el uso de la RFC-2254 y los KeyUsage de los certificados y permitir\u00e1n filtrar por: Estructura del X509Principal del titular del certificado. Estructura del X509Principal del emisor del certificado. Utilidad declarada para el certificado (firma, autenticaci\u00f3n, envoltura de claves,\u2026). Conf. Pol\u00edtica: Configuraci\u00f3n de la pol\u00edtica de firma. Conf. Algoritmo: Configuraci\u00f3n del algoritmo de firma. Conf. Formato: Configuraci\u00f3n del formato de firma. Incluye el formato a utilizar y la configuraci\u00f3n espec\u00edfica que admita este (tipos de datos firmados, contexto de firma, versi\u00f3n del formato\u2026). Los \u00fanicos formatos que soportan esta operaci\u00f3n son CMS, CAdES, XMLdSIG y XAdES. Conf. Modo: Configuraci\u00f3n del modo de firma. Seleccionar certificado: Es el proceso de selecci\u00f3n del certificado con el que se va a firmar. Configurar alias: Establece el alias del certificado en el almac\u00e9n configurado. Seleccionar en di\u00e1logo de certificados: Muestra un di\u00e1logo para la selecci\u00f3n del certificado por parte del usuario. Configurar operaci\u00f3n: Es el proceso por el que se configura el tipo de operaci\u00f3n que se debe realizar. Las operaciones permitidas ser\u00e1n: firma, cofirma, contrafirma de nodos hoja y contrafirma del \u00e1rbol de firma. Ejecutar operaci\u00f3n: Ejecuta la operaci\u00f3n configurada con los par\u00e1metros establecidos en los pasos anteriores. La operaci\u00f3n devuelve directamente el resultado, no siendo necesario recogerlo en un paso posterior. Resultado Error. En caso de producirse un error, la tarea Ejecutar operaci\u00f3n no generar\u00e1 la firma y establecer\u00e1 el mensaje correspondiente poni\u00e9ndolo a disposici\u00f3n del integrador.","title":"Casos de Uso"},{"location":"markdown_strict/CF_funcional_ES/#cifrado-simetrico","text":"Permite el cifrado de datos por medio de una clave sim\u00e9trica. Esto es, se podr\u00e1n descifrar los datos mediante esa misma clave. <","title":"Cifrado sim\u00e9trico"},{"location":"markdown_strict/CF_funcional_ES/#actores_6","text":"Usuario: Usuario que quiere realizar el cifrado.","title":"Actores"},{"location":"markdown_strict/CF_funcional_ES/#casos-de-uso_6","text":"Configurar cifrado: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1n a la operaci\u00f3n de cifrado. Conf. Modo clave: Configuraci\u00f3n del origen de la clave de cifrado (autogenerada, insertada por el usuario, mediante contrase\u00f1a o desde almac\u00e9n). Conf. Algoritmo: Configuraci\u00f3n del algoritmo de cifrado. Conf. Clave/Contrase\u00f1a: Configuraci\u00f3n de la clave o contrase\u00f1a de cifrado. Conf. Almac\u00e9n cifrado: Configuraci\u00f3n del almac\u00e9n para extraer claves de cifrado. Seleccionar documento: Es el proceso en el que se selecciona el elemento que se desea cifrar. Por defecto, se solicita seleccionar un fichero. Configurar fichero: Establece un fichero a cifrar. Configurar datos: Establece los datos a cifrar. Cifrar: Ejecuta el cifrado conforme a los par\u00e1metros configurados anteriormente. Obtener cifrado: Se toma el resultado de la operaci\u00f3n de cifrado. Extraer cifrado: Recupera los datos cifrados. Guardar cifrado: Almacena en disco los datos cifrados obtenidos. Resultado Error. En caso de error, devuelve la cadena de texto asociada al error encontrado.","title":"Casos de Uso"},{"location":"markdown_strict/CF_funcional_ES/#descifrado-simetrico","text":"Permite el descifrado sim\u00e9trico de datos especificando la clave de cifrado. <","title":"Descifrado sim\u00e9trico"},{"location":"markdown_strict/CF_funcional_ES/#actores_7","text":"Usuario: Usuario que quiere descifrar los datos.","title":"Actores"},{"location":"markdown_strict/CF_funcional_ES/#casos-de-uso_7","text":"Configurar descifrado: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1n a la operaci\u00f3n de descifrado. Conf. Modo clave: Configuraci\u00f3n del origen de la clave para el descifrado (insertada por el usuario, mediante contrase\u00f1a o desde almac\u00e9n). Conf. Algoritmo: Configuraci\u00f3n del algoritmo de cifrado. Conf. Clave/Contrase\u00f1a: Configuraci\u00f3n de la clave o contrase\u00f1a de cifrado. Conf. Almac\u00e9n cifrado: Configuraci\u00f3n del almac\u00e9n para la carga de claves de cifrado. Seleccionar cifrado: Es el proceso en el que se selecciona el documento cifrado que se desea descifrar. Por defecto, se solicita seleccionar un fichero. Configurar fichero: Establece la ruta del fichero cifrado. Configurar datos: Establece los datos cifrados. Descifrar: Ejecuta la operaci\u00f3n de descifrado conforme a los par\u00e1metros configurados. Obtener datos: Se toma el resultado de la operaci\u00f3n de cifrado. Extraer datos: Recupera los datos descifrados. Guardar datos: Almacena en disco los datos descifrados obtenidos. Resultado Error. En caso de error, devuelve la cadena de texto asociada al error encontrado.","title":"Casos de Uso"},{"location":"markdown_strict/CF_funcional_ES/#ensobrado-digital","text":"Permite generar un paquete de datos cifrados e indicar quienes podr\u00e1n descifrarlo. Se utilizar\u00e1 una estructura CMS como soporte de los datos resultantes. <","title":"Ensobrado digital"},{"location":"markdown_strict/CF_funcional_ES/#actores_8","text":"Usuario: Usuario que quiere generar el sobre digital.","title":"Actores"},{"location":"markdown_strict/CF_funcional_ES/#casos-de-uso_8","text":"Configurar sobre: Es el proceso en el que se establecen los distintos par\u00e1metros que afectar\u00e1n a la generaci\u00f3n del sobre digital. Conf. tipo sobre: Configuraci\u00f3n del tipo de sobre que se desea generar: Sobre simple (EnvelopedData), sobre firmado (SignedAndEnvelopedData) o sobre autenticado (AuthenticatedAndEnvelopedData). Seleccionar documento: Es el proceso en el que se selecciona el elemento que se desea ensobrar. Por defecto, se solicita seleccionar un fichero. Configurar fichero: Establece un fichero a ensobrar. Configurar datos: Establece los datos a ensobrar. Configurar destinatarios: Configura quienes son los destinatarios del sobre digital a partir de sus certificados con clave p\u00fablica. Estos certificados pueden tomarse de disco, de un almac\u00e9n, de un servidor LDAP o configurarse directamente. Configurar remitente: Configura el remitente del sobre a partir de su certificado en almac\u00e9n. Ensobrar: Genera el sobre digital conforme a los par\u00e1metros configurados anteriormente. Obtener sobre: Se toma el resultado de la operaci\u00f3n de ensobrado. Recuperar sobre: Recupera el sobre digital. Guardar sobre: Almacena en disco el sobre digital. Resultado Error. En caso de error, devuelve la cadena de texto asociada al error encontrado.","title":"Casos de Uso"},{"location":"markdown_strict/CF_funcional_ES/#abrir-sobre-digital","text":"Permite al receptor de un sobre digital extraer su contenido utilizando su propia clave privada. <","title":"Abrir sobre digital"},{"location":"markdown_strict/CF_funcional_ES/#actores_9","text":"Usuario: Destinatario del sobre digital.","title":"Actores"},{"location":"markdown_strict/CF_funcional_ES/#casos-de-uso_9","text":"Seleccionar sobre: Es el proceso en el que se selecciona el sobre digital del que se desean extraer los datos. Por defecto, se solicita seleccionar un fichero. Configurar fichero: Establece la ruta del sobre digital. Configurar datos: Establece el sobre digital. Seleccionar destinatario: Es el proceso de selecci\u00f3n del certificado con el que se va a descifrar el sobre digital. Configurar alias: Establece el alias del certificado en el almac\u00e9n configurado. Seleccionar en di\u00e1logo de certificados: Muestra un di\u00e1logo para la selecci\u00f3n del certificado por parte del usuario. Desensobrar: Ejecuta la operaci\u00f3n de extracci\u00f3n de datos del sobre digital. Obtener datos: Se toma el resultado de la operaci\u00f3n de desensobrado. Extraer datos: Recupera los datos extra\u00eddos del sobre. Guardar datos: Almacena en disco los datos extra\u00eddos del sobre. Resultado Error. En caso de error, devuelve la cadena de texto asociada al error encontrado.","title":"Casos de Uso"},{"location":"markdown_strict/CF_funcional_ES/#algoritmos-de-cifrado","text":"Los algoritmos sim\u00e9tricos utilizan la misma clave tanto para cifrar como para descifrar, por lo que se recomienda una clave segura. Se incorporar\u00e1 un mecanismo de generaci\u00f3n de claves seguras. AES : Advanced Encryption Standard. Sistema de encriptaci\u00f3n adoptado por el gobierno de Estados Unidos (FIPS-PUB 197) y fue propuesto por el NIST. Cifrado sim\u00e9trico en bloques de 128 bits y con claves de 128, 192 o 256 bits. Este est\u00e1ndar contempla el algoritmo para 10, 12 o 14 vueltas aunque est\u00e1 previsto aumentarlas debido al \u00e9xito obtenido con criptoan\u00e1lisis que encuentra coincidencia con 277 bloques bajo 256 claves y requiere sobre 2224 pasos para completarse. ARCFOUR : Es el sistema de cifrado de flujo m\u00e1s utilizado y se usa en los protocolos m\u00e1s populares como Transport Layer Security (TLS/SSL) y Wired Equivalent Privacy (WEP) Este algoritmo fue excluido de los est\u00e1ndares de alta seguridad debido a su sistema de criptograf\u00eda muy inseguro. El factor principal de su popularidad es su velocidad y simplicidad, as\u00ed como la implementaci\u00f3n tanto en software como en hardware es sencilla de desarrollar. El algoritmo es simple, ya que consiste en la combinaci\u00f3n de 2 algoritmos 1-KSA y 2 PRGA BLOWFISH : Es un codificador de bloques sim\u00e9tricos, dise\u00f1ado por Bruce Schneier en 1993. Usa bloques de 64 bits y claves que van desde los 32 bits hasta los 448 bits. Es un codificador de 16 rondas Feistel y usa llaves que dependen de las Cajas-S. Este algoritmo de cifrado correr\u00e1 521 veces para generar todas las subclaves, con lo que cerca de 4Kb de datos son procesados. Data Encryption Standard (DES) : Es un algoritmo prototipado del cifrado por bloques, un algoritmo que toma un texto de una longitud fija de bits y lo transforma mediante una serie de operaciones b\u00e1sicas en otro texto cifrado de la misma longitud. DES utiliza tambi\u00e9n una clave criptogr\u00e1fica para modificar la transformaci\u00f3n, de modo que le descifrado s\u00f3lo puede ser realizado por aquellos que conozcan la clave concreta utilizada en el cifrado. El cifrado se realiza con una clave de 56 bits, la cual es corta, y debido a algunos elementos de dise\u00f1o clasificados propici\u00f3 las sospechas de la existencia de una puerta trasera para la National Security Agency. Triple DES (3DES) : Basado en DES (Data Encryption Standard). Cifrado en bloques de 64 bits con clave de 168 bits (192 incluyendo bits de paridad). Actualmente ha sido sustituido por AES, pero se sigue utilizando ampliamente. Los \u00faltimos criptoan\u00e1lisis revelan que son necesarias 2108 operaciones para romper una clave TripleDES, pero si se concentra en las 3 claves DES, basta con 290 operaciones. RC2 : Es un cifrado de bloques dise\u00f1ado por Ron Rivest en 1987. El desarrollo de RC2 fue patrocinado por Lotus el cual fue exportado como parte de su software Lotus Notes. Este cifrado cuyo tama\u00f1o de clave es de 40 bits fue aprobado para exportarlo en 1989 bajo la regulaci\u00f3n de los EEUU. RC2 es un cifrado de bloques de 64 bits con una clave de tama\u00f1o variable. Consta de 18 ciclos, 16 de un tipo MIXING y dos ciclos de otro tipo MASHING. Algoritmos PBE (Password Basic Encryptation) : Algoritmos que generan una clave secreta a partir de una contrase\u00f1a introducida por el usuario. Estas t\u00e9cnicas plantean problemas debido a que los requerimientos de usuario difieren de los requerimientos de seguridad del sistema, ya que el usuario desea una frase f\u00e1cil de recordar, sin embargo una clave segura actualmente requiere al menos 128 bits aleatorios. Adem\u00e1s, los sistemas de encriptaci\u00f3n basados en contrase\u00f1as son normalmente utilizados en aplicaciones donde un atacante puede repetidamente intentar adivinar la contrase\u00f1a, con lo que se pueden utilizar m\u00e9todos de fuerza bruta para obtener las contrase\u00f1as. Existen varios algoritmos que utilizan este sistema, como: PBEWithSHA1AndRC2_40 : Este modo encripta con 40-bits RC2 PBEWithMD5AndDES : Este algoritmo combina los beneficios de una lenta e insegura encriptaci\u00f3n de 56 bits con una insegura funci\u00f3n hash. No es recomendable su uso. Es definido como \u201cPKCS #5\u201d PBEWithSHA1AndDESede: Este algoritmo utiliza una encriptaci\u00f3n triple DES y una funci\u00f3n de hash sha1.","title":"Algoritmos de cifrado"},{"location":"markdown_strict/CF_funcional_ES/#sobres-digitales","text":"El est\u00e1ndar CMS permite define una arquitectura capaz de encapsular distintos tipos de contenido como datos planos, datos firmados, datos cifrados, hashes\u2026 Las estructuras definidas por CMS nos permiten construir sobres digitales. Nuestro objetivo al usar sobres digitales ser\u00e1 poder distribuir documentos de forma segura y privada a uno o varios destinatarios. La estructura general del sobre ser\u00e1: < Donde ContentType ser\u00e1 una cadena asociada ASN.1 que define el tipo del contenido y Content ser\u00e1 los datos contenidos en el CMS. Estos datos los dividiremos en dos modos de implementaci\u00f3n de CMS. Debemos recordar que los tipos CMS son anidables y que, por ejemplo, el contenido a encriptar puede ser un contenido previamente firmado y viceversa.","title":"Sobres digitales"},{"location":"markdown_strict/CF_funcional_ES/#cms-cifrado","text":"Es un sobre digital simple que contiene el elemento cifrado y en el cual no se incluye ninguna informaci\u00f3n sobre la clave de cifrado. Esto hace que la clave de cifrado deba ser transmitida de forma ajena al envoltorio CMS. La estructura de este CMS es la siguiente: < Donde: CMS versi\u00f3n ser\u00e1 0 si no existen atributos asociados y 2 si existen. EncryptedContentInfo contiene la informaci\u00f3n encriptada. ContentType: Define el tipo del contenido definida seg\u00fan ASN.1 ContentEncryptionAlgorithm: Indica el algoritmo utilizado para encriptar el contenido. EncryptedContent: Contenido cifrado por el algoritmo anteriormente indicado y la clave suministrada a los receptores. Attributes es un conjunto de atributos no encriptados que definen algunos par\u00e1metros como el algoritmo utilizado.","title":"CMS cifrado"},{"location":"markdown_strict/CF_funcional_ES/#cms-envuelto","text":"Este tipo de sobre digital permite cifrar un contenido y distribuirlo a varios receptores e incluye la clave de cifrado. La estructura es la siguiente: < Donde encontramos los siguientes elementos: CMS version , indica la versi\u00f3n de CMS y estar\u00e1 definido seg\u00fan los par\u00e1metros OriginatorInfo, RecipientInfo y Attributes (definidos en RFC3852). OriginatorInfo . Incluye opcionalmente informaci\u00f3n sobre el creador del mensaje. Puede incluir una lista de certificados, con intenci\u00f3n de crear un camino de certificaci\u00f3n hasta el root, o una colecci\u00f3n de CRLs. RecipientInfo . Incluye la informaci\u00f3n necesaria para que los destinatarios puedan descifrar el mensaje. Aunque existen varios tipos, el m\u00e1s \u00fatil para nuestro prop\u00f3sito es el que transporta la clave de cifrado y cuyos campos vienen definidos a continuaci\u00f3n: CMS version. Define la versi\u00f3n del campo en funci\u00f3n del tipo de identificador elegido. RecipientIdentifier. Puede incluir el emisor y n\u00famero de serie del certificado (versi\u00f3n 0) o un identificador del certificado (versi\u00f3n 2). KeyEncryptionAlgorithm. Define el algoritmo utilizado para cifrar la clave. EncryptedKey. Clave usada para cifrar el contenido del documento y cifrada a su vez por el algoritmo especificado anteriormente. EncryptedContentInfo. Se compone de: ContentType: Define el tipo del contenido definido seg\u00fan ASN.1 ContentEncryptionAlgorithm: Indica el algoritmo utilizado para cifrar el contenido. EncryptedContent: Contenido cifrado por el algoritmo anteriormente indicado y la clave suministrada a los receptores.","title":"CMS envuelto"},{"location":"markdown_strict/CF_funcional_ES/#pkcs7-firmado-y-envuelto","text":"Este tipo de sobre no est\u00e1 definido dentro del est\u00e1ndar CMS sino de su predecesor, PKCS#7. Los PKCS#7 firmados y envueltos van firmados por quien genera el sobre y permiten cifrar un contenido y distribuirlo a varios receptores. La clave de cifrado del contenido va incrustada en el propio sobre. La estructura es la siguiente: Donde encontramos los siguientes elementos: Version , indica la versi\u00f3n de la sintaxis con la que se ha construido el objeto. RecipientInfo . Incluye la informaci\u00f3n necesaria para que los destinatarios puedan descifrar el mensaje. Aunque existen varios tipos, el m\u00e1s \u00fatil para nuestro prop\u00f3sito es el que transporta la clave de cifrado y cuyos campos vienen definidos a continuaci\u00f3n: Version. Indica la versi\u00f3n de la sintaxis con la que se ha construido el objeto. IssuerAndSerialNumber. Puede incluir el emisor y n\u00famero de serie del certificado. KeyEncryptionAlgorithm. Define el algoritmo utilizado para cifrar la clave. EncryptedKey. Clave usada para cifrar el contenido del documento y cifrada a su vez por el algoritmo especificado anteriormente. EncryptedContentInfo. Se compone de: ContentType: Define el tipo del contenido definido seg\u00fan ASN.1 ContentEncryptionAlgorithm: Indica el algoritmo utilizado para cifrar el contenido. EncryptedContent: Contenido cifrado por el algoritmo anteriormente indicado y la clave suministrada a los receptores. SignerInfos. Listado de firmas del contenido.","title":"PKCS#7 firmado y envuelto"},{"location":"markdown_strict/CF_funcional_ES/#cms-autenticado-y-envuelto","text":"Este tipo de sobre viene definido en la RFC 5083, que actualiza el est\u00e1ndar CMS (RFC 3852). Este tipo de contenido combina los m\u00e9todos de autenticaci\u00f3n y encriptado de datos definidos en la RFC 3852. La estructura es la siguiente: Donde encontramos los siguientes elementos: Version , indica la versi\u00f3n de la sintaxis con la que se ha construido el objeto. OriginatorInfo . Incluye informaci\u00f3n sobre el creador del mensaje. Puede incluir una lista de certificados, con intenci\u00f3n de crear un camino de certificaci\u00f3n hasta el root, o una colecci\u00f3n de CRLs. RecipientInfo . Incluye la informaci\u00f3n necesaria para que los destinatarios puedan descifrar el mensaje. Aunque existen varios tipos, el m\u00e1s \u00fatil para nuestro prop\u00f3sito es el que transporta la clave de cifrado y cuyos campos vienen definidos a continuaci\u00f3n: Version. Indica la versi\u00f3n de la sintaxis con la que se ha construido el objeto. IssuerAndSerialNumber. Puede incluir el emisor y n\u00famero de serie del certificado. KeyEncryptionAlgorithm. Define el algoritmo utilizado para cifrar la clave. EncryptedKey. Clave usada para cifrar el contenido del documento y cifrada a su vez por el algoritmo especificado anteriormente. EncryptedContentInfo. Se compone de: ContentType: Define el tipo del contenido definido seg\u00fan ASN.1 ContentEncryptionAlgorithm: Indica el algoritmo utilizado para cifrar el contenido. EncryptedContent: Contenido cifrado por el algoritmo anteriormente indicado y la clave suministrada a los receptores. MenssageAuthenticationCode. C\u00f3digo de autenticaci\u00f3n del contenido.","title":"CMS Autenticado y envuelto"},{"location":"markdown_strict/CF_guia-incidencias/","text":"< < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported . \u00cdndice 1 Introducci\u00f3n [3](#introducci\u00f3n) 2 Objetivos [4](#objetivos) 3 Incidencias conocidas del n\u00facleo del cliente @firma [5](#incidencias-conocidas-del-n\u00facleo-del-cliente-firma) 3.1 Incidencias generales [5](#incidencias-generales) 3.2 Despliegue del Cliente [16](#despliegue-del-cliente) 3.3 Firmas Generales [20](#firmas-generales) 3.4 Incidencias espec\u00edficas de la plataforma Windows [21](#incidencias-espec\u00edficas-de-la-plataforma-windows) 3.5 Incidencias espec\u00edficas de la plataforma Apple OS X [23](#incidencias-espec\u00edficas-de-la-plataforma-apple-os-x) 3.6 Incidencias espec\u00edficas de las firmas PDF [26](#incidencias-espec\u00edficas-de-las-firmas-pdf) 3.7 Incidencias espec\u00edficas de las firmas XML [26](#incidencias-espec\u00edficas-de-las-firmas-xml) 4 Glosario de t\u00e9rminos [28](#glosario-de-t\u00e9rminos) Creative Commons [31](#Licencia_Creative_Commons) Introducci\u00f3n El Cliente de Firma es una herramienta de Firma Electr\u00f3nica que funciona en forma de Applet de Java integrado en una p\u00e1gina Web mediante JavaScript. El Cliente hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados ( keystore ) del navegador web ( Internet Explorer, Mozilla, Firefox ) o el sistema operativo as\u00ed como de los que est\u00e9n en dispositivos (tarjetas inteligentes , dispositivos USB ) configurados en el mismo (el caso de los DNI-e). El Cliente de Firma, como su nombre indica, es una aplicaci\u00f3n que se ejecuta en cliente (en el ordenador del usuario, no en el servidor Web). Esto es as\u00ed para evitar que la clave privada asociada a un certificado tenga que \u201csalir\u201d del contenedor del usuario (tarjeta, dispositivo USB o navegador) ubicado en su PC. De hecho, nunca llega a salir del navegador, el Cliente le env\u00eda los datos a firmar y \u00e9ste los devuelve firmados. El Cliente de Firma contiene las interfaces y componentes web necesarios para la realizaci\u00f3n de los siguientes procesos (adem\u00e1s de otros auxiliares como c\u00e1lculos de hash, lectura de ficheros, etc\u2026): Firma de datos y ficheros. Multifirma masiva de datos y ficheros. Cofirma (CoSignature) Multifirma al mismo nivel. Contrafirma (CounterSignature) Multifirma en cascada. Como complemento al cliente de firma, se encuentra un cliente de cifrado que nos permite realizar las funciones de encriptaci\u00f3n y desencriptaci\u00f3n de datos atendiendo a diferentes algoritmos y configuraciones. Adem\u00e1s permite la generaci\u00f3n de sobres digitales. Objetivos El objetivo del presente documento es enumerar las dificultades t\u00edpicas que pueden encontrar los integradores o sus usuarios durante la instalaci\u00f3n, despliegue, integraci\u00f3n o uso del Cliente @firma, as\u00ed como las v\u00edas de resoluci\u00f3n o paliaci\u00f3n de estas. Incidencias conocidas del n\u00facleo del cliente @firma Incidencias generales El navegador no carga correctamente los Applets de Java pese a tener Java instalado Los navegadores actuales, por motivos de seguridad, requieren acciones adicionales de configuraci\u00f3n para habilitar los Applets de Java. Siga las instrucciones del fabricante de su navegador Web y sistema operativo para habilitar los Applets de Java en su navegador, y compruebe adicionalmente que ha cumplido los requisitos que se detallan en la p\u00e1gina de Oracle Java: http://java.com/en/download/help/enable_browser.xml Es igualmente conveniente comprobar, antes de intentar cargar el Cliente @firma, que el Applet de prueba de Oracle Java se carga adecuadamente, para distinguir problemas de configuraci\u00f3n con problemas propios del Applet o MiniApplet Cliente @firma: https://www.java.com/verify/ No es posible realizar firmas electr\u00f3nicas con cierto hardware criptogr\u00e1fico (tarjetas inteligentes y dispositivos USB) de CamerFirma. El proceso siempre termina en error Algunas versiones antiguas de controladores CSP y PKCS#11 para hardware de CamerFirma contienen errores que provocan errores al realizar firmas electr\u00f3nicas. Para corregirlo es necesario actualizar los controladores por la \u00faltima versi\u00f3n, siguiendo el proceso descrito a continuaci\u00f3n (para sistemas Windows, consulte con su suministrador de hardware y software criptogr\u00e1fico para otros sistemas operativos): Desinstale el programa \u201cCARD MANAGER ADMIN 1.6.xxx\u201c desde \u201cAgregar o quitar programas\u201c o \u201cprogramas y caracter\u00edsticas\u201c. Tras la desinstalaci\u00f3n, reinicie el equipo. En caso de no tener el instalado el programa \u201cCARD MANAGER\u201c pase directamente al paso 3. < < Descargue los controladores m\u00e1s actuales, para ello acceda a la p\u00e1gina Web de CamerFirma (http://www.camerfirma.es), entre en el \u00c1rea de Usuario / \u00c1rea de Descargas y ah\u00ed seleccione el Kit De Descargas. Pulse en \u201cDescargar\u201d, seleccionando entonces el \u201cKit De CamerFirma\u201d correspondiente a su modelo \u201cBit4Id\u201d y ejecute el programa de instalaci\u00f3n descargado. Una vez finalizada la instalaci\u00f3n, reinicie el equipo. < < < < < Acceda a la carpeta c:\\Windows\\System32 y, si existen, elimine estos tres ficheros (puede requerir permisos de administrador para completar este punto): Sysgillo.cpl Sysgillocpsetup Sysgillocsp.dll Una vez completados estos tres pasos tendr\u00e1 en su equipo la \u00faltima versi\u00f3n de los controladores, que est\u00e1n libres de errores y permiten realizar firmas electr\u00f3nicas con @firma. En ciertas instalaciones de versiones compatibles del Entorno de Ejecuci\u00f3n de Java (JRE) el Cliente no funciona adecuadamente Una de las posibles causas de que el Cliente no funcione en instalaciones del JRE (usando versiones y entornos declarados como compatibles) es que otra aplicaci\u00f3n ejecutada previamente haya corrompido el entorno de ejecuci\u00f3n de Java instalando incorrectamente bibliotecas como extensiones. El Cliente @firma puede no funcionar cuando alguna de las bibliotecas que usa han sido instaladas como extensiones del JRE. Para restaurar el funcionamiento normal del JRE debe seguir los siguientes pasos: Localizar el directorio de extensiones de su entorno de ejecuci\u00f3n de Java La opci\u00f3n m\u00e1s com\u00fan es el directorio lib/ext dentro de la carpeta de instalaci\u00f3n del JRE Debe tambi\u00e9n revisar las carpetas de extensiones comunes: /usr/jdk/packages/lib/ext en Sun Solaris y OpenSolaris /usr/java/packages/lib/ext en Linux %SystemRoot%\\Sun\\Java\\lib\\ext en Microsoft Windows Eliminar las siguientes bibliotecas: BouncyCastle bcprov*.jar bcmail*.jar bctsp*.jar bcpq*.jar JXAdES iText iText*.jar Apache Commons Apache Oro JMIMEMagic Notificar al proveedor de la aplicaci\u00f3n que instal\u00f3 inapropiadamente bibliotecas como extensiones para que corrija este comportamiento en sus aplicativos. Puede encontrar una peque\u00f1a gu\u00eda sobre el uso e instalaci\u00f3n de extensiones al entorno de ejecuci\u00f3n de Java en: http://download.oracle.com/javase/tutorial/ext/basics/install.html Cuando utilizo varias tarjetas inteligentes de firma electr\u00f3nica y/o varios lectores de tarjetas inteligentes a veces no se muestran todos los certificados. El Cliente @firma inicializa durante la primera operaci\u00f3n criptogr\u00e1fica las tarjetas inteligentes encontradas en el sistema, y supone que no va a variar durante toda la ejecuci\u00f3n del programa. El insertar o extraer tarjetas durante la ejecuci\u00f3n del programa puede ocasionar fallos ocasionales. No inserte o extraiga tarjetas mientras el Cliente @firma est\u00e9 en ejecuci\u00f3n. Adicionalmente, es conveniente tener insertada \u00fanicamente la tarjeta que desea usar para realizar las operaciones de firma. Si dos tarjetas del mismo tipo (que usen el mismo controlador PKCS#11) est\u00e1n insertadas, el Cliente @firma utilizar\u00e1 \u00fanicamente la insertada en el primer lector encontrado en el sistema. El conectar y desconectar lectores de tarjetas, o cambiarlos de puerto USB, puede ocasionar fallos ocasionales. No conecte o desconecte lectores de tarjetas inteligentes mientras el Cliente @firma est\u00e9 en ejecuci\u00f3n. Si es absolutamente indispensable realizar inserciones o extracciones de tarjetas durante la ejecuci\u00f3n del Cliente @firma, reintente la operaci\u00f3n si esta fallase para permitir al Cliente @firma reconfigurarse. Cuando se recuperan desde Java ficheros XML en formato Base64 como resultado de operaciones de firma la codificaci\u00f3n de caracteres se corrompe. Durante la creaci\u00f3n de un String de Java a partir de un binario obtenido a su vez de la decodificaci\u00f3n de un Base64 se pueden pervertir los caracteres especiales de los ficheros XML si se indica una codificaci\u00f3n err\u00f3nea en el constructor de la clase String . La soluci\u00f3n m\u00e1s r\u00e1pida es no indicar codificaci\u00f3n y confiar en las capacidades de Java de auto-detecci\u00f3n de formato de caracteres. Si esta auto-detecci\u00f3n de Java sigue proporcionando resultados incorrectos siempre puede obtener los XML directamente como texto en vez de en Base64 usando el m\u00e9todo getSignatureText() en vez de getSignatureBase64Encoded(). En ciertas ocasiones, usando el Cliente en Mozilla / Firefox con DNIe (DNI Electr\u00f3nico) el cliente se queda bloqueado y no muestra el di\u00e1logo de selecci\u00f3n de certificados, desbloque\u00e1ndose si retiro el DNIe del lector Ciertas versiones del controlador PKCS#11 del DNIe no admiten que se establezcan varias sesiones de forma simult\u00e1nea, y si por cualquier raz\u00f3n (sesi\u00f3n SSL, etc.) el propio navegador Web Mozilla / Firefox tiene ya establecida una comunicaci\u00f3n con el DNIe en el momento en el que el Cliente @firma tambi\u00e9n lo necesita, este \u00faltimo se queda bloqueado esperando a que en navegador Mozilla / Firefox cierre su sesi\u00f3n. Para evitar estos problemas, instale la \u00faltima versi\u00f3n de los controladores de DNIe OpenDNIe disponibles en http://opendnie.cenatic.es/ , que corrigen en cierta medida estos problemas. Si no desea o no puede actualizar los controladores, es necesario cerrar las sesiones activas contra el DNIe para que el Applet @firma pueda abrir una propia. El cierre de la sesi\u00f3n contra el DNIe por parte de Mozilla / Firefox puede tardar varios minutos si el usuario no interviene, por lo que conviene forzar manualmente este cierre: Extraer el DNIe del lector y volverlo a insertar justo en el momento en el que se solicita la contrase\u00f1a del Repositorio Central de certificados de Mozilla Firefox (antes de introducirla). Es posible que Mozilla / Firefox reabra la sesi\u00f3n en la reinserci\u00f3n (adelant\u00e1ndose al Cliente @firma), por lo que quiz\u00e1s necesite repetir la operaci\u00f3n. Podemos indicar a Mozilla / Firefox que cierre la sesi\u00f3n pulsando el bot\u00f3n \u201cLog out\u201d teniendo el dispositivo \u201cDNIe PKCS#11 Module\u201d seleccionado en la ventana \u201cDispositivos de Seguridad\u201d del men\u00fa Opciones de Mozilla Firefox. Al igual que en el m\u00e9todo anterior, a veces es necesario repetir la operaci\u00f3n varias veces, ya que Mozilla / Firefox reabre autom\u00e1ticamente la comunicaci\u00f3n con el DNIe sin dar tiempo al Cliente @firma a utilizarlo. En otras ocasiones, el bot\u00f3n aparece deshabilitado aunque Mozilla / Firefox tenga una sesi\u00f3n abierta contra el dispositivo, con lo que no es posible aplicar este m\u00e9todo. < Este problema se da predominantemente en Linux, Solaris y Mac OS X. No se ha detectado en ning\u00fan caso en ninguna versi\u00f3n de Windows. Una soluci\u00f3n alternativa en sistemas basados en UNIX (Linux, Solaris, Mac OS X) es modificar la configuraci\u00f3n de OpenSC (producto en el que se basa el controlador PKCS#11 del DNIe en estas plataformas indicando que nunca se debe bloquear el acceso a las tarjetas inteligentes. Para realizar esta indicaci\u00f3n debe modificar el archivo de configuraci\u00f3n de OpenSC, normalmente situado en /etc/opensc/opensc.conf y asegurarse de que contiene una l\u00ednea descomentada con la opci\u00f3n lock_login = false; : # By default, the OpenSC PKCS#11 module will lock your card # once you authenticate to the card via C_Login. # This is to prevent other users or other applications # from connecting to the card and perform crypto operations # (which may be possible because you have already authenticated # with the card). Thus this setting is very secure. # # This behavior is a known violation of PKCS#11 specification, # and is forced due to limitation of the OpenSC framework. # # However now once one application has started using your # card with C_Login, no other application can use it, until # the first is done and calls C_Logout or C_Finalize. # In the case of many PKCS#11 application this does not happen # until you exit the application. # # Thus it is impossible to use several smart card aware # applications at the same time, e.g. you cannot run both # Firefox and Thunderbird at the same time, if both are # configured to use your smart card. # # Default: true lock_login = false; Dado que este cambio puede tener implicaciones de seguridad con otras tarjetas inteligentes (la seguridad del DNIe no se ve comprometida por \u00e9l, dado que implementa medidas adicionales de protecci\u00f3n, como la implementaci\u00f3n de la normativa CWA-14890), realice \u00fanicamente estas modificaciones si est\u00e1 completamente seguro de sus implicaciones. En ciertas distribuciones de Linux (como Guadalinex v6) el cambio no tienen ning\u00fan efecto sobre los bloqueos con DNIe, por lo que no solucionar\u00e1 el problema). En algunas ocasiones, se ha detectado que este cambio en la configuraci\u00f3n de OpenSC afecta a la comunicaci\u00f3n con la tarjeta inteligente, provocando que el PIN de la tarjeta llegue corrupto. Aseg\u00farese de introducir correctamente el PIN de su tarjeta y, en caso de que vuelva a solicitarse, cancele la operaci\u00f3n y deshaga el cambio en la configuraci\u00f3n para evitar que repetidos intentos bloqueen su DNIe. La Web donde est\u00e1 deplegado el Cliente solicita certificado cliente, y aunque este funciona correctamente en Internet Explorer y otros navegadores, no ocurre lo mismo con Mozilla / Firefox Consulte el apartado \u201cDespliegue del cliente en servidores Web que requieren identificaci\u00f3n de los usuarios mediante certificado cliente\u201d del manual del integrador para m\u00e1s informaci\u00f3n de c\u00f3mo resolver este problema de configuraci\u00f3n de Mozilla / Firefox. El Cliente deja de funcionar tras ejecutar la Aplicaci\u00f3n Web de firma de la Ventanilla \u00danica de la Seguridad Social El aplicativo de Ventanilla \u00danica de la Seguridad Social hace uso de bibliotecas Java modificadas que son incompatibles con el Cliente @firma. Problema en la codificaci\u00f3n a Base64 de ficheros grandes En determinados entornos de usuario, existe un problema en la codificaci\u00f3n de ficheros a Base 64 que lleva al cierre abrupto de la m\u00e1quina virtual de Java y el subsiguiente error en la ejecuci\u00f3n del propio cliente. Este problema surge al utilizar los siguientes m\u00e9todos del cliente para la conversi\u00f3n de ficheros grandes a base 64: getFileBase64Encoded(boolean showProgress); getFileBase64Encoded(boolean showProgress, String strUri); getSignatureBase64Encoded(); En la incidencia \u201c No es posible realizar firmas de m\u00e1s de 4MB \u201d podr\u00e1 encontrar alternativas que pueden evitar que le surja este problema. No es posible realizar firmas de m\u00e1s de 4MB Al ejecutar el Cliente @firma en un entorno con Java 6u10 o superior y el plugin de nueva generaci\u00f3n activado (configuraci\u00f3n por defecto), nos encontramos con que no es posible convertir ficheros de datos mayores de 4MB a cadenas Base64. Esta operaci\u00f3n es necesaria para posteriormente adjuntar los datos firmados (o la firma impl\u00edcita generada) al formulario Web a trav\u00e9s del cual se enviar\u00e1 la informaci\u00f3n al servidor. Esta limitaci\u00f3n tambi\u00e9n puede afectar a la generaci\u00f3n de firmas XML impl\u00edcitas de ficheros mayores de 4MB. Este problema no tiene soluci\u00f3n actualmente pero es posible realizar algunas pr\u00e1cticas con las que es posible evitarlo en caso de que el propio fichero de datos no sea mayor de este tama\u00f1o. Eval\u00fae si es necesario que su sistema firme los ficheros adjuntos a una transacci\u00f3n o si basta con firmar la propia transacci\u00f3n. Esto podr\u00eda hacerse mediante un XML en el que se almacenen los datos de la transacci\u00f3n (identificador, los datos proporcionados por el usuario, nombre de los ficheros adjuntos y su hash,\u2026). Si su sistema realiza firmas de ficheros seleccionados por el usuario y se van a admitir ficheros mayores de 4MB, eval\u00fae el uso de firmas binarias (CAdES), que son de menor tama\u00f1o, en lugar de firmas XML (XAdES). El problema comentado puede afectar a la generaci\u00f3n de firmas XML (XMLdSig / XAdES) de ficheros binarios mayores de 4MB. Si es necesario el env\u00edo de ficheros mayores de 4MB al servidor, deber\u00e1n enviarse mediante el componente File de los formularios HTML. Para esto, tendremos que firmar previamente los datos y obligar a que sea el propio usuario quien seleccione los ficheros de firma generados. Se propone el siguiente modelo de aplicaci\u00f3n Web: Mostrar al usuario el formulario Web con la informaci\u00f3n que debe rellenar. Esto puede hacerse en una \u00fanica p\u00e1gina Web o en varias si la cantidad de datos lo requiere. En el punto que corresponda del formulario, se dar\u00e1 la opci\u00f3n al usuario de seleccionar los ficheros que desea adjuntar al mismo. Esto abrir\u00e1 una nueva ventana en donde se cargar\u00e1 el Cliente @firma y, mediante el m\u00e9todo descrito en el apartado 13.2 del Manual del Integrador, se dar\u00e1 al usuario la posibilidad de firmar los ficheros. En este caso, en lugar de adjuntar el resultado de la firma al formulario Web, se le permitir\u00e1 almacenarla en disco, notific\u00e1ndole que esta es la firma electr\u00f3nica generada que posteriormente se deber\u00e1 adjuntar al formulario y que, si lo desea, puede conservar como parte del resguardo de la transacci\u00f3n. En este paso se pueden firmar tantos ficheros como se deseen. Consulte el apartado 9.1 del Manual del Integrador del Cliente @firma para conocer como almacenar las firmas en el sistema del usuario. De vuelta al formulario principal y al final del mismo se mostrar\u00e1 un bot\u00f3n Aceptar que redirigir\u00e1 al usuario a una nueva p\u00e1gina en la que se cargar\u00e1 el Cliente @firma y se mostrar\u00e1 el resumen de los datos del formulario para que confirme que son v\u00e1lidos. Tambi\u00e9n en esta p\u00e1gina se mostrar\u00e1n los componentes necesarios de tipo File de HTML para que el usuario cargue los ficheros de firma generados en el paso anterior (y los documentos firmados en caso de firmas expl\u00edcitas). En esta ocasi\u00f3n no se utilizar\u00e1 el Cliente para cargar los ficheros de firma, \u00fanicamente el componente File Tras revisar los datos y seleccionar los ficheros necesarios, el usuario podr\u00e1 enviar el formulario para finalizar el tr\u00e1mite. Al pulsar el bot\u00f3n Enviar, se firmar\u00e1 la transacci\u00f3n con el Cliente @firma y seguidamente se enviar\u00e1 el formulario con esta firma. El concepto de transacci\u00f3n deber\u00e1 definirse para cada sistema. Puede ser, por ejemplo, un XML que contenga todos los datos del formulario y la relaci\u00f3n de ficheros adjuntos (nombres y hashes). NOTA: En sistemas con Java 6 y el Plugin de pr\u00f3xima generaci\u00f3n desactivado la limitaci\u00f3n se encuentra en torno a los 50MB. Sin embargo, no debe presuponerse que el usuario operar\u00e1 desde un entorno de este tipo ya que est\u00e1 obsoleto y no es la configuraci\u00f3n por defecto. No se detecta la inserci\u00f3n/extracci\u00f3n del DNIe en el lector (u otra tarjeta inteligente) A veces puede ocurrir que el navegador no detecta la extracci\u00f3n o introducci\u00f3n del DNIe (u otra tarjeta inteligente) en el lector, por lo que si no hemos introducido la tarjeta previamente a que se arranque el cliente de firma, no se encontrar\u00e1 el certificado. Otro posible caso es que una vez cargado el cliente, se extraiga la tarjeta y, al realizar una operaci\u00f3n de firma, el navegador muestre los certificados de la tarjeta (aunque ya no est\u00e9 presente) fallando al intentar utilizarlo. Este es un problema del navegador en la gesti\u00f3n de los dispositivos criptogr\u00e1ficos (PKCS#11 para Mozilla y CSP para Internet Explorer), que no informa a la sesi\u00f3n abierta en el almac\u00e9n de certificados de los cambios que se producen en el mismo. La soluci\u00f3n m\u00e1s r\u00e1pida al problema es el insertar la tarjeta antes de que se produzca la carga del cliente de firma. No se detecta el certificado del DNIe tras una autenticaci\u00f3n infructuosa Cuando se introduce mal el PIN del DNIe, ocurre que el navegador no detecta sus certificados, incluso aunque posteriormente el usuario s\u00ed lo introduzca correctamente. El problema viene del CSP (Cryptographic Service Provider) del DNI electr\u00f3nico y la mejor forma de solucionarlo es extraer e insertar el DNIe en el lector de tarjeta y volverse a autenticar. Despliegue del Cliente Cuando se despliega el Cliente en entornos donde las p\u00e1ginas HTML se generan din\u00e1micamente no es posible cargar el Applet Las p\u00e1ginas HTML provistas como ejemplo necesitan ciertos cambios cuando se quiere desplegar el Cliente en servidores donde las p\u00e1ginas se generan din\u00e1micamente (como por ejemplo, Portlets en un Servidor de Portales): Las bibliotecas Java del cliente (JAR) deben situarse en una direcci\u00f3n est\u00e1tica dentro del servidor Web, como por ejemplo: http://direcci\u00f3n/directorio_clases El JavaScript (las bibliotecas JS) debe incluirse dentro de la p\u00e1gina que invoca al Applet y puede generarse din\u00e1micamente, pero debe editarse el fichero constantes.js para indicar su localizaci\u00f3n mediante una URL absoluta: /******************************************************************************* * Ruta a los instalables. * * Si no se establece, supone que estan en el mismo directorio (que el HTML). * ******************************************************************************/ var baseDownloadURL = http://direccion/directorio_clases ; /******************************************************************************* * Ruta al instalador. * * Si no se establece, supone que estan en el mismo directorio (que el HTML). * ******************************************************************************/ var base = http://direccion/directorio_clases ; Se producen errores en la carga del Cliente con Java 7u65 Java 7u65 introduce un error que impide la ejecuci\u00f3n de Applet cuando se le proporcionan comandos a la m\u00e1quina virtual, como es el caso del Cliente @firma que indica la memoria m\u00ednima a reservar. Actualice a la \u00faltima versi\u00f3n de Java 7 disponible para solventar el problema. Google Chrome muestra di\u00e1logos de advertencia de seguridad a los usuarios cuando el MiniApplet se publica bajo SSL Para la ejecuci\u00f3n de Applets de Java, Chrome cruza la verificaci\u00f3n del certificado del servidor SSL no solo contra la lista de ra\u00edces de confianza del sistema operativo, sino tambi\u00e9n contra la lista equivalente del entorno de ejecuci\u00f3n de Java. As\u00ed, cuando se carga un Applet desde un sitio SSL cuyo certificado no sea de confianza por Java, aunque s\u00ed lo sea para el sistema operativo, se muestra un di\u00e1logo al usuario como el siguiente: < Esta situaci\u00f3n es muy com\u00fan en servidores Web con certificados de FNMT-RCM-CERES. La forma directa de evitar estos di\u00e1logos es reemplazar los certificados de servidor de FNMT-RCM-CERES por otros emitidos por una Autoridad de Certificaci\u00f3n reconocida universalmente (por Windows, Mozilla, Java, etc.). Si no fuese posible este reemplazo, la \u00fanica forma de evitarlo es que el usuario instale los certificados ra\u00edz de su sitio Web en el repositorio de proveedores de confianza de Java, para lo cual debe abrir el Panel de Control de Java y seleccionar \u201cGestionar Certificados\u201d: < Y a continuaci\u00f3n importar directamente los certificados ra\u00edz como \u201cAutoridad de Certificaci\u00f3n de Sitio Seguro\u201d, preferentemente en el almac\u00e9n de sistema: < En caso de duda, consulte con el emisor de los certificados de su sitio Web SSL para obtener los certificados ra\u00edz y ampliar estas instrucciones de instalaci\u00f3n. Firmas Generales Alguno de los formatos de firma generados con el Cliente @firma no validan adecuadamente en otras plataformas Compruebe siempre las matrices de compatibilidad del cliente para verificar que los formatos no est\u00e1n sujetos a problemas de adecuaci\u00f3n con normativas/est\u00e1ndares (cuando esto ocurra estar\u00e1 as\u00ed indicado) y cu\u00e1les de los que no presentan estos problemas est\u00e1n soportados por su plataforma validadora. Algunos dispositivos de creaci\u00f3n de firma no funcionan con las funcionalidades de firma multi-fase del Cliente Estas limitaciones son impuestas por los fabricantes de los dispositivos de creaci\u00f3n de firmas y no es posible sortearlas. Consulte con el fabricante de su dispositivo de creaci\u00f3n de firmas para comprobar que funcionalidades pueden estar restringidas. La configuraci\u00f3n de filtros de certificados produce un error cuando se establece un filtro de gran tama\u00f1o. Este error ocurre al usar un filtro de certificados mediante el m\u00e9todo deprecado \u201csetCertFilter(String)\u201d o \u201csetMandatoryCertificateCondition(String)\u201d. Al concatenar/anidar m\u00faltiples expresiones de este tipo se produce un error en la JVM que obliga a desactivar el filtro. Debe evitarse el uso de filtros con m\u00faltiples expresiones. Es recomendable migrar las aplicaciones al nuevo sistema de filtros basado en la RFC 2254. Pueden establecerse filtros de este tipo mediante el m\u00e9todo \u201csetCertFilterRFC2254(String, String, boolean)\u201d. Mensajes de confirmaci\u00f3n durante el proceso de firma masiva A partir del Cliente @firma v3.3, cualquier acceso a disco como leer y guardar datos requiere del consentimiento expreso del usuario. Este procedimiento no afecta a la mec\u00e1nica de las aplicaciones que integran el Cliente, por lo que no requerir\u00e1n ning\u00fan tipo de modificaci\u00f3n, salvo en casos concretos de firma masiva de datos. El proceso de firma masiva program\u00e1tica dispone de un m\u00e9todo para la firma de ficheros, aseg\u00farese de utilizar este m\u00e9todo (massiveSignatureFile()) y no el de firma de datos (massiveSignatureData()) si va a firmar ficheros en disco. Por otra parte, el proceso de firma masiva program\u00e1tica no dispone de un m\u00e9todo propio para el guardado de las firmas en disco. En anteriores versiones del Cliente era posible utilizar los m\u00e9todos comunes de guardado para almacenar las firmas pero a partir de la versi\u00f3n 3.3 esto supone que se pida confirmaci\u00f3n para el guardado de cada firma individual. Por motivos de seguridad, este comportamiento no puede evitarse. Si se desea firmar ficheros y almacenar el resultado en disco, consulte la informaci\u00f3n del proceso de firma de directorios del manual del integrador del Cliente. Este mecanismo permitir\u00eda firmar y almacenar todos los ficheros sin necesidad de que el usuario lo apruebe individualmente. Incidencias espec\u00edficas de la plataforma Windows Google Chrome no ejecuta ni el MiniApplet Cliente @firma ni ning\u00fan otro Applet de Java a pesar de tener correctamente instalado el JRE Google Chrome sobre Microsoft Windows, a partir de su versi\u00f3n 42, deshabilita por defecto la ejecuci\u00f3n de los Applets de Java, por lo que es necesario habilitar manualmente esta caracter\u00edstica siguiendo este procedimiento: Escribir la siguiente direcci\u00f3n en la barra de URL del navegador: chrome://flags Localizar el apartado: \" Habilitar NPAPI \" y presionar \" Habilitar \". Reiniciar el navegador. Error \u201cel conjunto de claves no existe\u201d al firmar con el almac\u00e9n de claves de Windows En ciertas ocasiones, y especialmente cuando se usan tarjetas de FNMT-RCM (CERES, DNIe, APE, etc.), al firmar en un entorno operativo Windows, la operaci\u00f3n finaliza con error y se muestra en consola el mensaje \u201cEl conjunto de claves no existe\u201d (o \u201cKeyset does not exist\u201d si se tiene un Windows en ingl\u00e9s). Este problema, que si bien puede darse en cualquier versi\u00f3n de Windows es m\u00e1s com\u00fan en Windows XP, no tiene soluci\u00f3n, y se debe a una incompatibilidad de Java con los controladores CAPI de Windows instalados en el sistema del usuario (por ejemplo, los controladores de FNMT-RCM). Pruebe a actualizar tanto en entorno de ejecuci\u00f3n de Java como los posibles controladores de tarjetas que tenga instalados a la \u00faltima versi\u00f3n disponible. Si el problema se da \u00fanicamente al intentar firmar con una tarjeta inteligente o un almac\u00e9n de claves distinto del central de Windows, abra una incidencia contra el proveedor de este hardware/software de almac\u00e9n de claves. En versiones antiguas de Internet Explorer no es posible tener simult\u00e1neamente abiertas dos o m\u00e1s p\u00e1ginas que contengan diferentes instancias del Cliente @firma Es posible que en versiones 7 y anteriores de Internet Explorer abrir una segunda p\u00e1gina que contenga el Cliente @firma teniendo otra ya abierta ocasione fallos de carga en la segunda o un malfuncionamiento general en ambas. Actualice a la \u00faltima versi\u00f3n de Internet Explorer disponible para su sistema operativo Windows y a al menos la versi\u00f3n 6u30 del entorno de ejecuci\u00f3n de Java (JRE) para sortear estos problemas. Si por cualquier motivo no puede actualizar Internet Explorer pruebe a usar otro navegador Web, como Google Chrome. El Cliente no Funciona Correctamente en Windows sobre arquitectura IA64 (Intel Itanium) La arquitectura IA64 en Windows no est\u00e1 soportada por el Cliente y no lo estar\u00e1 en un futuro pr\u00f3ximo. El Cliente no permite acceder a los almacenes de certificados con Java 6 (64 bits) El entorno de ejecuci\u00f3n de Java 6 de 64 bits no incorpora las bibliotecas necesarias para el acceso a los almacenes de Windows y Mozilla. Estas bibliotecas tratan de instalarse durante el proceso de carga del Cliente pero, en sistemas con permisos restringidos, no ser\u00e1 posible. Si su navegador web es de 64 bits y no puede acceder al almac\u00e9n de su sistema, actualice a Java 7 (64 bits). El Cliente deja de funcionar por completo cuando estoy utiliz\u00e1ndolo a la vez que una aplicaci\u00f3n nativa Windows que hace uso de una tarjeta inteligente Algunas aplicaciones nativas de Windows que hacen uso de tarjetas inteligentes como el DNIe (aplicaci\u00f3n de escritorio, controles ActiveX en p\u00e1ginas Web de Internet Explorer\u2026) interfieren en el funcionamiento de las bibliotecas SunMSCAPI de Java para el uso de los certificados del sistema operativo. Esta interferencia provoca que cualquier intento de una aplicaci\u00f3n Java de acceder al almac\u00e9n de certificados de Windows cuando se tiene insertada la tarjeta inteligente en el lector mientras la otra aplicaci\u00f3n est\u00e9 tambi\u00e9n ejecut\u00e1ndose, genere un error interno en la m\u00e1quina virtual de Java que cierra instant\u00e1neamente la aplicaci\u00f3n afectada. Este es un problema generado por aplicaciones nativas Windows que acceden a CAPI por medios no recomendados y por defectos de la biblioteca SunMSCAPI, encargada del acceso al almac\u00e9n de certificados de Windows, que no puede ser tratado, que impiden operar cuando se realizan estos accesos no recomendados. En general, debe intentar evitarse la situaci\u00f3n en donde una aplicaci\u00f3n utilice una tarjeta inteligente a la vez que se usa el cliente de firma. Para hacerlo, conviene separar el uso de las dos aplicaciones que acceden a la tarjeta mediante la extracci\u00f3n y reinserci\u00f3n de la misma en el lector o simplemente cerrando el resto de las aplicaciones mientras se usa una de ellas. Si llegase a producirse este error, es posible que necesite cerrar la aplicaci\u00f3n Windows que produce la incompatibilidad y reiniciar la aplicaci\u00f3n (p\u00e1gina Web) que integra el cliente @firma. No es posible acceder al almac\u00e9n de Firefox en sistemas Windows con Java 6u32 o superior y Java 7u4 o superior La JRE de Oracle para Windows utiliza a partir de las versiones u32 de Java 6 y u4 de Java 7 el entorno de ejecuci\u00f3n de Visual C++ 2010. El Cliente @firma no podr\u00e1 acceder al almac\u00e9n de Firefox si no cuenta con este entorno de ejecuci\u00f3n instalado en su sistema. Puede descargarlo desde: http://www.microsoft.com/download/en/details.aspx?id=5555 No es posible cargar el Cliente @firma o acceder al almac\u00e9n de certificados con Apple Safari y Java 6 Java 6 no est\u00e1 certificado para su uso con Apple Safari sobre Windows en ninguna plataforma. En sistemas Windows Vista y Windows 7 actualice a la \u00faltima versi\u00f3n de Java 7. Por otra parte, las \u00faltimas versiones de Java no son compatibles con Safari sobre Windows XP, por lo que ser\u00e1 necesario utilizar otro navegador web. Incidencias espec\u00edficas de la plataforma Apple OS X Al intentar abrir un fichero en Safari el di\u00e1logo de selecci\u00f3n se abre, pero no muestra ning\u00fan fichero para seleccionar Los Applets de Java en OS X con Safari tienen restringido por defecto el acceso al sistema de ficheros, lo cual puede causar cierta confusi\u00f3n con los Applets Cliente @firma en OS X, porque da la impresi\u00f3n de funcionar apropiadamente, pero cuando se solicita abrir o guardar un fichero, no es posible. En particular, lo que el usuario aprecia al intentar abrir un fichero es que el di\u00e1logo de selecci\u00f3n se abre, pero no muestra ning\u00fan archivo: < Para conseguir que el MiniApplet tenga acceso no restringido al sistema de ficheros del usuario es necesario que este configure Safari para habilitar el \u201cModo Inseguro\u201d para el sitio Web en concreto que publique el MiniApplet. Para ello, siga las indicaciones de Apple, que puede encontrar aqu\u00ed: http://support.apple.com/kb/HT5954 Al cargar el Cliente @firma aparece el componente instalador solicitando la introducci\u00f3n de la contrase\u00f1a de usuario privilegiado, pero o no deseo introducirla por motivos de seguridad o aunque la introduzca el proceso termina en error. Para el uso del repositorio de Mozilla Firefox en Mac OS X es necesario que las bibliotecas NSS est\u00e9n situadas dentro de una ruta de carga de bibliotecas, pero Firefox al instalarse en Mac OS X las instala en su propio directorio, sin a\u00f1adir este a la lista de rutas de carga de bibliotecas. Para sortear esta dificultad, el Cliente @firma, mediante su componente instalador (BootLoader), intenta crear enlaces simb\u00f3licos de estas bibliotecas desde el directorio de Firefox a /usr/lib, carpeta dentro de la lista de directorios de carga de bibliotecas. Para realizar esta copia, se necesitan ciertos privilegios, y es por esta raz\u00f3n por la que se solicita la contrase\u00f1a de usuario privilegiado. Si prefiere no introducir su contrase\u00f1a de usuario privilegiado o simplemente el proceso autom\u00e1tico del BootLoader no funciona en su entorno espec\u00edfico, siempre puede realizar la copia de ficheros de forma manual desde una ventana de terminal. Los ficheros a enlazar simb\u00f3licamente son (si alguno de estos ficheros no existe en su instalaci\u00f3n de Firefox en Mac OS X): libnspr4.dylib libplds4.dylib libplc4.dylib libmozsqlite3.dylib libnssutil3.dylib libmozutils.dylib Es necesario enlazarlos desde su directorio de origen (el de instalaci\u00f3n de Mozilla Firefox, normalmente /Applications/Firefox.app/Contents/MacOS) a /usr/lib. Si tiene instalado Mozilla Firefox y no encuentra las bibliotecas indicadas en /Applications/Firefox.app/Contents/MacOS puede intentar localizaras mediante el siguiente comando: #find / -name \u201clibnspr4.dylib\u201d Para enlazar simb\u00f3licamente las bibliotecas es recomendable usar el comando ln. Consulte la documentaci\u00f3n de Mac OS X o use el comando man para m\u00e1s informaci\u00f3n sobre el comando ln. De igual forma, es probable que necesite hacer uso del comando sudo (o su) para obtener privilegios elevados desde un terminal de comandos en Mac OS X. Error en la ejecuci\u00f3n del Cliente @firma en Mac OS X 10.7.4 o superior Se ha detectado que los cambios de seguridad incorporados por Apple a la actualizaci\u00f3n 10.7.4 de Mac OS X Lion pueden causar problemas aleatorios en la obtenci\u00f3n de privilegios de los Applets Java firmados. Si experimenta problemas ejecutando el Applet Cliente @firma en Mac OS X 10.7.4 puede actualizar su entorno de ejecuci\u00f3n de Java a la versi\u00f3n 7 usando la versi\u00f3n de Oracle, disponible para libre descarga desde: http://www.oracle.com/technetwork/java/javase/downloads/index.html Adicionalmente, aunque Java est\u00e9 correctamente instalado, puede ser necesaria la activaci\u00f3n del soporte espec\u00edfico de Applets de Java y aplicaciones Java WebStart. Esta activaci\u00f3n puede realizarse desde \u201cPreferencias de Java\u201d, en el men\u00fa \u201cUtilidades\u201d de Mac OS X: < Incidencias espec\u00edficas de las firmas PDF El Cliente no permite la firma de PDF con ciertos certificados Las firmas de documentos PDF realizadas externamente (que es el m\u00e9todo utilizado por el Cliente) tienen un tama\u00f1o m\u00e1ximo de octetos que pueden ocupar dentro del PDF. Como la firma incluye la cadena de certificaci\u00f3n completa, si esta es muy extensa puede llegar a agotarse este espacio y resultar en una firma inv\u00e1lida o corrupta. Si esto le ocurre, por favor, p\u00f3ngase en contacto con el servicio de atenci\u00f3n a los usuarios del Cliente @firma enviando una copia de su certificado de firma y la cadena de confianza completa. Tenga siempre mucho cuidado de no enviar jam\u00e1s las partes privadas de los certificados . Incidencias espec\u00edficas de las firmas XML El Cliente no firma las hojas de estilo de los ficheros XML Dado que las hojas de estilo de un XML pueden declararse de distintas formas, el cliente adopta distintas estrategias para cada forma de declaraci\u00f3n y seg\u00fan la variante de firma. Las formas de declarar una hoja de estilo y la forma de firmar el XML en ese caso por el Cliente son las siguientes: La hoja de estilo est\u00e1 empotrada dentro del XML, y se declara con una referencia local (el valor del atributo href de la declaraci\u00f3n del XSL es un nombre de identificador de nodo XML precedido por \u201c#\u201d). En este caso no es necesaria ninguna estrategia adicional, pues al ser parte la hoja de estilo del XML, siempre que se firma uno, se firma tambi\u00e9n el otro. Esto aplica a la totalidad de las firmas XML. La hoja de estilo est\u00e1 accesible remotamente por protocolo HTTP o HTTPS (el valor del atributo href es una URL v\u00e1lida con esquema http \u00f3 https). En este caso se a\u00f1ade una referencia a la firma que apunta a la hoja de estilo mediante la misma URL (una referencia Externally Detached). Esto aplica a la totalidad de las firmas XML). Se referencia a la hoja de estilo mediante una referencia relativa local. En este caso, dado que las referencias relativas locales se pierden al firmar (el Applet no sabe en qu\u00e9 directorio o carpeta estaba el XML para localizar el XSL, y no puede asumir d\u00f3nde se guardar\u00e1 la firma generada), las hojas de estilo no se firman. Compruebe que el XML que desea firmar declara las hojas de estilo mediante alguno de los modos soportado. Las firmas XMLDSig generadas no son compatibles con SOAP Esta funcionalidad est\u00e1 en estudio para ser incluida en futuras versiones del Cliente. Ciertos validadores no aceptan algunas de las firmas generadas por el Cliente @firma El Cliente @firma permite generar un amplio abanico de formatos de firmas, algunos de los cuales no est\u00e1n soportados por todos los validadores de firma actuales. Por ejemplo, firmas ODF, PDF, firmas XML expl\u00edcitas (en donde se firma el hash de un fichero)\u2026. Tambi\u00e9n existe la posibilidad de que un validador s\u00f3lo admita versiones espec\u00edficas de estos formatos. El sistema de validaci\u00f3n de firmas VALIDe soporta todas las firmas generadas con el Cliente @firma, a excepci\u00f3n de las firmas OOXML que se incorporar\u00e1n en una pr\u00f3xima versi\u00f3n. El Cliente no genera firmas XML usando huellas digitales SHA-2 El error de Java 6845600 ( http://bugs.sun.com/view_bug.do?bug_id=6845600 ) afecta a la generaci\u00f3n de firmas XML con SHA-256 y SHA-512, y los errores de Java 6753664 y 6946836 ( http://bugs.sun.com/view_bug.do?bug_id=6753664 y http://bugs.sun.com/view_bug.do?bug_id=6946836 ) impiden usar estos algoritmos de huella digital sobre Internet Explorer. Para sortear estos problemas debe usar Java 6u30 o Java 7u2 y superiores. El Cliente produce un error de derreferenciaci\u00f3n al generar firmas XAdES: javax.xml.crypto.URIReferenceException: Errores en las primeras versiones de Java 7 producen problemas internos de derreferenciaci\u00f3n al generar firmas XAdES cuando se configura la propiedad \u201ccontentTypeOid\u201d. Esta propiedad, que es la encargada de indicar el tipo de dato firmado a trav\u00e9s de un OID se representa internamente como una URI de tipo URN que Java es incapaz de derreferenciar. El problema surge tambi\u00e9n durante las operaciones de firma masiva XAdES ya que internamente utilizan esta propiedad. Este error aparece por regla general en sistemas con sistema operativo Windows 7 aunque no se descarta que surja en otros entornos como Windows XP u otros sistemas operativos. Estos errores de Java quedan solucionados en versiones posteriores de Java 7. Actualice a la \u00faltima versi\u00f3n para solventar el problema. Los errores comentados est\u00e1n reconocidos y publicados por Oracle con los identificadores 7094155 y 2219607 ( http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7094155 y http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=2219607 ). Glosario de t\u00e9rminos Firma electr\u00f3nica Es el conjunto de datos, en forma electr\u00f3nica, anejos a otros datos electr\u00f3nicos o asociados funcionalmente con ellos, utilizados como medio para identificar formalmente al autor o a los autores del documento que la recoge. XML Digital Signature (XMLDSig) Es una recomendaci\u00f3n del W3C que define una sintaxis XML para la firma digital XML Advanced Signature (XAdES) Es un conjunto de extensiones a las recomendaciones XML-DSig haci\u00e9ndolas adecuadas para la firma electr\u00f3nica avanzada. RSA Es un sistema criptogr\u00e1fico de clave p\u00fablica desarrollado en 1977. En la actualidad, RSA es el primer y m\u00e1s utilizado algoritmo de este tipo y es v\u00e1lido tanto para cifrar como para firmar digitalmente. XML Es un metalenguaje extensible de etiquetas desarrollado por el World Wide Web Consortium (W3C). Es una simplificaci\u00f3n y adaptaci\u00f3n del SGML y permite definir la gram\u00e1tica de lenguajes espec\u00edficos (de la misma manera que HTML es a su vez un lenguaje definido por SGML). Por lo tanto XML no es realmente un lenguaje en particular, sino una manera de definir lenguajes para diferentes necesidades. Algunos de estos lenguajes que usan XML para su definici\u00f3n son XHTML, SVG, MathML. Office Open XML (OOXML) Es un formato de archivo abierto y est\u00e1ndar cuyas extensiones m\u00e1s comunes son .docx, .xlsx y .pptx. Se le utiliza para representar y almacenar hojas de c\u00e1lculo, diagramas, presentaciones y documentos de texto. Un archivo Office Open XML contiene principalmente datos basados en el lenguaje de marcado XML, comprimidos en un contenedor .zip espec\u00edfico. Open Document Format (ODF) Es un formato de fichero est\u00e1ndar para el almacenamiento de documentos ofim\u00e1ticos tales como hojas de c\u00e1lculo, memorandos, gr\u00e1ficas y presentaciones. Aunque las especificaciones fueron inicialmente elaboradas por Sun, el est\u00e1ndar fue desarrollado por el comit\u00e9 t\u00e9cnico para Open Office XML de la organizaci\u00f3n OASIS y est\u00e1 basado en un esquema XML inicialmente creado e implementado por la suite ofim\u00e1tica OpenOffice.org (ver OpenOffice.org XML). ZIP Es un formato de almacenamiento sin p\u00e9rdida, muy utilizado para la compresi\u00f3n de datos como im\u00e1genes, programas o documentos. PDF Es un formato de almacenamiento de documentos, desarrollado por la empresa Adobe Systems. Este formato es de tipo compuesto (imagen vectorial, mapa de bits y texto). SHA Es un sistema de funciones hash criptogr\u00e1ficas relacionadas de la Agencia de Seguridad Nacional de los Estados Unidos y publicadas por el National Institute of Standards and Technology (NIST). El primer miembro de la familia fue publicado en 1993 es oficialmente llamado SHA. Sin embargo, hoy d\u00eda, no oficialmente se le llama SHA-0 para evitar confusiones con sus sucesores. Dos a\u00f1os m\u00e1s tarde el primer sucesor de SHA fue publicado con el nombre de SHA-1. Existen cuatro variantes m\u00e1s que se han publicado desde entonces cuyas diferencias se basan en un dise\u00f1o algo modificado y rangos de salida incrementados: SHA-224, SHA-256, SHA-384, y SHA-512 (llam\u00e1ndose SHA-2 a todos ellos). PKCS Se refiere a un grupo de est\u00e1ndares de criptograf\u00eda de clave p\u00fablica concebidos y publicados por los laboratorios de RSA en California. A RSA Security se le asignaron los derechos de licenciamiento para la patente de algoritmo de clave asim\u00e9trica RSA y adquiri\u00f3 los derechos de licenciamiento para muchas otras patentes de claves. W3C Es un consorcio internacional que produce recomendaciones para la World Wide Web. Est\u00e1 dirigida por Tim Berners-Lee, el creador original de URL (Uniform Resource Locator, Localizador Uniforme de Recursos), HTTP (HyperText Transfer Protocol, Protocolo de Transferencia de HiperTexto) y HTML (Lenguaje de Marcado de HiperTexto) que son las principales tecnolog\u00edas sobre las que se basa la Web. OpenOffice.org es una suite ofim\u00e1tica libre (c\u00f3digo abierto y distribuci\u00f3n gratuita) que incluye herramientas como procesador de textos, hoja de c\u00e1lculo, presentaciones, herramientas para el dibujo vectorial y base de datos. Est\u00e1 disponible para varias plataformas, tales como Microsoft Windows, GNU/Linux, BSD, Solaris y Mac OS X. Soporta numerosos formatos de archivo, incluyendo como predeterminado el formato est\u00e1ndar ISO/IEC OpenDocument (ODF), entre otros formatos comunes. A febrero de 2010, OpenOffice soporta m\u00e1s de 110 idiomas. Base64 Es un sistema de numeraci\u00f3n posicional que usa 64 como base. Es la mayor potencia de dos que puede ser representada usando \u00fanicamente los caracteres imprimibles de ASCII. Esto ha propiciado su uso para codificaci\u00f3n de correos electr\u00f3nicos, PGP y otras aplicaciones. Todas las variantes famosas que se conocen con el nombre de Base64 usan el rango de caracteres A-Z, a-z y 0-9 en este orden para los primeros 62 d\u00edgitos, pero los s\u00edmbolos escogidos para los \u00faltimos dos d\u00edgitos var\u00edan considerablemente de unas a otras. Otros m\u00e9todos de codificaci\u00f3n como UUEncode y las \u00faltimas versiones de binhex usan un conjunto diferente de 64 caracteres para representar 6 d\u00edgitos binarios, pero \u00e9stos nunca son llamados Base64. ASN.1 Es una norma para representar datos independientemente de la m\u00e1quina que se est\u00e9 usando y sus formas de representaci\u00f3n internas. Es un protocolo de nivel de presentaci\u00f3n en el modelo OSI. Autoridad de Certificaci\u00f3n (CA) Es una entidad de confianza, responsable de emitir y revocar los certificados digitales o certificados, utilizados en la firma electr\u00f3nica, para lo cual se emplea la criptograf\u00eda de clave p\u00fablica. Jur\u00eddicamente es un caso particular de Prestador de Servicios de Certificaci\u00f3n. Certificado Digital Es un documento digital mediante el cual un tercero confiable (una autoridad de certificaci\u00f3n) garantiza la vinculaci\u00f3n entre la identidad de un sujeto o entidad y su clave p\u00fablica. Infraestructura de Clave P\u00fablica (PKI) Es una combinaci\u00f3n de hardware y software, pol\u00edticas y procedimientos de seguridad que permiten la ejecuci\u00f3n con garant\u00edas de operaciones criptogr\u00e1ficas como el cifrado, la firma digital o el no repudio de transacciones electr\u00f3nicas. Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported Usted es libre de: | < style=\"width:0.52083in;height:0.52083in\" alt=\"share\" /> | Compartir - copiar, distribuir, ejecutar y comunicar p\u00fablicamente la obra | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"remix\" /> | hacer obras derivadas | Bajo las condiciones siguientes: | < style=\"width:0.52083in;height:0.52083in\" alt=\"by\" /> | Atribuci\u00f3n \u2014 Debe reconocer los cr\u00e9ditos de la obra de la manera especificada por el autor o el licenciante (pero no de una manera que sugiera que tiene su apoyo o que apoyan el uso que hace de su obra). | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"nc\" /> | NoComercial \u2014 No puede utilizar esta obra para fines comerciales. | | < style=\"width:0.52083in;height:0.52083in\" alt=\"sa\" /> | Compartir bajo la Misma Licencia \u2014 Si altera o transforma esta obra, o genera una obra derivada, s\u00f3lo puede distribuir la obra generada bajo una licencia id\u00e9ntica a \u00e9sta. | Entendiendo que: Renuncia \u2014 Alguna de estas condiciones puede no aplicarse si se obtiene el permiso del titular de los derechos de autor Dominio P\u00fablico \u2014 Cuando la obra o alguno de sus elementos se hallen en el dominio p\u00fablico seg\u00fan la ley vigente aplicable, esta situaci\u00f3n no quedar\u00e1 afectada por la licencia. Otros derechos \u2014 Los derechos siguientes no quedan afectados por la licencia de ninguna manera: Los derechos derivados de usos leg\u00edtimos u otras limitaciones reconocidas por ley no se ven afectados por lo anterior. Los derechos morales del auto; Derechos que pueden ostentar otras personas sobre la propia obra o su uso, como por ejemplo derechos de imagen o de privacidad. Aviso \u2014 Al reutilizar o distribuir la obra, tiene que dejar muy en claro los t\u00e9rminos de la licencia de esta obra. La mejor forma de hacerlo es enlazar a esta p\u00e1gina. Licencia LA OBRA O LA PRESTACI\u00d3N (SEG\u00daN SE DEFINEN M\u00c1S ADELANTE) SE PROPORCIONA BAJO LOS T\u00c9RMINOS DE ESTA LICENCIA P\u00daBLICA DE CREATIVE COMMONS (CCPL O LICENCIA). LA OBRA O LA PRESTACI\u00d3N SE ENCUENTRA PROTEGIDA POR LA LEY ESPA\u00d1OLA DE PROPIEDAD INTELECTUAL Y/O CUALESQUIERA OTRAS NORMAS QUE RESULTEN DE APLICACI\u00d3N. QUEDA PROHIBIDO CUALQUIER USO DE LA OBRA O PRESTACI\u00d3N DIFERENTE A LO AUTORIZADO BAJO ESTA LICENCIA O LO DISPUESTO EN LA LEY DE PROPIEDAD INTELECTUAL. MEDIANTE EL EJERCICIO DE CUALQUIER DERECHO SOBRE LA OBRA O LA PRESTACI\u00d3N, USTED ACEPTA Y CONSIENTE LAS LIMITACIONES Y OBLIGACIONES DE ESTA LICENCIA, SIN PERJUICIO DE LA NECESIDAD DE CONSENTIMIENTO EXPRESO EN CASO DE VIOLACI\u00d3N PREVIA DE LOS T\u00c9RMINOS DE LA MISMA. EL LICENCIADOR LE CONCEDE LOS DERECHOS CONTENIDOS EN ESTA LICENCIA, SIEMPRE QUE USTED ACEPTE LOS PRESENTES T\u00c9RMINOS Y CONDICIONES. 1. Definiciones La obra es la creaci\u00f3n literaria, art\u00edstica o cient\u00edfica ofrecida bajo los t\u00e9rminos de esta licencia. En esta licencia se considera una prestaci\u00f3n cualquier interpretaci\u00f3n, ejecuci\u00f3n, fonograma, grabaci\u00f3n audiovisual, emisi\u00f3n o transmisi\u00f3n, mera fotograf\u00eda u otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente aplicable. La aplicaci\u00f3n de esta licencia a una colecci\u00f3n (definida m\u00e1s adelante) afectar\u00e1 \u00fanicamente a su estructura en cuanto forma de expresi\u00f3n de la selecci\u00f3n o disposici\u00f3n de sus contenidos, no siendo extensiva a \u00e9stos. En este caso la colecci\u00f3n tendr\u00e1 la consideraci\u00f3n de obra a efectos de esta licencia. El titular originario es: En el caso de una obra literaria, art\u00edstica o cient\u00edfica, la persona natural o grupo de personas que cre\u00f3 la obra. En el caso de una obra colectiva, la persona que la edite y divulgue bajo su nombre, salvo pacto contrario. En el caso de una interpretaci\u00f3n o ejecuci\u00f3n, el actor, cantante, m\u00fasico, o cualquier otra persona que represente, cante, lea, recite, interprete o ejecute en cualquier forma una obra. En el caso de un fonograma, el productor fonogr\u00e1fico, es decir, la persona natural o jur\u00eddica bajo cuya iniciativa y responsabilidad se realiza por primera vez una fijaci\u00f3n exclusivamente sonora de la ejecuci\u00f3n de una obra o de otros sonidos. En el caso de una grabaci\u00f3n audiovisual, el productor de la grabaci\u00f3n, es decir, la persona natural o jur\u00eddica que tenga la iniciativa y asuma la responsabilidad de las fijaciones de un plano o secuencia de im\u00e1genes, con o sin sonido. En el caso de una emisi\u00f3n o una transmisi\u00f3n, la entidad de radiodifusi\u00f3n. En el caso de una mera fotograf\u00eda, aquella persona que la haya realizado. En el caso de otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente, la persona que \u00e9sta se\u00f1ale. Se considerar\u00e1n obras derivadas aquellas obras creadas a partir de la licenciada, como por ejemplo: las traducciones y adaptaciones; las revisiones, actualizaciones y anotaciones; los compendios, res\u00famenes y extractos; los arreglos musicales y, en general, cualesquiera transformaciones de una obra literaria, art\u00edstica o cient\u00edfica. Para evitar la duda, si la obra consiste en una composici\u00f3n musical o grabaci\u00f3n de sonidos, la sincronizaci\u00f3n temporal de la obra con una imagen en movimiento (synching) ser\u00e1 considerada como una obra derivada a efectos de esta licencia. Tendr\u00e1n la consideraci\u00f3n de colecciones la recopilaci\u00f3n de obras ajenas, de datos o de otros elementos independientes como las antolog\u00edas y las bases de datos que por la selecci\u00f3n o disposici\u00f3n de sus contenidos constituyan creaciones intelectuales. La mera incorporaci\u00f3n de una obra en una colecci\u00f3n no dar\u00e1 lugar a una derivada a efectos de esta licencia. El licenciador es la persona o la entidad que ofrece la obra o prestaci\u00f3n bajo los t\u00e9rminos de esta licencia y le concede los derechos de explotaci\u00f3n de la misma conforme a lo dispuesto en ella. Usted es la persona o la entidad que ejercita los derechos concedidos mediante esta licencia y que no ha violado previamente los t\u00e9rminos de la misma con respecto a la obra o la prestaci\u00f3n, o que ha recibido el permiso expreso del licenciador de ejercitar los derechos concedidos mediante esta licencia a pesar de una violaci\u00f3n anterior. La transformaci\u00f3n de una obra comprende su traducci\u00f3n, adaptaci\u00f3n y cualquier otra modificaci\u00f3n en su forma de la que se derive una obra diferente. La creaci\u00f3n resultante de la transformaci\u00f3n de una obra tendr\u00e1 la consideraci\u00f3n de obra derivada. Se entiende por reproducci\u00f3n la fijaci\u00f3n directa o indirecta, provisional o permanente, por cualquier medio y en cualquier forma, de toda la obra o la prestaci\u00f3n o de parte de ella, que permita su comunicaci\u00f3n o la obtenci\u00f3n de copias. Se entiende por distribuci\u00f3n la puesta a disposici\u00f3n del p\u00fablico del original o de las copias de la obra o la prestaci\u00f3n, en un soporte tangible, mediante su venta, alquiler, pr\u00e9stamo o de cualquier otra forma. Se entiende por comunicaci\u00f3n p\u00fablica todo acto por el cual una pluralidad de personas, que no pertenezcan al \u00e1mbito dom\u00e9stico de quien la lleva a cabo, pueda tener acceso a la obra o la prestaci\u00f3n sin previa distribuci\u00f3n de ejemplares a cada una de ellas. Se considera comunicaci\u00f3n p\u00fablica la puesta a disposici\u00f3n del p\u00fablico de obras o prestaciones por procedimientos al\u00e1mbricos o inal\u00e1mbricos, de tal forma que cualquier persona pueda acceder a ellas desde el lugar y en el momento que elija. La explotaci\u00f3n de la obra o la prestaci\u00f3n comprende la reproducci\u00f3n, la distribuci\u00f3n, la comunicaci\u00f3n p\u00fablica y, en su caso, la transformaci\u00f3n. 2. L\u00edmites de los derechos. Nada en esta licencia pretende reducir o restringir cualesquiera l\u00edmites legales de los derechos exclusivos del titular de los derechos de propiedad intelectual de acuerdo con la Ley de propiedad intelectual o cualesquiera otras leyes aplicables, ya sean derivados de usos leg\u00edtimos, tales como la copia privada o la cita, u otras limitaciones como la resultante de la primera venta de ejemplares (agotamiento). 3. Concesi\u00f3n de licencia. Conforme a los t\u00e9rminos y a las condiciones de esta licencia, el licenciador concede, por el plazo de protecci\u00f3n de los derechos de propiedad intelectual y a t\u00edtulo gratuito, una licencia de \u00e1mbito mundial no exclusiva que incluye los derechos siguientes: Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n. Derecho a incorporar la obra o la prestaci\u00f3n en una o m\u00e1s colecciones. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n l\u00edcitamente incorporada en una colecci\u00f3n. Derecho de transformaci\u00f3n de la obra para crear una obra derivada siempre y cuando se incluya en \u00e9sta una indicaci\u00f3n de la transformaci\u00f3n o modificaci\u00f3n efectuada. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de obras derivadas creadas a partir de la obra licenciada. Derecho a extraer y reutilizar la obra o la prestaci\u00f3n de una base de datos. Para evitar cualquier duda, el titular originario: Conserva el derecho a percibir las remuneraciones o compensaciones previstas por actos de explotaci\u00f3n de la obra o prestaci\u00f3n, calificadas por la ley como irrenunciables e inalienables y sujetas a gesti\u00f3n colectiva obligatoria. Renuncia al derecho exclusivo a percibir, tanto individualmente como mediante una entidad de gesti\u00f3n colectiva de derechos, cualquier remuneraci\u00f3n derivada de actos de explotaci\u00f3n de la obra o prestaci\u00f3n que usted realice. Estos derechos se pueden ejercitar en todos los medios y formatos, tangibles o intangibles, conocidos en el momento de la concesi\u00f3n de esta licencia. Los derechos mencionados incluyen el derecho a efectuar las modificaciones que sean precisas t\u00e9cnicamente para el ejercicio de los derechos en otros medios y formatos. Todos los derechos no concedidos expresamente por el licenciador quedan reservados, incluyendo, a t\u00edtulo enunciativo pero no limitativo, los derechos morales irrenunciables reconocidos por la ley aplicable. En la medida en que el licenciador ostente derechos exclusivos previstos por la ley nacional vigente que implementa la directiva europea en materia de derecho sui generis sobre bases de datos, renuncia expresamente a dichos derechos exclusivos. 4. Restricciones. La concesi\u00f3n de derechos que supone esta licencia se encuentra sujeta y limitada a las restricciones siguientes: Usted puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n solamente bajo los t\u00e9rminos de esta licencia y debe incluir una copia de la misma, o su Identificador Uniforme de Recurso (URI). Usted no puede ofrecer o imponer ninguna condici\u00f3n sobre la obra o prestaci\u00f3n que altere o restrinja los t\u00e9rminos de esta licencia o el ejercicio de sus derechos por parte de los concesionarios de la misma. Usted no puede sublicenciar la obra o prestaci\u00f3n. Usted debe mantener intactos todos los avisos que se refieran a esta licencia y a la ausencia de garant\u00edas. Usted no puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n con medidas tecnol\u00f3gicas que controlen el acceso o el uso de una manera contraria a los t\u00e9rminos de esta licencia. Esta secci\u00f3n 4.a tambi\u00e9n afecta a la obra o prestaci\u00f3n incorporada en una colecci\u00f3n, pero ello no implica que \u00e9sta en su conjunto quede autom\u00e1ticamente o deba quedar sujeta a los t\u00e9rminos de la misma. En el caso que le sea requerido, previa comunicaci\u00f3n del licenciador, si usted incorpora la obra en una colecci\u00f3n y/o crea una obra derivada, deber\u00e1 quitar cualquier cr\u00e9dito requerido en el apartado 4.b, en la medida de lo posible. Si usted reproduce, distribuye o comunica p\u00fablicamente la obra o la prestaci\u00f3n, una colecci\u00f3n que la incorpore o cualquier obra derivada, debe mantener intactos todos los avisos sobre la propiedad intelectual e indicar, de manera razonable conforme al medio o a los medios que usted est\u00e9 utilizando: El nombre del autor original, o el seud\u00f3nimo si es el caso, as\u00ed como el del titular originario, si le es facilitado. El nombre de aquellas partes (por ejemplo: instituci\u00f3n, publicaci\u00f3n, revista) que el titular originario y/o el licenciador designen para ser reconocidos en el aviso legal, las condiciones de uso, o de cualquier otra manera razonable. El t\u00edtulo de la obra o la prestaci\u00f3n si le es facilitado. El URI, si existe, que el licenciador especifique para ser vinculado a la obra o la prestaci\u00f3n, a menos que tal URI no se refiera al aviso legal o a la informaci\u00f3n sobre la licencia de la obra o la prestaci\u00f3n. En el caso de una obra derivada, un aviso que identifique la transformaci\u00f3n de la obra en la obra derivada (p. ej., \"traducci\u00f3n castellana de la obra de Autor Original,\" o \"gui\u00f3n basado en obra original de Autor Original\"). Este reconocimiento debe hacerse de manera razonable. En el caso de una obra derivada o incorporaci\u00f3n en una colecci\u00f3n estos cr\u00e9ditos deber\u00e1n aparecer como m\u00ednimo en el mismo lugar donde se hallen los correspondientes a otros autores o titulares y de forma comparable a los mismos. Para evitar la duda, los cr\u00e9ditos requeridos en esta secci\u00f3n s\u00f3lo ser\u00e1n utilizados a efectos de atribuci\u00f3n de la obra o la prestaci\u00f3n en la manera especificada anteriormente. Sin un permiso previo por escrito, usted no puede afirmar ni dar a entender impl\u00edcitamente ni expl\u00edcitamente ninguna conexi\u00f3n, patrocinio o aprobaci\u00f3n por parte del titular originario, el licenciador y/o las partes reconocidas hacia usted o hacia el uso que hace de la obra o la prestaci\u00f3n. Para evitar cualquier duda, debe hacerse notar que las restricciones anteriores (p\u00e1rrafos 4.a y 4.b) no son de aplicaci\u00f3n a aquellas partes de la obra o la prestaci\u00f3n objeto de esta licencia que \u00fanicamente puedan ser protegidas mediante el derecho sui generis sobre bases de datos recogido por la ley nacional vigente implementando la directiva europea de bases de datos 5. Exoneraci\u00f3n de responsabilidad A MENOS QUE SE ACUERDE MUTUAMENTE ENTRE LAS PARTES, EL LICENCIADOR OFRECE LA OBRA O LA PRESTACI\u00d3N TAL CUAL (ON AN \"AS-IS\" BASIS) Y NO CONFIERE NINGUNA GARANT\u00cdA DE CUALQUIER TIPO RESPECTO DE LA OBRA O LA PRESTACI\u00d3N O DE LA PRESENCIA O AUSENCIA DE ERRORES QUE PUEDAN O NO SER DESCUBIERTOS. ALGUNAS JURISDICCIONES NO PERMITEN LA EXCLUSI\u00d3N DE TALES GARANT\u00cdAS, POR LO QUE TAL EXCLUSI\u00d3N PUEDE NO SER DE APLICACI\u00d3N A USTED. 6. Limitaci\u00f3n de responsabilidad. SALVO QUE LO DISPONGA EXPRESA E IMPERATIVAMENTE LA LEY APLICABLE, EN NING\u00daN CASO EL LICENCIADOR SER\u00c1 RESPONSABLE ANTE USTED POR CUALESQUIERA DA\u00d1OS RESULTANTES, GENERALES O ESPECIALES (INCLUIDO EL DA\u00d1O EMERGENTE Y EL LUCRO CESANTE), FORTUITOS O CAUSALES, DIRECTOS O INDIRECTOS, PRODUCIDOS EN CONEXI\u00d3N CON ESTA LICENCIA O EL USO DE LA OBRA O LA PRESTACI\u00d3N, INCLUSO SI EL LICENCIADOR HUBIERA SIDO INFORMADO DE LA POSIBILIDAD DE TALES DA\u00d1OS. 7. Finalizaci\u00f3n de la licencia Esta licencia y la concesi\u00f3n de los derechos que contiene terminar\u00e1n autom\u00e1ticamente en caso de cualquier incumplimiento de los t\u00e9rminos de la misma. Las personas o entidades que hayan recibido de usted obras derivadas o colecciones bajo esta licencia, sin embargo, no ver\u00e1n sus licencias finalizadas, siempre que tales personas o entidades se mantengan en el cumplimiento \u00edntegro de esta licencia. Las secciones 1, 2, 5, 6, 7 y 8 permanecer\u00e1n vigentes pese a cualquier finalizaci\u00f3n de esta licencia. Conforme a las condiciones y t\u00e9rminos anteriores, la concesi\u00f3n de derechos de esta licencia es vigente por todo el plazo de protecci\u00f3n de los derechos de propiedad intelectual seg\u00fan la ley aplicable. A pesar de lo anterior, el licenciador se reserva el derecho a divulgar o publicar la obra o la prestaci\u00f3n en condiciones distintas a las presentes, o de retirar la obra o la prestaci\u00f3n en cualquier momento. No obstante, ello no supondr\u00e1 dar por concluida esta licencia (o cualquier otra licencia que haya sido concedida, o sea necesario ser concedida, bajo los t\u00e9rminos de esta licencia), que continuar\u00e1 vigente y con efectos completos a no ser que haya finalizado conforme a lo establecido anteriormente, sin perjuicio del derecho moral de arrepentimiento en los t\u00e9rminos reconocidos por la ley de propiedad intelectual aplicable. 8. Miscel\u00e1nea Cada vez que usted realice cualquier tipo de explotaci\u00f3n de la obra o la prestaci\u00f3n, o de una colecci\u00f3n que la incorpore, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra o la prestaci\u00f3n en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Cada vez que usted realice cualquier tipo de explotaci\u00f3n de una obra derivada, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra objeto de esta licencia en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Si alguna disposici\u00f3n de esta licencia resulta inv\u00e1lida o inaplicable seg\u00fan la Ley vigente, ello no afectar\u00e1 la validez o aplicabilidad del resto de los t\u00e9rminos de esta licencia y, sin ninguna acci\u00f3n adicional por cualquiera las partes de este acuerdo, tal disposici\u00f3n se entender\u00e1 reformada en lo estrictamente necesario para hacer que tal disposici\u00f3n sea v\u00e1lida y ejecutiva. No se entender\u00e1 que existe renuncia respecto de alg\u00fan t\u00e9rmino o disposici\u00f3n de esta licencia, ni que se consiente violaci\u00f3n alguna de la misma, a menos que tal renuncia o consentimiento figure por escrito y lleve la firma de la parte que renuncie o consienta. Esta licencia constituye el acuerdo pleno entre las partes con respecto a la obra o la prestaci\u00f3n objeto de la licencia. No caben interpretaciones, acuerdos o condiciones con respecto a la obra o la prestaci\u00f3n que no se encuentren expresamente especificados en la presente licencia. El licenciador no estar\u00e1 obligado por ninguna disposici\u00f3n complementaria que pueda aparecer en cualquier comunicaci\u00f3n que le haga llegar usted. Esta licencia no se puede modificar sin el mutuo acuerdo por escrito entre el licenciador y usted.","title":"CF guia incidencias"},{"location":"markdown_strict/CF_guia-incidencias/#introduccion","text":"El Cliente de Firma es una herramienta de Firma Electr\u00f3nica que funciona en forma de Applet de Java integrado en una p\u00e1gina Web mediante JavaScript. El Cliente hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados ( keystore ) del navegador web ( Internet Explorer, Mozilla, Firefox ) o el sistema operativo as\u00ed como de los que est\u00e9n en dispositivos (tarjetas inteligentes , dispositivos USB ) configurados en el mismo (el caso de los DNI-e). El Cliente de Firma, como su nombre indica, es una aplicaci\u00f3n que se ejecuta en cliente (en el ordenador del usuario, no en el servidor Web). Esto es as\u00ed para evitar que la clave privada asociada a un certificado tenga que \u201csalir\u201d del contenedor del usuario (tarjeta, dispositivo USB o navegador) ubicado en su PC. De hecho, nunca llega a salir del navegador, el Cliente le env\u00eda los datos a firmar y \u00e9ste los devuelve firmados. El Cliente de Firma contiene las interfaces y componentes web necesarios para la realizaci\u00f3n de los siguientes procesos (adem\u00e1s de otros auxiliares como c\u00e1lculos de hash, lectura de ficheros, etc\u2026): Firma de datos y ficheros. Multifirma masiva de datos y ficheros. Cofirma (CoSignature) Multifirma al mismo nivel. Contrafirma (CounterSignature) Multifirma en cascada. Como complemento al cliente de firma, se encuentra un cliente de cifrado que nos permite realizar las funciones de encriptaci\u00f3n y desencriptaci\u00f3n de datos atendiendo a diferentes algoritmos y configuraciones. Adem\u00e1s permite la generaci\u00f3n de sobres digitales.","title":"Introducci\u00f3n"},{"location":"markdown_strict/CF_guia-incidencias/#objetivos","text":"El objetivo del presente documento es enumerar las dificultades t\u00edpicas que pueden encontrar los integradores o sus usuarios durante la instalaci\u00f3n, despliegue, integraci\u00f3n o uso del Cliente @firma, as\u00ed como las v\u00edas de resoluci\u00f3n o paliaci\u00f3n de estas.","title":"Objetivos"},{"location":"markdown_strict/CF_guia-incidencias/#incidencias-conocidas-del-nucleo-del-cliente-firma","text":"","title":"Incidencias conocidas del n\u00facleo del cliente @firma"},{"location":"markdown_strict/CF_guia-incidencias/#incidencias-generales","text":"","title":"Incidencias generales"},{"location":"markdown_strict/CF_guia-incidencias/#el-navegador-no-carga-correctamente-los-applets-de-java-pese-a-tener-java-instalado","text":"Los navegadores actuales, por motivos de seguridad, requieren acciones adicionales de configuraci\u00f3n para habilitar los Applets de Java. Siga las instrucciones del fabricante de su navegador Web y sistema operativo para habilitar los Applets de Java en su navegador, y compruebe adicionalmente que ha cumplido los requisitos que se detallan en la p\u00e1gina de Oracle Java: http://java.com/en/download/help/enable_browser.xml Es igualmente conveniente comprobar, antes de intentar cargar el Cliente @firma, que el Applet de prueba de Oracle Java se carga adecuadamente, para distinguir problemas de configuraci\u00f3n con problemas propios del Applet o MiniApplet Cliente @firma: https://www.java.com/verify/","title":"El navegador no carga correctamente los Applets de Java pese a tener Java instalado"},{"location":"markdown_strict/CF_guia-incidencias/#no-es-posible-realizar-firmas-electronicas-con-cierto-hardware-criptografico-tarjetas-inteligentes-y-dispositivos-usb-de-camerfirma-el-proceso-siempre-termina-en-error","text":"Algunas versiones antiguas de controladores CSP y PKCS#11 para hardware de CamerFirma contienen errores que provocan errores al realizar firmas electr\u00f3nicas. Para corregirlo es necesario actualizar los controladores por la \u00faltima versi\u00f3n, siguiendo el proceso descrito a continuaci\u00f3n (para sistemas Windows, consulte con su suministrador de hardware y software criptogr\u00e1fico para otros sistemas operativos): Desinstale el programa \u201cCARD MANAGER ADMIN 1.6.xxx\u201c desde \u201cAgregar o quitar programas\u201c o \u201cprogramas y caracter\u00edsticas\u201c. Tras la desinstalaci\u00f3n, reinicie el equipo. En caso de no tener el instalado el programa \u201cCARD MANAGER\u201c pase directamente al paso 3. < < Descargue los controladores m\u00e1s actuales, para ello acceda a la p\u00e1gina Web de CamerFirma (http://www.camerfirma.es), entre en el \u00c1rea de Usuario / \u00c1rea de Descargas y ah\u00ed seleccione el Kit De Descargas. Pulse en \u201cDescargar\u201d, seleccionando entonces el \u201cKit De CamerFirma\u201d correspondiente a su modelo \u201cBit4Id\u201d y ejecute el programa de instalaci\u00f3n descargado. Una vez finalizada la instalaci\u00f3n, reinicie el equipo. < < < < < Acceda a la carpeta c:\\Windows\\System32 y, si existen, elimine estos tres ficheros (puede requerir permisos de administrador para completar este punto): Sysgillo.cpl Sysgillocpsetup Sysgillocsp.dll Una vez completados estos tres pasos tendr\u00e1 en su equipo la \u00faltima versi\u00f3n de los controladores, que est\u00e1n libres de errores y permiten realizar firmas electr\u00f3nicas con @firma.","title":"No es posible realizar firmas electr\u00f3nicas con cierto hardware criptogr\u00e1fico (tarjetas inteligentes y dispositivos USB) de CamerFirma. El proceso siempre termina en error"},{"location":"markdown_strict/CF_guia-incidencias/#en-ciertas-instalaciones-de-versiones-compatibles-del-entorno-de-ejecucion-de-java-jre-el-cliente-no-funciona-adecuadamente","text":"Una de las posibles causas de que el Cliente no funcione en instalaciones del JRE (usando versiones y entornos declarados como compatibles) es que otra aplicaci\u00f3n ejecutada previamente haya corrompido el entorno de ejecuci\u00f3n de Java instalando incorrectamente bibliotecas como extensiones. El Cliente @firma puede no funcionar cuando alguna de las bibliotecas que usa han sido instaladas como extensiones del JRE. Para restaurar el funcionamiento normal del JRE debe seguir los siguientes pasos: Localizar el directorio de extensiones de su entorno de ejecuci\u00f3n de Java La opci\u00f3n m\u00e1s com\u00fan es el directorio lib/ext dentro de la carpeta de instalaci\u00f3n del JRE Debe tambi\u00e9n revisar las carpetas de extensiones comunes: /usr/jdk/packages/lib/ext en Sun Solaris y OpenSolaris /usr/java/packages/lib/ext en Linux %SystemRoot%\\Sun\\Java\\lib\\ext en Microsoft Windows Eliminar las siguientes bibliotecas: BouncyCastle bcprov*.jar bcmail*.jar bctsp*.jar bcpq*.jar JXAdES iText iText*.jar Apache Commons Apache Oro JMIMEMagic Notificar al proveedor de la aplicaci\u00f3n que instal\u00f3 inapropiadamente bibliotecas como extensiones para que corrija este comportamiento en sus aplicativos. Puede encontrar una peque\u00f1a gu\u00eda sobre el uso e instalaci\u00f3n de extensiones al entorno de ejecuci\u00f3n de Java en: http://download.oracle.com/javase/tutorial/ext/basics/install.html","title":"En ciertas instalaciones de versiones compatibles del Entorno de Ejecuci\u00f3n de Java (JRE) el Cliente no funciona adecuadamente"},{"location":"markdown_strict/CF_guia-incidencias/#cuando-utilizo-varias-tarjetas-inteligentes-de-firma-electronica-yo-varios-lectores-de-tarjetas-inteligentes-a-veces-no-se-muestran-todos-los-certificados","text":"El Cliente @firma inicializa durante la primera operaci\u00f3n criptogr\u00e1fica las tarjetas inteligentes encontradas en el sistema, y supone que no va a variar durante toda la ejecuci\u00f3n del programa. El insertar o extraer tarjetas durante la ejecuci\u00f3n del programa puede ocasionar fallos ocasionales. No inserte o extraiga tarjetas mientras el Cliente @firma est\u00e9 en ejecuci\u00f3n. Adicionalmente, es conveniente tener insertada \u00fanicamente la tarjeta que desea usar para realizar las operaciones de firma. Si dos tarjetas del mismo tipo (que usen el mismo controlador PKCS#11) est\u00e1n insertadas, el Cliente @firma utilizar\u00e1 \u00fanicamente la insertada en el primer lector encontrado en el sistema. El conectar y desconectar lectores de tarjetas, o cambiarlos de puerto USB, puede ocasionar fallos ocasionales. No conecte o desconecte lectores de tarjetas inteligentes mientras el Cliente @firma est\u00e9 en ejecuci\u00f3n. Si es absolutamente indispensable realizar inserciones o extracciones de tarjetas durante la ejecuci\u00f3n del Cliente @firma, reintente la operaci\u00f3n si esta fallase para permitir al Cliente @firma reconfigurarse.","title":"Cuando utilizo varias tarjetas inteligentes de firma electr\u00f3nica y/o varios lectores de tarjetas inteligentes a veces no se muestran todos los certificados."},{"location":"markdown_strict/CF_guia-incidencias/#cuando-se-recuperan-desde-java-ficheros-xml-en-formato-base64-como-resultado-de-operaciones-de-firma-la-codificacion-de-caracteres-se-corrompe","text":"Durante la creaci\u00f3n de un String de Java a partir de un binario obtenido a su vez de la decodificaci\u00f3n de un Base64 se pueden pervertir los caracteres especiales de los ficheros XML si se indica una codificaci\u00f3n err\u00f3nea en el constructor de la clase String . La soluci\u00f3n m\u00e1s r\u00e1pida es no indicar codificaci\u00f3n y confiar en las capacidades de Java de auto-detecci\u00f3n de formato de caracteres. Si esta auto-detecci\u00f3n de Java sigue proporcionando resultados incorrectos siempre puede obtener los XML directamente como texto en vez de en Base64 usando el m\u00e9todo getSignatureText() en vez de getSignatureBase64Encoded().","title":"Cuando se recuperan desde Java ficheros XML en formato Base64 como resultado de operaciones de firma la codificaci\u00f3n de caracteres se corrompe."},{"location":"markdown_strict/CF_guia-incidencias/#en-ciertas-ocasiones-usando-el-cliente-en-mozilla-firefox-con-dnie-dni-electronico-el-cliente-se-queda-bloqueado-y-no-muestra-el-dialogo-de-seleccion-de-certificados-desbloqueandose-si-retiro-el-dnie-del-lector","text":"Ciertas versiones del controlador PKCS#11 del DNIe no admiten que se establezcan varias sesiones de forma simult\u00e1nea, y si por cualquier raz\u00f3n (sesi\u00f3n SSL, etc.) el propio navegador Web Mozilla / Firefox tiene ya establecida una comunicaci\u00f3n con el DNIe en el momento en el que el Cliente @firma tambi\u00e9n lo necesita, este \u00faltimo se queda bloqueado esperando a que en navegador Mozilla / Firefox cierre su sesi\u00f3n. Para evitar estos problemas, instale la \u00faltima versi\u00f3n de los controladores de DNIe OpenDNIe disponibles en http://opendnie.cenatic.es/ , que corrigen en cierta medida estos problemas. Si no desea o no puede actualizar los controladores, es necesario cerrar las sesiones activas contra el DNIe para que el Applet @firma pueda abrir una propia. El cierre de la sesi\u00f3n contra el DNIe por parte de Mozilla / Firefox puede tardar varios minutos si el usuario no interviene, por lo que conviene forzar manualmente este cierre: Extraer el DNIe del lector y volverlo a insertar justo en el momento en el que se solicita la contrase\u00f1a del Repositorio Central de certificados de Mozilla Firefox (antes de introducirla). Es posible que Mozilla / Firefox reabra la sesi\u00f3n en la reinserci\u00f3n (adelant\u00e1ndose al Cliente @firma), por lo que quiz\u00e1s necesite repetir la operaci\u00f3n. Podemos indicar a Mozilla / Firefox que cierre la sesi\u00f3n pulsando el bot\u00f3n \u201cLog out\u201d teniendo el dispositivo \u201cDNIe PKCS#11 Module\u201d seleccionado en la ventana \u201cDispositivos de Seguridad\u201d del men\u00fa Opciones de Mozilla Firefox. Al igual que en el m\u00e9todo anterior, a veces es necesario repetir la operaci\u00f3n varias veces, ya que Mozilla / Firefox reabre autom\u00e1ticamente la comunicaci\u00f3n con el DNIe sin dar tiempo al Cliente @firma a utilizarlo. En otras ocasiones, el bot\u00f3n aparece deshabilitado aunque Mozilla / Firefox tenga una sesi\u00f3n abierta contra el dispositivo, con lo que no es posible aplicar este m\u00e9todo. < Este problema se da predominantemente en Linux, Solaris y Mac OS X. No se ha detectado en ning\u00fan caso en ninguna versi\u00f3n de Windows. Una soluci\u00f3n alternativa en sistemas basados en UNIX (Linux, Solaris, Mac OS X) es modificar la configuraci\u00f3n de OpenSC (producto en el que se basa el controlador PKCS#11 del DNIe en estas plataformas indicando que nunca se debe bloquear el acceso a las tarjetas inteligentes. Para realizar esta indicaci\u00f3n debe modificar el archivo de configuraci\u00f3n de OpenSC, normalmente situado en /etc/opensc/opensc.conf y asegurarse de que contiene una l\u00ednea descomentada con la opci\u00f3n lock_login = false; : # By default, the OpenSC PKCS#11 module will lock your card # once you authenticate to the card via C_Login. # This is to prevent other users or other applications # from connecting to the card and perform crypto operations # (which may be possible because you have already authenticated # with the card). Thus this setting is very secure. # # This behavior is a known violation of PKCS#11 specification, # and is forced due to limitation of the OpenSC framework. # # However now once one application has started using your # card with C_Login, no other application can use it, until # the first is done and calls C_Logout or C_Finalize. # In the case of many PKCS#11 application this does not happen # until you exit the application. # # Thus it is impossible to use several smart card aware # applications at the same time, e.g. you cannot run both # Firefox and Thunderbird at the same time, if both are # configured to use your smart card. # # Default: true lock_login = false; Dado que este cambio puede tener implicaciones de seguridad con otras tarjetas inteligentes (la seguridad del DNIe no se ve comprometida por \u00e9l, dado que implementa medidas adicionales de protecci\u00f3n, como la implementaci\u00f3n de la normativa CWA-14890), realice \u00fanicamente estas modificaciones si est\u00e1 completamente seguro de sus implicaciones. En ciertas distribuciones de Linux (como Guadalinex v6) el cambio no tienen ning\u00fan efecto sobre los bloqueos con DNIe, por lo que no solucionar\u00e1 el problema). En algunas ocasiones, se ha detectado que este cambio en la configuraci\u00f3n de OpenSC afecta a la comunicaci\u00f3n con la tarjeta inteligente, provocando que el PIN de la tarjeta llegue corrupto. Aseg\u00farese de introducir correctamente el PIN de su tarjeta y, en caso de que vuelva a solicitarse, cancele la operaci\u00f3n y deshaga el cambio en la configuraci\u00f3n para evitar que repetidos intentos bloqueen su DNIe.","title":"En ciertas ocasiones, usando el Cliente en Mozilla / Firefox con DNIe (DNI Electr\u00f3nico) el cliente se queda bloqueado y no muestra el di\u00e1logo de selecci\u00f3n de certificados, desbloque\u00e1ndose si retiro el DNIe del lector"},{"location":"markdown_strict/CF_guia-incidencias/#la-web-donde-esta-deplegado-el-cliente-solicita-certificado-cliente-y-aunque-este-funciona-correctamente-en-internet-explorer-y-otros-navegadores-no-ocurre-lo-mismo-con-mozilla-firefox","text":"Consulte el apartado \u201cDespliegue del cliente en servidores Web que requieren identificaci\u00f3n de los usuarios mediante certificado cliente\u201d del manual del integrador para m\u00e1s informaci\u00f3n de c\u00f3mo resolver este problema de configuraci\u00f3n de Mozilla / Firefox.","title":"La Web donde est\u00e1 deplegado el Cliente solicita certificado cliente, y aunque este funciona correctamente en Internet Explorer y otros navegadores, no ocurre lo mismo con Mozilla / Firefox"},{"location":"markdown_strict/CF_guia-incidencias/#el-cliente-deja-de-funcionar-tras-ejecutar-la-aplicacion-web-de-firma-de-la-ventanilla-unica-de-la-seguridad-social","text":"El aplicativo de Ventanilla \u00danica de la Seguridad Social hace uso de bibliotecas Java modificadas que son incompatibles con el Cliente @firma.","title":"El Cliente deja de funcionar tras ejecutar la Aplicaci\u00f3n Web de firma de la Ventanilla \u00danica de la Seguridad Social"},{"location":"markdown_strict/CF_guia-incidencias/#problema-en-la-codificacion-a-base64-de-ficheros-grandes","text":"En determinados entornos de usuario, existe un problema en la codificaci\u00f3n de ficheros a Base 64 que lleva al cierre abrupto de la m\u00e1quina virtual de Java y el subsiguiente error en la ejecuci\u00f3n del propio cliente. Este problema surge al utilizar los siguientes m\u00e9todos del cliente para la conversi\u00f3n de ficheros grandes a base 64: getFileBase64Encoded(boolean showProgress); getFileBase64Encoded(boolean showProgress, String strUri); getSignatureBase64Encoded(); En la incidencia \u201c No es posible realizar firmas de m\u00e1s de 4MB \u201d podr\u00e1 encontrar alternativas que pueden evitar que le surja este problema.","title":"Problema en la codificaci\u00f3n a Base64 de ficheros grandes"},{"location":"markdown_strict/CF_guia-incidencias/#no-es-posible-realizar-firmas-de-mas-de-4mb","text":"Al ejecutar el Cliente @firma en un entorno con Java 6u10 o superior y el plugin de nueva generaci\u00f3n activado (configuraci\u00f3n por defecto), nos encontramos con que no es posible convertir ficheros de datos mayores de 4MB a cadenas Base64. Esta operaci\u00f3n es necesaria para posteriormente adjuntar los datos firmados (o la firma impl\u00edcita generada) al formulario Web a trav\u00e9s del cual se enviar\u00e1 la informaci\u00f3n al servidor. Esta limitaci\u00f3n tambi\u00e9n puede afectar a la generaci\u00f3n de firmas XML impl\u00edcitas de ficheros mayores de 4MB. Este problema no tiene soluci\u00f3n actualmente pero es posible realizar algunas pr\u00e1cticas con las que es posible evitarlo en caso de que el propio fichero de datos no sea mayor de este tama\u00f1o. Eval\u00fae si es necesario que su sistema firme los ficheros adjuntos a una transacci\u00f3n o si basta con firmar la propia transacci\u00f3n. Esto podr\u00eda hacerse mediante un XML en el que se almacenen los datos de la transacci\u00f3n (identificador, los datos proporcionados por el usuario, nombre de los ficheros adjuntos y su hash,\u2026). Si su sistema realiza firmas de ficheros seleccionados por el usuario y se van a admitir ficheros mayores de 4MB, eval\u00fae el uso de firmas binarias (CAdES), que son de menor tama\u00f1o, en lugar de firmas XML (XAdES). El problema comentado puede afectar a la generaci\u00f3n de firmas XML (XMLdSig / XAdES) de ficheros binarios mayores de 4MB. Si es necesario el env\u00edo de ficheros mayores de 4MB al servidor, deber\u00e1n enviarse mediante el componente File de los formularios HTML. Para esto, tendremos que firmar previamente los datos y obligar a que sea el propio usuario quien seleccione los ficheros de firma generados. Se propone el siguiente modelo de aplicaci\u00f3n Web: Mostrar al usuario el formulario Web con la informaci\u00f3n que debe rellenar. Esto puede hacerse en una \u00fanica p\u00e1gina Web o en varias si la cantidad de datos lo requiere. En el punto que corresponda del formulario, se dar\u00e1 la opci\u00f3n al usuario de seleccionar los ficheros que desea adjuntar al mismo. Esto abrir\u00e1 una nueva ventana en donde se cargar\u00e1 el Cliente @firma y, mediante el m\u00e9todo descrito en el apartado 13.2 del Manual del Integrador, se dar\u00e1 al usuario la posibilidad de firmar los ficheros. En este caso, en lugar de adjuntar el resultado de la firma al formulario Web, se le permitir\u00e1 almacenarla en disco, notific\u00e1ndole que esta es la firma electr\u00f3nica generada que posteriormente se deber\u00e1 adjuntar al formulario y que, si lo desea, puede conservar como parte del resguardo de la transacci\u00f3n. En este paso se pueden firmar tantos ficheros como se deseen. Consulte el apartado 9.1 del Manual del Integrador del Cliente @firma para conocer como almacenar las firmas en el sistema del usuario. De vuelta al formulario principal y al final del mismo se mostrar\u00e1 un bot\u00f3n Aceptar que redirigir\u00e1 al usuario a una nueva p\u00e1gina en la que se cargar\u00e1 el Cliente @firma y se mostrar\u00e1 el resumen de los datos del formulario para que confirme que son v\u00e1lidos. Tambi\u00e9n en esta p\u00e1gina se mostrar\u00e1n los componentes necesarios de tipo File de HTML para que el usuario cargue los ficheros de firma generados en el paso anterior (y los documentos firmados en caso de firmas expl\u00edcitas). En esta ocasi\u00f3n no se utilizar\u00e1 el Cliente para cargar los ficheros de firma, \u00fanicamente el componente File Tras revisar los datos y seleccionar los ficheros necesarios, el usuario podr\u00e1 enviar el formulario para finalizar el tr\u00e1mite. Al pulsar el bot\u00f3n Enviar, se firmar\u00e1 la transacci\u00f3n con el Cliente @firma y seguidamente se enviar\u00e1 el formulario con esta firma. El concepto de transacci\u00f3n deber\u00e1 definirse para cada sistema. Puede ser, por ejemplo, un XML que contenga todos los datos del formulario y la relaci\u00f3n de ficheros adjuntos (nombres y hashes). NOTA: En sistemas con Java 6 y el Plugin de pr\u00f3xima generaci\u00f3n desactivado la limitaci\u00f3n se encuentra en torno a los 50MB. Sin embargo, no debe presuponerse que el usuario operar\u00e1 desde un entorno de este tipo ya que est\u00e1 obsoleto y no es la configuraci\u00f3n por defecto.","title":"No es posible realizar firmas de m\u00e1s de 4MB"},{"location":"markdown_strict/CF_guia-incidencias/#no-se-detecta-la-insercionextraccion-del-dnie-en-el-lector-u-otra-tarjeta-inteligente","text":"A veces puede ocurrir que el navegador no detecta la extracci\u00f3n o introducci\u00f3n del DNIe (u otra tarjeta inteligente) en el lector, por lo que si no hemos introducido la tarjeta previamente a que se arranque el cliente de firma, no se encontrar\u00e1 el certificado. Otro posible caso es que una vez cargado el cliente, se extraiga la tarjeta y, al realizar una operaci\u00f3n de firma, el navegador muestre los certificados de la tarjeta (aunque ya no est\u00e9 presente) fallando al intentar utilizarlo. Este es un problema del navegador en la gesti\u00f3n de los dispositivos criptogr\u00e1ficos (PKCS#11 para Mozilla y CSP para Internet Explorer), que no informa a la sesi\u00f3n abierta en el almac\u00e9n de certificados de los cambios que se producen en el mismo. La soluci\u00f3n m\u00e1s r\u00e1pida al problema es el insertar la tarjeta antes de que se produzca la carga del cliente de firma.","title":"No se detecta la inserci\u00f3n/extracci\u00f3n del DNIe en el lector (u otra tarjeta inteligente)"},{"location":"markdown_strict/CF_guia-incidencias/#no-se-detecta-el-certificado-del-dnie-tras-una-autenticacion-infructuosa","text":"Cuando se introduce mal el PIN del DNIe, ocurre que el navegador no detecta sus certificados, incluso aunque posteriormente el usuario s\u00ed lo introduzca correctamente. El problema viene del CSP (Cryptographic Service Provider) del DNI electr\u00f3nico y la mejor forma de solucionarlo es extraer e insertar el DNIe en el lector de tarjeta y volverse a autenticar.","title":"No se detecta el certificado del DNIe tras una autenticaci\u00f3n infructuosa"},{"location":"markdown_strict/CF_guia-incidencias/#despliegue-del-cliente","text":"","title":"Despliegue del Cliente"},{"location":"markdown_strict/CF_guia-incidencias/#cuando-se-despliega-el-cliente-en-entornos-donde-las-paginas-html-se-generan-dinamicamente-no-es-posible-cargar-el-applet","text":"Las p\u00e1ginas HTML provistas como ejemplo necesitan ciertos cambios cuando se quiere desplegar el Cliente en servidores donde las p\u00e1ginas se generan din\u00e1micamente (como por ejemplo, Portlets en un Servidor de Portales): Las bibliotecas Java del cliente (JAR) deben situarse en una direcci\u00f3n est\u00e1tica dentro del servidor Web, como por ejemplo: http://direcci\u00f3n/directorio_clases El JavaScript (las bibliotecas JS) debe incluirse dentro de la p\u00e1gina que invoca al Applet y puede generarse din\u00e1micamente, pero debe editarse el fichero constantes.js para indicar su localizaci\u00f3n mediante una URL absoluta: /******************************************************************************* * Ruta a los instalables. * * Si no se establece, supone que estan en el mismo directorio (que el HTML). * ******************************************************************************/ var baseDownloadURL = http://direccion/directorio_clases ; /******************************************************************************* * Ruta al instalador. * * Si no se establece, supone que estan en el mismo directorio (que el HTML). * ******************************************************************************/ var base = http://direccion/directorio_clases ;","title":"Cuando se despliega el Cliente en entornos donde las p\u00e1ginas HTML se generan din\u00e1micamente no es posible cargar el Applet"},{"location":"markdown_strict/CF_guia-incidencias/#se-producen-errores-en-la-carga-del-cliente-con-java-7u65","text":"Java 7u65 introduce un error que impide la ejecuci\u00f3n de Applet cuando se le proporcionan comandos a la m\u00e1quina virtual, como es el caso del Cliente @firma que indica la memoria m\u00ednima a reservar. Actualice a la \u00faltima versi\u00f3n de Java 7 disponible para solventar el problema.","title":"Se producen errores en la carga del Cliente con Java 7u65"},{"location":"markdown_strict/CF_guia-incidencias/#google-chrome-muestra-dialogos-de-advertencia-de-seguridad-a-los-usuarios-cuando-el-miniapplet-se-publica-bajo-ssl","text":"Para la ejecuci\u00f3n de Applets de Java, Chrome cruza la verificaci\u00f3n del certificado del servidor SSL no solo contra la lista de ra\u00edces de confianza del sistema operativo, sino tambi\u00e9n contra la lista equivalente del entorno de ejecuci\u00f3n de Java. As\u00ed, cuando se carga un Applet desde un sitio SSL cuyo certificado no sea de confianza por Java, aunque s\u00ed lo sea para el sistema operativo, se muestra un di\u00e1logo al usuario como el siguiente: < Esta situaci\u00f3n es muy com\u00fan en servidores Web con certificados de FNMT-RCM-CERES. La forma directa de evitar estos di\u00e1logos es reemplazar los certificados de servidor de FNMT-RCM-CERES por otros emitidos por una Autoridad de Certificaci\u00f3n reconocida universalmente (por Windows, Mozilla, Java, etc.). Si no fuese posible este reemplazo, la \u00fanica forma de evitarlo es que el usuario instale los certificados ra\u00edz de su sitio Web en el repositorio de proveedores de confianza de Java, para lo cual debe abrir el Panel de Control de Java y seleccionar \u201cGestionar Certificados\u201d: < Y a continuaci\u00f3n importar directamente los certificados ra\u00edz como \u201cAutoridad de Certificaci\u00f3n de Sitio Seguro\u201d, preferentemente en el almac\u00e9n de sistema: < En caso de duda, consulte con el emisor de los certificados de su sitio Web SSL para obtener los certificados ra\u00edz y ampliar estas instrucciones de instalaci\u00f3n.","title":"Google Chrome muestra di\u00e1logos de advertencia de seguridad a los usuarios cuando el MiniApplet se publica bajo SSL"},{"location":"markdown_strict/CF_guia-incidencias/#firmas-generales","text":"","title":"Firmas Generales"},{"location":"markdown_strict/CF_guia-incidencias/#alguno-de-los-formatos-de-firma-generados-con-el-cliente-firma-no-validan-adecuadamente-en-otras-plataformas","text":"Compruebe siempre las matrices de compatibilidad del cliente para verificar que los formatos no est\u00e1n sujetos a problemas de adecuaci\u00f3n con normativas/est\u00e1ndares (cuando esto ocurra estar\u00e1 as\u00ed indicado) y cu\u00e1les de los que no presentan estos problemas est\u00e1n soportados por su plataforma validadora.","title":"Alguno de los formatos de firma generados con el Cliente @firma no validan adecuadamente en otras plataformas"},{"location":"markdown_strict/CF_guia-incidencias/#algunos-dispositivos-de-creacion-de-firma-no-funcionan-con-las-funcionalidades-de-firma-multi-fase-del-cliente","text":"Estas limitaciones son impuestas por los fabricantes de los dispositivos de creaci\u00f3n de firmas y no es posible sortearlas. Consulte con el fabricante de su dispositivo de creaci\u00f3n de firmas para comprobar que funcionalidades pueden estar restringidas.","title":"Algunos dispositivos de creaci\u00f3n de firma no funcionan con las funcionalidades de firma multi-fase del Cliente"},{"location":"markdown_strict/CF_guia-incidencias/#la-configuracion-de-filtros-de-certificados-produce-un-error-cuando-se-establece-un-filtro-de-gran-tamano","text":"Este error ocurre al usar un filtro de certificados mediante el m\u00e9todo deprecado \u201csetCertFilter(String)\u201d o \u201csetMandatoryCertificateCondition(String)\u201d. Al concatenar/anidar m\u00faltiples expresiones de este tipo se produce un error en la JVM que obliga a desactivar el filtro. Debe evitarse el uso de filtros con m\u00faltiples expresiones. Es recomendable migrar las aplicaciones al nuevo sistema de filtros basado en la RFC 2254. Pueden establecerse filtros de este tipo mediante el m\u00e9todo \u201csetCertFilterRFC2254(String, String, boolean)\u201d. Mensajes de confirmaci\u00f3n durante el proceso de firma masiva A partir del Cliente @firma v3.3, cualquier acceso a disco como leer y guardar datos requiere del consentimiento expreso del usuario. Este procedimiento no afecta a la mec\u00e1nica de las aplicaciones que integran el Cliente, por lo que no requerir\u00e1n ning\u00fan tipo de modificaci\u00f3n, salvo en casos concretos de firma masiva de datos. El proceso de firma masiva program\u00e1tica dispone de un m\u00e9todo para la firma de ficheros, aseg\u00farese de utilizar este m\u00e9todo (massiveSignatureFile()) y no el de firma de datos (massiveSignatureData()) si va a firmar ficheros en disco. Por otra parte, el proceso de firma masiva program\u00e1tica no dispone de un m\u00e9todo propio para el guardado de las firmas en disco. En anteriores versiones del Cliente era posible utilizar los m\u00e9todos comunes de guardado para almacenar las firmas pero a partir de la versi\u00f3n 3.3 esto supone que se pida confirmaci\u00f3n para el guardado de cada firma individual. Por motivos de seguridad, este comportamiento no puede evitarse. Si se desea firmar ficheros y almacenar el resultado en disco, consulte la informaci\u00f3n del proceso de firma de directorios del manual del integrador del Cliente. Este mecanismo permitir\u00eda firmar y almacenar todos los ficheros sin necesidad de que el usuario lo apruebe individualmente.","title":"La configuraci\u00f3n de filtros de certificados produce un error cuando se establece un filtro de gran tama\u00f1o."},{"location":"markdown_strict/CF_guia-incidencias/#incidencias-especificas-de-la-plataforma-windows","text":"","title":"Incidencias espec\u00edficas de la plataforma Windows"},{"location":"markdown_strict/CF_guia-incidencias/#google-chrome-no-ejecuta-ni-el-miniapplet-cliente-firma-ni-ningun-otro-applet-de-java-a-pesar-de-tener-correctamente-instalado-el-jre","text":"Google Chrome sobre Microsoft Windows, a partir de su versi\u00f3n 42, deshabilita por defecto la ejecuci\u00f3n de los Applets de Java, por lo que es necesario habilitar manualmente esta caracter\u00edstica siguiendo este procedimiento: Escribir la siguiente direcci\u00f3n en la barra de URL del navegador: chrome://flags Localizar el apartado: \" Habilitar NPAPI \" y presionar \" Habilitar \". Reiniciar el navegador.","title":"Google Chrome no ejecuta ni el MiniApplet Cliente @firma ni ning\u00fan otro Applet de Java a pesar de tener correctamente instalado el JRE"},{"location":"markdown_strict/CF_guia-incidencias/#_1","text":"","title":""},{"location":"markdown_strict/CF_guia-incidencias/#error-el-conjunto-de-claves-no-existe-al-firmar-con-el-almacen-de-claves-de-windows","text":"En ciertas ocasiones, y especialmente cuando se usan tarjetas de FNMT-RCM (CERES, DNIe, APE, etc.), al firmar en un entorno operativo Windows, la operaci\u00f3n finaliza con error y se muestra en consola el mensaje \u201cEl conjunto de claves no existe\u201d (o \u201cKeyset does not exist\u201d si se tiene un Windows en ingl\u00e9s). Este problema, que si bien puede darse en cualquier versi\u00f3n de Windows es m\u00e1s com\u00fan en Windows XP, no tiene soluci\u00f3n, y se debe a una incompatibilidad de Java con los controladores CAPI de Windows instalados en el sistema del usuario (por ejemplo, los controladores de FNMT-RCM). Pruebe a actualizar tanto en entorno de ejecuci\u00f3n de Java como los posibles controladores de tarjetas que tenga instalados a la \u00faltima versi\u00f3n disponible. Si el problema se da \u00fanicamente al intentar firmar con una tarjeta inteligente o un almac\u00e9n de claves distinto del central de Windows, abra una incidencia contra el proveedor de este hardware/software de almac\u00e9n de claves.","title":"Error \u201cel conjunto de claves no existe\u201d al firmar con el almac\u00e9n de claves de Windows"},{"location":"markdown_strict/CF_guia-incidencias/#en-versiones-antiguas-de-internet-explorer-no-es-posible-tener-simultaneamente-abiertas-dos-o-mas-paginas-que-contengan-diferentes-instancias-del-cliente-firma","text":"Es posible que en versiones 7 y anteriores de Internet Explorer abrir una segunda p\u00e1gina que contenga el Cliente @firma teniendo otra ya abierta ocasione fallos de carga en la segunda o un malfuncionamiento general en ambas. Actualice a la \u00faltima versi\u00f3n de Internet Explorer disponible para su sistema operativo Windows y a al menos la versi\u00f3n 6u30 del entorno de ejecuci\u00f3n de Java (JRE) para sortear estos problemas. Si por cualquier motivo no puede actualizar Internet Explorer pruebe a usar otro navegador Web, como Google Chrome.","title":"En versiones antiguas de Internet Explorer no es posible tener simult\u00e1neamente abiertas dos o m\u00e1s p\u00e1ginas que contengan diferentes instancias del Cliente @firma"},{"location":"markdown_strict/CF_guia-incidencias/#el-cliente-no-funciona-correctamente-en-windows-sobre-arquitectura-ia64-intel-itanium","text":"La arquitectura IA64 en Windows no est\u00e1 soportada por el Cliente y no lo estar\u00e1 en un futuro pr\u00f3ximo.","title":"El Cliente no Funciona Correctamente en Windows sobre arquitectura IA64 (Intel Itanium)"},{"location":"markdown_strict/CF_guia-incidencias/#el-cliente-no-permite-acceder-a-los-almacenes-de-certificados-con-java-6-64-bits","text":"El entorno de ejecuci\u00f3n de Java 6 de 64 bits no incorpora las bibliotecas necesarias para el acceso a los almacenes de Windows y Mozilla. Estas bibliotecas tratan de instalarse durante el proceso de carga del Cliente pero, en sistemas con permisos restringidos, no ser\u00e1 posible. Si su navegador web es de 64 bits y no puede acceder al almac\u00e9n de su sistema, actualice a Java 7 (64 bits).","title":"El Cliente no permite acceder a los almacenes de certificados con Java 6 (64 bits)"},{"location":"markdown_strict/CF_guia-incidencias/#el-cliente-deja-de-funcionar-por-completo-cuando-estoy-utilizandolo-a-la-vez-que-una-aplicacion-nativa-windows-que-hace-uso-de-una-tarjeta-inteligente","text":"Algunas aplicaciones nativas de Windows que hacen uso de tarjetas inteligentes como el DNIe (aplicaci\u00f3n de escritorio, controles ActiveX en p\u00e1ginas Web de Internet Explorer\u2026) interfieren en el funcionamiento de las bibliotecas SunMSCAPI de Java para el uso de los certificados del sistema operativo. Esta interferencia provoca que cualquier intento de una aplicaci\u00f3n Java de acceder al almac\u00e9n de certificados de Windows cuando se tiene insertada la tarjeta inteligente en el lector mientras la otra aplicaci\u00f3n est\u00e9 tambi\u00e9n ejecut\u00e1ndose, genere un error interno en la m\u00e1quina virtual de Java que cierra instant\u00e1neamente la aplicaci\u00f3n afectada. Este es un problema generado por aplicaciones nativas Windows que acceden a CAPI por medios no recomendados y por defectos de la biblioteca SunMSCAPI, encargada del acceso al almac\u00e9n de certificados de Windows, que no puede ser tratado, que impiden operar cuando se realizan estos accesos no recomendados. En general, debe intentar evitarse la situaci\u00f3n en donde una aplicaci\u00f3n utilice una tarjeta inteligente a la vez que se usa el cliente de firma. Para hacerlo, conviene separar el uso de las dos aplicaciones que acceden a la tarjeta mediante la extracci\u00f3n y reinserci\u00f3n de la misma en el lector o simplemente cerrando el resto de las aplicaciones mientras se usa una de ellas. Si llegase a producirse este error, es posible que necesite cerrar la aplicaci\u00f3n Windows que produce la incompatibilidad y reiniciar la aplicaci\u00f3n (p\u00e1gina Web) que integra el cliente @firma.","title":"El Cliente deja de funcionar por completo cuando estoy utiliz\u00e1ndolo a la vez que una aplicaci\u00f3n nativa Windows que hace uso de una tarjeta inteligente"},{"location":"markdown_strict/CF_guia-incidencias/#no-es-posible-acceder-al-almacen-de-firefox-en-sistemas-windows-con-java-6u32-o-superior-y-java-7u4-o-superior","text":"La JRE de Oracle para Windows utiliza a partir de las versiones u32 de Java 6 y u4 de Java 7 el entorno de ejecuci\u00f3n de Visual C++ 2010. El Cliente @firma no podr\u00e1 acceder al almac\u00e9n de Firefox si no cuenta con este entorno de ejecuci\u00f3n instalado en su sistema. Puede descargarlo desde: http://www.microsoft.com/download/en/details.aspx?id=5555","title":"No es posible acceder al almac\u00e9n de Firefox en sistemas Windows con Java 6u32 o superior y Java 7u4 o superior"},{"location":"markdown_strict/CF_guia-incidencias/#no-es-posible-cargar-el-cliente-firma-o-acceder-al-almacen-de-certificados-con-apple-safari-y-java-6","text":"Java 6 no est\u00e1 certificado para su uso con Apple Safari sobre Windows en ninguna plataforma. En sistemas Windows Vista y Windows 7 actualice a la \u00faltima versi\u00f3n de Java 7. Por otra parte, las \u00faltimas versiones de Java no son compatibles con Safari sobre Windows XP, por lo que ser\u00e1 necesario utilizar otro navegador web.","title":"No es posible cargar el Cliente @firma o acceder al almac\u00e9n de certificados con Apple Safari y Java 6"},{"location":"markdown_strict/CF_guia-incidencias/#incidencias-especificas-de-la-plataforma-apple-os-x","text":"","title":"Incidencias espec\u00edficas de la plataforma Apple OS X"},{"location":"markdown_strict/CF_guia-incidencias/#al-intentar-abrir-un-fichero-en-safari-el-dialogo-de-seleccion-se-abre-pero-no-muestra-ningun-fichero-para-seleccionar","text":"Los Applets de Java en OS X con Safari tienen restringido por defecto el acceso al sistema de ficheros, lo cual puede causar cierta confusi\u00f3n con los Applets Cliente @firma en OS X, porque da la impresi\u00f3n de funcionar apropiadamente, pero cuando se solicita abrir o guardar un fichero, no es posible. En particular, lo que el usuario aprecia al intentar abrir un fichero es que el di\u00e1logo de selecci\u00f3n se abre, pero no muestra ning\u00fan archivo: < Para conseguir que el MiniApplet tenga acceso no restringido al sistema de ficheros del usuario es necesario que este configure Safari para habilitar el \u201cModo Inseguro\u201d para el sitio Web en concreto que publique el MiniApplet. Para ello, siga las indicaciones de Apple, que puede encontrar aqu\u00ed: http://support.apple.com/kb/HT5954","title":"Al intentar abrir un fichero en Safari el di\u00e1logo de selecci\u00f3n se abre, pero no muestra ning\u00fan fichero para seleccionar"},{"location":"markdown_strict/CF_guia-incidencias/#al-cargar-el-cliente-firma-aparece-el-componente-instalador-solicitando-la-introduccion-de-la-contrasena-de-usuario-privilegiado-pero-o-no-deseo-introducirla-por-motivos-de-seguridad-o-aunque-la-introduzca-el-proceso-termina-en-error","text":"Para el uso del repositorio de Mozilla Firefox en Mac OS X es necesario que las bibliotecas NSS est\u00e9n situadas dentro de una ruta de carga de bibliotecas, pero Firefox al instalarse en Mac OS X las instala en su propio directorio, sin a\u00f1adir este a la lista de rutas de carga de bibliotecas. Para sortear esta dificultad, el Cliente @firma, mediante su componente instalador (BootLoader), intenta crear enlaces simb\u00f3licos de estas bibliotecas desde el directorio de Firefox a /usr/lib, carpeta dentro de la lista de directorios de carga de bibliotecas. Para realizar esta copia, se necesitan ciertos privilegios, y es por esta raz\u00f3n por la que se solicita la contrase\u00f1a de usuario privilegiado. Si prefiere no introducir su contrase\u00f1a de usuario privilegiado o simplemente el proceso autom\u00e1tico del BootLoader no funciona en su entorno espec\u00edfico, siempre puede realizar la copia de ficheros de forma manual desde una ventana de terminal. Los ficheros a enlazar simb\u00f3licamente son (si alguno de estos ficheros no existe en su instalaci\u00f3n de Firefox en Mac OS X): libnspr4.dylib libplds4.dylib libplc4.dylib libmozsqlite3.dylib libnssutil3.dylib libmozutils.dylib Es necesario enlazarlos desde su directorio de origen (el de instalaci\u00f3n de Mozilla Firefox, normalmente /Applications/Firefox.app/Contents/MacOS) a /usr/lib. Si tiene instalado Mozilla Firefox y no encuentra las bibliotecas indicadas en /Applications/Firefox.app/Contents/MacOS puede intentar localizaras mediante el siguiente comando: #find / -name \u201clibnspr4.dylib\u201d Para enlazar simb\u00f3licamente las bibliotecas es recomendable usar el comando ln. Consulte la documentaci\u00f3n de Mac OS X o use el comando man para m\u00e1s informaci\u00f3n sobre el comando ln. De igual forma, es probable que necesite hacer uso del comando sudo (o su) para obtener privilegios elevados desde un terminal de comandos en Mac OS X.","title":"Al cargar el Cliente @firma aparece el componente instalador solicitando la introducci\u00f3n de la contrase\u00f1a de usuario privilegiado, pero o no deseo introducirla por motivos de seguridad o aunque la introduzca el proceso termina en error."},{"location":"markdown_strict/CF_guia-incidencias/#error-en-la-ejecucion-del-cliente-firma-en-mac-os-x-1074-o-superior","text":"Se ha detectado que los cambios de seguridad incorporados por Apple a la actualizaci\u00f3n 10.7.4 de Mac OS X Lion pueden causar problemas aleatorios en la obtenci\u00f3n de privilegios de los Applets Java firmados. Si experimenta problemas ejecutando el Applet Cliente @firma en Mac OS X 10.7.4 puede actualizar su entorno de ejecuci\u00f3n de Java a la versi\u00f3n 7 usando la versi\u00f3n de Oracle, disponible para libre descarga desde: http://www.oracle.com/technetwork/java/javase/downloads/index.html Adicionalmente, aunque Java est\u00e9 correctamente instalado, puede ser necesaria la activaci\u00f3n del soporte espec\u00edfico de Applets de Java y aplicaciones Java WebStart. Esta activaci\u00f3n puede realizarse desde \u201cPreferencias de Java\u201d, en el men\u00fa \u201cUtilidades\u201d de Mac OS X: <","title":"Error en la ejecuci\u00f3n del Cliente @firma en Mac OS X 10.7.4 o superior"},{"location":"markdown_strict/CF_guia-incidencias/#incidencias-especificas-de-las-firmas-pdf","text":"","title":"Incidencias espec\u00edficas de las firmas PDF"},{"location":"markdown_strict/CF_guia-incidencias/#el-cliente-no-permite-la-firma-de-pdf-con-ciertos-certificados","text":"Las firmas de documentos PDF realizadas externamente (que es el m\u00e9todo utilizado por el Cliente) tienen un tama\u00f1o m\u00e1ximo de octetos que pueden ocupar dentro del PDF. Como la firma incluye la cadena de certificaci\u00f3n completa, si esta es muy extensa puede llegar a agotarse este espacio y resultar en una firma inv\u00e1lida o corrupta. Si esto le ocurre, por favor, p\u00f3ngase en contacto con el servicio de atenci\u00f3n a los usuarios del Cliente @firma enviando una copia de su certificado de firma y la cadena de confianza completa. Tenga siempre mucho cuidado de no enviar jam\u00e1s las partes privadas de los certificados .","title":"El Cliente no permite la firma de PDF con ciertos certificados"},{"location":"markdown_strict/CF_guia-incidencias/#incidencias-especificas-de-las-firmas-xml","text":"","title":"Incidencias espec\u00edficas de las firmas XML"},{"location":"markdown_strict/CF_guia-incidencias/#el-cliente-no-firma-las-hojas-de-estilo-de-los-ficheros-xml","text":"Dado que las hojas de estilo de un XML pueden declararse de distintas formas, el cliente adopta distintas estrategias para cada forma de declaraci\u00f3n y seg\u00fan la variante de firma. Las formas de declarar una hoja de estilo y la forma de firmar el XML en ese caso por el Cliente son las siguientes: La hoja de estilo est\u00e1 empotrada dentro del XML, y se declara con una referencia local (el valor del atributo href de la declaraci\u00f3n del XSL es un nombre de identificador de nodo XML precedido por \u201c#\u201d). En este caso no es necesaria ninguna estrategia adicional, pues al ser parte la hoja de estilo del XML, siempre que se firma uno, se firma tambi\u00e9n el otro. Esto aplica a la totalidad de las firmas XML. La hoja de estilo est\u00e1 accesible remotamente por protocolo HTTP o HTTPS (el valor del atributo href es una URL v\u00e1lida con esquema http \u00f3 https). En este caso se a\u00f1ade una referencia a la firma que apunta a la hoja de estilo mediante la misma URL (una referencia Externally Detached). Esto aplica a la totalidad de las firmas XML). Se referencia a la hoja de estilo mediante una referencia relativa local. En este caso, dado que las referencias relativas locales se pierden al firmar (el Applet no sabe en qu\u00e9 directorio o carpeta estaba el XML para localizar el XSL, y no puede asumir d\u00f3nde se guardar\u00e1 la firma generada), las hojas de estilo no se firman. Compruebe que el XML que desea firmar declara las hojas de estilo mediante alguno de los modos soportado.","title":"El Cliente no firma las hojas de estilo de los ficheros XML"},{"location":"markdown_strict/CF_guia-incidencias/#las-firmas-xmldsig-generadas-no-son-compatibles-con-soap","text":"Esta funcionalidad est\u00e1 en estudio para ser incluida en futuras versiones del Cliente.","title":"Las firmas XMLDSig generadas no son compatibles con SOAP"},{"location":"markdown_strict/CF_guia-incidencias/#ciertos-validadores-no-aceptan-algunas-de-las-firmas-generadas-por-el-cliente-firma","text":"El Cliente @firma permite generar un amplio abanico de formatos de firmas, algunos de los cuales no est\u00e1n soportados por todos los validadores de firma actuales. Por ejemplo, firmas ODF, PDF, firmas XML expl\u00edcitas (en donde se firma el hash de un fichero)\u2026. Tambi\u00e9n existe la posibilidad de que un validador s\u00f3lo admita versiones espec\u00edficas de estos formatos. El sistema de validaci\u00f3n de firmas VALIDe soporta todas las firmas generadas con el Cliente @firma, a excepci\u00f3n de las firmas OOXML que se incorporar\u00e1n en una pr\u00f3xima versi\u00f3n.","title":"Ciertos validadores no aceptan algunas de las firmas generadas por el Cliente @firma"},{"location":"markdown_strict/CF_guia-incidencias/#el-cliente-no-genera-firmas-xml-usando-huellas-digitales-sha-2","text":"El error de Java 6845600 ( http://bugs.sun.com/view_bug.do?bug_id=6845600 ) afecta a la generaci\u00f3n de firmas XML con SHA-256 y SHA-512, y los errores de Java 6753664 y 6946836 ( http://bugs.sun.com/view_bug.do?bug_id=6753664 y http://bugs.sun.com/view_bug.do?bug_id=6946836 ) impiden usar estos algoritmos de huella digital sobre Internet Explorer. Para sortear estos problemas debe usar Java 6u30 o Java 7u2 y superiores.","title":"El Cliente no genera firmas XML usando huellas digitales SHA-2"},{"location":"markdown_strict/CF_guia-incidencias/#el-cliente-produce-un-error-de-derreferenciacion-al-generar-firmas-xades-javaxxmlcryptourireferenceexception","text":"Errores en las primeras versiones de Java 7 producen problemas internos de derreferenciaci\u00f3n al generar firmas XAdES cuando se configura la propiedad \u201ccontentTypeOid\u201d. Esta propiedad, que es la encargada de indicar el tipo de dato firmado a trav\u00e9s de un OID se representa internamente como una URI de tipo URN que Java es incapaz de derreferenciar. El problema surge tambi\u00e9n durante las operaciones de firma masiva XAdES ya que internamente utilizan esta propiedad. Este error aparece por regla general en sistemas con sistema operativo Windows 7 aunque no se descarta que surja en otros entornos como Windows XP u otros sistemas operativos. Estos errores de Java quedan solucionados en versiones posteriores de Java 7. Actualice a la \u00faltima versi\u00f3n para solventar el problema. Los errores comentados est\u00e1n reconocidos y publicados por Oracle con los identificadores 7094155 y 2219607 ( http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7094155 y http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=2219607 ).","title":"El Cliente produce un error de derreferenciaci\u00f3n al generar firmas XAdES: javax.xml.crypto.URIReferenceException:"},{"location":"markdown_strict/CF_guia-incidencias/#glosario-de-terminos","text":"","title":"Glosario de t\u00e9rminos"},{"location":"markdown_strict/CF_guia-incidencias/#firma-electronica","text":"Es el conjunto de datos, en forma electr\u00f3nica, anejos a otros datos electr\u00f3nicos o asociados funcionalmente con ellos, utilizados como medio para identificar formalmente al autor o a los autores del documento que la recoge.","title":"Firma electr\u00f3nica"},{"location":"markdown_strict/CF_guia-incidencias/#xml-digital-signature-xmldsig","text":"Es una recomendaci\u00f3n del W3C que define una sintaxis XML para la firma digital","title":"XML Digital Signature (XMLDSig)"},{"location":"markdown_strict/CF_guia-incidencias/#xml-advanced-signature-xades","text":"Es un conjunto de extensiones a las recomendaciones XML-DSig haci\u00e9ndolas adecuadas para la firma electr\u00f3nica avanzada.","title":"XML Advanced Signature (XAdES)"},{"location":"markdown_strict/CF_guia-incidencias/#rsa","text":"Es un sistema criptogr\u00e1fico de clave p\u00fablica desarrollado en 1977. En la actualidad, RSA es el primer y m\u00e1s utilizado algoritmo de este tipo y es v\u00e1lido tanto para cifrar como para firmar digitalmente.","title":"RSA"},{"location":"markdown_strict/CF_guia-incidencias/#xml","text":"Es un metalenguaje extensible de etiquetas desarrollado por el World Wide Web Consortium (W3C). Es una simplificaci\u00f3n y adaptaci\u00f3n del SGML y permite definir la gram\u00e1tica de lenguajes espec\u00edficos (de la misma manera que HTML es a su vez un lenguaje definido por SGML). Por lo tanto XML no es realmente un lenguaje en particular, sino una manera de definir lenguajes para diferentes necesidades. Algunos de estos lenguajes que usan XML para su definici\u00f3n son XHTML, SVG, MathML.","title":"XML"},{"location":"markdown_strict/CF_guia-incidencias/#office-open-xml-ooxml","text":"Es un formato de archivo abierto y est\u00e1ndar cuyas extensiones m\u00e1s comunes son .docx, .xlsx y .pptx. Se le utiliza para representar y almacenar hojas de c\u00e1lculo, diagramas, presentaciones y documentos de texto. Un archivo Office Open XML contiene principalmente datos basados en el lenguaje de marcado XML, comprimidos en un contenedor .zip espec\u00edfico.","title":"Office Open XML (OOXML)"},{"location":"markdown_strict/CF_guia-incidencias/#open-document-format-odf","text":"Es un formato de fichero est\u00e1ndar para el almacenamiento de documentos ofim\u00e1ticos tales como hojas de c\u00e1lculo, memorandos, gr\u00e1ficas y presentaciones. Aunque las especificaciones fueron inicialmente elaboradas por Sun, el est\u00e1ndar fue desarrollado por el comit\u00e9 t\u00e9cnico para Open Office XML de la organizaci\u00f3n OASIS y est\u00e1 basado en un esquema XML inicialmente creado e implementado por la suite ofim\u00e1tica OpenOffice.org (ver OpenOffice.org XML).","title":"Open Document Format (ODF)"},{"location":"markdown_strict/CF_guia-incidencias/#zip","text":"Es un formato de almacenamiento sin p\u00e9rdida, muy utilizado para la compresi\u00f3n de datos como im\u00e1genes, programas o documentos.","title":"ZIP"},{"location":"markdown_strict/CF_guia-incidencias/#pdf","text":"Es un formato de almacenamiento de documentos, desarrollado por la empresa Adobe Systems. Este formato es de tipo compuesto (imagen vectorial, mapa de bits y texto).","title":"PDF"},{"location":"markdown_strict/CF_guia-incidencias/#sha","text":"Es un sistema de funciones hash criptogr\u00e1ficas relacionadas de la Agencia de Seguridad Nacional de los Estados Unidos y publicadas por el National Institute of Standards and Technology (NIST). El primer miembro de la familia fue publicado en 1993 es oficialmente llamado SHA. Sin embargo, hoy d\u00eda, no oficialmente se le llama SHA-0 para evitar confusiones con sus sucesores. Dos a\u00f1os m\u00e1s tarde el primer sucesor de SHA fue publicado con el nombre de SHA-1. Existen cuatro variantes m\u00e1s que se han publicado desde entonces cuyas diferencias se basan en un dise\u00f1o algo modificado y rangos de salida incrementados: SHA-224, SHA-256, SHA-384, y SHA-512 (llam\u00e1ndose SHA-2 a todos ellos).","title":"SHA"},{"location":"markdown_strict/CF_guia-incidencias/#pkcs","text":"Se refiere a un grupo de est\u00e1ndares de criptograf\u00eda de clave p\u00fablica concebidos y publicados por los laboratorios de RSA en California. A RSA Security se le asignaron los derechos de licenciamiento para la patente de algoritmo de clave asim\u00e9trica RSA y adquiri\u00f3 los derechos de licenciamiento para muchas otras patentes de claves.","title":"PKCS"},{"location":"markdown_strict/CF_guia-incidencias/#w3c","text":"Es un consorcio internacional que produce recomendaciones para la World Wide Web. Est\u00e1 dirigida por Tim Berners-Lee, el creador original de URL (Uniform Resource Locator, Localizador Uniforme de Recursos), HTTP (HyperText Transfer Protocol, Protocolo de Transferencia de HiperTexto) y HTML (Lenguaje de Marcado de HiperTexto) que son las principales tecnolog\u00edas sobre las que se basa la Web.","title":"W3C"},{"location":"markdown_strict/CF_guia-incidencias/#openofficeorg","text":"es una suite ofim\u00e1tica libre (c\u00f3digo abierto y distribuci\u00f3n gratuita) que incluye herramientas como procesador de textos, hoja de c\u00e1lculo, presentaciones, herramientas para el dibujo vectorial y base de datos. Est\u00e1 disponible para varias plataformas, tales como Microsoft Windows, GNU/Linux, BSD, Solaris y Mac OS X. Soporta numerosos formatos de archivo, incluyendo como predeterminado el formato est\u00e1ndar ISO/IEC OpenDocument (ODF), entre otros formatos comunes. A febrero de 2010, OpenOffice soporta m\u00e1s de 110 idiomas.","title":"OpenOffice.org"},{"location":"markdown_strict/CF_guia-incidencias/#base64","text":"Es un sistema de numeraci\u00f3n posicional que usa 64 como base. Es la mayor potencia de dos que puede ser representada usando \u00fanicamente los caracteres imprimibles de ASCII. Esto ha propiciado su uso para codificaci\u00f3n de correos electr\u00f3nicos, PGP y otras aplicaciones. Todas las variantes famosas que se conocen con el nombre de Base64 usan el rango de caracteres A-Z, a-z y 0-9 en este orden para los primeros 62 d\u00edgitos, pero los s\u00edmbolos escogidos para los \u00faltimos dos d\u00edgitos var\u00edan considerablemente de unas a otras. Otros m\u00e9todos de codificaci\u00f3n como UUEncode y las \u00faltimas versiones de binhex usan un conjunto diferente de 64 caracteres para representar 6 d\u00edgitos binarios, pero \u00e9stos nunca son llamados Base64.","title":"Base64"},{"location":"markdown_strict/CF_guia-incidencias/#asn1","text":"Es una norma para representar datos independientemente de la m\u00e1quina que se est\u00e9 usando y sus formas de representaci\u00f3n internas. Es un protocolo de nivel de presentaci\u00f3n en el modelo OSI.","title":"ASN.1"},{"location":"markdown_strict/CF_guia-incidencias/#autoridad-de-certificacion-ca","text":"Es una entidad de confianza, responsable de emitir y revocar los certificados digitales o certificados, utilizados en la firma electr\u00f3nica, para lo cual se emplea la criptograf\u00eda de clave p\u00fablica. Jur\u00eddicamente es un caso particular de Prestador de Servicios de Certificaci\u00f3n.","title":"Autoridad de Certificaci\u00f3n (CA)"},{"location":"markdown_strict/CF_guia-incidencias/#certificado-digital","text":"Es un documento digital mediante el cual un tercero confiable (una autoridad de certificaci\u00f3n) garantiza la vinculaci\u00f3n entre la identidad de un sujeto o entidad y su clave p\u00fablica.","title":"Certificado Digital"},{"location":"markdown_strict/CF_guia-incidencias/#infraestructura-de-clave-publica-pki","text":"Es una combinaci\u00f3n de hardware y software, pol\u00edticas y procedimientos de seguridad que permiten la ejecuci\u00f3n con garant\u00edas de operaciones criptogr\u00e1ficas como el cifrado, la firma digital o el no repudio de transacciones electr\u00f3nicas. Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported Usted es libre de: | < style=\"width:0.52083in;height:0.52083in\" alt=\"share\" /> | Compartir - copiar, distribuir, ejecutar y comunicar p\u00fablicamente la obra | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"remix\" /> | hacer obras derivadas | Bajo las condiciones siguientes: | < style=\"width:0.52083in;height:0.52083in\" alt=\"by\" /> | Atribuci\u00f3n \u2014 Debe reconocer los cr\u00e9ditos de la obra de la manera especificada por el autor o el licenciante (pero no de una manera que sugiera que tiene su apoyo o que apoyan el uso que hace de su obra). | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"nc\" /> | NoComercial \u2014 No puede utilizar esta obra para fines comerciales. | | < style=\"width:0.52083in;height:0.52083in\" alt=\"sa\" /> | Compartir bajo la Misma Licencia \u2014 Si altera o transforma esta obra, o genera una obra derivada, s\u00f3lo puede distribuir la obra generada bajo una licencia id\u00e9ntica a \u00e9sta. | Entendiendo que: Renuncia \u2014 Alguna de estas condiciones puede no aplicarse si se obtiene el permiso del titular de los derechos de autor Dominio P\u00fablico \u2014 Cuando la obra o alguno de sus elementos se hallen en el dominio p\u00fablico seg\u00fan la ley vigente aplicable, esta situaci\u00f3n no quedar\u00e1 afectada por la licencia. Otros derechos \u2014 Los derechos siguientes no quedan afectados por la licencia de ninguna manera: Los derechos derivados de usos leg\u00edtimos u otras limitaciones reconocidas por ley no se ven afectados por lo anterior. Los derechos morales del auto; Derechos que pueden ostentar otras personas sobre la propia obra o su uso, como por ejemplo derechos de imagen o de privacidad. Aviso \u2014 Al reutilizar o distribuir la obra, tiene que dejar muy en claro los t\u00e9rminos de la licencia de esta obra. La mejor forma de hacerlo es enlazar a esta p\u00e1gina. Licencia LA OBRA O LA PRESTACI\u00d3N (SEG\u00daN SE DEFINEN M\u00c1S ADELANTE) SE PROPORCIONA BAJO LOS T\u00c9RMINOS DE ESTA LICENCIA P\u00daBLICA DE CREATIVE COMMONS (CCPL O LICENCIA). LA OBRA O LA PRESTACI\u00d3N SE ENCUENTRA PROTEGIDA POR LA LEY ESPA\u00d1OLA DE PROPIEDAD INTELECTUAL Y/O CUALESQUIERA OTRAS NORMAS QUE RESULTEN DE APLICACI\u00d3N. QUEDA PROHIBIDO CUALQUIER USO DE LA OBRA O PRESTACI\u00d3N DIFERENTE A LO AUTORIZADO BAJO ESTA LICENCIA O LO DISPUESTO EN LA LEY DE PROPIEDAD INTELECTUAL. MEDIANTE EL EJERCICIO DE CUALQUIER DERECHO SOBRE LA OBRA O LA PRESTACI\u00d3N, USTED ACEPTA Y CONSIENTE LAS LIMITACIONES Y OBLIGACIONES DE ESTA LICENCIA, SIN PERJUICIO DE LA NECESIDAD DE CONSENTIMIENTO EXPRESO EN CASO DE VIOLACI\u00d3N PREVIA DE LOS T\u00c9RMINOS DE LA MISMA. EL LICENCIADOR LE CONCEDE LOS DERECHOS CONTENIDOS EN ESTA LICENCIA, SIEMPRE QUE USTED ACEPTE LOS PRESENTES T\u00c9RMINOS Y CONDICIONES. 1. Definiciones La obra es la creaci\u00f3n literaria, art\u00edstica o cient\u00edfica ofrecida bajo los t\u00e9rminos de esta licencia. En esta licencia se considera una prestaci\u00f3n cualquier interpretaci\u00f3n, ejecuci\u00f3n, fonograma, grabaci\u00f3n audiovisual, emisi\u00f3n o transmisi\u00f3n, mera fotograf\u00eda u otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente aplicable. La aplicaci\u00f3n de esta licencia a una colecci\u00f3n (definida m\u00e1s adelante) afectar\u00e1 \u00fanicamente a su estructura en cuanto forma de expresi\u00f3n de la selecci\u00f3n o disposici\u00f3n de sus contenidos, no siendo extensiva a \u00e9stos. En este caso la colecci\u00f3n tendr\u00e1 la consideraci\u00f3n de obra a efectos de esta licencia. El titular originario es: En el caso de una obra literaria, art\u00edstica o cient\u00edfica, la persona natural o grupo de personas que cre\u00f3 la obra. En el caso de una obra colectiva, la persona que la edite y divulgue bajo su nombre, salvo pacto contrario. En el caso de una interpretaci\u00f3n o ejecuci\u00f3n, el actor, cantante, m\u00fasico, o cualquier otra persona que represente, cante, lea, recite, interprete o ejecute en cualquier forma una obra. En el caso de un fonograma, el productor fonogr\u00e1fico, es decir, la persona natural o jur\u00eddica bajo cuya iniciativa y responsabilidad se realiza por primera vez una fijaci\u00f3n exclusivamente sonora de la ejecuci\u00f3n de una obra o de otros sonidos. En el caso de una grabaci\u00f3n audiovisual, el productor de la grabaci\u00f3n, es decir, la persona natural o jur\u00eddica que tenga la iniciativa y asuma la responsabilidad de las fijaciones de un plano o secuencia de im\u00e1genes, con o sin sonido. En el caso de una emisi\u00f3n o una transmisi\u00f3n, la entidad de radiodifusi\u00f3n. En el caso de una mera fotograf\u00eda, aquella persona que la haya realizado. En el caso de otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente, la persona que \u00e9sta se\u00f1ale. Se considerar\u00e1n obras derivadas aquellas obras creadas a partir de la licenciada, como por ejemplo: las traducciones y adaptaciones; las revisiones, actualizaciones y anotaciones; los compendios, res\u00famenes y extractos; los arreglos musicales y, en general, cualesquiera transformaciones de una obra literaria, art\u00edstica o cient\u00edfica. Para evitar la duda, si la obra consiste en una composici\u00f3n musical o grabaci\u00f3n de sonidos, la sincronizaci\u00f3n temporal de la obra con una imagen en movimiento (synching) ser\u00e1 considerada como una obra derivada a efectos de esta licencia. Tendr\u00e1n la consideraci\u00f3n de colecciones la recopilaci\u00f3n de obras ajenas, de datos o de otros elementos independientes como las antolog\u00edas y las bases de datos que por la selecci\u00f3n o disposici\u00f3n de sus contenidos constituyan creaciones intelectuales. La mera incorporaci\u00f3n de una obra en una colecci\u00f3n no dar\u00e1 lugar a una derivada a efectos de esta licencia. El licenciador es la persona o la entidad que ofrece la obra o prestaci\u00f3n bajo los t\u00e9rminos de esta licencia y le concede los derechos de explotaci\u00f3n de la misma conforme a lo dispuesto en ella. Usted es la persona o la entidad que ejercita los derechos concedidos mediante esta licencia y que no ha violado previamente los t\u00e9rminos de la misma con respecto a la obra o la prestaci\u00f3n, o que ha recibido el permiso expreso del licenciador de ejercitar los derechos concedidos mediante esta licencia a pesar de una violaci\u00f3n anterior. La transformaci\u00f3n de una obra comprende su traducci\u00f3n, adaptaci\u00f3n y cualquier otra modificaci\u00f3n en su forma de la que se derive una obra diferente. La creaci\u00f3n resultante de la transformaci\u00f3n de una obra tendr\u00e1 la consideraci\u00f3n de obra derivada. Se entiende por reproducci\u00f3n la fijaci\u00f3n directa o indirecta, provisional o permanente, por cualquier medio y en cualquier forma, de toda la obra o la prestaci\u00f3n o de parte de ella, que permita su comunicaci\u00f3n o la obtenci\u00f3n de copias. Se entiende por distribuci\u00f3n la puesta a disposici\u00f3n del p\u00fablico del original o de las copias de la obra o la prestaci\u00f3n, en un soporte tangible, mediante su venta, alquiler, pr\u00e9stamo o de cualquier otra forma. Se entiende por comunicaci\u00f3n p\u00fablica todo acto por el cual una pluralidad de personas, que no pertenezcan al \u00e1mbito dom\u00e9stico de quien la lleva a cabo, pueda tener acceso a la obra o la prestaci\u00f3n sin previa distribuci\u00f3n de ejemplares a cada una de ellas. Se considera comunicaci\u00f3n p\u00fablica la puesta a disposici\u00f3n del p\u00fablico de obras o prestaciones por procedimientos al\u00e1mbricos o inal\u00e1mbricos, de tal forma que cualquier persona pueda acceder a ellas desde el lugar y en el momento que elija. La explotaci\u00f3n de la obra o la prestaci\u00f3n comprende la reproducci\u00f3n, la distribuci\u00f3n, la comunicaci\u00f3n p\u00fablica y, en su caso, la transformaci\u00f3n. 2. L\u00edmites de los derechos. Nada en esta licencia pretende reducir o restringir cualesquiera l\u00edmites legales de los derechos exclusivos del titular de los derechos de propiedad intelectual de acuerdo con la Ley de propiedad intelectual o cualesquiera otras leyes aplicables, ya sean derivados de usos leg\u00edtimos, tales como la copia privada o la cita, u otras limitaciones como la resultante de la primera venta de ejemplares (agotamiento). 3. Concesi\u00f3n de licencia. Conforme a los t\u00e9rminos y a las condiciones de esta licencia, el licenciador concede, por el plazo de protecci\u00f3n de los derechos de propiedad intelectual y a t\u00edtulo gratuito, una licencia de \u00e1mbito mundial no exclusiva que incluye los derechos siguientes: Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n. Derecho a incorporar la obra o la prestaci\u00f3n en una o m\u00e1s colecciones. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n l\u00edcitamente incorporada en una colecci\u00f3n. Derecho de transformaci\u00f3n de la obra para crear una obra derivada siempre y cuando se incluya en \u00e9sta una indicaci\u00f3n de la transformaci\u00f3n o modificaci\u00f3n efectuada. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de obras derivadas creadas a partir de la obra licenciada. Derecho a extraer y reutilizar la obra o la prestaci\u00f3n de una base de datos. Para evitar cualquier duda, el titular originario: Conserva el derecho a percibir las remuneraciones o compensaciones previstas por actos de explotaci\u00f3n de la obra o prestaci\u00f3n, calificadas por la ley como irrenunciables e inalienables y sujetas a gesti\u00f3n colectiva obligatoria. Renuncia al derecho exclusivo a percibir, tanto individualmente como mediante una entidad de gesti\u00f3n colectiva de derechos, cualquier remuneraci\u00f3n derivada de actos de explotaci\u00f3n de la obra o prestaci\u00f3n que usted realice. Estos derechos se pueden ejercitar en todos los medios y formatos, tangibles o intangibles, conocidos en el momento de la concesi\u00f3n de esta licencia. Los derechos mencionados incluyen el derecho a efectuar las modificaciones que sean precisas t\u00e9cnicamente para el ejercicio de los derechos en otros medios y formatos. Todos los derechos no concedidos expresamente por el licenciador quedan reservados, incluyendo, a t\u00edtulo enunciativo pero no limitativo, los derechos morales irrenunciables reconocidos por la ley aplicable. En la medida en que el licenciador ostente derechos exclusivos previstos por la ley nacional vigente que implementa la directiva europea en materia de derecho sui generis sobre bases de datos, renuncia expresamente a dichos derechos exclusivos. 4. Restricciones. La concesi\u00f3n de derechos que supone esta licencia se encuentra sujeta y limitada a las restricciones siguientes: Usted puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n solamente bajo los t\u00e9rminos de esta licencia y debe incluir una copia de la misma, o su Identificador Uniforme de Recurso (URI). Usted no puede ofrecer o imponer ninguna condici\u00f3n sobre la obra o prestaci\u00f3n que altere o restrinja los t\u00e9rminos de esta licencia o el ejercicio de sus derechos por parte de los concesionarios de la misma. Usted no puede sublicenciar la obra o prestaci\u00f3n. Usted debe mantener intactos todos los avisos que se refieran a esta licencia y a la ausencia de garant\u00edas. Usted no puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n con medidas tecnol\u00f3gicas que controlen el acceso o el uso de una manera contraria a los t\u00e9rminos de esta licencia. Esta secci\u00f3n 4.a tambi\u00e9n afecta a la obra o prestaci\u00f3n incorporada en una colecci\u00f3n, pero ello no implica que \u00e9sta en su conjunto quede autom\u00e1ticamente o deba quedar sujeta a los t\u00e9rminos de la misma. En el caso que le sea requerido, previa comunicaci\u00f3n del licenciador, si usted incorpora la obra en una colecci\u00f3n y/o crea una obra derivada, deber\u00e1 quitar cualquier cr\u00e9dito requerido en el apartado 4.b, en la medida de lo posible. Si usted reproduce, distribuye o comunica p\u00fablicamente la obra o la prestaci\u00f3n, una colecci\u00f3n que la incorpore o cualquier obra derivada, debe mantener intactos todos los avisos sobre la propiedad intelectual e indicar, de manera razonable conforme al medio o a los medios que usted est\u00e9 utilizando: El nombre del autor original, o el seud\u00f3nimo si es el caso, as\u00ed como el del titular originario, si le es facilitado. El nombre de aquellas partes (por ejemplo: instituci\u00f3n, publicaci\u00f3n, revista) que el titular originario y/o el licenciador designen para ser reconocidos en el aviso legal, las condiciones de uso, o de cualquier otra manera razonable. El t\u00edtulo de la obra o la prestaci\u00f3n si le es facilitado. El URI, si existe, que el licenciador especifique para ser vinculado a la obra o la prestaci\u00f3n, a menos que tal URI no se refiera al aviso legal o a la informaci\u00f3n sobre la licencia de la obra o la prestaci\u00f3n. En el caso de una obra derivada, un aviso que identifique la transformaci\u00f3n de la obra en la obra derivada (p. ej., \"traducci\u00f3n castellana de la obra de Autor Original,\" o \"gui\u00f3n basado en obra original de Autor Original\"). Este reconocimiento debe hacerse de manera razonable. En el caso de una obra derivada o incorporaci\u00f3n en una colecci\u00f3n estos cr\u00e9ditos deber\u00e1n aparecer como m\u00ednimo en el mismo lugar donde se hallen los correspondientes a otros autores o titulares y de forma comparable a los mismos. Para evitar la duda, los cr\u00e9ditos requeridos en esta secci\u00f3n s\u00f3lo ser\u00e1n utilizados a efectos de atribuci\u00f3n de la obra o la prestaci\u00f3n en la manera especificada anteriormente. Sin un permiso previo por escrito, usted no puede afirmar ni dar a entender impl\u00edcitamente ni expl\u00edcitamente ninguna conexi\u00f3n, patrocinio o aprobaci\u00f3n por parte del titular originario, el licenciador y/o las partes reconocidas hacia usted o hacia el uso que hace de la obra o la prestaci\u00f3n. Para evitar cualquier duda, debe hacerse notar que las restricciones anteriores (p\u00e1rrafos 4.a y 4.b) no son de aplicaci\u00f3n a aquellas partes de la obra o la prestaci\u00f3n objeto de esta licencia que \u00fanicamente puedan ser protegidas mediante el derecho sui generis sobre bases de datos recogido por la ley nacional vigente implementando la directiva europea de bases de datos 5. Exoneraci\u00f3n de responsabilidad A MENOS QUE SE ACUERDE MUTUAMENTE ENTRE LAS PARTES, EL LICENCIADOR OFRECE LA OBRA O LA PRESTACI\u00d3N TAL CUAL (ON AN \"AS-IS\" BASIS) Y NO CONFIERE NINGUNA GARANT\u00cdA DE CUALQUIER TIPO RESPECTO DE LA OBRA O LA PRESTACI\u00d3N O DE LA PRESENCIA O AUSENCIA DE ERRORES QUE PUEDAN O NO SER DESCUBIERTOS. ALGUNAS JURISDICCIONES NO PERMITEN LA EXCLUSI\u00d3N DE TALES GARANT\u00cdAS, POR LO QUE TAL EXCLUSI\u00d3N PUEDE NO SER DE APLICACI\u00d3N A USTED. 6. Limitaci\u00f3n de responsabilidad. SALVO QUE LO DISPONGA EXPRESA E IMPERATIVAMENTE LA LEY APLICABLE, EN NING\u00daN CASO EL LICENCIADOR SER\u00c1 RESPONSABLE ANTE USTED POR CUALESQUIERA DA\u00d1OS RESULTANTES, GENERALES O ESPECIALES (INCLUIDO EL DA\u00d1O EMERGENTE Y EL LUCRO CESANTE), FORTUITOS O CAUSALES, DIRECTOS O INDIRECTOS, PRODUCIDOS EN CONEXI\u00d3N CON ESTA LICENCIA O EL USO DE LA OBRA O LA PRESTACI\u00d3N, INCLUSO SI EL LICENCIADOR HUBIERA SIDO INFORMADO DE LA POSIBILIDAD DE TALES DA\u00d1OS. 7. Finalizaci\u00f3n de la licencia Esta licencia y la concesi\u00f3n de los derechos que contiene terminar\u00e1n autom\u00e1ticamente en caso de cualquier incumplimiento de los t\u00e9rminos de la misma. Las personas o entidades que hayan recibido de usted obras derivadas o colecciones bajo esta licencia, sin embargo, no ver\u00e1n sus licencias finalizadas, siempre que tales personas o entidades se mantengan en el cumplimiento \u00edntegro de esta licencia. Las secciones 1, 2, 5, 6, 7 y 8 permanecer\u00e1n vigentes pese a cualquier finalizaci\u00f3n de esta licencia. Conforme a las condiciones y t\u00e9rminos anteriores, la concesi\u00f3n de derechos de esta licencia es vigente por todo el plazo de protecci\u00f3n de los derechos de propiedad intelectual seg\u00fan la ley aplicable. A pesar de lo anterior, el licenciador se reserva el derecho a divulgar o publicar la obra o la prestaci\u00f3n en condiciones distintas a las presentes, o de retirar la obra o la prestaci\u00f3n en cualquier momento. No obstante, ello no supondr\u00e1 dar por concluida esta licencia (o cualquier otra licencia que haya sido concedida, o sea necesario ser concedida, bajo los t\u00e9rminos de esta licencia), que continuar\u00e1 vigente y con efectos completos a no ser que haya finalizado conforme a lo establecido anteriormente, sin perjuicio del derecho moral de arrepentimiento en los t\u00e9rminos reconocidos por la ley de propiedad intelectual aplicable. 8. Miscel\u00e1nea Cada vez que usted realice cualquier tipo de explotaci\u00f3n de la obra o la prestaci\u00f3n, o de una colecci\u00f3n que la incorpore, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra o la prestaci\u00f3n en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Cada vez que usted realice cualquier tipo de explotaci\u00f3n de una obra derivada, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra objeto de esta licencia en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Si alguna disposici\u00f3n de esta licencia resulta inv\u00e1lida o inaplicable seg\u00fan la Ley vigente, ello no afectar\u00e1 la validez o aplicabilidad del resto de los t\u00e9rminos de esta licencia y, sin ninguna acci\u00f3n adicional por cualquiera las partes de este acuerdo, tal disposici\u00f3n se entender\u00e1 reformada en lo estrictamente necesario para hacer que tal disposici\u00f3n sea v\u00e1lida y ejecutiva. No se entender\u00e1 que existe renuncia respecto de alg\u00fan t\u00e9rmino o disposici\u00f3n de esta licencia, ni que se consiente violaci\u00f3n alguna de la misma, a menos que tal renuncia o consentimiento figure por escrito y lleve la firma de la parte que renuncie o consienta. Esta licencia constituye el acuerdo pleno entre las partes con respecto a la obra o la prestaci\u00f3n objeto de la licencia. No caben interpretaciones, acuerdos o condiciones con respecto a la obra o la prestaci\u00f3n que no se encuentren expresamente especificados en la presente licencia. El licenciador no estar\u00e1 obligado por ninguna disposici\u00f3n complementaria que pueda aparecer en cualquier comunicaci\u00f3n que le haga llegar usted. Esta licencia no se puede modificar sin el mutuo acuerdo por escrito entre el licenciador y usted.","title":"Infraestructura de Clave P\u00fablica (PKI)"},{"location":"markdown_strict/CF_guia-uso-interfaz/","text":"< Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported . \u00cdndice 1. Introducci\u00f3n [4](#introducci\u00f3n) 2. Objeto del documento [5](#objeto-del-documento) 3. Requisitos m\u00ednimos [6](#requisitos-m\u00ednimos) 4. Gu\u00eda de Uso [7](#gu\u00eda-de-uso) Perfiles de usuario [9](#perfiles-de-usuario) Opciones de configuraci\u00f3n [10](#opciones-de-configuraci\u00f3n) Firma electr\u00f3nica [16](#firma-electr\u00f3nica) Multifirma [19](#multifirma) Cofirma [20](#cofirma) Contrafirma [21](#contrafirma) Multifirma Masiva [24](#multifirma-masiva) Validaci\u00f3n de firmas [30](#validaci\u00f3n-de-firmas) Cifrado de datos [32](#cifrado-de-datos) Contrase\u00f1a de cifrado [33](#contrase\u00f1a-de-cifrado) Clave de cifrado [34](#clave-de-cifrado) Almac\u00e9n de claves de cifrado [35](#almac\u00e9n-de-claves-de-cifrado) Descifrado de datos [37](#descifrado-de-datos) Contrase\u00f1a de cifrado [38](#contrase\u00f1a-de-cifrado-1) Clave de cifrado [39](#clave-de-cifrado-1) Ensobrado digital [41](#ensobrado-digital) Desensobrado digital [46](#desensobrado-digital) 5. Pol\u00edtica de firma de la AGE [48](#pol\u00edtica-de-firma-de-la-age) 6. Factura electr\u00f3nica [49](#factura-electr\u00f3nica) 7. Instalaci\u00f3n de Certificados. [50](#instalaci\u00f3n-de-certificados.) Instalaci\u00f3n de certificados software en Windows / Internet Explorer [51](#instalaci\u00f3n-de-certificados-software-en-windows-internet-explorer) Instalaci\u00f3n de certificados software en Mozilla Firefox [56](#instalaci\u00f3n-de-certificados-software-en-mozilla-firefox) Instalaci\u00f3n de certificados software en el almac\u00e9n de Mac OS X [59](#instalaci\u00f3n-de-certificados-software-en-el-almac\u00e9n-de-mac-os-x) Instalaci\u00f3n de certificados software en Google Chrome y Apple Safari [60](#instalaci\u00f3n-de-certificados-software-en-google-chrome-y-apple-safari) Uso de certificados desde tarjetas inteligentes [60](#uso-de-certificados-desde-tarjetas-inteligentes) DNIe (DNI Electr\u00f3nico) [60](#dnie-dni-electr\u00f3nico) Otros certificados [67](#otros-certificados) 8. Resoluci\u00f3n de Problemas [68](#resoluci\u00f3n-de-problemas) La aplicaci\u00f3n se bloquea al realizar b\u00fasquedas en la pantalla de ayuda [68](#la-aplicaci\u00f3n-se-bloquea-al-realizar-b\u00fasquedas-en-la-pantalla-de-ayuda) 9. Glosario de t\u00e9rminos [69](#glosario-de-t\u00e9rminos) 10. FAQ. [72](#faq.) Creative Commons [74](#Licencia_Creative_Commons) Introducci\u00f3n La Interfaz de Escritorio del Cliente @firma es una aplicaci\u00f3n de escritorio que permite acceder a las distintas funcionalidades criptogr\u00e1ficas del Cliente @firma sin necesidad de instalarlo ni ejecutar el navegador Web. La interfaz de escritorio est\u00e1 orientada a un uso personal de las distintas funciones criptogr\u00e1ficas de las que dispone y no como parte de una tramitaci\u00f3n Web. Se facilita su uso por medio de asistentes que explican cada paso a seguir para la realizaci\u00f3n de una operaci\u00f3n y, al contrario que el Cliente @firma, desde la Interfaz de Escritorio es posible decidir a qu\u00e9 almac\u00e9n de certificados deseamos acceder. La interfaz de escritorio hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en alguno de los almacenes de certificados del sistema o en un almac\u00e9n en fichero. Los almacenes soportados son: Almac\u00e9n de Windows / Internet Explorer Almac\u00e9n de Mozilla Firefox Almac\u00e9n de Mac OS X Almac\u00e9n en fichero P12/PFX Tambi\u00e9n es posible utilizar dispositivos de firma externos como el DNIe, para lo cual es necesario configurar estos dispositivos en el almac\u00e9n de certificados desde el que se desee utilizar. Objeto del documento El objeto del presente documento es explicar el procedimiento b\u00e1sico para la realizaci\u00f3n de las distintas operaciones criptogr\u00e1ficas soportadas por la interfaz de escritorio del Cliente @firma: Firma electr\u00f3nica Multifirma Multifirma masiva Cifrado de datos Descifrado de datos Ensobrado digital Desensobrado digital Adicionalmente, se detalla el procedimiento que debe seguir el usuario para la instalaci\u00f3n de certificados electr\u00f3nicos en los distintos almacenes soportados. Requisitos m\u00ednimos Sistema operativo: XP, Vista, 7, Server 2003, Server2008 Linux (Guadalinex, Ubuntu) MacOS X 10.6, 10.7 Sun Solaris / OpenSolaris 10 M\u00e1quina virtual Java: JRE 1.6 update 30 o superior Certificado digital de usuario instalado en el almac\u00e9n que se desee utilizar o disponible a trav\u00e9s de un m\u00f3dulo PKCS#11 configurado en el sistema (por ejemplo el DNIe). Gu\u00eda de Uso La interfaz de escritorio del Cliente @firma es una aplicaci\u00f3n independiente que puede utilizarse sin necesidad de que el propio Cliente est\u00e9 instalado en el sistema del usuario. Para la ejecuci\u00f3n de esta interfaz es necesario cumplir con los requisitos detallados en el apartado \u201cRequisitos m\u00ednimos\u201d del presente documento. La vista principal de la interfaz de escritorio es: < En ella se muestra una serie de pesta\u00f1as que permiten acceden a distintas funcionalidades de la Interfaz de Escritorio del Cliente @firma. Estas son: Firma: Para la realizaci\u00f3n de firmas electr\u00f3nicas. Multifirma: Para la realizaci\u00f3n de cofirma y contrafirmas. Validaci\u00f3n: Para la validaci\u00f3n de firmas a nivel de estructura y la extracci\u00f3n de los datos firmados. Cifrado: Para el cifrado de datos. Descifrado: Para el descifrado de datos. Adicionalmente, es posible habilitar el resto de opciones disponibles activando la vista avanzada de la Interfaz desde la pantalla de opciones (ver apartado \u201c Opciones de configuraci\u00f3n \u201d), con lo cual la interfaz aparecer\u00eda como sigue: < En la vista avanzada nuevas opciones que dan acceso a otras de las funciones criptogr\u00e1ficas del Cliente @firma. Las nuevas opciones disponibles son: Firma Masiva: Para la realizaci\u00f3n de operaciones de firma y multifirma sobre una gran cantidad de ficheros simult\u00e1neamente. Ensobrado: Para la generaci\u00f3n de sobres digitales. Desensobrado: Para el extraer los documentos de los sobres digitales. Adicionalmente, la vista avanzada desbloquea nuevas opciones en elemento de las pesta\u00f1as de la vista simple. Estas son: Los formatos de firma \u201cXAdES Enveloping\u201d y \u201cXAdES Enveloped\u201d. El modo de cifrado/descifrado mediante claves. Algoritmos de cifrado/descifrados distintos de: SHA1 con 3Des (para el cifrado/descifrado mediante contrase\u00f1as). AES (para el cifrado/descifrado mediante claves). La interfaz de escritorio dispone de un sistema de ayuda integrado . Cuando el usuario tiene alguna duda sobre el objetivo de un componente de la interfaz puede seleccionarlo y pulsar el bot\u00f3n \u201cF1\u201d de su teclado. El sistema de ayuda se activar\u00e1 y le mostrar\u00e1 la ayuda relativa al componente seleccionado. Perfiles de usuario La interfaz de escritorio del Cliente @firma permite configurar perfiles de usuario en los que se almacenan las opciones de configuraci\u00f3n establecidas por este. Al arrancar la aplicaci\u00f3n, si ya defini\u00f3 alg\u00fan perfil de usuario, se le mostrar\u00e1 un di\u00e1logo para la selecci\u00f3n del perfil. En este di\u00e1logo, deber\u00e1 seleccionar el perfil que desee cargar y pulsar el bot\u00f3n Aceptar. < Puede crear nuevos perfiles de usuario, o editar y eliminar los existentes, desde la ventana de opciones de configuraci\u00f3n de la interfaz de escritorio. Consulte el apartado \u201cOpciones de configuraci\u00f3n\u201d para m\u00e1s informaci\u00f3n. Opciones de configuraci\u00f3n Es posible acceder a las opciones de configuraci\u00f3n de la Interfaz de Escritorio del Cliente @firma por medio del elemento \u201cOpciones\u201d del men\u00fa \u201cHerramientas\u201d. < Las opciones disponibles en la ventana de Opciones, por medio de cada una de sus pesta\u00f1as, son: General: < General: Habilitar opciones de configuraci\u00f3n avanzadas Esta opci\u00f3n habilita la vista y opciones avanzadas de la Interfaz de Escritorio. Criptograf\u00eda: Algoritmo de huella digital por defecto: Es el algoritmo que se debe utilizar para ejecutar las firmas electr\u00f3nicas. Por defecto se utilizar\u00e1 SHA-1 (SHA1withRSA). No se recomienda modificar este valor salvo que se est\u00e9 seguro que el formato de firmas y el almac\u00e9n de certificados que se desea utilizar soportan este algoritmo. Utilizar tambi\u00e9n este algoritmo para las referencias internas XML. Esta opci\u00f3n permite que las referencias internas de las firmas XML se realicen con el algoritmo seleccionado. Pol\u00edtica de firma Configurar pol\u00edtica de firma Habilita la creaci\u00f3n de firmas EPES. Esta configuraci\u00f3n aplica a firmas en formato CAdES, XAdES y PAdES. Identificador de la pol\u00edtica (OID) OID identificador de la pol\u00edtica de firma. Calificador de la pol\u00edtica de firma (URL) URL con la localizaci\u00f3n de la pol\u00edtica de firma. Huella digital SHA1 Huella digital declarada para la pol\u00edtica de firma. Consulte la documentaci\u00f3n de su pol\u00edtica de firma para conocer los valores predefinidos para cada propiedad de la pol\u00edtica. Puede consultar las opciones de configuraci\u00f3n de la pol\u00edtica de firma de la AGE en el apartado \u201c Pol\u00edtica de firma de la AGE \u201d del presente documento. Para la generaci\u00f3n de firmas de facturas electr\u00f3nicas no es necesario configurar la pol\u00edtica de firma, basta con configurar el formato de firma de facturas electr\u00f3nicas, ya que este establece internamente los atributos de la pol\u00edtica. Cualquier configuraci\u00f3n de pol\u00edtica de firma establecida a trav\u00e9s de este di\u00e1logo se ignorar\u00e1 al generar firmas en formato de factura electr\u00f3nica. Configuraci\u00f3n de firma < Firmas de documentos PDF: Motivo / raz\u00f3n de la firma electr\u00f3nica. Establece el motivo asociado a las firmas PDF que se generen. Lugar donde se realiza la firma electr\u00f3nica. Establece la localizaci\u00f3n asociada a las firmas PDF que se generen. Datos de contacto del firmante. Establece la informaci\u00f3n de contacto de quien genera la firma PDF. Formato PAdES. Establece el tipo de firmas PAdES que se generar\u00e1n. Las opciones posibles son PAdES B\u00e1sico (Necesario si queremos generar varias firmas sobre el mismo PDF) PAdES BES Accesibilidad < Texto: Grande Aumenta el tama\u00f1o del texto para facilitar su legibilidad. Negrita Configura que el texto por defecto aparezca en negrita. Combinaci\u00f3n de colores: Alto contraste Habilita el modo alto contraste para la aplicaci\u00f3n. Gesti\u00f3n del foco Remarcar elementos con foco Remarca los componentes que reciben el foco. Ventana Maximizar todas las ventanas Maximiza todas las ventanas de la aplicaci\u00f3n para mejorar su visibilidad. Cursos de texto Grande Aumenta el tama\u00f1o del cursor de texto para facilitar su localizaci\u00f3n. Valores por defecto Restablece la configuraci\u00f3n por defecto de accesibilidad. Aplicar Aplica a la interfaz la configuraci\u00f3n de accesibilidad introducida. Perfiles de usuario < Perfil actual Perfil actual cargado. Perfiles Perfiles disponibles Listado de perfiles de usuario disponibles. Cada perfil tiene asociado valores para cada una de las opciones de configuraci\u00f3n de las pesta\u00f1as General, Contexto de firma y Accesibilidad de la ventana de opciones. Cargar Carga el perfil seleccionado, restableciendo las opciones configuradas para ese perfil. Eliminar Elimina el perfil seleccionado. Se pedir\u00e1 confirmaci\u00f3n al usuario antes de proceder a la eliminaci\u00f3n. Guardar Guarda las opciones de configuraci\u00f3n establecidas actualmente en las pesta\u00f1as General, Contexto de firma y Accesibilidad en el perfil actual de usuario. Si el perfil actual es el Predeterminado, se crear\u00e1 un nuevo perfil tal como ocurrir\u00eda con la opci\u00f3n Guardar como. Guardar como Crea un nuevo perfil de usuario con las opciones de configuraci\u00f3n establecidas actualmente. Se le pedir\u00e1 al usuario que inserte el nombre del nuevo perfil. Firma electr\u00f3nica Desde la pesta\u00f1a \u201c Firma \u201d es posible realizar firmas electr\u00f3nicas sobre un documento local o remoto en diversos formatos. < Las opciones disponibles son: Fichero a firmar digitalmente: Permite seleccionar el fichero que se desea firmar. Es posible pulsar el bot\u00f3n \u201cExaminar\u201d para buscar un fichero en disco o escribir directamente su ruta (local o remota) en la caja de texto asociada. Almac\u00e9n de certificados: Permite seleccionar el almac\u00e9n en donde se encuentra el certificado que deseamos utilizar para realizar la firma. Las opciones disponibles son: Windows / Internet Explorer: Para tomar el certificado del almac\u00e9n de Windows o un dispositivo externo (por ejemplo, el DNIe) instalado en el sistema. Mozilla Firefox (unificado): Para tomar el certificado del almac\u00e9n de Firefox o un dispositivo externo (por ejemplo, el DNIe) configurado en este almac\u00e9n. PKCS#12 / PFX: Para tomar el certificado de un almac\u00e9n en disco en formato P12 o PFX. Formato: Permite seleccionar el formato de firma electr\u00f3nica. Los formatos disponibles son: Firma est\u00e1ndar (XAdES Detached): Principal formato de firma avanzada XML utilizado en la Administraci\u00f3n P\u00fablica. XAdES enveloping: S\u00f3lo disponible en la vista avanzada. Formato de firma avanzada XML. XAdES enveloped: S\u00f3lo disponible en la vista avanzada. Formato de firma avanzada XML. S\u00f3lo permite firmar ficheros XML. CAdES: Formato de firma avanzada binaria. Permite decidir si se deben incluir los datos firmados dentro del fichero de firma. PAdES: Formato de firma avanzada para documentos PDF. S\u00f3lo permite firmar este tipo de documentos. Factura Electr\u00f3nica: Formato espec\u00edfico para la firma de facturas electr\u00f3nicas acordes la versi\u00f3n 3.1 del esquema de factura. Este formato configura todas las propiedades necesarias (incluida la pol\u00edtica de firma) para que las firmas sean correctamente validadas por los validadores de facturas. ODF (Open Document Format): Formato de firma de documentos ODF. Estos son los documentos generados por las suites ofim\u00e1ticas \u201cOpenOffice.org\u201d y \u201cLibreOffice\u201d. Los formatos soportados son: \u201c.odt\u201d, \u201c.ods\u201d y \u201c.odp\u201d. OOXML (Office Open XML): Formato de firma de documentos OOXML. Estos son los documentos generados por la suite ofim\u00e1tica \u201cMicrosoft Office\u201d 2007 y 2010. Los formatos soportados son: \u201c.docx\u201d, \u201c.xlsx\u201d, \u201c.pptx\u201d y \u201c.ppsx\u201d. La Plataforma servidora @firma y la herramienta VALIDe no validan este tipo de firmas. Para ejecutar la operaci\u00f3n pulse el bot\u00f3n \u201cFirmar\u201d. A continuaci\u00f3n se le mostrar\u00e1 un di\u00e1logo modal para la selecci\u00f3n del certificado que desea utilizar para la firma. < Si la operaci\u00f3n finaliz\u00f3 correctamente, se le mostrar\u00e1 un di\u00e1logo para el guardado de la firma electr\u00f3nica generada. Tenga en cuenta que si el almac\u00e9n de certificados seleccionado est\u00e1 protegido con contrase\u00f1a, se le solicitar\u00e1 esta antes de poder acceder al listado de certificados. < Todas las firmas generadas a trav\u00e9s de esta interfaz incluyen los datos firmados dentro del fichero de firma (firma impl\u00edcita), a excepci\u00f3n de la firmas en formato CAdES en donde se da a elegir esta caracter\u00edstica a trav\u00e9s del di\u00e1logo: < Multifirma Desde la pesta\u00f1a \u201c Multifirma \u201d es posible realizar cofirmas y contrafirmas sobre firmas electr\u00f3nicas ya generadas. Esto es, agregar nuevos firmantes a firmas ya existentes, ya sea para aprobar tambi\u00e9n el documento (cofirmas) o aprobar una o varias de las firmas ya existentes (contrafirmas). < Las opciones disponibles son: Almac\u00e9n / repositorio de certificados: Permite seleccionar el almac\u00e9n en donde se encuentra el certificado que deseamos utilizar para realizar la firma. Las opciones disponibles son: Windows / Internet Explorer: Para tomar el certificado del almac\u00e9n de Windows o un dispositivo externo (por ejemplo, el DNIe) instalado en el sistema. Mozilla Firefox (unificado): Para tomar el certificado del almac\u00e9n de Firefox o un dispositivo externo (por ejemplo, el DNIe) configurado en este almac\u00e9n. PKCS#12 / PFX: Para tomar el certificado de un almac\u00e9n en disco en formato P12 o PFX. Tipo de multifirma Agregar nueva firma (Cofirma): Permite agregar nuevas firmas a un documento de firmas. En el caso de las firmas PDF, ODF y OOXML. Para agregar nuevas firmas al documento basta con firmarlo m\u00faltiples veces a trav\u00e9s de la pesta\u00f1a \u201cFirma\u201d de la interfaz. Refrendar una firma (Contrafirma): Permite firmar firmas anteriores de un documento de firmas. Al pulsar el bot\u00f3n \u201cFirmar\u201d se abrir\u00e1 un asistente para la generaci\u00f3n de la multifirma. Este asistente variar\u00e1 seg\u00fan se haya decidido realizar una cofirma o una contrafirma. Cofirma Esta opci\u00f3n nos mostrar\u00e1 un asistente para la generaci\u00f3n de una cofirma electr\u00f3nica. A lo largo de varios pasos se nos explicar\u00e1 en que consiste esta operaci\u00f3n y se nos solicitar\u00e1n los datos necesarios para ejecutarla: < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d accederemos a la primera pantalla del asistente, en donde deberemos seleccionar el documento que deseamos firmar y el fichero con el resto de firma generadas. < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se nos mostrar\u00e1 un di\u00e1logo para la selecci\u00f3n del certificado que dese utilizar para la cofirma. Seleccione el certificado deseado y a continuaci\u00f3n se le mostrar\u00e1 un segundo di\u00e1logo para el guardado de la multifirma generada o, en caso de error, una ventana con el mensaje de error correspondiente. Contrafirma Esta opci\u00f3n nos mostrar\u00e1 el asistente para la generaci\u00f3n de una contrafirma electr\u00f3nica. A lo largo de varios pasos se nos explicar\u00e1 en que consiste esta operaci\u00f3n y se nos solicitar\u00e1n los datos necesarios para ejecutarla: < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d accederemos a la primera pantalla del asistente, en donde deberemos seleccionar el fichero con las firmas que deseemos contrafirmar. < Al pulsar \u201cSiguiente >\u201d no aparecer\u00e1 una nueva pantalla en donde se nos mostrar\u00e1 el \u00e1rbol de firmas de documento y deberemos indicar cu\u00e1les de ellas queremos contrafirmar. < Las opciones disponibles en esta pantalla son: Firmas que desea contrafirmar: Permite seleccionar las firmas que se desean contrafirmar. Los valores posible son: Firmas seleccionadas: Contrafirma todas las firmas que seleccionadas en el \u00e1rbol de firmas. Firmantes seleccionados: Contrafirma todas las firmas de los autores de los cuales se ha seleccionado al menos una firma en el \u00e1rbol de firmas. Todo el \u00e1rbol de firmas: Contrafirmas todas las firmas. Firmas de \u00faltimo nivel: Contrafirma todas las firmas que no tienen todav\u00eda ninguna contrafirma. \u00c1rbol de firmas: Listado en forma de \u00e1rbol de todas las firmas contenidas en el fichero de firma seleccionado anteriormente. Para seleccionar una firma, basta con hacer clic sobre la misma, para seleccionar m\u00e1s de una, mantenga pulsada la tecla Control (\u201c Ctrl \u201d) al seleccionarlas y para seleccionar varias firmas consecutivas, mantenga pulsada la tecla May\u00fasculas (\u201c Shift \u201d) y seleccione la primera y \u00faltima del rango. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se nos mostrar\u00e1 un di\u00e1logo para la selecci\u00f3n del certificado que dese utilizar para la firma. Seleccione el certificado deseado y a continuaci\u00f3n se le mostrar\u00e1 un segundo di\u00e1logo para el guardado de la multifirma generada o, en caso de error, una ventana con el mensaje de error correspondiente. Multifirma Masiva Desde la pesta\u00f1a \u201c Firma masiva \u201d es posible realizar firmas y multifirmas en bloque. Esto implica ordenar una operaci\u00f3n de firma que afectar\u00e1 a m\u00faltiples ficheros y generar\u00e1 un nuevo fichero de firma para cada uno de ellos. Esta pesta\u00f1a s\u00f3lo est\u00e1 disponible en el modo de vista avanzada. IMPORTANTE: El DNIe exige que el usuario acepte individualmente toda y cada una de las firmas individuales del proceso de firma masiva. < Las opciones que se muestran en esta pantalla son: Alm\u00e1cen / repositorio de certificados. Permite seleccionar el almac\u00e9n en donde se encuentra el certificado que deseamos utilizar para realizar la firma. Las opciones disponibles son: Windows / Internet Explorer: Para tomar el certificado del almac\u00e9n de Windows o un dispositivo externo (por ejemplo, el DNIe) instalado en el sistema. Mozilla Firefox (unificado): Para tomar el certificado del almac\u00e9n de Firefox o un dispositivo externo (por ejemplo, el DNIe) configurado en este almac\u00e9n. PKCS#12 / PFX: Para tomar el certificado de un almac\u00e9n en disco en formato P12 o PFX. Opciones de la firma por lotes Alerta sonora al finalizar el proceso: Utiliza el beep del sistema para emitir un sonido una vez finaliza el proceso de firma masiva. Al pulsar el bot\u00f3n \u201cFirmar\u201d se abrir\u00e1 el asistente para finalizar la configuraci\u00f3n de la operaci\u00f3n de multifirma masiva. < Al pulsa el bot\u00f3n \u201cSiguiente >\u201d, nos aparece una nueva ventana donde se nos explica el proceso seg\u00fan la operaci\u00f3n de firma seleccionada y se nos permite configurar tanto esta como el formato de firma. < Las opciones de configuraci\u00f3n son: Operaci\u00f3n predeterminada: Firma: Firna cada uno de los ficheros del lote usando el formato de firma seleccionado. Cofirma: Cofirma todos los ficheros de firma del lote y firmar\u00e1 con el formato seleccionado todos aquellos que no sean. Contrafirma: Contrafirmar\u00e1 todos los ficheros de firma del lote. Formato: Formato de firma utilizado cuando se solicita la operaci\u00f3n de firma, o cuando se solicita la operaci\u00f3n de cofirma y se encuentran documentos de datos. Cuando se pulsa el bot\u00f3n \u201cSiguiente >\u201d nos desplazamos a una nueva pantalla del asistente. Desde esta nos es posible establecer configuraciones adicionales sobre el formato de firma y los nodos que deben contrafirmarse. Si se seleccion\u00f3 la operaci\u00f3n de firma, no se mostrar\u00e1 la pantalla mostrada a continuaci\u00f3n, sino la siguiente, y si se seleccion\u00f3 la operaci\u00f3n de cofirma no se mostrar\u00e1n las opciones para la configuraci\u00f3n de la contrafirma s\u00f3lo parecer\u00e1 cuando se seleccione esta operaci\u00f3n. < Las opciones configurables en esta pantalla son: Respetar el formato de firma Si no se activa esta casilla, se considerar\u00e1 que cualquier fichero del lote no acorde al formato de firma indicado en el paso anterior es un fichero de datos. En caso de marcarla y cuando la operaci\u00f3n seleccionada sea cofirma o contrafirma, se comprobar\u00e1 para cada fichero del lote si es un formato de firma soportado y, en caso de serlo, se multifirmar\u00e1 en el formato correspondiente. Opciones de contrafirma: Nos permite indicar que firmas del fichero deben contrafirmarse. Las opciones son: Contrafirmar todas las firmas: Agrega una contrafirma a cada firma del fichero. Contrafirmar \u00fanicamente los \u00faltimos firmantes: Agrega una contrafirma a todas aquellas firmas que no tuvieran una previamente. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d accederemos a una nueva ventana desde la que podemos configurar los ficheros que pertenecer\u00e1n al lote de firma. < Las opciones de configuraci\u00f3n son: Directorio con los ficheros de datos. Aqu\u00ed podemos indicar el directorio en donde se encuentran los ficheros con los que queremos operar. Podemos introducir la ruta en la caja de texto correspondiente o pulsar el bot\u00f3n \u201cExaminar\u201d para buscar el directorio en el sistema del usuario. Incluir subdirectorios de forma recursiva. Al seleccionar esta casilla se incluir\u00e1n en el lote de firma todos los ficheros de los subdirectorios de aquel que hemos seleccionado. Aplicar s\u00f3lo a los ficheros con extensi\u00f3n: En esta caja de texto podemos introducir las extensiones, separadas por comas (\u2018,\u2019), de los ficheros que deseamos que se incluyan en el lote de firma. Por ejemplo, con la cadena \u201ctxt,pdf\u201d s\u00f3lo entrar\u00edan en el lote los ficheros \u201ctxt\u201d y \u201cpdf\u201d del directorio seleccionado. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se nos mostrar\u00e1 una nueva ventana desde la que podremos seleccionar el directorio en donde se almacenar\u00e1n las firmas generadas. < Las opciones configurables en esta pantalla son: Directorio de firmas. Aqu\u00ed podemos indicar el directorio en donde se encuentran los ficheros con los que queremos operar. Podemos introducir la ruta en la caja de texto correspondiente o pulsar el bot\u00f3n \u201cExaminar\u201d para buscar el directorio en el sistema del usuario. Sobrescribir ficheros si ya existen. Si marcamos esta casilla se sobrescribir\u00e1 cualquier fichero que exista en el directorio de salida con el mismo nombre que alguno de los ficheros que ya existen. Si no se marca la casilla se agregar\u00e1 un n\u00famero en serie al nombre del fichero. Si por ejemplo: se fuese a generar el fichero \u201cfirma.csig\u201d y ya existiese uno con este nombre, se crear\u00eda \u201cfirma(1).csig\u201d; si este tambi\u00e9n existiera se crear\u00eda \u201cfirma(2).csig\u201d y as\u00ed sucesivamente. Fichero de log. Este es el fichero que se crear\u00e1 y mostrar\u00e1 el resultado de la operaci\u00f3n masiva. Todos los errores que se hayan producido durante el proceso vendr\u00e1n listados en este fichero. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d quedar\u00e1 configurado el procedimiento, tras lo cual se nos mostrar\u00e1 un nuevo di\u00e1logo y deberemos pulsar el bot\u00f3n \u201cFinalizar\u201d para iniciar el procedimiento de firma masiva. < Una vez terminado el procedimiento, se nos informar\u00e1 del resultado y, en caso de error, se nos remitir\u00e1 al fichero de log. Validaci\u00f3n de firmas En la pesta\u00f1a \u201c Validaci\u00f3n \u201d se nos muestra un cuadro para la selecci\u00f3n del fichero de firma que deseemos validar. La validaci\u00f3n que se realizar\u00e1 del mismo consiste en la comprobaci\u00f3n de la estructura de la firma, no de los datos contenidos en ella. < Al pulsar el bot\u00f3n \u201cValidar\u201d se abrir\u00e1 una nueva ventana con el resultado del proceso de validaci\u00f3n. < La pantalla del visor de firmas muestra el icono y el texto correspondiente al resultado de la validaci\u00f3n. Adicionalmente, muestra el fichero de firma analizado y los datos de la firma: Formato de firma Formato de firma identificado en el fichero. Datos firmados Enlace a los datos contenidos en la firma. Si se conoce la aplicaci\u00f3n por defecto para abrir los datos contenidos en la firma, lo cual depende de que se haya podido identificar el formato de estos datos (que es distinto al formato de la firma), se abrir\u00e1n con esta aplicaci\u00f3n. Si no se pudo identificar el formato o no hay aplicaci\u00f3n por defecto para visualizarlos, se dar\u00e1 la opci\u00f3n de guardarlos en el sistema del usuario. Enlace para la carga de datos. Si la firma no conten\u00eda los datos firmados no habr\u00e1 sido posible validar contra estos la informaci\u00f3n de la firma. En este caso, el resultado de la validaci\u00f3n indicar\u00e1 que esta no se pudo completar y aqu\u00ed se mostrar\u00e1 un enlace para la carga de los datos. Al pulsarlo se mostrar\u00e1 un di\u00e1logo de selecci\u00f3n y, al seleccionar un fichero de datos, se realizar\u00e1 el proceso de validaci\u00f3n completo, incluida la validaci\u00f3n de los datos. \u00c1rbol de firmas del documento \u00c1rbol con los firmantes identificados en la firma, organizados de tal modo que representen la estructura de firmas del documento. Al seleccionar uno de los firmantes se abrir\u00e1 el certificado que se utilizo para realizar la firma (sin clave privada). Cifrado de datos Desde la pesta\u00f1a \u201c Cifrado \u201d podemos acceder a las funcionalidades el cifrado sim\u00e9trico de datos. Mediante estas funciones podemos cifrar documentos para uso personal que no queremos que nadie vea o documentos sensibles que debemos enviar a otra persona. S\u00f3lo alguien con la clave/contrase\u00f1a utilizada para el cifrado podr\u00e1 descifrar este documento y acceder a su contenido. La operaci\u00f3n de descifrado de datos se realiza desde la pesta\u00f1a \u201c Descifrado \u201d. < Las opciones de configuraci\u00f3n de esta pantalla son: Fichero a cifrar digitalmente: Permite seleccionar el fichero que se desea cifrar. Es posible pulsar el bot\u00f3n \u201cExaminar\u201d para buscar un fichero en disco o escribir directamente su ruta en la caja de texto asociada. Mecanismo de cifrado: Permite establecer si se desea utilizar una contrase\u00f1a para el cifrado o una clave de cifrado, espec\u00edfica o autogenerada, para el algoritmo de cifrado seleccionado. Algoritmo de cifrado electr\u00f3nico: Es el algoritmo que se utilizar\u00e1 para el cifrado de datos. La lista de algoritmos var\u00eda seg\u00fan el mecanismo de cifrado escogido y la vista activa en la interfaz. Los algoritmos disponibles son: Para el cifrado por contrase\u00f1a (pre-establecido en la vista simple): SHA1 y 3DES (pre-establecido en la vista simple). SHA1 y RC2. MD5 y DES. Para el cifrado mediante clave: AES Alleged RC4 Blowfish DES 3DES RC2 En la vista simple de la interfaz, el mecanismo de cifrado es obligatoriamente \u201cContrase\u00f1a de cifrado\u201d y el algoritmo es siempre \u201cContrase\u00f1a SHA1 y 3DES\u201d. Al pulsar en el bot\u00f3n \u201cCifrar\u201d nos aparecer\u00e1 un asistente para ayudarnos a configurar el proceso de cifrado. < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d accederemos a las pantallas de configuraci\u00f3n del asistente, que variar\u00e1 seg\u00fan el mecanismo de cifrado elegido. Contrase\u00f1a de cifrado En la primera pantalla del asistente para el cifrado con contrase\u00f1a se nos pedir\u00e1 introducir dos veces la contrase\u00f1a que deseamos utilizar para el cifrado. Las dos contrase\u00f1as introducidas deben ser la misma, respetando min\u00fasculas y may\u00fasculas, y no deben contener caracteres no ASCII como vocales acentuadas, la letra \u2018\u00f1\u2019 o caracteres extra\u00f1os. < Las opciones que aparecen en esta pantalla son: Introduzca la contrase\u00f1a: En esta caja de texto debe introducir la contrase\u00f1a que desee utilizar para el cifrado de datos, respetando las condiciones ya explicadas. Introduzca de nuevo la contrase\u00f1a: En esta caja de texto debe volver a introducir la contrase\u00f1a de cifrado. Si no coincide con la primera contrase\u00f1a, se le informar\u00e1 al pulsar el bot\u00f3n \u201cSiguiente >\u201d. Mostrar contrase\u00f1a Hace aparecer la contrase\u00f1a en texto claro. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se ejecutar\u00e1 el proceso de cifrado. En caso de finalizar el proceso correctamente le aparecer\u00e1 un di\u00e1logo para el guardado del fichero con los datos cifrado. En caso de error le aparecer\u00e1 el mensaje de error correspondiente. Clave de cifrado En la primera pantalla del asistente para el cifrado con clave se nos pedir\u00e1 la clave que deseamos utilizar para el cifrado. Esta clave debe respetar un formato concreto para cada algoritmo de cifrado y debe introducirse en Base64. La alternativa, mucho m\u00e1s recomendable, a introducir la clave, es generar una clave v\u00e1lida aleatoria. < Las opciones de configuraci\u00f3n que aparecen en esta pantalla son: Clave de cifrado: En esta caja de texto podemos introducir la clave en base 64. Autogenerar: Mediante este bot\u00f3n generaremos una clave aleatoria v\u00e1lida para el algoritmo de cifrado seleccionado, ahorr\u00e1ndonos introducir una manualmente. Almac\u00e9n Permite abrir el almac\u00e9n de claves del usuario para seleccionar para el cifrado una clave ya all\u00ed almacenada. Guardar en almac\u00e9n de claves de cifrado de @firma. Si marcamos esta casilla la clave de cifrado introducida, ya se haya introducido manualmente o autogenerado, se almacenar\u00e1 en el almac\u00e9n de claves del Cliente @firma. Para saber m\u00e7\u00e1s del almac\u00e9n de claves del Cliente @firma consulte el apartado \u201c Almac\u00e9n de claves de cifrado \u201d. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se ejecutar\u00e1 el proceso de cifrado. En caso de error, se mostrar\u00e1 el mensaje pertinente y, en caso de finalizar la operaci\u00f3n correctamente, se solicitar\u00e1 mediante un di\u00e1logo d\u00f3nde desea guardarse el fichero cifrado. Si se marc\u00f3 la casilla para almacenar la clave en el almac\u00e9n se almacenar\u00e1 una vez finalizado el proceso. Almac\u00e9n de claves de cifrado El almac\u00e9n de claves de cifrado del Cliente @firma es compartido por el Cliente y la Interfaz de Escritorio. Las caracter\u00edsticas del mismo son: No es necesario tener instalado el Cliente @firma. Est\u00e1 protegido por una contrase\u00f1a que deber\u00e1 establecer el usuario la primera vez que se almacene en \u00e9l una clave. < Cada vez que se almacene una clave, se nos pedir\u00e1 un alias con el que identificarla. < Los alias de las claves se almacenar\u00e1n siempre en min\u00fasculas. Se almacena en el directorio del usuario con el nombre \u201cciphkeys.jceks\u201d. No se elimina aunque se desinstale el Cliente @firma o la Interfaz de Escritorio. Tenga en cuenta que si el usuario elimina este almac\u00e9n manualmente, se perder\u00e1n todas las claves de cifrado que tuviese almacenadas. Descifrado de datos Desde la pesta\u00f1a \u201c Descifrado \u201d podemos descifrar un fichero de datos que haya sido previamente cifrado por medio de las funcionalidades de la pesta\u00f1a \u201c Cifrado \u201d. < Las opciones de configuraci\u00f3n de esta pantalla son: Fichero de datos: Permite seleccionar el fichero que se desea descifrar. Es posible pulsar el bot\u00f3n \u201cExaminar\u201d para buscar un fichero en disco o escribir directamente su ruta en la caja de texto asociada. Mecanismo de cifrado: Permite establecer si el fichero se cifr\u00f3 mediante una contrase\u00f1a o una clave de cifrado. Algoritmo de cifrado electr\u00f3nico: Es el algoritmo que se utiliz\u00f3 para el cifrado de datos. La lista de algoritmos var\u00eda seg\u00fan el mecanismo de cifrado escogido y la vista activa en la interfaz. Los algoritmos disponibles son: Para el descifrado con contrase\u00f1a (pre-establecido en la vista simple): SHA1 y 3DES (pre-establecido en la vista simple). SHA1 y RC2. MD5 y DES. Para el descifrado mediante clave: AES Alleged RC4 Blowfish DES 3DES RC2 En la vista simple de la interfaz, el mecanismo de cifrado es obligatoriamente \u201cContrase\u00f1a de cifrado\u201d y el algoritmo es siempre \u201cContrase\u00f1a SHA1 y 3DES\u201d. Recuerde que el mecanismo y el algoritmo de cifrado seleccionado debe coincidir con el utilizado cuando se cifr\u00f3 el documento. Para facilitar este aspecto, es recomendable utilizar siempre los mismos valores para estos par\u00e1metros. Al pulsar el bot\u00f3n \u201cDescifrar\u201d se nos abrir\u00e1 el asistente para la configuraci\u00f3n del proceso de descifrado. < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se nos mostrar\u00e1 la pantalla del asistente para la inserci\u00f3n de la contrase\u00f1a o clave de cifrado. Esta pantalla variar\u00e1 seg\u00fan el mecanismo de cifrado seleccionado. Contrase\u00f1a de cifrado Si se seleccion\u00f3 el mecanismo de cifrado mediante contrase\u00f1a, el asistente nos mostrar\u00e1 una pantalla para la inserci\u00f3n de la contrase\u00f1a de cifrado. S\u00f3lo ser\u00e1 necesario insertar esta para llevar a cabo el proceso. < Las opciones de configuraci\u00f3n disponibles son: Contrase\u00f1a de cifrado: En la caja de texto que aparece deberemos insertar la contrase\u00f1a que se utiliz\u00f3 para el cifrado de los datos. Deben respetarse las may\u00fasculas y min\u00fasculas de la contrase\u00f1a original. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se llevar\u00e1 a cabo el proceso de descifrado. Si ocurriese un error durante el mismo, se informar\u00eda al usuario con el mensaje correspondiente. Aseg\u00farese en este caso de haber seleccionado el mecanismo y el algoritmo de cifrado correctos, adem\u00e1s de la contrase\u00f1a. Si el proceso finaliza correctamente, se mostrar\u00e1 un di\u00e1logo para el guardado del documento descifrado. Clave de cifrado Si se seleccion\u00f3 el mecanismo de cifrado mediante clave, el asistente nos mostrar\u00e1 una pantalla para la inserci\u00f3n de la clave que se utiliz\u00f3 en el proceso de cifrado. S\u00f3lo ser\u00e1 necesario insertarla o recuperarla del almac\u00e9n de claves para llevar a cabo el proceso. < Las opciones de configuraci\u00f3n disponibles en esta pantalla son: Clave de descifrado: En esta caja de texto puede insertar la clave de cifrado en base 64 que utiliz\u00f3 para el cifrado de los datos. Tenga en cuenta que la clave debe disponer de un formato concreto seg\u00fan el algoritmo de cifrado utilizado. Examinar almac\u00e9n: Permite acceder al almac\u00e9n de claves (para lo que deberemos conocer su contrase\u00f1a) y recuperar una de las claves almacenadas. Si almacen\u00f3 la clave en el almac\u00e9n durante el proceso de cifrado, este es el mecanismo recomendado para seleccionarla. Al lado de los alias que aparecen en el almac\u00e9n y que designan a claves del mismo, puede verse el algoritmo con la que es compatible a clave. < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se llevar\u00e1 a cabo el descifrado de los datos. En caso de producirse un error durante el mismo, se mostrar\u00e1 el mensaje correspondiente, mientras que, si finaliz\u00f3 correctamente, se mostrar\u00e1 un di\u00e1logo para selecci\u00f3n donde se desea almacenar el documento descifrado. Ensobrado digital Desde la pesta\u00f1a \u201c Ensobrado \u201d es posible generar sobres digitales para la transferencia de datos segura con otras personas. Esta pesta\u00f1a s\u00f3lo est\u00e1 disponible en el modo de vista avanzada. IMPORTANTE: El DNIe y otros dispositivos externos tienen bloqueado el proceso de desenvoltura de sobres, as\u00ed que nunca deben utilizarse para generar sobre digitales. < Las opciones de configuraci\u00f3n disponibles son: Fichero de datos: Permite seleccionar el documento que deseamos introducir en el sobre digital. Es posible pulsar el bot\u00f3n \u201cExaminar\u201d para buscar un fichero en disco o escribir directamente su ruta en la caja de texto asociada. Opciones del sobre digital: Tipo de sobre: Indica el tipo de sobre electr\u00f3nico que debe generarse. Los tipos soportados son: Sobre autenticado: Este es el tipo por defecto y el sobre m\u00e1s seguro. Cifra los datos contenidos en el sobre y agrega un c\u00f3digo de autenticaci\u00f3n para detectar modificaci\u00f3n en el sobre. Sobre firmado: Cifra los datos contenidos en el sobre y posteriormente lo firma. Sobre simple: Cifra los datos contenidos en el sobre. Al pulsar el bot\u00f3n \u201cGenerar\u201d se inicializar\u00e1 el asistente para la generaci\u00f3n de sobres electr\u00f3nicos. < Al pulsar el bot\u00f3n \u201cSiguiente >\u201c pasaremos al primer paso para la generaci\u00f3n del sobre electr\u00f3nico: la selecci\u00f3n del los destinatarios del sobre. Desde esta pantalla podr\u00e1n indicarse los distintos destinatarios del sobre por medio de sus certificados. < Las opciones de configuraci\u00f3n disponibles en esta pantalla son: A\u00f1adir un destinatario desde\u2026 Este listado contiene los almacenes disponibles para la extracci\u00f3n de una clave p\u00fablica para el env\u00edo de datos. Es de suponer que no disponemos de los certificados con la clave p\u00fablica de los destinatarios en nuestro almac\u00e9n personal, as\u00ed que s\u00f3lo est\u00e1n disponibles los almacenes en fichero y la libreta de direcciones. Los almacenes concretos disponibles son: PKCS#7 / X.509: Certificado en fichero (.cer) con clave p\u00fablica. PKCS#12 / PFX: Certificado en almac\u00e9n en fichero (.p12, .pfx). Windows / Internet Explorer (otras personas / libreta de direcciones): Almac\u00e9n de Windows con las claves p\u00fablicas de otras personas. A\u00f1adir Abre un di\u00e1logo para la selecci\u00f3n de un certificado del almac\u00e9n seleccionado. Si el almac\u00e9n est\u00e1 protegido con contrase\u00f1a ser\u00e1 necesario introducirla. Al seleccionar un certificado, este se agrega al listado de destinatarios. Eliminar destinatario Permite eliminar el destinatario seleccionado de la lista de destinatarios. Es obligatorio seleccionar al menos un destinatario para el sobre digital. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d nos aparecer\u00e1 la ventana para la selecci\u00f3n del remitente del sobre. En esta pantalla podemos seleccionar nuestro certificado para identificarnos como remitentes del sobre. Este paso es opcional en la generaci\u00f3n de Sobres Simples y obligatorio en los Sobres Firmados o Autenticados. En este paso, s\u00ed es posible utilizar el DNIe. < Las opciones disponibles en esta pantalla son: A\u00f1adir remitebnte desde el repositorio / almac\u00e9n de certificados\u2026 Este listado contiene los posibles almacenes que pueden contener el certificado del quien genera el sobre digital. Los almacenes concretos disponibles son: Windows / Internet Explorer: Para tomar el certificado del almac\u00e9n de Windows o un dispositivo externo (por ejemplo, el DNIe) instalado en el sistema. Mozilla Firefox (unificado): Para tomar el certificado del almac\u00e9n de Firefox o un dispositivo externo (por ejemplo, el DNIe) configurado en este almac\u00e9n. PKCS#12 / PFX: Para tomar el certificado de un almac\u00e9n en disco en formato P12 o PFX. A\u00f1adir Abre un di\u00e1logo para la selecci\u00f3n de un certificado del almac\u00e9n seleccionado. Si el almac\u00e9n est\u00e1 protegido con contrase\u00f1a ser\u00e1 necesario introducirla. Al seleccionar un certificado, este se agrega al listado de remitentes. Actualmente la Interfaz de Escritorio del Cliente @firma s\u00f3lo soporta la configuraci\u00f3n de un remitente para el sobre electr\u00f3nico. Eliminar remitente Permite eliminar el remitente seleccionado de la lista de remitentes. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se lleva a cabo el proceso de generaci\u00f3n del sobre electr\u00f3nico. Si ocurriese un error durante el proceso, se mostrar\u00e1 el mensaje correspondiente, y si finaliza el proceso correctamente se nos mostrar\u00e1 un di\u00e1logo para almacenar el sobre electr\u00f3nico generado. Desensobrado digital Desde la pesta\u00f1a \u201cDese nsobrado \u201d es posible extraer el fichero contenido en un sobre digital. Para ello s\u00f3lo ser\u00e1 necesario seleccionar uno de los certificados designados como destinatarios del sobre. < Las opciones de configuraci\u00f3n en esta pantalla son: Sobre digital: Permite seleccionar el sobre digital. Es posible pulsar el bot\u00f3n \u201cExaminar\u201d para buscar un fichero en disco o escribir directamente su ruta en la caja de texto asociada. Almac\u00e9n / repositorio de certificados: Permite seleccionar el almac\u00e9n en donde se encuentra el certificado del destinatario del sobre. Las opciones disponibles son: Windows / Internet Explorer: Para tomar el certificado del almac\u00e9n de Windows o un dispositivo externo (por ejemplo, el DNIe) instalado en el sistema. Mozilla Firefox (unificado): Para tomar el certificado del almac\u00e9n de Firefox o un dispositivo externo (por ejemplo, el DNIe) configurado en este almac\u00e9n. PKCS#12 / PFX: Para tomar el certificado de un almac\u00e9n en disco en formato P12 o PFX. Opciones de apertura de sobre digital: Iniciar contenido del sobre tras la apertura: Si se marcar esta casilla, una vez extra\u00eddo el contenido del sobre se abrir\u00e1 con la aplicaci\u00f3n por defecto para la extensi\u00f3n de fichero con el que se almacene. Al pulsar el bot\u00f3n \u201cExtraer\u201d se mostrar\u00e1 un di\u00e1logo modal con los certificados del repositorio seleccionado. El usuario deber\u00e1 seleccionar el certificado de uno de los destinatarios del sobre. Si el certificado no perteneciese a uno de los destinatarios o se produjese un error durante la extracci\u00f3n del contenido del sobre, se notificar\u00e1; mientras que, si el proceso finaliza correctamente, se mostrar\u00e1 un di\u00e1logo para el guardado del documento extra\u00eddo del sobre. Una vez extra\u00eddo el documento, este se abrir\u00e1 si se marc\u00f3 la casilla \u201cIniciar contenido del sobre tras la apertura\u201d. Pol\u00edtica de firma de la AGE La pol\u00edtica de firma de la AGE define un marco legal de firma electr\u00f3nica concreto y com\u00fan para la administraci\u00f3n p\u00fablica espa\u00f1ola. La declaraci\u00f3n de esta pol\u00edtica de firma indica que se han cumplido los requisitos exigidos por la pol\u00edtica durante el proceso de firma electr\u00f3nica. Actualmente, se encuentra en vigencia la versi\u00f3n 1.9 de la pol\u00edtica de la AGE. Puede descargar y consultar la informaci\u00f3n relativa a la misma desde el siguiente enlace: http://administracionelectronica.gob.es/ctt/politicafirma/descargas En la interfaz de escritorio del Cliente @firma deber\u00e1 configurar los atributos apropiados desde la pantalla de opciones generales de la aplicaci\u00f3n. Los valores asignados a las distintas propiedades son: Propiedad Valor Identificador 2.16.724.1.3.1.1.2.1.9 Cualificador https://sede.060.gob.es/politica_de_firma_anexo_1.pdf Huella digital SHA1 G7roucf600+f03r/o0bAOQ6WAs0= ADVERTENCIA : Las firmas XAdES soportadas por la pol\u00edtica deben ser Detached impl\u00edcita o Enveloped impl\u00edcita. Las firmas ODF y OOXML no definen una pol\u00edtica de firma. Factura electr\u00f3nica Los esquemas de factura electr\u00f3nica existentes definen las caracter\u00edsticas que debe cumplir una firma de factura electr\u00f3nica acorde al esquema en cuesti\u00f3n. El formato utilizado para la firma es XAdES Enveloped, pero esta debe cumplir con ciertas propiedades espec\u00edficas que no pueden configurarse a trav\u00e9s del Cliente @firma o su interfaz de escritorio. Para la firma de facturas electr\u00f3nicas, el Cliente @firma y la interfaz de escritorio incluyen un formato de firma espec\u00edfico. Este formato se encarga de configurar autom\u00e1ticamente todas las propiedades necesarias para que la factura firmada sea correctamente validada por los validadores de firma (incluidos la Plataforma @firma, VALIDe y el validador de facturas electr\u00f3nicas del Ministerio de Industria, Turismo y Comercio ). Las firmas generadas con el formato de firma de factura se realizan conforme al esquema 3.1 de factura electr\u00f3nica. Esto incluye, entre otros atributos, la configuraci\u00f3n de la pol\u00edtica de firma de facturas, por lo que no es necesario que el usuario configure la pol\u00edtica de firma en la pantalla de opciones de la interfaz. Al generar una firma con el formato de factura electr\u00f3nica la pol\u00edtica de firma configurada por el usuario se ignorar\u00e1. El usuario, si lo desea, puede firmar una factura con el formato XAdES Enveloped, el modo impl\u00edcito y configurar la pol\u00edtica de firma de factura electr\u00f3nica. De hacerlo, se generar\u00e1 una firma con estas caracter\u00edsticas que se validar\u00e1 correctamente en la Plataforma @firma y VALIDe , pero no ser\u00e1 aceptada por el validador de facturas electr\u00f3nicas del Ministerio de Industria, Turismo y Comercio . Puede consultar el apartado Opciones de configuraci\u00f3n para saber c\u00f3mo configurar una pol\u00edtica de firma. Instalaci\u00f3n de Certificados. Para el uso de la interfaz de escritorio del Cliente @firma es necesario disponer de un certificado electr\u00f3nico, el cual puede encontrarse almacenado: En el Navegador . En el almac\u00e9n de certificados del navegador dentro de la pesta\u00f1a \"personal\" aparecen los que poseen clave privada y dentro de la pesta\u00f1a \"otras personas\" aparecen los de clave p\u00fablica. Tarjeta inteligente . El DNI electr\u00f3nico es un dispositivo seguro de creaci\u00f3n de firma conforme a la norma CWA 14169. Esta norma est\u00e1 reconocida por la Uni\u00f3n Europea y se considera que la firma electr\u00f3nica realizada con el DNI electr\u00f3nico es equivalente a una firma manuscrita a efectos legales. Estas firmas son las m\u00e1s seguras porque la clave privada nunca sale de la tarjeta inteligente, por lo que no puede ser copiada por terceros. Es importante recordar, que cuando se instala un certificado, el mismo queda instalado \u00fanicamente para el navegador o sistema en el que se realice dicha instalaci\u00f3n, siendo necesario realizar la misma acci\u00f3n si se quisiera disponer del mismo certificado en otro navegador que utilice un almac\u00e9n de certificados distinto. A continuaci\u00f3n se detalla los diferentes pasos a seguir para la instalaci\u00f3n del certificado seg\u00fan el lugar de almacenamiento de los mismos: Instalaci\u00f3n de certificados software en Windows / Internet Explorer En primer lugar, en el men\u00fa superior del navegador, seleccionamos la opci\u00f3n \u201c Herramientas \u201d y a continuaci\u00f3n hacemos clic sobre la opci\u00f3n \u201c Opciones de Internet \u201d. < A continuaci\u00f3n seleccionamos la opci\u00f3n \u201cCertificados\u201d, dentro de la pesta\u00f1a \u201c Contenido \u201d < Continuamos seleccionando la opci\u00f3n \u201c Importar \u201d, se nos abrir\u00e1 el \u201c Asistente para importaci\u00f3n de certificados \u201d. < < Pulsaremos \u201c Siguiente \u201d en la primera ventana del asistente, tras lo cual, nos pedir\u00e1 que seleccionemos la ubicaci\u00f3n del certificado que deseamos instalar, para lo cual, pulsaremos el bot\u00f3n \u201c Examinar...\u201d. Se nos abrir\u00e1 una ventana en la cual tendremos que buscar el certificado que deseamos instalar, una vez encontrado, seleccionaremos el certificado y pulsaremos sobre el bot\u00f3n \u201c Abrir \u201d. < < Tras seleccionar el bot\u00f3n \u201c Siguiente \u201d, en la siguiente ventana el asistente nos pedir\u00e1 que introduzcamos la contrase\u00f1a usada en el cifrado del certificado, introducimos la clave y pulsamos sobre el bot\u00f3n \u201c Siguiente \u201d < En la siguiente ventana, el asistente nos pedir\u00e1 que seleccionemos el almac\u00e9n en el cual se guardar\u00e1 el certificado, seleccionaremos la opci\u00f3n \u201cColocar todos los certificados en el siguiente almac\u00e9n\u201d. Pulsaremos sobre el bot\u00f3n \u201c Examinar \u201d, seleccionaremos la carpeta \u201c Personal \u201d y pulsaremos el bot\u00f3n \u201c Siguiente \u201d. < < Tras este paso, el asistente nos informar\u00e1 de que el certificado ha quedado importado correctamente. Instalaci\u00f3n de certificados software en Mozilla Firefox En primer lugar, en el men\u00fa superior del navegador, seleccionamos la opci\u00f3n \u201c Herramientas \u201d y a continuaci\u00f3n hacemos clic sobre la opci\u00f3n \u201c Opciones \u201d. < A continuaci\u00f3n seleccionamos la pesta\u00f1a \u201c Avanzado \u201d del men\u00fa superior de la nueva ventana, tras lo cual, seleccionamos la subpesta\u00f1a \u201c Cifrado \u201d, en la que seleccionaremos la opci\u00f3n \u201c Ver certificados \u201d < Continuamos seleccionando la opci\u00f3n \u201c Importar \u201d, se nos abrir\u00e1 una ventana en la cual tendremos que buscar el certificado que deseamos instalar, una vez encontrado, seleccionaremos el certificado y pulsaremos sobre el bot\u00f3n \u201c Abrir \u201d. < < El navegador nos pedir\u00e1 que introduzcamos la contrase\u00f1a usada en el cifrado del certificado, introducimos la clave y pulsamos sobre el bot\u00f3n \u201c Aceptar \u201d. < Una vez realizado este paso, el sistema nos informar\u00e1 con un mensaje que el certificado ha quedado instalado de forma satisfactoria. Instalaci\u00f3n de certificados software en el almac\u00e9n de Mac OS X Para instalar un certificado en Mac OS X s\u00f3lo deberemos hacer doble clic sobre el certificado para solicitar su instalaci\u00f3n y seleccionar el almac\u00e9n de certificados del sistema. < Seguidamente, insertaremos la contrase\u00f1a de usuario del sistema para finalizar la importaci\u00f3n. < Aunque este proceso de instalaci\u00f3n de certificados es el com\u00fan en Mac OS X, pueden existir cambios entre cada una de sus versiones. Para conocer los detalles de cada versi\u00f3n acuda a la p\u00e1gina Web de soporte de su sistema operativo. Para Mac OS X 10.6 es: http://docs.info.apple.com/article.html?path=Mac/10.6/es/9082.html Instalaci\u00f3n de certificados software en Google Chrome y Apple Safari Los navegadores Web Google Chrome y Apple Safari no disponen de un almac\u00e9n de certificados propio, en su lugar utilizan el almac\u00e9n de certificados del sistema operativo que utilice el usuario. Esto es: En Microsoft Windows : El almac\u00e9n de certificados que Internet Explorer. En Linux : El almac\u00e9n de certificados de Mozilla Firefox. En Solaris / OpenSolaris : El almac\u00e9n de certificados de Mozilla Firefox. En Mac OS X : El almac\u00e9n de certificados del sistema operativo. Si nuestro sistema operativo es Microsoft Windows deberemos seguir los pasos descritos en el apartado \u201cInstalaci\u00f3n de certificados software en Windows / Internet Explorer\u201c. Si nuestro sistema operativo es Linux o Solaris se importar\u00e1n los certificados a trav\u00e9s de Mozilla Firefox tal como se describe en el apartado \u201cInstalaci\u00f3n de certificados software en Mozilla Firefox\u201d. Si nuestro sistema operativo es Mac OS X deber\u00e1n instalarse los certificados tal como se describe en el apartado \u201cInstalaci\u00f3n de certificados software en el almac\u00e9n de Mac OS X\u201d. Uso de certificados desde tarjetas inteligentes DNIe (DNI Electr\u00f3nico) Para la utilizaci\u00f3n del DNI electr\u00f3nico es necesario contar determinados elementos hardware y software que nos van a permitir el acceso al chip de la tarjeta y, por tanto, la utilizaci\u00f3n de los certificados contenidos en \u00e9l. a) Elementos hardware El DNI electr\u00f3nico requiere el siguiente equipamiento f\u00edsico: Un Ordenador personal (Intel -a partir de Pentium III- o tecnolog\u00eda similar). Un lector de tarjetas inteligentes que cumpla el est\u00e1ndar ISO 7816 . Existen distintas implementaciones, bien integrados en el teclado, bien externos (conectados v\u00eda USB) o bien a trav\u00e9s de una interfaz PCMCIA. Para elegir un lector que sean compatible con el DNI electr\u00f3nico verifique que, al menos, Cumpla el est\u00e1ndar ISO 7816 (1, 2 y 3). Soporta tarjetas as\u00edncronas basadas en protocolos T=0 (y T=1). Soporta velocidades de comunicaci\u00f3n m\u00ednimas de 9.600 bps. Soporta los est\u00e1ndares: API PC/SC (Personal Computer/Smart Card) CSP (Cryptographic Service Provider, Microsoft) API PKCS#11 b) Elementos software ** Sistemas operativos** El DNI electr\u00f3nico puede operar en diversos entornos: Microsoft Windows Linux Unix (Solaris) Mac OS X ** Navegadores** El DNI electr\u00f3nico es compatible con todos los navegadores: Microsoft Internet Explorer (versi\u00f3n 6.0 o superior) Mozilla Firefox (versi\u00f3n 1.5) Netscape (versi\u00f3n 4.78 o superior) Controladores / M\u00f3dulos criptogr\u00e1ficos Para poder interaccionar adecuadamente con las tarjetas criptogr\u00e1ficas en general y con el DNI electr\u00f3nico en particular, el equipo ha de tener instalados unas \"piezas\" de software denominadas m\u00f3dulos criptogr\u00e1ficos. En un entorno Microsoft Windows , el equipo debe tener instalado un servicio que se denomina \"Cryptographic Service Provider\" (CSP). En los entornos UNIX / Linux o MAC podemos utilizar el DNI electr\u00f3nico a trav\u00e9s de un m\u00f3dulo criptogr\u00e1fico denominado PKCS#11. Tanto el CSP como el PKCS#11 espec\u00edfico para el DNI electr\u00f3nico podr\u00e1n obtenerse en el \u00c1rea de Descargas de la web del DNI-e, accediendo a la siguiente URL: http://www.dnielectronico.es/descargas/index.html , o en el sitio Web de OpenDNIe (recomendado para sistemas Linux y Solaris): http://opendnie.cenatic.es/ Opcionalmente puede acceder a https://zonatic.usatudni.es/aplicaciones/asistente-dnie , para la descarga de un instalador sencillo y accesible del controlador. Si optamos por el \u00e1rea de descargas de www.dnielectronico.es deberemos seleccionar la primera opci\u00f3n si tenemos un Sistema Operativo Windows o la segunda en caso de tener otro Sistema Operativo. < En la siguiente pantalla seleccionaremos la opci\u00f3n \u201c Sistemas Windows. Compatible con Vista\u201d, tras lo cual se nos descargara el software. Seleccionaremos \u201c Guardar \u201d y elegiremos la carpeta deseada donde queremos que sea descargado. < < Una vez descargado el fichero con la nomenclatura \u201cDNIe_vx_j_y.zip\u201d lo descomprimiremos y accederemos al fichero \u201cDNIe_vx_j_y.exe\u201d. El software se instalar\u00e1 autom\u00e1ticamente y se le pedir\u00e1 reiniciar el equipo. < < Es posible, dependiendo de la configuraci\u00f3n de su navegador, que nos aparezca la siguiente ventana: < Se nos solicitar\u00e1, por tanto que instalemos en el certificado ra\u00edz del DNIe, para ello deberemos seleccionar sobre \u201c Instalar certificado...\u201d < Pulsaremos sobre el bot\u00f3n \u201c Siguiente \u201d < Seleccionamos la opci\u00f3n \u201cColocar todos los certificados en el siguiente almac\u00e9n\u201d y pulsamos sobre el bot\u00f3n \u201c Examinar...\u201d < Seleccionaremos el almac\u00e9n de certificados \u201cEntidades Emisoras Ra\u00edz de Confianza\u201d En la siguiente ventana seleccionaremos la opci\u00f3n \u201cFinalizar\u201d < Si nos aparece la siguiente advertencia, seleccionaremos \u201cSi\u201d para permitir que la autoridad ra\u00edz del DNIe, se instale en el navegador y se pueda as\u00ed establecer la cadena de confianza de certificaci\u00f3n. Tras lo cual, el software quedar\u00e1 instalado y listo para su uso. Adicionalmente, para operar con un lector de tarjetas inteligentes, ser\u00e1 necesario instalar un driver que, normalmente, se distribuye con el propio lector. Nota: Para hacer uso del software de cambio de PIN virtual, deber\u00e1 tener instalado en el equipo la versi\u00f3n JAVA 1.5 o superior . Para m\u00e1s informaci\u00f3n puede acudir a la p\u00e1gina http://www.dnielectronico.es o contactar con el Servicio de Atenci\u00f3n al Ciudadano en el tel\u00e9fono 900 364 463 o en el correo sac@dnielectronico.es Otros certificados En el caso de hacer uso de otro certificado desde una tarjeta inteligente deber\u00e1 consultar con la entidad emisora del mismo para que le indique su forma de uso. Resoluci\u00f3n de Problemas Para la resoluci\u00f3n de problemas relacionados con las distintas operaciones de firma soportadas, consulte la Gu\u00eda de Incidencias de este. La aplicaci\u00f3n se bloquea al realizar b\u00fasquedas en la pantalla de ayuda Se ha detectado que al buscar determinadas palabras, a trav\u00e9s de la herramienta de b\u00fasqueda de la pantalla de ayuda de la aplicaci\u00f3n, la interfaz se queda bloqueada y no es posible recuperar el control de la aplicaci\u00f3n. Este comportamiento se debe a un comportamiento an\u00f3malo de la API de ayuda de Java (JavaHelp) y no ha soluci\u00f3n al error producido. Si ocurre este comportamiento, deber\u00e1 forzar el cierre de la aplicaci\u00f3n (consulte el manual de su sistema operativo) para eliminar el bloqueo. Glosario de t\u00e9rminos Firma electr\u00f3nica Es el conjunto de datos, en forma electr\u00f3nica, anejos a otros datos electr\u00f3nicos o asociados funcionalmente con ellos, utilizados como medio para identificar formalmente al autor o a los autores del documento que la recoge. XML Digital Signature (XMLDSig) Es una recomendaci\u00f3n del W3C que define una sintaxis XML para la firma digital XML Advanced Signature (XAdES) Es un conjunto de extensiones a las recomendaciones XML-DSig haci\u00e9ndolas adecuadas para la firma electr\u00f3nica avanzada. RSA Es un sistema criptogr\u00e1fico de clave p\u00fablica desarrollado en 1977. En la actualidad, RSA es el primer y m\u00e1s utilizado algoritmo de este tipo y es v\u00e1lido tanto para cifrar como para firmar digitalmente. XML Es un metalenguaje extensible de etiquetas desarrollado por el World Wide Web Consortium (W3C). Es una simplificaci\u00f3n y adaptaci\u00f3n del SGML y permite definir la gram\u00e1tica de lenguajes espec\u00edficos (de la misma manera que HTML es a su vez un lenguaje definido por SGML). Por lo tanto XML no es realmente un lenguaje en particular, sino una manera de definir lenguajes para diferentes necesidades. Algunos de estos lenguajes que usan XML para su definici\u00f3n son XHTML, SVG, MathML. Office Open XML (OOXML) Es un formato de archivo abierto y est\u00e1ndar cuyas extensiones m\u00e1s comunes son .docx, .xlsx y .pptx. Se le utiliza para representar y almacenar hojas de c\u00e1lculo, diagramas, presentaciones y documentos de texto. Un archivo Office Open XML contiene principalmente datos basados en el lenguaje de marcado XML, comprimidos en un contenedor .zip espec\u00edfico. Open Document Format (ODF) Es un formato de fichero est\u00e1ndar para el almacenamiento de documentos ofim\u00e1ticos tales como hojas de c\u00e1lculo, memorandos, gr\u00e1ficas y presentaciones. Aunque las especificaciones fueron inicialmente elaboradas por Sun, el est\u00e1ndar fue desarrollado por el comit\u00e9 t\u00e9cnico para Open Office XML de la organizaci\u00f3n OASIS y est\u00e1 basado en un esquema XML inicialmente creado e implementado por la suite ofim\u00e1tica OpenOffice.org (ver OpenOffice.org XML). ZIP Es un formato de almacenamiento sin p\u00e9rdida, muy utilizado para la compresi\u00f3n de datos como im\u00e1genes, programas o documentos. PDF Es un formato de almacenamiento de documentos, desarrollado por la empresa Adobe Systems. Este formato es de tipo compuesto (imagen vectorial, mapa de bits y texto). SHA Es un sistema de funciones hash criptogr\u00e1ficas relacionadas de la Agencia de Seguridad Nacional de los Estados Unidos y publicadas por el National Institute of Standards and Technology (NIST). El primer miembro de la familia fue publicado en 1993 es oficialmente llamado SHA. Sin embargo, hoy d\u00eda, no oficialmente se le llama SHA-0 para evitar confusiones con sus sucesores. Dos a\u00f1os m\u00e1s tarde el primer sucesor de SHA fue publicado con el nombre de SHA-1. Existen cuatro variantes m\u00e1s que se han publicado desde entonces cuyas diferencias se basan en un dise\u00f1o algo modificado y rangos de salida incrementados: SHA-224, SHA-256, SHA-384, y SHA-512 (llam\u00e1ndose SHA-2 a todos ellos). PKCS Se refiere a un grupo de est\u00e1ndares de criptograf\u00eda de clave p\u00fablica concebidos y publicados por los laboratorios de RSA en California. A RSA Security se le asignaron los derechos de licenciamiento para la patente de algoritmo de clave asim\u00e9trica RSA y adquiri\u00f3 los derechos de licenciamiento para muchas otras patentes de claves. W3C Es un consorcio internacional que produce recomendaciones para la World Wide Web. Est\u00e1 dirigida por Tim Berners-Lee, el creador original de URL (Uniform Resource Locator, Localizador Uniforme de Recursos), HTTP (HyperText Transfer Protocol, Protocolo de Transferencia de HiperTexto) y HTML (Lenguaje de Marcado de HiperTexto) que son las principales tecnolog\u00edas sobre las que se basa la Web. OpenOffice.org es una suite ofim\u00e1tica libre (c\u00f3digo abierto y distribuci\u00f3n gratuita) que incluye herramientas como procesador de textos, hoja de c\u00e1lculo, presentaciones, herramientas para el dibujo vectorial y base de datos. Est\u00e1 disponible para varias plataformas, tales como Microsoft Windows, GNU/Linux, BSD, Solaris y Mac OS X. Soporta numerosos formatos de archivo, incluyendo como predeterminado el formato est\u00e1ndar ISO/IEC OpenDocument (ODF), entre otros formatos comunes. A febrero de 2010, OpenOffice soporta m\u00e1s de 110 idiomas. Base64 Es un sistema de numeraci\u00f3n posicional que usa 64 como base. Es la mayor potencia de dos que puede ser representada usando \u00fanicamente los caracteres imprimibles de ASCII. Esto ha propiciado su uso para codificaci\u00f3n de correos electr\u00f3nicos, PGP y otras aplicaciones. Todas las variantes famosas que se conocen con el nombre de Base64 usan el rango de caracteres A-Z, a-z y 0-9 en este orden para los primeros 62 d\u00edgitos, pero los s\u00edmbolos escogidos para los \u00faltimos dos d\u00edgitos var\u00edan considerablemente de unas a otras. Otros m\u00e9todos de codificaci\u00f3n como UUEncode y las \u00faltimas versiones de binhex usan un conjunto diferente de 64 caracteres para representar 6 d\u00edgitos binarios, pero \u00e9stos nunca son llamados Base64. ASN.1 Es una norma para representar datos independientemente de la m\u00e1quina que se est\u00e9 usando y sus formas de representaci\u00f3n internas. Es un protocolo de nivel de presentaci\u00f3n en el modelo OSI. Autoridad de Certificaci\u00f3n (CA) Es una entidad de confianza, responsable de emitir y revocar los certificados digitales o certificados, utilizados en la firma electr\u00f3nica, para lo cual se emplea la criptograf\u00eda de clave p\u00fablica. Jur\u00eddicamente es un caso particular de Prestador de Servicios de Certificaci\u00f3n. Certificado Digital Es un documento digital mediante el cual un tercero confiable (una autoridad de certificaci\u00f3n) garantiza la vinculaci\u00f3n entre la identidad de un sujeto o entidad y su clave p\u00fablica. Infraestructura de Clave P\u00fablica (PKI) Es una combinaci\u00f3n de hardware y software, pol\u00edticas y procedimientos de seguridad que permiten la ejecuci\u00f3n con garant\u00edas de operaciones criptogr\u00e1ficas como el cifrado, la firma digital o el no repudio de transacciones electr\u00f3nicas. FAQ. \u00bfQu\u00e9 certificados son reconocidos por la plataforma? La plataforma @firma admite certificados digitales reconocidos conforme el est\u00e1ndar ITU-T X.509 v3, emitidos por m\u00faltiples prestadores de servicios de certificaci\u00f3n. Todos los prestadores se encuentran inscritos en el registro de la Secretaria de Estado de Telecomunicaciones y para la Sociedad de Informaci\u00f3n del Ministerio de Industria, Turismo y Comercio de autoridades conforme a lo establecido en el art\u00edculo 30 de la Ley 59/2003, de 19 de diciembre, de firma electr\u00f3nica. Los prestadores reconocidos son: DNI Electr\u00f3nico Camerfirma Izenpe CATCert (Agencia Catalana de Certificaci\u00f3n) ANF AC SCR (Servicio de Certificaci\u00f3n de los Registradores) ACA ACCV (Autoridad de Certificaci\u00f3n de la Comunidad Valenciana) ANCERT (Agencia Notarial de Certificaci\u00f3n) FNMT (F\u00e1brica Nacional de Moneda y Timbre) Firmaprofesional BANESTO CA Si desea informaci\u00f3n m\u00e1s detallada sobre los certificados soportados, consulte la Declaraci\u00f3n de Practicas de Validaci\u00f3n de @firma en http://www.ctt.map.es/afirma . \u00bfCu\u00e1les son los tipos de certificados admitidos por las Administraciones? De acuerdo con la Ley 59/2003, de Firma Electr\u00f3nica, los tipos de certificados admitidos son: certificado de persona f\u00edsica y , certificado de persona jur\u00eddica, certificado de sello electr\u00f3nico para la actuaci\u00f3n automatizada, certificado de sede electr\u00f3nica administrativa y certificado de empleado p\u00fablico. Cada uno de los certificados emitidos conllevar\u00e1 un grado de \"confianza\", asociado a los diferentes niveles de aseguramiento bajo los que se emitan, debido a los requisitos t\u00e9cnicos y de seguridad que estos niveles llevan asociados. \u00bfQu\u00e9 informaci\u00f3n posee un certificado digital? Un certificado digital es, en realidad, una clave p\u00fablica, con cierta informaci\u00f3n adjunta, como el nombre del propietario, el periodo de validez de la clave, etc, permitiendo: La autenticaci\u00f3n del usuario. La confidencialidad del mensaje. La integridad del documento. El no repudio. Los certificados digitales s\u00f3lo son \u00fatiles si existe alguna Autoridad Certificadora ( Certification Authority o CA) que los valide, ya que si uno se certifica a s\u00ed mismo no hay ninguna garant\u00eda de que su identidad sea la que anuncia. El formato de certificados X.509 es un est\u00e1ndar del ITU-T ( International Telecommunication Union-Telecommunication Standarization Sector ) y el ISO/IEC ( International Standards Organization / International Electrotechnical Commission ). Los elementos del formato de un certificado X.509 v3 son: Versi\u00f3n. El campo de versi\u00f3n contiene el n\u00famero de versi\u00f3n del certificado codificado. N\u00famero de serie del certificado. Este campo es un entero asignado por la autoridad certificadora. Cada certificado emitido por una CA debe tener un n\u00famero de serie \u00fanico. Identificador del algoritmo de firmado. Este campo identifica el algoritmo empleado para firmar el certificado. Nombre del emisor. Este campo identifica la CA que ha firmado y emitido el certificado. Periodo de validez. Este campo indica el periodo de tiempo durante el cual el certificado es v\u00e1lido y la CA est\u00e1 obligada a mantener informaci\u00f3n sobre el estado del mismo. Nombre del sujeto. Este campo identifica la identidad cuya clave p\u00fablica est\u00e1 certificada en el campo siguiente. El nombre debe ser \u00fanico para cada entidad certificada por una CA dada, aunque puede emitir m\u00e1s de un certificado con el mismo nombre si es para la misma entidad. Informaci\u00f3n de clave p\u00fablica del sujeto. Este campo contiene la clave p\u00fablica, sus par\u00e1metros y el identificador del algoritmo con el que se emplea la clave. Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported Usted es libre de: | < style=\"width:0.52083in;height:0.52083in\" alt=\"share\" /> | Compartir - copiar, distribuir, ejecutar y comunicar p\u00fablicamente la obra | |------------|------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"remix\" /> | hacer obras derivadas | Bajo las condiciones siguientes: | < style=\"width:0.52083in;height:0.52083in\" alt=\"by\" /> | Atribuci\u00f3n \u2014 Debe reconocer los cr\u00e9ditos de la obra de la manera especificada por el autor o el licenciante (pero no de una manera que sugiera que tiene su apoyo o que apoyan el uso que hace de su obra). | |------------|------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"nc\" /> | NoComercial \u2014 No puede utilizar esta obra para fines comerciales. | | < style=\"width:0.52083in;height:0.52083in\" alt=\"sa\" /> | Compartir bajo la Misma Licencia \u2014 Si altera o transforma esta obra, o genera una obra derivada, s\u00f3lo puede distribuir la obra generada bajo una licencia id\u00e9ntica a \u00e9sta. | Entendiendo que: Renuncia \u2014 Alguna de estas condiciones puede no aplicarse si se obtiene el permiso del titular de los derechos de autor Dominio P\u00fablico \u2014 Cuando la obra o alguno de sus elementos se hallen en el dominio p\u00fablico seg\u00fan la ley vigente aplicable, esta situaci\u00f3n no quedar\u00e1 afectada por la licencia. Otros derechos \u2014 Los derechos siguientes no quedan afectados por la licencia de ninguna manera: Los derechos derivados de usos leg\u00edtimos u otras limitaciones reconocidas por ley no se ven afectados por lo anterior. Los derechos morales del auto; Derechos que pueden ostentar otras personas sobre la propia obra o su uso, como por ejemplo derechos de imagen o de privacidad. Aviso \u2014 Al reutilizar o distribuir la obra, tiene que dejar muy en claro los t\u00e9rminos de la licencia de esta obra. La mejor forma de hacerlo es enlazar a esta p\u00e1gina. Licencia LA OBRA O LA PRESTACI\u00d3N (SEG\u00daN SE DEFINEN M\u00c1S ADELANTE) SE PROPORCIONA BAJO LOS T\u00c9RMINOS DE ESTA LICENCIA P\u00daBLICA DE CREATIVE COMMONS (CCPL O LICENCIA). LA OBRA O LA PRESTACI\u00d3N SE ENCUENTRA PROTEGIDA POR LA LEY ESPA\u00d1OLA DE PROPIEDAD INTELECTUAL Y/O CUALESQUIERA OTRAS NORMAS QUE RESULTEN DE APLICACI\u00d3N. QUEDA PROHIBIDO CUALQUIER USO DE LA OBRA O PRESTACI\u00d3N DIFERENTE A LO AUTORIZADO BAJO ESTA LICENCIA O LO DISPUESTO EN LA LEY DE PROPIEDAD INTELECTUAL. MEDIANTE EL EJERCICIO DE CUALQUIER DERECHO SOBRE LA OBRA O LA PRESTACI\u00d3N, USTED ACEPTA Y CONSIENTE LAS LIMITACIONES Y OBLIGACIONES DE ESTA LICENCIA, SIN PERJUICIO DE LA NECESIDAD DE CONSENTIMIENTO EXPRESO EN CASO DE VIOLACI\u00d3N PREVIA DE LOS T\u00c9RMINOS DE LA MISMA. EL LICENCIADOR LE CONCEDE LOS DERECHOS CONTENIDOS EN ESTA LICENCIA, SIEMPRE QUE USTED ACEPTE LOS PRESENTES T\u00c9RMINOS Y CONDICIONES. 1. Definiciones La obra es la creaci\u00f3n literaria, art\u00edstica o cient\u00edfica ofrecida bajo los t\u00e9rminos de esta licencia. En esta licencia se considera una prestaci\u00f3n cualquier interpretaci\u00f3n, ejecuci\u00f3n, fonograma, grabaci\u00f3n audiovisual, emisi\u00f3n o transmisi\u00f3n, mera fotograf\u00eda u otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente aplicable. La aplicaci\u00f3n de esta licencia a una colecci\u00f3n (definida m\u00e1s adelante) afectar\u00e1 \u00fanicamente a su estructura en cuanto forma de expresi\u00f3n de la selecci\u00f3n o disposici\u00f3n de sus contenidos, no siendo extensiva a \u00e9stos. En este caso la colecci\u00f3n tendr\u00e1 la consideraci\u00f3n de obra a efectos de esta licencia. El titular originario es: En el caso de una obra literaria, art\u00edstica o cient\u00edfica, la persona natural o grupo de personas que cre\u00f3 la obra. En el caso de una obra colectiva, la persona que la edite y divulgue bajo su nombre, salvo pacto contrario. En el caso de una interpretaci\u00f3n o ejecuci\u00f3n, el actor, cantante, m\u00fasico, o cualquier otra persona que represente, cante, lea, recite, interprete o ejecute en cualquier forma una obra. En el caso de un fonograma, el productor fonogr\u00e1fico, es decir, la persona natural o jur\u00eddica bajo cuya iniciativa y responsabilidad se realiza por primera vez una fijaci\u00f3n exclusivamente sonora de la ejecuci\u00f3n de una obra o de otros sonidos. En el caso de una grabaci\u00f3n audiovisual, el productor de la grabaci\u00f3n, es decir, la persona natural o jur\u00eddica que tenga la iniciativa y asuma la responsabilidad de las fijaciones de un plano o secuencia de im\u00e1genes, con o sin sonido. En el caso de una emisi\u00f3n o una transmisi\u00f3n, la entidad de radiodifusi\u00f3n. En el caso de una mera fotograf\u00eda, aquella persona que la haya realizado. En el caso de otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente, la persona que \u00e9sta se\u00f1ale. Se considerar\u00e1n obras derivadas aquellas obras creadas a partir de la licenciada, como por ejemplo: las traducciones y adaptaciones; las revisiones, actualizaciones y anotaciones; los compendios, res\u00famenes y extractos; los arreglos musicales y, en general, cualesquiera transformaciones de una obra literaria, art\u00edstica o cient\u00edfica. Para evitar la duda, si la obra consiste en una composici\u00f3n musical o grabaci\u00f3n de sonidos, la sincronizaci\u00f3n temporal de la obra con una imagen en movimiento (synching) ser\u00e1 considerada como una obra derivada a efectos de esta licencia. Tendr\u00e1n la consideraci\u00f3n de colecciones la recopilaci\u00f3n de obras ajenas, de datos o de otros elementos independientes como las antolog\u00edas y las bases de datos que por la selecci\u00f3n o disposici\u00f3n de sus contenidos constituyan creaciones intelectuales. La mera incorporaci\u00f3n de una obra en una colecci\u00f3n no dar\u00e1 lugar a una derivada a efectos de esta licencia. El licenciador es la persona o la entidad que ofrece la obra o prestaci\u00f3n bajo los t\u00e9rminos de esta licencia y le concede los derechos de explotaci\u00f3n de la misma conforme a lo dispuesto en ella. Usted es la persona o la entidad que ejercita los derechos concedidos mediante esta licencia y que no ha violado previamente los t\u00e9rminos de la misma con respecto a la obra o la prestaci\u00f3n, o que ha recibido el permiso expreso del licenciador de ejercitar los derechos concedidos mediante esta licencia a pesar de una violaci\u00f3n anterior. La transformaci\u00f3n de una obra comprende su traducci\u00f3n, adaptaci\u00f3n y cualquier otra modificaci\u00f3n en su forma de la que se derive una obra diferente. La creaci\u00f3n resultante de la transformaci\u00f3n de una obra tendr\u00e1 la consideraci\u00f3n de obra derivada. Se entiende por reproducci\u00f3n la fijaci\u00f3n directa o indirecta, provisional o permanente, por cualquier medio y en cualquier forma, de toda la obra o la prestaci\u00f3n o de parte de ella, que permita su comunicaci\u00f3n o la obtenci\u00f3n de copias. Se entiende por distribuci\u00f3n la puesta a disposici\u00f3n del p\u00fablico del original o de las copias de la obra o la prestaci\u00f3n, en un soporte tangible, mediante su venta, alquiler, pr\u00e9stamo o de cualquier otra forma. Se entiende por comunicaci\u00f3n p\u00fablica todo acto por el cual una pluralidad de personas, que no pertenezcan al \u00e1mbito dom\u00e9stico de quien la lleva a cabo, pueda tener acceso a la obra o la prestaci\u00f3n sin previa distribuci\u00f3n de ejemplares a cada una de ellas. Se considera comunicaci\u00f3n p\u00fablica la puesta a disposici\u00f3n del p\u00fablico de obras o prestaciones por procedimientos al\u00e1mbricos o inal\u00e1mbricos, de tal forma que cualquier persona pueda acceder a ellas desde el lugar y en el momento que elija. La explotaci\u00f3n de la obra o la prestaci\u00f3n comprende la reproducci\u00f3n, la distribuci\u00f3n, la comunicaci\u00f3n p\u00fablica y, en su caso, la transformaci\u00f3n. 2. L\u00edmites de los derechos. Nada en esta licencia pretende reducir o restringir cualesquiera l\u00edmites legales de los derechos exclusivos del titular de los derechos de propiedad intelectual de acuerdo con la Ley de propiedad intelectual o cualesquiera otras leyes aplicables, ya sean derivados de usos leg\u00edtimos, tales como la copia privada o la cita, u otras limitaciones como la resultante de la primera venta de ejemplares (agotamiento). 3. Concesi\u00f3n de licencia. Conforme a los t\u00e9rminos y a las condiciones de esta licencia, el licenciador concede, por el plazo de protecci\u00f3n de los derechos de propiedad intelectual y a t\u00edtulo gratuito, una licencia de \u00e1mbito mundial no exclusiva que incluye los derechos siguientes: Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n. Derecho a incorporar la obra o la prestaci\u00f3n en una o m\u00e1s colecciones. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n l\u00edcitamente incorporada en una colecci\u00f3n. Derecho de transformaci\u00f3n de la obra para crear una obra derivada siempre y cuando se incluya en \u00e9sta una indicaci\u00f3n de la transformaci\u00f3n o modificaci\u00f3n efectuada. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de obras derivadas creadas a partir de la obra licenciada. Derecho a extraer y reutilizar la obra o la prestaci\u00f3n de una base de datos. Para evitar cualquier duda, el titular originario: Conserva el derecho a percibir las remuneraciones o compensaciones previstas por actos de explotaci\u00f3n de la obra o prestaci\u00f3n, calificadas por la ley como irrenunciables e inalienables y sujetas a gesti\u00f3n colectiva obligatoria. Renuncia al derecho exclusivo a percibir, tanto individualmente como mediante una entidad de gesti\u00f3n colectiva de derechos, cualquier remuneraci\u00f3n derivada de actos de explotaci\u00f3n de la obra o prestaci\u00f3n que usted realice. Estos derechos se pueden ejercitar en todos los medios y formatos, tangibles o intangibles, conocidos en el momento de la concesi\u00f3n de esta licencia. Los derechos mencionados incluyen el derecho a efectuar las modificaciones que sean precisas t\u00e9cnicamente para el ejercicio de los derechos en otros medios y formatos. Todos los derechos no concedidos expresamente por el licenciador quedan reservados, incluyendo, a t\u00edtulo enunciativo pero no limitativo, los derechos morales irrenunciables reconocidos por la ley aplicable. En la medida en que el licenciador ostente derechos exclusivos previstos por la ley nacional vigente que implementa la directiva europea en materia de derecho sui generis sobre bases de datos, renuncia expresamente a dichos derechos exclusivos. 4. Restricciones. La concesi\u00f3n de derechos que supone esta licencia se encuentra sujeta y limitada a las restricciones siguientes: Usted puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n solamente bajo los t\u00e9rminos de esta licencia y debe incluir una copia de la misma, o su Identificador Uniforme de Recurso (URI). Usted no puede ofrecer o imponer ninguna condici\u00f3n sobre la obra o prestaci\u00f3n que altere o restrinja los t\u00e9rminos de esta licencia o el ejercicio de sus derechos por parte de los concesionarios de la misma. Usted no puede sublicenciar la obra o prestaci\u00f3n. Usted debe mantener intactos todos los avisos que se refieran a esta licencia y a la ausencia de garant\u00edas. Usted no puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n con medidas tecnol\u00f3gicas que controlen el acceso o el uso de una manera contraria a los t\u00e9rminos de esta licencia. Esta secci\u00f3n 4.a tambi\u00e9n afecta a la obra o prestaci\u00f3n incorporada en una colecci\u00f3n, pero ello no implica que \u00e9sta en su conjunto quede autom\u00e1ticamente o deba quedar sujeta a los t\u00e9rminos de la misma. En el caso que le sea requerido, previa comunicaci\u00f3n del licenciador, si usted incorpora la obra en una colecci\u00f3n y/o crea una obra derivada, deber\u00e1 quitar cualquier cr\u00e9dito requerido en el apartado 4.b, en la medida de lo posible. Si usted reproduce, distribuye o comunica p\u00fablicamente la obra o la prestaci\u00f3n, una colecci\u00f3n que la incorpore o cualquier obra derivada, debe mantener intactos todos los avisos sobre la propiedad intelectual e indicar, de manera razonable conforme al medio o a los medios que usted est\u00e9 utilizando: El nombre del autor original, o el seud\u00f3nimo si es el caso, as\u00ed como el del titular originario, si le es facilitado. El nombre de aquellas partes (por ejemplo: instituci\u00f3n, publicaci\u00f3n, revista) que el titular originario y/o el licenciador designen para ser reconocidos en el aviso legal, las condiciones de uso, o de cualquier otra manera razonable. El t\u00edtulo de la obra o la prestaci\u00f3n si le es facilitado. El URI, si existe, que el licenciador especifique para ser vinculado a la obra o la prestaci\u00f3n, a menos que tal URI no se refiera al aviso legal o a la informaci\u00f3n sobre la licencia de la obra o la prestaci\u00f3n. En el caso de una obra derivada, un aviso que identifique la transformaci\u00f3n de la obra en la obra derivada (p. ej., \"traducci\u00f3n castellana de la obra de Autor Original,\" o \"gui\u00f3n basado en obra original de Autor Original\"). Este reconocimiento debe hacerse de manera razonable. En el caso de una obra derivada o incorporaci\u00f3n en una colecci\u00f3n estos cr\u00e9ditos deber\u00e1n aparecer como m\u00ednimo en el mismo lugar donde se hallen los correspondientes a otros autores o titulares y de forma comparable a los mismos. Para evitar la duda, los cr\u00e9ditos requeridos en esta secci\u00f3n s\u00f3lo ser\u00e1n utilizados a efectos de atribuci\u00f3n de la obra o la prestaci\u00f3n en la manera especificada anteriormente. Sin un permiso previo por escrito, usted no puede afirmar ni dar a entender impl\u00edcitamente ni expl\u00edcitamente ninguna conexi\u00f3n, patrocinio o aprobaci\u00f3n por parte del titular originario, el licenciador y/o las partes reconocidas hacia usted o hacia el uso que hace de la obra o la prestaci\u00f3n. Para evitar cualquier duda, debe hacerse notar que las restricciones anteriores (p\u00e1rrafos 4.a y 4.b) no son de aplicaci\u00f3n a aquellas partes de la obra o la prestaci\u00f3n objeto de esta licencia que \u00fanicamente puedan ser protegidas mediante el derecho sui generis sobre bases de datos recogido por la ley nacional vigente implementando la directiva europea de bases de datos 5. Exoneraci\u00f3n de responsabilidad A MENOS QUE SE ACUERDE MUTUAMENTE ENTRE LAS PARTES, EL LICENCIADOR OFRECE LA OBRA O LA PRESTACI\u00d3N TAL CUAL (ON AN \"AS-IS\" BASIS) Y NO CONFIERE NINGUNA GARANT\u00cdA DE CUALQUIER TIPO RESPECTO DE LA OBRA O LA PRESTACI\u00d3N O DE LA PRESENCIA O AUSENCIA DE ERRORES QUE PUEDAN O NO SER DESCUBIERTOS. ALGUNAS JURISDICCIONES NO PERMITEN LA EXCLUSI\u00d3N DE TALES GARANT\u00cdAS, POR LO QUE TAL EXCLUSI\u00d3N PUEDE NO SER DE APLICACI\u00d3N A USTED. 6. Limitaci\u00f3n de responsabilidad. SALVO QUE LO DISPONGA EXPRESA E IMPERATIVAMENTE LA LEY APLICABLE, EN NING\u00daN CASO EL LICENCIADOR SER\u00c1 RESPONSABLE ANTE USTED POR CUALESQUIERA DA\u00d1OS RESULTANTES, GENERALES O ESPECIALES (INCLUIDO EL DA\u00d1O EMERGENTE Y EL LUCRO CESANTE), FORTUITOS O CAUSALES, DIRECTOS O INDIRECTOS, PRODUCIDOS EN CONEXI\u00d3N CON ESTA LICENCIA O EL USO DE LA OBRA O LA PRESTACI\u00d3N, INCLUSO SI EL LICENCIADOR HUBIERA SIDO INFORMADO DE LA POSIBILIDAD DE TALES DA\u00d1OS. 7. Finalizaci\u00f3n de la licencia Esta licencia y la concesi\u00f3n de los derechos que contiene terminar\u00e1n autom\u00e1ticamente en caso de cualquier incumplimiento de los t\u00e9rminos de la misma. Las personas o entidades que hayan recibido de usted obras derivadas o colecciones bajo esta licencia, sin embargo, no ver\u00e1n sus licencias finalizadas, siempre que tales personas o entidades se mantengan en el cumplimiento \u00edntegro de esta licencia. Las secciones 1, 2, 5, 6, 7 y 8 permanecer\u00e1n vigentes pese a cualquier finalizaci\u00f3n de esta licencia. Conforme a las condiciones y t\u00e9rminos anteriores, la concesi\u00f3n de derechos de esta licencia es vigente por todo el plazo de protecci\u00f3n de los derechos de propiedad intelectual seg\u00fan la ley aplicable. A pesar de lo anterior, el licenciador se reserva el derecho a divulgar o publicar la obra o la prestaci\u00f3n en condiciones distintas a las presentes, o de retirar la obra o la prestaci\u00f3n en cualquier momento. No obstante, ello no supondr\u00e1 dar por concluida esta licencia (o cualquier otra licencia que haya sido concedida, o sea necesario ser concedida, bajo los t\u00e9rminos de esta licencia), que continuar\u00e1 vigente y con efectos completos a no ser que haya finalizado conforme a lo establecido anteriormente, sin perjuicio del derecho moral de arrepentimiento en los t\u00e9rminos reconocidos por la ley de propiedad intelectual aplicable. 8. Miscel\u00e1nea Cada vez que usted realice cualquier tipo de explotaci\u00f3n de la obra o la prestaci\u00f3n, o de una colecci\u00f3n que la incorpore, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra o la prestaci\u00f3n en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Cada vez que usted realice cualquier tipo de explotaci\u00f3n de una obra derivada, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra objeto de esta licencia en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Si alguna disposici\u00f3n de esta licencia resulta inv\u00e1lida o inaplicable seg\u00fan la Ley vigente, ello no afectar\u00e1 la validez o aplicabilidad del resto de los t\u00e9rminos de esta licencia y, sin ninguna acci\u00f3n adicional por cualquiera las partes de este acuerdo, tal disposici\u00f3n se entender\u00e1 reformada en lo estrictamente necesario para hacer que tal disposici\u00f3n sea v\u00e1lida y ejecutiva. No se entender\u00e1 que existe renuncia respecto de alg\u00fan t\u00e9rmino o disposici\u00f3n de esta licencia, ni que se consiente violaci\u00f3n alguna de la misma, a menos que tal renuncia o consentimiento figure por escrito y lleve la firma de la parte que renuncie o consienta. Esta licencia constituye el acuerdo pleno entre las partes con respecto a la obra o la prestaci\u00f3n objeto de la licencia. No caben interpretaciones, acuerdos o condiciones con respecto a la obra o la prestaci\u00f3n que no se encuentren expresamente especificados en la presente licencia. El licenciador no estar\u00e1 obligado por ninguna disposici\u00f3n complementaria que pueda aparecer en cualquier comunicaci\u00f3n que le haga llegar usted. Esta licencia no se puede modificar sin el mutuo acuerdo por escrito entre el licenciador y usted.","title":"CF guia uso interfaz"},{"location":"markdown_strict/CF_guia-uso-interfaz/#introduccion","text":"La Interfaz de Escritorio del Cliente @firma es una aplicaci\u00f3n de escritorio que permite acceder a las distintas funcionalidades criptogr\u00e1ficas del Cliente @firma sin necesidad de instalarlo ni ejecutar el navegador Web. La interfaz de escritorio est\u00e1 orientada a un uso personal de las distintas funciones criptogr\u00e1ficas de las que dispone y no como parte de una tramitaci\u00f3n Web. Se facilita su uso por medio de asistentes que explican cada paso a seguir para la realizaci\u00f3n de una operaci\u00f3n y, al contrario que el Cliente @firma, desde la Interfaz de Escritorio es posible decidir a qu\u00e9 almac\u00e9n de certificados deseamos acceder. La interfaz de escritorio hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en alguno de los almacenes de certificados del sistema o en un almac\u00e9n en fichero. Los almacenes soportados son: Almac\u00e9n de Windows / Internet Explorer Almac\u00e9n de Mozilla Firefox Almac\u00e9n de Mac OS X Almac\u00e9n en fichero P12/PFX Tambi\u00e9n es posible utilizar dispositivos de firma externos como el DNIe, para lo cual es necesario configurar estos dispositivos en el almac\u00e9n de certificados desde el que se desee utilizar.","title":"Introducci\u00f3n"},{"location":"markdown_strict/CF_guia-uso-interfaz/#objeto-del-documento","text":"El objeto del presente documento es explicar el procedimiento b\u00e1sico para la realizaci\u00f3n de las distintas operaciones criptogr\u00e1ficas soportadas por la interfaz de escritorio del Cliente @firma: Firma electr\u00f3nica Multifirma Multifirma masiva Cifrado de datos Descifrado de datos Ensobrado digital Desensobrado digital Adicionalmente, se detalla el procedimiento que debe seguir el usuario para la instalaci\u00f3n de certificados electr\u00f3nicos en los distintos almacenes soportados.","title":"Objeto del documento"},{"location":"markdown_strict/CF_guia-uso-interfaz/#requisitos-minimos","text":"Sistema operativo: XP, Vista, 7, Server 2003, Server2008 Linux (Guadalinex, Ubuntu) MacOS X 10.6, 10.7 Sun Solaris / OpenSolaris 10 M\u00e1quina virtual Java: JRE 1.6 update 30 o superior Certificado digital de usuario instalado en el almac\u00e9n que se desee utilizar o disponible a trav\u00e9s de un m\u00f3dulo PKCS#11 configurado en el sistema (por ejemplo el DNIe).","title":"Requisitos m\u00ednimos"},{"location":"markdown_strict/CF_guia-uso-interfaz/#guia-de-uso","text":"La interfaz de escritorio del Cliente @firma es una aplicaci\u00f3n independiente que puede utilizarse sin necesidad de que el propio Cliente est\u00e9 instalado en el sistema del usuario. Para la ejecuci\u00f3n de esta interfaz es necesario cumplir con los requisitos detallados en el apartado \u201cRequisitos m\u00ednimos\u201d del presente documento. La vista principal de la interfaz de escritorio es: < En ella se muestra una serie de pesta\u00f1as que permiten acceden a distintas funcionalidades de la Interfaz de Escritorio del Cliente @firma. Estas son: Firma: Para la realizaci\u00f3n de firmas electr\u00f3nicas. Multifirma: Para la realizaci\u00f3n de cofirma y contrafirmas. Validaci\u00f3n: Para la validaci\u00f3n de firmas a nivel de estructura y la extracci\u00f3n de los datos firmados. Cifrado: Para el cifrado de datos. Descifrado: Para el descifrado de datos. Adicionalmente, es posible habilitar el resto de opciones disponibles activando la vista avanzada de la Interfaz desde la pantalla de opciones (ver apartado \u201c Opciones de configuraci\u00f3n \u201d), con lo cual la interfaz aparecer\u00eda como sigue: < En la vista avanzada nuevas opciones que dan acceso a otras de las funciones criptogr\u00e1ficas del Cliente @firma. Las nuevas opciones disponibles son: Firma Masiva: Para la realizaci\u00f3n de operaciones de firma y multifirma sobre una gran cantidad de ficheros simult\u00e1neamente. Ensobrado: Para la generaci\u00f3n de sobres digitales. Desensobrado: Para el extraer los documentos de los sobres digitales. Adicionalmente, la vista avanzada desbloquea nuevas opciones en elemento de las pesta\u00f1as de la vista simple. Estas son: Los formatos de firma \u201cXAdES Enveloping\u201d y \u201cXAdES Enveloped\u201d. El modo de cifrado/descifrado mediante claves. Algoritmos de cifrado/descifrados distintos de: SHA1 con 3Des (para el cifrado/descifrado mediante contrase\u00f1as). AES (para el cifrado/descifrado mediante claves). La interfaz de escritorio dispone de un sistema de ayuda integrado . Cuando el usuario tiene alguna duda sobre el objetivo de un componente de la interfaz puede seleccionarlo y pulsar el bot\u00f3n \u201cF1\u201d de su teclado. El sistema de ayuda se activar\u00e1 y le mostrar\u00e1 la ayuda relativa al componente seleccionado.","title":"Gu\u00eda de Uso"},{"location":"markdown_strict/CF_guia-uso-interfaz/#perfiles-de-usuario","text":"La interfaz de escritorio del Cliente @firma permite configurar perfiles de usuario en los que se almacenan las opciones de configuraci\u00f3n establecidas por este. Al arrancar la aplicaci\u00f3n, si ya defini\u00f3 alg\u00fan perfil de usuario, se le mostrar\u00e1 un di\u00e1logo para la selecci\u00f3n del perfil. En este di\u00e1logo, deber\u00e1 seleccionar el perfil que desee cargar y pulsar el bot\u00f3n Aceptar. < Puede crear nuevos perfiles de usuario, o editar y eliminar los existentes, desde la ventana de opciones de configuraci\u00f3n de la interfaz de escritorio. Consulte el apartado \u201cOpciones de configuraci\u00f3n\u201d para m\u00e1s informaci\u00f3n.","title":"Perfiles de usuario"},{"location":"markdown_strict/CF_guia-uso-interfaz/#opciones-de-configuracion","text":"Es posible acceder a las opciones de configuraci\u00f3n de la Interfaz de Escritorio del Cliente @firma por medio del elemento \u201cOpciones\u201d del men\u00fa \u201cHerramientas\u201d. < Las opciones disponibles en la ventana de Opciones, por medio de cada una de sus pesta\u00f1as, son: General: < General: Habilitar opciones de configuraci\u00f3n avanzadas Esta opci\u00f3n habilita la vista y opciones avanzadas de la Interfaz de Escritorio. Criptograf\u00eda: Algoritmo de huella digital por defecto: Es el algoritmo que se debe utilizar para ejecutar las firmas electr\u00f3nicas. Por defecto se utilizar\u00e1 SHA-1 (SHA1withRSA). No se recomienda modificar este valor salvo que se est\u00e9 seguro que el formato de firmas y el almac\u00e9n de certificados que se desea utilizar soportan este algoritmo. Utilizar tambi\u00e9n este algoritmo para las referencias internas XML. Esta opci\u00f3n permite que las referencias internas de las firmas XML se realicen con el algoritmo seleccionado. Pol\u00edtica de firma Configurar pol\u00edtica de firma Habilita la creaci\u00f3n de firmas EPES. Esta configuraci\u00f3n aplica a firmas en formato CAdES, XAdES y PAdES. Identificador de la pol\u00edtica (OID) OID identificador de la pol\u00edtica de firma. Calificador de la pol\u00edtica de firma (URL) URL con la localizaci\u00f3n de la pol\u00edtica de firma. Huella digital SHA1 Huella digital declarada para la pol\u00edtica de firma. Consulte la documentaci\u00f3n de su pol\u00edtica de firma para conocer los valores predefinidos para cada propiedad de la pol\u00edtica. Puede consultar las opciones de configuraci\u00f3n de la pol\u00edtica de firma de la AGE en el apartado \u201c Pol\u00edtica de firma de la AGE \u201d del presente documento. Para la generaci\u00f3n de firmas de facturas electr\u00f3nicas no es necesario configurar la pol\u00edtica de firma, basta con configurar el formato de firma de facturas electr\u00f3nicas, ya que este establece internamente los atributos de la pol\u00edtica. Cualquier configuraci\u00f3n de pol\u00edtica de firma establecida a trav\u00e9s de este di\u00e1logo se ignorar\u00e1 al generar firmas en formato de factura electr\u00f3nica. Configuraci\u00f3n de firma < Firmas de documentos PDF: Motivo / raz\u00f3n de la firma electr\u00f3nica. Establece el motivo asociado a las firmas PDF que se generen. Lugar donde se realiza la firma electr\u00f3nica. Establece la localizaci\u00f3n asociada a las firmas PDF que se generen. Datos de contacto del firmante. Establece la informaci\u00f3n de contacto de quien genera la firma PDF. Formato PAdES. Establece el tipo de firmas PAdES que se generar\u00e1n. Las opciones posibles son PAdES B\u00e1sico (Necesario si queremos generar varias firmas sobre el mismo PDF) PAdES BES Accesibilidad < Texto: Grande Aumenta el tama\u00f1o del texto para facilitar su legibilidad. Negrita Configura que el texto por defecto aparezca en negrita. Combinaci\u00f3n de colores: Alto contraste Habilita el modo alto contraste para la aplicaci\u00f3n. Gesti\u00f3n del foco Remarcar elementos con foco Remarca los componentes que reciben el foco. Ventana Maximizar todas las ventanas Maximiza todas las ventanas de la aplicaci\u00f3n para mejorar su visibilidad. Cursos de texto Grande Aumenta el tama\u00f1o del cursor de texto para facilitar su localizaci\u00f3n. Valores por defecto Restablece la configuraci\u00f3n por defecto de accesibilidad. Aplicar Aplica a la interfaz la configuraci\u00f3n de accesibilidad introducida. Perfiles de usuario < Perfil actual Perfil actual cargado. Perfiles Perfiles disponibles Listado de perfiles de usuario disponibles. Cada perfil tiene asociado valores para cada una de las opciones de configuraci\u00f3n de las pesta\u00f1as General, Contexto de firma y Accesibilidad de la ventana de opciones. Cargar Carga el perfil seleccionado, restableciendo las opciones configuradas para ese perfil. Eliminar Elimina el perfil seleccionado. Se pedir\u00e1 confirmaci\u00f3n al usuario antes de proceder a la eliminaci\u00f3n. Guardar Guarda las opciones de configuraci\u00f3n establecidas actualmente en las pesta\u00f1as General, Contexto de firma y Accesibilidad en el perfil actual de usuario. Si el perfil actual es el Predeterminado, se crear\u00e1 un nuevo perfil tal como ocurrir\u00eda con la opci\u00f3n Guardar como. Guardar como Crea un nuevo perfil de usuario con las opciones de configuraci\u00f3n establecidas actualmente. Se le pedir\u00e1 al usuario que inserte el nombre del nuevo perfil.","title":"Opciones de configuraci\u00f3n"},{"location":"markdown_strict/CF_guia-uso-interfaz/#firma-electronica","text":"Desde la pesta\u00f1a \u201c Firma \u201d es posible realizar firmas electr\u00f3nicas sobre un documento local o remoto en diversos formatos. < Las opciones disponibles son: Fichero a firmar digitalmente: Permite seleccionar el fichero que se desea firmar. Es posible pulsar el bot\u00f3n \u201cExaminar\u201d para buscar un fichero en disco o escribir directamente su ruta (local o remota) en la caja de texto asociada. Almac\u00e9n de certificados: Permite seleccionar el almac\u00e9n en donde se encuentra el certificado que deseamos utilizar para realizar la firma. Las opciones disponibles son: Windows / Internet Explorer: Para tomar el certificado del almac\u00e9n de Windows o un dispositivo externo (por ejemplo, el DNIe) instalado en el sistema. Mozilla Firefox (unificado): Para tomar el certificado del almac\u00e9n de Firefox o un dispositivo externo (por ejemplo, el DNIe) configurado en este almac\u00e9n. PKCS#12 / PFX: Para tomar el certificado de un almac\u00e9n en disco en formato P12 o PFX. Formato: Permite seleccionar el formato de firma electr\u00f3nica. Los formatos disponibles son: Firma est\u00e1ndar (XAdES Detached): Principal formato de firma avanzada XML utilizado en la Administraci\u00f3n P\u00fablica. XAdES enveloping: S\u00f3lo disponible en la vista avanzada. Formato de firma avanzada XML. XAdES enveloped: S\u00f3lo disponible en la vista avanzada. Formato de firma avanzada XML. S\u00f3lo permite firmar ficheros XML. CAdES: Formato de firma avanzada binaria. Permite decidir si se deben incluir los datos firmados dentro del fichero de firma. PAdES: Formato de firma avanzada para documentos PDF. S\u00f3lo permite firmar este tipo de documentos. Factura Electr\u00f3nica: Formato espec\u00edfico para la firma de facturas electr\u00f3nicas acordes la versi\u00f3n 3.1 del esquema de factura. Este formato configura todas las propiedades necesarias (incluida la pol\u00edtica de firma) para que las firmas sean correctamente validadas por los validadores de facturas. ODF (Open Document Format): Formato de firma de documentos ODF. Estos son los documentos generados por las suites ofim\u00e1ticas \u201cOpenOffice.org\u201d y \u201cLibreOffice\u201d. Los formatos soportados son: \u201c.odt\u201d, \u201c.ods\u201d y \u201c.odp\u201d. OOXML (Office Open XML): Formato de firma de documentos OOXML. Estos son los documentos generados por la suite ofim\u00e1tica \u201cMicrosoft Office\u201d 2007 y 2010. Los formatos soportados son: \u201c.docx\u201d, \u201c.xlsx\u201d, \u201c.pptx\u201d y \u201c.ppsx\u201d. La Plataforma servidora @firma y la herramienta VALIDe no validan este tipo de firmas. Para ejecutar la operaci\u00f3n pulse el bot\u00f3n \u201cFirmar\u201d. A continuaci\u00f3n se le mostrar\u00e1 un di\u00e1logo modal para la selecci\u00f3n del certificado que desea utilizar para la firma. < Si la operaci\u00f3n finaliz\u00f3 correctamente, se le mostrar\u00e1 un di\u00e1logo para el guardado de la firma electr\u00f3nica generada. Tenga en cuenta que si el almac\u00e9n de certificados seleccionado est\u00e1 protegido con contrase\u00f1a, se le solicitar\u00e1 esta antes de poder acceder al listado de certificados. < Todas las firmas generadas a trav\u00e9s de esta interfaz incluyen los datos firmados dentro del fichero de firma (firma impl\u00edcita), a excepci\u00f3n de la firmas en formato CAdES en donde se da a elegir esta caracter\u00edstica a trav\u00e9s del di\u00e1logo: <","title":"Firma electr\u00f3nica"},{"location":"markdown_strict/CF_guia-uso-interfaz/#multifirma","text":"Desde la pesta\u00f1a \u201c Multifirma \u201d es posible realizar cofirmas y contrafirmas sobre firmas electr\u00f3nicas ya generadas. Esto es, agregar nuevos firmantes a firmas ya existentes, ya sea para aprobar tambi\u00e9n el documento (cofirmas) o aprobar una o varias de las firmas ya existentes (contrafirmas). < Las opciones disponibles son: Almac\u00e9n / repositorio de certificados: Permite seleccionar el almac\u00e9n en donde se encuentra el certificado que deseamos utilizar para realizar la firma. Las opciones disponibles son: Windows / Internet Explorer: Para tomar el certificado del almac\u00e9n de Windows o un dispositivo externo (por ejemplo, el DNIe) instalado en el sistema. Mozilla Firefox (unificado): Para tomar el certificado del almac\u00e9n de Firefox o un dispositivo externo (por ejemplo, el DNIe) configurado en este almac\u00e9n. PKCS#12 / PFX: Para tomar el certificado de un almac\u00e9n en disco en formato P12 o PFX. Tipo de multifirma Agregar nueva firma (Cofirma): Permite agregar nuevas firmas a un documento de firmas. En el caso de las firmas PDF, ODF y OOXML. Para agregar nuevas firmas al documento basta con firmarlo m\u00faltiples veces a trav\u00e9s de la pesta\u00f1a \u201cFirma\u201d de la interfaz. Refrendar una firma (Contrafirma): Permite firmar firmas anteriores de un documento de firmas. Al pulsar el bot\u00f3n \u201cFirmar\u201d se abrir\u00e1 un asistente para la generaci\u00f3n de la multifirma. Este asistente variar\u00e1 seg\u00fan se haya decidido realizar una cofirma o una contrafirma.","title":"Multifirma"},{"location":"markdown_strict/CF_guia-uso-interfaz/#cofirma","text":"Esta opci\u00f3n nos mostrar\u00e1 un asistente para la generaci\u00f3n de una cofirma electr\u00f3nica. A lo largo de varios pasos se nos explicar\u00e1 en que consiste esta operaci\u00f3n y se nos solicitar\u00e1n los datos necesarios para ejecutarla: < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d accederemos a la primera pantalla del asistente, en donde deberemos seleccionar el documento que deseamos firmar y el fichero con el resto de firma generadas. < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se nos mostrar\u00e1 un di\u00e1logo para la selecci\u00f3n del certificado que dese utilizar para la cofirma. Seleccione el certificado deseado y a continuaci\u00f3n se le mostrar\u00e1 un segundo di\u00e1logo para el guardado de la multifirma generada o, en caso de error, una ventana con el mensaje de error correspondiente.","title":"Cofirma"},{"location":"markdown_strict/CF_guia-uso-interfaz/#contrafirma","text":"Esta opci\u00f3n nos mostrar\u00e1 el asistente para la generaci\u00f3n de una contrafirma electr\u00f3nica. A lo largo de varios pasos se nos explicar\u00e1 en que consiste esta operaci\u00f3n y se nos solicitar\u00e1n los datos necesarios para ejecutarla: < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d accederemos a la primera pantalla del asistente, en donde deberemos seleccionar el fichero con las firmas que deseemos contrafirmar. < Al pulsar \u201cSiguiente >\u201d no aparecer\u00e1 una nueva pantalla en donde se nos mostrar\u00e1 el \u00e1rbol de firmas de documento y deberemos indicar cu\u00e1les de ellas queremos contrafirmar. < Las opciones disponibles en esta pantalla son: Firmas que desea contrafirmar: Permite seleccionar las firmas que se desean contrafirmar. Los valores posible son: Firmas seleccionadas: Contrafirma todas las firmas que seleccionadas en el \u00e1rbol de firmas. Firmantes seleccionados: Contrafirma todas las firmas de los autores de los cuales se ha seleccionado al menos una firma en el \u00e1rbol de firmas. Todo el \u00e1rbol de firmas: Contrafirmas todas las firmas. Firmas de \u00faltimo nivel: Contrafirma todas las firmas que no tienen todav\u00eda ninguna contrafirma. \u00c1rbol de firmas: Listado en forma de \u00e1rbol de todas las firmas contenidas en el fichero de firma seleccionado anteriormente. Para seleccionar una firma, basta con hacer clic sobre la misma, para seleccionar m\u00e1s de una, mantenga pulsada la tecla Control (\u201c Ctrl \u201d) al seleccionarlas y para seleccionar varias firmas consecutivas, mantenga pulsada la tecla May\u00fasculas (\u201c Shift \u201d) y seleccione la primera y \u00faltima del rango. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se nos mostrar\u00e1 un di\u00e1logo para la selecci\u00f3n del certificado que dese utilizar para la firma. Seleccione el certificado deseado y a continuaci\u00f3n se le mostrar\u00e1 un segundo di\u00e1logo para el guardado de la multifirma generada o, en caso de error, una ventana con el mensaje de error correspondiente.","title":"Contrafirma"},{"location":"markdown_strict/CF_guia-uso-interfaz/#multifirma-masiva","text":"Desde la pesta\u00f1a \u201c Firma masiva \u201d es posible realizar firmas y multifirmas en bloque. Esto implica ordenar una operaci\u00f3n de firma que afectar\u00e1 a m\u00faltiples ficheros y generar\u00e1 un nuevo fichero de firma para cada uno de ellos. Esta pesta\u00f1a s\u00f3lo est\u00e1 disponible en el modo de vista avanzada. IMPORTANTE: El DNIe exige que el usuario acepte individualmente toda y cada una de las firmas individuales del proceso de firma masiva. < Las opciones que se muestran en esta pantalla son: Alm\u00e1cen / repositorio de certificados. Permite seleccionar el almac\u00e9n en donde se encuentra el certificado que deseamos utilizar para realizar la firma. Las opciones disponibles son: Windows / Internet Explorer: Para tomar el certificado del almac\u00e9n de Windows o un dispositivo externo (por ejemplo, el DNIe) instalado en el sistema. Mozilla Firefox (unificado): Para tomar el certificado del almac\u00e9n de Firefox o un dispositivo externo (por ejemplo, el DNIe) configurado en este almac\u00e9n. PKCS#12 / PFX: Para tomar el certificado de un almac\u00e9n en disco en formato P12 o PFX. Opciones de la firma por lotes Alerta sonora al finalizar el proceso: Utiliza el beep del sistema para emitir un sonido una vez finaliza el proceso de firma masiva. Al pulsar el bot\u00f3n \u201cFirmar\u201d se abrir\u00e1 el asistente para finalizar la configuraci\u00f3n de la operaci\u00f3n de multifirma masiva. < Al pulsa el bot\u00f3n \u201cSiguiente >\u201d, nos aparece una nueva ventana donde se nos explica el proceso seg\u00fan la operaci\u00f3n de firma seleccionada y se nos permite configurar tanto esta como el formato de firma. < Las opciones de configuraci\u00f3n son: Operaci\u00f3n predeterminada: Firma: Firna cada uno de los ficheros del lote usando el formato de firma seleccionado. Cofirma: Cofirma todos los ficheros de firma del lote y firmar\u00e1 con el formato seleccionado todos aquellos que no sean. Contrafirma: Contrafirmar\u00e1 todos los ficheros de firma del lote. Formato: Formato de firma utilizado cuando se solicita la operaci\u00f3n de firma, o cuando se solicita la operaci\u00f3n de cofirma y se encuentran documentos de datos. Cuando se pulsa el bot\u00f3n \u201cSiguiente >\u201d nos desplazamos a una nueva pantalla del asistente. Desde esta nos es posible establecer configuraciones adicionales sobre el formato de firma y los nodos que deben contrafirmarse. Si se seleccion\u00f3 la operaci\u00f3n de firma, no se mostrar\u00e1 la pantalla mostrada a continuaci\u00f3n, sino la siguiente, y si se seleccion\u00f3 la operaci\u00f3n de cofirma no se mostrar\u00e1n las opciones para la configuraci\u00f3n de la contrafirma s\u00f3lo parecer\u00e1 cuando se seleccione esta operaci\u00f3n. < Las opciones configurables en esta pantalla son: Respetar el formato de firma Si no se activa esta casilla, se considerar\u00e1 que cualquier fichero del lote no acorde al formato de firma indicado en el paso anterior es un fichero de datos. En caso de marcarla y cuando la operaci\u00f3n seleccionada sea cofirma o contrafirma, se comprobar\u00e1 para cada fichero del lote si es un formato de firma soportado y, en caso de serlo, se multifirmar\u00e1 en el formato correspondiente. Opciones de contrafirma: Nos permite indicar que firmas del fichero deben contrafirmarse. Las opciones son: Contrafirmar todas las firmas: Agrega una contrafirma a cada firma del fichero. Contrafirmar \u00fanicamente los \u00faltimos firmantes: Agrega una contrafirma a todas aquellas firmas que no tuvieran una previamente. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d accederemos a una nueva ventana desde la que podemos configurar los ficheros que pertenecer\u00e1n al lote de firma. < Las opciones de configuraci\u00f3n son: Directorio con los ficheros de datos. Aqu\u00ed podemos indicar el directorio en donde se encuentran los ficheros con los que queremos operar. Podemos introducir la ruta en la caja de texto correspondiente o pulsar el bot\u00f3n \u201cExaminar\u201d para buscar el directorio en el sistema del usuario. Incluir subdirectorios de forma recursiva. Al seleccionar esta casilla se incluir\u00e1n en el lote de firma todos los ficheros de los subdirectorios de aquel que hemos seleccionado. Aplicar s\u00f3lo a los ficheros con extensi\u00f3n: En esta caja de texto podemos introducir las extensiones, separadas por comas (\u2018,\u2019), de los ficheros que deseamos que se incluyan en el lote de firma. Por ejemplo, con la cadena \u201ctxt,pdf\u201d s\u00f3lo entrar\u00edan en el lote los ficheros \u201ctxt\u201d y \u201cpdf\u201d del directorio seleccionado. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se nos mostrar\u00e1 una nueva ventana desde la que podremos seleccionar el directorio en donde se almacenar\u00e1n las firmas generadas. < Las opciones configurables en esta pantalla son: Directorio de firmas. Aqu\u00ed podemos indicar el directorio en donde se encuentran los ficheros con los que queremos operar. Podemos introducir la ruta en la caja de texto correspondiente o pulsar el bot\u00f3n \u201cExaminar\u201d para buscar el directorio en el sistema del usuario. Sobrescribir ficheros si ya existen. Si marcamos esta casilla se sobrescribir\u00e1 cualquier fichero que exista en el directorio de salida con el mismo nombre que alguno de los ficheros que ya existen. Si no se marca la casilla se agregar\u00e1 un n\u00famero en serie al nombre del fichero. Si por ejemplo: se fuese a generar el fichero \u201cfirma.csig\u201d y ya existiese uno con este nombre, se crear\u00eda \u201cfirma(1).csig\u201d; si este tambi\u00e9n existiera se crear\u00eda \u201cfirma(2).csig\u201d y as\u00ed sucesivamente. Fichero de log. Este es el fichero que se crear\u00e1 y mostrar\u00e1 el resultado de la operaci\u00f3n masiva. Todos los errores que se hayan producido durante el proceso vendr\u00e1n listados en este fichero. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d quedar\u00e1 configurado el procedimiento, tras lo cual se nos mostrar\u00e1 un nuevo di\u00e1logo y deberemos pulsar el bot\u00f3n \u201cFinalizar\u201d para iniciar el procedimiento de firma masiva. < Una vez terminado el procedimiento, se nos informar\u00e1 del resultado y, en caso de error, se nos remitir\u00e1 al fichero de log.","title":"Multifirma Masiva"},{"location":"markdown_strict/CF_guia-uso-interfaz/#validacion-de-firmas","text":"En la pesta\u00f1a \u201c Validaci\u00f3n \u201d se nos muestra un cuadro para la selecci\u00f3n del fichero de firma que deseemos validar. La validaci\u00f3n que se realizar\u00e1 del mismo consiste en la comprobaci\u00f3n de la estructura de la firma, no de los datos contenidos en ella. < Al pulsar el bot\u00f3n \u201cValidar\u201d se abrir\u00e1 una nueva ventana con el resultado del proceso de validaci\u00f3n. < La pantalla del visor de firmas muestra el icono y el texto correspondiente al resultado de la validaci\u00f3n. Adicionalmente, muestra el fichero de firma analizado y los datos de la firma: Formato de firma Formato de firma identificado en el fichero. Datos firmados Enlace a los datos contenidos en la firma. Si se conoce la aplicaci\u00f3n por defecto para abrir los datos contenidos en la firma, lo cual depende de que se haya podido identificar el formato de estos datos (que es distinto al formato de la firma), se abrir\u00e1n con esta aplicaci\u00f3n. Si no se pudo identificar el formato o no hay aplicaci\u00f3n por defecto para visualizarlos, se dar\u00e1 la opci\u00f3n de guardarlos en el sistema del usuario. Enlace para la carga de datos. Si la firma no conten\u00eda los datos firmados no habr\u00e1 sido posible validar contra estos la informaci\u00f3n de la firma. En este caso, el resultado de la validaci\u00f3n indicar\u00e1 que esta no se pudo completar y aqu\u00ed se mostrar\u00e1 un enlace para la carga de los datos. Al pulsarlo se mostrar\u00e1 un di\u00e1logo de selecci\u00f3n y, al seleccionar un fichero de datos, se realizar\u00e1 el proceso de validaci\u00f3n completo, incluida la validaci\u00f3n de los datos. \u00c1rbol de firmas del documento \u00c1rbol con los firmantes identificados en la firma, organizados de tal modo que representen la estructura de firmas del documento. Al seleccionar uno de los firmantes se abrir\u00e1 el certificado que se utilizo para realizar la firma (sin clave privada).","title":"Validaci\u00f3n de firmas"},{"location":"markdown_strict/CF_guia-uso-interfaz/#cifrado-de-datos","text":"Desde la pesta\u00f1a \u201c Cifrado \u201d podemos acceder a las funcionalidades el cifrado sim\u00e9trico de datos. Mediante estas funciones podemos cifrar documentos para uso personal que no queremos que nadie vea o documentos sensibles que debemos enviar a otra persona. S\u00f3lo alguien con la clave/contrase\u00f1a utilizada para el cifrado podr\u00e1 descifrar este documento y acceder a su contenido. La operaci\u00f3n de descifrado de datos se realiza desde la pesta\u00f1a \u201c Descifrado \u201d. < Las opciones de configuraci\u00f3n de esta pantalla son: Fichero a cifrar digitalmente: Permite seleccionar el fichero que se desea cifrar. Es posible pulsar el bot\u00f3n \u201cExaminar\u201d para buscar un fichero en disco o escribir directamente su ruta en la caja de texto asociada. Mecanismo de cifrado: Permite establecer si se desea utilizar una contrase\u00f1a para el cifrado o una clave de cifrado, espec\u00edfica o autogenerada, para el algoritmo de cifrado seleccionado. Algoritmo de cifrado electr\u00f3nico: Es el algoritmo que se utilizar\u00e1 para el cifrado de datos. La lista de algoritmos var\u00eda seg\u00fan el mecanismo de cifrado escogido y la vista activa en la interfaz. Los algoritmos disponibles son: Para el cifrado por contrase\u00f1a (pre-establecido en la vista simple): SHA1 y 3DES (pre-establecido en la vista simple). SHA1 y RC2. MD5 y DES. Para el cifrado mediante clave: AES Alleged RC4 Blowfish DES 3DES RC2 En la vista simple de la interfaz, el mecanismo de cifrado es obligatoriamente \u201cContrase\u00f1a de cifrado\u201d y el algoritmo es siempre \u201cContrase\u00f1a SHA1 y 3DES\u201d. Al pulsar en el bot\u00f3n \u201cCifrar\u201d nos aparecer\u00e1 un asistente para ayudarnos a configurar el proceso de cifrado. < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d accederemos a las pantallas de configuraci\u00f3n del asistente, que variar\u00e1 seg\u00fan el mecanismo de cifrado elegido.","title":"Cifrado de datos"},{"location":"markdown_strict/CF_guia-uso-interfaz/#contrasena-de-cifrado","text":"En la primera pantalla del asistente para el cifrado con contrase\u00f1a se nos pedir\u00e1 introducir dos veces la contrase\u00f1a que deseamos utilizar para el cifrado. Las dos contrase\u00f1as introducidas deben ser la misma, respetando min\u00fasculas y may\u00fasculas, y no deben contener caracteres no ASCII como vocales acentuadas, la letra \u2018\u00f1\u2019 o caracteres extra\u00f1os. < Las opciones que aparecen en esta pantalla son: Introduzca la contrase\u00f1a: En esta caja de texto debe introducir la contrase\u00f1a que desee utilizar para el cifrado de datos, respetando las condiciones ya explicadas. Introduzca de nuevo la contrase\u00f1a: En esta caja de texto debe volver a introducir la contrase\u00f1a de cifrado. Si no coincide con la primera contrase\u00f1a, se le informar\u00e1 al pulsar el bot\u00f3n \u201cSiguiente >\u201d. Mostrar contrase\u00f1a Hace aparecer la contrase\u00f1a en texto claro. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se ejecutar\u00e1 el proceso de cifrado. En caso de finalizar el proceso correctamente le aparecer\u00e1 un di\u00e1logo para el guardado del fichero con los datos cifrado. En caso de error le aparecer\u00e1 el mensaje de error correspondiente.","title":"Contrase\u00f1a de cifrado"},{"location":"markdown_strict/CF_guia-uso-interfaz/#clave-de-cifrado","text":"En la primera pantalla del asistente para el cifrado con clave se nos pedir\u00e1 la clave que deseamos utilizar para el cifrado. Esta clave debe respetar un formato concreto para cada algoritmo de cifrado y debe introducirse en Base64. La alternativa, mucho m\u00e1s recomendable, a introducir la clave, es generar una clave v\u00e1lida aleatoria. < Las opciones de configuraci\u00f3n que aparecen en esta pantalla son: Clave de cifrado: En esta caja de texto podemos introducir la clave en base 64. Autogenerar: Mediante este bot\u00f3n generaremos una clave aleatoria v\u00e1lida para el algoritmo de cifrado seleccionado, ahorr\u00e1ndonos introducir una manualmente. Almac\u00e9n Permite abrir el almac\u00e9n de claves del usuario para seleccionar para el cifrado una clave ya all\u00ed almacenada. Guardar en almac\u00e9n de claves de cifrado de @firma. Si marcamos esta casilla la clave de cifrado introducida, ya se haya introducido manualmente o autogenerado, se almacenar\u00e1 en el almac\u00e9n de claves del Cliente @firma. Para saber m\u00e7\u00e1s del almac\u00e9n de claves del Cliente @firma consulte el apartado \u201c Almac\u00e9n de claves de cifrado \u201d. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se ejecutar\u00e1 el proceso de cifrado. En caso de error, se mostrar\u00e1 el mensaje pertinente y, en caso de finalizar la operaci\u00f3n correctamente, se solicitar\u00e1 mediante un di\u00e1logo d\u00f3nde desea guardarse el fichero cifrado. Si se marc\u00f3 la casilla para almacenar la clave en el almac\u00e9n se almacenar\u00e1 una vez finalizado el proceso.","title":"Clave de cifrado"},{"location":"markdown_strict/CF_guia-uso-interfaz/#almacen-de-claves-de-cifrado","text":"El almac\u00e9n de claves de cifrado del Cliente @firma es compartido por el Cliente y la Interfaz de Escritorio. Las caracter\u00edsticas del mismo son: No es necesario tener instalado el Cliente @firma. Est\u00e1 protegido por una contrase\u00f1a que deber\u00e1 establecer el usuario la primera vez que se almacene en \u00e9l una clave. < Cada vez que se almacene una clave, se nos pedir\u00e1 un alias con el que identificarla. < Los alias de las claves se almacenar\u00e1n siempre en min\u00fasculas. Se almacena en el directorio del usuario con el nombre \u201cciphkeys.jceks\u201d. No se elimina aunque se desinstale el Cliente @firma o la Interfaz de Escritorio. Tenga en cuenta que si el usuario elimina este almac\u00e9n manualmente, se perder\u00e1n todas las claves de cifrado que tuviese almacenadas.","title":"Almac\u00e9n de claves de cifrado"},{"location":"markdown_strict/CF_guia-uso-interfaz/#descifrado-de-datos","text":"Desde la pesta\u00f1a \u201c Descifrado \u201d podemos descifrar un fichero de datos que haya sido previamente cifrado por medio de las funcionalidades de la pesta\u00f1a \u201c Cifrado \u201d. < Las opciones de configuraci\u00f3n de esta pantalla son: Fichero de datos: Permite seleccionar el fichero que se desea descifrar. Es posible pulsar el bot\u00f3n \u201cExaminar\u201d para buscar un fichero en disco o escribir directamente su ruta en la caja de texto asociada. Mecanismo de cifrado: Permite establecer si el fichero se cifr\u00f3 mediante una contrase\u00f1a o una clave de cifrado. Algoritmo de cifrado electr\u00f3nico: Es el algoritmo que se utiliz\u00f3 para el cifrado de datos. La lista de algoritmos var\u00eda seg\u00fan el mecanismo de cifrado escogido y la vista activa en la interfaz. Los algoritmos disponibles son: Para el descifrado con contrase\u00f1a (pre-establecido en la vista simple): SHA1 y 3DES (pre-establecido en la vista simple). SHA1 y RC2. MD5 y DES. Para el descifrado mediante clave: AES Alleged RC4 Blowfish DES 3DES RC2 En la vista simple de la interfaz, el mecanismo de cifrado es obligatoriamente \u201cContrase\u00f1a de cifrado\u201d y el algoritmo es siempre \u201cContrase\u00f1a SHA1 y 3DES\u201d. Recuerde que el mecanismo y el algoritmo de cifrado seleccionado debe coincidir con el utilizado cuando se cifr\u00f3 el documento. Para facilitar este aspecto, es recomendable utilizar siempre los mismos valores para estos par\u00e1metros. Al pulsar el bot\u00f3n \u201cDescifrar\u201d se nos abrir\u00e1 el asistente para la configuraci\u00f3n del proceso de descifrado. < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se nos mostrar\u00e1 la pantalla del asistente para la inserci\u00f3n de la contrase\u00f1a o clave de cifrado. Esta pantalla variar\u00e1 seg\u00fan el mecanismo de cifrado seleccionado.","title":"Descifrado de datos"},{"location":"markdown_strict/CF_guia-uso-interfaz/#contrasena-de-cifrado_1","text":"Si se seleccion\u00f3 el mecanismo de cifrado mediante contrase\u00f1a, el asistente nos mostrar\u00e1 una pantalla para la inserci\u00f3n de la contrase\u00f1a de cifrado. S\u00f3lo ser\u00e1 necesario insertar esta para llevar a cabo el proceso. < Las opciones de configuraci\u00f3n disponibles son: Contrase\u00f1a de cifrado: En la caja de texto que aparece deberemos insertar la contrase\u00f1a que se utiliz\u00f3 para el cifrado de los datos. Deben respetarse las may\u00fasculas y min\u00fasculas de la contrase\u00f1a original. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se llevar\u00e1 a cabo el proceso de descifrado. Si ocurriese un error durante el mismo, se informar\u00eda al usuario con el mensaje correspondiente. Aseg\u00farese en este caso de haber seleccionado el mecanismo y el algoritmo de cifrado correctos, adem\u00e1s de la contrase\u00f1a. Si el proceso finaliza correctamente, se mostrar\u00e1 un di\u00e1logo para el guardado del documento descifrado.","title":"Contrase\u00f1a de cifrado"},{"location":"markdown_strict/CF_guia-uso-interfaz/#clave-de-cifrado_1","text":"Si se seleccion\u00f3 el mecanismo de cifrado mediante clave, el asistente nos mostrar\u00e1 una pantalla para la inserci\u00f3n de la clave que se utiliz\u00f3 en el proceso de cifrado. S\u00f3lo ser\u00e1 necesario insertarla o recuperarla del almac\u00e9n de claves para llevar a cabo el proceso. < Las opciones de configuraci\u00f3n disponibles en esta pantalla son: Clave de descifrado: En esta caja de texto puede insertar la clave de cifrado en base 64 que utiliz\u00f3 para el cifrado de los datos. Tenga en cuenta que la clave debe disponer de un formato concreto seg\u00fan el algoritmo de cifrado utilizado. Examinar almac\u00e9n: Permite acceder al almac\u00e9n de claves (para lo que deberemos conocer su contrase\u00f1a) y recuperar una de las claves almacenadas. Si almacen\u00f3 la clave en el almac\u00e9n durante el proceso de cifrado, este es el mecanismo recomendado para seleccionarla. Al lado de los alias que aparecen en el almac\u00e9n y que designan a claves del mismo, puede verse el algoritmo con la que es compatible a clave. < Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se llevar\u00e1 a cabo el descifrado de los datos. En caso de producirse un error durante el mismo, se mostrar\u00e1 el mensaje correspondiente, mientras que, si finaliz\u00f3 correctamente, se mostrar\u00e1 un di\u00e1logo para selecci\u00f3n donde se desea almacenar el documento descifrado.","title":"Clave de cifrado"},{"location":"markdown_strict/CF_guia-uso-interfaz/#ensobrado-digital","text":"Desde la pesta\u00f1a \u201c Ensobrado \u201d es posible generar sobres digitales para la transferencia de datos segura con otras personas. Esta pesta\u00f1a s\u00f3lo est\u00e1 disponible en el modo de vista avanzada. IMPORTANTE: El DNIe y otros dispositivos externos tienen bloqueado el proceso de desenvoltura de sobres, as\u00ed que nunca deben utilizarse para generar sobre digitales. < Las opciones de configuraci\u00f3n disponibles son: Fichero de datos: Permite seleccionar el documento que deseamos introducir en el sobre digital. Es posible pulsar el bot\u00f3n \u201cExaminar\u201d para buscar un fichero en disco o escribir directamente su ruta en la caja de texto asociada. Opciones del sobre digital: Tipo de sobre: Indica el tipo de sobre electr\u00f3nico que debe generarse. Los tipos soportados son: Sobre autenticado: Este es el tipo por defecto y el sobre m\u00e1s seguro. Cifra los datos contenidos en el sobre y agrega un c\u00f3digo de autenticaci\u00f3n para detectar modificaci\u00f3n en el sobre. Sobre firmado: Cifra los datos contenidos en el sobre y posteriormente lo firma. Sobre simple: Cifra los datos contenidos en el sobre. Al pulsar el bot\u00f3n \u201cGenerar\u201d se inicializar\u00e1 el asistente para la generaci\u00f3n de sobres electr\u00f3nicos. < Al pulsar el bot\u00f3n \u201cSiguiente >\u201c pasaremos al primer paso para la generaci\u00f3n del sobre electr\u00f3nico: la selecci\u00f3n del los destinatarios del sobre. Desde esta pantalla podr\u00e1n indicarse los distintos destinatarios del sobre por medio de sus certificados. < Las opciones de configuraci\u00f3n disponibles en esta pantalla son: A\u00f1adir un destinatario desde\u2026 Este listado contiene los almacenes disponibles para la extracci\u00f3n de una clave p\u00fablica para el env\u00edo de datos. Es de suponer que no disponemos de los certificados con la clave p\u00fablica de los destinatarios en nuestro almac\u00e9n personal, as\u00ed que s\u00f3lo est\u00e1n disponibles los almacenes en fichero y la libreta de direcciones. Los almacenes concretos disponibles son: PKCS#7 / X.509: Certificado en fichero (.cer) con clave p\u00fablica. PKCS#12 / PFX: Certificado en almac\u00e9n en fichero (.p12, .pfx). Windows / Internet Explorer (otras personas / libreta de direcciones): Almac\u00e9n de Windows con las claves p\u00fablicas de otras personas. A\u00f1adir Abre un di\u00e1logo para la selecci\u00f3n de un certificado del almac\u00e9n seleccionado. Si el almac\u00e9n est\u00e1 protegido con contrase\u00f1a ser\u00e1 necesario introducirla. Al seleccionar un certificado, este se agrega al listado de destinatarios. Eliminar destinatario Permite eliminar el destinatario seleccionado de la lista de destinatarios. Es obligatorio seleccionar al menos un destinatario para el sobre digital. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d nos aparecer\u00e1 la ventana para la selecci\u00f3n del remitente del sobre. En esta pantalla podemos seleccionar nuestro certificado para identificarnos como remitentes del sobre. Este paso es opcional en la generaci\u00f3n de Sobres Simples y obligatorio en los Sobres Firmados o Autenticados. En este paso, s\u00ed es posible utilizar el DNIe. < Las opciones disponibles en esta pantalla son: A\u00f1adir remitebnte desde el repositorio / almac\u00e9n de certificados\u2026 Este listado contiene los posibles almacenes que pueden contener el certificado del quien genera el sobre digital. Los almacenes concretos disponibles son: Windows / Internet Explorer: Para tomar el certificado del almac\u00e9n de Windows o un dispositivo externo (por ejemplo, el DNIe) instalado en el sistema. Mozilla Firefox (unificado): Para tomar el certificado del almac\u00e9n de Firefox o un dispositivo externo (por ejemplo, el DNIe) configurado en este almac\u00e9n. PKCS#12 / PFX: Para tomar el certificado de un almac\u00e9n en disco en formato P12 o PFX. A\u00f1adir Abre un di\u00e1logo para la selecci\u00f3n de un certificado del almac\u00e9n seleccionado. Si el almac\u00e9n est\u00e1 protegido con contrase\u00f1a ser\u00e1 necesario introducirla. Al seleccionar un certificado, este se agrega al listado de remitentes. Actualmente la Interfaz de Escritorio del Cliente @firma s\u00f3lo soporta la configuraci\u00f3n de un remitente para el sobre electr\u00f3nico. Eliminar remitente Permite eliminar el remitente seleccionado de la lista de remitentes. Al pulsar el bot\u00f3n \u201cSiguiente >\u201d se lleva a cabo el proceso de generaci\u00f3n del sobre electr\u00f3nico. Si ocurriese un error durante el proceso, se mostrar\u00e1 el mensaje correspondiente, y si finaliza el proceso correctamente se nos mostrar\u00e1 un di\u00e1logo para almacenar el sobre electr\u00f3nico generado.","title":"Ensobrado digital"},{"location":"markdown_strict/CF_guia-uso-interfaz/#desensobrado-digital","text":"Desde la pesta\u00f1a \u201cDese nsobrado \u201d es posible extraer el fichero contenido en un sobre digital. Para ello s\u00f3lo ser\u00e1 necesario seleccionar uno de los certificados designados como destinatarios del sobre. < Las opciones de configuraci\u00f3n en esta pantalla son: Sobre digital: Permite seleccionar el sobre digital. Es posible pulsar el bot\u00f3n \u201cExaminar\u201d para buscar un fichero en disco o escribir directamente su ruta en la caja de texto asociada. Almac\u00e9n / repositorio de certificados: Permite seleccionar el almac\u00e9n en donde se encuentra el certificado del destinatario del sobre. Las opciones disponibles son: Windows / Internet Explorer: Para tomar el certificado del almac\u00e9n de Windows o un dispositivo externo (por ejemplo, el DNIe) instalado en el sistema. Mozilla Firefox (unificado): Para tomar el certificado del almac\u00e9n de Firefox o un dispositivo externo (por ejemplo, el DNIe) configurado en este almac\u00e9n. PKCS#12 / PFX: Para tomar el certificado de un almac\u00e9n en disco en formato P12 o PFX. Opciones de apertura de sobre digital: Iniciar contenido del sobre tras la apertura: Si se marcar esta casilla, una vez extra\u00eddo el contenido del sobre se abrir\u00e1 con la aplicaci\u00f3n por defecto para la extensi\u00f3n de fichero con el que se almacene. Al pulsar el bot\u00f3n \u201cExtraer\u201d se mostrar\u00e1 un di\u00e1logo modal con los certificados del repositorio seleccionado. El usuario deber\u00e1 seleccionar el certificado de uno de los destinatarios del sobre. Si el certificado no perteneciese a uno de los destinatarios o se produjese un error durante la extracci\u00f3n del contenido del sobre, se notificar\u00e1; mientras que, si el proceso finaliza correctamente, se mostrar\u00e1 un di\u00e1logo para el guardado del documento extra\u00eddo del sobre. Una vez extra\u00eddo el documento, este se abrir\u00e1 si se marc\u00f3 la casilla \u201cIniciar contenido del sobre tras la apertura\u201d.","title":"Desensobrado digital"},{"location":"markdown_strict/CF_guia-uso-interfaz/#politica-de-firma-de-la-age","text":"La pol\u00edtica de firma de la AGE define un marco legal de firma electr\u00f3nica concreto y com\u00fan para la administraci\u00f3n p\u00fablica espa\u00f1ola. La declaraci\u00f3n de esta pol\u00edtica de firma indica que se han cumplido los requisitos exigidos por la pol\u00edtica durante el proceso de firma electr\u00f3nica. Actualmente, se encuentra en vigencia la versi\u00f3n 1.9 de la pol\u00edtica de la AGE. Puede descargar y consultar la informaci\u00f3n relativa a la misma desde el siguiente enlace: http://administracionelectronica.gob.es/ctt/politicafirma/descargas En la interfaz de escritorio del Cliente @firma deber\u00e1 configurar los atributos apropiados desde la pantalla de opciones generales de la aplicaci\u00f3n. Los valores asignados a las distintas propiedades son: Propiedad Valor Identificador 2.16.724.1.3.1.1.2.1.9 Cualificador https://sede.060.gob.es/politica_de_firma_anexo_1.pdf Huella digital SHA1 G7roucf600+f03r/o0bAOQ6WAs0= ADVERTENCIA : Las firmas XAdES soportadas por la pol\u00edtica deben ser Detached impl\u00edcita o Enveloped impl\u00edcita. Las firmas ODF y OOXML no definen una pol\u00edtica de firma.","title":"Pol\u00edtica de firma de la AGE"},{"location":"markdown_strict/CF_guia-uso-interfaz/#factura-electronica","text":"Los esquemas de factura electr\u00f3nica existentes definen las caracter\u00edsticas que debe cumplir una firma de factura electr\u00f3nica acorde al esquema en cuesti\u00f3n. El formato utilizado para la firma es XAdES Enveloped, pero esta debe cumplir con ciertas propiedades espec\u00edficas que no pueden configurarse a trav\u00e9s del Cliente @firma o su interfaz de escritorio. Para la firma de facturas electr\u00f3nicas, el Cliente @firma y la interfaz de escritorio incluyen un formato de firma espec\u00edfico. Este formato se encarga de configurar autom\u00e1ticamente todas las propiedades necesarias para que la factura firmada sea correctamente validada por los validadores de firma (incluidos la Plataforma @firma, VALIDe y el validador de facturas electr\u00f3nicas del Ministerio de Industria, Turismo y Comercio ). Las firmas generadas con el formato de firma de factura se realizan conforme al esquema 3.1 de factura electr\u00f3nica. Esto incluye, entre otros atributos, la configuraci\u00f3n de la pol\u00edtica de firma de facturas, por lo que no es necesario que el usuario configure la pol\u00edtica de firma en la pantalla de opciones de la interfaz. Al generar una firma con el formato de factura electr\u00f3nica la pol\u00edtica de firma configurada por el usuario se ignorar\u00e1. El usuario, si lo desea, puede firmar una factura con el formato XAdES Enveloped, el modo impl\u00edcito y configurar la pol\u00edtica de firma de factura electr\u00f3nica. De hacerlo, se generar\u00e1 una firma con estas caracter\u00edsticas que se validar\u00e1 correctamente en la Plataforma @firma y VALIDe , pero no ser\u00e1 aceptada por el validador de facturas electr\u00f3nicas del Ministerio de Industria, Turismo y Comercio . Puede consultar el apartado Opciones de configuraci\u00f3n para saber c\u00f3mo configurar una pol\u00edtica de firma.","title":"Factura electr\u00f3nica"},{"location":"markdown_strict/CF_guia-uso-interfaz/#instalacion-de-certificados","text":"Para el uso de la interfaz de escritorio del Cliente @firma es necesario disponer de un certificado electr\u00f3nico, el cual puede encontrarse almacenado: En el Navegador . En el almac\u00e9n de certificados del navegador dentro de la pesta\u00f1a \"personal\" aparecen los que poseen clave privada y dentro de la pesta\u00f1a \"otras personas\" aparecen los de clave p\u00fablica. Tarjeta inteligente . El DNI electr\u00f3nico es un dispositivo seguro de creaci\u00f3n de firma conforme a la norma CWA 14169. Esta norma est\u00e1 reconocida por la Uni\u00f3n Europea y se considera que la firma electr\u00f3nica realizada con el DNI electr\u00f3nico es equivalente a una firma manuscrita a efectos legales. Estas firmas son las m\u00e1s seguras porque la clave privada nunca sale de la tarjeta inteligente, por lo que no puede ser copiada por terceros. Es importante recordar, que cuando se instala un certificado, el mismo queda instalado \u00fanicamente para el navegador o sistema en el que se realice dicha instalaci\u00f3n, siendo necesario realizar la misma acci\u00f3n si se quisiera disponer del mismo certificado en otro navegador que utilice un almac\u00e9n de certificados distinto. A continuaci\u00f3n se detalla los diferentes pasos a seguir para la instalaci\u00f3n del certificado seg\u00fan el lugar de almacenamiento de los mismos:","title":"Instalaci\u00f3n de Certificados."},{"location":"markdown_strict/CF_guia-uso-interfaz/#instalacion-de-certificados-software-en-windows-internet-explorer","text":"En primer lugar, en el men\u00fa superior del navegador, seleccionamos la opci\u00f3n \u201c Herramientas \u201d y a continuaci\u00f3n hacemos clic sobre la opci\u00f3n \u201c Opciones de Internet \u201d. < A continuaci\u00f3n seleccionamos la opci\u00f3n \u201cCertificados\u201d, dentro de la pesta\u00f1a \u201c Contenido \u201d < Continuamos seleccionando la opci\u00f3n \u201c Importar \u201d, se nos abrir\u00e1 el \u201c Asistente para importaci\u00f3n de certificados \u201d. < < Pulsaremos \u201c Siguiente \u201d en la primera ventana del asistente, tras lo cual, nos pedir\u00e1 que seleccionemos la ubicaci\u00f3n del certificado que deseamos instalar, para lo cual, pulsaremos el bot\u00f3n \u201c Examinar...\u201d. Se nos abrir\u00e1 una ventana en la cual tendremos que buscar el certificado que deseamos instalar, una vez encontrado, seleccionaremos el certificado y pulsaremos sobre el bot\u00f3n \u201c Abrir \u201d. < < Tras seleccionar el bot\u00f3n \u201c Siguiente \u201d, en la siguiente ventana el asistente nos pedir\u00e1 que introduzcamos la contrase\u00f1a usada en el cifrado del certificado, introducimos la clave y pulsamos sobre el bot\u00f3n \u201c Siguiente \u201d < En la siguiente ventana, el asistente nos pedir\u00e1 que seleccionemos el almac\u00e9n en el cual se guardar\u00e1 el certificado, seleccionaremos la opci\u00f3n \u201cColocar todos los certificados en el siguiente almac\u00e9n\u201d. Pulsaremos sobre el bot\u00f3n \u201c Examinar \u201d, seleccionaremos la carpeta \u201c Personal \u201d y pulsaremos el bot\u00f3n \u201c Siguiente \u201d. < < Tras este paso, el asistente nos informar\u00e1 de que el certificado ha quedado importado correctamente.","title":"Instalaci\u00f3n de certificados software en Windows / Internet Explorer"},{"location":"markdown_strict/CF_guia-uso-interfaz/#instalacion-de-certificados-software-en-mozilla-firefox","text":"En primer lugar, en el men\u00fa superior del navegador, seleccionamos la opci\u00f3n \u201c Herramientas \u201d y a continuaci\u00f3n hacemos clic sobre la opci\u00f3n \u201c Opciones \u201d. < A continuaci\u00f3n seleccionamos la pesta\u00f1a \u201c Avanzado \u201d del men\u00fa superior de la nueva ventana, tras lo cual, seleccionamos la subpesta\u00f1a \u201c Cifrado \u201d, en la que seleccionaremos la opci\u00f3n \u201c Ver certificados \u201d < Continuamos seleccionando la opci\u00f3n \u201c Importar \u201d, se nos abrir\u00e1 una ventana en la cual tendremos que buscar el certificado que deseamos instalar, una vez encontrado, seleccionaremos el certificado y pulsaremos sobre el bot\u00f3n \u201c Abrir \u201d. < < El navegador nos pedir\u00e1 que introduzcamos la contrase\u00f1a usada en el cifrado del certificado, introducimos la clave y pulsamos sobre el bot\u00f3n \u201c Aceptar \u201d. < Una vez realizado este paso, el sistema nos informar\u00e1 con un mensaje que el certificado ha quedado instalado de forma satisfactoria.","title":"Instalaci\u00f3n de certificados software en Mozilla Firefox"},{"location":"markdown_strict/CF_guia-uso-interfaz/#instalacion-de-certificados-software-en-el-almacen-de-mac-os-x","text":"Para instalar un certificado en Mac OS X s\u00f3lo deberemos hacer doble clic sobre el certificado para solicitar su instalaci\u00f3n y seleccionar el almac\u00e9n de certificados del sistema. < Seguidamente, insertaremos la contrase\u00f1a de usuario del sistema para finalizar la importaci\u00f3n. < Aunque este proceso de instalaci\u00f3n de certificados es el com\u00fan en Mac OS X, pueden existir cambios entre cada una de sus versiones. Para conocer los detalles de cada versi\u00f3n acuda a la p\u00e1gina Web de soporte de su sistema operativo. Para Mac OS X 10.6 es: http://docs.info.apple.com/article.html?path=Mac/10.6/es/9082.html","title":"Instalaci\u00f3n de certificados software en el almac\u00e9n de Mac OS X"},{"location":"markdown_strict/CF_guia-uso-interfaz/#instalacion-de-certificados-software-en-google-chrome-y-apple-safari","text":"Los navegadores Web Google Chrome y Apple Safari no disponen de un almac\u00e9n de certificados propio, en su lugar utilizan el almac\u00e9n de certificados del sistema operativo que utilice el usuario. Esto es: En Microsoft Windows : El almac\u00e9n de certificados que Internet Explorer. En Linux : El almac\u00e9n de certificados de Mozilla Firefox. En Solaris / OpenSolaris : El almac\u00e9n de certificados de Mozilla Firefox. En Mac OS X : El almac\u00e9n de certificados del sistema operativo. Si nuestro sistema operativo es Microsoft Windows deberemos seguir los pasos descritos en el apartado \u201cInstalaci\u00f3n de certificados software en Windows / Internet Explorer\u201c. Si nuestro sistema operativo es Linux o Solaris se importar\u00e1n los certificados a trav\u00e9s de Mozilla Firefox tal como se describe en el apartado \u201cInstalaci\u00f3n de certificados software en Mozilla Firefox\u201d. Si nuestro sistema operativo es Mac OS X deber\u00e1n instalarse los certificados tal como se describe en el apartado \u201cInstalaci\u00f3n de certificados software en el almac\u00e9n de Mac OS X\u201d.","title":"Instalaci\u00f3n de certificados software en Google Chrome y Apple Safari"},{"location":"markdown_strict/CF_guia-uso-interfaz/#uso-de-certificados-desde-tarjetas-inteligentes","text":"","title":"Uso de certificados desde tarjetas inteligentes"},{"location":"markdown_strict/CF_guia-uso-interfaz/#dnie-dni-electronico","text":"Para la utilizaci\u00f3n del DNI electr\u00f3nico es necesario contar determinados elementos hardware y software que nos van a permitir el acceso al chip de la tarjeta y, por tanto, la utilizaci\u00f3n de los certificados contenidos en \u00e9l. a) Elementos hardware El DNI electr\u00f3nico requiere el siguiente equipamiento f\u00edsico: Un Ordenador personal (Intel -a partir de Pentium III- o tecnolog\u00eda similar). Un lector de tarjetas inteligentes que cumpla el est\u00e1ndar ISO 7816 . Existen distintas implementaciones, bien integrados en el teclado, bien externos (conectados v\u00eda USB) o bien a trav\u00e9s de una interfaz PCMCIA. Para elegir un lector que sean compatible con el DNI electr\u00f3nico verifique que, al menos, Cumpla el est\u00e1ndar ISO 7816 (1, 2 y 3). Soporta tarjetas as\u00edncronas basadas en protocolos T=0 (y T=1). Soporta velocidades de comunicaci\u00f3n m\u00ednimas de 9.600 bps. Soporta los est\u00e1ndares: API PC/SC (Personal Computer/Smart Card) CSP (Cryptographic Service Provider, Microsoft) API PKCS#11 b) Elementos software ** Sistemas operativos** El DNI electr\u00f3nico puede operar en diversos entornos: Microsoft Windows Linux Unix (Solaris) Mac OS X ** Navegadores** El DNI electr\u00f3nico es compatible con todos los navegadores: Microsoft Internet Explorer (versi\u00f3n 6.0 o superior) Mozilla Firefox (versi\u00f3n 1.5) Netscape (versi\u00f3n 4.78 o superior) Controladores / M\u00f3dulos criptogr\u00e1ficos Para poder interaccionar adecuadamente con las tarjetas criptogr\u00e1ficas en general y con el DNI electr\u00f3nico en particular, el equipo ha de tener instalados unas \"piezas\" de software denominadas m\u00f3dulos criptogr\u00e1ficos. En un entorno Microsoft Windows , el equipo debe tener instalado un servicio que se denomina \"Cryptographic Service Provider\" (CSP). En los entornos UNIX / Linux o MAC podemos utilizar el DNI electr\u00f3nico a trav\u00e9s de un m\u00f3dulo criptogr\u00e1fico denominado PKCS#11. Tanto el CSP como el PKCS#11 espec\u00edfico para el DNI electr\u00f3nico podr\u00e1n obtenerse en el \u00c1rea de Descargas de la web del DNI-e, accediendo a la siguiente URL: http://www.dnielectronico.es/descargas/index.html , o en el sitio Web de OpenDNIe (recomendado para sistemas Linux y Solaris): http://opendnie.cenatic.es/ Opcionalmente puede acceder a https://zonatic.usatudni.es/aplicaciones/asistente-dnie , para la descarga de un instalador sencillo y accesible del controlador. Si optamos por el \u00e1rea de descargas de www.dnielectronico.es deberemos seleccionar la primera opci\u00f3n si tenemos un Sistema Operativo Windows o la segunda en caso de tener otro Sistema Operativo. < En la siguiente pantalla seleccionaremos la opci\u00f3n \u201c Sistemas Windows. Compatible con Vista\u201d, tras lo cual se nos descargara el software. Seleccionaremos \u201c Guardar \u201d y elegiremos la carpeta deseada donde queremos que sea descargado. < < Una vez descargado el fichero con la nomenclatura \u201cDNIe_vx_j_y.zip\u201d lo descomprimiremos y accederemos al fichero \u201cDNIe_vx_j_y.exe\u201d. El software se instalar\u00e1 autom\u00e1ticamente y se le pedir\u00e1 reiniciar el equipo. < < Es posible, dependiendo de la configuraci\u00f3n de su navegador, que nos aparezca la siguiente ventana: < Se nos solicitar\u00e1, por tanto que instalemos en el certificado ra\u00edz del DNIe, para ello deberemos seleccionar sobre \u201c Instalar certificado...\u201d < Pulsaremos sobre el bot\u00f3n \u201c Siguiente \u201d < Seleccionamos la opci\u00f3n \u201cColocar todos los certificados en el siguiente almac\u00e9n\u201d y pulsamos sobre el bot\u00f3n \u201c Examinar...\u201d < Seleccionaremos el almac\u00e9n de certificados \u201cEntidades Emisoras Ra\u00edz de Confianza\u201d En la siguiente ventana seleccionaremos la opci\u00f3n \u201cFinalizar\u201d < Si nos aparece la siguiente advertencia, seleccionaremos \u201cSi\u201d para permitir que la autoridad ra\u00edz del DNIe, se instale en el navegador y se pueda as\u00ed establecer la cadena de confianza de certificaci\u00f3n. Tras lo cual, el software quedar\u00e1 instalado y listo para su uso. Adicionalmente, para operar con un lector de tarjetas inteligentes, ser\u00e1 necesario instalar un driver que, normalmente, se distribuye con el propio lector. Nota: Para hacer uso del software de cambio de PIN virtual, deber\u00e1 tener instalado en el equipo la versi\u00f3n JAVA 1.5 o superior . Para m\u00e1s informaci\u00f3n puede acudir a la p\u00e1gina http://www.dnielectronico.es o contactar con el Servicio de Atenci\u00f3n al Ciudadano en el tel\u00e9fono 900 364 463 o en el correo sac@dnielectronico.es","title":"DNIe (DNI Electr\u00f3nico)"},{"location":"markdown_strict/CF_guia-uso-interfaz/#otros-certificados","text":"En el caso de hacer uso de otro certificado desde una tarjeta inteligente deber\u00e1 consultar con la entidad emisora del mismo para que le indique su forma de uso.","title":"Otros certificados"},{"location":"markdown_strict/CF_guia-uso-interfaz/#resolucion-de-problemas","text":"Para la resoluci\u00f3n de problemas relacionados con las distintas operaciones de firma soportadas, consulte la Gu\u00eda de Incidencias de este.","title":"Resoluci\u00f3n de Problemas"},{"location":"markdown_strict/CF_guia-uso-interfaz/#la-aplicacion-se-bloquea-al-realizar-busquedas-en-la-pantalla-de-ayuda","text":"Se ha detectado que al buscar determinadas palabras, a trav\u00e9s de la herramienta de b\u00fasqueda de la pantalla de ayuda de la aplicaci\u00f3n, la interfaz se queda bloqueada y no es posible recuperar el control de la aplicaci\u00f3n. Este comportamiento se debe a un comportamiento an\u00f3malo de la API de ayuda de Java (JavaHelp) y no ha soluci\u00f3n al error producido. Si ocurre este comportamiento, deber\u00e1 forzar el cierre de la aplicaci\u00f3n (consulte el manual de su sistema operativo) para eliminar el bloqueo.","title":"La aplicaci\u00f3n se bloquea al realizar b\u00fasquedas en la pantalla de ayuda"},{"location":"markdown_strict/CF_guia-uso-interfaz/#glosario-de-terminos","text":"","title":"Glosario de t\u00e9rminos"},{"location":"markdown_strict/CF_guia-uso-interfaz/#firma-electronica_1","text":"Es el conjunto de datos, en forma electr\u00f3nica, anejos a otros datos electr\u00f3nicos o asociados funcionalmente con ellos, utilizados como medio para identificar formalmente al autor o a los autores del documento que la recoge.","title":"Firma electr\u00f3nica"},{"location":"markdown_strict/CF_guia-uso-interfaz/#xml-digital-signature-xmldsig","text":"Es una recomendaci\u00f3n del W3C que define una sintaxis XML para la firma digital","title":"XML Digital Signature (XMLDSig)"},{"location":"markdown_strict/CF_guia-uso-interfaz/#xml-advanced-signature-xades","text":"Es un conjunto de extensiones a las recomendaciones XML-DSig haci\u00e9ndolas adecuadas para la firma electr\u00f3nica avanzada.","title":"XML Advanced Signature (XAdES)"},{"location":"markdown_strict/CF_guia-uso-interfaz/#rsa","text":"Es un sistema criptogr\u00e1fico de clave p\u00fablica desarrollado en 1977. En la actualidad, RSA es el primer y m\u00e1s utilizado algoritmo de este tipo y es v\u00e1lido tanto para cifrar como para firmar digitalmente.","title":"RSA"},{"location":"markdown_strict/CF_guia-uso-interfaz/#xml","text":"Es un metalenguaje extensible de etiquetas desarrollado por el World Wide Web Consortium (W3C). Es una simplificaci\u00f3n y adaptaci\u00f3n del SGML y permite definir la gram\u00e1tica de lenguajes espec\u00edficos (de la misma manera que HTML es a su vez un lenguaje definido por SGML). Por lo tanto XML no es realmente un lenguaje en particular, sino una manera de definir lenguajes para diferentes necesidades. Algunos de estos lenguajes que usan XML para su definici\u00f3n son XHTML, SVG, MathML.","title":"XML"},{"location":"markdown_strict/CF_guia-uso-interfaz/#office-open-xml-ooxml","text":"Es un formato de archivo abierto y est\u00e1ndar cuyas extensiones m\u00e1s comunes son .docx, .xlsx y .pptx. Se le utiliza para representar y almacenar hojas de c\u00e1lculo, diagramas, presentaciones y documentos de texto. Un archivo Office Open XML contiene principalmente datos basados en el lenguaje de marcado XML, comprimidos en un contenedor .zip espec\u00edfico.","title":"Office Open XML (OOXML)"},{"location":"markdown_strict/CF_guia-uso-interfaz/#open-document-format-odf","text":"Es un formato de fichero est\u00e1ndar para el almacenamiento de documentos ofim\u00e1ticos tales como hojas de c\u00e1lculo, memorandos, gr\u00e1ficas y presentaciones. Aunque las especificaciones fueron inicialmente elaboradas por Sun, el est\u00e1ndar fue desarrollado por el comit\u00e9 t\u00e9cnico para Open Office XML de la organizaci\u00f3n OASIS y est\u00e1 basado en un esquema XML inicialmente creado e implementado por la suite ofim\u00e1tica OpenOffice.org (ver OpenOffice.org XML).","title":"Open Document Format (ODF)"},{"location":"markdown_strict/CF_guia-uso-interfaz/#zip","text":"Es un formato de almacenamiento sin p\u00e9rdida, muy utilizado para la compresi\u00f3n de datos como im\u00e1genes, programas o documentos.","title":"ZIP"},{"location":"markdown_strict/CF_guia-uso-interfaz/#pdf","text":"Es un formato de almacenamiento de documentos, desarrollado por la empresa Adobe Systems. Este formato es de tipo compuesto (imagen vectorial, mapa de bits y texto).","title":"PDF"},{"location":"markdown_strict/CF_guia-uso-interfaz/#sha","text":"Es un sistema de funciones hash criptogr\u00e1ficas relacionadas de la Agencia de Seguridad Nacional de los Estados Unidos y publicadas por el National Institute of Standards and Technology (NIST). El primer miembro de la familia fue publicado en 1993 es oficialmente llamado SHA. Sin embargo, hoy d\u00eda, no oficialmente se le llama SHA-0 para evitar confusiones con sus sucesores. Dos a\u00f1os m\u00e1s tarde el primer sucesor de SHA fue publicado con el nombre de SHA-1. Existen cuatro variantes m\u00e1s que se han publicado desde entonces cuyas diferencias se basan en un dise\u00f1o algo modificado y rangos de salida incrementados: SHA-224, SHA-256, SHA-384, y SHA-512 (llam\u00e1ndose SHA-2 a todos ellos).","title":"SHA"},{"location":"markdown_strict/CF_guia-uso-interfaz/#pkcs","text":"Se refiere a un grupo de est\u00e1ndares de criptograf\u00eda de clave p\u00fablica concebidos y publicados por los laboratorios de RSA en California. A RSA Security se le asignaron los derechos de licenciamiento para la patente de algoritmo de clave asim\u00e9trica RSA y adquiri\u00f3 los derechos de licenciamiento para muchas otras patentes de claves.","title":"PKCS"},{"location":"markdown_strict/CF_guia-uso-interfaz/#w3c","text":"Es un consorcio internacional que produce recomendaciones para la World Wide Web. Est\u00e1 dirigida por Tim Berners-Lee, el creador original de URL (Uniform Resource Locator, Localizador Uniforme de Recursos), HTTP (HyperText Transfer Protocol, Protocolo de Transferencia de HiperTexto) y HTML (Lenguaje de Marcado de HiperTexto) que son las principales tecnolog\u00edas sobre las que se basa la Web.","title":"W3C"},{"location":"markdown_strict/CF_guia-uso-interfaz/#openofficeorg","text":"es una suite ofim\u00e1tica libre (c\u00f3digo abierto y distribuci\u00f3n gratuita) que incluye herramientas como procesador de textos, hoja de c\u00e1lculo, presentaciones, herramientas para el dibujo vectorial y base de datos. Est\u00e1 disponible para varias plataformas, tales como Microsoft Windows, GNU/Linux, BSD, Solaris y Mac OS X. Soporta numerosos formatos de archivo, incluyendo como predeterminado el formato est\u00e1ndar ISO/IEC OpenDocument (ODF), entre otros formatos comunes. A febrero de 2010, OpenOffice soporta m\u00e1s de 110 idiomas.","title":"OpenOffice.org"},{"location":"markdown_strict/CF_guia-uso-interfaz/#base64","text":"Es un sistema de numeraci\u00f3n posicional que usa 64 como base. Es la mayor potencia de dos que puede ser representada usando \u00fanicamente los caracteres imprimibles de ASCII. Esto ha propiciado su uso para codificaci\u00f3n de correos electr\u00f3nicos, PGP y otras aplicaciones. Todas las variantes famosas que se conocen con el nombre de Base64 usan el rango de caracteres A-Z, a-z y 0-9 en este orden para los primeros 62 d\u00edgitos, pero los s\u00edmbolos escogidos para los \u00faltimos dos d\u00edgitos var\u00edan considerablemente de unas a otras. Otros m\u00e9todos de codificaci\u00f3n como UUEncode y las \u00faltimas versiones de binhex usan un conjunto diferente de 64 caracteres para representar 6 d\u00edgitos binarios, pero \u00e9stos nunca son llamados Base64.","title":"Base64"},{"location":"markdown_strict/CF_guia-uso-interfaz/#asn1","text":"Es una norma para representar datos independientemente de la m\u00e1quina que se est\u00e9 usando y sus formas de representaci\u00f3n internas. Es un protocolo de nivel de presentaci\u00f3n en el modelo OSI.","title":"ASN.1"},{"location":"markdown_strict/CF_guia-uso-interfaz/#autoridad-de-certificacion-ca","text":"Es una entidad de confianza, responsable de emitir y revocar los certificados digitales o certificados, utilizados en la firma electr\u00f3nica, para lo cual se emplea la criptograf\u00eda de clave p\u00fablica. Jur\u00eddicamente es un caso particular de Prestador de Servicios de Certificaci\u00f3n.","title":"Autoridad de Certificaci\u00f3n (CA)"},{"location":"markdown_strict/CF_guia-uso-interfaz/#certificado-digital","text":"Es un documento digital mediante el cual un tercero confiable (una autoridad de certificaci\u00f3n) garantiza la vinculaci\u00f3n entre la identidad de un sujeto o entidad y su clave p\u00fablica.","title":"Certificado Digital"},{"location":"markdown_strict/CF_guia-uso-interfaz/#infraestructura-de-clave-publica-pki","text":"Es una combinaci\u00f3n de hardware y software, pol\u00edticas y procedimientos de seguridad que permiten la ejecuci\u00f3n con garant\u00edas de operaciones criptogr\u00e1ficas como el cifrado, la firma digital o el no repudio de transacciones electr\u00f3nicas.","title":"Infraestructura de Clave P\u00fablica (PKI)"},{"location":"markdown_strict/CF_guia-uso-interfaz/#faq","text":"\u00bfQu\u00e9 certificados son reconocidos por la plataforma? La plataforma @firma admite certificados digitales reconocidos conforme el est\u00e1ndar ITU-T X.509 v3, emitidos por m\u00faltiples prestadores de servicios de certificaci\u00f3n. Todos los prestadores se encuentran inscritos en el registro de la Secretaria de Estado de Telecomunicaciones y para la Sociedad de Informaci\u00f3n del Ministerio de Industria, Turismo y Comercio de autoridades conforme a lo establecido en el art\u00edculo 30 de la Ley 59/2003, de 19 de diciembre, de firma electr\u00f3nica. Los prestadores reconocidos son: DNI Electr\u00f3nico Camerfirma Izenpe CATCert (Agencia Catalana de Certificaci\u00f3n) ANF AC SCR (Servicio de Certificaci\u00f3n de los Registradores) ACA ACCV (Autoridad de Certificaci\u00f3n de la Comunidad Valenciana) ANCERT (Agencia Notarial de Certificaci\u00f3n) FNMT (F\u00e1brica Nacional de Moneda y Timbre) Firmaprofesional BANESTO CA Si desea informaci\u00f3n m\u00e1s detallada sobre los certificados soportados, consulte la Declaraci\u00f3n de Practicas de Validaci\u00f3n de @firma en http://www.ctt.map.es/afirma . \u00bfCu\u00e1les son los tipos de certificados admitidos por las Administraciones? De acuerdo con la Ley 59/2003, de Firma Electr\u00f3nica, los tipos de certificados admitidos son: certificado de persona f\u00edsica y , certificado de persona jur\u00eddica, certificado de sello electr\u00f3nico para la actuaci\u00f3n automatizada, certificado de sede electr\u00f3nica administrativa y certificado de empleado p\u00fablico. Cada uno de los certificados emitidos conllevar\u00e1 un grado de \"confianza\", asociado a los diferentes niveles de aseguramiento bajo los que se emitan, debido a los requisitos t\u00e9cnicos y de seguridad que estos niveles llevan asociados. \u00bfQu\u00e9 informaci\u00f3n posee un certificado digital? Un certificado digital es, en realidad, una clave p\u00fablica, con cierta informaci\u00f3n adjunta, como el nombre del propietario, el periodo de validez de la clave, etc, permitiendo: La autenticaci\u00f3n del usuario. La confidencialidad del mensaje. La integridad del documento. El no repudio. Los certificados digitales s\u00f3lo son \u00fatiles si existe alguna Autoridad Certificadora ( Certification Authority o CA) que los valide, ya que si uno se certifica a s\u00ed mismo no hay ninguna garant\u00eda de que su identidad sea la que anuncia. El formato de certificados X.509 es un est\u00e1ndar del ITU-T ( International Telecommunication Union-Telecommunication Standarization Sector ) y el ISO/IEC ( International Standards Organization / International Electrotechnical Commission ). Los elementos del formato de un certificado X.509 v3 son: Versi\u00f3n. El campo de versi\u00f3n contiene el n\u00famero de versi\u00f3n del certificado codificado. N\u00famero de serie del certificado. Este campo es un entero asignado por la autoridad certificadora. Cada certificado emitido por una CA debe tener un n\u00famero de serie \u00fanico. Identificador del algoritmo de firmado. Este campo identifica el algoritmo empleado para firmar el certificado. Nombre del emisor. Este campo identifica la CA que ha firmado y emitido el certificado. Periodo de validez. Este campo indica el periodo de tiempo durante el cual el certificado es v\u00e1lido y la CA est\u00e1 obligada a mantener informaci\u00f3n sobre el estado del mismo. Nombre del sujeto. Este campo identifica la identidad cuya clave p\u00fablica est\u00e1 certificada en el campo siguiente. El nombre debe ser \u00fanico para cada entidad certificada por una CA dada, aunque puede emitir m\u00e1s de un certificado con el mismo nombre si es para la misma entidad. Informaci\u00f3n de clave p\u00fablica del sujeto. Este campo contiene la clave p\u00fablica, sus par\u00e1metros y el identificador del algoritmo con el que se emplea la clave.","title":"FAQ."},{"location":"markdown_strict/CF_guia-uso-interfaz/#_1","text":"Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported Usted es libre de: | < style=\"width:0.52083in;height:0.52083in\" alt=\"share\" /> | Compartir - copiar, distribuir, ejecutar y comunicar p\u00fablicamente la obra | |------------|------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"remix\" /> | hacer obras derivadas | Bajo las condiciones siguientes: | < style=\"width:0.52083in;height:0.52083in\" alt=\"by\" /> | Atribuci\u00f3n \u2014 Debe reconocer los cr\u00e9ditos de la obra de la manera especificada por el autor o el licenciante (pero no de una manera que sugiera que tiene su apoyo o que apoyan el uso que hace de su obra). | |------------|------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"nc\" /> | NoComercial \u2014 No puede utilizar esta obra para fines comerciales. | | < style=\"width:0.52083in;height:0.52083in\" alt=\"sa\" /> | Compartir bajo la Misma Licencia \u2014 Si altera o transforma esta obra, o genera una obra derivada, s\u00f3lo puede distribuir la obra generada bajo una licencia id\u00e9ntica a \u00e9sta. | Entendiendo que: Renuncia \u2014 Alguna de estas condiciones puede no aplicarse si se obtiene el permiso del titular de los derechos de autor Dominio P\u00fablico \u2014 Cuando la obra o alguno de sus elementos se hallen en el dominio p\u00fablico seg\u00fan la ley vigente aplicable, esta situaci\u00f3n no quedar\u00e1 afectada por la licencia. Otros derechos \u2014 Los derechos siguientes no quedan afectados por la licencia de ninguna manera: Los derechos derivados de usos leg\u00edtimos u otras limitaciones reconocidas por ley no se ven afectados por lo anterior. Los derechos morales del auto; Derechos que pueden ostentar otras personas sobre la propia obra o su uso, como por ejemplo derechos de imagen o de privacidad. Aviso \u2014 Al reutilizar o distribuir la obra, tiene que dejar muy en claro los t\u00e9rminos de la licencia de esta obra. La mejor forma de hacerlo es enlazar a esta p\u00e1gina. Licencia LA OBRA O LA PRESTACI\u00d3N (SEG\u00daN SE DEFINEN M\u00c1S ADELANTE) SE PROPORCIONA BAJO LOS T\u00c9RMINOS DE ESTA LICENCIA P\u00daBLICA DE CREATIVE COMMONS (CCPL O LICENCIA). LA OBRA O LA PRESTACI\u00d3N SE ENCUENTRA PROTEGIDA POR LA LEY ESPA\u00d1OLA DE PROPIEDAD INTELECTUAL Y/O CUALESQUIERA OTRAS NORMAS QUE RESULTEN DE APLICACI\u00d3N. QUEDA PROHIBIDO CUALQUIER USO DE LA OBRA O PRESTACI\u00d3N DIFERENTE A LO AUTORIZADO BAJO ESTA LICENCIA O LO DISPUESTO EN LA LEY DE PROPIEDAD INTELECTUAL. MEDIANTE EL EJERCICIO DE CUALQUIER DERECHO SOBRE LA OBRA O LA PRESTACI\u00d3N, USTED ACEPTA Y CONSIENTE LAS LIMITACIONES Y OBLIGACIONES DE ESTA LICENCIA, SIN PERJUICIO DE LA NECESIDAD DE CONSENTIMIENTO EXPRESO EN CASO DE VIOLACI\u00d3N PREVIA DE LOS T\u00c9RMINOS DE LA MISMA. EL LICENCIADOR LE CONCEDE LOS DERECHOS CONTENIDOS EN ESTA LICENCIA, SIEMPRE QUE USTED ACEPTE LOS PRESENTES T\u00c9RMINOS Y CONDICIONES. 1. Definiciones La obra es la creaci\u00f3n literaria, art\u00edstica o cient\u00edfica ofrecida bajo los t\u00e9rminos de esta licencia. En esta licencia se considera una prestaci\u00f3n cualquier interpretaci\u00f3n, ejecuci\u00f3n, fonograma, grabaci\u00f3n audiovisual, emisi\u00f3n o transmisi\u00f3n, mera fotograf\u00eda u otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente aplicable. La aplicaci\u00f3n de esta licencia a una colecci\u00f3n (definida m\u00e1s adelante) afectar\u00e1 \u00fanicamente a su estructura en cuanto forma de expresi\u00f3n de la selecci\u00f3n o disposici\u00f3n de sus contenidos, no siendo extensiva a \u00e9stos. En este caso la colecci\u00f3n tendr\u00e1 la consideraci\u00f3n de obra a efectos de esta licencia. El titular originario es: En el caso de una obra literaria, art\u00edstica o cient\u00edfica, la persona natural o grupo de personas que cre\u00f3 la obra. En el caso de una obra colectiva, la persona que la edite y divulgue bajo su nombre, salvo pacto contrario. En el caso de una interpretaci\u00f3n o ejecuci\u00f3n, el actor, cantante, m\u00fasico, o cualquier otra persona que represente, cante, lea, recite, interprete o ejecute en cualquier forma una obra. En el caso de un fonograma, el productor fonogr\u00e1fico, es decir, la persona natural o jur\u00eddica bajo cuya iniciativa y responsabilidad se realiza por primera vez una fijaci\u00f3n exclusivamente sonora de la ejecuci\u00f3n de una obra o de otros sonidos. En el caso de una grabaci\u00f3n audiovisual, el productor de la grabaci\u00f3n, es decir, la persona natural o jur\u00eddica que tenga la iniciativa y asuma la responsabilidad de las fijaciones de un plano o secuencia de im\u00e1genes, con o sin sonido. En el caso de una emisi\u00f3n o una transmisi\u00f3n, la entidad de radiodifusi\u00f3n. En el caso de una mera fotograf\u00eda, aquella persona que la haya realizado. En el caso de otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente, la persona que \u00e9sta se\u00f1ale. Se considerar\u00e1n obras derivadas aquellas obras creadas a partir de la licenciada, como por ejemplo: las traducciones y adaptaciones; las revisiones, actualizaciones y anotaciones; los compendios, res\u00famenes y extractos; los arreglos musicales y, en general, cualesquiera transformaciones de una obra literaria, art\u00edstica o cient\u00edfica. Para evitar la duda, si la obra consiste en una composici\u00f3n musical o grabaci\u00f3n de sonidos, la sincronizaci\u00f3n temporal de la obra con una imagen en movimiento (synching) ser\u00e1 considerada como una obra derivada a efectos de esta licencia. Tendr\u00e1n la consideraci\u00f3n de colecciones la recopilaci\u00f3n de obras ajenas, de datos o de otros elementos independientes como las antolog\u00edas y las bases de datos que por la selecci\u00f3n o disposici\u00f3n de sus contenidos constituyan creaciones intelectuales. La mera incorporaci\u00f3n de una obra en una colecci\u00f3n no dar\u00e1 lugar a una derivada a efectos de esta licencia. El licenciador es la persona o la entidad que ofrece la obra o prestaci\u00f3n bajo los t\u00e9rminos de esta licencia y le concede los derechos de explotaci\u00f3n de la misma conforme a lo dispuesto en ella. Usted es la persona o la entidad que ejercita los derechos concedidos mediante esta licencia y que no ha violado previamente los t\u00e9rminos de la misma con respecto a la obra o la prestaci\u00f3n, o que ha recibido el permiso expreso del licenciador de ejercitar los derechos concedidos mediante esta licencia a pesar de una violaci\u00f3n anterior. La transformaci\u00f3n de una obra comprende su traducci\u00f3n, adaptaci\u00f3n y cualquier otra modificaci\u00f3n en su forma de la que se derive una obra diferente. La creaci\u00f3n resultante de la transformaci\u00f3n de una obra tendr\u00e1 la consideraci\u00f3n de obra derivada. Se entiende por reproducci\u00f3n la fijaci\u00f3n directa o indirecta, provisional o permanente, por cualquier medio y en cualquier forma, de toda la obra o la prestaci\u00f3n o de parte de ella, que permita su comunicaci\u00f3n o la obtenci\u00f3n de copias. Se entiende por distribuci\u00f3n la puesta a disposici\u00f3n del p\u00fablico del original o de las copias de la obra o la prestaci\u00f3n, en un soporte tangible, mediante su venta, alquiler, pr\u00e9stamo o de cualquier otra forma. Se entiende por comunicaci\u00f3n p\u00fablica todo acto por el cual una pluralidad de personas, que no pertenezcan al \u00e1mbito dom\u00e9stico de quien la lleva a cabo, pueda tener acceso a la obra o la prestaci\u00f3n sin previa distribuci\u00f3n de ejemplares a cada una de ellas. Se considera comunicaci\u00f3n p\u00fablica la puesta a disposici\u00f3n del p\u00fablico de obras o prestaciones por procedimientos al\u00e1mbricos o inal\u00e1mbricos, de tal forma que cualquier persona pueda acceder a ellas desde el lugar y en el momento que elija. La explotaci\u00f3n de la obra o la prestaci\u00f3n comprende la reproducci\u00f3n, la distribuci\u00f3n, la comunicaci\u00f3n p\u00fablica y, en su caso, la transformaci\u00f3n. 2. L\u00edmites de los derechos. Nada en esta licencia pretende reducir o restringir cualesquiera l\u00edmites legales de los derechos exclusivos del titular de los derechos de propiedad intelectual de acuerdo con la Ley de propiedad intelectual o cualesquiera otras leyes aplicables, ya sean derivados de usos leg\u00edtimos, tales como la copia privada o la cita, u otras limitaciones como la resultante de la primera venta de ejemplares (agotamiento). 3. Concesi\u00f3n de licencia. Conforme a los t\u00e9rminos y a las condiciones de esta licencia, el licenciador concede, por el plazo de protecci\u00f3n de los derechos de propiedad intelectual y a t\u00edtulo gratuito, una licencia de \u00e1mbito mundial no exclusiva que incluye los derechos siguientes: Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n. Derecho a incorporar la obra o la prestaci\u00f3n en una o m\u00e1s colecciones. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n l\u00edcitamente incorporada en una colecci\u00f3n. Derecho de transformaci\u00f3n de la obra para crear una obra derivada siempre y cuando se incluya en \u00e9sta una indicaci\u00f3n de la transformaci\u00f3n o modificaci\u00f3n efectuada. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de obras derivadas creadas a partir de la obra licenciada. Derecho a extraer y reutilizar la obra o la prestaci\u00f3n de una base de datos. Para evitar cualquier duda, el titular originario: Conserva el derecho a percibir las remuneraciones o compensaciones previstas por actos de explotaci\u00f3n de la obra o prestaci\u00f3n, calificadas por la ley como irrenunciables e inalienables y sujetas a gesti\u00f3n colectiva obligatoria. Renuncia al derecho exclusivo a percibir, tanto individualmente como mediante una entidad de gesti\u00f3n colectiva de derechos, cualquier remuneraci\u00f3n derivada de actos de explotaci\u00f3n de la obra o prestaci\u00f3n que usted realice. Estos derechos se pueden ejercitar en todos los medios y formatos, tangibles o intangibles, conocidos en el momento de la concesi\u00f3n de esta licencia. Los derechos mencionados incluyen el derecho a efectuar las modificaciones que sean precisas t\u00e9cnicamente para el ejercicio de los derechos en otros medios y formatos. Todos los derechos no concedidos expresamente por el licenciador quedan reservados, incluyendo, a t\u00edtulo enunciativo pero no limitativo, los derechos morales irrenunciables reconocidos por la ley aplicable. En la medida en que el licenciador ostente derechos exclusivos previstos por la ley nacional vigente que implementa la directiva europea en materia de derecho sui generis sobre bases de datos, renuncia expresamente a dichos derechos exclusivos. 4. Restricciones. La concesi\u00f3n de derechos que supone esta licencia se encuentra sujeta y limitada a las restricciones siguientes: Usted puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n solamente bajo los t\u00e9rminos de esta licencia y debe incluir una copia de la misma, o su Identificador Uniforme de Recurso (URI). Usted no puede ofrecer o imponer ninguna condici\u00f3n sobre la obra o prestaci\u00f3n que altere o restrinja los t\u00e9rminos de esta licencia o el ejercicio de sus derechos por parte de los concesionarios de la misma. Usted no puede sublicenciar la obra o prestaci\u00f3n. Usted debe mantener intactos todos los avisos que se refieran a esta licencia y a la ausencia de garant\u00edas. Usted no puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n con medidas tecnol\u00f3gicas que controlen el acceso o el uso de una manera contraria a los t\u00e9rminos de esta licencia. Esta secci\u00f3n 4.a tambi\u00e9n afecta a la obra o prestaci\u00f3n incorporada en una colecci\u00f3n, pero ello no implica que \u00e9sta en su conjunto quede autom\u00e1ticamente o deba quedar sujeta a los t\u00e9rminos de la misma. En el caso que le sea requerido, previa comunicaci\u00f3n del licenciador, si usted incorpora la obra en una colecci\u00f3n y/o crea una obra derivada, deber\u00e1 quitar cualquier cr\u00e9dito requerido en el apartado 4.b, en la medida de lo posible. Si usted reproduce, distribuye o comunica p\u00fablicamente la obra o la prestaci\u00f3n, una colecci\u00f3n que la incorpore o cualquier obra derivada, debe mantener intactos todos los avisos sobre la propiedad intelectual e indicar, de manera razonable conforme al medio o a los medios que usted est\u00e9 utilizando: El nombre del autor original, o el seud\u00f3nimo si es el caso, as\u00ed como el del titular originario, si le es facilitado. El nombre de aquellas partes (por ejemplo: instituci\u00f3n, publicaci\u00f3n, revista) que el titular originario y/o el licenciador designen para ser reconocidos en el aviso legal, las condiciones de uso, o de cualquier otra manera razonable. El t\u00edtulo de la obra o la prestaci\u00f3n si le es facilitado. El URI, si existe, que el licenciador especifique para ser vinculado a la obra o la prestaci\u00f3n, a menos que tal URI no se refiera al aviso legal o a la informaci\u00f3n sobre la licencia de la obra o la prestaci\u00f3n. En el caso de una obra derivada, un aviso que identifique la transformaci\u00f3n de la obra en la obra derivada (p. ej., \"traducci\u00f3n castellana de la obra de Autor Original,\" o \"gui\u00f3n basado en obra original de Autor Original\"). Este reconocimiento debe hacerse de manera razonable. En el caso de una obra derivada o incorporaci\u00f3n en una colecci\u00f3n estos cr\u00e9ditos deber\u00e1n aparecer como m\u00ednimo en el mismo lugar donde se hallen los correspondientes a otros autores o titulares y de forma comparable a los mismos. Para evitar la duda, los cr\u00e9ditos requeridos en esta secci\u00f3n s\u00f3lo ser\u00e1n utilizados a efectos de atribuci\u00f3n de la obra o la prestaci\u00f3n en la manera especificada anteriormente. Sin un permiso previo por escrito, usted no puede afirmar ni dar a entender impl\u00edcitamente ni expl\u00edcitamente ninguna conexi\u00f3n, patrocinio o aprobaci\u00f3n por parte del titular originario, el licenciador y/o las partes reconocidas hacia usted o hacia el uso que hace de la obra o la prestaci\u00f3n. Para evitar cualquier duda, debe hacerse notar que las restricciones anteriores (p\u00e1rrafos 4.a y 4.b) no son de aplicaci\u00f3n a aquellas partes de la obra o la prestaci\u00f3n objeto de esta licencia que \u00fanicamente puedan ser protegidas mediante el derecho sui generis sobre bases de datos recogido por la ley nacional vigente implementando la directiva europea de bases de datos 5. Exoneraci\u00f3n de responsabilidad A MENOS QUE SE ACUERDE MUTUAMENTE ENTRE LAS PARTES, EL LICENCIADOR OFRECE LA OBRA O LA PRESTACI\u00d3N TAL CUAL (ON AN \"AS-IS\" BASIS) Y NO CONFIERE NINGUNA GARANT\u00cdA DE CUALQUIER TIPO RESPECTO DE LA OBRA O LA PRESTACI\u00d3N O DE LA PRESENCIA O AUSENCIA DE ERRORES QUE PUEDAN O NO SER DESCUBIERTOS. ALGUNAS JURISDICCIONES NO PERMITEN LA EXCLUSI\u00d3N DE TALES GARANT\u00cdAS, POR LO QUE TAL EXCLUSI\u00d3N PUEDE NO SER DE APLICACI\u00d3N A USTED. 6. Limitaci\u00f3n de responsabilidad. SALVO QUE LO DISPONGA EXPRESA E IMPERATIVAMENTE LA LEY APLICABLE, EN NING\u00daN CASO EL LICENCIADOR SER\u00c1 RESPONSABLE ANTE USTED POR CUALESQUIERA DA\u00d1OS RESULTANTES, GENERALES O ESPECIALES (INCLUIDO EL DA\u00d1O EMERGENTE Y EL LUCRO CESANTE), FORTUITOS O CAUSALES, DIRECTOS O INDIRECTOS, PRODUCIDOS EN CONEXI\u00d3N CON ESTA LICENCIA O EL USO DE LA OBRA O LA PRESTACI\u00d3N, INCLUSO SI EL LICENCIADOR HUBIERA SIDO INFORMADO DE LA POSIBILIDAD DE TALES DA\u00d1OS. 7. Finalizaci\u00f3n de la licencia Esta licencia y la concesi\u00f3n de los derechos que contiene terminar\u00e1n autom\u00e1ticamente en caso de cualquier incumplimiento de los t\u00e9rminos de la misma. Las personas o entidades que hayan recibido de usted obras derivadas o colecciones bajo esta licencia, sin embargo, no ver\u00e1n sus licencias finalizadas, siempre que tales personas o entidades se mantengan en el cumplimiento \u00edntegro de esta licencia. Las secciones 1, 2, 5, 6, 7 y 8 permanecer\u00e1n vigentes pese a cualquier finalizaci\u00f3n de esta licencia. Conforme a las condiciones y t\u00e9rminos anteriores, la concesi\u00f3n de derechos de esta licencia es vigente por todo el plazo de protecci\u00f3n de los derechos de propiedad intelectual seg\u00fan la ley aplicable. A pesar de lo anterior, el licenciador se reserva el derecho a divulgar o publicar la obra o la prestaci\u00f3n en condiciones distintas a las presentes, o de retirar la obra o la prestaci\u00f3n en cualquier momento. No obstante, ello no supondr\u00e1 dar por concluida esta licencia (o cualquier otra licencia que haya sido concedida, o sea necesario ser concedida, bajo los t\u00e9rminos de esta licencia), que continuar\u00e1 vigente y con efectos completos a no ser que haya finalizado conforme a lo establecido anteriormente, sin perjuicio del derecho moral de arrepentimiento en los t\u00e9rminos reconocidos por la ley de propiedad intelectual aplicable. 8. Miscel\u00e1nea Cada vez que usted realice cualquier tipo de explotaci\u00f3n de la obra o la prestaci\u00f3n, o de una colecci\u00f3n que la incorpore, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra o la prestaci\u00f3n en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Cada vez que usted realice cualquier tipo de explotaci\u00f3n de una obra derivada, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra objeto de esta licencia en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Si alguna disposici\u00f3n de esta licencia resulta inv\u00e1lida o inaplicable seg\u00fan la Ley vigente, ello no afectar\u00e1 la validez o aplicabilidad del resto de los t\u00e9rminos de esta licencia y, sin ninguna acci\u00f3n adicional por cualquiera las partes de este acuerdo, tal disposici\u00f3n se entender\u00e1 reformada en lo estrictamente necesario para hacer que tal disposici\u00f3n sea v\u00e1lida y ejecutiva. No se entender\u00e1 que existe renuncia respecto de alg\u00fan t\u00e9rmino o disposici\u00f3n de esta licencia, ni que se consiente violaci\u00f3n alguna de la misma, a menos que tal renuncia o consentimiento figure por escrito y lleve la firma de la parte que renuncie o consienta. Esta licencia constituye el acuerdo pleno entre las partes con respecto a la obra o la prestaci\u00f3n objeto de la licencia. No caben interpretaciones, acuerdos o condiciones con respecto a la obra o la prestaci\u00f3n que no se encuentren expresamente especificados en la presente licencia. El licenciador no estar\u00e1 obligado por ninguna disposici\u00f3n complementaria que pueda aparecer en cualquier comunicaci\u00f3n que le haga llegar usted. Esta licencia no se puede modificar sin el mutuo acuerdo por escrito entre el licenciador y usted.","title":""},{"location":"markdown_strict/CF_guia-uso/","text":"< Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported . \u00cdndice Objetivos [3](#objetivos) Instalaci\u00f3n [5](#instalaci\u00f3n) Desinstalaci\u00f3n [8](#desinstalaci\u00f3n) Instalaci\u00f3n de certificados software en Internet Explorer [11](#instalaci\u00f3n-de-certificados-software-en-internet-explorer) Instalaci\u00f3n de certificados software en Mozilla Firefox [16](#instalaci\u00f3n-de-certificados-software-en-mozilla-firefox) Instalaci\u00f3n de certificados software en Google Chrome y Apple Safari [19](#instalaci\u00f3n-de-certificados-software-en-google-chrome-y-apple-safari) Instalaci\u00f3n de certificados software en el almac\u00e9n de Mac OS X [19](#instalaci\u00f3n-de-certificados-software-en-el-almac\u00e9n-de-mac-os-x) Uso de certificados desde tarjetas inteligentes [20](#uso-de-certificados-desde-tarjetas-inteligentes) DNIe (DNI Electr\u00f3nico) [20](#dnie-dni-electr\u00f3nico) Otros certificados [27](#otros-certificados) Introducci\u00f3n El Cliente de Firma es una herramienta de Firma Electr\u00f3nica que funciona en forma de Applet de Java integrado en una p\u00e1gina Web mediante JavaScript. El Cliente hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados (keystore) del navegador web (Internet Explorer, Mozilla, Firefox) o el sistema operativo as\u00ed como de los que est\u00e9n en dispositivos (tarjetas inteligentes, dispositivos USB) configurados en el mismo (el caso de los DNI-e). El Cliente de Firma, como su nombre indica, es una aplicaci\u00f3n que se ejecuta en cliente (en el ordenador del usuario, no en el servidor Web). Esto es as\u00ed para evitar que la clave privada asociada a un certificado tenga que \u201csalir\u201d del contenedor del usuario (tarjeta, dispositivo USB o navegador) ubicado en su PC. De hecho, nunca llega a salir del navegador, el Cliente le env\u00eda los datos a firmar y \u00e9ste los devuelve firmados. El Cliente de Firma contiene las interfaces y componentes web necesarios para la realizaci\u00f3n de los siguientes procesos (adem\u00e1s de otros auxiliares como c\u00e1lculos de hash, lectura de ficheros, etc\u2026): Firma de formularios Web. Firma de datos y ficheros. Multifirma masiva de datos y ficheros. Cofirma (CoSignature) Multifirma al mismo nivel. Contrafirma (CounterSignature) Multifirma en cascada. Como complemento al cliente de firma, se encuentra un cliente de cifrado que nos permite realizar las funciones de encriptaci\u00f3n y desencriptaci\u00f3n de datos atendiendo a diferentes algoritmos y configuraciones. Adem\u00e1s permite la generaci\u00f3n de sobres digitales. Objetivos El objetivo del presente documento es detallar un posible uso t\u00edpico del Cliente @firma dentro de una aplicaci\u00f3n Web, tanto desde un punto de vista del entorno de ejecuci\u00f3n como desde el directo por parte del usuario. Requisitos M\u00ednimos Puede consultar matrices completas de compatibilidad, requisitos m\u00ednimos y otras informaci\u00f3n de utilidad respecto a entorno operativo en el manual del integrador del Cliente @firma. Gu\u00eda de Uso. El componente de firma es una aplicaci\u00f3n cliente de Firma Electr\u00f3nica que se ejecuta en el PC del usuario. Est\u00e1 basado en Applets Java, por lo que es necesario tener instalada la m\u00e1quina virtual de Java, que ser\u00e1 el entorno donde se ejecutar\u00e1 dicha aplicaci\u00f3n. B\u00e1sicamente, el componente recibe datos y los devuelve firmados, utilizando para ello los certificados instalados en el almac\u00e9n de certificados (keystore) del navegador donde se est\u00e9 ejecutando en ese momento. La raz\u00f3n por la que se ejecuta en el cliente es porque la codificaci\u00f3n de la firma electr\u00f3nica se efect\u00faa en el ordenador del usuario, utilizando la clave privada del certificado seleccionado, que reside en su PC. Si su certificado reside en una tarjeta inteligente (DNIe) o tokenUSB, estos son cargados autom\u00e1ticamente en el almac\u00e9n de certificados a trav\u00e9s de los controladores (drivers) de los dispositivos, por lo que ser\u00e1n accesibles desde el cliente de firma. Instalaci\u00f3n Durante la carga del Cliente se comprueban las dependencias en cuanto a entorno operativo del Cliente @firma. Y en caso de detectarse alguna necesidad se procede a su instalaci\u00f3n (consulte el Manual del Integrador del Cliente @firma para m\u00e1s informaci\u00f3n). En estos casos: 1 \u2013 Se informa del inicio de la instalaci\u00f3n del Cliente de Firma de @firma. < 2 \u2013 El proceso de instalaci\u00f3n muestra el acuerdo de licencia, informando de las Condiciones de Uso del componente, las cuales deber\u00e1n ser aceptadas para continuar con la instalaci\u00f3n. < 3 \u2013 Se notifica de la finalizaci\u00f3n de la instalaci\u00f3n y se recomienda reiniciar los navegadores. < Una vez cargado, si usamos el DNI-e, el navegador nos mostrar\u00e1 la siguiente ventana: < < En la cual deberemos introducir nuestro PIN y pulsar sobre el bot\u00f3n \u201cAceptar\u201d. En la siguiente ventana, el navegador nos mostrar\u00e1 el listado de certificados instalados en el navegador, seleccionaremos el certificado con el que nos queramos identificar, en el caso del DNIe el listado como \u201c Apellidos, Nombre (AUTENTICACI\u00d3N) \u201d y pulsaremos sobre el bot\u00f3n \u201c Aceptar \u201d < Es posible que el navegador nos vuelva a pedir introducir el PIN del DNIe, una vez hecho pulsaremos \u201cAceptar\u201d y tras el sistema realizar las comprobaciones pertinentes habremos accedido al aplicativo. Desinstalaci\u00f3n No existe un mecanismo autom\u00e1tico para la desinstalaci\u00f3n de las dependencias del Cliente ya que estas no pueden eliminarse durante la ejecuci\u00f3n de la m\u00e1quina virtual Java. No obstante, es posible realizar una desinstalaci\u00f3n manual de los componentes del Cliente. Para ello es necesario eliminar los siguientes ficheros del directorio ENDORSED de su entorno de ejecuci\u00f3n de Java (JRE): serializer-2.7.1.jar / serializer.jar xalan-2.7.1.jar / xalan.jar xercesImpl-2.9.1.jar / xerces.jar xml-apis-1.3.03.jar / xml-apis.jar afirma_5_java_5.jar Para determinar la situaci\u00f3n del directorio ENDORSED de su RE consulte la documentaci\u00f3n del fabricante: http://docs.oracle.com/javase/6/docs/technotes/guides/standards/ Usualmente, suele estar dentro de un subdirectorio del directorio de bibliotecas del JAVA_HOME: %JAVA_HOME%\\lib\\endorsed (Windows) $JAVA_HOME/lib/endorsed (Linux y Mac OS X) Instalaci\u00f3n de Certificados. Para el uso del componente de firma, es necesario disponer de un certificado electr\u00f3nico, el cual puede encontrarse almacenado: En el Navegador . En el almac\u00e9n de certificados del navegador dentro de la pesta\u00f1a \"personal\" aparecen los que poseen clave privada y dentro de la pesta\u00f1a \"otras personas\" aparecen los de clave p\u00fablica. Tarjeta inteligente . El DNI electr\u00f3nico es un dispositivo seguro de creaci\u00f3n de firma conforme a la norma CWA 14169. Esta norma est\u00e1 reconocida por la Uni\u00f3n Europea y se considera que la firma electr\u00f3nica realizada con el DNI electr\u00f3nico es equivalente a una firma manuscrita a efectos legales. Estas firmas son las m\u00e1s seguras porque la clave privada nunca sale de la tarjeta inteligente, por lo que no puede ser copiada por terceros. Es importante recordar, que cuando se instala un certificado, el mismo queda instalado \u00fanicamente para el navegador o sistema en el que se realice dicha instalaci\u00f3n, siendo necesario realizar la misma acci\u00f3n si se quisiera disponer del mismo certificado en otro navegador que utilice un almac\u00e9n de certificados distinto. A continuaci\u00f3n se detalla los diferentes pasos a seguir para la instalaci\u00f3n del certificado seg\u00fan el lugar de almacenamiento de los mismos: Instalaci\u00f3n de certificados software en Internet Explorer En primer lugar, en el men\u00fa superior del navegador, seleccionamos la opci\u00f3n \u201c Herramientas \u201d y a continuaci\u00f3n hacemos clic sobre la opci\u00f3n \u201c Opciones de Internet \u201d. < A continuaci\u00f3n seleccionamos la opci\u00f3n \u201cCertificados\u201d, dentro de la pesta\u00f1a \u201c Contenido \u201d < Continuamos seleccionando la opci\u00f3n \u201c Importar \u201d, se nos abrir\u00e1 el \u201c Asistente para importaci\u00f3n de certificados \u201d. < < Pulsaremos \u201c Siguiente \u201d en la primera ventana del asistente, tras lo cual, nos pedir\u00e1 que seleccionemos la ubicaci\u00f3n del certificado que deseamos instalar, para lo cual, pulsaremos el bot\u00f3n \u201c Examinar...\u201d. Se nos abrir\u00e1 una ventana en la cual tendremos que buscar el certificado que deseamos instalar, una vez encontrado, seleccionaremos el certificado y pulsaremos sobre el bot\u00f3n \u201c Abrir \u201d. < < Tras seleccionar el bot\u00f3n \u201c Siguiente \u201d, en la siguiente ventana el asistente nos pedir\u00e1 que introduzcamos la contrase\u00f1a usada en el cifrado del certificado, introducimos la clave y pulsamos sobre el bot\u00f3n \u201c Siguiente \u201d < En la siguiente ventana, el asistente nos pedir\u00e1 que seleccionemos el almac\u00e9n en el cual se guardar\u00e1 el certificado, seleccionaremos la opci\u00f3n \u201cColocar todos los certificados en el siguiente almac\u00e9n\u201d. Pulsaremos sobre el bot\u00f3n \u201c Examinar \u201d, seleccionaremos la carpeta \u201c Personal \u201d y pulsaremos el bot\u00f3n \u201c Siguiente \u201d. < < Tras este paso, el asistente nos informar\u00e1 de que el certificado ha quedado importado correctamente. Instalaci\u00f3n de certificados software en Mozilla Firefox En primer lugar, en el men\u00fa superior del navegador, seleccionamos la opci\u00f3n \u201c Herramientas \u201d y a continuaci\u00f3n hacemos clic sobre la opci\u00f3n \u201c Opciones \u201d. < A continuaci\u00f3n seleccionamos la pesta\u00f1a \u201c Avanzado \u201d del men\u00fa superior de la nueva ventana, tras lo cual, seleccionamos la subpesta\u00f1a \u201c Cifrado \u201d, en la que seleccionaremos la opci\u00f3n \u201c Ver certificados \u201d < Continuamos seleccionando la opci\u00f3n \u201c Importar \u201d, se nos abrir\u00e1 una ventana en la cual tendremos que buscar el certificado que deseamos instalar, una vez encontrado, seleccionaremos el certificado y pulsaremos sobre el bot\u00f3n \u201c Abrir \u201d. < < El navegador nos pedir\u00e1 que introduzcamos la contrase\u00f1a usada en el cifrado del certificado, introducimos la clave y pulsamos sobre el bot\u00f3n \u201c Aceptar \u201d. < Una vez realizado este paso, el sistema nos informar\u00e1 con un mensaje que el certificado ha quedado instalado de forma satisfactoria. Instalaci\u00f3n de certificados software en Google Chrome y Apple Safari Los navegadores Web Google Chrome y Apple Safari no disponen de un almac\u00e9n de certificados propio, en su lugar utilizan el almac\u00e9n de certificados del sistema operativo que utilice el usuario. Esto es: En Microsoft Windows : El almac\u00e9n de certificados que Internet Explorer. En Linux : El almac\u00e9n de certificados de Mozilla Firefox. En Solaris / OpenSolaris : El almac\u00e9n de certificados de Mozilla Firefox. En Mac OS X : El almac\u00e9n de certificados del sistema operativo. Si nuestro sistema operativo es Microsoft Windows deberemos seguir los pasos descritos en el apartado \u201cInstalaci\u00f3n de certificados software en Internet Explorer\u201c. Si nuestro sistema operativo es Linux o Solaris se importar\u00e1n los certificados a trav\u00e9s de Mozilla Firefox tal como se describe en el apartado \u201cInstalaci\u00f3n de certificados software en Mozilla Firefox\u201d. Si nuestro sistema operativo es Mac OS X deber\u00e1n instalarse los certificados tal como se describe en el apartado \u201cInstalaci\u00f3n de certificados software en el almac\u00e9n de Mac OS X\u201d. Instalaci\u00f3n de certificados software en el almac\u00e9n de Mac OS X Para instalar un certificado en Mac OS X s\u00f3lo deberemos hacer doble clic sobre el certificado para solicitar su instalaci\u00f3n y seleccionar el almac\u00e9n de certificados del sistema. Seguidamente, insertaremos la contrase\u00f1a de usuario del sistema para finalizar la importaci\u00f3n. < < Aunque este proceso de instalaci\u00f3n de certificados es el com\u00fan en Mac OS X, pueden existir cambios entre cada una de sus versiones. Para conocer los detalles de cada versi\u00f3n acuda a la p\u00e1gina Web de soporte de su sistema operativo. Para Mac OS X 10.6 es: http://docs.info.apple.com/article.html?path=Mac/10.6/es/9082.html Uso de certificados desde tarjetas inteligentes DNIe (DNI Electr\u00f3nico) Para la utilizaci\u00f3n del DNI electr\u00f3nico es necesario contar determinados elementos hardware y software que nos van a permitir el acceso al chip de la tarjeta y, por tanto, la utilizaci\u00f3n de los certificados contenidos en \u00e9l. a) Elementos hardware El DNI electr\u00f3nico requiere el siguiente equipamiento f\u00edsico: Un Ordenador personal (Intel -a partir de Pentium III- o tecnolog\u00eda similar). Un lector de tarjetas inteligentes que cumpla el est\u00e1ndar ISO 7816 . Existen distintas implementaciones, bien integrados en el teclado, bien externos (conectados v\u00eda USB) o bien a trav\u00e9s de una interfaz PCMCIA. Para elegir un lector que sean compatible con el DNI electr\u00f3nico verifique que, al menos, Cumpla el est\u00e1ndar ISO 7816 (1, 2 y 3). Soporta tarjetas as\u00edncronas basadas en protocolos T=0 (y T=1). Soporta velocidades de comunicaci\u00f3n m\u00ednimas de 9.600 bps. Soporta los est\u00e1ndares: API PC/SC (Personal Computer/Smart Card) CSP (Cryptographic Service Provider, Microsoft) API PKCS#11 b) Elementos software ** Sistemas operativos** El DNI electr\u00f3nico puede operar en diversos entornos: Microsoft Windows Linux Oracle Solaris Apple OS X ** Navegadores** El DNI electr\u00f3nico es compatible con todos los navegadores: Microsoft Internet Explorer (versi\u00f3n 7.0 o superior) Mozilla Firefox Google Chrome Controladores / M\u00f3dulos criptogr\u00e1ficos Para poder interaccionar adecuadamente con las tarjetas criptogr\u00e1ficas en general y con el DNI electr\u00f3nico en particular, el equipo ha de tener instalados unas \"piezas\" de software denominadas m\u00f3dulos criptogr\u00e1ficos. En un entorno Microsoft Windows , el equipo debe tener instalado un servicio que se denomina \"Cryptographic Service Provider\" (CSP). En los entornos UNIX / Linux o MAC podemos utilizar el DNI electr\u00f3nico a trav\u00e9s de un m\u00f3dulo criptogr\u00e1fico denominado PKCS#11. Tanto el CSP como el PKCS#11 espec\u00edfico para el DNI electr\u00f3nico podr\u00e1n obtenerse en el \u00c1rea de Descargas de la web del DNI-e, accediendo a la siguiente URL: http://www.dnielectronico.es/descargas/index.html , o en el sitio Web de OpenDNIe (recomendado para sistemas Linux y Solaris): http://opendnie.cenatic.es/ Opcionalmente puede acceder a https://zonatic.usatudni.es/aplicaciones/asistente-dnie , para la descarga de un instalador sencillo y accesible del controlador. Si optamos por el \u00e1rea de descargas de www.dnielectronico.es deberemos seleccionar la primera opci\u00f3n si tenemos un Sistema Operativo Windows o la segunda en caso de tener otro Sistema Operativo. < En la siguiente pantalla seleccionaremos la opci\u00f3n \u201c Sistemas Windows. Compatible con Vista\u201d, tras lo cual se nos descargara el software. Seleccionaremos \u201c Guardar \u201d y elegiremos la carpeta deseada donde queremos que sea descargado. < < Una vez descargado el fichero con la nomenclatura \u201cDNIe_vx_j_y.zip\u201d lo descomprimiremos y accederemos al fichero \u201cDNIe_vx_j_y.exe\u201d. El software se instalar\u00e1 autom\u00e1ticamente y se le pedir\u00e1 reiniciar el equipo. < < Es posible, dependiendo de la configuraci\u00f3n de su navegador, que nos aparezca la siguiente ventana: < Se nos solicitar\u00e1, por tanto que instalemos en el certificado ra\u00edz del DNIe, para ello deberemos seleccionar sobre \u201c Instalar certificado...\u201d < Pulsaremos sobre el bot\u00f3n \u201c Siguiente \u201d < Seleccionamos la opci\u00f3n \u201cColocar todos los certificados en el siguiente almac\u00e9n\u201d y pulsamos sobre el bot\u00f3n \u201c Examinar...\u201d < Seleccionaremos el almac\u00e9n de certificados \u201cEntidades Emisoras Ra\u00edz de Confianza\u201d En la siguiente ventana seleccionaremos la opci\u00f3n \u201cFinalizar\u201d < Si nos aparece la siguiente advertencia, seleccionaremos \u201cSi\u201d para permitir que la autoridad ra\u00edz del DNIe, se instale en el navegador y se pueda as\u00ed establecer la cadena de confianza de certificaci\u00f3n. Tras lo cual, el software quedar\u00e1 instalado y listo para su uso. Adicionalmente, para operar con un lector de tarjetas inteligentes, ser\u00e1 necesario instalar un driver que, normalmente, se distribuye con el propio lector. Nota: Para hacer uso del software de cambio de PIN virtual, deber\u00e1 tener instalado en el equipo la versi\u00f3n JAVA 1.5 o superior . Para m\u00e1s informaci\u00f3n puede acudir a la p\u00e1gina http://www.dnielectronico.es o contactar con el Servicio de Atenci\u00f3n al Ciudadano en el tel\u00e9fono 900 364 463 o en el correo sac@dnielectronico.es Otros certificados En el caso de hacer uso de otro certificado desde una tarjeta inteligente deber\u00e1 consultar con la entidad emisora del mismo para que le indique su forma de uso. Resoluci\u00f3n de Problemas Para la resoluci\u00f3n de problemas relacionados con el uso del Cliente @firma, consulte la Gu\u00eda de Incidencias del Cliente o el apartado 7 FAQ. de este mismo documento. Glosario de t\u00e9rminos Firma electr\u00f3nica Es el conjunto de datos, en forma electr\u00f3nica, anejos a otros datos electr\u00f3nicos o asociados funcionalmente con ellos, utilizados como medio para identificar formalmente al autor o a los autores del documento que la recoge. XML Digital Signature (XMLDSig) Es una recomendaci\u00f3n del W3C que define una sintaxis XML para la firma digital XML Advanced Signature (XAdES) Es un conjunto de extensiones a las recomendaciones XML-DSig haci\u00e9ndolas adecuadas para la firma electr\u00f3nica avanzada. RSA Es un sistema criptogr\u00e1fico de clave p\u00fablica desarrollado en 1977. En la actualidad, RSA es el primer y m\u00e1s utilizado algoritmo de este tipo y es v\u00e1lido tanto para cifrar como para firmar digitalmente. XML Es un metalenguaje extensible de etiquetas desarrollado por el World Wide Web Consortium (W3C). Es una simplificaci\u00f3n y adaptaci\u00f3n del SGML y permite definir la gram\u00e1tica de lenguajes espec\u00edficos (de la misma manera que HTML es a su vez un lenguaje definido por SGML). Por lo tanto XML no es realmente un lenguaje en particular, sino una manera de definir lenguajes para diferentes necesidades. Algunos de estos lenguajes que usan XML para su definici\u00f3n son XHTML, SVG, MathML. Office Open XML (OOXML) Es un formato de archivo abierto y est\u00e1ndar cuyas extensiones m\u00e1s comunes son .docx, .xlsx y .pptx. Se le utiliza para representar y almacenar hojas de c\u00e1lculo, diagramas, presentaciones y documentos de texto. Un archivo Office Open XML contiene principalmente datos basados en el lenguaje de marcado XML, comprimidos en un contenedor .zip espec\u00edfico. Open Document Format (ODF) Es un formato de fichero est\u00e1ndar para el almacenamiento de documentos ofim\u00e1ticos tales como hojas de c\u00e1lculo, memorandos, gr\u00e1ficas y presentaciones. Aunque las especificaciones fueron inicialmente elaboradas por Sun, el est\u00e1ndar fue desarrollado por el comit\u00e9 t\u00e9cnico para Open Office XML de la organizaci\u00f3n OASIS y est\u00e1 basado en un esquema XML inicialmente creado e implementado por la suite ofim\u00e1tica OpenOffice.org (ver OpenOffice.org XML). ZIP Es un formato de almacenamiento sin p\u00e9rdida, muy utilizado para la compresi\u00f3n de datos como im\u00e1genes, programas o documentos. PDF Es un formato de almacenamiento de documentos, desarrollado por la empresa Adobe Systems. Este formato es de tipo compuesto (imagen vectorial, mapa de bits y texto). SHA Es un sistema de funciones hash criptogr\u00e1ficas relacionadas de la Agencia de Seguridad Nacional de los Estados Unidos y publicadas por el National Institute of Standards and Technology (NIST). El primer miembro de la familia fue publicado en 1993 es oficialmente llamado SHA. Sin embargo, hoy d\u00eda, no oficialmente se le llama SHA-0 para evitar confusiones con sus sucesores. Dos a\u00f1os m\u00e1s tarde el primer sucesor de SHA fue publicado con el nombre de SHA-1. Existen cuatro variantes m\u00e1s que se han publicado desde entonces cuyas diferencias se basan en un dise\u00f1o algo modificado y rangos de salida incrementados: SHA-224, SHA-256, SHA-384, y SHA-512 (llam\u00e1ndose SHA-2 a todos ellos). PKCS Se refiere a un grupo de est\u00e1ndares de criptograf\u00eda de clave p\u00fablica concebidos y publicados por los laboratorios de RSA en California. A RSA Security se le asignaron los derechos de licenciamiento para la patente de algoritmo de clave asim\u00e9trica RSA y adquiri\u00f3 los derechos de licenciamiento para muchas otras patentes de claves. W3C Es un consorcio internacional que produce recomendaciones para la World Wide Web. Est\u00e1 dirigida por Tim Berners-Lee, el creador original de URL (Uniform Resource Locator, Localizador Uniforme de Recursos), HTTP (HyperText Transfer Protocol, Protocolo de Transferencia de HiperTexto) y HTML (Lenguaje de Marcado de HiperTexto) que son las principales tecnolog\u00edas sobre las que se basa la Web. OpenOffice.org Es una suite ofim\u00e1tica libre (c\u00f3digo abierto y distribuci\u00f3n gratuita) que incluye herramientas como procesador de textos, hoja de c\u00e1lculo, presentaciones, herramientas para el dibujo vectorial y base de datos. Est\u00e1 disponible para varias plataformas, tales como Microsoft Windows, GNU/Linux, BSD, Solaris y Mac OS X. Soporta numerosos formatos de archivo, incluyendo como predeterminado el formato est\u00e1ndar ISO/IEC OpenDocument (ODF), entre otros formatos comunes. A febrero de 2010, OpenOffice soporta m\u00e1s de 110 idiomas. Base64 Es un sistema de numeraci\u00f3n posicional que usa 64 como base. Es la mayor potencia de dos que puede ser representada usando \u00fanicamente los caracteres imprimibles de ASCII. Esto ha propiciado su uso para codificaci\u00f3n de correos electr\u00f3nicos, PGP y otras aplicaciones. Todas las variantes famosas que se conocen con el nombre de Base64 usan el rango de caracteres A-Z, a-z y 0-9 en este orden para los primeros 62 d\u00edgitos, pero los s\u00edmbolos escogidos para los \u00faltimos dos d\u00edgitos var\u00edan considerablemente de unas a otras. Otros m\u00e9todos de codificaci\u00f3n como UUEncode y las \u00faltimas versiones de binhex usan un conjunto diferente de 64 caracteres para representar 6 d\u00edgitos binarios, pero \u00e9stos nunca son llamados Base64. ASN.1 Es una norma para representar datos independientemente de la m\u00e1quina que se est\u00e9 usando y sus formas de representaci\u00f3n internas. Es un protocolo de nivel de presentaci\u00f3n en el modelo OSI. Autoridad de Certificaci\u00f3n (CA) Es una entidad de confianza, responsable de emitir y revocar los certificados digitales o certificados, utilizados en la firma electr\u00f3nica, para lo cual se emplea la criptograf\u00eda de clave p\u00fablica. Jur\u00eddicamente es un caso particular de Prestador de Servicios de Certificaci\u00f3n. Certificado Digital Es un documento digital mediante el cual un tercero confiable (una autoridad de certificaci\u00f3n) garantiza la vinculaci\u00f3n entre la identidad de un sujeto o entidad y su clave p\u00fablica. Infraestructura de Clave P\u00fablica (PKI) Es una combinaci\u00f3n de hardware y software, pol\u00edticas y procedimientos de seguridad que permiten la ejecuci\u00f3n con garant\u00edas de operaciones criptogr\u00e1ficas como el cifrado, la firma digital o el no repudio de transacciones electr\u00f3nicas. FAQ. A continuaci\u00f3n se detallan ciertas dudas comunes que pueden surgir en el uso del Ciente @firma. Para m\u00e1s informaci\u00f3n y dudas adicionales consulte la Gu\u00eda de Incidencias del Cliente @firma. \u00bfQu\u00e9 certificados son reconocidos por la plataforma? La plataforma @firma admite certificados digitales reconocidos conforme el est\u00e1ndar ITU-T X.509 v3, emitidos por m\u00faltiples prestadores de servicios de certificaci\u00f3n. Todos los prestadores se encuentran inscritos en el registro de la Secretaria de Estado de Telecomunicaciones y para la Sociedad de Informaci\u00f3n del Ministerio de Industria, Turismo y Comercio de autoridades conforme a lo establecido en el art\u00edculo 30 de la Ley 59/2003, de 19 de diciembre, de firma electr\u00f3nica. Los prestadores reconocidos son: DNI Electr\u00f3nico Camerfirma Izenpe CATCert (Agencia Catalana de Certificaci\u00f3n) ANF AC SCR (Servicio de Certificaci\u00f3n de los Registradores) ACA ACCV (Autoridad de Certificaci\u00f3n de la Comunidad Valenciana) ANCERT (Agencia Notarial de Certificaci\u00f3n) FNMT (F\u00e1brica Nacional de Moneda y Timbre) Firmaprofesional BANESTO CA Si desea informaci\u00f3n m\u00e1s detallada sobre los certificados soportados, consulte las referencias a la \u201cPlataforma de validaci\u00f3n de firma electr\u00f3nica @firma\u201d en el Portal de la Administraci\u00f3n Electr\u00f3nica ( http://administracionelectronica.gob.es/ ). \u00bfCu\u00e1les son los tipos de certificados admitidos por las Administraciones? De acuerdo con la Ley 59/2003, de Firma Electr\u00f3nica, los tipos de certificados admitidos son: certificado de persona f\u00edsica y , certificado de persona jur\u00eddica, certificado de sello electr\u00f3nico para la actuaci\u00f3n automatizada, certificado de sede electr\u00f3nica administrativa y certificado de empleado p\u00fablico. Cada uno de los certificados emitidos conllevar\u00e1 un grado de \"confianza\", asociado a los diferentes niveles de aseguramiento bajo los que se emitan, debido a los requisitos t\u00e9cnicos y de seguridad que estos niveles llevan asociados. \u00bfQu\u00e9 informaci\u00f3n posee un certificado digital? Un certificado digital es, en realidad, una clave p\u00fablica, con cierta informaci\u00f3n adjunta, como el nombre del propietario, el periodo de validez de la clave, etc, permitiendo: La autenticaci\u00f3n del usuario. La confidencialidad del mensaje. La integridad del documento. El no repudio. Los certificados digitales s\u00f3lo son \u00fatiles si existe alguna Autoridad Certificadora ( Certification Authority o CA) que los valide, ya que si uno se certifica a s\u00ed mismo no hay ninguna garant\u00eda de que su identidad sea la que anuncia. El formato de certificados X.509 es un est\u00e1ndar del ITU-T ( International Telecommunication Union-Telecommunication Standarization Sector ) y el ISO/IEC ( International Standards Organization / International Electrotechnical Commission ). Los elementos del formato de un certificado X.509 v3 son: Versi\u00f3n. El campo de versi\u00f3n contiene el n\u00famero de versi\u00f3n del certificado codificado. N\u00famero de serie del certificado. Este campo es un entero asignado por la autoridad certificadora. Cada certificado emitido por una CA debe tener un n\u00famero de serie \u00fanico. Identificador del algoritmo de firmado. Este campo identifica el algoritmo empleado para firmar el certificado. Nombre del emisor. Este campo identifica la CA que ha firmado y emitido el certificado. Periodo de validez. Este campo indica el periodo de tiempo durante el cual el certificado es v\u00e1lido y la CA est\u00e1 obligada a mantener informaci\u00f3n sobre el estado del mismo. Nombre del sujeto. Este campo identifica la identidad cuya clave p\u00fablica est\u00e1 certificada en el campo siguiente. El nombre debe ser \u00fanico para cada entidad certificada por una CA dada, aunque puede emitir m\u00e1s de un certificado con el mismo nombre si es para la misma entidad. Informaci\u00f3n de clave p\u00fablica del sujeto. Este campo contiene la clave p\u00fablica, sus par\u00e1metros y el identificador del algoritmo con el que se emplea la clave. Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported Usted es libre de: | < style=\"width:0.52083in;height:0.52083in\" alt=\"share\" /> | Compartir - copiar, distribuir, ejecutar y comunicar p\u00fablicamente la obra | |------------|------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"remix\" /> | hacer obras derivadas | Bajo las condiciones siguientes: | < style=\"width:0.52083in;height:0.52083in\" alt=\"by\" /> | Atribuci\u00f3n \u2014 Debe reconocer los cr\u00e9ditos de la obra de la manera especificada por el autor o el licenciante (pero no de una manera que sugiera que tiene su apoyo o que apoyan el uso que hace de su obra). | |------------|------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"nc\" /> | NoComercial \u2014 No puede utilizar esta obra para fines comerciales. | | < style=\"width:0.52083in;height:0.52083in\" alt=\"sa\" /> | Compartir bajo la Misma Licencia \u2014 Si altera o transforma esta obra, o genera una obra derivada, s\u00f3lo puede distribuir la obra generada bajo una licencia id\u00e9ntica a \u00e9sta. | Entendiendo que: Renuncia \u2014 Alguna de estas condiciones puede no aplicarse si se obtiene el permiso del titular de los derechos de autor Dominio P\u00fablico \u2014 Cuando la obra o alguno de sus elementos se hallen en el dominio p\u00fablico seg\u00fan la ley vigente aplicable, esta situaci\u00f3n no quedar\u00e1 afectada por la licencia. Otros derechos \u2014 Los derechos siguientes no quedan afectados por la licencia de ninguna manera: Los derechos derivados de usos leg\u00edtimos u otras limitaciones reconocidas por ley no se ven afectados por lo anterior. Los derechos morales del auto; Derechos que pueden ostentar otras personas sobre la propia obra o su uso, como por ejemplo derechos de imagen o de privacidad. Aviso \u2014 Al reutilizar o distribuir la obra, tiene que dejar muy en claro los t\u00e9rminos de la licencia de esta obra. La mejor forma de hacerlo es enlazar a esta p\u00e1gina. Licencia LA OBRA O LA PRESTACI\u00d3N (SEG\u00daN SE DEFINEN M\u00c1S ADELANTE) SE PROPORCIONA BAJO LOS T\u00c9RMINOS DE ESTA LICENCIA P\u00daBLICA DE CREATIVE COMMONS (CCPL O LICENCIA). LA OBRA O LA PRESTACI\u00d3N SE ENCUENTRA PROTEGIDA POR LA LEY ESPA\u00d1OLA DE PROPIEDAD INTELECTUAL Y/O CUALESQUIERA OTRAS NORMAS QUE RESULTEN DE APLICACI\u00d3N. QUEDA PROHIBIDO CUALQUIER USO DE LA OBRA O PRESTACI\u00d3N DIFERENTE A LO AUTORIZADO BAJO ESTA LICENCIA O LO DISPUESTO EN LA LEY DE PROPIEDAD INTELECTUAL. MEDIANTE EL EJERCICIO DE CUALQUIER DERECHO SOBRE LA OBRA O LA PRESTACI\u00d3N, USTED ACEPTA Y CONSIENTE LAS LIMITACIONES Y OBLIGACIONES DE ESTA LICENCIA, SIN PERJUICIO DE LA NECESIDAD DE CONSENTIMIENTO EXPRESO EN CASO DE VIOLACI\u00d3N PREVIA DE LOS T\u00c9RMINOS DE LA MISMA. EL LICENCIADOR LE CONCEDE LOS DERECHOS CONTENIDOS EN ESTA LICENCIA, SIEMPRE QUE USTED ACEPTE LOS PRESENTES T\u00c9RMINOS Y CONDICIONES. 1. Definiciones La obra es la creaci\u00f3n literaria, art\u00edstica o cient\u00edfica ofrecida bajo los t\u00e9rminos de esta licencia. En esta licencia se considera una prestaci\u00f3n cualquier interpretaci\u00f3n, ejecuci\u00f3n, fonograma, grabaci\u00f3n audiovisual, emisi\u00f3n o transmisi\u00f3n, mera fotograf\u00eda u otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente aplicable. La aplicaci\u00f3n de esta licencia a una colecci\u00f3n (definida m\u00e1s adelante) afectar\u00e1 \u00fanicamente a su estructura en cuanto forma de expresi\u00f3n de la selecci\u00f3n o disposici\u00f3n de sus contenidos, no siendo extensiva a \u00e9stos. En este caso la colecci\u00f3n tendr\u00e1 la consideraci\u00f3n de obra a efectos de esta licencia. El titular originario es: En el caso de una obra literaria, art\u00edstica o cient\u00edfica, la persona natural o grupo de personas que cre\u00f3 la obra. En el caso de una obra colectiva, la persona que la edite y divulgue bajo su nombre, salvo pacto contrario. En el caso de una interpretaci\u00f3n o ejecuci\u00f3n, el actor, cantante, m\u00fasico, o cualquier otra persona que represente, cante, lea, recite, interprete o ejecute en cualquier forma una obra. En el caso de un fonograma, el productor fonogr\u00e1fico, es decir, la persona natural o jur\u00eddica bajo cuya iniciativa y responsabilidad se realiza por primera vez una fijaci\u00f3n exclusivamente sonora de la ejecuci\u00f3n de una obra o de otros sonidos. En el caso de una grabaci\u00f3n audiovisual, el productor de la grabaci\u00f3n, es decir, la persona natural o jur\u00eddica que tenga la iniciativa y asuma la responsabilidad de las fijaciones de un plano o secuencia de im\u00e1genes, con o sin sonido. En el caso de una emisi\u00f3n o una transmisi\u00f3n, la entidad de radiodifusi\u00f3n. En el caso de una mera fotograf\u00eda, aquella persona que la haya realizado. En el caso de otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente, la persona que \u00e9sta se\u00f1ale. Se considerar\u00e1n obras derivadas aquellas obras creadas a partir de la licenciada, como por ejemplo: las traducciones y adaptaciones; las revisiones, actualizaciones y anotaciones; los compendios, res\u00famenes y extractos; los arreglos musicales y, en general, cualesquiera transformaciones de una obra literaria, art\u00edstica o cient\u00edfica. Para evitar la duda, si la obra consiste en una composici\u00f3n musical o grabaci\u00f3n de sonidos, la sincronizaci\u00f3n temporal de la obra con una imagen en movimiento (synching) ser\u00e1 considerada como una obra derivada a efectos de esta licencia. Tendr\u00e1n la consideraci\u00f3n de colecciones la recopilaci\u00f3n de obras ajenas, de datos o de otros elementos independientes como las antolog\u00edas y las bases de datos que por la selecci\u00f3n o disposici\u00f3n de sus contenidos constituyan creaciones intelectuales. La mera incorporaci\u00f3n de una obra en una colecci\u00f3n no dar\u00e1 lugar a una derivada a efectos de esta licencia. El licenciador es la persona o la entidad que ofrece la obra o prestaci\u00f3n bajo los t\u00e9rminos de esta licencia y le concede los derechos de explotaci\u00f3n de la misma conforme a lo dispuesto en ella. Usted es la persona o la entidad que ejercita los derechos concedidos mediante esta licencia y que no ha violado previamente los t\u00e9rminos de la misma con respecto a la obra o la prestaci\u00f3n, o que ha recibido el permiso expreso del licenciador de ejercitar los derechos concedidos mediante esta licencia a pesar de una violaci\u00f3n anterior. La transformaci\u00f3n de una obra comprende su traducci\u00f3n, adaptaci\u00f3n y cualquier otra modificaci\u00f3n en su forma de la que se derive una obra diferente. La creaci\u00f3n resultante de la transformaci\u00f3n de una obra tendr\u00e1 la consideraci\u00f3n de obra derivada. Se entiende por reproducci\u00f3n la fijaci\u00f3n directa o indirecta, provisional o permanente, por cualquier medio y en cualquier forma, de toda la obra o la prestaci\u00f3n o de parte de ella, que permita su comunicaci\u00f3n o la obtenci\u00f3n de copias. Se entiende por distribuci\u00f3n la puesta a disposici\u00f3n del p\u00fablico del original o de las copias de la obra o la prestaci\u00f3n, en un soporte tangible, mediante su venta, alquiler, pr\u00e9stamo o de cualquier otra forma. Se entiende por comunicaci\u00f3n p\u00fablica todo acto por el cual una pluralidad de personas, que no pertenezcan al \u00e1mbito dom\u00e9stico de quien la lleva a cabo, pueda tener acceso a la obra o la prestaci\u00f3n sin previa distribuci\u00f3n de ejemplares a cada una de ellas. Se considera comunicaci\u00f3n p\u00fablica la puesta a disposici\u00f3n del p\u00fablico de obras o prestaciones por procedimientos al\u00e1mbricos o inal\u00e1mbricos, de tal forma que cualquier persona pueda acceder a ellas desde el lugar y en el momento que elija. La explotaci\u00f3n de la obra o la prestaci\u00f3n comprende la reproducci\u00f3n, la distribuci\u00f3n, la comunicaci\u00f3n p\u00fablica y, en su caso, la transformaci\u00f3n. 2. L\u00edmites de los derechos. Nada en esta licencia pretende reducir o restringir cualesquiera l\u00edmites legales de los derechos exclusivos del titular de los derechos de propiedad intelectual de acuerdo con la Ley de propiedad intelectual o cualesquiera otras leyes aplicables, ya sean derivados de usos leg\u00edtimos, tales como la copia privada o la cita, u otras limitaciones como la resultante de la primera venta de ejemplares (agotamiento). 3. Concesi\u00f3n de licencia. Conforme a los t\u00e9rminos y a las condiciones de esta licencia, el licenciador concede, por el plazo de protecci\u00f3n de los derechos de propiedad intelectual y a t\u00edtulo gratuito, una licencia de \u00e1mbito mundial no exclusiva que incluye los derechos siguientes: Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n. Derecho a incorporar la obra o la prestaci\u00f3n en una o m\u00e1s colecciones. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n l\u00edcitamente incorporada en una colecci\u00f3n. Derecho de transformaci\u00f3n de la obra para crear una obra derivada siempre y cuando se incluya en \u00e9sta una indicaci\u00f3n de la transformaci\u00f3n o modificaci\u00f3n efectuada. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de obras derivadas creadas a partir de la obra licenciada. Derecho a extraer y reutilizar la obra o la prestaci\u00f3n de una base de datos. Para evitar cualquier duda, el titular originario: Conserva el derecho a percibir las remuneraciones o compensaciones previstas por actos de explotaci\u00f3n de la obra o prestaci\u00f3n, calificadas por la ley como irrenunciables e inalienables y sujetas a gesti\u00f3n colectiva obligatoria. Renuncia al derecho exclusivo a percibir, tanto individualmente como mediante una entidad de gesti\u00f3n colectiva de derechos, cualquier remuneraci\u00f3n derivada de actos de explotaci\u00f3n de la obra o prestaci\u00f3n que usted realice. Estos derechos se pueden ejercitar en todos los medios y formatos, tangibles o intangibles, conocidos en el momento de la concesi\u00f3n de esta licencia. Los derechos mencionados incluyen el derecho a efectuar las modificaciones que sean precisas t\u00e9cnicamente para el ejercicio de los derechos en otros medios y formatos. Todos los derechos no concedidos expresamente por el licenciador quedan reservados, incluyendo, a t\u00edtulo enunciativo pero no limitativo, los derechos morales irrenunciables reconocidos por la ley aplicable. En la medida en que el licenciador ostente derechos exclusivos previstos por la ley nacional vigente que implementa la directiva europea en materia de derecho sui generis sobre bases de datos, renuncia expresamente a dichos derechos exclusivos. 4. Restricciones. La concesi\u00f3n de derechos que supone esta licencia se encuentra sujeta y limitada a las restricciones siguientes: Usted puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n solamente bajo los t\u00e9rminos de esta licencia y debe incluir una copia de la misma, o su Identificador Uniforme de Recurso (URI). Usted no puede ofrecer o imponer ninguna condici\u00f3n sobre la obra o prestaci\u00f3n que altere o restrinja los t\u00e9rminos de esta licencia o el ejercicio de sus derechos por parte de los concesionarios de la misma. Usted no puede sublicenciar la obra o prestaci\u00f3n. Usted debe mantener intactos todos los avisos que se refieran a esta licencia y a la ausencia de garant\u00edas. Usted no puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n con medidas tecnol\u00f3gicas que controlen el acceso o el uso de una manera contraria a los t\u00e9rminos de esta licencia. Esta secci\u00f3n 4.a tambi\u00e9n afecta a la obra o prestaci\u00f3n incorporada en una colecci\u00f3n, pero ello no implica que \u00e9sta en su conjunto quede autom\u00e1ticamente o deba quedar sujeta a los t\u00e9rminos de la misma. En el caso que le sea requerido, previa comunicaci\u00f3n del licenciador, si usted incorpora la obra en una colecci\u00f3n y/o crea una obra derivada, deber\u00e1 quitar cualquier cr\u00e9dito requerido en el apartado 4.b, en la medida de lo posible. Si usted reproduce, distribuye o comunica p\u00fablicamente la obra o la prestaci\u00f3n, una colecci\u00f3n que la incorpore o cualquier obra derivada, debe mantener intactos todos los avisos sobre la propiedad intelectual e indicar, de manera razonable conforme al medio o a los medios que usted est\u00e9 utilizando: El nombre del autor original, o el seud\u00f3nimo si es el caso, as\u00ed como el del titular originario, si le es facilitado. El nombre de aquellas partes (por ejemplo: instituci\u00f3n, publicaci\u00f3n, revista) que el titular originario y/o el licenciador designen para ser reconocidos en el aviso legal, las condiciones de uso, o de cualquier otra manera razonable. El t\u00edtulo de la obra o la prestaci\u00f3n si le es facilitado. El URI, si existe, que el licenciador especifique para ser vinculado a la obra o la prestaci\u00f3n, a menos que tal URI no se refiera al aviso legal o a la informaci\u00f3n sobre la licencia de la obra o la prestaci\u00f3n. En el caso de una obra derivada, un aviso que identifique la transformaci\u00f3n de la obra en la obra derivada (p. ej., \"traducci\u00f3n castellana de la obra de Autor Original,\" o \"gui\u00f3n basado en obra original de Autor Original\"). Este reconocimiento debe hacerse de manera razonable. En el caso de una obra derivada o incorporaci\u00f3n en una colecci\u00f3n estos cr\u00e9ditos deber\u00e1n aparecer como m\u00ednimo en el mismo lugar donde se hallen los correspondientes a otros autores o titulares y de forma comparable a los mismos. Para evitar la duda, los cr\u00e9ditos requeridos en esta secci\u00f3n s\u00f3lo ser\u00e1n utilizados a efectos de atribuci\u00f3n de la obra o la prestaci\u00f3n en la manera especificada anteriormente. Sin un permiso previo por escrito, usted no puede afirmar ni dar a entender impl\u00edcitamente ni expl\u00edcitamente ninguna conexi\u00f3n, patrocinio o aprobaci\u00f3n por parte del titular originario, el licenciador y/o las partes reconocidas hacia usted o hacia el uso que hace de la obra o la prestaci\u00f3n. Para evitar cualquier duda, debe hacerse notar que las restricciones anteriores (p\u00e1rrafos 4.a y 4.b) no son de aplicaci\u00f3n a aquellas partes de la obra o la prestaci\u00f3n objeto de esta licencia que \u00fanicamente puedan ser protegidas mediante el derecho sui generis sobre bases de datos recogido por la ley nacional vigente implementando la directiva europea de bases de datos 5. Exoneraci\u00f3n de responsabilidad A MENOS QUE SE ACUERDE MUTUAMENTE ENTRE LAS PARTES, EL LICENCIADOR OFRECE LA OBRA O LA PRESTACI\u00d3N TAL CUAL (ON AN \"AS-IS\" BASIS) Y NO CONFIERE NINGUNA GARANT\u00cdA DE CUALQUIER TIPO RESPECTO DE LA OBRA O LA PRESTACI\u00d3N O DE LA PRESENCIA O AUSENCIA DE ERRORES QUE PUEDAN O NO SER DESCUBIERTOS. ALGUNAS JURISDICCIONES NO PERMITEN LA EXCLUSI\u00d3N DE TALES GARANT\u00cdAS, POR LO QUE TAL EXCLUSI\u00d3N PUEDE NO SER DE APLICACI\u00d3N A USTED. 6. Limitaci\u00f3n de responsabilidad. SALVO QUE LO DISPONGA EXPRESA E IMPERATIVAMENTE LA LEY APLICABLE, EN NING\u00daN CASO EL LICENCIADOR SER\u00c1 RESPONSABLE ANTE USTED POR CUALESQUIERA DA\u00d1OS RESULTANTES, GENERALES O ESPECIALES (INCLUIDO EL DA\u00d1O EMERGENTE Y EL LUCRO CESANTE), FORTUITOS O CAUSALES, DIRECTOS O INDIRECTOS, PRODUCIDOS EN CONEXI\u00d3N CON ESTA LICENCIA O EL USO DE LA OBRA O LA PRESTACI\u00d3N, INCLUSO SI EL LICENCIADOR HUBIERA SIDO INFORMADO DE LA POSIBILIDAD DE TALES DA\u00d1OS. 7. Finalizaci\u00f3n de la licencia Esta licencia y la concesi\u00f3n de los derechos que contiene terminar\u00e1n autom\u00e1ticamente en caso de cualquier incumplimiento de los t\u00e9rminos de la misma. Las personas o entidades que hayan recibido de usted obras derivadas o colecciones bajo esta licencia, sin embargo, no ver\u00e1n sus licencias finalizadas, siempre que tales personas o entidades se mantengan en el cumplimiento \u00edntegro de esta licencia. Las secciones 1, 2, 5, 6, 7 y 8 permanecer\u00e1n vigentes pese a cualquier finalizaci\u00f3n de esta licencia. Conforme a las condiciones y t\u00e9rminos anteriores, la concesi\u00f3n de derechos de esta licencia es vigente por todo el plazo de protecci\u00f3n de los derechos de propiedad intelectual seg\u00fan la ley aplicable. A pesar de lo anterior, el licenciador se reserva el derecho a divulgar o publicar la obra o la prestaci\u00f3n en condiciones distintas a las presentes, o de retirar la obra o la prestaci\u00f3n en cualquier momento. No obstante, ello no supondr\u00e1 dar por concluida esta licencia (o cualquier otra licencia que haya sido concedida, o sea necesario ser concedida, bajo los t\u00e9rminos de esta licencia), que continuar\u00e1 vigente y con efectos completos a no ser que haya finalizado conforme a lo establecido anteriormente, sin perjuicio del derecho moral de arrepentimiento en los t\u00e9rminos reconocidos por la ley de propiedad intelectual aplicable. 8. Miscel\u00e1nea Cada vez que usted realice cualquier tipo de explotaci\u00f3n de la obra o la prestaci\u00f3n, o de una colecci\u00f3n que la incorpore, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra o la prestaci\u00f3n en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Cada vez que usted realice cualquier tipo de explotaci\u00f3n de una obra derivada, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra objeto de esta licencia en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Si alguna disposici\u00f3n de esta licencia resulta inv\u00e1lida o inaplicable seg\u00fan la Ley vigente, ello no afectar\u00e1 la validez o aplicabilidad del resto de los t\u00e9rminos de esta licencia y, sin ninguna acci\u00f3n adicional por cualquiera las partes de este acuerdo, tal disposici\u00f3n se entender\u00e1 reformada en lo estrictamente necesario para hacer que tal disposici\u00f3n sea v\u00e1lida y ejecutiva. No se entender\u00e1 que existe renuncia respecto de alg\u00fan t\u00e9rmino o disposici\u00f3n de esta licencia, ni que se consiente violaci\u00f3n alguna de la misma, a menos que tal renuncia o consentimiento figure por escrito y lleve la firma de la parte que renuncie o consienta. Esta licencia constituye el acuerdo pleno entre las partes con respecto a la obra o la prestaci\u00f3n objeto de la licencia. No caben interpretaciones, acuerdos o condiciones con respecto a la obra o la prestaci\u00f3n que no se encuentren expresamente especificados en la presente licencia. El licenciador no estar\u00e1 obligado por ninguna disposici\u00f3n complementaria que pueda aparecer en cualquier comunicaci\u00f3n que le haga llegar usted. Esta licencia no se puede modificar sin el mutuo acuerdo por escrito entre el licenciador y usted.","title":"CF guia uso"},{"location":"markdown_strict/CF_guia-uso/#introduccion","text":"El Cliente de Firma es una herramienta de Firma Electr\u00f3nica que funciona en forma de Applet de Java integrado en una p\u00e1gina Web mediante JavaScript. El Cliente hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados (keystore) del navegador web (Internet Explorer, Mozilla, Firefox) o el sistema operativo as\u00ed como de los que est\u00e9n en dispositivos (tarjetas inteligentes, dispositivos USB) configurados en el mismo (el caso de los DNI-e). El Cliente de Firma, como su nombre indica, es una aplicaci\u00f3n que se ejecuta en cliente (en el ordenador del usuario, no en el servidor Web). Esto es as\u00ed para evitar que la clave privada asociada a un certificado tenga que \u201csalir\u201d del contenedor del usuario (tarjeta, dispositivo USB o navegador) ubicado en su PC. De hecho, nunca llega a salir del navegador, el Cliente le env\u00eda los datos a firmar y \u00e9ste los devuelve firmados. El Cliente de Firma contiene las interfaces y componentes web necesarios para la realizaci\u00f3n de los siguientes procesos (adem\u00e1s de otros auxiliares como c\u00e1lculos de hash, lectura de ficheros, etc\u2026): Firma de formularios Web. Firma de datos y ficheros. Multifirma masiva de datos y ficheros. Cofirma (CoSignature) Multifirma al mismo nivel. Contrafirma (CounterSignature) Multifirma en cascada. Como complemento al cliente de firma, se encuentra un cliente de cifrado que nos permite realizar las funciones de encriptaci\u00f3n y desencriptaci\u00f3n de datos atendiendo a diferentes algoritmos y configuraciones. Adem\u00e1s permite la generaci\u00f3n de sobres digitales.","title":"Introducci\u00f3n"},{"location":"markdown_strict/CF_guia-uso/#objetivos","text":"El objetivo del presente documento es detallar un posible uso t\u00edpico del Cliente @firma dentro de una aplicaci\u00f3n Web, tanto desde un punto de vista del entorno de ejecuci\u00f3n como desde el directo por parte del usuario.","title":"Objetivos"},{"location":"markdown_strict/CF_guia-uso/#requisitos-minimos","text":"Puede consultar matrices completas de compatibilidad, requisitos m\u00ednimos y otras informaci\u00f3n de utilidad respecto a entorno operativo en el manual del integrador del Cliente @firma.","title":"Requisitos M\u00ednimos"},{"location":"markdown_strict/CF_guia-uso/#guia-de-uso","text":"El componente de firma es una aplicaci\u00f3n cliente de Firma Electr\u00f3nica que se ejecuta en el PC del usuario. Est\u00e1 basado en Applets Java, por lo que es necesario tener instalada la m\u00e1quina virtual de Java, que ser\u00e1 el entorno donde se ejecutar\u00e1 dicha aplicaci\u00f3n. B\u00e1sicamente, el componente recibe datos y los devuelve firmados, utilizando para ello los certificados instalados en el almac\u00e9n de certificados (keystore) del navegador donde se est\u00e9 ejecutando en ese momento. La raz\u00f3n por la que se ejecuta en el cliente es porque la codificaci\u00f3n de la firma electr\u00f3nica se efect\u00faa en el ordenador del usuario, utilizando la clave privada del certificado seleccionado, que reside en su PC. Si su certificado reside en una tarjeta inteligente (DNIe) o tokenUSB, estos son cargados autom\u00e1ticamente en el almac\u00e9n de certificados a trav\u00e9s de los controladores (drivers) de los dispositivos, por lo que ser\u00e1n accesibles desde el cliente de firma.","title":"Gu\u00eda de Uso."},{"location":"markdown_strict/CF_guia-uso/#instalacion","text":"Durante la carga del Cliente se comprueban las dependencias en cuanto a entorno operativo del Cliente @firma. Y en caso de detectarse alguna necesidad se procede a su instalaci\u00f3n (consulte el Manual del Integrador del Cliente @firma para m\u00e1s informaci\u00f3n). En estos casos: 1 \u2013 Se informa del inicio de la instalaci\u00f3n del Cliente de Firma de @firma. < 2 \u2013 El proceso de instalaci\u00f3n muestra el acuerdo de licencia, informando de las Condiciones de Uso del componente, las cuales deber\u00e1n ser aceptadas para continuar con la instalaci\u00f3n. < 3 \u2013 Se notifica de la finalizaci\u00f3n de la instalaci\u00f3n y se recomienda reiniciar los navegadores. < Una vez cargado, si usamos el DNI-e, el navegador nos mostrar\u00e1 la siguiente ventana: < < En la cual deberemos introducir nuestro PIN y pulsar sobre el bot\u00f3n \u201cAceptar\u201d. En la siguiente ventana, el navegador nos mostrar\u00e1 el listado de certificados instalados en el navegador, seleccionaremos el certificado con el que nos queramos identificar, en el caso del DNIe el listado como \u201c Apellidos, Nombre (AUTENTICACI\u00d3N) \u201d y pulsaremos sobre el bot\u00f3n \u201c Aceptar \u201d < Es posible que el navegador nos vuelva a pedir introducir el PIN del DNIe, una vez hecho pulsaremos \u201cAceptar\u201d y tras el sistema realizar las comprobaciones pertinentes habremos accedido al aplicativo.","title":"Instalaci\u00f3n"},{"location":"markdown_strict/CF_guia-uso/#desinstalacion","text":"No existe un mecanismo autom\u00e1tico para la desinstalaci\u00f3n de las dependencias del Cliente ya que estas no pueden eliminarse durante la ejecuci\u00f3n de la m\u00e1quina virtual Java. No obstante, es posible realizar una desinstalaci\u00f3n manual de los componentes del Cliente. Para ello es necesario eliminar los siguientes ficheros del directorio ENDORSED de su entorno de ejecuci\u00f3n de Java (JRE): serializer-2.7.1.jar / serializer.jar xalan-2.7.1.jar / xalan.jar xercesImpl-2.9.1.jar / xerces.jar xml-apis-1.3.03.jar / xml-apis.jar afirma_5_java_5.jar Para determinar la situaci\u00f3n del directorio ENDORSED de su RE consulte la documentaci\u00f3n del fabricante: http://docs.oracle.com/javase/6/docs/technotes/guides/standards/ Usualmente, suele estar dentro de un subdirectorio del directorio de bibliotecas del JAVA_HOME: %JAVA_HOME%\\lib\\endorsed (Windows) $JAVA_HOME/lib/endorsed (Linux y Mac OS X)","title":"Desinstalaci\u00f3n"},{"location":"markdown_strict/CF_guia-uso/#instalacion-de-certificados","text":"Para el uso del componente de firma, es necesario disponer de un certificado electr\u00f3nico, el cual puede encontrarse almacenado: En el Navegador . En el almac\u00e9n de certificados del navegador dentro de la pesta\u00f1a \"personal\" aparecen los que poseen clave privada y dentro de la pesta\u00f1a \"otras personas\" aparecen los de clave p\u00fablica. Tarjeta inteligente . El DNI electr\u00f3nico es un dispositivo seguro de creaci\u00f3n de firma conforme a la norma CWA 14169. Esta norma est\u00e1 reconocida por la Uni\u00f3n Europea y se considera que la firma electr\u00f3nica realizada con el DNI electr\u00f3nico es equivalente a una firma manuscrita a efectos legales. Estas firmas son las m\u00e1s seguras porque la clave privada nunca sale de la tarjeta inteligente, por lo que no puede ser copiada por terceros. Es importante recordar, que cuando se instala un certificado, el mismo queda instalado \u00fanicamente para el navegador o sistema en el que se realice dicha instalaci\u00f3n, siendo necesario realizar la misma acci\u00f3n si se quisiera disponer del mismo certificado en otro navegador que utilice un almac\u00e9n de certificados distinto. A continuaci\u00f3n se detalla los diferentes pasos a seguir para la instalaci\u00f3n del certificado seg\u00fan el lugar de almacenamiento de los mismos:","title":"Instalaci\u00f3n de Certificados."},{"location":"markdown_strict/CF_guia-uso/#instalacion-de-certificados-software-en-internet-explorer","text":"En primer lugar, en el men\u00fa superior del navegador, seleccionamos la opci\u00f3n \u201c Herramientas \u201d y a continuaci\u00f3n hacemos clic sobre la opci\u00f3n \u201c Opciones de Internet \u201d. < A continuaci\u00f3n seleccionamos la opci\u00f3n \u201cCertificados\u201d, dentro de la pesta\u00f1a \u201c Contenido \u201d < Continuamos seleccionando la opci\u00f3n \u201c Importar \u201d, se nos abrir\u00e1 el \u201c Asistente para importaci\u00f3n de certificados \u201d. < < Pulsaremos \u201c Siguiente \u201d en la primera ventana del asistente, tras lo cual, nos pedir\u00e1 que seleccionemos la ubicaci\u00f3n del certificado que deseamos instalar, para lo cual, pulsaremos el bot\u00f3n \u201c Examinar...\u201d. Se nos abrir\u00e1 una ventana en la cual tendremos que buscar el certificado que deseamos instalar, una vez encontrado, seleccionaremos el certificado y pulsaremos sobre el bot\u00f3n \u201c Abrir \u201d. < < Tras seleccionar el bot\u00f3n \u201c Siguiente \u201d, en la siguiente ventana el asistente nos pedir\u00e1 que introduzcamos la contrase\u00f1a usada en el cifrado del certificado, introducimos la clave y pulsamos sobre el bot\u00f3n \u201c Siguiente \u201d < En la siguiente ventana, el asistente nos pedir\u00e1 que seleccionemos el almac\u00e9n en el cual se guardar\u00e1 el certificado, seleccionaremos la opci\u00f3n \u201cColocar todos los certificados en el siguiente almac\u00e9n\u201d. Pulsaremos sobre el bot\u00f3n \u201c Examinar \u201d, seleccionaremos la carpeta \u201c Personal \u201d y pulsaremos el bot\u00f3n \u201c Siguiente \u201d. < < Tras este paso, el asistente nos informar\u00e1 de que el certificado ha quedado importado correctamente.","title":"Instalaci\u00f3n de certificados software en Internet Explorer"},{"location":"markdown_strict/CF_guia-uso/#instalacion-de-certificados-software-en-mozilla-firefox","text":"En primer lugar, en el men\u00fa superior del navegador, seleccionamos la opci\u00f3n \u201c Herramientas \u201d y a continuaci\u00f3n hacemos clic sobre la opci\u00f3n \u201c Opciones \u201d. < A continuaci\u00f3n seleccionamos la pesta\u00f1a \u201c Avanzado \u201d del men\u00fa superior de la nueva ventana, tras lo cual, seleccionamos la subpesta\u00f1a \u201c Cifrado \u201d, en la que seleccionaremos la opci\u00f3n \u201c Ver certificados \u201d < Continuamos seleccionando la opci\u00f3n \u201c Importar \u201d, se nos abrir\u00e1 una ventana en la cual tendremos que buscar el certificado que deseamos instalar, una vez encontrado, seleccionaremos el certificado y pulsaremos sobre el bot\u00f3n \u201c Abrir \u201d. < < El navegador nos pedir\u00e1 que introduzcamos la contrase\u00f1a usada en el cifrado del certificado, introducimos la clave y pulsamos sobre el bot\u00f3n \u201c Aceptar \u201d. < Una vez realizado este paso, el sistema nos informar\u00e1 con un mensaje que el certificado ha quedado instalado de forma satisfactoria.","title":"Instalaci\u00f3n de certificados software en Mozilla Firefox"},{"location":"markdown_strict/CF_guia-uso/#instalacion-de-certificados-software-en-google-chrome-y-apple-safari","text":"Los navegadores Web Google Chrome y Apple Safari no disponen de un almac\u00e9n de certificados propio, en su lugar utilizan el almac\u00e9n de certificados del sistema operativo que utilice el usuario. Esto es: En Microsoft Windows : El almac\u00e9n de certificados que Internet Explorer. En Linux : El almac\u00e9n de certificados de Mozilla Firefox. En Solaris / OpenSolaris : El almac\u00e9n de certificados de Mozilla Firefox. En Mac OS X : El almac\u00e9n de certificados del sistema operativo. Si nuestro sistema operativo es Microsoft Windows deberemos seguir los pasos descritos en el apartado \u201cInstalaci\u00f3n de certificados software en Internet Explorer\u201c. Si nuestro sistema operativo es Linux o Solaris se importar\u00e1n los certificados a trav\u00e9s de Mozilla Firefox tal como se describe en el apartado \u201cInstalaci\u00f3n de certificados software en Mozilla Firefox\u201d. Si nuestro sistema operativo es Mac OS X deber\u00e1n instalarse los certificados tal como se describe en el apartado \u201cInstalaci\u00f3n de certificados software en el almac\u00e9n de Mac OS X\u201d.","title":"Instalaci\u00f3n de certificados software en Google Chrome y Apple Safari"},{"location":"markdown_strict/CF_guia-uso/#instalacion-de-certificados-software-en-el-almacen-de-mac-os-x","text":"Para instalar un certificado en Mac OS X s\u00f3lo deberemos hacer doble clic sobre el certificado para solicitar su instalaci\u00f3n y seleccionar el almac\u00e9n de certificados del sistema. Seguidamente, insertaremos la contrase\u00f1a de usuario del sistema para finalizar la importaci\u00f3n. < < Aunque este proceso de instalaci\u00f3n de certificados es el com\u00fan en Mac OS X, pueden existir cambios entre cada una de sus versiones. Para conocer los detalles de cada versi\u00f3n acuda a la p\u00e1gina Web de soporte de su sistema operativo. Para Mac OS X 10.6 es: http://docs.info.apple.com/article.html?path=Mac/10.6/es/9082.html","title":"Instalaci\u00f3n de certificados software en el almac\u00e9n de Mac OS X"},{"location":"markdown_strict/CF_guia-uso/#uso-de-certificados-desde-tarjetas-inteligentes","text":"","title":"Uso de certificados desde tarjetas inteligentes"},{"location":"markdown_strict/CF_guia-uso/#dnie-dni-electronico","text":"Para la utilizaci\u00f3n del DNI electr\u00f3nico es necesario contar determinados elementos hardware y software que nos van a permitir el acceso al chip de la tarjeta y, por tanto, la utilizaci\u00f3n de los certificados contenidos en \u00e9l. a) Elementos hardware El DNI electr\u00f3nico requiere el siguiente equipamiento f\u00edsico: Un Ordenador personal (Intel -a partir de Pentium III- o tecnolog\u00eda similar). Un lector de tarjetas inteligentes que cumpla el est\u00e1ndar ISO 7816 . Existen distintas implementaciones, bien integrados en el teclado, bien externos (conectados v\u00eda USB) o bien a trav\u00e9s de una interfaz PCMCIA. Para elegir un lector que sean compatible con el DNI electr\u00f3nico verifique que, al menos, Cumpla el est\u00e1ndar ISO 7816 (1, 2 y 3). Soporta tarjetas as\u00edncronas basadas en protocolos T=0 (y T=1). Soporta velocidades de comunicaci\u00f3n m\u00ednimas de 9.600 bps. Soporta los est\u00e1ndares: API PC/SC (Personal Computer/Smart Card) CSP (Cryptographic Service Provider, Microsoft) API PKCS#11 b) Elementos software ** Sistemas operativos** El DNI electr\u00f3nico puede operar en diversos entornos: Microsoft Windows Linux Oracle Solaris Apple OS X ** Navegadores** El DNI electr\u00f3nico es compatible con todos los navegadores: Microsoft Internet Explorer (versi\u00f3n 7.0 o superior) Mozilla Firefox Google Chrome Controladores / M\u00f3dulos criptogr\u00e1ficos Para poder interaccionar adecuadamente con las tarjetas criptogr\u00e1ficas en general y con el DNI electr\u00f3nico en particular, el equipo ha de tener instalados unas \"piezas\" de software denominadas m\u00f3dulos criptogr\u00e1ficos. En un entorno Microsoft Windows , el equipo debe tener instalado un servicio que se denomina \"Cryptographic Service Provider\" (CSP). En los entornos UNIX / Linux o MAC podemos utilizar el DNI electr\u00f3nico a trav\u00e9s de un m\u00f3dulo criptogr\u00e1fico denominado PKCS#11. Tanto el CSP como el PKCS#11 espec\u00edfico para el DNI electr\u00f3nico podr\u00e1n obtenerse en el \u00c1rea de Descargas de la web del DNI-e, accediendo a la siguiente URL: http://www.dnielectronico.es/descargas/index.html , o en el sitio Web de OpenDNIe (recomendado para sistemas Linux y Solaris): http://opendnie.cenatic.es/ Opcionalmente puede acceder a https://zonatic.usatudni.es/aplicaciones/asistente-dnie , para la descarga de un instalador sencillo y accesible del controlador. Si optamos por el \u00e1rea de descargas de www.dnielectronico.es deberemos seleccionar la primera opci\u00f3n si tenemos un Sistema Operativo Windows o la segunda en caso de tener otro Sistema Operativo. < En la siguiente pantalla seleccionaremos la opci\u00f3n \u201c Sistemas Windows. Compatible con Vista\u201d, tras lo cual se nos descargara el software. Seleccionaremos \u201c Guardar \u201d y elegiremos la carpeta deseada donde queremos que sea descargado. < < Una vez descargado el fichero con la nomenclatura \u201cDNIe_vx_j_y.zip\u201d lo descomprimiremos y accederemos al fichero \u201cDNIe_vx_j_y.exe\u201d. El software se instalar\u00e1 autom\u00e1ticamente y se le pedir\u00e1 reiniciar el equipo. < < Es posible, dependiendo de la configuraci\u00f3n de su navegador, que nos aparezca la siguiente ventana: < Se nos solicitar\u00e1, por tanto que instalemos en el certificado ra\u00edz del DNIe, para ello deberemos seleccionar sobre \u201c Instalar certificado...\u201d < Pulsaremos sobre el bot\u00f3n \u201c Siguiente \u201d < Seleccionamos la opci\u00f3n \u201cColocar todos los certificados en el siguiente almac\u00e9n\u201d y pulsamos sobre el bot\u00f3n \u201c Examinar...\u201d < Seleccionaremos el almac\u00e9n de certificados \u201cEntidades Emisoras Ra\u00edz de Confianza\u201d En la siguiente ventana seleccionaremos la opci\u00f3n \u201cFinalizar\u201d < Si nos aparece la siguiente advertencia, seleccionaremos \u201cSi\u201d para permitir que la autoridad ra\u00edz del DNIe, se instale en el navegador y se pueda as\u00ed establecer la cadena de confianza de certificaci\u00f3n. Tras lo cual, el software quedar\u00e1 instalado y listo para su uso. Adicionalmente, para operar con un lector de tarjetas inteligentes, ser\u00e1 necesario instalar un driver que, normalmente, se distribuye con el propio lector. Nota: Para hacer uso del software de cambio de PIN virtual, deber\u00e1 tener instalado en el equipo la versi\u00f3n JAVA 1.5 o superior . Para m\u00e1s informaci\u00f3n puede acudir a la p\u00e1gina http://www.dnielectronico.es o contactar con el Servicio de Atenci\u00f3n al Ciudadano en el tel\u00e9fono 900 364 463 o en el correo sac@dnielectronico.es","title":"DNIe (DNI Electr\u00f3nico)"},{"location":"markdown_strict/CF_guia-uso/#otros-certificados","text":"En el caso de hacer uso de otro certificado desde una tarjeta inteligente deber\u00e1 consultar con la entidad emisora del mismo para que le indique su forma de uso.","title":"Otros certificados"},{"location":"markdown_strict/CF_guia-uso/#resolucion-de-problemas","text":"Para la resoluci\u00f3n de problemas relacionados con el uso del Cliente @firma, consulte la Gu\u00eda de Incidencias del Cliente o el apartado 7 FAQ. de este mismo documento.","title":"Resoluci\u00f3n de Problemas"},{"location":"markdown_strict/CF_guia-uso/#glosario-de-terminos","text":"","title":"Glosario de t\u00e9rminos"},{"location":"markdown_strict/CF_guia-uso/#firma-electronica","text":"Es el conjunto de datos, en forma electr\u00f3nica, anejos a otros datos electr\u00f3nicos o asociados funcionalmente con ellos, utilizados como medio para identificar formalmente al autor o a los autores del documento que la recoge.","title":"Firma electr\u00f3nica"},{"location":"markdown_strict/CF_guia-uso/#xml-digital-signature-xmldsig","text":"Es una recomendaci\u00f3n del W3C que define una sintaxis XML para la firma digital","title":"XML Digital Signature (XMLDSig)"},{"location":"markdown_strict/CF_guia-uso/#xml-advanced-signature-xades","text":"Es un conjunto de extensiones a las recomendaciones XML-DSig haci\u00e9ndolas adecuadas para la firma electr\u00f3nica avanzada.","title":"XML Advanced Signature (XAdES)"},{"location":"markdown_strict/CF_guia-uso/#rsa","text":"Es un sistema criptogr\u00e1fico de clave p\u00fablica desarrollado en 1977. En la actualidad, RSA es el primer y m\u00e1s utilizado algoritmo de este tipo y es v\u00e1lido tanto para cifrar como para firmar digitalmente.","title":"RSA"},{"location":"markdown_strict/CF_guia-uso/#xml","text":"Es un metalenguaje extensible de etiquetas desarrollado por el World Wide Web Consortium (W3C). Es una simplificaci\u00f3n y adaptaci\u00f3n del SGML y permite definir la gram\u00e1tica de lenguajes espec\u00edficos (de la misma manera que HTML es a su vez un lenguaje definido por SGML). Por lo tanto XML no es realmente un lenguaje en particular, sino una manera de definir lenguajes para diferentes necesidades. Algunos de estos lenguajes que usan XML para su definici\u00f3n son XHTML, SVG, MathML.","title":"XML"},{"location":"markdown_strict/CF_guia-uso/#office-open-xml-ooxml","text":"Es un formato de archivo abierto y est\u00e1ndar cuyas extensiones m\u00e1s comunes son .docx, .xlsx y .pptx. Se le utiliza para representar y almacenar hojas de c\u00e1lculo, diagramas, presentaciones y documentos de texto. Un archivo Office Open XML contiene principalmente datos basados en el lenguaje de marcado XML, comprimidos en un contenedor .zip espec\u00edfico.","title":"Office Open XML (OOXML)"},{"location":"markdown_strict/CF_guia-uso/#open-document-format-odf","text":"Es un formato de fichero est\u00e1ndar para el almacenamiento de documentos ofim\u00e1ticos tales como hojas de c\u00e1lculo, memorandos, gr\u00e1ficas y presentaciones. Aunque las especificaciones fueron inicialmente elaboradas por Sun, el est\u00e1ndar fue desarrollado por el comit\u00e9 t\u00e9cnico para Open Office XML de la organizaci\u00f3n OASIS y est\u00e1 basado en un esquema XML inicialmente creado e implementado por la suite ofim\u00e1tica OpenOffice.org (ver OpenOffice.org XML).","title":"Open Document Format (ODF)"},{"location":"markdown_strict/CF_guia-uso/#zip","text":"Es un formato de almacenamiento sin p\u00e9rdida, muy utilizado para la compresi\u00f3n de datos como im\u00e1genes, programas o documentos.","title":"ZIP"},{"location":"markdown_strict/CF_guia-uso/#pdf","text":"Es un formato de almacenamiento de documentos, desarrollado por la empresa Adobe Systems. Este formato es de tipo compuesto (imagen vectorial, mapa de bits y texto).","title":"PDF"},{"location":"markdown_strict/CF_guia-uso/#sha","text":"Es un sistema de funciones hash criptogr\u00e1ficas relacionadas de la Agencia de Seguridad Nacional de los Estados Unidos y publicadas por el National Institute of Standards and Technology (NIST). El primer miembro de la familia fue publicado en 1993 es oficialmente llamado SHA. Sin embargo, hoy d\u00eda, no oficialmente se le llama SHA-0 para evitar confusiones con sus sucesores. Dos a\u00f1os m\u00e1s tarde el primer sucesor de SHA fue publicado con el nombre de SHA-1. Existen cuatro variantes m\u00e1s que se han publicado desde entonces cuyas diferencias se basan en un dise\u00f1o algo modificado y rangos de salida incrementados: SHA-224, SHA-256, SHA-384, y SHA-512 (llam\u00e1ndose SHA-2 a todos ellos).","title":"SHA"},{"location":"markdown_strict/CF_guia-uso/#pkcs","text":"Se refiere a un grupo de est\u00e1ndares de criptograf\u00eda de clave p\u00fablica concebidos y publicados por los laboratorios de RSA en California. A RSA Security se le asignaron los derechos de licenciamiento para la patente de algoritmo de clave asim\u00e9trica RSA y adquiri\u00f3 los derechos de licenciamiento para muchas otras patentes de claves.","title":"PKCS"},{"location":"markdown_strict/CF_guia-uso/#w3c","text":"Es un consorcio internacional que produce recomendaciones para la World Wide Web. Est\u00e1 dirigida por Tim Berners-Lee, el creador original de URL (Uniform Resource Locator, Localizador Uniforme de Recursos), HTTP (HyperText Transfer Protocol, Protocolo de Transferencia de HiperTexto) y HTML (Lenguaje de Marcado de HiperTexto) que son las principales tecnolog\u00edas sobre las que se basa la Web.","title":"W3C"},{"location":"markdown_strict/CF_guia-uso/#openofficeorg","text":"Es una suite ofim\u00e1tica libre (c\u00f3digo abierto y distribuci\u00f3n gratuita) que incluye herramientas como procesador de textos, hoja de c\u00e1lculo, presentaciones, herramientas para el dibujo vectorial y base de datos. Est\u00e1 disponible para varias plataformas, tales como Microsoft Windows, GNU/Linux, BSD, Solaris y Mac OS X. Soporta numerosos formatos de archivo, incluyendo como predeterminado el formato est\u00e1ndar ISO/IEC OpenDocument (ODF), entre otros formatos comunes. A febrero de 2010, OpenOffice soporta m\u00e1s de 110 idiomas.","title":"OpenOffice.org"},{"location":"markdown_strict/CF_guia-uso/#base64","text":"Es un sistema de numeraci\u00f3n posicional que usa 64 como base. Es la mayor potencia de dos que puede ser representada usando \u00fanicamente los caracteres imprimibles de ASCII. Esto ha propiciado su uso para codificaci\u00f3n de correos electr\u00f3nicos, PGP y otras aplicaciones. Todas las variantes famosas que se conocen con el nombre de Base64 usan el rango de caracteres A-Z, a-z y 0-9 en este orden para los primeros 62 d\u00edgitos, pero los s\u00edmbolos escogidos para los \u00faltimos dos d\u00edgitos var\u00edan considerablemente de unas a otras. Otros m\u00e9todos de codificaci\u00f3n como UUEncode y las \u00faltimas versiones de binhex usan un conjunto diferente de 64 caracteres para representar 6 d\u00edgitos binarios, pero \u00e9stos nunca son llamados Base64.","title":"Base64"},{"location":"markdown_strict/CF_guia-uso/#asn1","text":"Es una norma para representar datos independientemente de la m\u00e1quina que se est\u00e9 usando y sus formas de representaci\u00f3n internas. Es un protocolo de nivel de presentaci\u00f3n en el modelo OSI.","title":"ASN.1"},{"location":"markdown_strict/CF_guia-uso/#autoridad-de-certificacion-ca","text":"Es una entidad de confianza, responsable de emitir y revocar los certificados digitales o certificados, utilizados en la firma electr\u00f3nica, para lo cual se emplea la criptograf\u00eda de clave p\u00fablica. Jur\u00eddicamente es un caso particular de Prestador de Servicios de Certificaci\u00f3n.","title":"Autoridad de Certificaci\u00f3n (CA)"},{"location":"markdown_strict/CF_guia-uso/#certificado-digital","text":"Es un documento digital mediante el cual un tercero confiable (una autoridad de certificaci\u00f3n) garantiza la vinculaci\u00f3n entre la identidad de un sujeto o entidad y su clave p\u00fablica.","title":"Certificado Digital"},{"location":"markdown_strict/CF_guia-uso/#infraestructura-de-clave-publica-pki","text":"Es una combinaci\u00f3n de hardware y software, pol\u00edticas y procedimientos de seguridad que permiten la ejecuci\u00f3n con garant\u00edas de operaciones criptogr\u00e1ficas como el cifrado, la firma digital o el no repudio de transacciones electr\u00f3nicas.","title":"Infraestructura de Clave P\u00fablica (PKI)"},{"location":"markdown_strict/CF_guia-uso/#faq","text":"A continuaci\u00f3n se detallan ciertas dudas comunes que pueden surgir en el uso del Ciente @firma. Para m\u00e1s informaci\u00f3n y dudas adicionales consulte la Gu\u00eda de Incidencias del Cliente @firma. \u00bfQu\u00e9 certificados son reconocidos por la plataforma? La plataforma @firma admite certificados digitales reconocidos conforme el est\u00e1ndar ITU-T X.509 v3, emitidos por m\u00faltiples prestadores de servicios de certificaci\u00f3n. Todos los prestadores se encuentran inscritos en el registro de la Secretaria de Estado de Telecomunicaciones y para la Sociedad de Informaci\u00f3n del Ministerio de Industria, Turismo y Comercio de autoridades conforme a lo establecido en el art\u00edculo 30 de la Ley 59/2003, de 19 de diciembre, de firma electr\u00f3nica. Los prestadores reconocidos son: DNI Electr\u00f3nico Camerfirma Izenpe CATCert (Agencia Catalana de Certificaci\u00f3n) ANF AC SCR (Servicio de Certificaci\u00f3n de los Registradores) ACA ACCV (Autoridad de Certificaci\u00f3n de la Comunidad Valenciana) ANCERT (Agencia Notarial de Certificaci\u00f3n) FNMT (F\u00e1brica Nacional de Moneda y Timbre) Firmaprofesional BANESTO CA Si desea informaci\u00f3n m\u00e1s detallada sobre los certificados soportados, consulte las referencias a la \u201cPlataforma de validaci\u00f3n de firma electr\u00f3nica @firma\u201d en el Portal de la Administraci\u00f3n Electr\u00f3nica ( http://administracionelectronica.gob.es/ ). \u00bfCu\u00e1les son los tipos de certificados admitidos por las Administraciones? De acuerdo con la Ley 59/2003, de Firma Electr\u00f3nica, los tipos de certificados admitidos son: certificado de persona f\u00edsica y , certificado de persona jur\u00eddica, certificado de sello electr\u00f3nico para la actuaci\u00f3n automatizada, certificado de sede electr\u00f3nica administrativa y certificado de empleado p\u00fablico. Cada uno de los certificados emitidos conllevar\u00e1 un grado de \"confianza\", asociado a los diferentes niveles de aseguramiento bajo los que se emitan, debido a los requisitos t\u00e9cnicos y de seguridad que estos niveles llevan asociados. \u00bfQu\u00e9 informaci\u00f3n posee un certificado digital? Un certificado digital es, en realidad, una clave p\u00fablica, con cierta informaci\u00f3n adjunta, como el nombre del propietario, el periodo de validez de la clave, etc, permitiendo: La autenticaci\u00f3n del usuario. La confidencialidad del mensaje. La integridad del documento. El no repudio. Los certificados digitales s\u00f3lo son \u00fatiles si existe alguna Autoridad Certificadora ( Certification Authority o CA) que los valide, ya que si uno se certifica a s\u00ed mismo no hay ninguna garant\u00eda de que su identidad sea la que anuncia. El formato de certificados X.509 es un est\u00e1ndar del ITU-T ( International Telecommunication Union-Telecommunication Standarization Sector ) y el ISO/IEC ( International Standards Organization / International Electrotechnical Commission ). Los elementos del formato de un certificado X.509 v3 son: Versi\u00f3n. El campo de versi\u00f3n contiene el n\u00famero de versi\u00f3n del certificado codificado. N\u00famero de serie del certificado. Este campo es un entero asignado por la autoridad certificadora. Cada certificado emitido por una CA debe tener un n\u00famero de serie \u00fanico. Identificador del algoritmo de firmado. Este campo identifica el algoritmo empleado para firmar el certificado. Nombre del emisor. Este campo identifica la CA que ha firmado y emitido el certificado. Periodo de validez. Este campo indica el periodo de tiempo durante el cual el certificado es v\u00e1lido y la CA est\u00e1 obligada a mantener informaci\u00f3n sobre el estado del mismo. Nombre del sujeto. Este campo identifica la identidad cuya clave p\u00fablica est\u00e1 certificada en el campo siguiente. El nombre debe ser \u00fanico para cada entidad certificada por una CA dada, aunque puede emitir m\u00e1s de un certificado con el mismo nombre si es para la misma entidad. Informaci\u00f3n de clave p\u00fablica del sujeto. Este campo contiene la clave p\u00fablica, sus par\u00e1metros y el identificador del algoritmo con el que se emplea la clave. Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported Usted es libre de: | < style=\"width:0.52083in;height:0.52083in\" alt=\"share\" /> | Compartir - copiar, distribuir, ejecutar y comunicar p\u00fablicamente la obra | |------------|------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"remix\" /> | hacer obras derivadas | Bajo las condiciones siguientes: | < style=\"width:0.52083in;height:0.52083in\" alt=\"by\" /> | Atribuci\u00f3n \u2014 Debe reconocer los cr\u00e9ditos de la obra de la manera especificada por el autor o el licenciante (pero no de una manera que sugiera que tiene su apoyo o que apoyan el uso que hace de su obra). | |------------|------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"nc\" /> | NoComercial \u2014 No puede utilizar esta obra para fines comerciales. | | < style=\"width:0.52083in;height:0.52083in\" alt=\"sa\" /> | Compartir bajo la Misma Licencia \u2014 Si altera o transforma esta obra, o genera una obra derivada, s\u00f3lo puede distribuir la obra generada bajo una licencia id\u00e9ntica a \u00e9sta. | Entendiendo que: Renuncia \u2014 Alguna de estas condiciones puede no aplicarse si se obtiene el permiso del titular de los derechos de autor Dominio P\u00fablico \u2014 Cuando la obra o alguno de sus elementos se hallen en el dominio p\u00fablico seg\u00fan la ley vigente aplicable, esta situaci\u00f3n no quedar\u00e1 afectada por la licencia. Otros derechos \u2014 Los derechos siguientes no quedan afectados por la licencia de ninguna manera: Los derechos derivados de usos leg\u00edtimos u otras limitaciones reconocidas por ley no se ven afectados por lo anterior. Los derechos morales del auto; Derechos que pueden ostentar otras personas sobre la propia obra o su uso, como por ejemplo derechos de imagen o de privacidad. Aviso \u2014 Al reutilizar o distribuir la obra, tiene que dejar muy en claro los t\u00e9rminos de la licencia de esta obra. La mejor forma de hacerlo es enlazar a esta p\u00e1gina. Licencia LA OBRA O LA PRESTACI\u00d3N (SEG\u00daN SE DEFINEN M\u00c1S ADELANTE) SE PROPORCIONA BAJO LOS T\u00c9RMINOS DE ESTA LICENCIA P\u00daBLICA DE CREATIVE COMMONS (CCPL O LICENCIA). LA OBRA O LA PRESTACI\u00d3N SE ENCUENTRA PROTEGIDA POR LA LEY ESPA\u00d1OLA DE PROPIEDAD INTELECTUAL Y/O CUALESQUIERA OTRAS NORMAS QUE RESULTEN DE APLICACI\u00d3N. QUEDA PROHIBIDO CUALQUIER USO DE LA OBRA O PRESTACI\u00d3N DIFERENTE A LO AUTORIZADO BAJO ESTA LICENCIA O LO DISPUESTO EN LA LEY DE PROPIEDAD INTELECTUAL. MEDIANTE EL EJERCICIO DE CUALQUIER DERECHO SOBRE LA OBRA O LA PRESTACI\u00d3N, USTED ACEPTA Y CONSIENTE LAS LIMITACIONES Y OBLIGACIONES DE ESTA LICENCIA, SIN PERJUICIO DE LA NECESIDAD DE CONSENTIMIENTO EXPRESO EN CASO DE VIOLACI\u00d3N PREVIA DE LOS T\u00c9RMINOS DE LA MISMA. EL LICENCIADOR LE CONCEDE LOS DERECHOS CONTENIDOS EN ESTA LICENCIA, SIEMPRE QUE USTED ACEPTE LOS PRESENTES T\u00c9RMINOS Y CONDICIONES. 1. Definiciones La obra es la creaci\u00f3n literaria, art\u00edstica o cient\u00edfica ofrecida bajo los t\u00e9rminos de esta licencia. En esta licencia se considera una prestaci\u00f3n cualquier interpretaci\u00f3n, ejecuci\u00f3n, fonograma, grabaci\u00f3n audiovisual, emisi\u00f3n o transmisi\u00f3n, mera fotograf\u00eda u otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente aplicable. La aplicaci\u00f3n de esta licencia a una colecci\u00f3n (definida m\u00e1s adelante) afectar\u00e1 \u00fanicamente a su estructura en cuanto forma de expresi\u00f3n de la selecci\u00f3n o disposici\u00f3n de sus contenidos, no siendo extensiva a \u00e9stos. En este caso la colecci\u00f3n tendr\u00e1 la consideraci\u00f3n de obra a efectos de esta licencia. El titular originario es: En el caso de una obra literaria, art\u00edstica o cient\u00edfica, la persona natural o grupo de personas que cre\u00f3 la obra. En el caso de una obra colectiva, la persona que la edite y divulgue bajo su nombre, salvo pacto contrario. En el caso de una interpretaci\u00f3n o ejecuci\u00f3n, el actor, cantante, m\u00fasico, o cualquier otra persona que represente, cante, lea, recite, interprete o ejecute en cualquier forma una obra. En el caso de un fonograma, el productor fonogr\u00e1fico, es decir, la persona natural o jur\u00eddica bajo cuya iniciativa y responsabilidad se realiza por primera vez una fijaci\u00f3n exclusivamente sonora de la ejecuci\u00f3n de una obra o de otros sonidos. En el caso de una grabaci\u00f3n audiovisual, el productor de la grabaci\u00f3n, es decir, la persona natural o jur\u00eddica que tenga la iniciativa y asuma la responsabilidad de las fijaciones de un plano o secuencia de im\u00e1genes, con o sin sonido. En el caso de una emisi\u00f3n o una transmisi\u00f3n, la entidad de radiodifusi\u00f3n. En el caso de una mera fotograf\u00eda, aquella persona que la haya realizado. En el caso de otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente, la persona que \u00e9sta se\u00f1ale. Se considerar\u00e1n obras derivadas aquellas obras creadas a partir de la licenciada, como por ejemplo: las traducciones y adaptaciones; las revisiones, actualizaciones y anotaciones; los compendios, res\u00famenes y extractos; los arreglos musicales y, en general, cualesquiera transformaciones de una obra literaria, art\u00edstica o cient\u00edfica. Para evitar la duda, si la obra consiste en una composici\u00f3n musical o grabaci\u00f3n de sonidos, la sincronizaci\u00f3n temporal de la obra con una imagen en movimiento (synching) ser\u00e1 considerada como una obra derivada a efectos de esta licencia. Tendr\u00e1n la consideraci\u00f3n de colecciones la recopilaci\u00f3n de obras ajenas, de datos o de otros elementos independientes como las antolog\u00edas y las bases de datos que por la selecci\u00f3n o disposici\u00f3n de sus contenidos constituyan creaciones intelectuales. La mera incorporaci\u00f3n de una obra en una colecci\u00f3n no dar\u00e1 lugar a una derivada a efectos de esta licencia. El licenciador es la persona o la entidad que ofrece la obra o prestaci\u00f3n bajo los t\u00e9rminos de esta licencia y le concede los derechos de explotaci\u00f3n de la misma conforme a lo dispuesto en ella. Usted es la persona o la entidad que ejercita los derechos concedidos mediante esta licencia y que no ha violado previamente los t\u00e9rminos de la misma con respecto a la obra o la prestaci\u00f3n, o que ha recibido el permiso expreso del licenciador de ejercitar los derechos concedidos mediante esta licencia a pesar de una violaci\u00f3n anterior. La transformaci\u00f3n de una obra comprende su traducci\u00f3n, adaptaci\u00f3n y cualquier otra modificaci\u00f3n en su forma de la que se derive una obra diferente. La creaci\u00f3n resultante de la transformaci\u00f3n de una obra tendr\u00e1 la consideraci\u00f3n de obra derivada. Se entiende por reproducci\u00f3n la fijaci\u00f3n directa o indirecta, provisional o permanente, por cualquier medio y en cualquier forma, de toda la obra o la prestaci\u00f3n o de parte de ella, que permita su comunicaci\u00f3n o la obtenci\u00f3n de copias. Se entiende por distribuci\u00f3n la puesta a disposici\u00f3n del p\u00fablico del original o de las copias de la obra o la prestaci\u00f3n, en un soporte tangible, mediante su venta, alquiler, pr\u00e9stamo o de cualquier otra forma. Se entiende por comunicaci\u00f3n p\u00fablica todo acto por el cual una pluralidad de personas, que no pertenezcan al \u00e1mbito dom\u00e9stico de quien la lleva a cabo, pueda tener acceso a la obra o la prestaci\u00f3n sin previa distribuci\u00f3n de ejemplares a cada una de ellas. Se considera comunicaci\u00f3n p\u00fablica la puesta a disposici\u00f3n del p\u00fablico de obras o prestaciones por procedimientos al\u00e1mbricos o inal\u00e1mbricos, de tal forma que cualquier persona pueda acceder a ellas desde el lugar y en el momento que elija. La explotaci\u00f3n de la obra o la prestaci\u00f3n comprende la reproducci\u00f3n, la distribuci\u00f3n, la comunicaci\u00f3n p\u00fablica y, en su caso, la transformaci\u00f3n. 2. L\u00edmites de los derechos. Nada en esta licencia pretende reducir o restringir cualesquiera l\u00edmites legales de los derechos exclusivos del titular de los derechos de propiedad intelectual de acuerdo con la Ley de propiedad intelectual o cualesquiera otras leyes aplicables, ya sean derivados de usos leg\u00edtimos, tales como la copia privada o la cita, u otras limitaciones como la resultante de la primera venta de ejemplares (agotamiento). 3. Concesi\u00f3n de licencia. Conforme a los t\u00e9rminos y a las condiciones de esta licencia, el licenciador concede, por el plazo de protecci\u00f3n de los derechos de propiedad intelectual y a t\u00edtulo gratuito, una licencia de \u00e1mbito mundial no exclusiva que incluye los derechos siguientes: Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n. Derecho a incorporar la obra o la prestaci\u00f3n en una o m\u00e1s colecciones. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n l\u00edcitamente incorporada en una colecci\u00f3n. Derecho de transformaci\u00f3n de la obra para crear una obra derivada siempre y cuando se incluya en \u00e9sta una indicaci\u00f3n de la transformaci\u00f3n o modificaci\u00f3n efectuada. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de obras derivadas creadas a partir de la obra licenciada. Derecho a extraer y reutilizar la obra o la prestaci\u00f3n de una base de datos. Para evitar cualquier duda, el titular originario: Conserva el derecho a percibir las remuneraciones o compensaciones previstas por actos de explotaci\u00f3n de la obra o prestaci\u00f3n, calificadas por la ley como irrenunciables e inalienables y sujetas a gesti\u00f3n colectiva obligatoria. Renuncia al derecho exclusivo a percibir, tanto individualmente como mediante una entidad de gesti\u00f3n colectiva de derechos, cualquier remuneraci\u00f3n derivada de actos de explotaci\u00f3n de la obra o prestaci\u00f3n que usted realice. Estos derechos se pueden ejercitar en todos los medios y formatos, tangibles o intangibles, conocidos en el momento de la concesi\u00f3n de esta licencia. Los derechos mencionados incluyen el derecho a efectuar las modificaciones que sean precisas t\u00e9cnicamente para el ejercicio de los derechos en otros medios y formatos. Todos los derechos no concedidos expresamente por el licenciador quedan reservados, incluyendo, a t\u00edtulo enunciativo pero no limitativo, los derechos morales irrenunciables reconocidos por la ley aplicable. En la medida en que el licenciador ostente derechos exclusivos previstos por la ley nacional vigente que implementa la directiva europea en materia de derecho sui generis sobre bases de datos, renuncia expresamente a dichos derechos exclusivos. 4. Restricciones. La concesi\u00f3n de derechos que supone esta licencia se encuentra sujeta y limitada a las restricciones siguientes: Usted puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n solamente bajo los t\u00e9rminos de esta licencia y debe incluir una copia de la misma, o su Identificador Uniforme de Recurso (URI). Usted no puede ofrecer o imponer ninguna condici\u00f3n sobre la obra o prestaci\u00f3n que altere o restrinja los t\u00e9rminos de esta licencia o el ejercicio de sus derechos por parte de los concesionarios de la misma. Usted no puede sublicenciar la obra o prestaci\u00f3n. Usted debe mantener intactos todos los avisos que se refieran a esta licencia y a la ausencia de garant\u00edas. Usted no puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n con medidas tecnol\u00f3gicas que controlen el acceso o el uso de una manera contraria a los t\u00e9rminos de esta licencia. Esta secci\u00f3n 4.a tambi\u00e9n afecta a la obra o prestaci\u00f3n incorporada en una colecci\u00f3n, pero ello no implica que \u00e9sta en su conjunto quede autom\u00e1ticamente o deba quedar sujeta a los t\u00e9rminos de la misma. En el caso que le sea requerido, previa comunicaci\u00f3n del licenciador, si usted incorpora la obra en una colecci\u00f3n y/o crea una obra derivada, deber\u00e1 quitar cualquier cr\u00e9dito requerido en el apartado 4.b, en la medida de lo posible. Si usted reproduce, distribuye o comunica p\u00fablicamente la obra o la prestaci\u00f3n, una colecci\u00f3n que la incorpore o cualquier obra derivada, debe mantener intactos todos los avisos sobre la propiedad intelectual e indicar, de manera razonable conforme al medio o a los medios que usted est\u00e9 utilizando: El nombre del autor original, o el seud\u00f3nimo si es el caso, as\u00ed como el del titular originario, si le es facilitado. El nombre de aquellas partes (por ejemplo: instituci\u00f3n, publicaci\u00f3n, revista) que el titular originario y/o el licenciador designen para ser reconocidos en el aviso legal, las condiciones de uso, o de cualquier otra manera razonable. El t\u00edtulo de la obra o la prestaci\u00f3n si le es facilitado. El URI, si existe, que el licenciador especifique para ser vinculado a la obra o la prestaci\u00f3n, a menos que tal URI no se refiera al aviso legal o a la informaci\u00f3n sobre la licencia de la obra o la prestaci\u00f3n. En el caso de una obra derivada, un aviso que identifique la transformaci\u00f3n de la obra en la obra derivada (p. ej., \"traducci\u00f3n castellana de la obra de Autor Original,\" o \"gui\u00f3n basado en obra original de Autor Original\"). Este reconocimiento debe hacerse de manera razonable. En el caso de una obra derivada o incorporaci\u00f3n en una colecci\u00f3n estos cr\u00e9ditos deber\u00e1n aparecer como m\u00ednimo en el mismo lugar donde se hallen los correspondientes a otros autores o titulares y de forma comparable a los mismos. Para evitar la duda, los cr\u00e9ditos requeridos en esta secci\u00f3n s\u00f3lo ser\u00e1n utilizados a efectos de atribuci\u00f3n de la obra o la prestaci\u00f3n en la manera especificada anteriormente. Sin un permiso previo por escrito, usted no puede afirmar ni dar a entender impl\u00edcitamente ni expl\u00edcitamente ninguna conexi\u00f3n, patrocinio o aprobaci\u00f3n por parte del titular originario, el licenciador y/o las partes reconocidas hacia usted o hacia el uso que hace de la obra o la prestaci\u00f3n. Para evitar cualquier duda, debe hacerse notar que las restricciones anteriores (p\u00e1rrafos 4.a y 4.b) no son de aplicaci\u00f3n a aquellas partes de la obra o la prestaci\u00f3n objeto de esta licencia que \u00fanicamente puedan ser protegidas mediante el derecho sui generis sobre bases de datos recogido por la ley nacional vigente implementando la directiva europea de bases de datos 5. Exoneraci\u00f3n de responsabilidad A MENOS QUE SE ACUERDE MUTUAMENTE ENTRE LAS PARTES, EL LICENCIADOR OFRECE LA OBRA O LA PRESTACI\u00d3N TAL CUAL (ON AN \"AS-IS\" BASIS) Y NO CONFIERE NINGUNA GARANT\u00cdA DE CUALQUIER TIPO RESPECTO DE LA OBRA O LA PRESTACI\u00d3N O DE LA PRESENCIA O AUSENCIA DE ERRORES QUE PUEDAN O NO SER DESCUBIERTOS. ALGUNAS JURISDICCIONES NO PERMITEN LA EXCLUSI\u00d3N DE TALES GARANT\u00cdAS, POR LO QUE TAL EXCLUSI\u00d3N PUEDE NO SER DE APLICACI\u00d3N A USTED. 6. Limitaci\u00f3n de responsabilidad. SALVO QUE LO DISPONGA EXPRESA E IMPERATIVAMENTE LA LEY APLICABLE, EN NING\u00daN CASO EL LICENCIADOR SER\u00c1 RESPONSABLE ANTE USTED POR CUALESQUIERA DA\u00d1OS RESULTANTES, GENERALES O ESPECIALES (INCLUIDO EL DA\u00d1O EMERGENTE Y EL LUCRO CESANTE), FORTUITOS O CAUSALES, DIRECTOS O INDIRECTOS, PRODUCIDOS EN CONEXI\u00d3N CON ESTA LICENCIA O EL USO DE LA OBRA O LA PRESTACI\u00d3N, INCLUSO SI EL LICENCIADOR HUBIERA SIDO INFORMADO DE LA POSIBILIDAD DE TALES DA\u00d1OS. 7. Finalizaci\u00f3n de la licencia Esta licencia y la concesi\u00f3n de los derechos que contiene terminar\u00e1n autom\u00e1ticamente en caso de cualquier incumplimiento de los t\u00e9rminos de la misma. Las personas o entidades que hayan recibido de usted obras derivadas o colecciones bajo esta licencia, sin embargo, no ver\u00e1n sus licencias finalizadas, siempre que tales personas o entidades se mantengan en el cumplimiento \u00edntegro de esta licencia. Las secciones 1, 2, 5, 6, 7 y 8 permanecer\u00e1n vigentes pese a cualquier finalizaci\u00f3n de esta licencia. Conforme a las condiciones y t\u00e9rminos anteriores, la concesi\u00f3n de derechos de esta licencia es vigente por todo el plazo de protecci\u00f3n de los derechos de propiedad intelectual seg\u00fan la ley aplicable. A pesar de lo anterior, el licenciador se reserva el derecho a divulgar o publicar la obra o la prestaci\u00f3n en condiciones distintas a las presentes, o de retirar la obra o la prestaci\u00f3n en cualquier momento. No obstante, ello no supondr\u00e1 dar por concluida esta licencia (o cualquier otra licencia que haya sido concedida, o sea necesario ser concedida, bajo los t\u00e9rminos de esta licencia), que continuar\u00e1 vigente y con efectos completos a no ser que haya finalizado conforme a lo establecido anteriormente, sin perjuicio del derecho moral de arrepentimiento en los t\u00e9rminos reconocidos por la ley de propiedad intelectual aplicable. 8. Miscel\u00e1nea Cada vez que usted realice cualquier tipo de explotaci\u00f3n de la obra o la prestaci\u00f3n, o de una colecci\u00f3n que la incorpore, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra o la prestaci\u00f3n en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Cada vez que usted realice cualquier tipo de explotaci\u00f3n de una obra derivada, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra objeto de esta licencia en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Si alguna disposici\u00f3n de esta licencia resulta inv\u00e1lida o inaplicable seg\u00fan la Ley vigente, ello no afectar\u00e1 la validez o aplicabilidad del resto de los t\u00e9rminos de esta licencia y, sin ninguna acci\u00f3n adicional por cualquiera las partes de este acuerdo, tal disposici\u00f3n se entender\u00e1 reformada en lo estrictamente necesario para hacer que tal disposici\u00f3n sea v\u00e1lida y ejecutiva. No se entender\u00e1 que existe renuncia respecto de alg\u00fan t\u00e9rmino o disposici\u00f3n de esta licencia, ni que se consiente violaci\u00f3n alguna de la misma, a menos que tal renuncia o consentimiento figure por escrito y lleve la firma de la parte que renuncie o consienta. Esta licencia constituye el acuerdo pleno entre las partes con respecto a la obra o la prestaci\u00f3n objeto de la licencia. No caben interpretaciones, acuerdos o condiciones con respecto a la obra o la prestaci\u00f3n que no se encuentren expresamente especificados en la presente licencia. El licenciador no estar\u00e1 obligado por ninguna disposici\u00f3n complementaria que pueda aparecer en cualquier comunicaci\u00f3n que le haga llegar usted. Esta licencia no se puede modificar sin el mutuo acuerdo por escrito entre el licenciador y usted.","title":"FAQ."},{"location":"markdown_strict/CF_manual-firmas-pdf/","text":"< < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported . \u00cdndice 1 Introducci\u00f3n [3](#introducci\u00f3n) 2 Objetivos [4](#objetivos) 3 Formato de firma PDF (Portable Document Format) [5](#formato-de-firma-pdf-portable-document-format) 3.1 Uso de las firmas PDF desde el cliente @firma [6](#uso-de-las-firmas-pdf-desde-el-cliente-firma) 3.2 Par\u00e1metros de funcionamiento [8](#par\u00e1metros-de-funcionamiento) 3.2.1 Documentos PDF cifrados o protegidos con contrase\u00f1a [8](#_Toc401046644) 3.2.2 Metadatos adicionales en los PDF firmados [9](#metadatos-adicionales-en-los-pdf-firmados) 3.2.3 PDF con r\u00fabrica [9](#pdf-con-r\u00fabrica) 3.2.4 Cofirmas en PDF (Firmas en serie) [12](#_Toc401046647) 3.2.5 Contrafirmas en PDF [13](#contrafirmas-en-pdf) 3.3 Informaci\u00f3n de utilidad [13](#informaci\u00f3n-de-utilidad) 4 Glosario de t\u00e9rminos [14](#glosario-de-t\u00e9rminos) Creative Commons [17](#Licencia_Creative_Commons) Introducci\u00f3n El Cliente de Firma es una herramienta de Firma Electr\u00f3nica que funciona en forma de Applet de Java integrado en una p\u00e1gina Web mediante JavaScript. El Cliente hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados ( keystore ) del navegador web ( Internet Explorer, Mozilla, Firefox ) o el sistema operativo as\u00ed como de los que est\u00e9n en dispositivos (tarjetas inteligentes , dispositivos USB ) configurados en el mismo (el caso de los DNI-e). El Cliente de Firma, como su nombre indica, es una aplicaci\u00f3n que se ejecuta en cliente (en el ordenador del usuario, no en el servidor Web). Esto es as\u00ed para evitar que la clave privada asociada a un certificado tenga que \u201csalir\u201d del contenedor del usuario (tarjeta, dispositivo USB o navegador) ubicado en su PC. De hecho, nunca llega a salir del navegador, el Cliente le env\u00eda los datos a firmar y \u00e9ste los devuelve firmados. El Cliente de Firma contiene las interfaces y componentes web necesarios para la realizaci\u00f3n de los siguientes procesos (adem\u00e1s de otros auxiliares como c\u00e1lculos de hash, lectura de ficheros, etc\u2026): Firma de formularios Web. Firma de datos y ficheros. Multifirma masiva de datos y ficheros. Cofirma (CoSignature) Multifirma al mismo nivel. Contrafirma (CounterSignature) Multifirma en cascada. Como complemento al cliente de firma, se encuentra un cliente de cifrado que nos permite realizar las funciones de encriptaci\u00f3n y desencriptaci\u00f3n de datos atendiendo a diferentes algoritmos y configuraciones. Adem\u00e1s permite la generaci\u00f3n de sobres digitales. Objetivos El objetivo del presente documento es reflejar las capacidades del Cliente @firma en cuanto a firmas electr\u00f3nicas de documentos PDF ( Portable Document Format ), las peculiaridades de este relativas a este formato, sus opciones de configuraci\u00f3n y su compatibilidad. Formato de firma PDF (Portable Document Format) El cliente soporta firmas en formato PDF / ISO 32000-1 mediante algoritmo RSA y huellas digitales seg\u00fan algoritmos SHA-1 y SHA-2, de forma acorde a las especificaciones de Adobe. Este tipo de firma consiste, b\u00e1sicamente, en la inclusi\u00f3n de una estructura de firma CAdES en un espacio reservado dentro del documento PDF que se firma. Las firmas de los documentos PDF realizadas por el cliente no son visibles directamente , es decir, no tienen representaci\u00f3n gr\u00e1fica dentro del documento. Soporte de firmas PDF Avanzadas (PAdES) La versi\u00f3n actual del Cliente @firma genera firmas electr\u00f3nicas compatibles con la especificaci\u00f3n PAdES ( http://pda.etsi.org/pda/ ) de un modo completamente compatible con la versi\u00f3n 9.3.2 de Adobe Reader y con la normativa ISO 32000-1. Todas las firmas PDF realizadas por el Cliente son simult\u00e1neamente compatibles con la normativa ISO 32000-1 y el est\u00e1ndar PAdES. Las firmas electr\u00f3nicas introducidas pueden generarse como PAdES-B\u00e1sicas (firmas avanzadas b\u00e1sicas) o PAdES-EPES (firmas avanzadas acordes a pol\u00edtica), siendo necesario en este \u00faltimo caso introducir los datos de la pol\u00edtica de firma tal y como se describe en la documentaci\u00f3n general del Cliente @firma (JavaDoc del Applet y apartado 8.5.4 del Manual del Integrador): setPolicy(String identifier, String description, String qualifier, String hashB64) A nivel t\u00e9cnico, los datos de firma electr\u00f3nica empotrados dentro de la estructura PDF equivalen a una firma CAdES . En caso de firmarse con un algoritmo de firma con huella digital SHA1, la firma incluir\u00e1 el atributo firmado SigningCertificate (opci\u00f3n recomendada por el est\u00e1ndar para este algoritmo), mientras que con cualquier otro algoritmo se incluir\u00e1 el atributo SigningCertificateV2 . Este comportamiento se puede variar indicando expl\u00edcitamente si deseamos usar o no la versi\u00f3n 2 del atributo. Esto se har\u00e1 mediante el m\u00e9todo del Applet (que es posible invocar v\u00eda JavaScript): clienteFirma.addExtraParam(String paramName, String paramValue), y el siguiente uso: clienteFirma.addExtraParam(\u201csigningCertificateV2\u201d, \u201ctrue\u201d); Desde la invocaci\u00f3n de este m\u00e9todo todas las firmas PAdES que se realicen hasta el reinicio del Applet tendr\u00e1n la forma V2 del atributo Signing Certificate. Si queremos restablecer el comportamiento normal de generaci\u00f3n en la forma V1 debemos invocar el paso de par\u00e1metro adicional de este otra forma: clienteFirma.addExtraParam(\u201csigningCertificateV2\u201d, \u201cfalse\u201d); El Cliente no soporta la firma de adjuntos a los documentos PDF en ninguna variante ni formato. No obstante, si el Cliente detecta que un PDF contiene ficheros adjuntos o empotrados, imprimir\u00e1 una advertencia en la consola Java. Generaci\u00f3n de PAdES-BES Como se ha comentado anteriormente, las firmas generadas por defecto corresponden al formato PAdES-B\u00e1sicas, lo cual quiere decir que la firma insertada en el PDF es compatible con CMS ( Cryptographic Message Syntax ) y se etiqueta en el diccionario PDF como adbe.pkcs7.detached. No obstante, es posible forzar la creaci\u00f3n de firmas PAdES-BES, que se diferencian de las PAdES-B\u00e1sicas en que la firma es compatible con CAdES y se etiqueta en el diccionario PDF como ETSI.CAdES.detached. Para realizar esto es necesario indicar este valor de etiqueta en el par\u00e1metro adicional signatureSubFilter, lo cual puede hacerse desde el Cliente @firma mediante la siguiente sentencia JavaScript: clienteFirma.addExtraParam(\u201csignatureSubFilter\u201d, \u201cETSI.CAdES.detached\u201d); Soporte de PDF Cifrados o protegidos con contrase\u00f1a El Cliente @firma soporta la firma de ficheros PDF cifrados o protegidos con contrase\u00f1a, con las siguientes excepciones: No se soporta el algoritmo de cifrado AES256 ni otros algoritmos introducidos posteriormente a la aceptaci\u00f3n de este en la normativa PDF y el en programa Adobe Acrobat / Adobe Reader. No se soportan cifrados basados en certificados digitales. En este sentido, el m\u00f3dulo permite establecer ciertos comportamientos por defecto, consulte con la documentaci\u00f3n JavaDoc para mayor informaci\u00f3n (clase es.gob.afirma.signers.pades.AOPDFSigner), especialmente si realiza firmas PDF en modos no interactivos (firmas por lotes / firmas masivas). Uso de las firmas PDF desde el cliente @firma El formato de firma PDF est\u00e1 \u00fanicamente disponible en la construcci\u00f3n Completa del cliente de firma. Para realizar una firma en este formato s\u00f3lo es necesario configurarlo como formato de firma mediante el m\u00e9todo del Applet cliente: setSignatureFormat(String format) Puede llamarse a esta funci\u00f3n desde las p\u00e1ginas Web que integren el cliente por medio de la sentencia JavaScript: clienteFirma.setSignatureFormat(String format) Esto configurar\u00e1 el cliente de firma para realizar firmas PDF, siendo necesario tambi\u00e9n completar la configuraci\u00f3n del cliente que se considere necesaria (algoritmo de firma, tratamiento de errores,\u2026), establecer los datos que se desean firmar (no es posible realizar firmas PDF a partir del hash de un documento) y ordenar el proceso de firma. Creaci\u00f3n de una firma visible El Applet Cliente @firma permite la creaci\u00f3n de firmas visibles dentro de un documento PDF, que son lo son tanto en pantalla (por ejemplo, usando Adobe Reader) como en papel una vez impreso el documento. < Para ello debemos indicar, mediante par\u00e1metros adicionales, la p\u00e1gina en donde situar la visualizaci\u00f3n de la firma (solo puede haber una, en una \u00fanica p\u00e1gina) y sus coordenadas dentro de esta. Las coordenadas de la visualizaci\u00f3n se indican partiendo de la esquina inferior izquierda, seg\u00fan el siguiente diagrama: < Estas coordenadas, as\u00ed como la p\u00e1gina de inserci\u00f3n se establecen usando los par\u00e1metros adicionales, por ejemplo: signaturePositionOnPageLowerLeftX = 100 signaturePositionOnPageLowerLeftY = 100 signaturePositionOnPageUpperRightX = 200 signaturePositionOnPageUpperRightY = 200 signaturePositionOnPageUpperRightX = 200 signaturePage = 1 Los documentos PDF comienzan su numeraci\u00f3n de p\u00e1ginas desde uno (1). Si se indica -666 como p\u00e1gina se usa la \u00faltima p\u00e1gina del documento. Dentro del recuadro marcado por las coordenadas indicadas, es posible mostrar distintos elementos: < Una imagen: En este caso debe indicarse qu\u00e9 imagen a usar aportando el binario en formato JPEG codificado en Base64. signatureRubricImage = AGFGSFH\u2026 La imagen de deforma para adaptarse a las dimensiones del recuadro marcado por las coordenadas, por lo que es importante que ambos tengan la misma relaci\u00f3n de aspecto. < Texto (que puede combinarse con una imagen) Es necesario indicar no solo el texto a sobreimprimir en el cuadro visible, sino tambi\u00e9n indicaciones sobre su formato (tipo de letra y su tama\u00f1o, color, etc.). El texto introduce de forma autom\u00e1tica los retornos de carro necesarios para adaptarse al recuadro. El texto aparece siempre sobre la imagen indicada, si se indic\u00f3 alguna. Los par\u00e1metros para indicar el formato son: layer2Text Texto a escribir dentro de la firma visible. Este texto se escribe \u00fanicamente si no se ha especificado una imagen de r\u00fabrica, y necesita que se indique la p\u00e1gina y la situaci\u00f3n d\u00f3nde mostrar el recuadro de firma mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY, signaturePositionOnPageUpperRightX, signaturePositionOnPageUpperRightY y signaturePage. layer2FontFamily Tipo de letra a usar en el texto de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son: 0 = Courier (tipo por defecto) 1 = Helv\u00e9tica 2 = Times Roman 3 = Symbol 4 = ZapfDingBats layer2FontSize Tama\u00f1o de letra a usar en el texto de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos (y el valor por defecto es 12). layer2FontStyle Estilo del tipo de letra a usar en el texto de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos, correspondiendo: 0 = Normal (estilo por defecto) 1 = Negrita 2 = Cursiva 3 = Negrita y cursiva 4 = Subrayado 8 = Tachado Es posible combinar estilos aplicando la operaci\u00f3n l\u00f3gica o sobre los valores num\u00e9ricos a combinar. layer2FontColor Color del texto de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son textuales (se ignora entre may\u00fasculas y min\u00fasculas), soport\u00e1ndose: black = Negro (color por defecto) white = Blanco gray = Gris lightGray = Gris claro darkGray = Gris oscuro red = Rojo pink = Rosa Inserci\u00f3n de una imagen en un documento PDF antes de ser firmado Como ayuda principalmente a la inserci\u00f3n de C\u00f3digos Seguros de Validaci\u00f3n (CSV), existe la capacidad de insertar una imagen en un documento PDF justo antes de que se produzca la firma. Para ello, debemos indicar primero una p\u00e1gina y una zona dentro de esta para insertar la imagen, usando para ello el mismo sistema de coordenadas descrito en la secci\u00f3n \u201c12.1\u201d, es decir, a partir de la esquina inferior izquierda. La imagen debe proporcionarse en formato JPEG codificado en Base64. Para indicar la p\u00e1gina, podemos usar su n\u00famero (empezando a contar desde uno como primera p\u00e1gina), usar -1 para referirnos a la \u00faltima p\u00e1gina del documento o 0 (cero) para insertar la imagen en todas las p\u00e1ginas. Es importante recalcar que la imagen se deforma para adaptarse al recuadro marcado por las coordenadas, siendo \u00fatil para evitar este efecto que ambos tengan la misma relaci\u00f3n de aspecto. Igualmente, no se proporcionan funcionalidades de rotado, por lo que si se quiere insertar una imagen de lado (por ejemplo, en el margen de la p\u00e1gina, esta debe venir rotada en origen. Los par\u00e1metros adicionales a usar para la inserci\u00f3n de im\u00e1genes son: image Imagen que se desea insertar en el PDF antes de que este sea firmado. La imagen debe proporcionarse en formato JPEG codificado en Base64. Si el documento ya contiene firmas es posible que se invaliden, por lo que conviene usarlo \u00fanicamente en documentos sin firmas previas. imagePage P\u00e1gina donde desea insertarse la imagen indicada mediante el par\u00e1metro image. La numeraci\u00f3n de las p\u00e1ginas comienza en uno. Si se indica -1 como n\u00famero de p\u00e1gina se inserta la imagen en la \u00faltima p\u00e1gina del documento. Si se indica 0 como n\u00famero de p\u00e1gina se inserta la imagen en todas las p\u00e1ginas del documento. Este par\u00e1metro es obligatorio, si no se indica una p\u00e1gina v\u00e1lida no se insertar\u00e1 la imagen. imagePositionOnPageLowerLeftX Coordenada horizontal inferior izquierda de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftY, imagePositionOnPageUpperRightX e imagePositionOnPageUpperRightY. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage. imagePositionOnPageLowerLeftY Coordenada vertical inferior izquierda de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftX, imagePositionOnPageUpperRightX e imagePositionOnPageUpperRightY. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage. imagePositionOnPageUpperRightX Coordenada horizontal superior derecha de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftX, imagePositionOnPageLowerLeftY e imagePositionOnPageUpperRightY. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage. imagePositionOnPageUpperRightY Coordenada vertical superior derecha de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftX, imagePositionOnPageLowerLeftY e imagePositionOnPageUpperRightX. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage. Par\u00e1metros de funcionamiento Cadena de identificaci\u00f3n de formato (dos variantes aceptadas, se ignoran may\u00fasculas y min\u00fasculas): \"PDF\" / \"Adobe PDF\" Se ignorar\u00e1 cualquier indicaci\u00f3n del modo de firma (impl\u00edcito o expl\u00edcito). Los algoritmos de firma MD2withRSA o MD5withRSA no se soportan por estar obsoletos y ser inseguros. Ficheros de entrada Adobe PDF / ISO 32000 (*.pdf) Ficheros de salida Adobe PDF / ISO 32000 (*.pdf) A modo de ejemplo, la llamada para establecer el modo de funcionamiento de firmas PDF se usar\u00eda la siguiente llamada: clienteFirma.setSignatureFormat(\u201cPDF\u201d); Documentos PDF cifrados o protegidos con contrase\u00f1a El Cliente @firma permite firmar documentos PDF protegidos con contrase\u00f1a, tanto con una protecci\u00f3n de apertura (cifrado completo) como con una protecci\u00f3n contra modificaciones. Para firmar correctamente estos documentos se puede operar de dos formas: Modo interactivo Si no hemos indicado una operaci\u00f3n desatendida mediante el \u201cpar\u00e1metro adicional\u201d headLess el propio Cliente @firma solicitar\u00e1 mediante di\u00e1logos gr\u00e1ficos las contrase\u00f1as necesarias al usuario. Modo desatendido Podemos proporcionar las contrase\u00f1as mediante \u201cpar\u00e1metros adicionales\u201d, evitando de este modo los di\u00e1logos gr\u00e1ficos. Los par\u00e1metros que se pueden usar para este fin son: ownerPassword Contrase\u00f1a de apertura del documento. Si se proporciona para un documento que \u00fanicamente est\u00e1 protegido contra modificaciones resultar\u00e1 en un documento protegido contra apertura con esa misma contrase\u00f1a. userPassword Contrase\u00f1a para la realizaci\u00f3n de modificaciones en el documento. Por lo general, para garantizar la ausencia total de di\u00e1logos gr\u00e1ficos deber\u00e1 usarse tambi\u00e9n el par\u00e1metro headLess con el valor true. Metadatos adicionales en los PDF firmados Los ficheros PDF firmados pueden incluir una serie de metadatos adicionales (que no est\u00e1n contenidos en la propia firma, sino en el diccionario de metadatos del PDF) acerca de la firma. En @firma, es posible establecer estos metadatos mediante el uso de \u201cpar\u00e1metros adicionales\u201d. Los \u201cpar\u00e1metros adicionales\u201d admitidos en este sentido son: signReason Raz\u00f3n por la que se realiza la firma. signatureProductionCity Ciudad en la que se realiza la firma. signerContact Contacto del firmante, usualmente una direcci\u00f3n de coreo electr\u00f3nico. Las nombres de las propiedades deben escribirse tal y como figuran, respetando may\u00fasculas y min\u00fasculas. Para m\u00e1s informaci\u00f3n sobre el establecimiento de \u201cpar\u00e1metros adicionales\u201d en @firma consulte con el Manual del Integrador. Para el establecimiento program\u00e1tico desde Java de par\u00e1metros adicionales consulte con el JavaDoc. PDF con r\u00fabrica Es posible insertar una representaci\u00f3n gr\u00e1fica de firma en los documentos PDF. Esta representaci\u00f3n s\u00f3lo puede aparecer en una p\u00e1gina del PDF y puede ser una imagen establecida por el integrador, muy \u00fatil para agregar la r\u00fabrica de la firma del usuario si se debe imprimir el documento, o un texto. En @firma, es posible configurar este comportamiento mediante los \u201cpar\u00e1metros adicionales\u201d. Concretamente, los par\u00e1metros que existen para configurar la representaci\u00f3n gr\u00e1fica de la firma son: signaturePage P\u00e1gina del documento PDF donde insertar la firma. Este par\u00e1metro se ignora si se ha establecido valor al par\u00e1metro signatureField, y necesita que se establezcan valores v\u00e1lidos a los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY, signaturePositionOnPageUpperRightX y signaturePositionOnPageUpperRightY. signaturePositionOnPageLowerLeftX Coordenada horizontal inferior izquierda de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftY, signaturePositionOnPageUpperRightX y signaturePositionOnPageUpperRightY. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento. signaturePositionOnPageLowerLeftY Coordenada vertical inferior izquierda de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageUpperRightX y signaturePositionOnPageUpperRightY. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento. signaturePositionOnPageUpperRightX Coordenada horizontal superior derecha de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY y signaturePositionOnPageUpperRightY. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento. signaturePositionOnPageUpperRightY Coordenada vertical superior derecha de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY y signaturePositionOnPageUpperRightX. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento. signatureRubricImage Imagen JPEG codificada en Base64 de la r\u00fabrica de la firma manuscrita que se desea aparezca como firma visible en el PDF. layer2Text Texto a escribir dentro de la \"capa 2\" de la firma visible. Este texto se escribe \u00fanicamente si no se ha especificado una imagen de r\u00fabrica, y necesita que se indique la p\u00e1gina y la situaci\u00f3n d\u00f3nde mostrar el recuadro de firma mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY, signaturePositionOnPageUpperRightX, signaturePositionOnPageUpperRightY y signaturePage. layer2FontFamily Tipo de letra a usar en el texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos, correspondiendo: 0 = Courier (tipo por defecto) 1 = Helv\u00e9tica 2 = Times Roman 3 = Symbol 4 = ZapfDingBats layer2FontSize Tama\u00f1o de letra a usar en el texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos (y el valor por defecto es 12). layer2FontStyle Estilo del tipo de letra a usar en el texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos, correspondiendo: 0 = Normal (estilo por defecto) 1 = Negrita 2 = Cursiva 3 = Negrita y cursiva 4 = Subrayado 8 = Tachado Es posible combinar estilos aplicando la operaci\u00f3n l\u00f3gica o sobre los valores num\u00e9ricos a combinar. layer2FontColor Color del texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son textuales (se ignora entre may\u00fasculas y min\u00fasculas), soport\u00e1ndose: black = Negro (color por defecto) white = Blanco gray = Gris lightGray = Gris claro darkGray = Gris oscuro red = Rojo pink = Rosa Cofirmas en PDF (Firmas en serie) Los documentos PDF pueden ser \u201cmultifirmados\u201d mediante el m\u00f3dulo, pero debe observarse la siguientes peculiaridades: Las cofirmas PDF son en realidad m\u00faltiples firmas aplicadas sobre un mismo documento sobre el que se crean revisiones, con el siguiente funcionamiento: La primera firma aplicada aplica al documento original. La segunda firma crea una nueva revisi\u00f3n del documento, que contiene el documento original m\u00e1s la primera firma , y esta la revisi\u00f3n firmada. Cada firma adicional crea una nueva revisi\u00f3n que contiene tanto el documento original como las firmas anteriores. Una cofirma PDF, responde m\u00e1s al concepto de documento \u201cmultifirmado\u201d que al concepto de cofirma aplicado a firmas CMS o XMLDSig, ya que internamente el PDF no contiene una \u00fanica estructura PKCS#7 con las firmas / cofirmas, sino varias estructuras PKCS#7. El formato PDF permite, tras una firma digital, sellar el documento para evitar que se a\u00f1ada contenido adicional tras la firma. Dado que esto evitar\u00eda la posibilidad de a\u00f1adir nuevas firmas, el m\u00f3dulo no sella los documentos, posibilitando la anexi\u00f3n de nuevo contenido al documento. No obstante, la primera firma aplicar\u00e1 \u00fanicamente al contenido original, aspecto que se indicar\u00e1 (por el programa Adobe Reader) como advertencia. Este aspecto en absoluto invalida la firma. El formato PDF permite reservar espacio para firmas de modo que no sea necesario anexar contenido al a\u00f1adir firmas digitales adicionales (tras una primera firma), ya que estas se alojan en estos espacios reservados. Pero dado que es necesario determinar a priori el n\u00famero de espacios a reservar (uno por cada firma digital adicional a la primera) y que el cliente carece de esta informaci\u00f3n, no se reserva ning\u00fan espacio. Cada firma adicional a la primera supone un contenido anexado al documento. Al ser las firmas adicionales a la primera contenido anexo, no existente en el momento de realizar la primera operaci\u00f3n de firma, esta no las reflejar\u00e1, indicando mediante una advertencia que se ha a\u00f1adido contenido adicional , pero igualmente informando que el contenido firmado no ha sufrido alteraciones. El cliente no puede cofirmar documentos PDF sellados . No es posible realizar cofirmas a partir de un hash. NOTA IMPORTANTE: No todos los documentos PDF permiten a\u00f1adir firmas adicionales una vez se ha completado y cerrado el proceso de la primera firma. El a\u00f1adir firmas adicionales en un documento PDF que no est\u00e1 preparado para ello puede invalidar la primera firma . El cliente @Firma firma siempre los documentos de forma que sea posible a\u00f1adir firmas adicionales sin que ninguna quede invalidada, pero otros productos (por ejemplo Adobe Acrobat) no permiten esta opci\u00f3n. Antes de cofirmar un documento PDF cerci\u00f3rese de que \u00e9ste admite firmas adiciones. Si no est\u00e1 seguro de esta caracter\u00edstica compruebe, tras a\u00f1adir las firmas adicionales, si alguna firma se ha invalidado y en ese caso descarte el documento generado. Contrafirmas en PDF El m\u00f3dulo de firmas PDF no soporta contrafirmas. Informaci\u00f3n de utilidad Informaci\u00f3n sobre el formato PDF: http://www.adobe.com Normativa PKCS#7: http://www.rsa.com/rsalabs/node.asp?id=2129 Glosario de t\u00e9rminos Firma electr\u00f3nica Es el conjunto de datos, en forma electr\u00f3nica, anejos a otros datos electr\u00f3nicos o asociados funcionalmente con ellos, utilizados como medio para identificar formalmente al autor o a los autores del documento que la recoge. XML Digital Signature (XMLDSig) Es una recomendaci\u00f3n del W3C que define una sintaxis XML para la firma digital XML Advanced Signature (XAdES) Es un conjunto de extensiones a las recomendaciones XML-DSig haci\u00e9ndolas adecuadas para la firma electr\u00f3nica avanzada. RSA Es un sistema criptogr\u00e1fico de clave p\u00fablica desarrollado en 1977. En la actualidad, RSA es el primer y m\u00e1s utilizado algoritmo de este tipo y es v\u00e1lido tanto para cifrar como para firmar digitalmente. XML Es un metalenguaje extensible de etiquetas desarrollado por el World Wide Web Consortium (W3C). Es una simplificaci\u00f3n y adaptaci\u00f3n del SGML y permite definir la gram\u00e1tica de lenguajes espec\u00edficos (de la misma manera que HTML es a su vez un lenguaje definido por SGML). Por lo tanto XML no es realmente un lenguaje en particular, sino una manera de definir lenguajes para diferentes necesidades. Algunos de estos lenguajes que usan XML para su definici\u00f3n son XHTML, SVG, MathML. Office Open XML (OOXML) Es un formato de archivo abierto y est\u00e1ndar cuyas extensiones m\u00e1s comunes son .docx, .xlsx y .pptx. Se le utiliza para representar y almacenar hojas de c\u00e1lculo, diagramas, presentaciones y documentos de texto. Un archivo Office Open XML contiene principalmente datos basados en el lenguaje de marcado XML, comprimidos en un contenedor .zip espec\u00edfico. Open Document Format (ODF) Es un formato de fichero est\u00e1ndar para el almacenamiento de documentos ofim\u00e1ticos tales como hojas de c\u00e1lculo, memorandos, gr\u00e1ficas y presentaciones. Aunque las especificaciones fueron inicialmente elaboradas por Sun, el est\u00e1ndar fue desarrollado por el comit\u00e9 t\u00e9cnico para Open Office XML de la organizaci\u00f3n OASIS y est\u00e1 basado en un esquema XML inicialmente creado e implementado por la suite ofim\u00e1tica OpenOffice.org (ver OpenOffice.org XML). ZIP Es un formato de almacenamiento sin p\u00e9rdida, muy utilizado para la compresi\u00f3n de datos como im\u00e1genes, programas o documentos. PDF Es un formato de almacenamiento de documentos, desarrollado por la empresa Adobe Systems. Este formato es de tipo compuesto (imagen vectorial, mapa de bits y texto). SHA Es un sistema de funciones hash criptogr\u00e1ficas relacionadas de la Agencia de Seguridad Nacional de los Estados Unidos y publicadas por el National Institute of Standards and Technology (NIST). El primer miembro de la familia fue publicado en 1993 es oficialmente llamado SHA. Sin embargo, hoy d\u00eda, no oficialmente se le llama SHA-0 para evitar confusiones con sus sucesores. Dos a\u00f1os m\u00e1s tarde el primer sucesor de SHA fue publicado con el nombre de SHA-1. Existen cuatro variantes m\u00e1s que se han publicado desde entonces cuyas diferencias se basan en un dise\u00f1o algo modificado y rangos de salida incrementados: SHA-224, SHA-256, SHA-384, y SHA-512 (llam\u00e1ndose SHA-2 a todos ellos). PKCS Se refiere a un grupo de est\u00e1ndares de criptograf\u00eda de claves p\u00fablicas concebidos y publicados por los laboratorios de RSA en California. A RSA Security se le asignaron los derechos de licenciamiento para la patente de algoritmo de clave asim\u00e9trica RSA y adquiri\u00f3 los derechos de licenciamiento para muchas otras patentes de claves. W3C Es un consorcio internacional que produce recomendaciones para la World Wide Web. Est\u00e1 dirigida por Tim Berners-Lee, el creador original de URL (Uniform Resource Locator, Localizador Uniforme de Recursos), HTTP (HyperText Transfer Protocol, Protocolo de Transferencia de HiperTexto) y HTML (Lenguaje de Marcado de HiperTexto) que son las principales tecnolog\u00edas sobre las que se basa la Web. OpenOffice.org es una suite ofim\u00e1tica libre (c\u00f3digo abierto y distribuci\u00f3n gratuita) que incluye herramientas como procesador de textos, hoja de c\u00e1lculo, presentaciones, herramientas para el dibujo vectorial y base de datos. Est\u00e1 disponible para varias plataformas, tales como Microsoft Windows, GNU/Linux, BSD, Solaris y Mac OS X. Soporta numerosos formatos de archivo, incluyendo como predeterminado el formato est\u00e1ndar ISO/IEC OpenDocument (ODF), entre otros formatos comunes. A febrero de 2010, OpenOffice soporta m\u00e1s de 110 idiomas. Base64 Es un sistema de numeraci\u00f3n posicional que usa 64 como base. Es la mayor potencia de dos que puede ser representada usando \u00fanicamente los caracteres imprimibles de ASCII. Esto ha propiciado su uso para codificaci\u00f3n de correos electr\u00f3nicos, PGP y otras aplicaciones. Todas las variantes famosas que se conocen con el nombre de Base64 usan el rango de caracteres A-Z, a-z y 0-9 en este orden para los primeros 62 d\u00edgitos, pero los s\u00edmbolos escogidos para los \u00faltimos dos d\u00edgitos var\u00edan considerablemente de unas a otras. Otros m\u00e9todos de codificaci\u00f3n como UUEncode y las \u00faltimas versiones de binhex usan un conjunto diferente de 64 caracteres para representar 6 d\u00edgitos binarios, pero \u00e9stos nunca son llamados Base64. ASN.1 Es una norma para representar datos independientemente de la m\u00e1quina que se est\u00e9 usando y sus formas de representaci\u00f3n internas. Es un protocolo de nivel de presentaci\u00f3n en el modelo OSI. Autoridad de Certificaci\u00f3n (CA) Es una entidad de confianza, responsable de emitir y revocar los certificados digitales o certificados, utilizados en la firma electr\u00f3nica, para lo cual se emplea la criptograf\u00eda de clave p\u00fablica. Jur\u00eddicamente es un caso particular de Prestador de Servicios de Certificaci\u00f3n. Certificado Digital Es un documento digital mediante el cual un tercero confiable (una autoridad de certificaci\u00f3n) garantiza la vinculaci\u00f3n entre la identidad de un sujeto o entidad y su clave p\u00fablica. Infraestructura de Clave P\u00fablica (PKI) Es una combinaci\u00f3n de hardware y software, pol\u00edticas y procedimientos de seguridad que permiten la ejecuci\u00f3n con garant\u00edas de operaciones criptogr\u00e1ficas como el cifrado, la firma digital o el no repudio de transacciones electr\u00f3nicas. Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported Usted es libre de: | < style=\"width:0.52083in;height:0.52083in\" alt=\"share\" /> | Compartir - copiar, distribuir, ejecutar y comunicar p\u00fablicamente la obra | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"remix\" /> | hacer obras derivadas | Bajo las condiciones siguientes: | < style=\"width:0.52083in;height:0.52083in\" alt=\"by\" /> | Atribuci\u00f3n \u2014 Debe reconocer los cr\u00e9ditos de la obra de la manera especificada por el autor o el licenciante (pero no de una manera que sugiera que tiene su apoyo o que apoyan el uso que hace de su obra). | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"nc\" /> | NoComercial \u2014 No puede utilizar esta obra para fines comerciales. | | < style=\"width:0.52083in;height:0.52083in\" alt=\"sa\" /> | Compartir bajo la Misma Licencia \u2014 Si altera o transforma esta obra, o genera una obra derivada, s\u00f3lo puede distribuir la obra generada bajo una licencia id\u00e9ntica a \u00e9sta. | Entendiendo que: Renuncia \u2014 Alguna de estas condiciones puede no aplicarse si se obtiene el permiso del titular de los derechos de autor Dominio P\u00fablico \u2014 Cuando la obra o alguno de sus elementos se hallen en el dominio p\u00fablico seg\u00fan la ley vigente aplicable, esta situaci\u00f3n no quedar\u00e1 afectada por la licencia. Otros derechos \u2014 Los derechos siguientes no quedan afectados por la licencia de ninguna manera: Los derechos derivados de usos leg\u00edtimos u otras limitaciones reconocidas por ley no se ven afectados por lo anterior. Los derechos morales del auto; Derechos que pueden ostentar otras personas sobre la propia obra o su uso, como por ejemplo derechos de imagen o de privacidad. Aviso \u2014 Al reutilizar o distribuir la obra, tiene que dejar muy en claro los t\u00e9rminos de la licencia de esta obra. La mejor forma de hacerlo es enlazar a esta p\u00e1gina. Licencia LA OBRA O LA PRESTACI\u00d3N (SEG\u00daN SE DEFINEN M\u00c1S ADELANTE) SE PROPORCIONA BAJO LOS T\u00c9RMINOS DE ESTA LICENCIA P\u00daBLICA DE CREATIVE COMMONS (CCPL O LICENCIA). LA OBRA O LA PRESTACI\u00d3N SE ENCUENTRA PROTEGIDA POR LA LEY ESPA\u00d1OLA DE PROPIEDAD INTELECTUAL Y/O CUALESQUIERA OTRAS NORMAS QUE RESULTEN DE APLICACI\u00d3N. QUEDA PROHIBIDO CUALQUIER USO DE LA OBRA O PRESTACI\u00d3N DIFERENTE A LO AUTORIZADO BAJO ESTA LICENCIA O LO DISPUESTO EN LA LEY DE PROPIEDAD INTELECTUAL. MEDIANTE EL EJERCICIO DE CUALQUIER DERECHO SOBRE LA OBRA O LA PRESTACI\u00d3N, USTED ACEPTA Y CONSIENTE LAS LIMITACIONES Y OBLIGACIONES DE ESTA LICENCIA, SIN PERJUICIO DE LA NECESIDAD DE CONSENTIMIENTO EXPRESO EN CASO DE VIOLACI\u00d3N PREVIA DE LOS T\u00c9RMINOS DE LA MISMA. EL LICENCIADOR LE CONCEDE LOS DERECHOS CONTENIDOS EN ESTA LICENCIA, SIEMPRE QUE USTED ACEPTE LOS PRESENTES T\u00c9RMINOS Y CONDICIONES. 1. Definiciones La obra es la creaci\u00f3n literaria, art\u00edstica o cient\u00edfica ofrecida bajo los t\u00e9rminos de esta licencia. En esta licencia se considera una prestaci\u00f3n cualquier interpretaci\u00f3n, ejecuci\u00f3n, fonograma, grabaci\u00f3n audiovisual, emisi\u00f3n o transmisi\u00f3n, mera fotograf\u00eda u otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente aplicable. La aplicaci\u00f3n de esta licencia a una colecci\u00f3n (definida m\u00e1s adelante) afectar\u00e1 \u00fanicamente a su estructura en cuanto forma de expresi\u00f3n de la selecci\u00f3n o disposici\u00f3n de sus contenidos, no siendo extensiva a \u00e9stos. En este caso la colecci\u00f3n tendr\u00e1 la consideraci\u00f3n de obra a efectos de esta licencia. El titular originario es: En el caso de una obra literaria, art\u00edstica o cient\u00edfica, la persona natural o grupo de personas que cre\u00f3 la obra. En el caso de una obra colectiva, la persona que la edite y divulgue bajo su nombre, salvo pacto contrario. En el caso de una interpretaci\u00f3n o ejecuci\u00f3n, el actor, cantante, m\u00fasico, o cualquier otra persona que represente, cante, lea, recite, interprete o ejecute en cualquier forma una obra. En el caso de un fonograma, el productor fonogr\u00e1fico, es decir, la persona natural o jur\u00eddica bajo cuya iniciativa y responsabilidad se realiza por primera vez una fijaci\u00f3n exclusivamente sonora de la ejecuci\u00f3n de una obra o de otros sonidos. En el caso de una grabaci\u00f3n audiovisual, el productor de la grabaci\u00f3n, es decir, la persona natural o jur\u00eddica que tenga la iniciativa y asuma la responsabilidad de las fijaciones de un plano o secuencia de im\u00e1genes, con o sin sonido. En el caso de una emisi\u00f3n o una transmisi\u00f3n, la entidad de radiodifusi\u00f3n. En el caso de una mera fotograf\u00eda, aquella persona que la haya realizado. En el caso de otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente, la persona que \u00e9sta se\u00f1ale. Se considerar\u00e1n obras derivadas aquellas obras creadas a partir de la licenciada, como por ejemplo: las traducciones y adaptaciones; las revisiones, actualizaciones y anotaciones; los compendios, res\u00famenes y extractos; los arreglos musicales y, en general, cualesquiera transformaciones de una obra literaria, art\u00edstica o cient\u00edfica. Para evitar la duda, si la obra consiste en una composici\u00f3n musical o grabaci\u00f3n de sonidos, la sincronizaci\u00f3n temporal de la obra con una imagen en movimiento (synching) ser\u00e1 considerada como una obra derivada a efectos de esta licencia. Tendr\u00e1n la consideraci\u00f3n de colecciones la recopilaci\u00f3n de obras ajenas, de datos o de otros elementos independientes como las antolog\u00edas y las bases de datos que por la selecci\u00f3n o disposici\u00f3n de sus contenidos constituyan creaciones intelectuales. La mera incorporaci\u00f3n de una obra en una colecci\u00f3n no dar\u00e1 lugar a una derivada a efectos de esta licencia. El licenciador es la persona o la entidad que ofrece la obra o prestaci\u00f3n bajo los t\u00e9rminos de esta licencia y le concede los derechos de explotaci\u00f3n de la misma conforme a lo dispuesto en ella. Usted es la persona o la entidad que ejercita los derechos concedidos mediante esta licencia y que no ha violado previamente los t\u00e9rminos de la misma con respecto a la obra o la prestaci\u00f3n, o que ha recibido el permiso expreso del licenciador de ejercitar los derechos concedidos mediante esta licencia a pesar de una violaci\u00f3n anterior. La transformaci\u00f3n de una obra comprende su traducci\u00f3n, adaptaci\u00f3n y cualquier otra modificaci\u00f3n en su forma de la que se derive una obra diferente. La creaci\u00f3n resultante de la transformaci\u00f3n de una obra tendr\u00e1 la consideraci\u00f3n de obra derivada. Se entiende por reproducci\u00f3n la fijaci\u00f3n directa o indirecta, provisional o permanente, por cualquier medio y en cualquier forma, de toda la obra o la prestaci\u00f3n o de parte de ella, que permita su comunicaci\u00f3n o la obtenci\u00f3n de copias. Se entiende por distribuci\u00f3n la puesta a disposici\u00f3n del p\u00fablico del original o de las copias de la obra o la prestaci\u00f3n, en un soporte tangible, mediante su venta, alquiler, pr\u00e9stamo o de cualquier otra forma. Se entiende por comunicaci\u00f3n p\u00fablica todo acto por el cual una pluralidad de personas, que no pertenezcan al \u00e1mbito dom\u00e9stico de quien la lleva a cabo, pueda tener acceso a la obra o la prestaci\u00f3n sin previa distribuci\u00f3n de ejemplares a cada una de ellas. Se considera comunicaci\u00f3n p\u00fablica la puesta a disposici\u00f3n del p\u00fablico de obras o prestaciones por procedimientos al\u00e1mbricos o inal\u00e1mbricos, de tal forma que cualquier persona pueda acceder a ellas desde el lugar y en el momento que elija. La explotaci\u00f3n de la obra o la prestaci\u00f3n comprende la reproducci\u00f3n, la distribuci\u00f3n, la comunicaci\u00f3n p\u00fablica y, en su caso, la transformaci\u00f3n. 2. L\u00edmites de los derechos. Nada en esta licencia pretende reducir o restringir cualesquiera l\u00edmites legales de los derechos exclusivos del titular de los derechos de propiedad intelectual de acuerdo con la Ley de propiedad intelectual o cualesquiera otras leyes aplicables, ya sean derivados de usos leg\u00edtimos, tales como la copia privada o la cita, u otras limitaciones como la resultante de la primera venta de ejemplares (agotamiento). 3. Concesi\u00f3n de licencia. Conforme a los t\u00e9rminos y a las condiciones de esta licencia, el licenciador concede, por el plazo de protecci\u00f3n de los derechos de propiedad intelectual y a t\u00edtulo gratuito, una licencia de \u00e1mbito mundial no exclusiva que incluye los derechos siguientes: Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n. Derecho a incorporar la obra o la prestaci\u00f3n en una o m\u00e1s colecciones. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n l\u00edcitamente incorporada en una colecci\u00f3n. Derecho de transformaci\u00f3n de la obra para crear una obra derivada siempre y cuando se incluya en \u00e9sta una indicaci\u00f3n de la transformaci\u00f3n o modificaci\u00f3n efectuada. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de obras derivadas creadas a partir de la obra licenciada. Derecho a extraer y reutilizar la obra o la prestaci\u00f3n de una base de datos. Para evitar cualquier duda, el titular originario: Conserva el derecho a percibir las remuneraciones o compensaciones previstas por actos de explotaci\u00f3n de la obra o prestaci\u00f3n, calificadas por la ley como irrenunciables e inalienables y sujetas a gesti\u00f3n colectiva obligatoria. Renuncia al derecho exclusivo a percibir, tanto individualmente como mediante una entidad de gesti\u00f3n colectiva de derechos, cualquier remuneraci\u00f3n derivada de actos de explotaci\u00f3n de la obra o prestaci\u00f3n que usted realice. Estos derechos se pueden ejercitar en todos los medios y formatos, tangibles o intangibles, conocidos en el momento de la concesi\u00f3n de esta licencia. Los derechos mencionados incluyen el derecho a efectuar las modificaciones que sean precisas t\u00e9cnicamente para el ejercicio de los derechos en otros medios y formatos. Todos los derechos no concedidos expresamente por el licenciador quedan reservados, incluyendo, a t\u00edtulo enunciativo pero no limitativo, los derechos morales irrenunciables reconocidos por la ley aplicable. En la medida en que el licenciador ostente derechos exclusivos previstos por la ley nacional vigente que implementa la directiva europea en materia de derecho sui generis sobre bases de datos, renuncia expresamente a dichos derechos exclusivos. 4. Restricciones. La concesi\u00f3n de derechos que supone esta licencia se encuentra sujeta y limitada a las restricciones siguientes: Usted puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n solamente bajo los t\u00e9rminos de esta licencia y debe incluir una copia de la misma, o su Identificador Uniforme de Recurso (URI). Usted no puede ofrecer o imponer ninguna condici\u00f3n sobre la obra o prestaci\u00f3n que altere o restrinja los t\u00e9rminos de esta licencia o el ejercicio de sus derechos por parte de los concesionarios de la misma. Usted no puede sublicenciar la obra o prestaci\u00f3n. Usted debe mantener intactos todos los avisos que se refieran a esta licencia y a la ausencia de garant\u00edas. Usted no puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n con medidas tecnol\u00f3gicas que controlen el acceso o el uso de una manera contraria a los t\u00e9rminos de esta licencia. Esta secci\u00f3n 4.a tambi\u00e9n afecta a la obra o prestaci\u00f3n incorporada en una colecci\u00f3n, pero ello no implica que \u00e9sta en su conjunto quede autom\u00e1ticamente o deba quedar sujeta a los t\u00e9rminos de la misma. En el caso que le sea requerido, previa comunicaci\u00f3n del licenciador, si usted incorpora la obra en una colecci\u00f3n y/o crea una obra derivada, deber\u00e1 quitar cualquier cr\u00e9dito requerido en el apartado 4.b, en la medida de lo posible. Si usted reproduce, distribuye o comunica p\u00fablicamente la obra o la prestaci\u00f3n, una colecci\u00f3n que la incorpore o cualquier obra derivada, debe mantener intactos todos los avisos sobre la propiedad intelectual e indicar, de manera razonable conforme al medio o a los medios que usted est\u00e9 utilizando: El nombre del autor original, o el seud\u00f3nimo si es el caso, as\u00ed como el del titular originario, si le es facilitado. El nombre de aquellas partes (por ejemplo: instituci\u00f3n, publicaci\u00f3n, revista) que el titular originario y/o el licenciador designen para ser reconocidos en el aviso legal, las condiciones de uso, o de cualquier otra manera razonable. El t\u00edtulo de la obra o la prestaci\u00f3n si le es facilitado. El URI, si existe, que el licenciador especifique para ser vinculado a la obra o la prestaci\u00f3n, a menos que tal URI no se refiera al aviso legal o a la informaci\u00f3n sobre la licencia de la obra o la prestaci\u00f3n. En el caso de una obra derivada, un aviso que identifique la transformaci\u00f3n de la obra en la obra derivada (p. ej., \"traducci\u00f3n castellana de la obra de Autor Original,\" o \"gui\u00f3n basado en obra original de Autor Original\"). Este reconocimiento debe hacerse de manera razonable. En el caso de una obra derivada o incorporaci\u00f3n en una colecci\u00f3n estos cr\u00e9ditos deber\u00e1n aparecer como m\u00ednimo en el mismo lugar donde se hallen los correspondientes a otros autores o titulares y de forma comparable a los mismos. Para evitar la duda, los cr\u00e9ditos requeridos en esta secci\u00f3n s\u00f3lo ser\u00e1n utilizados a efectos de atribuci\u00f3n de la obra o la prestaci\u00f3n en la manera especificada anteriormente. Sin un permiso previo por escrito, usted no puede afirmar ni dar a entender impl\u00edcitamente ni expl\u00edcitamente ninguna conexi\u00f3n, patrocinio o aprobaci\u00f3n por parte del titular originario, el licenciador y/o las partes reconocidas hacia usted o hacia el uso que hace de la obra o la prestaci\u00f3n. Para evitar cualquier duda, debe hacerse notar que las restricciones anteriores (p\u00e1rrafos 4.a y 4.b) no son de aplicaci\u00f3n a aquellas partes de la obra o la prestaci\u00f3n objeto de esta licencia que \u00fanicamente puedan ser protegidas mediante el derecho sui generis sobre bases de datos recogido por la ley nacional vigente implementando la directiva europea de bases de datos 5. Exoneraci\u00f3n de responsabilidad A MENOS QUE SE ACUERDE MUTUAMENTE ENTRE LAS PARTES, EL LICENCIADOR OFRECE LA OBRA O LA PRESTACI\u00d3N TAL CUAL (ON AN \"AS-IS\" BASIS) Y NO CONFIERE NINGUNA GARANT\u00cdA DE CUALQUIER TIPO RESPECTO DE LA OBRA O LA PRESTACI\u00d3N O DE LA PRESENCIA O AUSENCIA DE ERRORES QUE PUEDAN O NO SER DESCUBIERTOS. ALGUNAS JURISDICCIONES NO PERMITEN LA EXCLUSI\u00d3N DE TALES GARANT\u00cdAS, POR LO QUE TAL EXCLUSI\u00d3N PUEDE NO SER DE APLICACI\u00d3N A USTED. 6. Limitaci\u00f3n de responsabilidad. SALVO QUE LO DISPONGA EXPRESA E IMPERATIVAMENTE LA LEY APLICABLE, EN NING\u00daN CASO EL LICENCIADOR SER\u00c1 RESPONSABLE ANTE USTED POR CUALESQUIERA DA\u00d1OS RESULTANTES, GENERALES O ESPECIALES (INCLUIDO EL DA\u00d1O EMERGENTE Y EL LUCRO CESANTE), FORTUITOS O CAUSALES, DIRECTOS O INDIRECTOS, PRODUCIDOS EN CONEXI\u00d3N CON ESTA LICENCIA O EL USO DE LA OBRA O LA PRESTACI\u00d3N, INCLUSO SI EL LICENCIADOR HUBIERA SIDO INFORMADO DE LA POSIBILIDAD DE TALES DA\u00d1OS. 7. Finalizaci\u00f3n de la licencia Esta licencia y la concesi\u00f3n de los derechos que contiene terminar\u00e1n autom\u00e1ticamente en caso de cualquier incumplimiento de los t\u00e9rminos de la misma. Las personas o entidades que hayan recibido de usted obras derivadas o colecciones bajo esta licencia, sin embargo, no ver\u00e1n sus licencias finalizadas, siempre que tales personas o entidades se mantengan en el cumplimiento \u00edntegro de esta licencia. Las secciones 1, 2, 5, 6, 7 y 8 permanecer\u00e1n vigentes pese a cualquier finalizaci\u00f3n de esta licencia. Conforme a las condiciones y t\u00e9rminos anteriores, la concesi\u00f3n de derechos de esta licencia es vigente por todo el plazo de protecci\u00f3n de los derechos de propiedad intelectual seg\u00fan la ley aplicable. A pesar de lo anterior, el licenciador se reserva el derecho a divulgar o publicar la obra o la prestaci\u00f3n en condiciones distintas a las presentes, o de retirar la obra o la prestaci\u00f3n en cualquier momento. No obstante, ello no supondr\u00e1 dar por concluida esta licencia (o cualquier otra licencia que haya sido concedida, o sea necesario ser concedida, bajo los t\u00e9rminos de esta licencia), que continuar\u00e1 vigente y con efectos completos a no ser que haya finalizado conforme a lo establecido anteriormente, sin perjuicio del derecho moral de arrepentimiento en los t\u00e9rminos reconocidos por la ley de propiedad intelectual aplicable. 8. Miscel\u00e1nea Cada vez que usted realice cualquier tipo de explotaci\u00f3n de la obra o la prestaci\u00f3n, o de una colecci\u00f3n que la incorpore, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra o la prestaci\u00f3n en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Cada vez que usted realice cualquier tipo de explotaci\u00f3n de una obra derivada, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra objeto de esta licencia en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Si alguna disposici\u00f3n de esta licencia resulta inv\u00e1lida o inaplicable seg\u00fan la Ley vigente, ello no afectar\u00e1 la validez o aplicabilidad del resto de los t\u00e9rminos de esta licencia y, sin ninguna acci\u00f3n adicional por cualquiera las partes de este acuerdo, tal disposici\u00f3n se entender\u00e1 reformada en lo estrictamente necesario para hacer que tal disposici\u00f3n sea v\u00e1lida y ejecutiva. No se entender\u00e1 que existe renuncia respecto de alg\u00fan t\u00e9rmino o disposici\u00f3n de esta licencia, ni que se consiente violaci\u00f3n alguna de la misma, a menos que tal renuncia o consentimiento figure por escrito y lleve la firma de la parte que renuncie o consienta. Esta licencia constituye el acuerdo pleno entre las partes con respecto a la obra o la prestaci\u00f3n objeto de la licencia. No caben interpretaciones, acuerdos o condiciones con respecto a la obra o la prestaci\u00f3n que no se encuentren expresamente especificados en la presente licencia. El licenciador no estar\u00e1 obligado por ninguna disposici\u00f3n complementaria que pueda aparecer en cualquier comunicaci\u00f3n que le haga llegar usted. Esta licencia no se puede modificar sin el mutuo acuerdo por escrito entre el licenciador y usted.","title":"CF manual firmas pdf"},{"location":"markdown_strict/CF_manual-firmas-pdf/#introduccion","text":"El Cliente de Firma es una herramienta de Firma Electr\u00f3nica que funciona en forma de Applet de Java integrado en una p\u00e1gina Web mediante JavaScript. El Cliente hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados ( keystore ) del navegador web ( Internet Explorer, Mozilla, Firefox ) o el sistema operativo as\u00ed como de los que est\u00e9n en dispositivos (tarjetas inteligentes , dispositivos USB ) configurados en el mismo (el caso de los DNI-e). El Cliente de Firma, como su nombre indica, es una aplicaci\u00f3n que se ejecuta en cliente (en el ordenador del usuario, no en el servidor Web). Esto es as\u00ed para evitar que la clave privada asociada a un certificado tenga que \u201csalir\u201d del contenedor del usuario (tarjeta, dispositivo USB o navegador) ubicado en su PC. De hecho, nunca llega a salir del navegador, el Cliente le env\u00eda los datos a firmar y \u00e9ste los devuelve firmados. El Cliente de Firma contiene las interfaces y componentes web necesarios para la realizaci\u00f3n de los siguientes procesos (adem\u00e1s de otros auxiliares como c\u00e1lculos de hash, lectura de ficheros, etc\u2026): Firma de formularios Web. Firma de datos y ficheros. Multifirma masiva de datos y ficheros. Cofirma (CoSignature) Multifirma al mismo nivel. Contrafirma (CounterSignature) Multifirma en cascada. Como complemento al cliente de firma, se encuentra un cliente de cifrado que nos permite realizar las funciones de encriptaci\u00f3n y desencriptaci\u00f3n de datos atendiendo a diferentes algoritmos y configuraciones. Adem\u00e1s permite la generaci\u00f3n de sobres digitales.","title":"Introducci\u00f3n"},{"location":"markdown_strict/CF_manual-firmas-pdf/#objetivos","text":"El objetivo del presente documento es reflejar las capacidades del Cliente @firma en cuanto a firmas electr\u00f3nicas de documentos PDF ( Portable Document Format ), las peculiaridades de este relativas a este formato, sus opciones de configuraci\u00f3n y su compatibilidad.","title":"Objetivos"},{"location":"markdown_strict/CF_manual-firmas-pdf/#formato-de-firma-pdf-portable-document-format","text":"El cliente soporta firmas en formato PDF / ISO 32000-1 mediante algoritmo RSA y huellas digitales seg\u00fan algoritmos SHA-1 y SHA-2, de forma acorde a las especificaciones de Adobe. Este tipo de firma consiste, b\u00e1sicamente, en la inclusi\u00f3n de una estructura de firma CAdES en un espacio reservado dentro del documento PDF que se firma. Las firmas de los documentos PDF realizadas por el cliente no son visibles directamente , es decir, no tienen representaci\u00f3n gr\u00e1fica dentro del documento.","title":"Formato de firma PDF (Portable Document Format)"},{"location":"markdown_strict/CF_manual-firmas-pdf/#soporte-de-firmas-pdf-avanzadas-pades","text":"La versi\u00f3n actual del Cliente @firma genera firmas electr\u00f3nicas compatibles con la especificaci\u00f3n PAdES ( http://pda.etsi.org/pda/ ) de un modo completamente compatible con la versi\u00f3n 9.3.2 de Adobe Reader y con la normativa ISO 32000-1. Todas las firmas PDF realizadas por el Cliente son simult\u00e1neamente compatibles con la normativa ISO 32000-1 y el est\u00e1ndar PAdES. Las firmas electr\u00f3nicas introducidas pueden generarse como PAdES-B\u00e1sicas (firmas avanzadas b\u00e1sicas) o PAdES-EPES (firmas avanzadas acordes a pol\u00edtica), siendo necesario en este \u00faltimo caso introducir los datos de la pol\u00edtica de firma tal y como se describe en la documentaci\u00f3n general del Cliente @firma (JavaDoc del Applet y apartado 8.5.4 del Manual del Integrador): setPolicy(String identifier, String description, String qualifier, String hashB64) A nivel t\u00e9cnico, los datos de firma electr\u00f3nica empotrados dentro de la estructura PDF equivalen a una firma CAdES . En caso de firmarse con un algoritmo de firma con huella digital SHA1, la firma incluir\u00e1 el atributo firmado SigningCertificate (opci\u00f3n recomendada por el est\u00e1ndar para este algoritmo), mientras que con cualquier otro algoritmo se incluir\u00e1 el atributo SigningCertificateV2 . Este comportamiento se puede variar indicando expl\u00edcitamente si deseamos usar o no la versi\u00f3n 2 del atributo. Esto se har\u00e1 mediante el m\u00e9todo del Applet (que es posible invocar v\u00eda JavaScript): clienteFirma.addExtraParam(String paramName, String paramValue), y el siguiente uso: clienteFirma.addExtraParam(\u201csigningCertificateV2\u201d, \u201ctrue\u201d); Desde la invocaci\u00f3n de este m\u00e9todo todas las firmas PAdES que se realicen hasta el reinicio del Applet tendr\u00e1n la forma V2 del atributo Signing Certificate. Si queremos restablecer el comportamiento normal de generaci\u00f3n en la forma V1 debemos invocar el paso de par\u00e1metro adicional de este otra forma: clienteFirma.addExtraParam(\u201csigningCertificateV2\u201d, \u201cfalse\u201d); El Cliente no soporta la firma de adjuntos a los documentos PDF en ninguna variante ni formato. No obstante, si el Cliente detecta que un PDF contiene ficheros adjuntos o empotrados, imprimir\u00e1 una advertencia en la consola Java.","title":"Soporte de firmas PDF Avanzadas (PAdES)"},{"location":"markdown_strict/CF_manual-firmas-pdf/#generacion-de-pades-bes","text":"Como se ha comentado anteriormente, las firmas generadas por defecto corresponden al formato PAdES-B\u00e1sicas, lo cual quiere decir que la firma insertada en el PDF es compatible con CMS ( Cryptographic Message Syntax ) y se etiqueta en el diccionario PDF como adbe.pkcs7.detached. No obstante, es posible forzar la creaci\u00f3n de firmas PAdES-BES, que se diferencian de las PAdES-B\u00e1sicas en que la firma es compatible con CAdES y se etiqueta en el diccionario PDF como ETSI.CAdES.detached. Para realizar esto es necesario indicar este valor de etiqueta en el par\u00e1metro adicional signatureSubFilter, lo cual puede hacerse desde el Cliente @firma mediante la siguiente sentencia JavaScript: clienteFirma.addExtraParam(\u201csignatureSubFilter\u201d, \u201cETSI.CAdES.detached\u201d);","title":"Generaci\u00f3n de PAdES-BES"},{"location":"markdown_strict/CF_manual-firmas-pdf/#soporte-de-pdf-cifrados-o-protegidos-con-contrasena","text":"El Cliente @firma soporta la firma de ficheros PDF cifrados o protegidos con contrase\u00f1a, con las siguientes excepciones: No se soporta el algoritmo de cifrado AES256 ni otros algoritmos introducidos posteriormente a la aceptaci\u00f3n de este en la normativa PDF y el en programa Adobe Acrobat / Adobe Reader. No se soportan cifrados basados en certificados digitales. En este sentido, el m\u00f3dulo permite establecer ciertos comportamientos por defecto, consulte con la documentaci\u00f3n JavaDoc para mayor informaci\u00f3n (clase es.gob.afirma.signers.pades.AOPDFSigner), especialmente si realiza firmas PDF en modos no interactivos (firmas por lotes / firmas masivas).","title":"Soporte de PDF Cifrados o protegidos con contrase\u00f1a"},{"location":"markdown_strict/CF_manual-firmas-pdf/#uso-de-las-firmas-pdf-desde-el-cliente-firma","text":"El formato de firma PDF est\u00e1 \u00fanicamente disponible en la construcci\u00f3n Completa del cliente de firma. Para realizar una firma en este formato s\u00f3lo es necesario configurarlo como formato de firma mediante el m\u00e9todo del Applet cliente: setSignatureFormat(String format) Puede llamarse a esta funci\u00f3n desde las p\u00e1ginas Web que integren el cliente por medio de la sentencia JavaScript: clienteFirma.setSignatureFormat(String format) Esto configurar\u00e1 el cliente de firma para realizar firmas PDF, siendo necesario tambi\u00e9n completar la configuraci\u00f3n del cliente que se considere necesaria (algoritmo de firma, tratamiento de errores,\u2026), establecer los datos que se desean firmar (no es posible realizar firmas PDF a partir del hash de un documento) y ordenar el proceso de firma.","title":"Uso de las firmas PDF desde el cliente @firma"},{"location":"markdown_strict/CF_manual-firmas-pdf/#creacion-de-una-firma-visible","text":"El Applet Cliente @firma permite la creaci\u00f3n de firmas visibles dentro de un documento PDF, que son lo son tanto en pantalla (por ejemplo, usando Adobe Reader) como en papel una vez impreso el documento. < Para ello debemos indicar, mediante par\u00e1metros adicionales, la p\u00e1gina en donde situar la visualizaci\u00f3n de la firma (solo puede haber una, en una \u00fanica p\u00e1gina) y sus coordenadas dentro de esta. Las coordenadas de la visualizaci\u00f3n se indican partiendo de la esquina inferior izquierda, seg\u00fan el siguiente diagrama: < Estas coordenadas, as\u00ed como la p\u00e1gina de inserci\u00f3n se establecen usando los par\u00e1metros adicionales, por ejemplo: signaturePositionOnPageLowerLeftX = 100 signaturePositionOnPageLowerLeftY = 100 signaturePositionOnPageUpperRightX = 200 signaturePositionOnPageUpperRightY = 200 signaturePositionOnPageUpperRightX = 200 signaturePage = 1 Los documentos PDF comienzan su numeraci\u00f3n de p\u00e1ginas desde uno (1). Si se indica -666 como p\u00e1gina se usa la \u00faltima p\u00e1gina del documento. Dentro del recuadro marcado por las coordenadas indicadas, es posible mostrar distintos elementos: < Una imagen: En este caso debe indicarse qu\u00e9 imagen a usar aportando el binario en formato JPEG codificado en Base64. signatureRubricImage = AGFGSFH\u2026 La imagen de deforma para adaptarse a las dimensiones del recuadro marcado por las coordenadas, por lo que es importante que ambos tengan la misma relaci\u00f3n de aspecto. < Texto (que puede combinarse con una imagen) Es necesario indicar no solo el texto a sobreimprimir en el cuadro visible, sino tambi\u00e9n indicaciones sobre su formato (tipo de letra y su tama\u00f1o, color, etc.). El texto introduce de forma autom\u00e1tica los retornos de carro necesarios para adaptarse al recuadro. El texto aparece siempre sobre la imagen indicada, si se indic\u00f3 alguna. Los par\u00e1metros para indicar el formato son: layer2Text Texto a escribir dentro de la firma visible. Este texto se escribe \u00fanicamente si no se ha especificado una imagen de r\u00fabrica, y necesita que se indique la p\u00e1gina y la situaci\u00f3n d\u00f3nde mostrar el recuadro de firma mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY, signaturePositionOnPageUpperRightX, signaturePositionOnPageUpperRightY y signaturePage. layer2FontFamily Tipo de letra a usar en el texto de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son: 0 = Courier (tipo por defecto) 1 = Helv\u00e9tica 2 = Times Roman 3 = Symbol 4 = ZapfDingBats layer2FontSize Tama\u00f1o de letra a usar en el texto de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos (y el valor por defecto es 12). layer2FontStyle Estilo del tipo de letra a usar en el texto de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos, correspondiendo: 0 = Normal (estilo por defecto) 1 = Negrita 2 = Cursiva 3 = Negrita y cursiva 4 = Subrayado 8 = Tachado Es posible combinar estilos aplicando la operaci\u00f3n l\u00f3gica o sobre los valores num\u00e9ricos a combinar. layer2FontColor Color del texto de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son textuales (se ignora entre may\u00fasculas y min\u00fasculas), soport\u00e1ndose: black = Negro (color por defecto) white = Blanco gray = Gris lightGray = Gris claro darkGray = Gris oscuro red = Rojo pink = Rosa","title":"Creaci\u00f3n de una firma visible"},{"location":"markdown_strict/CF_manual-firmas-pdf/#insercion-de-una-imagen-en-un-documento-pdf-antes-de-ser-firmado","text":"Como ayuda principalmente a la inserci\u00f3n de C\u00f3digos Seguros de Validaci\u00f3n (CSV), existe la capacidad de insertar una imagen en un documento PDF justo antes de que se produzca la firma. Para ello, debemos indicar primero una p\u00e1gina y una zona dentro de esta para insertar la imagen, usando para ello el mismo sistema de coordenadas descrito en la secci\u00f3n \u201c12.1\u201d, es decir, a partir de la esquina inferior izquierda. La imagen debe proporcionarse en formato JPEG codificado en Base64. Para indicar la p\u00e1gina, podemos usar su n\u00famero (empezando a contar desde uno como primera p\u00e1gina), usar -1 para referirnos a la \u00faltima p\u00e1gina del documento o 0 (cero) para insertar la imagen en todas las p\u00e1ginas. Es importante recalcar que la imagen se deforma para adaptarse al recuadro marcado por las coordenadas, siendo \u00fatil para evitar este efecto que ambos tengan la misma relaci\u00f3n de aspecto. Igualmente, no se proporcionan funcionalidades de rotado, por lo que si se quiere insertar una imagen de lado (por ejemplo, en el margen de la p\u00e1gina, esta debe venir rotada en origen. Los par\u00e1metros adicionales a usar para la inserci\u00f3n de im\u00e1genes son: image Imagen que se desea insertar en el PDF antes de que este sea firmado. La imagen debe proporcionarse en formato JPEG codificado en Base64. Si el documento ya contiene firmas es posible que se invaliden, por lo que conviene usarlo \u00fanicamente en documentos sin firmas previas. imagePage P\u00e1gina donde desea insertarse la imagen indicada mediante el par\u00e1metro image. La numeraci\u00f3n de las p\u00e1ginas comienza en uno. Si se indica -1 como n\u00famero de p\u00e1gina se inserta la imagen en la \u00faltima p\u00e1gina del documento. Si se indica 0 como n\u00famero de p\u00e1gina se inserta la imagen en todas las p\u00e1ginas del documento. Este par\u00e1metro es obligatorio, si no se indica una p\u00e1gina v\u00e1lida no se insertar\u00e1 la imagen. imagePositionOnPageLowerLeftX Coordenada horizontal inferior izquierda de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftY, imagePositionOnPageUpperRightX e imagePositionOnPageUpperRightY. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage. imagePositionOnPageLowerLeftY Coordenada vertical inferior izquierda de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftX, imagePositionOnPageUpperRightX e imagePositionOnPageUpperRightY. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage. imagePositionOnPageUpperRightX Coordenada horizontal superior derecha de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftX, imagePositionOnPageLowerLeftY e imagePositionOnPageUpperRightY. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage. imagePositionOnPageUpperRightY Coordenada vertical superior derecha de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftX, imagePositionOnPageLowerLeftY e imagePositionOnPageUpperRightX. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage.","title":"Inserci\u00f3n de una imagen en un documento PDF antes de ser firmado"},{"location":"markdown_strict/CF_manual-firmas-pdf/#parametros-de-funcionamiento","text":"Cadena de identificaci\u00f3n de formato (dos variantes aceptadas, se ignoran may\u00fasculas y min\u00fasculas): \"PDF\" / \"Adobe PDF\" Se ignorar\u00e1 cualquier indicaci\u00f3n del modo de firma (impl\u00edcito o expl\u00edcito). Los algoritmos de firma MD2withRSA o MD5withRSA no se soportan por estar obsoletos y ser inseguros. Ficheros de entrada Adobe PDF / ISO 32000 (*.pdf) Ficheros de salida Adobe PDF / ISO 32000 (*.pdf) A modo de ejemplo, la llamada para establecer el modo de funcionamiento de firmas PDF se usar\u00eda la siguiente llamada: clienteFirma.setSignatureFormat(\u201cPDF\u201d);","title":"Par\u00e1metros de funcionamiento"},{"location":"markdown_strict/CF_manual-firmas-pdf/#documentos-pdf-cifrados-o-protegidos-con-contrasena","text":"El Cliente @firma permite firmar documentos PDF protegidos con contrase\u00f1a, tanto con una protecci\u00f3n de apertura (cifrado completo) como con una protecci\u00f3n contra modificaciones. Para firmar correctamente estos documentos se puede operar de dos formas: Modo interactivo Si no hemos indicado una operaci\u00f3n desatendida mediante el \u201cpar\u00e1metro adicional\u201d headLess el propio Cliente @firma solicitar\u00e1 mediante di\u00e1logos gr\u00e1ficos las contrase\u00f1as necesarias al usuario. Modo desatendido Podemos proporcionar las contrase\u00f1as mediante \u201cpar\u00e1metros adicionales\u201d, evitando de este modo los di\u00e1logos gr\u00e1ficos. Los par\u00e1metros que se pueden usar para este fin son: ownerPassword Contrase\u00f1a de apertura del documento. Si se proporciona para un documento que \u00fanicamente est\u00e1 protegido contra modificaciones resultar\u00e1 en un documento protegido contra apertura con esa misma contrase\u00f1a. userPassword Contrase\u00f1a para la realizaci\u00f3n de modificaciones en el documento. Por lo general, para garantizar la ausencia total de di\u00e1logos gr\u00e1ficos deber\u00e1 usarse tambi\u00e9n el par\u00e1metro headLess con el valor true.","title":"Documentos PDF cifrados o protegidos con contrase\u00f1a"},{"location":"markdown_strict/CF_manual-firmas-pdf/#metadatos-adicionales-en-los-pdf-firmados","text":"Los ficheros PDF firmados pueden incluir una serie de metadatos adicionales (que no est\u00e1n contenidos en la propia firma, sino en el diccionario de metadatos del PDF) acerca de la firma. En @firma, es posible establecer estos metadatos mediante el uso de \u201cpar\u00e1metros adicionales\u201d. Los \u201cpar\u00e1metros adicionales\u201d admitidos en este sentido son: signReason Raz\u00f3n por la que se realiza la firma. signatureProductionCity Ciudad en la que se realiza la firma. signerContact Contacto del firmante, usualmente una direcci\u00f3n de coreo electr\u00f3nico. Las nombres de las propiedades deben escribirse tal y como figuran, respetando may\u00fasculas y min\u00fasculas. Para m\u00e1s informaci\u00f3n sobre el establecimiento de \u201cpar\u00e1metros adicionales\u201d en @firma consulte con el Manual del Integrador. Para el establecimiento program\u00e1tico desde Java de par\u00e1metros adicionales consulte con el JavaDoc.","title":"Metadatos adicionales en los PDF firmados"},{"location":"markdown_strict/CF_manual-firmas-pdf/#pdf-con-rubrica","text":"Es posible insertar una representaci\u00f3n gr\u00e1fica de firma en los documentos PDF. Esta representaci\u00f3n s\u00f3lo puede aparecer en una p\u00e1gina del PDF y puede ser una imagen establecida por el integrador, muy \u00fatil para agregar la r\u00fabrica de la firma del usuario si se debe imprimir el documento, o un texto. En @firma, es posible configurar este comportamiento mediante los \u201cpar\u00e1metros adicionales\u201d. Concretamente, los par\u00e1metros que existen para configurar la representaci\u00f3n gr\u00e1fica de la firma son: signaturePage P\u00e1gina del documento PDF donde insertar la firma. Este par\u00e1metro se ignora si se ha establecido valor al par\u00e1metro signatureField, y necesita que se establezcan valores v\u00e1lidos a los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY, signaturePositionOnPageUpperRightX y signaturePositionOnPageUpperRightY. signaturePositionOnPageLowerLeftX Coordenada horizontal inferior izquierda de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftY, signaturePositionOnPageUpperRightX y signaturePositionOnPageUpperRightY. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento. signaturePositionOnPageLowerLeftY Coordenada vertical inferior izquierda de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageUpperRightX y signaturePositionOnPageUpperRightY. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento. signaturePositionOnPageUpperRightX Coordenada horizontal superior derecha de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY y signaturePositionOnPageUpperRightY. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento. signaturePositionOnPageUpperRightY Coordenada vertical superior derecha de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY y signaturePositionOnPageUpperRightX. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento. signatureRubricImage Imagen JPEG codificada en Base64 de la r\u00fabrica de la firma manuscrita que se desea aparezca como firma visible en el PDF. layer2Text Texto a escribir dentro de la \"capa 2\" de la firma visible. Este texto se escribe \u00fanicamente si no se ha especificado una imagen de r\u00fabrica, y necesita que se indique la p\u00e1gina y la situaci\u00f3n d\u00f3nde mostrar el recuadro de firma mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY, signaturePositionOnPageUpperRightX, signaturePositionOnPageUpperRightY y signaturePage. layer2FontFamily Tipo de letra a usar en el texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos, correspondiendo: 0 = Courier (tipo por defecto) 1 = Helv\u00e9tica 2 = Times Roman 3 = Symbol 4 = ZapfDingBats layer2FontSize Tama\u00f1o de letra a usar en el texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos (y el valor por defecto es 12). layer2FontStyle Estilo del tipo de letra a usar en el texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos, correspondiendo: 0 = Normal (estilo por defecto) 1 = Negrita 2 = Cursiva 3 = Negrita y cursiva 4 = Subrayado 8 = Tachado Es posible combinar estilos aplicando la operaci\u00f3n l\u00f3gica o sobre los valores num\u00e9ricos a combinar. layer2FontColor Color del texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son textuales (se ignora entre may\u00fasculas y min\u00fasculas), soport\u00e1ndose: black = Negro (color por defecto) white = Blanco gray = Gris lightGray = Gris claro darkGray = Gris oscuro red = Rojo pink = Rosa","title":"PDF con r\u00fabrica"},{"location":"markdown_strict/CF_manual-firmas-pdf/#cofirmas-en-pdf-firmas-en-serie","text":"Los documentos PDF pueden ser \u201cmultifirmados\u201d mediante el m\u00f3dulo, pero debe observarse la siguientes peculiaridades: Las cofirmas PDF son en realidad m\u00faltiples firmas aplicadas sobre un mismo documento sobre el que se crean revisiones, con el siguiente funcionamiento: La primera firma aplicada aplica al documento original. La segunda firma crea una nueva revisi\u00f3n del documento, que contiene el documento original m\u00e1s la primera firma , y esta la revisi\u00f3n firmada. Cada firma adicional crea una nueva revisi\u00f3n que contiene tanto el documento original como las firmas anteriores. Una cofirma PDF, responde m\u00e1s al concepto de documento \u201cmultifirmado\u201d que al concepto de cofirma aplicado a firmas CMS o XMLDSig, ya que internamente el PDF no contiene una \u00fanica estructura PKCS#7 con las firmas / cofirmas, sino varias estructuras PKCS#7. El formato PDF permite, tras una firma digital, sellar el documento para evitar que se a\u00f1ada contenido adicional tras la firma. Dado que esto evitar\u00eda la posibilidad de a\u00f1adir nuevas firmas, el m\u00f3dulo no sella los documentos, posibilitando la anexi\u00f3n de nuevo contenido al documento. No obstante, la primera firma aplicar\u00e1 \u00fanicamente al contenido original, aspecto que se indicar\u00e1 (por el programa Adobe Reader) como advertencia. Este aspecto en absoluto invalida la firma. El formato PDF permite reservar espacio para firmas de modo que no sea necesario anexar contenido al a\u00f1adir firmas digitales adicionales (tras una primera firma), ya que estas se alojan en estos espacios reservados. Pero dado que es necesario determinar a priori el n\u00famero de espacios a reservar (uno por cada firma digital adicional a la primera) y que el cliente carece de esta informaci\u00f3n, no se reserva ning\u00fan espacio. Cada firma adicional a la primera supone un contenido anexado al documento. Al ser las firmas adicionales a la primera contenido anexo, no existente en el momento de realizar la primera operaci\u00f3n de firma, esta no las reflejar\u00e1, indicando mediante una advertencia que se ha a\u00f1adido contenido adicional , pero igualmente informando que el contenido firmado no ha sufrido alteraciones. El cliente no puede cofirmar documentos PDF sellados . No es posible realizar cofirmas a partir de un hash. NOTA IMPORTANTE: No todos los documentos PDF permiten a\u00f1adir firmas adicionales una vez se ha completado y cerrado el proceso de la primera firma. El a\u00f1adir firmas adicionales en un documento PDF que no est\u00e1 preparado para ello puede invalidar la primera firma . El cliente @Firma firma siempre los documentos de forma que sea posible a\u00f1adir firmas adicionales sin que ninguna quede invalidada, pero otros productos (por ejemplo Adobe Acrobat) no permiten esta opci\u00f3n. Antes de cofirmar un documento PDF cerci\u00f3rese de que \u00e9ste admite firmas adiciones. Si no est\u00e1 seguro de esta caracter\u00edstica compruebe, tras a\u00f1adir las firmas adicionales, si alguna firma se ha invalidado y en ese caso descarte el documento generado.","title":"Cofirmas en PDF (Firmas en serie)"},{"location":"markdown_strict/CF_manual-firmas-pdf/#contrafirmas-en-pdf","text":"El m\u00f3dulo de firmas PDF no soporta contrafirmas.","title":"Contrafirmas en PDF"},{"location":"markdown_strict/CF_manual-firmas-pdf/#informacion-de-utilidad","text":"Informaci\u00f3n sobre el formato PDF: http://www.adobe.com Normativa PKCS#7: http://www.rsa.com/rsalabs/node.asp?id=2129","title":"Informaci\u00f3n de utilidad"},{"location":"markdown_strict/CF_manual-firmas-pdf/#glosario-de-terminos","text":"","title":"Glosario de t\u00e9rminos"},{"location":"markdown_strict/CF_manual-firmas-pdf/#firma-electronica","text":"Es el conjunto de datos, en forma electr\u00f3nica, anejos a otros datos electr\u00f3nicos o asociados funcionalmente con ellos, utilizados como medio para identificar formalmente al autor o a los autores del documento que la recoge.","title":"Firma electr\u00f3nica"},{"location":"markdown_strict/CF_manual-firmas-pdf/#xml-digital-signature-xmldsig","text":"Es una recomendaci\u00f3n del W3C que define una sintaxis XML para la firma digital","title":"XML Digital Signature (XMLDSig)"},{"location":"markdown_strict/CF_manual-firmas-pdf/#xml-advanced-signature-xades","text":"Es un conjunto de extensiones a las recomendaciones XML-DSig haci\u00e9ndolas adecuadas para la firma electr\u00f3nica avanzada.","title":"XML Advanced Signature (XAdES)"},{"location":"markdown_strict/CF_manual-firmas-pdf/#rsa","text":"Es un sistema criptogr\u00e1fico de clave p\u00fablica desarrollado en 1977. En la actualidad, RSA es el primer y m\u00e1s utilizado algoritmo de este tipo y es v\u00e1lido tanto para cifrar como para firmar digitalmente.","title":"RSA"},{"location":"markdown_strict/CF_manual-firmas-pdf/#xml","text":"Es un metalenguaje extensible de etiquetas desarrollado por el World Wide Web Consortium (W3C). Es una simplificaci\u00f3n y adaptaci\u00f3n del SGML y permite definir la gram\u00e1tica de lenguajes espec\u00edficos (de la misma manera que HTML es a su vez un lenguaje definido por SGML). Por lo tanto XML no es realmente un lenguaje en particular, sino una manera de definir lenguajes para diferentes necesidades. Algunos de estos lenguajes que usan XML para su definici\u00f3n son XHTML, SVG, MathML.","title":"XML"},{"location":"markdown_strict/CF_manual-firmas-pdf/#office-open-xml-ooxml","text":"Es un formato de archivo abierto y est\u00e1ndar cuyas extensiones m\u00e1s comunes son .docx, .xlsx y .pptx. Se le utiliza para representar y almacenar hojas de c\u00e1lculo, diagramas, presentaciones y documentos de texto. Un archivo Office Open XML contiene principalmente datos basados en el lenguaje de marcado XML, comprimidos en un contenedor .zip espec\u00edfico.","title":"Office Open XML (OOXML)"},{"location":"markdown_strict/CF_manual-firmas-pdf/#open-document-format-odf","text":"Es un formato de fichero est\u00e1ndar para el almacenamiento de documentos ofim\u00e1ticos tales como hojas de c\u00e1lculo, memorandos, gr\u00e1ficas y presentaciones. Aunque las especificaciones fueron inicialmente elaboradas por Sun, el est\u00e1ndar fue desarrollado por el comit\u00e9 t\u00e9cnico para Open Office XML de la organizaci\u00f3n OASIS y est\u00e1 basado en un esquema XML inicialmente creado e implementado por la suite ofim\u00e1tica OpenOffice.org (ver OpenOffice.org XML).","title":"Open Document Format (ODF)"},{"location":"markdown_strict/CF_manual-firmas-pdf/#zip","text":"Es un formato de almacenamiento sin p\u00e9rdida, muy utilizado para la compresi\u00f3n de datos como im\u00e1genes, programas o documentos.","title":"ZIP"},{"location":"markdown_strict/CF_manual-firmas-pdf/#pdf","text":"Es un formato de almacenamiento de documentos, desarrollado por la empresa Adobe Systems. Este formato es de tipo compuesto (imagen vectorial, mapa de bits y texto).","title":"PDF"},{"location":"markdown_strict/CF_manual-firmas-pdf/#sha","text":"Es un sistema de funciones hash criptogr\u00e1ficas relacionadas de la Agencia de Seguridad Nacional de los Estados Unidos y publicadas por el National Institute of Standards and Technology (NIST). El primer miembro de la familia fue publicado en 1993 es oficialmente llamado SHA. Sin embargo, hoy d\u00eda, no oficialmente se le llama SHA-0 para evitar confusiones con sus sucesores. Dos a\u00f1os m\u00e1s tarde el primer sucesor de SHA fue publicado con el nombre de SHA-1. Existen cuatro variantes m\u00e1s que se han publicado desde entonces cuyas diferencias se basan en un dise\u00f1o algo modificado y rangos de salida incrementados: SHA-224, SHA-256, SHA-384, y SHA-512 (llam\u00e1ndose SHA-2 a todos ellos).","title":"SHA"},{"location":"markdown_strict/CF_manual-firmas-pdf/#pkcs","text":"Se refiere a un grupo de est\u00e1ndares de criptograf\u00eda de claves p\u00fablicas concebidos y publicados por los laboratorios de RSA en California. A RSA Security se le asignaron los derechos de licenciamiento para la patente de algoritmo de clave asim\u00e9trica RSA y adquiri\u00f3 los derechos de licenciamiento para muchas otras patentes de claves.","title":"PKCS"},{"location":"markdown_strict/CF_manual-firmas-pdf/#w3c","text":"Es un consorcio internacional que produce recomendaciones para la World Wide Web. Est\u00e1 dirigida por Tim Berners-Lee, el creador original de URL (Uniform Resource Locator, Localizador Uniforme de Recursos), HTTP (HyperText Transfer Protocol, Protocolo de Transferencia de HiperTexto) y HTML (Lenguaje de Marcado de HiperTexto) que son las principales tecnolog\u00edas sobre las que se basa la Web.","title":"W3C"},{"location":"markdown_strict/CF_manual-firmas-pdf/#openofficeorg","text":"es una suite ofim\u00e1tica libre (c\u00f3digo abierto y distribuci\u00f3n gratuita) que incluye herramientas como procesador de textos, hoja de c\u00e1lculo, presentaciones, herramientas para el dibujo vectorial y base de datos. Est\u00e1 disponible para varias plataformas, tales como Microsoft Windows, GNU/Linux, BSD, Solaris y Mac OS X. Soporta numerosos formatos de archivo, incluyendo como predeterminado el formato est\u00e1ndar ISO/IEC OpenDocument (ODF), entre otros formatos comunes. A febrero de 2010, OpenOffice soporta m\u00e1s de 110 idiomas.","title":"OpenOffice.org"},{"location":"markdown_strict/CF_manual-firmas-pdf/#base64","text":"Es un sistema de numeraci\u00f3n posicional que usa 64 como base. Es la mayor potencia de dos que puede ser representada usando \u00fanicamente los caracteres imprimibles de ASCII. Esto ha propiciado su uso para codificaci\u00f3n de correos electr\u00f3nicos, PGP y otras aplicaciones. Todas las variantes famosas que se conocen con el nombre de Base64 usan el rango de caracteres A-Z, a-z y 0-9 en este orden para los primeros 62 d\u00edgitos, pero los s\u00edmbolos escogidos para los \u00faltimos dos d\u00edgitos var\u00edan considerablemente de unas a otras. Otros m\u00e9todos de codificaci\u00f3n como UUEncode y las \u00faltimas versiones de binhex usan un conjunto diferente de 64 caracteres para representar 6 d\u00edgitos binarios, pero \u00e9stos nunca son llamados Base64.","title":"Base64"},{"location":"markdown_strict/CF_manual-firmas-pdf/#asn1","text":"Es una norma para representar datos independientemente de la m\u00e1quina que se est\u00e9 usando y sus formas de representaci\u00f3n internas. Es un protocolo de nivel de presentaci\u00f3n en el modelo OSI.","title":"ASN.1"},{"location":"markdown_strict/CF_manual-firmas-pdf/#autoridad-de-certificacion-ca","text":"Es una entidad de confianza, responsable de emitir y revocar los certificados digitales o certificados, utilizados en la firma electr\u00f3nica, para lo cual se emplea la criptograf\u00eda de clave p\u00fablica. Jur\u00eddicamente es un caso particular de Prestador de Servicios de Certificaci\u00f3n.","title":"Autoridad de Certificaci\u00f3n (CA)"},{"location":"markdown_strict/CF_manual-firmas-pdf/#certificado-digital","text":"Es un documento digital mediante el cual un tercero confiable (una autoridad de certificaci\u00f3n) garantiza la vinculaci\u00f3n entre la identidad de un sujeto o entidad y su clave p\u00fablica.","title":"Certificado Digital"},{"location":"markdown_strict/CF_manual-firmas-pdf/#infraestructura-de-clave-publica-pki","text":"Es una combinaci\u00f3n de hardware y software, pol\u00edticas y procedimientos de seguridad que permiten la ejecuci\u00f3n con garant\u00edas de operaciones criptogr\u00e1ficas como el cifrado, la firma digital o el no repudio de transacciones electr\u00f3nicas. Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported Usted es libre de: | < style=\"width:0.52083in;height:0.52083in\" alt=\"share\" /> | Compartir - copiar, distribuir, ejecutar y comunicar p\u00fablicamente la obra | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"remix\" /> | hacer obras derivadas | Bajo las condiciones siguientes: | < style=\"width:0.52083in;height:0.52083in\" alt=\"by\" /> | Atribuci\u00f3n \u2014 Debe reconocer los cr\u00e9ditos de la obra de la manera especificada por el autor o el licenciante (pero no de una manera que sugiera que tiene su apoyo o que apoyan el uso que hace de su obra). | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"nc\" /> | NoComercial \u2014 No puede utilizar esta obra para fines comerciales. | | < style=\"width:0.52083in;height:0.52083in\" alt=\"sa\" /> | Compartir bajo la Misma Licencia \u2014 Si altera o transforma esta obra, o genera una obra derivada, s\u00f3lo puede distribuir la obra generada bajo una licencia id\u00e9ntica a \u00e9sta. | Entendiendo que: Renuncia \u2014 Alguna de estas condiciones puede no aplicarse si se obtiene el permiso del titular de los derechos de autor Dominio P\u00fablico \u2014 Cuando la obra o alguno de sus elementos se hallen en el dominio p\u00fablico seg\u00fan la ley vigente aplicable, esta situaci\u00f3n no quedar\u00e1 afectada por la licencia. Otros derechos \u2014 Los derechos siguientes no quedan afectados por la licencia de ninguna manera: Los derechos derivados de usos leg\u00edtimos u otras limitaciones reconocidas por ley no se ven afectados por lo anterior. Los derechos morales del auto; Derechos que pueden ostentar otras personas sobre la propia obra o su uso, como por ejemplo derechos de imagen o de privacidad. Aviso \u2014 Al reutilizar o distribuir la obra, tiene que dejar muy en claro los t\u00e9rminos de la licencia de esta obra. La mejor forma de hacerlo es enlazar a esta p\u00e1gina. Licencia LA OBRA O LA PRESTACI\u00d3N (SEG\u00daN SE DEFINEN M\u00c1S ADELANTE) SE PROPORCIONA BAJO LOS T\u00c9RMINOS DE ESTA LICENCIA P\u00daBLICA DE CREATIVE COMMONS (CCPL O LICENCIA). LA OBRA O LA PRESTACI\u00d3N SE ENCUENTRA PROTEGIDA POR LA LEY ESPA\u00d1OLA DE PROPIEDAD INTELECTUAL Y/O CUALESQUIERA OTRAS NORMAS QUE RESULTEN DE APLICACI\u00d3N. QUEDA PROHIBIDO CUALQUIER USO DE LA OBRA O PRESTACI\u00d3N DIFERENTE A LO AUTORIZADO BAJO ESTA LICENCIA O LO DISPUESTO EN LA LEY DE PROPIEDAD INTELECTUAL. MEDIANTE EL EJERCICIO DE CUALQUIER DERECHO SOBRE LA OBRA O LA PRESTACI\u00d3N, USTED ACEPTA Y CONSIENTE LAS LIMITACIONES Y OBLIGACIONES DE ESTA LICENCIA, SIN PERJUICIO DE LA NECESIDAD DE CONSENTIMIENTO EXPRESO EN CASO DE VIOLACI\u00d3N PREVIA DE LOS T\u00c9RMINOS DE LA MISMA. EL LICENCIADOR LE CONCEDE LOS DERECHOS CONTENIDOS EN ESTA LICENCIA, SIEMPRE QUE USTED ACEPTE LOS PRESENTES T\u00c9RMINOS Y CONDICIONES. 1. Definiciones La obra es la creaci\u00f3n literaria, art\u00edstica o cient\u00edfica ofrecida bajo los t\u00e9rminos de esta licencia. En esta licencia se considera una prestaci\u00f3n cualquier interpretaci\u00f3n, ejecuci\u00f3n, fonograma, grabaci\u00f3n audiovisual, emisi\u00f3n o transmisi\u00f3n, mera fotograf\u00eda u otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente aplicable. La aplicaci\u00f3n de esta licencia a una colecci\u00f3n (definida m\u00e1s adelante) afectar\u00e1 \u00fanicamente a su estructura en cuanto forma de expresi\u00f3n de la selecci\u00f3n o disposici\u00f3n de sus contenidos, no siendo extensiva a \u00e9stos. En este caso la colecci\u00f3n tendr\u00e1 la consideraci\u00f3n de obra a efectos de esta licencia. El titular originario es: En el caso de una obra literaria, art\u00edstica o cient\u00edfica, la persona natural o grupo de personas que cre\u00f3 la obra. En el caso de una obra colectiva, la persona que la edite y divulgue bajo su nombre, salvo pacto contrario. En el caso de una interpretaci\u00f3n o ejecuci\u00f3n, el actor, cantante, m\u00fasico, o cualquier otra persona que represente, cante, lea, recite, interprete o ejecute en cualquier forma una obra. En el caso de un fonograma, el productor fonogr\u00e1fico, es decir, la persona natural o jur\u00eddica bajo cuya iniciativa y responsabilidad se realiza por primera vez una fijaci\u00f3n exclusivamente sonora de la ejecuci\u00f3n de una obra o de otros sonidos. En el caso de una grabaci\u00f3n audiovisual, el productor de la grabaci\u00f3n, es decir, la persona natural o jur\u00eddica que tenga la iniciativa y asuma la responsabilidad de las fijaciones de un plano o secuencia de im\u00e1genes, con o sin sonido. En el caso de una emisi\u00f3n o una transmisi\u00f3n, la entidad de radiodifusi\u00f3n. En el caso de una mera fotograf\u00eda, aquella persona que la haya realizado. En el caso de otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente, la persona que \u00e9sta se\u00f1ale. Se considerar\u00e1n obras derivadas aquellas obras creadas a partir de la licenciada, como por ejemplo: las traducciones y adaptaciones; las revisiones, actualizaciones y anotaciones; los compendios, res\u00famenes y extractos; los arreglos musicales y, en general, cualesquiera transformaciones de una obra literaria, art\u00edstica o cient\u00edfica. Para evitar la duda, si la obra consiste en una composici\u00f3n musical o grabaci\u00f3n de sonidos, la sincronizaci\u00f3n temporal de la obra con una imagen en movimiento (synching) ser\u00e1 considerada como una obra derivada a efectos de esta licencia. Tendr\u00e1n la consideraci\u00f3n de colecciones la recopilaci\u00f3n de obras ajenas, de datos o de otros elementos independientes como las antolog\u00edas y las bases de datos que por la selecci\u00f3n o disposici\u00f3n de sus contenidos constituyan creaciones intelectuales. La mera incorporaci\u00f3n de una obra en una colecci\u00f3n no dar\u00e1 lugar a una derivada a efectos de esta licencia. El licenciador es la persona o la entidad que ofrece la obra o prestaci\u00f3n bajo los t\u00e9rminos de esta licencia y le concede los derechos de explotaci\u00f3n de la misma conforme a lo dispuesto en ella. Usted es la persona o la entidad que ejercita los derechos concedidos mediante esta licencia y que no ha violado previamente los t\u00e9rminos de la misma con respecto a la obra o la prestaci\u00f3n, o que ha recibido el permiso expreso del licenciador de ejercitar los derechos concedidos mediante esta licencia a pesar de una violaci\u00f3n anterior. La transformaci\u00f3n de una obra comprende su traducci\u00f3n, adaptaci\u00f3n y cualquier otra modificaci\u00f3n en su forma de la que se derive una obra diferente. La creaci\u00f3n resultante de la transformaci\u00f3n de una obra tendr\u00e1 la consideraci\u00f3n de obra derivada. Se entiende por reproducci\u00f3n la fijaci\u00f3n directa o indirecta, provisional o permanente, por cualquier medio y en cualquier forma, de toda la obra o la prestaci\u00f3n o de parte de ella, que permita su comunicaci\u00f3n o la obtenci\u00f3n de copias. Se entiende por distribuci\u00f3n la puesta a disposici\u00f3n del p\u00fablico del original o de las copias de la obra o la prestaci\u00f3n, en un soporte tangible, mediante su venta, alquiler, pr\u00e9stamo o de cualquier otra forma. Se entiende por comunicaci\u00f3n p\u00fablica todo acto por el cual una pluralidad de personas, que no pertenezcan al \u00e1mbito dom\u00e9stico de quien la lleva a cabo, pueda tener acceso a la obra o la prestaci\u00f3n sin previa distribuci\u00f3n de ejemplares a cada una de ellas. Se considera comunicaci\u00f3n p\u00fablica la puesta a disposici\u00f3n del p\u00fablico de obras o prestaciones por procedimientos al\u00e1mbricos o inal\u00e1mbricos, de tal forma que cualquier persona pueda acceder a ellas desde el lugar y en el momento que elija. La explotaci\u00f3n de la obra o la prestaci\u00f3n comprende la reproducci\u00f3n, la distribuci\u00f3n, la comunicaci\u00f3n p\u00fablica y, en su caso, la transformaci\u00f3n. 2. L\u00edmites de los derechos. Nada en esta licencia pretende reducir o restringir cualesquiera l\u00edmites legales de los derechos exclusivos del titular de los derechos de propiedad intelectual de acuerdo con la Ley de propiedad intelectual o cualesquiera otras leyes aplicables, ya sean derivados de usos leg\u00edtimos, tales como la copia privada o la cita, u otras limitaciones como la resultante de la primera venta de ejemplares (agotamiento). 3. Concesi\u00f3n de licencia. Conforme a los t\u00e9rminos y a las condiciones de esta licencia, el licenciador concede, por el plazo de protecci\u00f3n de los derechos de propiedad intelectual y a t\u00edtulo gratuito, una licencia de \u00e1mbito mundial no exclusiva que incluye los derechos siguientes: Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n. Derecho a incorporar la obra o la prestaci\u00f3n en una o m\u00e1s colecciones. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n l\u00edcitamente incorporada en una colecci\u00f3n. Derecho de transformaci\u00f3n de la obra para crear una obra derivada siempre y cuando se incluya en \u00e9sta una indicaci\u00f3n de la transformaci\u00f3n o modificaci\u00f3n efectuada. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de obras derivadas creadas a partir de la obra licenciada. Derecho a extraer y reutilizar la obra o la prestaci\u00f3n de una base de datos. Para evitar cualquier duda, el titular originario: Conserva el derecho a percibir las remuneraciones o compensaciones previstas por actos de explotaci\u00f3n de la obra o prestaci\u00f3n, calificadas por la ley como irrenunciables e inalienables y sujetas a gesti\u00f3n colectiva obligatoria. Renuncia al derecho exclusivo a percibir, tanto individualmente como mediante una entidad de gesti\u00f3n colectiva de derechos, cualquier remuneraci\u00f3n derivada de actos de explotaci\u00f3n de la obra o prestaci\u00f3n que usted realice. Estos derechos se pueden ejercitar en todos los medios y formatos, tangibles o intangibles, conocidos en el momento de la concesi\u00f3n de esta licencia. Los derechos mencionados incluyen el derecho a efectuar las modificaciones que sean precisas t\u00e9cnicamente para el ejercicio de los derechos en otros medios y formatos. Todos los derechos no concedidos expresamente por el licenciador quedan reservados, incluyendo, a t\u00edtulo enunciativo pero no limitativo, los derechos morales irrenunciables reconocidos por la ley aplicable. En la medida en que el licenciador ostente derechos exclusivos previstos por la ley nacional vigente que implementa la directiva europea en materia de derecho sui generis sobre bases de datos, renuncia expresamente a dichos derechos exclusivos. 4. Restricciones. La concesi\u00f3n de derechos que supone esta licencia se encuentra sujeta y limitada a las restricciones siguientes: Usted puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n solamente bajo los t\u00e9rminos de esta licencia y debe incluir una copia de la misma, o su Identificador Uniforme de Recurso (URI). Usted no puede ofrecer o imponer ninguna condici\u00f3n sobre la obra o prestaci\u00f3n que altere o restrinja los t\u00e9rminos de esta licencia o el ejercicio de sus derechos por parte de los concesionarios de la misma. Usted no puede sublicenciar la obra o prestaci\u00f3n. Usted debe mantener intactos todos los avisos que se refieran a esta licencia y a la ausencia de garant\u00edas. Usted no puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n con medidas tecnol\u00f3gicas que controlen el acceso o el uso de una manera contraria a los t\u00e9rminos de esta licencia. Esta secci\u00f3n 4.a tambi\u00e9n afecta a la obra o prestaci\u00f3n incorporada en una colecci\u00f3n, pero ello no implica que \u00e9sta en su conjunto quede autom\u00e1ticamente o deba quedar sujeta a los t\u00e9rminos de la misma. En el caso que le sea requerido, previa comunicaci\u00f3n del licenciador, si usted incorpora la obra en una colecci\u00f3n y/o crea una obra derivada, deber\u00e1 quitar cualquier cr\u00e9dito requerido en el apartado 4.b, en la medida de lo posible. Si usted reproduce, distribuye o comunica p\u00fablicamente la obra o la prestaci\u00f3n, una colecci\u00f3n que la incorpore o cualquier obra derivada, debe mantener intactos todos los avisos sobre la propiedad intelectual e indicar, de manera razonable conforme al medio o a los medios que usted est\u00e9 utilizando: El nombre del autor original, o el seud\u00f3nimo si es el caso, as\u00ed como el del titular originario, si le es facilitado. El nombre de aquellas partes (por ejemplo: instituci\u00f3n, publicaci\u00f3n, revista) que el titular originario y/o el licenciador designen para ser reconocidos en el aviso legal, las condiciones de uso, o de cualquier otra manera razonable. El t\u00edtulo de la obra o la prestaci\u00f3n si le es facilitado. El URI, si existe, que el licenciador especifique para ser vinculado a la obra o la prestaci\u00f3n, a menos que tal URI no se refiera al aviso legal o a la informaci\u00f3n sobre la licencia de la obra o la prestaci\u00f3n. En el caso de una obra derivada, un aviso que identifique la transformaci\u00f3n de la obra en la obra derivada (p. ej., \"traducci\u00f3n castellana de la obra de Autor Original,\" o \"gui\u00f3n basado en obra original de Autor Original\"). Este reconocimiento debe hacerse de manera razonable. En el caso de una obra derivada o incorporaci\u00f3n en una colecci\u00f3n estos cr\u00e9ditos deber\u00e1n aparecer como m\u00ednimo en el mismo lugar donde se hallen los correspondientes a otros autores o titulares y de forma comparable a los mismos. Para evitar la duda, los cr\u00e9ditos requeridos en esta secci\u00f3n s\u00f3lo ser\u00e1n utilizados a efectos de atribuci\u00f3n de la obra o la prestaci\u00f3n en la manera especificada anteriormente. Sin un permiso previo por escrito, usted no puede afirmar ni dar a entender impl\u00edcitamente ni expl\u00edcitamente ninguna conexi\u00f3n, patrocinio o aprobaci\u00f3n por parte del titular originario, el licenciador y/o las partes reconocidas hacia usted o hacia el uso que hace de la obra o la prestaci\u00f3n. Para evitar cualquier duda, debe hacerse notar que las restricciones anteriores (p\u00e1rrafos 4.a y 4.b) no son de aplicaci\u00f3n a aquellas partes de la obra o la prestaci\u00f3n objeto de esta licencia que \u00fanicamente puedan ser protegidas mediante el derecho sui generis sobre bases de datos recogido por la ley nacional vigente implementando la directiva europea de bases de datos 5. Exoneraci\u00f3n de responsabilidad A MENOS QUE SE ACUERDE MUTUAMENTE ENTRE LAS PARTES, EL LICENCIADOR OFRECE LA OBRA O LA PRESTACI\u00d3N TAL CUAL (ON AN \"AS-IS\" BASIS) Y NO CONFIERE NINGUNA GARANT\u00cdA DE CUALQUIER TIPO RESPECTO DE LA OBRA O LA PRESTACI\u00d3N O DE LA PRESENCIA O AUSENCIA DE ERRORES QUE PUEDAN O NO SER DESCUBIERTOS. ALGUNAS JURISDICCIONES NO PERMITEN LA EXCLUSI\u00d3N DE TALES GARANT\u00cdAS, POR LO QUE TAL EXCLUSI\u00d3N PUEDE NO SER DE APLICACI\u00d3N A USTED. 6. Limitaci\u00f3n de responsabilidad. SALVO QUE LO DISPONGA EXPRESA E IMPERATIVAMENTE LA LEY APLICABLE, EN NING\u00daN CASO EL LICENCIADOR SER\u00c1 RESPONSABLE ANTE USTED POR CUALESQUIERA DA\u00d1OS RESULTANTES, GENERALES O ESPECIALES (INCLUIDO EL DA\u00d1O EMERGENTE Y EL LUCRO CESANTE), FORTUITOS O CAUSALES, DIRECTOS O INDIRECTOS, PRODUCIDOS EN CONEXI\u00d3N CON ESTA LICENCIA O EL USO DE LA OBRA O LA PRESTACI\u00d3N, INCLUSO SI EL LICENCIADOR HUBIERA SIDO INFORMADO DE LA POSIBILIDAD DE TALES DA\u00d1OS. 7. Finalizaci\u00f3n de la licencia Esta licencia y la concesi\u00f3n de los derechos que contiene terminar\u00e1n autom\u00e1ticamente en caso de cualquier incumplimiento de los t\u00e9rminos de la misma. Las personas o entidades que hayan recibido de usted obras derivadas o colecciones bajo esta licencia, sin embargo, no ver\u00e1n sus licencias finalizadas, siempre que tales personas o entidades se mantengan en el cumplimiento \u00edntegro de esta licencia. Las secciones 1, 2, 5, 6, 7 y 8 permanecer\u00e1n vigentes pese a cualquier finalizaci\u00f3n de esta licencia. Conforme a las condiciones y t\u00e9rminos anteriores, la concesi\u00f3n de derechos de esta licencia es vigente por todo el plazo de protecci\u00f3n de los derechos de propiedad intelectual seg\u00fan la ley aplicable. A pesar de lo anterior, el licenciador se reserva el derecho a divulgar o publicar la obra o la prestaci\u00f3n en condiciones distintas a las presentes, o de retirar la obra o la prestaci\u00f3n en cualquier momento. No obstante, ello no supondr\u00e1 dar por concluida esta licencia (o cualquier otra licencia que haya sido concedida, o sea necesario ser concedida, bajo los t\u00e9rminos de esta licencia), que continuar\u00e1 vigente y con efectos completos a no ser que haya finalizado conforme a lo establecido anteriormente, sin perjuicio del derecho moral de arrepentimiento en los t\u00e9rminos reconocidos por la ley de propiedad intelectual aplicable. 8. Miscel\u00e1nea Cada vez que usted realice cualquier tipo de explotaci\u00f3n de la obra o la prestaci\u00f3n, o de una colecci\u00f3n que la incorpore, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra o la prestaci\u00f3n en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Cada vez que usted realice cualquier tipo de explotaci\u00f3n de una obra derivada, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra objeto de esta licencia en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Si alguna disposici\u00f3n de esta licencia resulta inv\u00e1lida o inaplicable seg\u00fan la Ley vigente, ello no afectar\u00e1 la validez o aplicabilidad del resto de los t\u00e9rminos de esta licencia y, sin ninguna acci\u00f3n adicional por cualquiera las partes de este acuerdo, tal disposici\u00f3n se entender\u00e1 reformada en lo estrictamente necesario para hacer que tal disposici\u00f3n sea v\u00e1lida y ejecutiva. No se entender\u00e1 que existe renuncia respecto de alg\u00fan t\u00e9rmino o disposici\u00f3n de esta licencia, ni que se consiente violaci\u00f3n alguna de la misma, a menos que tal renuncia o consentimiento figure por escrito y lleve la firma de la parte que renuncie o consienta. Esta licencia constituye el acuerdo pleno entre las partes con respecto a la obra o la prestaci\u00f3n objeto de la licencia. No caben interpretaciones, acuerdos o condiciones con respecto a la obra o la prestaci\u00f3n que no se encuentren expresamente especificados en la presente licencia. El licenciador no estar\u00e1 obligado por ninguna disposici\u00f3n complementaria que pueda aparecer en cualquier comunicaci\u00f3n que le haga llegar usted. Esta licencia no se puede modificar sin el mutuo acuerdo por escrito entre el licenciador y usted.","title":"Infraestructura de Clave P\u00fablica (PKI)"},{"location":"markdown_strict/CF_manual-firmas-xml/","text":"< < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported . \u00cdndice 1 Introducci\u00f3n [3](#introducci\u00f3n) 2 Objetivos [4](#objetivos) 3 Formatos de firma soportados [5](#formatos-de-firma-soportados) 3.1 Matriz de formatos soportados por el m\u00f3dulo [5](#matriz-de-formatos-soportados-por-el-m\u00f3dulo) 3.2 Uso de los par\u00e1metros de funcionamiento [7](#uso-de-los-par\u00e1metros-de-funcionamiento) 3.3 Par\u00e1metros de funcionamiento [7](#par\u00e1metros-de-funcionamiento) 3.4 XML Digital Signature (XMLDSig) [10](#xml-digital-signature-xmldsig) 3.4.1 XMLDSig Detached [10](#xmldsig-detached) 3.4.2 XMLDSig Enveloping [13](#xmldsig-enveloping) 3.4.3 XMLDSig Enveloped [15](#xmldsig-enveloped) 3.4.4 Co-Firmas en XMLDSig [16](#co-firmas-en-xmldsig) 3.4.5 Contrafirmas en XMLDSig [17](#contrafirmas-en-xmldsig) 3.5 XML Advanced Digital Signature (XAdES) [18](#xml-advanced-digital-signature-xades) 3.6 Factura Electr\u00f3nica [19](#factura-electr\u00f3nica) 3.7 Open Document Format (ODF) [20](#open-document-format-odf) 3.8 Office Open XML (OOXML) [21](#office-open-xml-ooxml) 4 Informaci\u00f3n sobre el m\u00f3dulo [22](#informaci\u00f3n-sobre-el-m\u00f3dulo) 4.1 Compatibilidad [22](#compatibilidad) 4.2 Situaci\u00f3n del nodo de firma en XAdES Enveloped [22](#situaci\u00f3n-del-nodo-de-firma-en-xades-enveloped) 4.3 Metadatos adicionales en las firmas XAdES [23](#metadatos-adicionales-en-las-firmas-xades) 4.4 Cadena de certificaci\u00f3n en firmas XMLdSig y XAdES [24](#cadena-de-certificaci\u00f3n-en-firmas-xmldsig-y-xades) 4.5 Firmas de contenido binario en XMLDSig y XAdES [24](#firmas-de-contenido-binario-en-xmldsig-y-xades) 4.6 Firma de hojas de estilo en XMLDSig y XAdES [27](#firma-de-hojas-de-estilo-en-xmldsig-y-xades) 4.6.1 Notas importantes sobre la firma de hojas de estilo XML [28](#_Toc397501073) 4.6.2 Transformaciones XML [29](#transformaciones-xml) 4.7 Incidencias conocidas [31](#incidencias-conocidas) 4.7.1 Mensajes extra\u00f1os en consola [31](#mensajes-extra\u00f1os-en-consola) 4.8 Diferencias en las firmas generadas respecto a versiones anteriores del cliente y sus m\u00f3dulos [31](#diferencias-en-las-firmas-generadas-respecto-a-versiones-anteriores-del-cliente-y-sus-m\u00f3dulos) 5 Ejemplos de Estructuras XML generadas por el m\u00f3dulo [32](#ejemplos-de-estructuras-xml-generadas-por-el-m\u00f3dulo) 5.1 XMLDSig [32](#xmldsig) 5.1.1 Detached Interno Expl\u00edcito / Impl\u00edcito [32](#detached-interno-expl\u00edcito-impl\u00edcito) 5.1.2 Enveloping Expl\u00edcito / Impl\u00edcito [34](#enveloping-expl\u00edcito-impl\u00edcito) 5.1.3 Enveloped [35](#enveloped) 5.1.4 Co-Firmas [37](#co-firmas) 5.1.5 Contrafirmas [39](#contrafirmas) 5.2 XAdES [41](#xades) 5.2.1 Detached Interno Expl\u00edcito / Impl\u00edcito [41](#detached-interno-expl\u00edcito-impl\u00edcito-1) 5.2.2 Enveloping Expl\u00edcito / Impl\u00edcito [44](#enveloping-expl\u00edcito-impl\u00edcito-1) 5.2.3 Enveloped [46](#enveloped-1) 5.2.4 Co-Firmas [48](#co-firmas-1) 5.2.5 Contrafirmas [52](#contrafirmas-1) 5.2.6 Distintas versiones de XAdES [56](#distintas-versiones-de-xades) 6 Informaci\u00f3n de utilidad [58](#informaci\u00f3n-de-utilidad) 7 Glosario de t\u00e9rminos [59](#glosario-de-t\u00e9rminos) Creative Commons [62](#Licencia_Creative_Commons) Introducci\u00f3n El Cliente de Firma es una herramienta de Firma Electr\u00f3nica que funciona en forma de Applet de Java integrado en una p\u00e1gina Web mediante JavaScript. El Cliente hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados ( keystore ) del navegador web ( Internet Explorer, Mozilla, Firefox ) o el sistema operativo as\u00ed como de los que est\u00e9n en dispositivos (tarjetas inteligentes , dispositivos USB ) configurados en el mismo (el caso de los DNI-e). El Cliente de Firma, como su nombre indica, es una aplicaci\u00f3n que se ejecuta en cliente (en el ordenador del usuario, no en el servidor Web). Esto es as\u00ed para evitar que la clave privada asociada a un certificado tenga que \u201csalir\u201d del contenedor del usuario (tarjeta, dispositivo USB o navegador) ubicado en su PC. De hecho, nunca llega a salir del navegador, el Cliente le env\u00eda los datos a firmar y \u00e9ste los devuelve firmados. El Cliente de Firma contiene las interfaces y componentes web necesarios para la realizaci\u00f3n de los siguientes procesos (adem\u00e1s de otros auxiliares como c\u00e1lculos de hash, lectura de ficheros, etc\u2026): Firma de formularios Web (siendo tarea del integrador el crear la l\u00f3gica JavaScript para ello). Firma de datos y ficheros. Multifirma masiva de datos y ficheros. Cofirma (CoSignature) Multifirma al mismo nivel. Contrafirma (CounterSignature) Multifirma en cascada. Como complemento al cliente de firma, se encuentra un cliente de cifrado que nos permite realizar las funciones de encriptaci\u00f3n y desencriptaci\u00f3n de datos atendiendo a diferentes algoritmos y configuraciones. Adem\u00e1s permite la generaci\u00f3n de sobres digitales. Objetivos El objetivo del presente documento es reflejar las capacidades del Cliente @firma en cuanto a firmas electr\u00f3nicas basadas en formatos XML ( Extensible Markup Language ), las peculiaridades de este relativas a estos formatos, sus opciones de configuraci\u00f3n y su compatibilidad. Formatos de firma soportados Matriz de formatos soportados por el m\u00f3dulo Dentro de la normativa XAdES, la versi\u00f3n actual del m\u00f3dulo soporta \u00fanicamente las variante b\u00e1sica, conocida como XAdES BES y la acorde a pol\u00edtica de firma, EPES, no soport\u00e1ndose ninguna otra (X, XL, etc.): Adicionalmente, el m\u00f3dulo es capaz de hacer firmas XML seg\u00fan la normativa Open Document Format (ODF) acorde con la implementaci\u00f3n de OpenOffice.org 3.2 y superiores. Si bien las firmas OpenOffice.org 3.0 y 3.1 no son compatibles con las firmas LibreOffice / OpenOffice.org 3.2 y superiores (por defecto estas \u00faltimas en el Cliente @firma), es posible forzar la generaci\u00f3n de firmas en el formato OpenOffice.org 3.0/3.1. Consulte la documentaci\u00f3n JavaDoc de la clase es.gob.afirma.signers.odf.AOODFSigner para mayor informaci\u00f3n sobre los par\u00e1metros adicionales en este sentido. Debemos recordar que los documentos ODF est\u00e1n basados en XML, y sus firmas digitales son una variante de XMLDSig. La matriz de compatibilidad (siguiendo la misma leyenda que la matriz anterior), es la siguiente: En el caso de las \u201ccofirmas\u201d sobre documentos ODF, estas deben tratarse como la aplicaci\u00f3n de varias firmas al mismo documento a un mismo nivel jer\u00e1rquico, en lo que tambi\u00e9n puede llamarse \u201cmultifirma\u201d de un documento. Otra variante de firmas XML soportada por el Cliente es OOXML, formato de documentos ofim\u00e1ticos de Microsoft Office 2007, 2008 for Mac, 2010 (x86 y x64) y 2011 for Mac. La matriz de compatibilidad (siguiendo la misma leyenda que la matriz anterior), es la siguiente: En el caso de las \u201ccofirmas\u201d sobre documentos OOXML, estas deben tratarse como la aplicaci\u00f3n de varias firmas al mismo documento a un mismo nivel jer\u00e1rquico, en lo que tambi\u00e9n puede llamarse \u201cmultifirma\u201d de un documento. Uso de los par\u00e1metros de funcionamiento Los formatos de firma XML (XAdES, XMLDSig, Factura-e, ODF y OOXML) est\u00e1 \u00fanicamente disponible en las construcciones Media y Completa del cliente de firma. Para realizar una firma en este formato s\u00f3lo es necesario su configuraci\u00f3n como formato de firma mediante el m\u00e9todo del Applet cliente: setSignatureFormat(String format) Puede llamarse a esta funci\u00f3n desde las p\u00e1ginas Web que integren el cliente por medio de la sentencia JavaScript: clienteFirma.setSignatureFormat(String format) Esto configurar\u00e1 el cliente de firma para realizar alguna de las firmas XML (consultar el apartado \u201c Par\u00e1metros de funcionamiento \u201d, para conocer las referencias concretas para cada uno de los formatos), siendo necesario tambi\u00e9n completar la configuraci\u00f3n del cliente que se considere necesaria (algoritmo de firma, modo, tratamiento de errores,\u2026), establecer los datos que se desean firmar y ordenar el proceso de firma. Esta y el resto de funciones del cliente est\u00e1n documentadas en el JavaDoc del Applet y el manual del integrador del cliente @firma. Rem\u00edtase a estos documentos para m\u00e1s informaci\u00f3n. Par\u00e1metros de funcionamiento Cadenas de identificaci\u00f3n de formato (varias alternativas insensibles a may\u00fasculas y min\u00fasculas por cada formato, por flexibilidad de uso): XAdES Detached Interna \"XAdES Detached\" / \"XAdES_Detached\" / \"XADES\" / \"XADES-BES\" XAdES Enveloped \"XAdES Enveloped\" / \"XAdES_Enveloped\" XAdES Enveloping \"XAdES Enveloping\" / \"XAdES_Enveloping\" XMLDSig Detached Interna \"XMLDSig Detached\" / \"XMLDSig_Detached\" XMLDSig Enveloped \"XMLDSig Enveloped\" / \"XMLDSign Enveloped\" / \"XMLDSig_Enveloped\" / \"XMLDSig_Enveloped\" XMLDSig Enveloping \"XMLDSig Enveloping\" / \"XMLDSign Enveloping\" / \"XMLDSig_Enveloping\" / \"XMLDSign_Enveloping\" Factura-e \"FacturaE\" / \"Factura-e\" / \"Factura Electronica\" / \"Factura Electr\u00f3nica\" / \"Factura\" ODF \"ODF\" / \"ODT\" / \"ODP\" / \"ODS\" / \"OpenOffice\" / \"OpenOffice.org\" OOXML \"OOXML\" / \"OOXML (Office Open XML)\" / \"DOCX\" / \"PPTX\" / \"XLSX\" Cadenas de identificaci\u00f3n del modo de firma (insensibles a may\u00fasculas y min\u00fasculas): Expl\u00edcita (no aplica a las contrafirmas) \"Explicit\" Impl\u00edcita \"Implicit\" Ficheros de entrada XMLDSig y XAdES, Enveloping y Detached, Impl\u00edcitas y Expl\u00edcitas Binarios (*.*) y XML (*.xml) XMLDSig y XAdES, Enveloped XML (*.xml) ODF ODF (*.odt, *.ods, *.odp) OOXML OOXML (*.docx, *.pptx, *.xlsx) Ficheros de salida XAdES Fichero de firma avanzada (*.xsig) XMLDSig Fichero de firma (*.xsig) ODF ODF (*.odt, *.ods, *.odp) OOXML OOXML(*.docx, *.pptx, *.xlsx) NOTAS IMPORTANTES: Los algoritmos de huella digital MD2 y MD5 no est\u00e1n soportados en ninguno de los formatos y variantes de firma aportados por este m\u00f3dulo, por motivos de obsolescencia. Esta es una limitaci\u00f3n impuesta por los est\u00e1ndares y normativas afectadas. En las operaciones de firma, las algoritmos de huella digital SHA-256, SHA-384 y SHA-512 no est\u00e1n soportados en ning\u00fan sistema basado en CAPI (Windows + Internet Explorer) con versiones de Java que sufran el error 6753664 ( http://bugs.sun.com/view_bug.do?bug_id=6753664 ) ni, aun sobre sistemas diferentes a CAPI, en los entornos de ejecuci\u00f3n de Java anteriores a la versi\u00f3n 1.6u18. El algoritmo de huella digital SHA-224 no est\u00e1 soportado , y no se soportar\u00e1 en un futuro. No se soportan firmas XML sin realizar huellas digitales , por no estar contemplada esta posibilidad en ninguna normativa ni est\u00e1ndar. No se soporta la firma en m\u00e1s de una fase en ning\u00fan formato o variante de firma realizado por este m\u00f3dulo . Ciertos entornos de ejecuci\u00f3n de Java (Java 1.6 anteriores a la versi\u00f3n 1.6.0_10) est\u00e1n afectados por un error ( http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6696582 ) que impide la realizaci\u00f3n de firmas de documentos ODF. Es necesario un Java 6 en versi\u00f3n superior a la 1.6.0_10 para realizar firmas ODF . Este error no se da en Java 5, por lo que sus usuarios no necesitan actualizar (aunque siempre se recomienda la actualizaci\u00f3n a Java 1.6.0_25). XML Digital Signature (XMLDSig) XMLDSig Detached La firma XML en modo \u201cDetached\u201d permite tener una firma de forma separada e independiente del contenido firmado, pudiendo relacionar firma con contenido firmado mediante una referencia de tipo URI. Este tipo de firmas es \u00fatil cuando no se puede modificar el contenido original pero se desea constatar su autenticidad, procedencia, etc. Un uso com\u00fan de este formato es en la descarga de ficheros, pudiendo poner a disposici\u00f3n del internauta, junto al contenido a descargar, un peque\u00f1o fichero de firma para verificar la integridad del primero. Un ejemplo de este tipo de firmas ser\u00eda la siguiente estructura (resumida) XML: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/> <ds:Reference URI=\"http://www.minhap.es/contenido\"> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/> <ds:DigestValue/> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue/> </ds:Signature> En este ejemplo, los datos firmados se encuentran en un servidor Web accesible p\u00fablicamente: http://www.minhap.es/contenido, y se referencia como tal, conformando lo que se denomina \u201cExternally Detached\u201d o \u201cDetached Externa\u201d. Las firmas Externally Detached NO est\u00e1n soportadas actualmente por el Cliente @firma . Cuando se desea firmar un contenido con un formato \u201cDetached\u201d, pero se quiere eliminar la dependencia de la disponibilidad externa del contenido firmado, es posible crear una estructura XML que contenga los propios contenidos y la firma, pero cada uno en una subestructura independiente, manteniendo as\u00ed el concepto de \u201cDetached\u201d (firma y contenido firmado no se interrelacionan directamente). Para adecuarse al est\u00e1ndar los nodos de firma y contenido debe encontrarse en el mismo nivel dentro del XML. Un ejemplo de estructura XML ser\u00eda: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <internally-detached> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/> <ds:Reference URI=\"#data\"> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/> <ds:DigestValue/> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue/> </ds:Signature> <document Id=\"data\"> <title>title</title> <author>writer</author> <date>today</date> <content> <para>First paragraph</para> <para>Second paragraph</para> </content> </document> </internally-detached> En este caso, la estructura \u201cinternally-detached\u201d contiene dos subestructuras, la firma (\u201cSignature\u201d) y el propio contenido firmado (\u201cdocument\u201d). La forma de relacionar ambos es, como ocurr\u00eda en el primer ejemplo, con una URI, solo que en este caso es interna al documento XML, referenciando el identificador de la subestructura del contenido firmado (\u201cdata\u201d). A esta variante de firma \u201cDetached\u201d se la conoce como \u201cInternally Detached\u201d, o \u201cDetached Interna\u201d.[1] Para unificar las superestructuras creadas dentro de un formato \u201cDetached Interno\u201d, el Cliente @firma construye siempre el siguiente esqueleto XML: <CONTENT Id=\u201did\u201d Encoding=\u201dcodificacion\u201d MimeType=\u201dMimeType\u201d Algorithm=\u201d\u2026\u201d> <! \u2013 CONTENIDO FIRMADO --> </CONTENT> Es decir, el contenido a firmar, ya sea XML o no-XML, se encapsula dentro de una etiqueta XML llamada CONTENT, en la que se indica la codificaci\u00f3n del contenido (UTF-8, Base64, etc.), el tipo de contenido (imagen JPEG, texto, XML, etc.) y el algoritmo utilizado para calcular la huella digital de este (por ejemplo, SHA-1). Como la superestructura es XML, si el contenido tambi\u00e9n es XML la inserci\u00f3n es directa (como en el primer ejemplo de \u201cDetached Interna\u201d, pero si no es XML se codifica en Base64 antes de insertarse, resultando una estructura con una forma similar a la siguiente: <CONTENT Id=\u201did\u201d Encoding=\u201dBase64\u201d MimeType=\u201dapplication/octect-stream\u201d Algorithm=\u201d\u2026\u201d> SFGJKASGFJKASEGUYFGEYGEYRGADFJKASGDFSUYFGAUYEGWEYJGDFYKGYKGWJKEGYFWYJ </CONTENT> La larga cadena de caracteres ser\u00eda una codificaci\u00f3n Base64 del original interpretado en su forma binaria pura. Como la variante \u201cDetached Interna\u201d almacena dentro de la superestructura XML el contenido firmado, la firma de un contenido de gran tama\u00f1o generar\u00eda igualmente un fichero de firma de gran tama\u00f1o, aspecto claramente no deseable (especialmente en un formato \u201cDetached\u201d), por lo que este m\u00f3dulo introduce una sub-variante llamada \u201cDetached Interna Expl\u00edcita\u201d (quedando la anteriormente descrita como \u201cDetached Interna Impl\u00edcita\u201d. En esta sub-variante, se sustituyen los datos firmados (ya sean binarios o XML) dentro de la superestructura XML que los conten\u00eda tanto a ellos como a la firma por su huella digital calculada mediante el algoritmo SHA-1, y codificada en Base64. Es importante rese\u00f1ar aqu\u00ed que la sub-variante Detached Interna Expl\u00edcita no est\u00e1 respaldada directamente por el est\u00e1ndar XML Digital Signature (aunque su estructura interna cumple con el formato). Adicionalmente, esta variante expl\u00edcita no es de aplicaci\u00f3n para las contrafirmas. Debido a que las firmas Detached Internas, tanto expl\u00edcita como impl\u00edcita, comparten la misma estructura y no es posible distinguirlas, el cliente marcar\u00e1 las firmas expl\u00edcitas con el MimeType no est\u00e1ndar \u201chash/sha1\u201d, independientemente de que se especifique el MimeType de los datos . En caso de generar la firma expl\u00edcita indicando directamente al Cliente @firma el hash que debe firmar en lugar de los datos, este debe proporcionarse siempre calculado con el algoritmo SHA1. La importancia de recalcar este punto reside en que un \u201cvalidador\u201d de firmas XMLDSig est\u00e1ndar dar\u00e1 siempre por buena la firma Detached Expl\u00edcita, pero no la validar\u00e1 contra el contenido original, por lo que debemos asegurarnos o que se soporta \u00e9sta sub-variante o que la validaci\u00f3n se realiza contra la huella digital del contenido firmado y luego se compara esta huella digital con una obtenida directamente de este \u00faltimo. XMLDSig Enveloping Otra variante de firma es la \u201cEnveloping\u201d, en la que la estructura XML de firma es la \u00fanica en el documento de firma, y esta contiene internamente el contenido firmado (en un nodo propio). Un posible ejemplo de este tipo de firma podr\u00eda ser: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/> <ds:Reference URI=\"#obj\"> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/> <ds:DigestValue/> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue/> <ds:Object Id=\"obj\">SFGJKASGFJKASEGUYFGEYGEYRGADFJKASGDFSUYFG=</ds:Object> </ds:Signature> En este caso, los datos firmados se encuentran en el nodo \u201cObject\u201d referenciados internamente al XML mediante el identificador \u201cobj\u201d.[2] Al igual que ocurr\u00eda con el formato \u201cDetached\u201d, si los datos no son XML, no es posible insertarlos directamente dentro de una estructura XML, por lo que se codifican previamente en Base64. Al contener el resultado de la firma los datos firmados empotrados internamente, esta formato sufre el mismo problema que la variante \u201cDetached Interna\u201d (Impl\u00edcita), por lo que tambi\u00e9n se ha optado por incluir una sub-variante denominada \u201cEnveloping Expl\u00edcita\u201d (definiendo la \u201cEnveloping\u201d como \u201cEnveloping Impl\u00edcita\u201d), en la que de nuevo se sustituyen los datos originalmente firmados por su huella digital calculada mediante el algoritmo SHA-1. Es importante rese\u00f1ar aqu\u00ed que la sub-variante Enveloping Expl\u00edcita no est\u00e1 respaldada directamente por el est\u00e1ndar XML Digital Signature (aunque su estructura interna cumple con el formato). Adicionalmente, esta variante expl\u00edcita no es de aplicaci\u00f3n para las contrafirmas. La importancia de recalcar este punto reside en que un \u201cvalidador\u201d de firmas XMLDSig est\u00e1ndar dar\u00e1 siempre por buena la firma Enveloping Expl\u00edcita, pero no la validar\u00e1 contra el contenido original, por lo que debemos asegurarnos o que se soporta esta sub-variante o que la validaci\u00f3n se realiza contra la huella digital del contenido firmado y luego se compara esta huella digital con una obtenida directamente de este \u00faltimo. Debido a que las firmas Enveloping expl\u00edcita e impl\u00edcita comparten la misma estructura y no es posible distinguirlas, el cliente marcar\u00e1 las firmas expl\u00edcitas con el MimeType no est\u00e1ndar \u201chash/sha1\u201d, independientemente de que se especifique el MimeType de los datos . En caso de generar la firma expl\u00edcita indicando directamente al Cliente @firma el hash que debe firmar en lugar de los datos, se firmar\u00e1 este hash y se establecer\u00e1 como MimeType el valor \u201chash/ sha1 \u201d. XMLDSig Enveloped Este formato de firma XMLDSig est\u00e1 pensado para que un contenido XML pueda auto-contener su propia firma digital, insert\u00e1ndola en un nodo propio interno, por lo que, al contrario que en los formatos anteriores, no es posible firmar contenido que no sea XML. Un ejemplo simple del resultado de una firma \u201cEnveloped\u201d podr\u00eda ser el siguiente: <!DOCTYPE Envelope [ <!ENTITY ds \"http://www.w3.org/2000/09/xmldsig#\"> <!ENTITY c14n \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"> <!ENTITY enveloped \"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"> <!ENTITY xslt \"http://www.w3.org/TR/1999/REC-xslt-19991116\"> <!ENTITY digest \"http://www.w3.org/2000/09/xmldsig#sha1\"> ]> <Letter> <Return-address>address</Return-address> <To>You</To> <Message>msg body</Message> <From> <ds:Signature xmlns:ds=\"&ds;\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/> <ds:Reference URI=\"\"> <ds:Transforms> <ds:Transform Algorithm=\"&enveloped;\"> </ds:Transform> </ds:Transforms> <ds:DigestMethod Algorithm=\"&digest;\"/> <ds:DigestValue></ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue/> </ds:Signature> </From> <Attach>attachement</Attach> </Letter> En este caso, el documento original (\u201cLetter\u201d), contiene internamente la estructura de firma digital (\u201cSignature\u201d).[3] Una peculiaridad de la estructura generada es que esta referenciada mediante una URI vac\u00eda (\u201cURI=\u201d\u201d), lo cual indica que la firma aplica a la totalidad del documento original. Aunque en este caso el m\u00f3dulo no ha definido sub-variantes, para mantener una coherencia en la nomenclatura, ha denominado a este formato \u201cEnveloped Impl\u00edcita\u201d. Co-Firmas en XMLDSig Cuando un mismo documento es firmado (en una misma jerarqu\u00eda de firma) por varios firmantes, de produce una operaci\u00f3n de co-firma. A nivel interno, una co-firma no es m\u00e1s que una sucesi\u00f3n de objetos o estructuras XML de tipo \u201cSignature\u201d (como los que figuran en los ejemplos anteriores) que se refieren a los mismos datos. Las co-firmas XMLDSig pueden aplicarse a todos los formatos y variantes del est\u00e1ndar. El m\u00f3dulo de firmas XML del Cliente @firma permite co-firmas en todas las variantes y sub-variantes soportadas de XMLDSig. Cofirmas Enveloping Una firma XML enveloping exige que los datos firmados est\u00e9n contenidos en un nodo XML dentro de la propia firma. Cuando se solicita una cofirma XML enveloping al Cliente @firma, se generar\u00e1 un nodo ra\u00edz <AFIRMA> que contendr\u00e1 todas las firmas generadas. Cada una de las firmas contendr\u00e1 su propio nodo de datos, por lo que este tipo de firmas puede crecer r\u00e1pidamente en tama\u00f1o. Se recomienda utilizar las firmas Internally Detached cuando se quieran realizar m\u00faltiples firmas sobre los mismos datos y que estos contenidos en la firma. Este comportamiento aplica tanto a XMLDSig como a su variante XAdES. Cofirmas cruzadas entre XMLDSig y XAdES Las cofirmas de un documento dan como resultado dos firmas sobre este mismo documento que se encuentran a un mismo nivel, es decir, que ninguna envuelve a la otra ni una prevalece sobre la otra. A nivel de formato interno, esto quiere decir que cuando cofirmamos un documento ya firmado previamente, esta firma previa no se modifica. Si tenemos en cuenta que XAdES es en realidad un subconjunto de XMLDSig, el resultado de una cofirma XAdES sobre un documento firmado previamente con XMLDSig (o viceversa), son dos firmas independientes, una en XAdES y otra en XMLDSig. Dado que todas las firmas XAdES son XMLDSig pero no todas las firmas XMLDSig son XAdES, el resultado global de la firma se adec\u00faa al est\u00e1ndar m\u00e1s amplio, XMLDSig en este caso. Contrafirmas en XMLDSig Una contrafirma es un tipo de multi-firma (varios firmantes en un \u00fanico documento), en el que las firmas de los firmantes no est\u00e1n a un mismo nivel, sino que siguen una jerarqu\u00eda de firmas, donde un firmante asume la firma de otro firmante previo, form\u00e1ndose en el proceso un \u00e1rbol de firmas (o firmantes). Un ejemplo de uso de este tipo de multi-firmas podr\u00edamos encontrarlo en una revisi\u00f3n en cadena de un documento: El autor del documento firma el original. El documento pasa al gerente de ventas, el cual firma sobre la firma del autor El documento pasa al director de ventas, el cual asume el buen trabajo de su gerente y firma sobre su firma. El documento pasa, tambi\u00e9n desde el propio autor, al gerente de calidad, el cual firma sobre la firma del autor. El documento pasa al director de calidad, el cual asume el buen trabajo de su gerente y firma sobre su firma. El documento pasa al director general, el cual firma las firmas de sus directores, asumiendo igualmente su trabajo. Adicionalmente, es posible combinar co-firmas con contrafirmas, pudiendo tener as\u00ed \u00e1rboles de firma complejos, incluso con varios nodos ra\u00edz. La especificaci\u00f3n del est\u00e1ndar XMLDSig no define la forma de contrafirmar un documento, aunque deja abierta la posibilidad de realizar contrafirmas. No obstante, la especificaci\u00f3n XAdES [ETSI TS 101 903 V1.3.2 (2006-03)] especifica un formato de contrafirma retro-compatible con el formato XMLDSig mediante referencias de tipo \u201cCountersignedSignature\u201d ( http://uri.etsi.org/01903#CountersignedSignature ). El m\u00f3dulo de firmas XML del cliente @firma implementa las contrafirmas seg\u00fan este m\u00e9todo, pero es importante resaltar que, dado que la normativa XMLDSig no adopta este formato de contrafirmas directamente (sino que se define en la normativa XAdES), las contrafirmas XMLDSig creadas mediante el cliente @firma pueden no reconocerse en algunas plataformas de validaci\u00f3n de firmas . XML Advanced Digital Signature (XAdES) Las firmas XAdES son una evoluci\u00f3n de las firmas XMLDSig a la que a\u00f1aden ciertas extensiones y en la que se concretan con m\u00e1s definici\u00f3n algunas operaciones, como las contrafirmas. El formato XAdES admite m\u00faltiples variantes, con distintas aplicaciones (desde sellos de tiempo hasta archivo longevo). La actual versi\u00f3n del m\u00f3dulo de firmas XML del cliente @firma soporta \u00fanicamente la versiones b\u00e1sica (BES), de aplicaci\u00f3n general no especializada y la acorde a pol\u00edtica de firma (EPES). La tabla anterior muestra las variantes de XAdES existentes, estando marcadas \u00fanicamente las b\u00e1sica (BES) y acorde a pol\u00edtica de firma (EPES) en verde, como indicativo de soporte por el m\u00f3dulo. Dado que XAdES es una extensi\u00f3n retro-compatible con XMLDSig, los formatos soportados son los mismos que en este segundo, aunque encontrando las siguientes diferencias y aspectos a recalcar: Las contrafirmas se realizan mediante un atributo especialmente especificado por XAdES (\u201cCounterSignature\u201d), por lo que, al contrario que en XMLDSig, s\u00ed est\u00e1n plenamente respaldadas por el est\u00e1ndar. Al igual que ocurr\u00eda con XMLDSig, todas las sub-variantes expl\u00edcitas no est\u00e1n directamente respaldadas por el est\u00e1ndar . Adicionalmente, es importante comentar que los atributos espec\u00edficos XAdES implementados por el m\u00f3dulo de firmas XML son (adem\u00e1s de los relativos a las pol\u00edticas de firma): SigningTime SigningCerticate IssuerSerial SignedDataObjectProperties Factura Electr\u00f3nica La firma en formato de factura electr\u00f3nica es en realidad una firma XAdES Enveloped particular. La firma de facturas se realizan de acuerdo a la versi\u00f3n 3.1 del esquema de factura electr\u00f3nica. Detalles a tener en cuenta del formato de firma de factura son: Los datos de entrada deben ser una factura electr\u00f3nica conforme a las normas FacturaE. No contempla las operaciones de cofirma ni contrafirma. Las firmas son siempre impl\u00edcitas, por lo que no se atender\u00e1 a la configuraci\u00f3n de modo del cliente. No es necesario configurar la pol\u00edtica de firma de factura electr\u00f3nica. La pol\u00edtica se establece autom\u00e1ticamente cuando se utiliza este formato. Los par\u00e1metros configurables de la firma son: signatureProductionCity: Ciudad desde la que se realiza la firma. signatureProductionProvince: Provincia desde la que se realiza la firma. signatureProductionPostalCode: C\u00f3digo postal desde el que se realiza la firma. signatureProductionCountry: Pa\u00eds desde el que se realiza la firma. Puedes configurarse estos par\u00e1metros mediante el m\u00e9todo: addExtraParam(String param, String value); Puede llamarse a esta funci\u00f3n desde las p\u00e1ginas Web que integren el cliente por medio de la sentencia JavaScript: clienteFirma.addExtraParam(String param, String value) Open Document Format (ODF) ODF, la normativa de documentos ofim\u00e1ticos implementada por OpenOffice.org, implementa para sus firmas digitales una variante espec\u00edfica de XMLDSig. El m\u00f3dulo es capaz de realizar las firmas seg\u00fan esta variante, resultando en documentos firmados reconocidos por los productos OpenOffice.org 3.2 y 3.3. Por problemas de evoluci\u00f3n del propio formato ODF, las firmas generadas en la configuraci\u00f3n por defecto del Cliente no son v\u00e1lidas en el formato ODF generado por OpenOffice.org 3.0 / 3.1. No se soportan firmas electr\u00f3nicas en formato OpenOffice.org 2.x, por considerarse obsoleto. La compatibilidad en cuanto a tipo de documento es la siguiente: Se soportan documentos Impress, Calc y Writer. Detalles a tener en cuenta del formato de firma ODF son: No contempla la operaci\u00f3n de contrafirma Las firmas son siempre impl\u00edcitas, por lo que no se atender\u00e1 a la configuraci\u00f3n de modo del cliente. El \u00fanico algoritmo de firma soportado por el formato es SHA1withRSA, por lo que no se atender\u00e1 a la configuraci\u00f3n del cliente. NOTAS IMPORTANTES: El formato ODF ha introducido en los \u00faltimos a\u00f1os numerosas variantes incompatibles entre s\u00ed. Las firmas generadas con OpenOffice.org 3.3 y 3.2 y LibreOffice no son reconocidas por versiones anteriores, y las firmas generadas por OpenOffice.org 3.0 y 3.1 no son reconocidas por versiones anteriores y son reconocidas como incompletas por versiones posteriores. Por estas inconsistencias en la evoluci\u00f3n del formato (completamente ajenas al Cliente @firma), no puede garantizarse un correcto funcionamiento en versiones futuras de OpenOffice.org o LibreOffice. Existe la posibilidad de generar con el Cliente firmas compatibles con OpenOffice.org 3.0 y 3.1 (que ser\u00e1n reconocidas como incompletas por OpenOffice.org 3.2 y 3.3) mediante el siguiente par\u00e1metro adicional que debe ser proporcionado al m\u00f3dulo de firma (consulte el Manual del Integrador para m\u00e1s informaci\u00f3n sobre paso de par\u00e1metros adicionales a los m\u00f3dulos de firma): \u201cuseOpenOffice31Mode\u201d con el valor \u201ctrue\u201d Office Open XML (OOXML) OOXML, la normativa de documentos ofim\u00e1ticos implementada por Microsoft Office, implementa para sus firmas digitales una variante espec\u00edfica de XMLDSig. El m\u00f3dulo es capaz de realizar las firmas seg\u00fan esta variante, resultando en documentos firmados reconocidos por los productos Office 2007, 2008 for Mac, 2010 y 2011 for Mac, no previ\u00e9ndose que existan problemas de compatibilidad en futuras versiones. La compatibilidad en cuanto a tipo de documento es la siguiente: Se soportan documentos Word, Excel y PowerPoint. Detalles a tener en cuenta del formato de firma OOXML son: No contempla la operaci\u00f3n de contrafirma. Las firmas son siempre impl\u00edcitas, por lo que no se atender\u00e1 a la configuraci\u00f3n de modo del cliente. ADVERTENCIA: La herramienta de validaci\u00f3n VALIDe, en su versi\u00f3n actual, no soporta la validaci\u00f3n de firmas OOXML. Es posible comprobar la validez de estas firmas abriendo el documento con Microsoft Office 2007 o superior. Informaci\u00f3n sobre el m\u00f3dulo Compatibilidad El m\u00f3dulo de firmas XML del cliente @firma es compatible con la versi\u00f3n 3 y superiores del cliente, en todas las plataformas, sistemas operativos, arquitecturas y versiones de entorno de ejecuci\u00f3n de Java soportadas por este. Las firmas ODF que genera el m\u00f3dulo en la configuraci\u00f3n por defecto del Cliente son interpretadas correctamente solo por OpenOffice.org 3.2 y superiores, consulte el apartado Open Document Format (ODF) para m\u00e1s informaci\u00f3n. Situaci\u00f3n del nodo de firma en XAdES Enveloped Por defecto, el Cliente @firma sit\u00faa la firma electr\u00f3nica en su nodo \u201cSignature\u201d directamente como hijo de la ra\u00edz del XML. No obstante, hay situaciones en las que puede interesar situar este nodo de firma en una situaci\u00f3n arbitraria del XML. Para ello, puede usarse el par\u00e1metro adicional \u201c insertEnvelopedSignatureOnNodeByXPath \u201d, en el que, mediante una expresi\u00f3n XPath v1, podemos indicar el nodo en el que queremos se inserte la firma (el nodo \u201cSignature\u201d pasar\u00e1 a ser el primer hijo de este). Si la expresi\u00f3n XPath resolviese varios nodos, se usar\u00e1 el primero de ellos. Por ejemplo, en el siguiente XML: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <bookstore> <book category= \"COOKING\" > <title lang= \"en\" >Everyday Italian</title> <author>Giada De Laurentiis</author> <year>2005</year> <price>30.00</price> </book> <book category= \"CHILDREN\" > <title lang= \"en\" >Harry Potter</title> <author>J K. Rowling</author> <year>2005</year> <price>29.99</price> </book> </bookstore> Si indicamos el par\u00e1metro con este valor: insertEnvelopedSignatureOnNodeByXPath = /bookstore/book[1]/title La firma se insertara como nodo hijo del t\u00edtulo del primer libro: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <bookstore> <book category= \"COOKING\" > <title lang= \"en\" > Everyday Italian <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"S1\"> \u2026 </ds:Signature> </title> <author>Giada De Laurentiis</author> <year>2005</year> <price>30.00</price> </book> <book category= \"CHILDREN\" > <title lang= \"en\" >Harry Potter</title> <author>J K. Rowling</author> <year>2005</year> <price>29.99</price> </book> </bookstore> Metadatos adicionales en las firmas XAdES las firmas XAdES pueden contener opcionalmente una serie de metadatos acerca de la firma, el firmante y el propio proceso de firma. En @firma, es posible establecer estos metadatos mediante el uso de \u201cpar\u00e1metros adicionales\u201d. Los \u201cpar\u00e1metros adicionales\u201d admitidos en este sentido son: signerClaimedRoles Cargos atribuidos para el firmante. Deben separarse los cargos con el car\u00e1cter \u201c|\u201d (y este no puede estar en el propio texto de ning\u00fan cargo). signatureProductionCity Ciudad en la que se realiza la firma. signatureProductionProvince Provincia en la que se realiza la firma. signatureProductionPostalCode C\u00f3digo postal en el que se realiza la firma signatureProductionCountry Pa\u00eds en el que se realiza la firma commitmentTypeIndications N\u00famero de \u201ccommitment type indications\u201d que se van a especificar. Estas son, las finalidades especificadas para la firma que se va a generar. commitmentTypeIndication n Indentifier Identificador de la finalidad n\u00famero n (que va desde 0 hasta el valor menos 1 indicado en la propiedad anterior) que se le asigna a la firma. Los valores posibles que puede tomar y el significado de cada uno son: 1: La firma constituye \u201cPrueba de origen\u201d. 2: La firma constituye \u201cPrueba de recepci\u00f3n\u201d. 3: La firma constituye \u201cPrueba de entrega\u201d. 4: La firma constituye \u201cPrueba de env\u00edo\u201d. 5: La firma constituye \u201cPrueba de aprobaci\u00f3n\u201d. 6: La firma constituye \u201cPrueba de creaci\u00f3n\u201d. commitmentTypeIndication n Description Descripci\u00f3n libre de la finalidad n\u00famero n . Este atributo es opcional. Las nombres de las propiedades deben escribirse tal y como figuran, respetando may\u00fasculas y min\u00fasculas. Para m\u00e1s informaci\u00f3n sobre el establecimiento de \u201cpar\u00e1metros adicionales\u201d en @firma consulte con el Manual del Integrador. Para el establecimiento program\u00e1tico desde Java de par\u00e1metros adicionales consulte con el JavaDoc. Cadena de certificaci\u00f3n en firmas XMLdSig y XAdES Desde la versi\u00f3n 3.3 del Cliente @firma en las firmas XAdES se incluye, por defecto, la cadena de certificaci\u00f3n completa del certificado firmante. Este comportamiento, aunque es el recomendado por el est\u00e1ndar, genera firmas XAdES no compatibles con versi\u00f3n anteriores a la 5.5 de la Plataforma @firma. En la versi\u00f3n 3.3.1 del Cliente @firma se agrega el par\u00e1metro \u201cincludeOnlySignningCertificate\u201d con el que es posible configurar este comportamiento. Para obligar al Cliente @firma a que s\u00f3lo incluya el certificado del firmante en las firmas, cofirmas y contrafirmas generadas es necesario configurar este par\u00e1metro con el valor \u201ctrue\u201d. Para configurar este comportamiento estableceremos el valor del par\u00e1metro mediante el m\u00e9todo addExtraParam(String, String). addExtraParam(\u201cincludeOnlySignningCertificate\u201d, \u201ctrue\u201d); Este par\u00e1metro afecta tanto a las firmas XMLdSig como XAdES. Firmas de contenido binario en XMLDSig y XAdES Cuando se indica al Cliente que se desea firmar datos binarios y estos se facilitan efectivamente en formato binario, el cliente los transforma a Base64 antes de firmarlos, de forma que estos puedan ser insertados en el XML. La normativa ( http://www.w3.org/TR/xmldsig-core/#sec-Object ) indica que siempre que sobre los datos originales se realice una transformaci\u00f3n de este tipo, esta debe declararse en la referencia de la firma XML mediante el algoritmo http://www.w3.org/2000/09/xmldsig#base64 . Declarando esta transformaci\u00f3n, la huella digital firmada corresponder\u00e1 con el original binario, y no con su versi\u00f3n codificada en Base64. No obstante, el cliente incorpora ciertas peculiaridades en la aplicaci\u00f3n de esta norma: \u00danicamente se declaran trasformaciones Base64 en las firmas XAdES y XMLDSig. OOXML y ODF no necesitan estas transformaciones nunca. \u00danicamente se declaran transformaciones Base64 de forma autom\u00e1tica si es el cliente el que realiza la transformaci\u00f3n de binario a Base64. Si los datos se proporcionan ya en Base64 (la transformaci\u00f3n se ha realizado externamente), es el integrador quien debe asegurarse de que, si desea que se declare esta transformaci\u00f3n, se a\u00f1ade de forma manual. Deshabilitaci\u00f3n de las transformaciones Base64 Por si se produjesen problemas de compatibilidad con otros sistemas no compatibles con la normativa XMLDSig / XAdES en cuanto a transformaciones Base64, el cliente establece un mecanismo de desactivaci\u00f3n de esta caracter\u00edstica mediante el siguiente m\u00e9todo del Applet (que es posible invocar v\u00eda JavaScript): ClienteFirma.addExtraParam(String paramName, String paramValue), y el uso concrerto: clienteFirma.addExtraParam(\u201cavoidBase64Transforms\u201d, \u201c true \u201d); Una vez deshabilitada la declaraci\u00f3n de las transformaciones Base64, estas se dejar\u00e1n de a\u00f1adir hasta que se reinicie el Applet o se vuelvan a habilitar mediante la llamada complementaria: clienteFirma.addExtraParam(\u201cavoidBase64Transforms\u201d, \u201c false \u201d); Puede encontrar m\u00e1s informaci\u00f3n sobre el m\u00e9todo addExtraParam en la documentaci\u00f3n JavaDoc. Firma de hojas de estilo en XMLDSig y XAdES La normativa XMLDSig (punto 8.1.3) indica que si un XML declara una hoja de estilo, esta debe ser firmada junto al XML para que la firma asocie a este \u00faltimo con su visualizaci\u00f3n, respetando el concepto \u201clo que se ve es lo que se firma\u201d. Dado que las hojas de estilo pueden declararse de distintas formas, el cliente adopta distintas estrategias para cada forma de declaraci\u00f3n y seg\u00fan la variante de firma. Las formas de declarar una hoja de estilo y la forma de firmar el XML en ese caso por el Cliente son las siguientes: La hoja de estilo est\u00e1 empotrada dentro del XML, y se declara con una referencia local (el valor del atributo href de la declaraci\u00f3n del XSL es un nombre de identificador de nodo XML precedido por \u201c#\u201d). En este caso no es necesaria ninguna estrategia adicional, pues al ser parte la hoja de estilo del XML, siempre que se firma uno, se firma tambi\u00e9n el otro. Esto aplica a la totalidad de las firmas XML. La hoja de estilo est\u00e1 accesible remotamente por protocolo HTTP o HTTPS (el valor del atributo href es una URL v\u00e1lida con esquema http o https). En este caso se a\u00f1ade una referencia a la firma que apunta a la hoja de estilo mediante la misma URL (una referencia Externally Detached). Esto aplica a la totalidad de las firmas XML). Se referencia a la hoja de estilo mediante una referencia relativa local. En este caso, dado que las referencias relativas locales se pierden al firmar (el Applet no sabe en qu\u00e9 directorio o carpeta estaba el XML para localizar el XSL, y no puede asumir d\u00f3nde se guardar\u00e1 la firma generada), las hojas de estilo no se firman. Notas importantes sobre la firma de hojas de estilo XML Desactivaci\u00f3n y activaci\u00f3n de firma de las hojas de estilo El Cliente NO firma por defecto aquellas hojas de estilo que encuentra ya que estas pueden hacer referencia a recursos locales del usuario o recursos remotos no accesibles, pero permite modificar este comportamiento mediante el m\u00e9todo del Applet (que es posible invocar v\u00eda JavaScript): clienteFirma.addExtraParam(String paramName, String paramValue), y el siguiente uso: Desactivar firma de hoja de estilo: clienteFirma.addExtraParam(\u201cignoreStyleSheets\u201d, \u201c true \u201d); Activar firma de hoja de estilo: clienteFirma.addExtraParam(\u201cignoreStyleSheets\u201d, \u201c false \u201d); Una vez deshabilitada o habilitada la firma de hojas de estilo, se mantendr\u00e1 ese comportamiento hasta que se reinicie el Applet o se vuelva a cambiar mediante la llamada complementaria. Puede encontrar m\u00e1s informaci\u00f3n sobre el m\u00e9todo addExtraParam en la documentaci\u00f3n JavaDoc. Hojas de estilo anidadas Las hojas de estilo XSL pueden referenciar a su vez a otras hojas de estilo mediante las clausulas <xsl:include> y <xsl:import>. Mediante estas etiquetas, se puede construir una cadena de ficheros de definici\u00f3n de estilos en forma de \u00e1rbol, donde unas referencian a otras tanto de forma remota como local, en modo relativo o absoluto. En la actualidad, el Cliente @firma no sigue la cadena de referencias para firmar la totalidad de los ficheros que definen el estilo del XML, sino que opera \u00fanicamente sobre el primer fichero referenciado por el XML en el atributo href de la etiqueta xml-stylesheet. Intente en la medida de lo posible evitar el uso de <xsl:include> y <xsl:import> en hojas de estilo, y valore la posibilidad de incluir clausulas en su aplicaci\u00f3n reflejando esta limitaci\u00f3n. Transformaciones XML Los formatos de firma XAdES y XMLdSig permiten la configuraci\u00f3n de transformaciones XML personalizadas. Estas transformaciones se aplican a un XML de datos antes de firmarlo, de tal forma que no se firma el XML original, sino el transformado. Las transformaciones quedan declaradas en la firma para que quede constancia de ellas y sea posible validar la firma por medio del XML de datos original. La declaraci\u00f3n de transformaciones XML para la firma es \u00fatil para la ejecuci\u00f3n de firmas con un formato espec\u00edfico. Por ejemplo, la especificaci\u00f3n de factura electr\u00f3nica establece que no se debe firmar el XML de datos al completo, sino partes espec\u00edficas del mismo. Se permite la declaraci\u00f3n de distintos tipos de transformaciones, algunos de los cuales tienen subtipos. La l\u00f3gica de una transformaci\u00f3n se especifica mediante un cuerpo, salvo en casos concretos en los que la l\u00f3gica est\u00e1 predefinida por el tipo de transformaci\u00f3n (caso de las transformaciones Base64 y Enveloped). Los tipos de transformaciones soportados son: Transformaci\u00f3n XPATH : Tipo: http://www.w3.org/TR/1999/REC-xpath-19991116 Subtipos: No tiene subtipos. Cuerpo: Especificado mediante sentencias de tipo XPATH. Transformaci\u00f3n XPATH2 : Tipo: http://www.w3.org/2002/06/xmldsig-filter2 Subtipos: subtract : Operaci\u00f3n de substracci\u00f3n. intersect : Operaci\u00f3n de intersecci\u00f3n. union : Operaci\u00f3n de uni\u00f3n. Cuerpo: Especificado mediante sentencias de tipo XPATH2. Transformaci\u00f3n BASE64 (esta transformaci\u00f3n ya se establece por defecto cuando se firman datos binarios, por lo que no se recomienda su uso de forma independiente). Requiere que los datos proporcionados est\u00e9n en Base64 y que se indique so codificaci\u00f3n mediante el par\u00e1metro \u201cencoding=base64\u201d: Tipo: http://www.w3.org/2000/09/xmldsig#base64 Subtipos: No tiene subtipos. Cuerpo: No tiene cuerpo. Transformaci\u00f3n ENVELOPED (esta transformaci\u00f3n ya se establece por defecto en los formatos de firma enveloped, por lo que no se recomienda su uso de forma independiente): Tipo: http://www.w3.org/2000/09/xmldsig#enveloped-signature Subtipos: No tiene subtipos. Cuerpo: No tiene cuerpo. No es posible especificar transformaciones complejas que incluyan varias sentencias. En su lugar, puede declararse una sucesi\u00f3n de transformaciones simples que produzcan el mismo resultado. Cada una de las transformaciones se aplicar\u00e1 de forma ordenada sobre el resultado de la anterior. Las transformaciones personalizadas se declaran a trav\u00e9s del m\u00e9todo: addXMLTransform(String tipo, String subtipo, String cuerpo) Este m\u00e9todo puede utilizarse sucesivas veces para establecer varias transformaciones que se apliquen ordenadamente. Para eliminar todas las transformaciones declaradas se utiliza el m\u00e9todo: resetXMLTransforms() Uso de estructuras Manifest en firmas XAdES Es posible crear firmas XAdES en las que, siguiendo el punto 2.3 de la especificaci\u00f3n XMLDSig ( http://www.w3.org/TR/2000/WD-xmldsig-core-20000510/#sec-o-Manifest ), las referencias XML no se firmen directamente, sino que se firme una estructura de tipo Manifest que a su vez contenga las referencias a firmar. De esta forma, tal y como indica la normativa, la resoluci\u00f3n de las referencias incluidas dentro de una estructura Manifest es una responsabilidad del validador, y de cara a la propia firma no se resuelven para calcular las huellas digitales (lo que permite hacer firmas XML expl\u00edcitas). Consulte la especificaci\u00f3n XMLDSig para mayor informaci\u00f3n. Para crear firmas XAdES con estructuras Manifest debe especificarse el siguiente par\u00e1metro adicional: useManifest=true Un ejemplo muy simplificado de la estructura de una firma con Manifest ser\u00eda: <ds:Signature Id=\"Signature-02553\"> <ds:SignedInfo> <ds:Reference Id=\"Reference-894bfd39 \" Type=\"http://www.w3.org/2000/09/xmldsig#Manifest\" URI=\"#Manifest-36e2de7b\"> \u2026 </ds:Reference> </ds:SignedInfo> \u2026 <ds:Object Id=\"ManifestObject-ffd54e53\"> <ds:Manifest Id=\"Manifest-36e2de7b\"> <ds:Reference Id=\"Reference-894bfd39\" URI=\"myscheme://path/file\"> <ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha512\"/> <ds:DigestValue>\u2026</ds:DigestValue> </ds:Reference> </ds:Manifest> </ds:Object> \u2026 </ds:Signature> En este ejemplo el contenido firmado es \u201c myscheme://path/file \u201d, pero al firmar no se ha intentado acceder a ese fichero, y se ha dado por buena la huella digital indicada. Incidencias conocidas Mensajes extra\u00f1os en consola El cliente, al firmar ficheros no-XML en modalidades impl\u00edcitas o al firmar cualquier tipo de fichero (XML o no) en modalidades expl\u00edcitas puede escribir el siguiente mensaje en consola: [Fatal Error] :1:1: Content is not allowed in prolog. Este mensaje debe ignorarse, ya que no se genera desde la aplicaci\u00f3n, sino desde las clases de Sun Microsystems / Apache destinadas a identificar si el contenido del fichero es XML o no. No es posible ocultar este mensaje o evitar que se escriba en la consola. Diferencias en las firmas generadas respecto a versiones anteriores del cliente y sus m\u00f3dulos En la versi\u00f3n 3.2 del Cliente y anteriores se inclu\u00eda en la firma \u00fanicamente el certificado del firmantes, mientras que en la versi\u00f3n 3.3 y superiores, por defecto, se incluye toda la cadena de certificaci\u00f3n. Para conservar el comportamiento anterior es necesario configurar el par\u00e1metro extra de firma \u201cincludeOnlySignningCertificate\u201d al valor \u201ctrue\u201d. En las contrafirmas, la versi\u00f3n anterior del cliente identificaba las firmas seg\u00fan el IssuerName del certificado firmante. Si firma el documento dentro de una misma organizaci\u00f3n es muy probable que el IssuerName sea el mismo para todos los firmantes (normalmente, el certificado lo habr\u00e1 emitido la misma autoridad de certificaci\u00f3n para los empleados de una determinada organizaci\u00f3n), por lo que resultaba imposible discernir entre los firmantes. Cuando se recibe un documento ya firmado, para aceptar ese documento y firma, lo importante es conocer qui\u00e9n ha firmado ese documento, por lo que es aconsejable que se identifiquen seg\u00fan el SubjectName o el CommonName de su certificado. Las versiones v.2.x y v3.0 del Cliente @firma nunca declaraban (en ning\u00fan formato XML) transformaciones Base64 cuando realizaba estas conversiones. La versi\u00f3n actual (ver puntos anteriores) declara estas transformaciones (aspecto requerido por las normativas) para las firmas XAdES y XMLDSig. Si se firma un XML que declara una hoja de estilo XSL en modo Enveloped, las versiones del cliente v2.x y 3.0 eliminaban la declaraci\u00f3n de la hoja de estilo, mientras que el v3.1 mantiene esta declaraci\u00f3n. Las versiones del cliente v.2.x y v3.0 no firmaban hojas de estilo asociadas a un XML, mientras que la versi\u00f3n actual s\u00ed las firma. Ejemplos de Estructuras XML generadas por el m\u00f3dulo XMLDSig Detached Interno Expl\u00edcito / Impl\u00edcito <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <AFIRMA> <CONTENT Encoding= \"...\" Id= \"ID-CONTENT\" MimeType= \"...\" >...</CONTENT> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"ID-Signature\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id=\"ID-Reference\" URI=\"#ID-CONTENT\"> <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" >...</ds:SignatureValue> <ds:KeyInfo Id=\"2e9ff06f-a4cf-48f1-b670-b0dcdec56331-KeyInfo\"> <ds:KeyValue> <ds:RSAKeyValue><ds:Modulus>...</ds:Modulus><ds:Exponent>...</ds:Exponent></ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data><ds:X509Certificate>...</ds:X509Certificate></ds:X509Data> </ds:KeyInfo> </ds:Signature> </AFIRMA> Enveloping Expl\u00edcito / Impl\u00edcito <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <ds:Signature xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" Type= \"http://www.w3.org/2000/09/xmldsig#Object\" URI= \"#ID-Object\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> <ds:Object Encoding= \"...\" Id= \"ID-Object\" MimeType= \"...\" >...</ds:Object> </ds:Signature> Enveloped <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <documento> ... <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"ID-Signature\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" URI= \"\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" /> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> </ds:Signature> </documento> Co-Firmas Ejemplo con \u201cDetached Interna\u201d y dos firmantes: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <AFIRMA> <CONTENT Encoding= \"base64\" Id= \"ID-CONTENT\" MimeType= \"...\" >...</CONTENT> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"ID-Signature\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id=\"ID-Reference\" URI=\"#ID-CONTENT\"> <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> </ds:Signature> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"ID-Signature\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id=\"ID-Reference\" URI=\"#ID-CONTENT\"> <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID2-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID2-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> </ds:Signature> </AFIRMA> Contrafirmas Ejemplo con \u201cDetached Interna\u201d y dos firmantes: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <AFIRMA> <CONTENT Encoding= \"\u2026\" Id= \"ID-CONTENT\" MimeType= \"...\" >...</CONTENT> <ds:Signature xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature1\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" URI= \"#ID-CONTENT\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>sEfy8aIUCmWhhBUOsUiHyxvmLvs=</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue1\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> </ds:Signature> <ds:Signature xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature2\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" URI= \"#ID-CONTENT\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>\u2026</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue2\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> </ds:Signature> <ds:Signature xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature3\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" Type= \"http://uri.etsi.org/01903#CountersignedSignature\" URI= \"#ID-SignatureValue1\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue3\" /> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> </ds:Signature> </AFIRMA> XAdES Detached Interno Expl\u00edcito / Impl\u00edcito <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <AFIRMA> <CONTENT Encoding= \"...\" Id= \"ID-CONTENT\" MimeType= \"...\" >...</CONTENT> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"ID-Signature\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id=\"ID-Reference\" URI=\"#ID-CONTENT\"> <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference Type=\"http://uri.etsi.org/01903#SignedProperties\" URI=\"#ID- SignedProperties\"> <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" /> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue><ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue></ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> <ds:Object> <xades:QualifyingProperties xmlns:dsign= \"http://www.w3.org/2000/09/xmldsig#\" xmlns:xades=\"http://uri.etsi.org/01903/v1.3.2#\" Id=\"ID-QualifyingProperties\" Target=\"#ID-Signature\"> <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <ds:DigestMethod Algorithm= \"...\" /> <ds:DigestValue>...</ds:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <ds:X509IssuerName>...</ds:X509IssuerName> <ds:X509SerialNumber>...</ds:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties> <xades:DataObjectFormat ObjectReference= \"#ID-Reference\" > <xades:Description /> <xades:MimeType>...</xades:MimeType> <xades:Encoding>...</xades:Encoding> </xades:DataObjectFormat> </xades:SignedDataObjectProperties> </xades:SignedProperties> </xades:QualifyingProperties> </ds:Object> </ds:Signature> </AFIRMA> Enveloping Expl\u00edcito / Impl\u00edcito <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <ds:Signature xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" Type= \"http://www.w3.org/2000/09/xmldsig#Object\" URI= \"#ID-Object\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>eg9yVHgqINMyyztUbeqlfJozTzY=</ds:DigestValue> </ds:Reference> <ds:Reference Type= \"http://uri.etsi.org/01903#SignedProperties\" URI= \"#ID- SignedProperties\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>8v1ohri++lnTP4D0b3P0gY9D7QI=</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> <ds:Object Encoding= \"...\" Id= \"ID-Object\" MimeType= \"...\" >...</ds:Object> <ds:Object> <xades:QualifyingProperties xmlns:dsign= \"http://www.w3.org/2000/09/xmldsig#\" xmlns:xades= \"http://uri.etsi.org/01903/v1.3.2#\" Id= \"ID-QualifyingProperties\" Target= \"#ID- Signature\" > <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <ds:X509IssuerName>...</ds:X509IssuerName> <ds:X509SerialNumber>...</ds:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties> <xades:DataObjectFormat ObjectReference= \"#ID-Reference\" > <xades:Description /> <xades:MimeType>...</xades:MimeType> <xades:Encoding>...</xades:Encoding> </xades:DataObjectFormat> </xades:SignedDataObjectProperties> </xades:SignedProperties> </xades:QualifyingProperties> </ds:Object> </ds:Signature> Enveloped <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <documento> ... <ds:Signature xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" URI= \"\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/2000/09/xmldsig#enveloped- signature\" /> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference Type= \"http://uri.etsi.org/01903#SignedProperties\" URI= \"#ID- SignedProperties\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> <ds:Object> <xades:QualifyingProperties xmlns:dsign= \"http://www.w3.org/2000/09/xmldsig#\" xmlns:xades= \"http://uri.etsi.org/01903/v1.3.2#\" Id= \"ID-QualifyingProperties\" Target= \"#ID- Signature\" > <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <ds:X509IssuerName>...</ds:X509IssuerName> <ds:X509SerialNumber>...</ds:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties> <xades:DataObjectFormat ObjectReference= \"#ID-Reference\" > <xades:Description /> <xades:MimeType>...</xades:MimeType> <xades:Encoding>...</xades:Encoding> </xades:DataObjectFormat> </xades:SignedDataObjectProperties> </xades:SignedProperties> </xades:QualifyingProperties> </ds:Object> </ds:Signature> </documento> Co-Firmas Ejemplo con \u201cDetached Interna\u201d y dos firmantes: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <AFIRMA> <CONTENT Encoding= \"...\" Id= \"ID-CONTENT\" MimeType= \"...\" >...</CONTENT> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"ID-Signature\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-CONTENT\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference Type=\"http://uri.etsi.org/01903#SignedProperties\" URI=\"#ID-SignedProperties\"> <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"...\" ></ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> <ds:Object> <xades:QualifyingProperties xmlns:dsign= \"http://www.w3.org/2000/09/xmldsig#\" xmlns:xades=\"http://uri.etsi.org/01903/v1.3.2#\" Id=\"ID-QualifyingProperties\" Target=\"#ID-Signature\"> <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <ds:X509IssuerName>...</ds:X509IssuerName> <ds:X509SerialNumber>...</ds:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties> <xades:DataObjectFormat ObjectReference= \"#ID-Reference\" > <xades:Description /> <xades:MimeType>...</xades:MimeType> <xades:Encoding>...</xades:Encoding> </xades:DataObjectFormat> </xades:SignedDataObjectProperties> </xades:SignedProperties> </xades:QualifyingProperties> </ds:Object> </ds:Signature> <dsign:Signature xmlns:dsign=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"ID-Signature\"> <dsign:SignedInfo> <dsign:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <dsign:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <dsign:Reference Id= \"ID-Reference\" URI= \"#ID-CONTENT\" > <dsign:Transforms> <dsign:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> <dsign:Reference Type=\"http://uri.etsi.org/01903#SignedProperties\" URI=\"#ID-SignedProperties\"> <dsign:Transforms> <dsign:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> <dsign:Reference URI= \"#ID2-KeyInfo\" > <dsign:Transforms> <dsign:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> </dsign:SignedInfo> <dsign:SignatureValue Id= \"ID-SignatureValue\" >...</dsign:SignatureValue> <dsign:KeyInfo Id= \"ID2-KeyInfo\" > <dsign:KeyValue> <dsign:RSAKeyValue> <dsign:Modulus>...</dsign:Modulus> <dsign:Exponent>...</dsign:Exponent> </dsign:RSAKeyValue> </dsign:KeyValue> <dsign:X509Data> <dsign:X509Certificate>...</dsign:X509Certificate> </dsign:X509Data> </dsign:KeyInfo> <dsign:Object> <xades:QualifyingProperties xmlns:xades= \"http://uri.etsi.org/01903/v1.3.2#\" Id=\"ID-QualifyingProperties\" Target=\"#ID-Signature\"> <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <dsign:X509IssuerName>...</dsign:X509IssuerName> <dsign:X509SerialNumber>...</dsign:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties /> </xades:SignedProperties> </xades:QualifyingProperties> </dsign:Object> </dsign:Signature> </AFIRMA> Contrafirmas Ejemplo con \u201cDetached Interna\u201d y dos firmantes: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <AFIRMA> <CONTENT Encoding= \"...\" Id= \"ID-CONTENT\" MimeType= \"...\" >...</CONTENT> <ds:Signature xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" URI= \"#ID-CONTENT\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference Type= \"http://uri.etsi.org/01903#SignedProperties\" URI= \"#ID-SignedProperties\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"...\" ></ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> <ds:Object> <xades:QualifyingProperties xmlns:dsign= \"http://www.w3.org/2000/09/xmldsig#\" xmlns:xades= \"http://uri.etsi.org/01903/v1.3.2#\" Id= \"ID-QualifyingProperties\" Target= \"#ID-Signature\" > <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <ds:X509IssuerName>...</ds:X509IssuerName> <ds:X509SerialNumber>...</ds:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties> <xades:DataObjectFormat ObjectReference= \"#ID-Reference\" > <xades:Description /> <xades:MimeType>...</xades:MimeType> <xades:Encoding>...</xades:Encoding> </xades:DataObjectFormat> </xades:SignedDataObjectProperties> </xades:SignedProperties> </xades:QualifyingProperties> </ds:Object> </ds:Signature> <dsign:Signature xmlns:dsign= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature\" > <dsign:SignedInfo> <dsign:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <dsign:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <dsign:Reference Id= \"ID-Reference\" URI= \"#ID-CONTENT\" > <dsign:Transforms> <dsign:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>5nfu4+SLSMHDs+CwGRGGoSjNyhw=</dsign:DigestValue> </dsign:Reference> <dsign:Reference Type= \"http://uri.etsi.org/01903#SignedProperties\" URI= \"#26561cf7-e5c0-455a-b220-554a822227b8-SignedProperties\" > <dsign:Transforms> <dsign:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> <dsign:Reference URI= \"#ID-KeyInfo\" > <dsign:Transforms> <dsign:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> </dsign:SignedInfo> <dsign:SignatureValue Id= \"ID-SignatureValue\" >...</dsign:SignatureValue> <dsign:KeyInfo Id= \"ID-KeyInfo\" > <dsign:KeyValue> <dsign:RSAKeyValue> <dsign:Modulus>...</dsign:Modulus> <dsign:Exponent>...</dsign:Exponent> </dsign:RSAKeyValue> </dsign:KeyValue> <dsign:X509Data> <dsign:X509Certificate>...</dsign:X509Certificate> </dsign:X509Data> </dsign:KeyInfo> <dsign:Object> <xades:QualifyingProperties xmlns:xades= \"http://uri.etsi.org/01903/v1.3.2#\" Id= \"ID-QualifyingProperties\" Target= \"#ID-Signature\" > <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <dsign:X509IssuerName>...</dsign:X509IssuerName> <dsign:X509SerialNumber>...</dsign:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties /> </xades:SignedProperties> <UnsignedProperties> <UnsignedSignatureProperties> <CounterSignature> <dsign:Signature Id= \"ID-Signature\" > <dsign:SignedInfo> <dsign:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <dsign:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <dsign:Reference Id= \"ID-Reference\" URI= \"#ID-SignatureValue\" > <dsign:Transforms> <dsign:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> <dsign:Reference Type= \"http://uri.etsi.org/01903#SignedProperties\" URI= \"#ID-SignedProperties\" > <dsign:Transforms> <dsign:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> <dsign:Reference URI= \"#ID-KeyInfo\" > <dsign:Transforms> <dsign:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> </dsign:SignedInfo> <dsign:SignatureValue Id= \"ID-SignatureValue\" >...</dsign:SignatureValue> <dsign:KeyInfo Id= \"ID-KeyInfo\" > <dsign:KeyValue> <dsign:RSAKeyValue> <dsign:Modulus>...</dsign:Modulus> <dsign:Exponent>...</dsign:Exponent> </dsign:RSAKeyValue> </dsign:KeyValue> <dsign:X509Data> <dsign:X509Certificate>...</dsign:X509Certificate> </dsign:X509Data> </dsign:KeyInfo> <dsign:Object> <xades:QualifyingProperties Id= \"ID-QualifyingProperties\" Target= \"#ID-Signature\" > <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <dsign:X509IssuerName>...</dsign:X509IssuerName> <dsign:X509SerialNumber>...</dsign:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties /> </xades:SignedProperties> </xades:QualifyingProperties> </dsign:Object> </dsign:Signature> </CounterSignature> </UnsignedSignatureProperties> </UnsignedProperties> </xades:QualifyingProperties> </dsign:Object> </dsign:Signature> </AFIRMA> Distintas versiones de XAdES Por defecto, el cliente genera firmas conforme la versi\u00f3n 1.3.2 de XAdES (BES y EPES), pero podemos hacer que se generen firmas conforme otras versiones del est\u00e1ndar modificando dos `propiedades de la firma: la URL del espacio de nombres y la URL del tipo de las propiedades firmadas. Si queremos, por ejemplo, que las firmas se generen conforme la versi\u00f3n 1.4.1 del est\u00e1ndar (\u00fatil si queremos que la firma est\u00e9 preparada para a\u00f1adir caracter\u00edsticas avanzadas de sello de tiempo seg\u00fan la \u00faltima versi\u00f3n de XAdES), debemos indic\u00e1rselo expresamente al Applet mediante \u201cpar\u00e1metros extraordinarios\u201d. La forma de realizar estas indicaciones es mediante el m\u00e9todo del Applet clienteFirma.addExtraParam(String paramName, String paramValue), y el siguiente uso: clienteFirma.addExtraParam(\u201cxadesNamespace\u201d, \u201chttp://uri.etsi.org/01903/v1.4.1#\u201d); clienteFirma.addExtraParam(\u201csignedPropertiesTypeUrl\u201d, \u201chttp://uri.etsi.org/01903#SignedProperties\u201d); Mientras que xadesNamespace establece la URL de definici\u00f3n del espacio de nombres de XAdES signedPropertiesTypeUrl establece la URL de definici\u00f3n del tipo de propiedades firmadas. Para adecuarse a las distintas versiones de XAdES ser\u00e1 necesario indicar los siguientes valores en estos atributos: Versi\u00f3n 1.4.1 de XAdES: xadesNamespace: \u201c http://uri.etsi.org/01903/v1.4.1# \u201d signedPropertiesTypeUrl: \u201chttp://uri.etsi.org/01903#SignedProperties\u201d Versi\u00f3n 1.3.2 de XAdES: xadesNamespace: \u201chttp://uri.etsi.org/01903/v1.3.2#\u201d signedPropertiesTypeUrl: \u201chttp://uri.etsi.org/01903#SignedProperties\u201d Versi\u00f3n 1.2.2 de XAdES: xadesNamespace: \u201chttp://uri.etsi.org/01903/v1.2.2#\u201d signedPropertiesTypeUrl: \u201chttp://uri.etsi.org/01903/v1.2.2#SignedProperties\u201d Versi\u00f3n 1.1.1 de XAdES: xadesNamespace: \u201chttp://uri.etsi.org/01903/v1.1.1#\u201d signedPropertiesTypeUrl: \u201chttp://uri.etsi.org/01903/v1.1.1#SignedProperties\u201d Cuando establezcamos un valor para el espacio de nombres de XAdES, este se utilizar\u00e1 para todas las firmas XAdES que se realicen a partir de entonces (o hasta una re-inicializaci\u00f3n del Applet). Para restablecer el valor por defecto debemos deshacer el establecimiento de par\u00e1metros extraordinarios con el m\u00e9todo equivalente del Applet, ClienteFirma.removeExtraParam(String paramName), que en nuestro caso se concretar\u00eda en: clienteFirma.removeExtraParam(\u201cxadesNamespace\u201d); clienteFirma.removeExtraParam(\u201csignedPropertiesTypeUrl\u201d); Estos m\u00e9todos pueden llamarse desde JavaScript, y puede encontrar informaci\u00f3n adicional en la documentaci\u00f3n JavaDoc del Applet @firma. Informaci\u00f3n de utilidad Normativa XMLDSig http://www.w3.org/TR/xmldsig-core/ Normativa XAdES http://www.etsi.org Glosario de t\u00e9rminos Firma electr\u00f3nica Es el conjunto de datos, en forma electr\u00f3nica, anejos a otros datos electr\u00f3nicos o asociados funcionalmente con ellos, utilizados como medio para identificar formalmente al autor o a los autores del documento que la recoge. XML Digital Signature (XMLDSig) Es una recomendaci\u00f3n del W3C que define una sintaxis XML para la firma digital XML Advanced Signature (XAdES) Es un conjunto de extensiones a las recomendaciones XML-DSig haci\u00e9ndolas adecuadas para la firma electr\u00f3nica avanzada. RSA Es un sistema criptogr\u00e1fico de clave p\u00fablica desarrollado en 1977. En la actualidad, RSA es el primer y m\u00e1s utilizado algoritmo de este tipo y es v\u00e1lido tanto para cifrar como para firmar digitalmente. XML Es un metalenguaje extensible de etiquetas desarrollado por el World Wide Web Consortium (W3C). Es una simplificaci\u00f3n y adaptaci\u00f3n del SGML y permite definir la gram\u00e1tica de lenguajes espec\u00edficos (de la misma manera que HTML es a su vez un lenguaje definido por SGML). Por lo tanto XML no es realmente un lenguaje en particular, sino una manera de definir lenguajes para diferentes necesidades. Algunos de estos lenguajes que usan XML para su definici\u00f3n son XHTML, SVG, MathML. Office Open XML (OOXML) Es un formato de archivo abierto y est\u00e1ndar cuyas extensiones m\u00e1s comunes son .docx, .xlsx y .pptx. Se le utiliza para representar y almacenar hojas de c\u00e1lculo, diagramas, presentaciones y documentos de texto. Un archivo Office Open XML contiene principalmente datos basados en el lenguaje de marcado XML, comprimidos en un contenedor .zip espec\u00edfico. Open Document Format (ODF) Es un formato de fichero est\u00e1ndar para el almacenamiento de documentos ofim\u00e1ticos tales como hojas de c\u00e1lculo, memorandos, gr\u00e1ficas y presentaciones. Aunque las especificaciones fueron inicialmente elaboradas por Sun, el est\u00e1ndar fue desarrollado por el comit\u00e9 t\u00e9cnico para Open Office XML de la organizaci\u00f3n OASIS y est\u00e1 basado en un esquema XML inicialmente creado e implementado por la suite ofim\u00e1tica OpenOffice.org (ver OpenOffice.org XML). ZIP Es un formato de almacenamiento sin p\u00e9rdida, muy utilizado para la compresi\u00f3n de datos como im\u00e1genes, programas o documentos. PDF Es un formato de almacenamiento de documentos, desarrollado por la empresa Adobe Systems. Este formato es de tipo compuesto (imagen vectorial, mapa de bits y texto). SHA Es un sistema de funciones hash criptogr\u00e1ficas relacionadas de la Agencia de Seguridad Nacional de los Estados Unidos y publicadas por el National Institute of Standards and Technology (NIST). El primer miembro de la familia fue publicado en 1993 es oficialmente llamado SHA. Sin embargo, hoy d\u00eda, no oficialmente se le llama SHA-0 para evitar confusiones con sus sucesores. Dos a\u00f1os m\u00e1s tarde el primer sucesor de SHA fue publicado con el nombre de SHA-1. Existen cuatro variantes m\u00e1s que se han publicado desde entonces cuyas diferencias se basan en un dise\u00f1o algo modificado y rangos de salida incrementados: SHA-224, SHA-256, SHA-384, y SHA-512 (llam\u00e1ndose SHA-2 a todos ellos). PKCS Se refiere a un grupo de est\u00e1ndares de criptograf\u00eda de clave p\u00fablica concebidos y publicados por los laboratorios de RSA en California. A RSA Security se le asignaron los derechos de licenciamiento para la patente de algoritmo de clave asim\u00e9trica RSA y adquiri\u00f3 los derechos de licenciamiento para muchas otras patentes de claves. W3C Es un consorcio internacional que produce recomendaciones para la World Wide Web. Est\u00e1 dirigida por Tim Berners-Lee, el creador original de URL (Uniform Resource Locator, Localizador Uniforme de Recursos), HTTP (HyperText Transfer Protocol, Protocolo de Transferencia de HiperTexto) y HTML (Lenguaje de Marcado de HiperTexto) que son las principales tecnolog\u00edas sobre las que se basa la Web. OpenOffice.org es una suite ofim\u00e1tica libre (c\u00f3digo abierto y distribuci\u00f3n gratuita) que incluye herramientas como procesador de textos, hoja de c\u00e1lculo, presentaciones, herramientas para el dibujo vectorial y base de datos. Est\u00e1 disponible para varias plataformas, tales como Microsoft Windows, GNU/Linux, BSD, Solaris y Mac OS X. Soporta numerosos formatos de archivo, incluyendo como predeterminado el formato est\u00e1ndar ISO/IEC OpenDocument (ODF), entre otros formatos comunes. A febrero de 2010, OpenOffice soporta m\u00e1s de 110 idiomas. Base64 Es un sistema de numeraci\u00f3n posicional que usa 64 como base. Es la mayor potencia de dos que puede ser representada usando \u00fanicamente los caracteres imprimibles de ASCII. Esto ha propiciado su uso para codificaci\u00f3n de correos electr\u00f3nicos, PGP y otras aplicaciones. Todas las variantes famosas que se conocen con el nombre de Base64 usan el rango de caracteres A-Z, a-z y 0-9 en este orden para los primeros 62 d\u00edgitos, pero los s\u00edmbolos escogidos para los \u00faltimos dos d\u00edgitos var\u00edan considerablemente de unas a otras. Otros m\u00e9todos de codificaci\u00f3n como UUEncode y las \u00faltimas versiones de binhex usan un conjunto diferente de 64 caracteres para representar 6 d\u00edgitos binarios, pero \u00e9stos nunca son llamados Base64. ASN.1 Es una norma para representar datos independientemente de la m\u00e1quina que se est\u00e9 usando y sus formas de representaci\u00f3n internas. Es un protocolo de nivel de presentaci\u00f3n en el modelo OSI. Autoridad de Certificaci\u00f3n (CA) Es una entidad de confianza, responsable de emitir y revocar los certificados digitales o certificados, utilizados en la firma electr\u00f3nica, para lo cual se emplea la criptograf\u00eda de clave p\u00fablica. Jur\u00eddicamente es un caso particular de Prestador de Servicios de Certificaci\u00f3n. Certificado Digital Es un documento digital mediante el cual un tercero confiable (una autoridad de certificaci\u00f3n) garantiza la vinculaci\u00f3n entre la identidad de un sujeto o entidad y su clave p\u00fablica. Infraestructura de Clave P\u00fablica (PKI) Es una combinaci\u00f3n de hardware y software, pol\u00edticas y procedimientos de seguridad que permiten la ejecuci\u00f3n con garant\u00edas de operaciones criptogr\u00e1ficas como el cifrado, la firma digital o el no repudio de transacciones electr\u00f3nicas. Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported Usted es libre de: | < style=\"width:0.52083in;height:0.52083in\" alt=\"share\" /> | Compartir - copiar, distribuir, ejecutar y comunicar p\u00fablicamente la obra | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"remix\" /> | hacer obras derivadas | Bajo las condiciones siguientes: | < style=\"width:0.52083in;height:0.52083in\" alt=\"by\" /> | Atribuci\u00f3n \u2014 Debe reconocer los cr\u00e9ditos de la obra de la manera especificada por el autor o el licenciante (pero no de una manera que sugiera que tiene su apoyo o que apoyan el uso que hace de su obra). | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"nc\" /> | NoComercial \u2014 No puede utilizar esta obra para fines comerciales. | | < style=\"width:0.52083in;height:0.52083in\" alt=\"sa\" /> | Compartir bajo la Misma Licencia \u2014 Si altera o transforma esta obra, o genera una obra derivada, s\u00f3lo puede distribuir la obra generada bajo una licencia id\u00e9ntica a \u00e9sta. | Entendiendo que: Renuncia \u2014 Alguna de estas condiciones puede no aplicarse si se obtiene el permiso del titular de los derechos de autor Dominio P\u00fablico \u2014 Cuando la obra o alguno de sus elementos se hallen en el dominio p\u00fablico seg\u00fan la ley vigente aplicable, esta situaci\u00f3n no quedar\u00e1 afectada por la licencia. Otros derechos \u2014 Los derechos siguientes no quedan afectados por la licencia de ninguna manera: Los derechos derivados de usos leg\u00edtimos u otras limitaciones reconocidas por ley no se ven afectados por lo anterior. Los derechos morales del auto; Derechos que pueden ostentar otras personas sobre la propia obra o su uso, como por ejemplo derechos de imagen o de privacidad. Aviso \u2014 Al reutilizar o distribuir la obra, tiene que dejar muy en claro los t\u00e9rminos de la licencia de esta obra. La mejor forma de hacerlo es enlazar a esta p\u00e1gina. Licencia LA OBRA O LA PRESTACI\u00d3N (SEG\u00daN SE DEFINEN M\u00c1S ADELANTE) SE PROPORCIONA BAJO LOS T\u00c9RMINOS DE ESTA LICENCIA P\u00daBLICA DE CREATIVE COMMONS (CCPL O LICENCIA). LA OBRA O LA PRESTACI\u00d3N SE ENCUENTRA PROTEGIDA POR LA LEY ESPA\u00d1OLA DE PROPIEDAD INTELECTUAL Y/O CUALESQUIERA OTRAS NORMAS QUE RESULTEN DE APLICACI\u00d3N. QUEDA PROHIBIDO CUALQUIER USO DE LA OBRA O PRESTACI\u00d3N DIFERENTE A LO AUTORIZADO BAJO ESTA LICENCIA O LO DISPUESTO EN LA LEY DE PROPIEDAD INTELECTUAL. MEDIANTE EL EJERCICIO DE CUALQUIER DERECHO SOBRE LA OBRA O LA PRESTACI\u00d3N, USTED ACEPTA Y CONSIENTE LAS LIMITACIONES Y OBLIGACIONES DE ESTA LICENCIA, SIN PERJUICIO DE LA NECESIDAD DE CONSENTIMIENTO EXPRESO EN CASO DE VIOLACI\u00d3N PREVIA DE LOS T\u00c9RMINOS DE LA MISMA. EL LICENCIADOR LE CONCEDE LOS DERECHOS CONTENIDOS EN ESTA LICENCIA, SIEMPRE QUE USTED ACEPTE LOS PRESENTES T\u00c9RMINOS Y CONDICIONES. 1. Definiciones La obra es la creaci\u00f3n literaria, art\u00edstica o cient\u00edfica ofrecida bajo los t\u00e9rminos de esta licencia. En esta licencia se considera una prestaci\u00f3n cualquier interpretaci\u00f3n, ejecuci\u00f3n, fonograma, grabaci\u00f3n audiovisual, emisi\u00f3n o transmisi\u00f3n, mera fotograf\u00eda u otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente aplicable. La aplicaci\u00f3n de esta licencia a una colecci\u00f3n (definida m\u00e1s adelante) afectar\u00e1 \u00fanicamente a su estructura en cuanto forma de expresi\u00f3n de la selecci\u00f3n o disposici\u00f3n de sus contenidos, no siendo extensiva a \u00e9stos. En este caso la colecci\u00f3n tendr\u00e1 la consideraci\u00f3n de obra a efectos de esta licencia. El titular originario es: En el caso de una obra literaria, art\u00edstica o cient\u00edfica, la persona natural o grupo de personas que cre\u00f3 la obra. En el caso de una obra colectiva, la persona que la edite y divulgue bajo su nombre, salvo pacto contrario. En el caso de una interpretaci\u00f3n o ejecuci\u00f3n, el actor, cantante, m\u00fasico, o cualquier otra persona que represente, cante, lea, recite, interprete o ejecute en cualquier forma una obra. En el caso de un fonograma, el productor fonogr\u00e1fico, es decir, la persona natural o jur\u00eddica bajo cuya iniciativa y responsabilidad se realiza por primera vez una fijaci\u00f3n exclusivamente sonora de la ejecuci\u00f3n de una obra o de otros sonidos. En el caso de una grabaci\u00f3n audiovisual, el productor de la grabaci\u00f3n, es decir, la persona natural o jur\u00eddica que tenga la iniciativa y asuma la responsabilidad de las fijaciones de un plano o secuencia de im\u00e1genes, con o sin sonido. En el caso de una emisi\u00f3n o una transmisi\u00f3n, la entidad de radiodifusi\u00f3n. En el caso de una mera fotograf\u00eda, aquella persona que la haya realizado. En el caso de otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente, la persona que \u00e9sta se\u00f1ale. Se considerar\u00e1n obras derivadas aquellas obras creadas a partir de la licenciada, como por ejemplo: las traducciones y adaptaciones; las revisiones, actualizaciones y anotaciones; los compendios, res\u00famenes y extractos; los arreglos musicales y, en general, cualesquiera transformaciones de una obra literaria, art\u00edstica o cient\u00edfica. Para evitar la duda, si la obra consiste en una composici\u00f3n musical o grabaci\u00f3n de sonidos, la sincronizaci\u00f3n temporal de la obra con una imagen en movimiento (synching) ser\u00e1 considerada como una obra derivada a efectos de esta licencia. Tendr\u00e1n la consideraci\u00f3n de colecciones la recopilaci\u00f3n de obras ajenas, de datos o de otros elementos independientes como las antolog\u00edas y las bases de datos que por la selecci\u00f3n o disposici\u00f3n de sus contenidos constituyan creaciones intelectuales. La mera incorporaci\u00f3n de una obra en una colecci\u00f3n no dar\u00e1 lugar a una derivada a efectos de esta licencia. El licenciador es la persona o la entidad que ofrece la obra o prestaci\u00f3n bajo los t\u00e9rminos de esta licencia y le concede los derechos de explotaci\u00f3n de la misma conforme a lo dispuesto en ella. Usted es la persona o la entidad que ejercita los derechos concedidos mediante esta licencia y que no ha violado previamente los t\u00e9rminos de la misma con respecto a la obra o la prestaci\u00f3n, o que ha recibido el permiso expreso del licenciador de ejercitar los derechos concedidos mediante esta licencia a pesar de una violaci\u00f3n anterior. La transformaci\u00f3n de una obra comprende su traducci\u00f3n, adaptaci\u00f3n y cualquier otra modificaci\u00f3n en su forma de la que se derive una obra diferente. La creaci\u00f3n resultante de la transformaci\u00f3n de una obra tendr\u00e1 la consideraci\u00f3n de obra derivada. Se entiende por reproducci\u00f3n la fijaci\u00f3n directa o indirecta, provisional o permanente, por cualquier medio y en cualquier forma, de toda la obra o la prestaci\u00f3n o de parte de ella, que permita su comunicaci\u00f3n o la obtenci\u00f3n de copias. Se entiende por distribuci\u00f3n la puesta a disposici\u00f3n del p\u00fablico del original o de las copias de la obra o la prestaci\u00f3n, en un soporte tangible, mediante su venta, alquiler, pr\u00e9stamo o de cualquier otra forma. Se entiende por comunicaci\u00f3n p\u00fablica todo acto por el cual una pluralidad de personas, que no pertenezcan al \u00e1mbito dom\u00e9stico de quien la lleva a cabo, pueda tener acceso a la obra o la prestaci\u00f3n sin previa distribuci\u00f3n de ejemplares a cada una de ellas. Se considera comunicaci\u00f3n p\u00fablica la puesta a disposici\u00f3n del p\u00fablico de obras o prestaciones por procedimientos al\u00e1mbricos o inal\u00e1mbricos, de tal forma que cualquier persona pueda acceder a ellas desde el lugar y en el momento que elija. La explotaci\u00f3n de la obra o la prestaci\u00f3n comprende la reproducci\u00f3n, la distribuci\u00f3n, la comunicaci\u00f3n p\u00fablica y, en su caso, la transformaci\u00f3n. 2. L\u00edmites de los derechos. Nada en esta licencia pretende reducir o restringir cualesquiera l\u00edmites legales de los derechos exclusivos del titular de los derechos de propiedad intelectual de acuerdo con la Ley de propiedad intelectual o cualesquiera otras leyes aplicables, ya sean derivados de usos leg\u00edtimos, tales como la copia privada o la cita, u otras limitaciones como la resultante de la primera venta de ejemplares (agotamiento). 3. Concesi\u00f3n de licencia. Conforme a los t\u00e9rminos y a las condiciones de esta licencia, el licenciador concede, por el plazo de protecci\u00f3n de los derechos de propiedad intelectual y a t\u00edtulo gratuito, una licencia de \u00e1mbito mundial no exclusiva que incluye los derechos siguientes: Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n. Derecho a incorporar la obra o la prestaci\u00f3n en una o m\u00e1s colecciones. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n l\u00edcitamente incorporada en una colecci\u00f3n. Derecho de transformaci\u00f3n de la obra para crear una obra derivada siempre y cuando se incluya en \u00e9sta una indicaci\u00f3n de la transformaci\u00f3n o modificaci\u00f3n efectuada. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de obras derivadas creadas a partir de la obra licenciada. Derecho a extraer y reutilizar la obra o la prestaci\u00f3n de una base de datos. Para evitar cualquier duda, el titular originario: Conserva el derecho a percibir las remuneraciones o compensaciones previstas por actos de explotaci\u00f3n de la obra o prestaci\u00f3n, calificadas por la ley como irrenunciables e inalienables y sujetas a gesti\u00f3n colectiva obligatoria. Renuncia al derecho exclusivo a percibir, tanto individualmente como mediante una entidad de gesti\u00f3n colectiva de derechos, cualquier remuneraci\u00f3n derivada de actos de explotaci\u00f3n de la obra o prestaci\u00f3n que usted realice. Estos derechos se pueden ejercitar en todos los medios y formatos, tangibles o intangibles, conocidos en el momento de la concesi\u00f3n de esta licencia. Los derechos mencionados incluyen el derecho a efectuar las modificaciones que sean precisas t\u00e9cnicamente para el ejercicio de los derechos en otros medios y formatos. Todos los derechos no concedidos expresamente por el licenciador quedan reservados, incluyendo, a t\u00edtulo enunciativo pero no limitativo, los derechos morales irrenunciables reconocidos por la ley aplicable. En la medida en que el licenciador ostente derechos exclusivos previstos por la ley nacional vigente que implementa la directiva europea en materia de derecho sui generis sobre bases de datos, renuncia expresamente a dichos derechos exclusivos. 4. Restricciones. La concesi\u00f3n de derechos que supone esta licencia se encuentra sujeta y limitada a las restricciones siguientes: Usted puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n solamente bajo los t\u00e9rminos de esta licencia y debe incluir una copia de la misma, o su Identificador Uniforme de Recurso (URI). Usted no puede ofrecer o imponer ninguna condici\u00f3n sobre la obra o prestaci\u00f3n que altere o restrinja los t\u00e9rminos de esta licencia o el ejercicio de sus derechos por parte de los concesionarios de la misma. Usted no puede sublicenciar la obra o prestaci\u00f3n. Usted debe mantener intactos todos los avisos que se refieran a esta licencia y a la ausencia de garant\u00edas. Usted no puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n con medidas tecnol\u00f3gicas que controlen el acceso o el uso de una manera contraria a los t\u00e9rminos de esta licencia. Esta secci\u00f3n 4.a tambi\u00e9n afecta a la obra o prestaci\u00f3n incorporada en una colecci\u00f3n, pero ello no implica que \u00e9sta en su conjunto quede autom\u00e1ticamente o deba quedar sujeta a los t\u00e9rminos de la misma. En el caso que le sea requerido, previa comunicaci\u00f3n del licenciador, si usted incorpora la obra en una colecci\u00f3n y/o crea una obra derivada, deber\u00e1 quitar cualquier cr\u00e9dito requerido en el apartado 4.b, en la medida de lo posible. Si usted reproduce, distribuye o comunica p\u00fablicamente la obra o la prestaci\u00f3n, una colecci\u00f3n que la incorpore o cualquier obra derivada, debe mantener intactos todos los avisos sobre la propiedad intelectual e indicar, de manera razonable conforme al medio o a los medios que usted est\u00e9 utilizando: El nombre del autor original, o el seud\u00f3nimo si es el caso, as\u00ed como el del titular originario, si le es facilitado. El nombre de aquellas partes (por ejemplo: instituci\u00f3n, publicaci\u00f3n, revista) que el titular originario y/o el licenciador designen para ser reconocidos en el aviso legal, las condiciones de uso, o de cualquier otra manera razonable. El t\u00edtulo de la obra o la prestaci\u00f3n si le es facilitado. El URI, si existe, que el licenciador especifique para ser vinculado a la obra o la prestaci\u00f3n, a menos que tal URI no se refiera al aviso legal o a la informaci\u00f3n sobre la licencia de la obra o la prestaci\u00f3n. En el caso de una obra derivada, un aviso que identifique la transformaci\u00f3n de la obra en la obra derivada (p. ej., \"traducci\u00f3n castellana de la obra de Autor Original,\" o \"gui\u00f3n basado en obra original de Autor Original\"). Este reconocimiento debe hacerse de manera razonable. En el caso de una obra derivada o incorporaci\u00f3n en una colecci\u00f3n estos cr\u00e9ditos deber\u00e1n aparecer como m\u00ednimo en el mismo lugar donde se hallen los correspondientes a otros autores o titulares y de forma comparable a los mismos. Para evitar la duda, los cr\u00e9ditos requeridos en esta secci\u00f3n s\u00f3lo ser\u00e1n utilizados a efectos de atribuci\u00f3n de la obra o la prestaci\u00f3n en la manera especificada anteriormente. Sin un permiso previo por escrito, usted no puede afirmar ni dar a entender impl\u00edcitamente ni expl\u00edcitamente ninguna conexi\u00f3n, patrocinio o aprobaci\u00f3n por parte del titular originario, el licenciador y/o las partes reconocidas hacia usted o hacia el uso que hace de la obra o la prestaci\u00f3n. Para evitar cualquier duda, debe hacerse notar que las restricciones anteriores (p\u00e1rrafos 4.a y 4.b) no son de aplicaci\u00f3n a aquellas partes de la obra o la prestaci\u00f3n objeto de esta licencia que \u00fanicamente puedan ser protegidas mediante el derecho sui generis sobre bases de datos recogido por la ley nacional vigente implementando la directiva europea de bases de datos 5. Exoneraci\u00f3n de responsabilidad A MENOS QUE SE ACUERDE MUTUAMENTE ENTRE LAS PARTES, EL LICENCIADOR OFRECE LA OBRA O LA PRESTACI\u00d3N TAL CUAL (ON AN \"AS-IS\" BASIS) Y NO CONFIERE NINGUNA GARANT\u00cdA DE CUALQUIER TIPO RESPECTO DE LA OBRA O LA PRESTACI\u00d3N O DE LA PRESENCIA O AUSENCIA DE ERRORES QUE PUEDAN O NO SER DESCUBIERTOS. ALGUNAS JURISDICCIONES NO PERMITEN LA EXCLUSI\u00d3N DE TALES GARANT\u00cdAS, POR LO QUE TAL EXCLUSI\u00d3N PUEDE NO SER DE APLICACI\u00d3N A USTED. 6. Limitaci\u00f3n de responsabilidad. SALVO QUE LO DISPONGA EXPRESA E IMPERATIVAMENTE LA LEY APLICABLE, EN NING\u00daN CASO EL LICENCIADOR SER\u00c1 RESPONSABLE ANTE USTED POR CUALESQUIERA DA\u00d1OS RESULTANTES, GENERALES O ESPECIALES (INCLUIDO EL DA\u00d1O EMERGENTE Y EL LUCRO CESANTE), FORTUITOS O CAUSALES, DIRECTOS O INDIRECTOS, PRODUCIDOS EN CONEXI\u00d3N CON ESTA LICENCIA O EL USO DE LA OBRA O LA PRESTACI\u00d3N, INCLUSO SI EL LICENCIADOR HUBIERA SIDO INFORMADO DE LA POSIBILIDAD DE TALES DA\u00d1OS. 7. Finalizaci\u00f3n de la licencia Esta licencia y la concesi\u00f3n de los derechos que contiene terminar\u00e1n autom\u00e1ticamente en caso de cualquier incumplimiento de los t\u00e9rminos de la misma. Las personas o entidades que hayan recibido de usted obras derivadas o colecciones bajo esta licencia, sin embargo, no ver\u00e1n sus licencias finalizadas, siempre que tales personas o entidades se mantengan en el cumplimiento \u00edntegro de esta licencia. Las secciones 1, 2, 5, 6, 7 y 8 permanecer\u00e1n vigentes pese a cualquier finalizaci\u00f3n de esta licencia. Conforme a las condiciones y t\u00e9rminos anteriores, la concesi\u00f3n de derechos de esta licencia es vigente por todo el plazo de protecci\u00f3n de los derechos de propiedad intelectual seg\u00fan la ley aplicable. A pesar de lo anterior, el licenciador se reserva el derecho a divulgar o publicar la obra o la prestaci\u00f3n en condiciones distintas a las presentes, o de retirar la obra o la prestaci\u00f3n en cualquier momento. No obstante, ello no supondr\u00e1 dar por concluida esta licencia (o cualquier otra licencia que haya sido concedida, o sea necesario ser concedida, bajo los t\u00e9rminos de esta licencia), que continuar\u00e1 vigente y con efectos completos a no ser que haya finalizado conforme a lo establecido anteriormente, sin perjuicio del derecho moral de arrepentimiento en los t\u00e9rminos reconocidos por la ley de propiedad intelectual aplicable. 8. Miscel\u00e1nea Cada vez que usted realice cualquier tipo de explotaci\u00f3n de la obra o la prestaci\u00f3n, o de una colecci\u00f3n que la incorpore, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra o la prestaci\u00f3n en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Cada vez que usted realice cualquier tipo de explotaci\u00f3n de una obra derivada, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra objeto de esta licencia en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Si alguna disposici\u00f3n de esta licencia resulta inv\u00e1lida o inaplicable seg\u00fan la Ley vigente, ello no afectar\u00e1 la validez o aplicabilidad del resto de los t\u00e9rminos de esta licencia y, sin ninguna acci\u00f3n adicional por cualquiera las partes de este acuerdo, tal disposici\u00f3n se entender\u00e1 reformada en lo estrictamente necesario para hacer que tal disposici\u00f3n sea v\u00e1lida y ejecutiva. No se entender\u00e1 que existe renuncia respecto de alg\u00fan t\u00e9rmino o disposici\u00f3n de esta licencia, ni que se consiente violaci\u00f3n alguna de la misma, a menos que tal renuncia o consentimiento figure por escrito y lleve la firma de la parte que renuncie o consienta. Esta licencia constituye el acuerdo pleno entre las partes con respecto a la obra o la prestaci\u00f3n objeto de la licencia. No caben interpretaciones, acuerdos o condiciones con respecto a la obra o la prestaci\u00f3n que no se encuentren expresamente especificados en la presente licencia. El licenciador no estar\u00e1 obligado por ninguna disposici\u00f3n complementaria que pueda aparecer en cualquier comunicaci\u00f3n que le haga llegar usted. Esta licencia no se puede modificar sin el mutuo acuerdo por escrito entre el licenciador y usted. [1] Ejemplos y nomenclatura de XMLDSig Detached \u00a9 2009 Microsoft Corporation http://msdn.microsoft.com/en-us/library/ms759193%28VS.85%29.aspx [2] Ejemplos de XMLDSig Enveloping \u00a9 2009 Microsoft Corporation http://msdn.microsoft.com/en-us/library/ms753722(v=VS.85).aspx [3] Ejemplos de XMLDSig Enveloped \u00a9 2009 Microsoft Corporation http://msdn.microsoft.com/en-us/library/ms767623(v=VS.85).aspx","title":"CF manual firmas xml"},{"location":"markdown_strict/CF_manual-firmas-xml/#introduccion","text":"El Cliente de Firma es una herramienta de Firma Electr\u00f3nica que funciona en forma de Applet de Java integrado en una p\u00e1gina Web mediante JavaScript. El Cliente hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados ( keystore ) del navegador web ( Internet Explorer, Mozilla, Firefox ) o el sistema operativo as\u00ed como de los que est\u00e9n en dispositivos (tarjetas inteligentes , dispositivos USB ) configurados en el mismo (el caso de los DNI-e). El Cliente de Firma, como su nombre indica, es una aplicaci\u00f3n que se ejecuta en cliente (en el ordenador del usuario, no en el servidor Web). Esto es as\u00ed para evitar que la clave privada asociada a un certificado tenga que \u201csalir\u201d del contenedor del usuario (tarjeta, dispositivo USB o navegador) ubicado en su PC. De hecho, nunca llega a salir del navegador, el Cliente le env\u00eda los datos a firmar y \u00e9ste los devuelve firmados. El Cliente de Firma contiene las interfaces y componentes web necesarios para la realizaci\u00f3n de los siguientes procesos (adem\u00e1s de otros auxiliares como c\u00e1lculos de hash, lectura de ficheros, etc\u2026): Firma de formularios Web (siendo tarea del integrador el crear la l\u00f3gica JavaScript para ello). Firma de datos y ficheros. Multifirma masiva de datos y ficheros. Cofirma (CoSignature) Multifirma al mismo nivel. Contrafirma (CounterSignature) Multifirma en cascada. Como complemento al cliente de firma, se encuentra un cliente de cifrado que nos permite realizar las funciones de encriptaci\u00f3n y desencriptaci\u00f3n de datos atendiendo a diferentes algoritmos y configuraciones. Adem\u00e1s permite la generaci\u00f3n de sobres digitales.","title":"Introducci\u00f3n"},{"location":"markdown_strict/CF_manual-firmas-xml/#objetivos","text":"El objetivo del presente documento es reflejar las capacidades del Cliente @firma en cuanto a firmas electr\u00f3nicas basadas en formatos XML ( Extensible Markup Language ), las peculiaridades de este relativas a estos formatos, sus opciones de configuraci\u00f3n y su compatibilidad.","title":"Objetivos"},{"location":"markdown_strict/CF_manual-firmas-xml/#formatos-de-firma-soportados","text":"","title":"Formatos de firma soportados"},{"location":"markdown_strict/CF_manual-firmas-xml/#matriz-de-formatos-soportados-por-el-modulo","text":"Dentro de la normativa XAdES, la versi\u00f3n actual del m\u00f3dulo soporta \u00fanicamente las variante b\u00e1sica, conocida como XAdES BES y la acorde a pol\u00edtica de firma, EPES, no soport\u00e1ndose ninguna otra (X, XL, etc.): Adicionalmente, el m\u00f3dulo es capaz de hacer firmas XML seg\u00fan la normativa Open Document Format (ODF) acorde con la implementaci\u00f3n de OpenOffice.org 3.2 y superiores. Si bien las firmas OpenOffice.org 3.0 y 3.1 no son compatibles con las firmas LibreOffice / OpenOffice.org 3.2 y superiores (por defecto estas \u00faltimas en el Cliente @firma), es posible forzar la generaci\u00f3n de firmas en el formato OpenOffice.org 3.0/3.1. Consulte la documentaci\u00f3n JavaDoc de la clase es.gob.afirma.signers.odf.AOODFSigner para mayor informaci\u00f3n sobre los par\u00e1metros adicionales en este sentido. Debemos recordar que los documentos ODF est\u00e1n basados en XML, y sus firmas digitales son una variante de XMLDSig. La matriz de compatibilidad (siguiendo la misma leyenda que la matriz anterior), es la siguiente: En el caso de las \u201ccofirmas\u201d sobre documentos ODF, estas deben tratarse como la aplicaci\u00f3n de varias firmas al mismo documento a un mismo nivel jer\u00e1rquico, en lo que tambi\u00e9n puede llamarse \u201cmultifirma\u201d de un documento. Otra variante de firmas XML soportada por el Cliente es OOXML, formato de documentos ofim\u00e1ticos de Microsoft Office 2007, 2008 for Mac, 2010 (x86 y x64) y 2011 for Mac. La matriz de compatibilidad (siguiendo la misma leyenda que la matriz anterior), es la siguiente: En el caso de las \u201ccofirmas\u201d sobre documentos OOXML, estas deben tratarse como la aplicaci\u00f3n de varias firmas al mismo documento a un mismo nivel jer\u00e1rquico, en lo que tambi\u00e9n puede llamarse \u201cmultifirma\u201d de un documento.","title":"Matriz de formatos soportados por el m\u00f3dulo"},{"location":"markdown_strict/CF_manual-firmas-xml/#uso-de-los-parametros-de-funcionamiento","text":"Los formatos de firma XML (XAdES, XMLDSig, Factura-e, ODF y OOXML) est\u00e1 \u00fanicamente disponible en las construcciones Media y Completa del cliente de firma. Para realizar una firma en este formato s\u00f3lo es necesario su configuraci\u00f3n como formato de firma mediante el m\u00e9todo del Applet cliente: setSignatureFormat(String format) Puede llamarse a esta funci\u00f3n desde las p\u00e1ginas Web que integren el cliente por medio de la sentencia JavaScript: clienteFirma.setSignatureFormat(String format) Esto configurar\u00e1 el cliente de firma para realizar alguna de las firmas XML (consultar el apartado \u201c Par\u00e1metros de funcionamiento \u201d, para conocer las referencias concretas para cada uno de los formatos), siendo necesario tambi\u00e9n completar la configuraci\u00f3n del cliente que se considere necesaria (algoritmo de firma, modo, tratamiento de errores,\u2026), establecer los datos que se desean firmar y ordenar el proceso de firma. Esta y el resto de funciones del cliente est\u00e1n documentadas en el JavaDoc del Applet y el manual del integrador del cliente @firma. Rem\u00edtase a estos documentos para m\u00e1s informaci\u00f3n.","title":"Uso de los par\u00e1metros de funcionamiento"},{"location":"markdown_strict/CF_manual-firmas-xml/#parametros-de-funcionamiento","text":"Cadenas de identificaci\u00f3n de formato (varias alternativas insensibles a may\u00fasculas y min\u00fasculas por cada formato, por flexibilidad de uso): XAdES Detached Interna \"XAdES Detached\" / \"XAdES_Detached\" / \"XADES\" / \"XADES-BES\" XAdES Enveloped \"XAdES Enveloped\" / \"XAdES_Enveloped\" XAdES Enveloping \"XAdES Enveloping\" / \"XAdES_Enveloping\" XMLDSig Detached Interna \"XMLDSig Detached\" / \"XMLDSig_Detached\" XMLDSig Enveloped \"XMLDSig Enveloped\" / \"XMLDSign Enveloped\" / \"XMLDSig_Enveloped\" / \"XMLDSig_Enveloped\" XMLDSig Enveloping \"XMLDSig Enveloping\" / \"XMLDSign Enveloping\" / \"XMLDSig_Enveloping\" / \"XMLDSign_Enveloping\" Factura-e \"FacturaE\" / \"Factura-e\" / \"Factura Electronica\" / \"Factura Electr\u00f3nica\" / \"Factura\" ODF \"ODF\" / \"ODT\" / \"ODP\" / \"ODS\" / \"OpenOffice\" / \"OpenOffice.org\" OOXML \"OOXML\" / \"OOXML (Office Open XML)\" / \"DOCX\" / \"PPTX\" / \"XLSX\" Cadenas de identificaci\u00f3n del modo de firma (insensibles a may\u00fasculas y min\u00fasculas): Expl\u00edcita (no aplica a las contrafirmas) \"Explicit\" Impl\u00edcita \"Implicit\" Ficheros de entrada XMLDSig y XAdES, Enveloping y Detached, Impl\u00edcitas y Expl\u00edcitas Binarios (*.*) y XML (*.xml) XMLDSig y XAdES, Enveloped XML (*.xml) ODF ODF (*.odt, *.ods, *.odp) OOXML OOXML (*.docx, *.pptx, *.xlsx) Ficheros de salida XAdES Fichero de firma avanzada (*.xsig) XMLDSig Fichero de firma (*.xsig) ODF ODF (*.odt, *.ods, *.odp) OOXML OOXML(*.docx, *.pptx, *.xlsx) NOTAS IMPORTANTES: Los algoritmos de huella digital MD2 y MD5 no est\u00e1n soportados en ninguno de los formatos y variantes de firma aportados por este m\u00f3dulo, por motivos de obsolescencia. Esta es una limitaci\u00f3n impuesta por los est\u00e1ndares y normativas afectadas. En las operaciones de firma, las algoritmos de huella digital SHA-256, SHA-384 y SHA-512 no est\u00e1n soportados en ning\u00fan sistema basado en CAPI (Windows + Internet Explorer) con versiones de Java que sufran el error 6753664 ( http://bugs.sun.com/view_bug.do?bug_id=6753664 ) ni, aun sobre sistemas diferentes a CAPI, en los entornos de ejecuci\u00f3n de Java anteriores a la versi\u00f3n 1.6u18. El algoritmo de huella digital SHA-224 no est\u00e1 soportado , y no se soportar\u00e1 en un futuro. No se soportan firmas XML sin realizar huellas digitales , por no estar contemplada esta posibilidad en ninguna normativa ni est\u00e1ndar. No se soporta la firma en m\u00e1s de una fase en ning\u00fan formato o variante de firma realizado por este m\u00f3dulo . Ciertos entornos de ejecuci\u00f3n de Java (Java 1.6 anteriores a la versi\u00f3n 1.6.0_10) est\u00e1n afectados por un error ( http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6696582 ) que impide la realizaci\u00f3n de firmas de documentos ODF. Es necesario un Java 6 en versi\u00f3n superior a la 1.6.0_10 para realizar firmas ODF . Este error no se da en Java 5, por lo que sus usuarios no necesitan actualizar (aunque siempre se recomienda la actualizaci\u00f3n a Java 1.6.0_25).","title":"Par\u00e1metros de funcionamiento"},{"location":"markdown_strict/CF_manual-firmas-xml/#xml-digital-signature-xmldsig","text":"","title":"XML Digital Signature (XMLDSig)"},{"location":"markdown_strict/CF_manual-firmas-xml/#xmldsig-detached","text":"La firma XML en modo \u201cDetached\u201d permite tener una firma de forma separada e independiente del contenido firmado, pudiendo relacionar firma con contenido firmado mediante una referencia de tipo URI. Este tipo de firmas es \u00fatil cuando no se puede modificar el contenido original pero se desea constatar su autenticidad, procedencia, etc. Un uso com\u00fan de este formato es en la descarga de ficheros, pudiendo poner a disposici\u00f3n del internauta, junto al contenido a descargar, un peque\u00f1o fichero de firma para verificar la integridad del primero. Un ejemplo de este tipo de firmas ser\u00eda la siguiente estructura (resumida) XML: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/> <ds:Reference URI=\"http://www.minhap.es/contenido\"> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/> <ds:DigestValue/> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue/> </ds:Signature> En este ejemplo, los datos firmados se encuentran en un servidor Web accesible p\u00fablicamente: http://www.minhap.es/contenido, y se referencia como tal, conformando lo que se denomina \u201cExternally Detached\u201d o \u201cDetached Externa\u201d. Las firmas Externally Detached NO est\u00e1n soportadas actualmente por el Cliente @firma . Cuando se desea firmar un contenido con un formato \u201cDetached\u201d, pero se quiere eliminar la dependencia de la disponibilidad externa del contenido firmado, es posible crear una estructura XML que contenga los propios contenidos y la firma, pero cada uno en una subestructura independiente, manteniendo as\u00ed el concepto de \u201cDetached\u201d (firma y contenido firmado no se interrelacionan directamente). Para adecuarse al est\u00e1ndar los nodos de firma y contenido debe encontrarse en el mismo nivel dentro del XML. Un ejemplo de estructura XML ser\u00eda: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <internally-detached> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/> <ds:Reference URI=\"#data\"> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/> <ds:DigestValue/> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue/> </ds:Signature> <document Id=\"data\"> <title>title</title> <author>writer</author> <date>today</date> <content> <para>First paragraph</para> <para>Second paragraph</para> </content> </document> </internally-detached> En este caso, la estructura \u201cinternally-detached\u201d contiene dos subestructuras, la firma (\u201cSignature\u201d) y el propio contenido firmado (\u201cdocument\u201d). La forma de relacionar ambos es, como ocurr\u00eda en el primer ejemplo, con una URI, solo que en este caso es interna al documento XML, referenciando el identificador de la subestructura del contenido firmado (\u201cdata\u201d). A esta variante de firma \u201cDetached\u201d se la conoce como \u201cInternally Detached\u201d, o \u201cDetached Interna\u201d.[1] Para unificar las superestructuras creadas dentro de un formato \u201cDetached Interno\u201d, el Cliente @firma construye siempre el siguiente esqueleto XML: <CONTENT Id=\u201did\u201d Encoding=\u201dcodificacion\u201d MimeType=\u201dMimeType\u201d Algorithm=\u201d\u2026\u201d> <! \u2013 CONTENIDO FIRMADO --> </CONTENT> Es decir, el contenido a firmar, ya sea XML o no-XML, se encapsula dentro de una etiqueta XML llamada CONTENT, en la que se indica la codificaci\u00f3n del contenido (UTF-8, Base64, etc.), el tipo de contenido (imagen JPEG, texto, XML, etc.) y el algoritmo utilizado para calcular la huella digital de este (por ejemplo, SHA-1). Como la superestructura es XML, si el contenido tambi\u00e9n es XML la inserci\u00f3n es directa (como en el primer ejemplo de \u201cDetached Interna\u201d, pero si no es XML se codifica en Base64 antes de insertarse, resultando una estructura con una forma similar a la siguiente: <CONTENT Id=\u201did\u201d Encoding=\u201dBase64\u201d MimeType=\u201dapplication/octect-stream\u201d Algorithm=\u201d\u2026\u201d> SFGJKASGFJKASEGUYFGEYGEYRGADFJKASGDFSUYFGAUYEGWEYJGDFYKGYKGWJKEGYFWYJ </CONTENT> La larga cadena de caracteres ser\u00eda una codificaci\u00f3n Base64 del original interpretado en su forma binaria pura. Como la variante \u201cDetached Interna\u201d almacena dentro de la superestructura XML el contenido firmado, la firma de un contenido de gran tama\u00f1o generar\u00eda igualmente un fichero de firma de gran tama\u00f1o, aspecto claramente no deseable (especialmente en un formato \u201cDetached\u201d), por lo que este m\u00f3dulo introduce una sub-variante llamada \u201cDetached Interna Expl\u00edcita\u201d (quedando la anteriormente descrita como \u201cDetached Interna Impl\u00edcita\u201d. En esta sub-variante, se sustituyen los datos firmados (ya sean binarios o XML) dentro de la superestructura XML que los conten\u00eda tanto a ellos como a la firma por su huella digital calculada mediante el algoritmo SHA-1, y codificada en Base64. Es importante rese\u00f1ar aqu\u00ed que la sub-variante Detached Interna Expl\u00edcita no est\u00e1 respaldada directamente por el est\u00e1ndar XML Digital Signature (aunque su estructura interna cumple con el formato). Adicionalmente, esta variante expl\u00edcita no es de aplicaci\u00f3n para las contrafirmas. Debido a que las firmas Detached Internas, tanto expl\u00edcita como impl\u00edcita, comparten la misma estructura y no es posible distinguirlas, el cliente marcar\u00e1 las firmas expl\u00edcitas con el MimeType no est\u00e1ndar \u201chash/sha1\u201d, independientemente de que se especifique el MimeType de los datos . En caso de generar la firma expl\u00edcita indicando directamente al Cliente @firma el hash que debe firmar en lugar de los datos, este debe proporcionarse siempre calculado con el algoritmo SHA1. La importancia de recalcar este punto reside en que un \u201cvalidador\u201d de firmas XMLDSig est\u00e1ndar dar\u00e1 siempre por buena la firma Detached Expl\u00edcita, pero no la validar\u00e1 contra el contenido original, por lo que debemos asegurarnos o que se soporta \u00e9sta sub-variante o que la validaci\u00f3n se realiza contra la huella digital del contenido firmado y luego se compara esta huella digital con una obtenida directamente de este \u00faltimo.","title":"XMLDSig Detached"},{"location":"markdown_strict/CF_manual-firmas-xml/#xmldsig-enveloping","text":"Otra variante de firma es la \u201cEnveloping\u201d, en la que la estructura XML de firma es la \u00fanica en el documento de firma, y esta contiene internamente el contenido firmado (en un nodo propio). Un posible ejemplo de este tipo de firma podr\u00eda ser: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/> <ds:Reference URI=\"#obj\"> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/> <ds:DigestValue/> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue/> <ds:Object Id=\"obj\">SFGJKASGFJKASEGUYFGEYGEYRGADFJKASGDFSUYFG=</ds:Object> </ds:Signature> En este caso, los datos firmados se encuentran en el nodo \u201cObject\u201d referenciados internamente al XML mediante el identificador \u201cobj\u201d.[2] Al igual que ocurr\u00eda con el formato \u201cDetached\u201d, si los datos no son XML, no es posible insertarlos directamente dentro de una estructura XML, por lo que se codifican previamente en Base64. Al contener el resultado de la firma los datos firmados empotrados internamente, esta formato sufre el mismo problema que la variante \u201cDetached Interna\u201d (Impl\u00edcita), por lo que tambi\u00e9n se ha optado por incluir una sub-variante denominada \u201cEnveloping Expl\u00edcita\u201d (definiendo la \u201cEnveloping\u201d como \u201cEnveloping Impl\u00edcita\u201d), en la que de nuevo se sustituyen los datos originalmente firmados por su huella digital calculada mediante el algoritmo SHA-1. Es importante rese\u00f1ar aqu\u00ed que la sub-variante Enveloping Expl\u00edcita no est\u00e1 respaldada directamente por el est\u00e1ndar XML Digital Signature (aunque su estructura interna cumple con el formato). Adicionalmente, esta variante expl\u00edcita no es de aplicaci\u00f3n para las contrafirmas. La importancia de recalcar este punto reside en que un \u201cvalidador\u201d de firmas XMLDSig est\u00e1ndar dar\u00e1 siempre por buena la firma Enveloping Expl\u00edcita, pero no la validar\u00e1 contra el contenido original, por lo que debemos asegurarnos o que se soporta esta sub-variante o que la validaci\u00f3n se realiza contra la huella digital del contenido firmado y luego se compara esta huella digital con una obtenida directamente de este \u00faltimo. Debido a que las firmas Enveloping expl\u00edcita e impl\u00edcita comparten la misma estructura y no es posible distinguirlas, el cliente marcar\u00e1 las firmas expl\u00edcitas con el MimeType no est\u00e1ndar \u201chash/sha1\u201d, independientemente de que se especifique el MimeType de los datos . En caso de generar la firma expl\u00edcita indicando directamente al Cliente @firma el hash que debe firmar en lugar de los datos, se firmar\u00e1 este hash y se establecer\u00e1 como MimeType el valor \u201chash/ sha1 \u201d.","title":"XMLDSig Enveloping"},{"location":"markdown_strict/CF_manual-firmas-xml/#xmldsig-enveloped","text":"Este formato de firma XMLDSig est\u00e1 pensado para que un contenido XML pueda auto-contener su propia firma digital, insert\u00e1ndola en un nodo propio interno, por lo que, al contrario que en los formatos anteriores, no es posible firmar contenido que no sea XML. Un ejemplo simple del resultado de una firma \u201cEnveloped\u201d podr\u00eda ser el siguiente: <!DOCTYPE Envelope [ <!ENTITY ds \"http://www.w3.org/2000/09/xmldsig#\"> <!ENTITY c14n \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"> <!ENTITY enveloped \"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"> <!ENTITY xslt \"http://www.w3.org/TR/1999/REC-xslt-19991116\"> <!ENTITY digest \"http://www.w3.org/2000/09/xmldsig#sha1\"> ]> <Letter> <Return-address>address</Return-address> <To>You</To> <Message>msg body</Message> <From> <ds:Signature xmlns:ds=\"&ds;\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/> <ds:Reference URI=\"\"> <ds:Transforms> <ds:Transform Algorithm=\"&enveloped;\"> </ds:Transform> </ds:Transforms> <ds:DigestMethod Algorithm=\"&digest;\"/> <ds:DigestValue></ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue/> </ds:Signature> </From> <Attach>attachement</Attach> </Letter> En este caso, el documento original (\u201cLetter\u201d), contiene internamente la estructura de firma digital (\u201cSignature\u201d).[3] Una peculiaridad de la estructura generada es que esta referenciada mediante una URI vac\u00eda (\u201cURI=\u201d\u201d), lo cual indica que la firma aplica a la totalidad del documento original. Aunque en este caso el m\u00f3dulo no ha definido sub-variantes, para mantener una coherencia en la nomenclatura, ha denominado a este formato \u201cEnveloped Impl\u00edcita\u201d.","title":"XMLDSig Enveloped"},{"location":"markdown_strict/CF_manual-firmas-xml/#co-firmas-en-xmldsig","text":"Cuando un mismo documento es firmado (en una misma jerarqu\u00eda de firma) por varios firmantes, de produce una operaci\u00f3n de co-firma. A nivel interno, una co-firma no es m\u00e1s que una sucesi\u00f3n de objetos o estructuras XML de tipo \u201cSignature\u201d (como los que figuran en los ejemplos anteriores) que se refieren a los mismos datos. Las co-firmas XMLDSig pueden aplicarse a todos los formatos y variantes del est\u00e1ndar. El m\u00f3dulo de firmas XML del Cliente @firma permite co-firmas en todas las variantes y sub-variantes soportadas de XMLDSig.","title":"Co-Firmas en XMLDSig"},{"location":"markdown_strict/CF_manual-firmas-xml/#cofirmas-enveloping","text":"Una firma XML enveloping exige que los datos firmados est\u00e9n contenidos en un nodo XML dentro de la propia firma. Cuando se solicita una cofirma XML enveloping al Cliente @firma, se generar\u00e1 un nodo ra\u00edz <AFIRMA> que contendr\u00e1 todas las firmas generadas. Cada una de las firmas contendr\u00e1 su propio nodo de datos, por lo que este tipo de firmas puede crecer r\u00e1pidamente en tama\u00f1o. Se recomienda utilizar las firmas Internally Detached cuando se quieran realizar m\u00faltiples firmas sobre los mismos datos y que estos contenidos en la firma. Este comportamiento aplica tanto a XMLDSig como a su variante XAdES.","title":"Cofirmas Enveloping"},{"location":"markdown_strict/CF_manual-firmas-xml/#cofirmas-cruzadas-entre-xmldsig-y-xades","text":"Las cofirmas de un documento dan como resultado dos firmas sobre este mismo documento que se encuentran a un mismo nivel, es decir, que ninguna envuelve a la otra ni una prevalece sobre la otra. A nivel de formato interno, esto quiere decir que cuando cofirmamos un documento ya firmado previamente, esta firma previa no se modifica. Si tenemos en cuenta que XAdES es en realidad un subconjunto de XMLDSig, el resultado de una cofirma XAdES sobre un documento firmado previamente con XMLDSig (o viceversa), son dos firmas independientes, una en XAdES y otra en XMLDSig. Dado que todas las firmas XAdES son XMLDSig pero no todas las firmas XMLDSig son XAdES, el resultado global de la firma se adec\u00faa al est\u00e1ndar m\u00e1s amplio, XMLDSig en este caso.","title":"Cofirmas cruzadas entre XMLDSig y XAdES"},{"location":"markdown_strict/CF_manual-firmas-xml/#contrafirmas-en-xmldsig","text":"Una contrafirma es un tipo de multi-firma (varios firmantes en un \u00fanico documento), en el que las firmas de los firmantes no est\u00e1n a un mismo nivel, sino que siguen una jerarqu\u00eda de firmas, donde un firmante asume la firma de otro firmante previo, form\u00e1ndose en el proceso un \u00e1rbol de firmas (o firmantes). Un ejemplo de uso de este tipo de multi-firmas podr\u00edamos encontrarlo en una revisi\u00f3n en cadena de un documento: El autor del documento firma el original. El documento pasa al gerente de ventas, el cual firma sobre la firma del autor El documento pasa al director de ventas, el cual asume el buen trabajo de su gerente y firma sobre su firma. El documento pasa, tambi\u00e9n desde el propio autor, al gerente de calidad, el cual firma sobre la firma del autor. El documento pasa al director de calidad, el cual asume el buen trabajo de su gerente y firma sobre su firma. El documento pasa al director general, el cual firma las firmas de sus directores, asumiendo igualmente su trabajo. Adicionalmente, es posible combinar co-firmas con contrafirmas, pudiendo tener as\u00ed \u00e1rboles de firma complejos, incluso con varios nodos ra\u00edz. La especificaci\u00f3n del est\u00e1ndar XMLDSig no define la forma de contrafirmar un documento, aunque deja abierta la posibilidad de realizar contrafirmas. No obstante, la especificaci\u00f3n XAdES [ETSI TS 101 903 V1.3.2 (2006-03)] especifica un formato de contrafirma retro-compatible con el formato XMLDSig mediante referencias de tipo \u201cCountersignedSignature\u201d ( http://uri.etsi.org/01903#CountersignedSignature ). El m\u00f3dulo de firmas XML del cliente @firma implementa las contrafirmas seg\u00fan este m\u00e9todo, pero es importante resaltar que, dado que la normativa XMLDSig no adopta este formato de contrafirmas directamente (sino que se define en la normativa XAdES), las contrafirmas XMLDSig creadas mediante el cliente @firma pueden no reconocerse en algunas plataformas de validaci\u00f3n de firmas .","title":"Contrafirmas en XMLDSig"},{"location":"markdown_strict/CF_manual-firmas-xml/#xml-advanced-digital-signature-xades","text":"Las firmas XAdES son una evoluci\u00f3n de las firmas XMLDSig a la que a\u00f1aden ciertas extensiones y en la que se concretan con m\u00e1s definici\u00f3n algunas operaciones, como las contrafirmas. El formato XAdES admite m\u00faltiples variantes, con distintas aplicaciones (desde sellos de tiempo hasta archivo longevo). La actual versi\u00f3n del m\u00f3dulo de firmas XML del cliente @firma soporta \u00fanicamente la versiones b\u00e1sica (BES), de aplicaci\u00f3n general no especializada y la acorde a pol\u00edtica de firma (EPES). La tabla anterior muestra las variantes de XAdES existentes, estando marcadas \u00fanicamente las b\u00e1sica (BES) y acorde a pol\u00edtica de firma (EPES) en verde, como indicativo de soporte por el m\u00f3dulo. Dado que XAdES es una extensi\u00f3n retro-compatible con XMLDSig, los formatos soportados son los mismos que en este segundo, aunque encontrando las siguientes diferencias y aspectos a recalcar: Las contrafirmas se realizan mediante un atributo especialmente especificado por XAdES (\u201cCounterSignature\u201d), por lo que, al contrario que en XMLDSig, s\u00ed est\u00e1n plenamente respaldadas por el est\u00e1ndar. Al igual que ocurr\u00eda con XMLDSig, todas las sub-variantes expl\u00edcitas no est\u00e1n directamente respaldadas por el est\u00e1ndar . Adicionalmente, es importante comentar que los atributos espec\u00edficos XAdES implementados por el m\u00f3dulo de firmas XML son (adem\u00e1s de los relativos a las pol\u00edticas de firma): SigningTime SigningCerticate IssuerSerial SignedDataObjectProperties","title":"XML Advanced Digital Signature (XAdES)"},{"location":"markdown_strict/CF_manual-firmas-xml/#factura-electronica","text":"La firma en formato de factura electr\u00f3nica es en realidad una firma XAdES Enveloped particular. La firma de facturas se realizan de acuerdo a la versi\u00f3n 3.1 del esquema de factura electr\u00f3nica. Detalles a tener en cuenta del formato de firma de factura son: Los datos de entrada deben ser una factura electr\u00f3nica conforme a las normas FacturaE. No contempla las operaciones de cofirma ni contrafirma. Las firmas son siempre impl\u00edcitas, por lo que no se atender\u00e1 a la configuraci\u00f3n de modo del cliente. No es necesario configurar la pol\u00edtica de firma de factura electr\u00f3nica. La pol\u00edtica se establece autom\u00e1ticamente cuando se utiliza este formato. Los par\u00e1metros configurables de la firma son: signatureProductionCity: Ciudad desde la que se realiza la firma. signatureProductionProvince: Provincia desde la que se realiza la firma. signatureProductionPostalCode: C\u00f3digo postal desde el que se realiza la firma. signatureProductionCountry: Pa\u00eds desde el que se realiza la firma. Puedes configurarse estos par\u00e1metros mediante el m\u00e9todo: addExtraParam(String param, String value); Puede llamarse a esta funci\u00f3n desde las p\u00e1ginas Web que integren el cliente por medio de la sentencia JavaScript: clienteFirma.addExtraParam(String param, String value)","title":"Factura Electr\u00f3nica"},{"location":"markdown_strict/CF_manual-firmas-xml/#open-document-format-odf","text":"ODF, la normativa de documentos ofim\u00e1ticos implementada por OpenOffice.org, implementa para sus firmas digitales una variante espec\u00edfica de XMLDSig. El m\u00f3dulo es capaz de realizar las firmas seg\u00fan esta variante, resultando en documentos firmados reconocidos por los productos OpenOffice.org 3.2 y 3.3. Por problemas de evoluci\u00f3n del propio formato ODF, las firmas generadas en la configuraci\u00f3n por defecto del Cliente no son v\u00e1lidas en el formato ODF generado por OpenOffice.org 3.0 / 3.1. No se soportan firmas electr\u00f3nicas en formato OpenOffice.org 2.x, por considerarse obsoleto. La compatibilidad en cuanto a tipo de documento es la siguiente: Se soportan documentos Impress, Calc y Writer. Detalles a tener en cuenta del formato de firma ODF son: No contempla la operaci\u00f3n de contrafirma Las firmas son siempre impl\u00edcitas, por lo que no se atender\u00e1 a la configuraci\u00f3n de modo del cliente. El \u00fanico algoritmo de firma soportado por el formato es SHA1withRSA, por lo que no se atender\u00e1 a la configuraci\u00f3n del cliente. NOTAS IMPORTANTES: El formato ODF ha introducido en los \u00faltimos a\u00f1os numerosas variantes incompatibles entre s\u00ed. Las firmas generadas con OpenOffice.org 3.3 y 3.2 y LibreOffice no son reconocidas por versiones anteriores, y las firmas generadas por OpenOffice.org 3.0 y 3.1 no son reconocidas por versiones anteriores y son reconocidas como incompletas por versiones posteriores. Por estas inconsistencias en la evoluci\u00f3n del formato (completamente ajenas al Cliente @firma), no puede garantizarse un correcto funcionamiento en versiones futuras de OpenOffice.org o LibreOffice. Existe la posibilidad de generar con el Cliente firmas compatibles con OpenOffice.org 3.0 y 3.1 (que ser\u00e1n reconocidas como incompletas por OpenOffice.org 3.2 y 3.3) mediante el siguiente par\u00e1metro adicional que debe ser proporcionado al m\u00f3dulo de firma (consulte el Manual del Integrador para m\u00e1s informaci\u00f3n sobre paso de par\u00e1metros adicionales a los m\u00f3dulos de firma): \u201cuseOpenOffice31Mode\u201d con el valor \u201ctrue\u201d","title":"Open Document Format (ODF)"},{"location":"markdown_strict/CF_manual-firmas-xml/#office-open-xml-ooxml","text":"OOXML, la normativa de documentos ofim\u00e1ticos implementada por Microsoft Office, implementa para sus firmas digitales una variante espec\u00edfica de XMLDSig. El m\u00f3dulo es capaz de realizar las firmas seg\u00fan esta variante, resultando en documentos firmados reconocidos por los productos Office 2007, 2008 for Mac, 2010 y 2011 for Mac, no previ\u00e9ndose que existan problemas de compatibilidad en futuras versiones. La compatibilidad en cuanto a tipo de documento es la siguiente: Se soportan documentos Word, Excel y PowerPoint. Detalles a tener en cuenta del formato de firma OOXML son: No contempla la operaci\u00f3n de contrafirma. Las firmas son siempre impl\u00edcitas, por lo que no se atender\u00e1 a la configuraci\u00f3n de modo del cliente. ADVERTENCIA: La herramienta de validaci\u00f3n VALIDe, en su versi\u00f3n actual, no soporta la validaci\u00f3n de firmas OOXML. Es posible comprobar la validez de estas firmas abriendo el documento con Microsoft Office 2007 o superior.","title":"Office Open XML (OOXML)"},{"location":"markdown_strict/CF_manual-firmas-xml/#informacion-sobre-el-modulo","text":"","title":"Informaci\u00f3n sobre el m\u00f3dulo"},{"location":"markdown_strict/CF_manual-firmas-xml/#compatibilidad","text":"El m\u00f3dulo de firmas XML del cliente @firma es compatible con la versi\u00f3n 3 y superiores del cliente, en todas las plataformas, sistemas operativos, arquitecturas y versiones de entorno de ejecuci\u00f3n de Java soportadas por este. Las firmas ODF que genera el m\u00f3dulo en la configuraci\u00f3n por defecto del Cliente son interpretadas correctamente solo por OpenOffice.org 3.2 y superiores, consulte el apartado Open Document Format (ODF) para m\u00e1s informaci\u00f3n.","title":"Compatibilidad"},{"location":"markdown_strict/CF_manual-firmas-xml/#situacion-del-nodo-de-firma-en-xades-enveloped","text":"Por defecto, el Cliente @firma sit\u00faa la firma electr\u00f3nica en su nodo \u201cSignature\u201d directamente como hijo de la ra\u00edz del XML. No obstante, hay situaciones en las que puede interesar situar este nodo de firma en una situaci\u00f3n arbitraria del XML. Para ello, puede usarse el par\u00e1metro adicional \u201c insertEnvelopedSignatureOnNodeByXPath \u201d, en el que, mediante una expresi\u00f3n XPath v1, podemos indicar el nodo en el que queremos se inserte la firma (el nodo \u201cSignature\u201d pasar\u00e1 a ser el primer hijo de este). Si la expresi\u00f3n XPath resolviese varios nodos, se usar\u00e1 el primero de ellos. Por ejemplo, en el siguiente XML: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <bookstore> <book category= \"COOKING\" > <title lang= \"en\" >Everyday Italian</title> <author>Giada De Laurentiis</author> <year>2005</year> <price>30.00</price> </book> <book category= \"CHILDREN\" > <title lang= \"en\" >Harry Potter</title> <author>J K. Rowling</author> <year>2005</year> <price>29.99</price> </book> </bookstore> Si indicamos el par\u00e1metro con este valor: insertEnvelopedSignatureOnNodeByXPath = /bookstore/book[1]/title La firma se insertara como nodo hijo del t\u00edtulo del primer libro: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <bookstore> <book category= \"COOKING\" > <title lang= \"en\" > Everyday Italian <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"S1\"> \u2026 </ds:Signature> </title> <author>Giada De Laurentiis</author> <year>2005</year> <price>30.00</price> </book> <book category= \"CHILDREN\" > <title lang= \"en\" >Harry Potter</title> <author>J K. Rowling</author> <year>2005</year> <price>29.99</price> </book> </bookstore>","title":"Situaci\u00f3n del nodo de firma en XAdES Enveloped"},{"location":"markdown_strict/CF_manual-firmas-xml/#metadatos-adicionales-en-las-firmas-xades","text":"las firmas XAdES pueden contener opcionalmente una serie de metadatos acerca de la firma, el firmante y el propio proceso de firma. En @firma, es posible establecer estos metadatos mediante el uso de \u201cpar\u00e1metros adicionales\u201d. Los \u201cpar\u00e1metros adicionales\u201d admitidos en este sentido son: signerClaimedRoles Cargos atribuidos para el firmante. Deben separarse los cargos con el car\u00e1cter \u201c|\u201d (y este no puede estar en el propio texto de ning\u00fan cargo). signatureProductionCity Ciudad en la que se realiza la firma. signatureProductionProvince Provincia en la que se realiza la firma. signatureProductionPostalCode C\u00f3digo postal en el que se realiza la firma signatureProductionCountry Pa\u00eds en el que se realiza la firma commitmentTypeIndications N\u00famero de \u201ccommitment type indications\u201d que se van a especificar. Estas son, las finalidades especificadas para la firma que se va a generar. commitmentTypeIndication n Indentifier Identificador de la finalidad n\u00famero n (que va desde 0 hasta el valor menos 1 indicado en la propiedad anterior) que se le asigna a la firma. Los valores posibles que puede tomar y el significado de cada uno son: 1: La firma constituye \u201cPrueba de origen\u201d. 2: La firma constituye \u201cPrueba de recepci\u00f3n\u201d. 3: La firma constituye \u201cPrueba de entrega\u201d. 4: La firma constituye \u201cPrueba de env\u00edo\u201d. 5: La firma constituye \u201cPrueba de aprobaci\u00f3n\u201d. 6: La firma constituye \u201cPrueba de creaci\u00f3n\u201d. commitmentTypeIndication n Description Descripci\u00f3n libre de la finalidad n\u00famero n . Este atributo es opcional. Las nombres de las propiedades deben escribirse tal y como figuran, respetando may\u00fasculas y min\u00fasculas. Para m\u00e1s informaci\u00f3n sobre el establecimiento de \u201cpar\u00e1metros adicionales\u201d en @firma consulte con el Manual del Integrador. Para el establecimiento program\u00e1tico desde Java de par\u00e1metros adicionales consulte con el JavaDoc.","title":"Metadatos adicionales en las firmas XAdES"},{"location":"markdown_strict/CF_manual-firmas-xml/#cadena-de-certificacion-en-firmas-xmldsig-y-xades","text":"Desde la versi\u00f3n 3.3 del Cliente @firma en las firmas XAdES se incluye, por defecto, la cadena de certificaci\u00f3n completa del certificado firmante. Este comportamiento, aunque es el recomendado por el est\u00e1ndar, genera firmas XAdES no compatibles con versi\u00f3n anteriores a la 5.5 de la Plataforma @firma. En la versi\u00f3n 3.3.1 del Cliente @firma se agrega el par\u00e1metro \u201cincludeOnlySignningCertificate\u201d con el que es posible configurar este comportamiento. Para obligar al Cliente @firma a que s\u00f3lo incluya el certificado del firmante en las firmas, cofirmas y contrafirmas generadas es necesario configurar este par\u00e1metro con el valor \u201ctrue\u201d. Para configurar este comportamiento estableceremos el valor del par\u00e1metro mediante el m\u00e9todo addExtraParam(String, String). addExtraParam(\u201cincludeOnlySignningCertificate\u201d, \u201ctrue\u201d); Este par\u00e1metro afecta tanto a las firmas XMLdSig como XAdES.","title":"Cadena de certificaci\u00f3n en firmas XMLdSig y XAdES"},{"location":"markdown_strict/CF_manual-firmas-xml/#firmas-de-contenido-binario-en-xmldsig-y-xades","text":"Cuando se indica al Cliente que se desea firmar datos binarios y estos se facilitan efectivamente en formato binario, el cliente los transforma a Base64 antes de firmarlos, de forma que estos puedan ser insertados en el XML. La normativa ( http://www.w3.org/TR/xmldsig-core/#sec-Object ) indica que siempre que sobre los datos originales se realice una transformaci\u00f3n de este tipo, esta debe declararse en la referencia de la firma XML mediante el algoritmo http://www.w3.org/2000/09/xmldsig#base64 . Declarando esta transformaci\u00f3n, la huella digital firmada corresponder\u00e1 con el original binario, y no con su versi\u00f3n codificada en Base64. No obstante, el cliente incorpora ciertas peculiaridades en la aplicaci\u00f3n de esta norma: \u00danicamente se declaran trasformaciones Base64 en las firmas XAdES y XMLDSig. OOXML y ODF no necesitan estas transformaciones nunca. \u00danicamente se declaran transformaciones Base64 de forma autom\u00e1tica si es el cliente el que realiza la transformaci\u00f3n de binario a Base64. Si los datos se proporcionan ya en Base64 (la transformaci\u00f3n se ha realizado externamente), es el integrador quien debe asegurarse de que, si desea que se declare esta transformaci\u00f3n, se a\u00f1ade de forma manual.","title":"Firmas de contenido binario en XMLDSig y XAdES"},{"location":"markdown_strict/CF_manual-firmas-xml/#deshabilitacion-de-las-transformaciones-base64","text":"Por si se produjesen problemas de compatibilidad con otros sistemas no compatibles con la normativa XMLDSig / XAdES en cuanto a transformaciones Base64, el cliente establece un mecanismo de desactivaci\u00f3n de esta caracter\u00edstica mediante el siguiente m\u00e9todo del Applet (que es posible invocar v\u00eda JavaScript): ClienteFirma.addExtraParam(String paramName, String paramValue), y el uso concrerto: clienteFirma.addExtraParam(\u201cavoidBase64Transforms\u201d, \u201c true \u201d); Una vez deshabilitada la declaraci\u00f3n de las transformaciones Base64, estas se dejar\u00e1n de a\u00f1adir hasta que se reinicie el Applet o se vuelvan a habilitar mediante la llamada complementaria: clienteFirma.addExtraParam(\u201cavoidBase64Transforms\u201d, \u201c false \u201d); Puede encontrar m\u00e1s informaci\u00f3n sobre el m\u00e9todo addExtraParam en la documentaci\u00f3n JavaDoc.","title":"Deshabilitaci\u00f3n de las transformaciones Base64"},{"location":"markdown_strict/CF_manual-firmas-xml/#firma-de-hojas-de-estilo-en-xmldsig-y-xades","text":"La normativa XMLDSig (punto 8.1.3) indica que si un XML declara una hoja de estilo, esta debe ser firmada junto al XML para que la firma asocie a este \u00faltimo con su visualizaci\u00f3n, respetando el concepto \u201clo que se ve es lo que se firma\u201d. Dado que las hojas de estilo pueden declararse de distintas formas, el cliente adopta distintas estrategias para cada forma de declaraci\u00f3n y seg\u00fan la variante de firma. Las formas de declarar una hoja de estilo y la forma de firmar el XML en ese caso por el Cliente son las siguientes: La hoja de estilo est\u00e1 empotrada dentro del XML, y se declara con una referencia local (el valor del atributo href de la declaraci\u00f3n del XSL es un nombre de identificador de nodo XML precedido por \u201c#\u201d). En este caso no es necesaria ninguna estrategia adicional, pues al ser parte la hoja de estilo del XML, siempre que se firma uno, se firma tambi\u00e9n el otro. Esto aplica a la totalidad de las firmas XML. La hoja de estilo est\u00e1 accesible remotamente por protocolo HTTP o HTTPS (el valor del atributo href es una URL v\u00e1lida con esquema http o https). En este caso se a\u00f1ade una referencia a la firma que apunta a la hoja de estilo mediante la misma URL (una referencia Externally Detached). Esto aplica a la totalidad de las firmas XML). Se referencia a la hoja de estilo mediante una referencia relativa local. En este caso, dado que las referencias relativas locales se pierden al firmar (el Applet no sabe en qu\u00e9 directorio o carpeta estaba el XML para localizar el XSL, y no puede asumir d\u00f3nde se guardar\u00e1 la firma generada), las hojas de estilo no se firman.","title":"Firma de hojas de estilo en XMLDSig y XAdES"},{"location":"markdown_strict/CF_manual-firmas-xml/#notas-importantes-sobre-la-firma-de-hojas-de-estilo-xml","text":"","title":"Notas importantes sobre la firma de hojas de estilo XML"},{"location":"markdown_strict/CF_manual-firmas-xml/#_1","text":"","title":""},{"location":"markdown_strict/CF_manual-firmas-xml/#desactivacion-y-activacion-de-firma-de-las-hojas-de-estilo","text":"El Cliente NO firma por defecto aquellas hojas de estilo que encuentra ya que estas pueden hacer referencia a recursos locales del usuario o recursos remotos no accesibles, pero permite modificar este comportamiento mediante el m\u00e9todo del Applet (que es posible invocar v\u00eda JavaScript): clienteFirma.addExtraParam(String paramName, String paramValue), y el siguiente uso: Desactivar firma de hoja de estilo: clienteFirma.addExtraParam(\u201cignoreStyleSheets\u201d, \u201c true \u201d); Activar firma de hoja de estilo: clienteFirma.addExtraParam(\u201cignoreStyleSheets\u201d, \u201c false \u201d); Una vez deshabilitada o habilitada la firma de hojas de estilo, se mantendr\u00e1 ese comportamiento hasta que se reinicie el Applet o se vuelva a cambiar mediante la llamada complementaria. Puede encontrar m\u00e1s informaci\u00f3n sobre el m\u00e9todo addExtraParam en la documentaci\u00f3n JavaDoc.","title":"Desactivaci\u00f3n y activaci\u00f3n de firma de las hojas de estilo"},{"location":"markdown_strict/CF_manual-firmas-xml/#hojas-de-estilo-anidadas","text":"Las hojas de estilo XSL pueden referenciar a su vez a otras hojas de estilo mediante las clausulas <xsl:include> y <xsl:import>. Mediante estas etiquetas, se puede construir una cadena de ficheros de definici\u00f3n de estilos en forma de \u00e1rbol, donde unas referencian a otras tanto de forma remota como local, en modo relativo o absoluto. En la actualidad, el Cliente @firma no sigue la cadena de referencias para firmar la totalidad de los ficheros que definen el estilo del XML, sino que opera \u00fanicamente sobre el primer fichero referenciado por el XML en el atributo href de la etiqueta xml-stylesheet. Intente en la medida de lo posible evitar el uso de <xsl:include> y <xsl:import> en hojas de estilo, y valore la posibilidad de incluir clausulas en su aplicaci\u00f3n reflejando esta limitaci\u00f3n.","title":"Hojas de estilo anidadas"},{"location":"markdown_strict/CF_manual-firmas-xml/#transformaciones-xml","text":"Los formatos de firma XAdES y XMLdSig permiten la configuraci\u00f3n de transformaciones XML personalizadas. Estas transformaciones se aplican a un XML de datos antes de firmarlo, de tal forma que no se firma el XML original, sino el transformado. Las transformaciones quedan declaradas en la firma para que quede constancia de ellas y sea posible validar la firma por medio del XML de datos original. La declaraci\u00f3n de transformaciones XML para la firma es \u00fatil para la ejecuci\u00f3n de firmas con un formato espec\u00edfico. Por ejemplo, la especificaci\u00f3n de factura electr\u00f3nica establece que no se debe firmar el XML de datos al completo, sino partes espec\u00edficas del mismo. Se permite la declaraci\u00f3n de distintos tipos de transformaciones, algunos de los cuales tienen subtipos. La l\u00f3gica de una transformaci\u00f3n se especifica mediante un cuerpo, salvo en casos concretos en los que la l\u00f3gica est\u00e1 predefinida por el tipo de transformaci\u00f3n (caso de las transformaciones Base64 y Enveloped). Los tipos de transformaciones soportados son: Transformaci\u00f3n XPATH : Tipo: http://www.w3.org/TR/1999/REC-xpath-19991116 Subtipos: No tiene subtipos. Cuerpo: Especificado mediante sentencias de tipo XPATH. Transformaci\u00f3n XPATH2 : Tipo: http://www.w3.org/2002/06/xmldsig-filter2 Subtipos: subtract : Operaci\u00f3n de substracci\u00f3n. intersect : Operaci\u00f3n de intersecci\u00f3n. union : Operaci\u00f3n de uni\u00f3n. Cuerpo: Especificado mediante sentencias de tipo XPATH2. Transformaci\u00f3n BASE64 (esta transformaci\u00f3n ya se establece por defecto cuando se firman datos binarios, por lo que no se recomienda su uso de forma independiente). Requiere que los datos proporcionados est\u00e9n en Base64 y que se indique so codificaci\u00f3n mediante el par\u00e1metro \u201cencoding=base64\u201d: Tipo: http://www.w3.org/2000/09/xmldsig#base64 Subtipos: No tiene subtipos. Cuerpo: No tiene cuerpo. Transformaci\u00f3n ENVELOPED (esta transformaci\u00f3n ya se establece por defecto en los formatos de firma enveloped, por lo que no se recomienda su uso de forma independiente): Tipo: http://www.w3.org/2000/09/xmldsig#enveloped-signature Subtipos: No tiene subtipos. Cuerpo: No tiene cuerpo. No es posible especificar transformaciones complejas que incluyan varias sentencias. En su lugar, puede declararse una sucesi\u00f3n de transformaciones simples que produzcan el mismo resultado. Cada una de las transformaciones se aplicar\u00e1 de forma ordenada sobre el resultado de la anterior. Las transformaciones personalizadas se declaran a trav\u00e9s del m\u00e9todo: addXMLTransform(String tipo, String subtipo, String cuerpo) Este m\u00e9todo puede utilizarse sucesivas veces para establecer varias transformaciones que se apliquen ordenadamente. Para eliminar todas las transformaciones declaradas se utiliza el m\u00e9todo: resetXMLTransforms()","title":"Transformaciones XML"},{"location":"markdown_strict/CF_manual-firmas-xml/#uso-de-estructuras-manifest-en-firmas-xades","text":"Es posible crear firmas XAdES en las que, siguiendo el punto 2.3 de la especificaci\u00f3n XMLDSig ( http://www.w3.org/TR/2000/WD-xmldsig-core-20000510/#sec-o-Manifest ), las referencias XML no se firmen directamente, sino que se firme una estructura de tipo Manifest que a su vez contenga las referencias a firmar. De esta forma, tal y como indica la normativa, la resoluci\u00f3n de las referencias incluidas dentro de una estructura Manifest es una responsabilidad del validador, y de cara a la propia firma no se resuelven para calcular las huellas digitales (lo que permite hacer firmas XML expl\u00edcitas). Consulte la especificaci\u00f3n XMLDSig para mayor informaci\u00f3n. Para crear firmas XAdES con estructuras Manifest debe especificarse el siguiente par\u00e1metro adicional: useManifest=true Un ejemplo muy simplificado de la estructura de una firma con Manifest ser\u00eda: <ds:Signature Id=\"Signature-02553\"> <ds:SignedInfo> <ds:Reference Id=\"Reference-894bfd39 \" Type=\"http://www.w3.org/2000/09/xmldsig#Manifest\" URI=\"#Manifest-36e2de7b\"> \u2026 </ds:Reference> </ds:SignedInfo> \u2026 <ds:Object Id=\"ManifestObject-ffd54e53\"> <ds:Manifest Id=\"Manifest-36e2de7b\"> <ds:Reference Id=\"Reference-894bfd39\" URI=\"myscheme://path/file\"> <ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha512\"/> <ds:DigestValue>\u2026</ds:DigestValue> </ds:Reference> </ds:Manifest> </ds:Object> \u2026 </ds:Signature> En este ejemplo el contenido firmado es \u201c myscheme://path/file \u201d, pero al firmar no se ha intentado acceder a ese fichero, y se ha dado por buena la huella digital indicada.","title":"Uso de estructuras Manifest en firmas XAdES"},{"location":"markdown_strict/CF_manual-firmas-xml/#incidencias-conocidas","text":"","title":"Incidencias conocidas"},{"location":"markdown_strict/CF_manual-firmas-xml/#mensajes-extranos-en-consola","text":"El cliente, al firmar ficheros no-XML en modalidades impl\u00edcitas o al firmar cualquier tipo de fichero (XML o no) en modalidades expl\u00edcitas puede escribir el siguiente mensaje en consola: [Fatal Error] :1:1: Content is not allowed in prolog. Este mensaje debe ignorarse, ya que no se genera desde la aplicaci\u00f3n, sino desde las clases de Sun Microsystems / Apache destinadas a identificar si el contenido del fichero es XML o no. No es posible ocultar este mensaje o evitar que se escriba en la consola.","title":"Mensajes extra\u00f1os en consola"},{"location":"markdown_strict/CF_manual-firmas-xml/#diferencias-en-las-firmas-generadas-respecto-a-versiones-anteriores-del-cliente-y-sus-modulos","text":"En la versi\u00f3n 3.2 del Cliente y anteriores se inclu\u00eda en la firma \u00fanicamente el certificado del firmantes, mientras que en la versi\u00f3n 3.3 y superiores, por defecto, se incluye toda la cadena de certificaci\u00f3n. Para conservar el comportamiento anterior es necesario configurar el par\u00e1metro extra de firma \u201cincludeOnlySignningCertificate\u201d al valor \u201ctrue\u201d. En las contrafirmas, la versi\u00f3n anterior del cliente identificaba las firmas seg\u00fan el IssuerName del certificado firmante. Si firma el documento dentro de una misma organizaci\u00f3n es muy probable que el IssuerName sea el mismo para todos los firmantes (normalmente, el certificado lo habr\u00e1 emitido la misma autoridad de certificaci\u00f3n para los empleados de una determinada organizaci\u00f3n), por lo que resultaba imposible discernir entre los firmantes. Cuando se recibe un documento ya firmado, para aceptar ese documento y firma, lo importante es conocer qui\u00e9n ha firmado ese documento, por lo que es aconsejable que se identifiquen seg\u00fan el SubjectName o el CommonName de su certificado. Las versiones v.2.x y v3.0 del Cliente @firma nunca declaraban (en ning\u00fan formato XML) transformaciones Base64 cuando realizaba estas conversiones. La versi\u00f3n actual (ver puntos anteriores) declara estas transformaciones (aspecto requerido por las normativas) para las firmas XAdES y XMLDSig. Si se firma un XML que declara una hoja de estilo XSL en modo Enveloped, las versiones del cliente v2.x y 3.0 eliminaban la declaraci\u00f3n de la hoja de estilo, mientras que el v3.1 mantiene esta declaraci\u00f3n. Las versiones del cliente v.2.x y v3.0 no firmaban hojas de estilo asociadas a un XML, mientras que la versi\u00f3n actual s\u00ed las firma.","title":"Diferencias en las firmas generadas respecto a versiones anteriores del cliente y sus m\u00f3dulos"},{"location":"markdown_strict/CF_manual-firmas-xml/#ejemplos-de-estructuras-xml-generadas-por-el-modulo","text":"","title":"Ejemplos de Estructuras XML generadas por el m\u00f3dulo"},{"location":"markdown_strict/CF_manual-firmas-xml/#xmldsig","text":"","title":"XMLDSig"},{"location":"markdown_strict/CF_manual-firmas-xml/#detached-interno-explicito-implicito","text":"<?xml version= \"1.0\" encoding= \"UTF-8\" ?> <AFIRMA> <CONTENT Encoding= \"...\" Id= \"ID-CONTENT\" MimeType= \"...\" >...</CONTENT> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"ID-Signature\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id=\"ID-Reference\" URI=\"#ID-CONTENT\"> <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" >...</ds:SignatureValue> <ds:KeyInfo Id=\"2e9ff06f-a4cf-48f1-b670-b0dcdec56331-KeyInfo\"> <ds:KeyValue> <ds:RSAKeyValue><ds:Modulus>...</ds:Modulus><ds:Exponent>...</ds:Exponent></ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data><ds:X509Certificate>...</ds:X509Certificate></ds:X509Data> </ds:KeyInfo> </ds:Signature> </AFIRMA>","title":"Detached Interno Expl\u00edcito / Impl\u00edcito"},{"location":"markdown_strict/CF_manual-firmas-xml/#enveloping-explicito-implicito","text":"<?xml version= \"1.0\" encoding= \"UTF-8\" ?> <ds:Signature xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" Type= \"http://www.w3.org/2000/09/xmldsig#Object\" URI= \"#ID-Object\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> <ds:Object Encoding= \"...\" Id= \"ID-Object\" MimeType= \"...\" >...</ds:Object> </ds:Signature>","title":"Enveloping Expl\u00edcito / Impl\u00edcito"},{"location":"markdown_strict/CF_manual-firmas-xml/#enveloped","text":"<?xml version= \"1.0\" encoding= \"UTF-8\" ?> <documento> ... <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"ID-Signature\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" URI= \"\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" /> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> </ds:Signature> </documento>","title":"Enveloped"},{"location":"markdown_strict/CF_manual-firmas-xml/#co-firmas","text":"Ejemplo con \u201cDetached Interna\u201d y dos firmantes: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <AFIRMA> <CONTENT Encoding= \"base64\" Id= \"ID-CONTENT\" MimeType= \"...\" >...</CONTENT> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"ID-Signature\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id=\"ID-Reference\" URI=\"#ID-CONTENT\"> <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> </ds:Signature> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"ID-Signature\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id=\"ID-Reference\" URI=\"#ID-CONTENT\"> <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID2-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID2-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> </ds:Signature> </AFIRMA>","title":"Co-Firmas"},{"location":"markdown_strict/CF_manual-firmas-xml/#contrafirmas","text":"Ejemplo con \u201cDetached Interna\u201d y dos firmantes: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <AFIRMA> <CONTENT Encoding= \"\u2026\" Id= \"ID-CONTENT\" MimeType= \"...\" >...</CONTENT> <ds:Signature xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature1\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" URI= \"#ID-CONTENT\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>sEfy8aIUCmWhhBUOsUiHyxvmLvs=</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue1\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> </ds:Signature> <ds:Signature xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature2\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" URI= \"#ID-CONTENT\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>\u2026</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue2\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> </ds:Signature> <ds:Signature xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature3\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" Type= \"http://uri.etsi.org/01903#CountersignedSignature\" URI= \"#ID-SignatureValue1\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue3\" /> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> </ds:Signature> </AFIRMA>","title":"Contrafirmas"},{"location":"markdown_strict/CF_manual-firmas-xml/#xades","text":"","title":"XAdES"},{"location":"markdown_strict/CF_manual-firmas-xml/#detached-interno-explicito-implicito_1","text":"<?xml version= \"1.0\" encoding= \"UTF-8\" ?> <AFIRMA> <CONTENT Encoding= \"...\" Id= \"ID-CONTENT\" MimeType= \"...\" >...</CONTENT> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"ID-Signature\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id=\"ID-Reference\" URI=\"#ID-CONTENT\"> <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference Type=\"http://uri.etsi.org/01903#SignedProperties\" URI=\"#ID- SignedProperties\"> <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" /> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue><ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue></ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> <ds:Object> <xades:QualifyingProperties xmlns:dsign= \"http://www.w3.org/2000/09/xmldsig#\" xmlns:xades=\"http://uri.etsi.org/01903/v1.3.2#\" Id=\"ID-QualifyingProperties\" Target=\"#ID-Signature\"> <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <ds:DigestMethod Algorithm= \"...\" /> <ds:DigestValue>...</ds:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <ds:X509IssuerName>...</ds:X509IssuerName> <ds:X509SerialNumber>...</ds:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties> <xades:DataObjectFormat ObjectReference= \"#ID-Reference\" > <xades:Description /> <xades:MimeType>...</xades:MimeType> <xades:Encoding>...</xades:Encoding> </xades:DataObjectFormat> </xades:SignedDataObjectProperties> </xades:SignedProperties> </xades:QualifyingProperties> </ds:Object> </ds:Signature> </AFIRMA>","title":"Detached Interno Expl\u00edcito / Impl\u00edcito"},{"location":"markdown_strict/CF_manual-firmas-xml/#enveloping-explicito-implicito_1","text":"<?xml version= \"1.0\" encoding= \"UTF-8\" ?> <ds:Signature xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" Type= \"http://www.w3.org/2000/09/xmldsig#Object\" URI= \"#ID-Object\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>eg9yVHgqINMyyztUbeqlfJozTzY=</ds:DigestValue> </ds:Reference> <ds:Reference Type= \"http://uri.etsi.org/01903#SignedProperties\" URI= \"#ID- SignedProperties\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>8v1ohri++lnTP4D0b3P0gY9D7QI=</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> <ds:Object Encoding= \"...\" Id= \"ID-Object\" MimeType= \"...\" >...</ds:Object> <ds:Object> <xades:QualifyingProperties xmlns:dsign= \"http://www.w3.org/2000/09/xmldsig#\" xmlns:xades= \"http://uri.etsi.org/01903/v1.3.2#\" Id= \"ID-QualifyingProperties\" Target= \"#ID- Signature\" > <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <ds:X509IssuerName>...</ds:X509IssuerName> <ds:X509SerialNumber>...</ds:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties> <xades:DataObjectFormat ObjectReference= \"#ID-Reference\" > <xades:Description /> <xades:MimeType>...</xades:MimeType> <xades:Encoding>...</xades:Encoding> </xades:DataObjectFormat> </xades:SignedDataObjectProperties> </xades:SignedProperties> </xades:QualifyingProperties> </ds:Object> </ds:Signature>","title":"Enveloping Expl\u00edcito / Impl\u00edcito"},{"location":"markdown_strict/CF_manual-firmas-xml/#enveloped_1","text":"<?xml version= \"1.0\" encoding= \"UTF-8\" ?> <documento> ... <ds:Signature xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" URI= \"\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/2000/09/xmldsig#enveloped- signature\" /> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference Type= \"http://uri.etsi.org/01903#SignedProperties\" URI= \"#ID- SignedProperties\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n- 20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"ID-SignatureValue\" >...</ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> <ds:Object> <xades:QualifyingProperties xmlns:dsign= \"http://www.w3.org/2000/09/xmldsig#\" xmlns:xades= \"http://uri.etsi.org/01903/v1.3.2#\" Id= \"ID-QualifyingProperties\" Target= \"#ID- Signature\" > <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <ds:X509IssuerName>...</ds:X509IssuerName> <ds:X509SerialNumber>...</ds:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties> <xades:DataObjectFormat ObjectReference= \"#ID-Reference\" > <xades:Description /> <xades:MimeType>...</xades:MimeType> <xades:Encoding>...</xades:Encoding> </xades:DataObjectFormat> </xades:SignedDataObjectProperties> </xades:SignedProperties> </xades:QualifyingProperties> </ds:Object> </ds:Signature> </documento>","title":"Enveloped"},{"location":"markdown_strict/CF_manual-firmas-xml/#co-firmas_1","text":"Ejemplo con \u201cDetached Interna\u201d y dos firmantes: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <AFIRMA> <CONTENT Encoding= \"...\" Id= \"ID-CONTENT\" MimeType= \"...\" >...</CONTENT> <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"ID-Signature\"> <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-CONTENT\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference Type=\"http://uri.etsi.org/01903#SignedProperties\" URI=\"#ID-SignedProperties\"> <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"...\" ></ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> <ds:Object> <xades:QualifyingProperties xmlns:dsign= \"http://www.w3.org/2000/09/xmldsig#\" xmlns:xades=\"http://uri.etsi.org/01903/v1.3.2#\" Id=\"ID-QualifyingProperties\" Target=\"#ID-Signature\"> <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <ds:X509IssuerName>...</ds:X509IssuerName> <ds:X509SerialNumber>...</ds:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties> <xades:DataObjectFormat ObjectReference= \"#ID-Reference\" > <xades:Description /> <xades:MimeType>...</xades:MimeType> <xades:Encoding>...</xades:Encoding> </xades:DataObjectFormat> </xades:SignedDataObjectProperties> </xades:SignedProperties> </xades:QualifyingProperties> </ds:Object> </ds:Signature> <dsign:Signature xmlns:dsign=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"ID-Signature\"> <dsign:SignedInfo> <dsign:CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <dsign:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <dsign:Reference Id= \"ID-Reference\" URI= \"#ID-CONTENT\" > <dsign:Transforms> <dsign:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> <dsign:Reference Type=\"http://uri.etsi.org/01903#SignedProperties\" URI=\"#ID-SignedProperties\"> <dsign:Transforms> <dsign:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> <dsign:Reference URI= \"#ID2-KeyInfo\" > <dsign:Transforms> <dsign:Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> </dsign:SignedInfo> <dsign:SignatureValue Id= \"ID-SignatureValue\" >...</dsign:SignatureValue> <dsign:KeyInfo Id= \"ID2-KeyInfo\" > <dsign:KeyValue> <dsign:RSAKeyValue> <dsign:Modulus>...</dsign:Modulus> <dsign:Exponent>...</dsign:Exponent> </dsign:RSAKeyValue> </dsign:KeyValue> <dsign:X509Data> <dsign:X509Certificate>...</dsign:X509Certificate> </dsign:X509Data> </dsign:KeyInfo> <dsign:Object> <xades:QualifyingProperties xmlns:xades= \"http://uri.etsi.org/01903/v1.3.2#\" Id=\"ID-QualifyingProperties\" Target=\"#ID-Signature\"> <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <dsign:X509IssuerName>...</dsign:X509IssuerName> <dsign:X509SerialNumber>...</dsign:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties /> </xades:SignedProperties> </xades:QualifyingProperties> </dsign:Object> </dsign:Signature> </AFIRMA>","title":"Co-Firmas"},{"location":"markdown_strict/CF_manual-firmas-xml/#contrafirmas_1","text":"Ejemplo con \u201cDetached Interna\u201d y dos firmantes: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <AFIRMA> <CONTENT Encoding= \"...\" Id= \"ID-CONTENT\" MimeType= \"...\" >...</CONTENT> <ds:Signature xmlns:ds= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature\" > <ds:SignedInfo> <ds:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <ds:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <ds:Reference Id= \"ID-Reference\" URI= \"#ID-CONTENT\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference Type= \"http://uri.etsi.org/01903#SignedProperties\" URI= \"#ID-SignedProperties\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> <ds:Reference URI= \"#ID-KeyInfo\" > <ds:Transforms> <ds:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </ds:Transforms> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </ds:Reference> </ds:SignedInfo> <ds:SignatureValue Id= \"...\" ></ds:SignatureValue> <ds:KeyInfo Id= \"ID-KeyInfo\" > <ds:KeyValue> <ds:RSAKeyValue> <ds:Modulus>...</ds:Modulus> <ds:Exponent>...</ds:Exponent> </ds:RSAKeyValue> </ds:KeyValue> <ds:X509Data> <ds:X509Certificate>...</ds:X509Certificate> </ds:X509Data> </ds:KeyInfo> <ds:Object> <xades:QualifyingProperties xmlns:dsign= \"http://www.w3.org/2000/09/xmldsig#\" xmlns:xades= \"http://uri.etsi.org/01903/v1.3.2#\" Id= \"ID-QualifyingProperties\" Target= \"#ID-Signature\" > <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <ds:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <ds:DigestValue>...</ds:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <ds:X509IssuerName>...</ds:X509IssuerName> <ds:X509SerialNumber>...</ds:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties> <xades:DataObjectFormat ObjectReference= \"#ID-Reference\" > <xades:Description /> <xades:MimeType>...</xades:MimeType> <xades:Encoding>...</xades:Encoding> </xades:DataObjectFormat> </xades:SignedDataObjectProperties> </xades:SignedProperties> </xades:QualifyingProperties> </ds:Object> </ds:Signature> <dsign:Signature xmlns:dsign= \"http://www.w3.org/2000/09/xmldsig#\" Id= \"ID-Signature\" > <dsign:SignedInfo> <dsign:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <dsign:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <dsign:Reference Id= \"ID-Reference\" URI= \"#ID-CONTENT\" > <dsign:Transforms> <dsign:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>5nfu4+SLSMHDs+CwGRGGoSjNyhw=</dsign:DigestValue> </dsign:Reference> <dsign:Reference Type= \"http://uri.etsi.org/01903#SignedProperties\" URI= \"#26561cf7-e5c0-455a-b220-554a822227b8-SignedProperties\" > <dsign:Transforms> <dsign:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> <dsign:Reference URI= \"#ID-KeyInfo\" > <dsign:Transforms> <dsign:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> </dsign:SignedInfo> <dsign:SignatureValue Id= \"ID-SignatureValue\" >...</dsign:SignatureValue> <dsign:KeyInfo Id= \"ID-KeyInfo\" > <dsign:KeyValue> <dsign:RSAKeyValue> <dsign:Modulus>...</dsign:Modulus> <dsign:Exponent>...</dsign:Exponent> </dsign:RSAKeyValue> </dsign:KeyValue> <dsign:X509Data> <dsign:X509Certificate>...</dsign:X509Certificate> </dsign:X509Data> </dsign:KeyInfo> <dsign:Object> <xades:QualifyingProperties xmlns:xades= \"http://uri.etsi.org/01903/v1.3.2#\" Id= \"ID-QualifyingProperties\" Target= \"#ID-Signature\" > <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <dsign:X509IssuerName>...</dsign:X509IssuerName> <dsign:X509SerialNumber>...</dsign:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties /> </xades:SignedProperties> <UnsignedProperties> <UnsignedSignatureProperties> <CounterSignature> <dsign:Signature Id= \"ID-Signature\" > <dsign:SignedInfo> <dsign:CanonicalizationMethod Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> <dsign:SignatureMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" /> <dsign:Reference Id= \"ID-Reference\" URI= \"#ID-SignatureValue\" > <dsign:Transforms> <dsign:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> <dsign:Reference Type= \"http://uri.etsi.org/01903#SignedProperties\" URI= \"#ID-SignedProperties\" > <dsign:Transforms> <dsign:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> <dsign:Reference URI= \"#ID-KeyInfo\" > <dsign:Transforms> <dsign:Transform Algorithm= \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\" /> </dsign:Transforms> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </dsign:Reference> </dsign:SignedInfo> <dsign:SignatureValue Id= \"ID-SignatureValue\" >...</dsign:SignatureValue> <dsign:KeyInfo Id= \"ID-KeyInfo\" > <dsign:KeyValue> <dsign:RSAKeyValue> <dsign:Modulus>...</dsign:Modulus> <dsign:Exponent>...</dsign:Exponent> </dsign:RSAKeyValue> </dsign:KeyValue> <dsign:X509Data> <dsign:X509Certificate>...</dsign:X509Certificate> </dsign:X509Data> </dsign:KeyInfo> <dsign:Object> <xades:QualifyingProperties Id= \"ID-QualifyingProperties\" Target= \"#ID-Signature\" > <xades:SignedProperties Id= \"ID-SignedProperties\" > <xades:SignedSignatureProperties> <xades:SigningTime>...</xades:SigningTime> <xades:SigningCertificate> <xades:Cert> <xades:CertDigest> <dsign:DigestMethod Algorithm= \"http://www.w3.org/2000/09/xmldsig#sha1\" /> <dsign:DigestValue>...</dsign:DigestValue> </xades:CertDigest> <xades:IssuerSerial> <dsign:X509IssuerName>...</dsign:X509IssuerName> <dsign:X509SerialNumber>...</dsign:X509SerialNumber> </xades:IssuerSerial> </xades:Cert> </xades:SigningCertificate> </xades:SignedSignatureProperties> <xades:SignedDataObjectProperties /> </xades:SignedProperties> </xades:QualifyingProperties> </dsign:Object> </dsign:Signature> </CounterSignature> </UnsignedSignatureProperties> </UnsignedProperties> </xades:QualifyingProperties> </dsign:Object> </dsign:Signature> </AFIRMA>","title":"Contrafirmas"},{"location":"markdown_strict/CF_manual-firmas-xml/#distintas-versiones-de-xades","text":"Por defecto, el cliente genera firmas conforme la versi\u00f3n 1.3.2 de XAdES (BES y EPES), pero podemos hacer que se generen firmas conforme otras versiones del est\u00e1ndar modificando dos `propiedades de la firma: la URL del espacio de nombres y la URL del tipo de las propiedades firmadas. Si queremos, por ejemplo, que las firmas se generen conforme la versi\u00f3n 1.4.1 del est\u00e1ndar (\u00fatil si queremos que la firma est\u00e9 preparada para a\u00f1adir caracter\u00edsticas avanzadas de sello de tiempo seg\u00fan la \u00faltima versi\u00f3n de XAdES), debemos indic\u00e1rselo expresamente al Applet mediante \u201cpar\u00e1metros extraordinarios\u201d. La forma de realizar estas indicaciones es mediante el m\u00e9todo del Applet clienteFirma.addExtraParam(String paramName, String paramValue), y el siguiente uso: clienteFirma.addExtraParam(\u201cxadesNamespace\u201d, \u201chttp://uri.etsi.org/01903/v1.4.1#\u201d); clienteFirma.addExtraParam(\u201csignedPropertiesTypeUrl\u201d, \u201chttp://uri.etsi.org/01903#SignedProperties\u201d); Mientras que xadesNamespace establece la URL de definici\u00f3n del espacio de nombres de XAdES signedPropertiesTypeUrl establece la URL de definici\u00f3n del tipo de propiedades firmadas. Para adecuarse a las distintas versiones de XAdES ser\u00e1 necesario indicar los siguientes valores en estos atributos: Versi\u00f3n 1.4.1 de XAdES: xadesNamespace: \u201c http://uri.etsi.org/01903/v1.4.1# \u201d signedPropertiesTypeUrl: \u201chttp://uri.etsi.org/01903#SignedProperties\u201d Versi\u00f3n 1.3.2 de XAdES: xadesNamespace: \u201chttp://uri.etsi.org/01903/v1.3.2#\u201d signedPropertiesTypeUrl: \u201chttp://uri.etsi.org/01903#SignedProperties\u201d Versi\u00f3n 1.2.2 de XAdES: xadesNamespace: \u201chttp://uri.etsi.org/01903/v1.2.2#\u201d signedPropertiesTypeUrl: \u201chttp://uri.etsi.org/01903/v1.2.2#SignedProperties\u201d Versi\u00f3n 1.1.1 de XAdES: xadesNamespace: \u201chttp://uri.etsi.org/01903/v1.1.1#\u201d signedPropertiesTypeUrl: \u201chttp://uri.etsi.org/01903/v1.1.1#SignedProperties\u201d Cuando establezcamos un valor para el espacio de nombres de XAdES, este se utilizar\u00e1 para todas las firmas XAdES que se realicen a partir de entonces (o hasta una re-inicializaci\u00f3n del Applet). Para restablecer el valor por defecto debemos deshacer el establecimiento de par\u00e1metros extraordinarios con el m\u00e9todo equivalente del Applet, ClienteFirma.removeExtraParam(String paramName), que en nuestro caso se concretar\u00eda en: clienteFirma.removeExtraParam(\u201cxadesNamespace\u201d); clienteFirma.removeExtraParam(\u201csignedPropertiesTypeUrl\u201d); Estos m\u00e9todos pueden llamarse desde JavaScript, y puede encontrar informaci\u00f3n adicional en la documentaci\u00f3n JavaDoc del Applet @firma.","title":"Distintas versiones de XAdES"},{"location":"markdown_strict/CF_manual-firmas-xml/#informacion-de-utilidad","text":"Normativa XMLDSig http://www.w3.org/TR/xmldsig-core/ Normativa XAdES http://www.etsi.org","title":"Informaci\u00f3n de utilidad"},{"location":"markdown_strict/CF_manual-firmas-xml/#glosario-de-terminos","text":"","title":"Glosario de t\u00e9rminos"},{"location":"markdown_strict/CF_manual-firmas-xml/#firma-electronica","text":"Es el conjunto de datos, en forma electr\u00f3nica, anejos a otros datos electr\u00f3nicos o asociados funcionalmente con ellos, utilizados como medio para identificar formalmente al autor o a los autores del documento que la recoge.","title":"Firma electr\u00f3nica"},{"location":"markdown_strict/CF_manual-firmas-xml/#xml-digital-signature-xmldsig_1","text":"Es una recomendaci\u00f3n del W3C que define una sintaxis XML para la firma digital","title":"XML Digital Signature (XMLDSig)"},{"location":"markdown_strict/CF_manual-firmas-xml/#xml-advanced-signature-xades","text":"Es un conjunto de extensiones a las recomendaciones XML-DSig haci\u00e9ndolas adecuadas para la firma electr\u00f3nica avanzada.","title":"XML Advanced Signature (XAdES)"},{"location":"markdown_strict/CF_manual-firmas-xml/#rsa","text":"Es un sistema criptogr\u00e1fico de clave p\u00fablica desarrollado en 1977. En la actualidad, RSA es el primer y m\u00e1s utilizado algoritmo de este tipo y es v\u00e1lido tanto para cifrar como para firmar digitalmente.","title":"RSA"},{"location":"markdown_strict/CF_manual-firmas-xml/#xml","text":"Es un metalenguaje extensible de etiquetas desarrollado por el World Wide Web Consortium (W3C). Es una simplificaci\u00f3n y adaptaci\u00f3n del SGML y permite definir la gram\u00e1tica de lenguajes espec\u00edficos (de la misma manera que HTML es a su vez un lenguaje definido por SGML). Por lo tanto XML no es realmente un lenguaje en particular, sino una manera de definir lenguajes para diferentes necesidades. Algunos de estos lenguajes que usan XML para su definici\u00f3n son XHTML, SVG, MathML.","title":"XML"},{"location":"markdown_strict/CF_manual-firmas-xml/#office-open-xml-ooxml_1","text":"Es un formato de archivo abierto y est\u00e1ndar cuyas extensiones m\u00e1s comunes son .docx, .xlsx y .pptx. Se le utiliza para representar y almacenar hojas de c\u00e1lculo, diagramas, presentaciones y documentos de texto. Un archivo Office Open XML contiene principalmente datos basados en el lenguaje de marcado XML, comprimidos en un contenedor .zip espec\u00edfico.","title":"Office Open XML (OOXML)"},{"location":"markdown_strict/CF_manual-firmas-xml/#open-document-format-odf_1","text":"Es un formato de fichero est\u00e1ndar para el almacenamiento de documentos ofim\u00e1ticos tales como hojas de c\u00e1lculo, memorandos, gr\u00e1ficas y presentaciones. Aunque las especificaciones fueron inicialmente elaboradas por Sun, el est\u00e1ndar fue desarrollado por el comit\u00e9 t\u00e9cnico para Open Office XML de la organizaci\u00f3n OASIS y est\u00e1 basado en un esquema XML inicialmente creado e implementado por la suite ofim\u00e1tica OpenOffice.org (ver OpenOffice.org XML).","title":"Open Document Format (ODF)"},{"location":"markdown_strict/CF_manual-firmas-xml/#zip","text":"Es un formato de almacenamiento sin p\u00e9rdida, muy utilizado para la compresi\u00f3n de datos como im\u00e1genes, programas o documentos.","title":"ZIP"},{"location":"markdown_strict/CF_manual-firmas-xml/#pdf","text":"Es un formato de almacenamiento de documentos, desarrollado por la empresa Adobe Systems. Este formato es de tipo compuesto (imagen vectorial, mapa de bits y texto).","title":"PDF"},{"location":"markdown_strict/CF_manual-firmas-xml/#sha","text":"Es un sistema de funciones hash criptogr\u00e1ficas relacionadas de la Agencia de Seguridad Nacional de los Estados Unidos y publicadas por el National Institute of Standards and Technology (NIST). El primer miembro de la familia fue publicado en 1993 es oficialmente llamado SHA. Sin embargo, hoy d\u00eda, no oficialmente se le llama SHA-0 para evitar confusiones con sus sucesores. Dos a\u00f1os m\u00e1s tarde el primer sucesor de SHA fue publicado con el nombre de SHA-1. Existen cuatro variantes m\u00e1s que se han publicado desde entonces cuyas diferencias se basan en un dise\u00f1o algo modificado y rangos de salida incrementados: SHA-224, SHA-256, SHA-384, y SHA-512 (llam\u00e1ndose SHA-2 a todos ellos).","title":"SHA"},{"location":"markdown_strict/CF_manual-firmas-xml/#pkcs","text":"Se refiere a un grupo de est\u00e1ndares de criptograf\u00eda de clave p\u00fablica concebidos y publicados por los laboratorios de RSA en California. A RSA Security se le asignaron los derechos de licenciamiento para la patente de algoritmo de clave asim\u00e9trica RSA y adquiri\u00f3 los derechos de licenciamiento para muchas otras patentes de claves.","title":"PKCS"},{"location":"markdown_strict/CF_manual-firmas-xml/#w3c","text":"Es un consorcio internacional que produce recomendaciones para la World Wide Web. Est\u00e1 dirigida por Tim Berners-Lee, el creador original de URL (Uniform Resource Locator, Localizador Uniforme de Recursos), HTTP (HyperText Transfer Protocol, Protocolo de Transferencia de HiperTexto) y HTML (Lenguaje de Marcado de HiperTexto) que son las principales tecnolog\u00edas sobre las que se basa la Web.","title":"W3C"},{"location":"markdown_strict/CF_manual-firmas-xml/#openofficeorg","text":"es una suite ofim\u00e1tica libre (c\u00f3digo abierto y distribuci\u00f3n gratuita) que incluye herramientas como procesador de textos, hoja de c\u00e1lculo, presentaciones, herramientas para el dibujo vectorial y base de datos. Est\u00e1 disponible para varias plataformas, tales como Microsoft Windows, GNU/Linux, BSD, Solaris y Mac OS X. Soporta numerosos formatos de archivo, incluyendo como predeterminado el formato est\u00e1ndar ISO/IEC OpenDocument (ODF), entre otros formatos comunes. A febrero de 2010, OpenOffice soporta m\u00e1s de 110 idiomas.","title":"OpenOffice.org"},{"location":"markdown_strict/CF_manual-firmas-xml/#base64","text":"Es un sistema de numeraci\u00f3n posicional que usa 64 como base. Es la mayor potencia de dos que puede ser representada usando \u00fanicamente los caracteres imprimibles de ASCII. Esto ha propiciado su uso para codificaci\u00f3n de correos electr\u00f3nicos, PGP y otras aplicaciones. Todas las variantes famosas que se conocen con el nombre de Base64 usan el rango de caracteres A-Z, a-z y 0-9 en este orden para los primeros 62 d\u00edgitos, pero los s\u00edmbolos escogidos para los \u00faltimos dos d\u00edgitos var\u00edan considerablemente de unas a otras. Otros m\u00e9todos de codificaci\u00f3n como UUEncode y las \u00faltimas versiones de binhex usan un conjunto diferente de 64 caracteres para representar 6 d\u00edgitos binarios, pero \u00e9stos nunca son llamados Base64.","title":"Base64"},{"location":"markdown_strict/CF_manual-firmas-xml/#asn1","text":"Es una norma para representar datos independientemente de la m\u00e1quina que se est\u00e9 usando y sus formas de representaci\u00f3n internas. Es un protocolo de nivel de presentaci\u00f3n en el modelo OSI.","title":"ASN.1"},{"location":"markdown_strict/CF_manual-firmas-xml/#autoridad-de-certificacion-ca","text":"Es una entidad de confianza, responsable de emitir y revocar los certificados digitales o certificados, utilizados en la firma electr\u00f3nica, para lo cual se emplea la criptograf\u00eda de clave p\u00fablica. Jur\u00eddicamente es un caso particular de Prestador de Servicios de Certificaci\u00f3n.","title":"Autoridad de Certificaci\u00f3n (CA)"},{"location":"markdown_strict/CF_manual-firmas-xml/#certificado-digital","text":"Es un documento digital mediante el cual un tercero confiable (una autoridad de certificaci\u00f3n) garantiza la vinculaci\u00f3n entre la identidad de un sujeto o entidad y su clave p\u00fablica.","title":"Certificado Digital"},{"location":"markdown_strict/CF_manual-firmas-xml/#infraestructura-de-clave-publica-pki","text":"Es una combinaci\u00f3n de hardware y software, pol\u00edticas y procedimientos de seguridad que permiten la ejecuci\u00f3n con garant\u00edas de operaciones criptogr\u00e1ficas como el cifrado, la firma digital o el no repudio de transacciones electr\u00f3nicas. Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported Usted es libre de: | < style=\"width:0.52083in;height:0.52083in\" alt=\"share\" /> | Compartir - copiar, distribuir, ejecutar y comunicar p\u00fablicamente la obra | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"remix\" /> | hacer obras derivadas | Bajo las condiciones siguientes: | < style=\"width:0.52083in;height:0.52083in\" alt=\"by\" /> | Atribuci\u00f3n \u2014 Debe reconocer los cr\u00e9ditos de la obra de la manera especificada por el autor o el licenciante (pero no de una manera que sugiera que tiene su apoyo o que apoyan el uso que hace de su obra). | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"nc\" /> | NoComercial \u2014 No puede utilizar esta obra para fines comerciales. | | < style=\"width:0.52083in;height:0.52083in\" alt=\"sa\" /> | Compartir bajo la Misma Licencia \u2014 Si altera o transforma esta obra, o genera una obra derivada, s\u00f3lo puede distribuir la obra generada bajo una licencia id\u00e9ntica a \u00e9sta. | Entendiendo que: Renuncia \u2014 Alguna de estas condiciones puede no aplicarse si se obtiene el permiso del titular de los derechos de autor Dominio P\u00fablico \u2014 Cuando la obra o alguno de sus elementos se hallen en el dominio p\u00fablico seg\u00fan la ley vigente aplicable, esta situaci\u00f3n no quedar\u00e1 afectada por la licencia. Otros derechos \u2014 Los derechos siguientes no quedan afectados por la licencia de ninguna manera: Los derechos derivados de usos leg\u00edtimos u otras limitaciones reconocidas por ley no se ven afectados por lo anterior. Los derechos morales del auto; Derechos que pueden ostentar otras personas sobre la propia obra o su uso, como por ejemplo derechos de imagen o de privacidad. Aviso \u2014 Al reutilizar o distribuir la obra, tiene que dejar muy en claro los t\u00e9rminos de la licencia de esta obra. La mejor forma de hacerlo es enlazar a esta p\u00e1gina. Licencia LA OBRA O LA PRESTACI\u00d3N (SEG\u00daN SE DEFINEN M\u00c1S ADELANTE) SE PROPORCIONA BAJO LOS T\u00c9RMINOS DE ESTA LICENCIA P\u00daBLICA DE CREATIVE COMMONS (CCPL O LICENCIA). LA OBRA O LA PRESTACI\u00d3N SE ENCUENTRA PROTEGIDA POR LA LEY ESPA\u00d1OLA DE PROPIEDAD INTELECTUAL Y/O CUALESQUIERA OTRAS NORMAS QUE RESULTEN DE APLICACI\u00d3N. QUEDA PROHIBIDO CUALQUIER USO DE LA OBRA O PRESTACI\u00d3N DIFERENTE A LO AUTORIZADO BAJO ESTA LICENCIA O LO DISPUESTO EN LA LEY DE PROPIEDAD INTELECTUAL. MEDIANTE EL EJERCICIO DE CUALQUIER DERECHO SOBRE LA OBRA O LA PRESTACI\u00d3N, USTED ACEPTA Y CONSIENTE LAS LIMITACIONES Y OBLIGACIONES DE ESTA LICENCIA, SIN PERJUICIO DE LA NECESIDAD DE CONSENTIMIENTO EXPRESO EN CASO DE VIOLACI\u00d3N PREVIA DE LOS T\u00c9RMINOS DE LA MISMA. EL LICENCIADOR LE CONCEDE LOS DERECHOS CONTENIDOS EN ESTA LICENCIA, SIEMPRE QUE USTED ACEPTE LOS PRESENTES T\u00c9RMINOS Y CONDICIONES. 1. Definiciones La obra es la creaci\u00f3n literaria, art\u00edstica o cient\u00edfica ofrecida bajo los t\u00e9rminos de esta licencia. En esta licencia se considera una prestaci\u00f3n cualquier interpretaci\u00f3n, ejecuci\u00f3n, fonograma, grabaci\u00f3n audiovisual, emisi\u00f3n o transmisi\u00f3n, mera fotograf\u00eda u otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente aplicable. La aplicaci\u00f3n de esta licencia a una colecci\u00f3n (definida m\u00e1s adelante) afectar\u00e1 \u00fanicamente a su estructura en cuanto forma de expresi\u00f3n de la selecci\u00f3n o disposici\u00f3n de sus contenidos, no siendo extensiva a \u00e9stos. En este caso la colecci\u00f3n tendr\u00e1 la consideraci\u00f3n de obra a efectos de esta licencia. El titular originario es: En el caso de una obra literaria, art\u00edstica o cient\u00edfica, la persona natural o grupo de personas que cre\u00f3 la obra. En el caso de una obra colectiva, la persona que la edite y divulgue bajo su nombre, salvo pacto contrario. En el caso de una interpretaci\u00f3n o ejecuci\u00f3n, el actor, cantante, m\u00fasico, o cualquier otra persona que represente, cante, lea, recite, interprete o ejecute en cualquier forma una obra. En el caso de un fonograma, el productor fonogr\u00e1fico, es decir, la persona natural o jur\u00eddica bajo cuya iniciativa y responsabilidad se realiza por primera vez una fijaci\u00f3n exclusivamente sonora de la ejecuci\u00f3n de una obra o de otros sonidos. En el caso de una grabaci\u00f3n audiovisual, el productor de la grabaci\u00f3n, es decir, la persona natural o jur\u00eddica que tenga la iniciativa y asuma la responsabilidad de las fijaciones de un plano o secuencia de im\u00e1genes, con o sin sonido. En el caso de una emisi\u00f3n o una transmisi\u00f3n, la entidad de radiodifusi\u00f3n. En el caso de una mera fotograf\u00eda, aquella persona que la haya realizado. En el caso de otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente, la persona que \u00e9sta se\u00f1ale. Se considerar\u00e1n obras derivadas aquellas obras creadas a partir de la licenciada, como por ejemplo: las traducciones y adaptaciones; las revisiones, actualizaciones y anotaciones; los compendios, res\u00famenes y extractos; los arreglos musicales y, en general, cualesquiera transformaciones de una obra literaria, art\u00edstica o cient\u00edfica. Para evitar la duda, si la obra consiste en una composici\u00f3n musical o grabaci\u00f3n de sonidos, la sincronizaci\u00f3n temporal de la obra con una imagen en movimiento (synching) ser\u00e1 considerada como una obra derivada a efectos de esta licencia. Tendr\u00e1n la consideraci\u00f3n de colecciones la recopilaci\u00f3n de obras ajenas, de datos o de otros elementos independientes como las antolog\u00edas y las bases de datos que por la selecci\u00f3n o disposici\u00f3n de sus contenidos constituyan creaciones intelectuales. La mera incorporaci\u00f3n de una obra en una colecci\u00f3n no dar\u00e1 lugar a una derivada a efectos de esta licencia. El licenciador es la persona o la entidad que ofrece la obra o prestaci\u00f3n bajo los t\u00e9rminos de esta licencia y le concede los derechos de explotaci\u00f3n de la misma conforme a lo dispuesto en ella. Usted es la persona o la entidad que ejercita los derechos concedidos mediante esta licencia y que no ha violado previamente los t\u00e9rminos de la misma con respecto a la obra o la prestaci\u00f3n, o que ha recibido el permiso expreso del licenciador de ejercitar los derechos concedidos mediante esta licencia a pesar de una violaci\u00f3n anterior. La transformaci\u00f3n de una obra comprende su traducci\u00f3n, adaptaci\u00f3n y cualquier otra modificaci\u00f3n en su forma de la que se derive una obra diferente. La creaci\u00f3n resultante de la transformaci\u00f3n de una obra tendr\u00e1 la consideraci\u00f3n de obra derivada. Se entiende por reproducci\u00f3n la fijaci\u00f3n directa o indirecta, provisional o permanente, por cualquier medio y en cualquier forma, de toda la obra o la prestaci\u00f3n o de parte de ella, que permita su comunicaci\u00f3n o la obtenci\u00f3n de copias. Se entiende por distribuci\u00f3n la puesta a disposici\u00f3n del p\u00fablico del original o de las copias de la obra o la prestaci\u00f3n, en un soporte tangible, mediante su venta, alquiler, pr\u00e9stamo o de cualquier otra forma. Se entiende por comunicaci\u00f3n p\u00fablica todo acto por el cual una pluralidad de personas, que no pertenezcan al \u00e1mbito dom\u00e9stico de quien la lleva a cabo, pueda tener acceso a la obra o la prestaci\u00f3n sin previa distribuci\u00f3n de ejemplares a cada una de ellas. Se considera comunicaci\u00f3n p\u00fablica la puesta a disposici\u00f3n del p\u00fablico de obras o prestaciones por procedimientos al\u00e1mbricos o inal\u00e1mbricos, de tal forma que cualquier persona pueda acceder a ellas desde el lugar y en el momento que elija. La explotaci\u00f3n de la obra o la prestaci\u00f3n comprende la reproducci\u00f3n, la distribuci\u00f3n, la comunicaci\u00f3n p\u00fablica y, en su caso, la transformaci\u00f3n. 2. L\u00edmites de los derechos. Nada en esta licencia pretende reducir o restringir cualesquiera l\u00edmites legales de los derechos exclusivos del titular de los derechos de propiedad intelectual de acuerdo con la Ley de propiedad intelectual o cualesquiera otras leyes aplicables, ya sean derivados de usos leg\u00edtimos, tales como la copia privada o la cita, u otras limitaciones como la resultante de la primera venta de ejemplares (agotamiento). 3. Concesi\u00f3n de licencia. Conforme a los t\u00e9rminos y a las condiciones de esta licencia, el licenciador concede, por el plazo de protecci\u00f3n de los derechos de propiedad intelectual y a t\u00edtulo gratuito, una licencia de \u00e1mbito mundial no exclusiva que incluye los derechos siguientes: Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n. Derecho a incorporar la obra o la prestaci\u00f3n en una o m\u00e1s colecciones. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n l\u00edcitamente incorporada en una colecci\u00f3n. Derecho de transformaci\u00f3n de la obra para crear una obra derivada siempre y cuando se incluya en \u00e9sta una indicaci\u00f3n de la transformaci\u00f3n o modificaci\u00f3n efectuada. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de obras derivadas creadas a partir de la obra licenciada. Derecho a extraer y reutilizar la obra o la prestaci\u00f3n de una base de datos. Para evitar cualquier duda, el titular originario: Conserva el derecho a percibir las remuneraciones o compensaciones previstas por actos de explotaci\u00f3n de la obra o prestaci\u00f3n, calificadas por la ley como irrenunciables e inalienables y sujetas a gesti\u00f3n colectiva obligatoria. Renuncia al derecho exclusivo a percibir, tanto individualmente como mediante una entidad de gesti\u00f3n colectiva de derechos, cualquier remuneraci\u00f3n derivada de actos de explotaci\u00f3n de la obra o prestaci\u00f3n que usted realice. Estos derechos se pueden ejercitar en todos los medios y formatos, tangibles o intangibles, conocidos en el momento de la concesi\u00f3n de esta licencia. Los derechos mencionados incluyen el derecho a efectuar las modificaciones que sean precisas t\u00e9cnicamente para el ejercicio de los derechos en otros medios y formatos. Todos los derechos no concedidos expresamente por el licenciador quedan reservados, incluyendo, a t\u00edtulo enunciativo pero no limitativo, los derechos morales irrenunciables reconocidos por la ley aplicable. En la medida en que el licenciador ostente derechos exclusivos previstos por la ley nacional vigente que implementa la directiva europea en materia de derecho sui generis sobre bases de datos, renuncia expresamente a dichos derechos exclusivos. 4. Restricciones. La concesi\u00f3n de derechos que supone esta licencia se encuentra sujeta y limitada a las restricciones siguientes: Usted puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n solamente bajo los t\u00e9rminos de esta licencia y debe incluir una copia de la misma, o su Identificador Uniforme de Recurso (URI). Usted no puede ofrecer o imponer ninguna condici\u00f3n sobre la obra o prestaci\u00f3n que altere o restrinja los t\u00e9rminos de esta licencia o el ejercicio de sus derechos por parte de los concesionarios de la misma. Usted no puede sublicenciar la obra o prestaci\u00f3n. Usted debe mantener intactos todos los avisos que se refieran a esta licencia y a la ausencia de garant\u00edas. Usted no puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n con medidas tecnol\u00f3gicas que controlen el acceso o el uso de una manera contraria a los t\u00e9rminos de esta licencia. Esta secci\u00f3n 4.a tambi\u00e9n afecta a la obra o prestaci\u00f3n incorporada en una colecci\u00f3n, pero ello no implica que \u00e9sta en su conjunto quede autom\u00e1ticamente o deba quedar sujeta a los t\u00e9rminos de la misma. En el caso que le sea requerido, previa comunicaci\u00f3n del licenciador, si usted incorpora la obra en una colecci\u00f3n y/o crea una obra derivada, deber\u00e1 quitar cualquier cr\u00e9dito requerido en el apartado 4.b, en la medida de lo posible. Si usted reproduce, distribuye o comunica p\u00fablicamente la obra o la prestaci\u00f3n, una colecci\u00f3n que la incorpore o cualquier obra derivada, debe mantener intactos todos los avisos sobre la propiedad intelectual e indicar, de manera razonable conforme al medio o a los medios que usted est\u00e9 utilizando: El nombre del autor original, o el seud\u00f3nimo si es el caso, as\u00ed como el del titular originario, si le es facilitado. El nombre de aquellas partes (por ejemplo: instituci\u00f3n, publicaci\u00f3n, revista) que el titular originario y/o el licenciador designen para ser reconocidos en el aviso legal, las condiciones de uso, o de cualquier otra manera razonable. El t\u00edtulo de la obra o la prestaci\u00f3n si le es facilitado. El URI, si existe, que el licenciador especifique para ser vinculado a la obra o la prestaci\u00f3n, a menos que tal URI no se refiera al aviso legal o a la informaci\u00f3n sobre la licencia de la obra o la prestaci\u00f3n. En el caso de una obra derivada, un aviso que identifique la transformaci\u00f3n de la obra en la obra derivada (p. ej., \"traducci\u00f3n castellana de la obra de Autor Original,\" o \"gui\u00f3n basado en obra original de Autor Original\"). Este reconocimiento debe hacerse de manera razonable. En el caso de una obra derivada o incorporaci\u00f3n en una colecci\u00f3n estos cr\u00e9ditos deber\u00e1n aparecer como m\u00ednimo en el mismo lugar donde se hallen los correspondientes a otros autores o titulares y de forma comparable a los mismos. Para evitar la duda, los cr\u00e9ditos requeridos en esta secci\u00f3n s\u00f3lo ser\u00e1n utilizados a efectos de atribuci\u00f3n de la obra o la prestaci\u00f3n en la manera especificada anteriormente. Sin un permiso previo por escrito, usted no puede afirmar ni dar a entender impl\u00edcitamente ni expl\u00edcitamente ninguna conexi\u00f3n, patrocinio o aprobaci\u00f3n por parte del titular originario, el licenciador y/o las partes reconocidas hacia usted o hacia el uso que hace de la obra o la prestaci\u00f3n. Para evitar cualquier duda, debe hacerse notar que las restricciones anteriores (p\u00e1rrafos 4.a y 4.b) no son de aplicaci\u00f3n a aquellas partes de la obra o la prestaci\u00f3n objeto de esta licencia que \u00fanicamente puedan ser protegidas mediante el derecho sui generis sobre bases de datos recogido por la ley nacional vigente implementando la directiva europea de bases de datos 5. Exoneraci\u00f3n de responsabilidad A MENOS QUE SE ACUERDE MUTUAMENTE ENTRE LAS PARTES, EL LICENCIADOR OFRECE LA OBRA O LA PRESTACI\u00d3N TAL CUAL (ON AN \"AS-IS\" BASIS) Y NO CONFIERE NINGUNA GARANT\u00cdA DE CUALQUIER TIPO RESPECTO DE LA OBRA O LA PRESTACI\u00d3N O DE LA PRESENCIA O AUSENCIA DE ERRORES QUE PUEDAN O NO SER DESCUBIERTOS. ALGUNAS JURISDICCIONES NO PERMITEN LA EXCLUSI\u00d3N DE TALES GARANT\u00cdAS, POR LO QUE TAL EXCLUSI\u00d3N PUEDE NO SER DE APLICACI\u00d3N A USTED. 6. Limitaci\u00f3n de responsabilidad. SALVO QUE LO DISPONGA EXPRESA E IMPERATIVAMENTE LA LEY APLICABLE, EN NING\u00daN CASO EL LICENCIADOR SER\u00c1 RESPONSABLE ANTE USTED POR CUALESQUIERA DA\u00d1OS RESULTANTES, GENERALES O ESPECIALES (INCLUIDO EL DA\u00d1O EMERGENTE Y EL LUCRO CESANTE), FORTUITOS O CAUSALES, DIRECTOS O INDIRECTOS, PRODUCIDOS EN CONEXI\u00d3N CON ESTA LICENCIA O EL USO DE LA OBRA O LA PRESTACI\u00d3N, INCLUSO SI EL LICENCIADOR HUBIERA SIDO INFORMADO DE LA POSIBILIDAD DE TALES DA\u00d1OS. 7. Finalizaci\u00f3n de la licencia Esta licencia y la concesi\u00f3n de los derechos que contiene terminar\u00e1n autom\u00e1ticamente en caso de cualquier incumplimiento de los t\u00e9rminos de la misma. Las personas o entidades que hayan recibido de usted obras derivadas o colecciones bajo esta licencia, sin embargo, no ver\u00e1n sus licencias finalizadas, siempre que tales personas o entidades se mantengan en el cumplimiento \u00edntegro de esta licencia. Las secciones 1, 2, 5, 6, 7 y 8 permanecer\u00e1n vigentes pese a cualquier finalizaci\u00f3n de esta licencia. Conforme a las condiciones y t\u00e9rminos anteriores, la concesi\u00f3n de derechos de esta licencia es vigente por todo el plazo de protecci\u00f3n de los derechos de propiedad intelectual seg\u00fan la ley aplicable. A pesar de lo anterior, el licenciador se reserva el derecho a divulgar o publicar la obra o la prestaci\u00f3n en condiciones distintas a las presentes, o de retirar la obra o la prestaci\u00f3n en cualquier momento. No obstante, ello no supondr\u00e1 dar por concluida esta licencia (o cualquier otra licencia que haya sido concedida, o sea necesario ser concedida, bajo los t\u00e9rminos de esta licencia), que continuar\u00e1 vigente y con efectos completos a no ser que haya finalizado conforme a lo establecido anteriormente, sin perjuicio del derecho moral de arrepentimiento en los t\u00e9rminos reconocidos por la ley de propiedad intelectual aplicable. 8. Miscel\u00e1nea Cada vez que usted realice cualquier tipo de explotaci\u00f3n de la obra o la prestaci\u00f3n, o de una colecci\u00f3n que la incorpore, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra o la prestaci\u00f3n en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Cada vez que usted realice cualquier tipo de explotaci\u00f3n de una obra derivada, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra objeto de esta licencia en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Si alguna disposici\u00f3n de esta licencia resulta inv\u00e1lida o inaplicable seg\u00fan la Ley vigente, ello no afectar\u00e1 la validez o aplicabilidad del resto de los t\u00e9rminos de esta licencia y, sin ninguna acci\u00f3n adicional por cualquiera las partes de este acuerdo, tal disposici\u00f3n se entender\u00e1 reformada en lo estrictamente necesario para hacer que tal disposici\u00f3n sea v\u00e1lida y ejecutiva. No se entender\u00e1 que existe renuncia respecto de alg\u00fan t\u00e9rmino o disposici\u00f3n de esta licencia, ni que se consiente violaci\u00f3n alguna de la misma, a menos que tal renuncia o consentimiento figure por escrito y lleve la firma de la parte que renuncie o consienta. Esta licencia constituye el acuerdo pleno entre las partes con respecto a la obra o la prestaci\u00f3n objeto de la licencia. No caben interpretaciones, acuerdos o condiciones con respecto a la obra o la prestaci\u00f3n que no se encuentren expresamente especificados en la presente licencia. El licenciador no estar\u00e1 obligado por ninguna disposici\u00f3n complementaria que pueda aparecer en cualquier comunicaci\u00f3n que le haga llegar usted. Esta licencia no se puede modificar sin el mutuo acuerdo por escrito entre el licenciador y usted. [1] Ejemplos y nomenclatura de XMLDSig Detached \u00a9 2009 Microsoft Corporation http://msdn.microsoft.com/en-us/library/ms759193%28VS.85%29.aspx [2] Ejemplos de XMLDSig Enveloping \u00a9 2009 Microsoft Corporation http://msdn.microsoft.com/en-us/library/ms753722(v=VS.85).aspx [3] Ejemplos de XMLDSig Enveloped \u00a9 2009 Microsoft Corporation http://msdn.microsoft.com/en-us/library/ms767623(v=VS.85).aspx","title":"Infraestructura de Clave P\u00fablica (PKI)"},{"location":"markdown_strict/CF_manual-integrador/","text":"< < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported . \u00cdndice 1 Introducci\u00f3n [4](#introducci\u00f3n) 2 Objeto y alcance [5](#objeto-y-alcance) 3 Requisitos m\u00ednimos [6](#requisitos-m\u00ednimos) 3.1 \u00bfQu\u00e9 versi\u00f3n de mi navegador Web debo usar con mi sistema operativo? [7](#qu\u00e9-versi\u00f3n-de-mi-navegador-web-debo-usar-con-mi-sistema-operativo) 3.1.1 Internet Explorer 10 y 11 en Windows 8 [8](#internet-explorer-10-y-11-en-windows-8) 3.2 \u00bfQu\u00e9 versi\u00f3n de Java debo usar en Linux? [8](#qu\u00e9-versi\u00f3n-de-java-debo-usar-en-linux) 3.3 \u00bfQu\u00e9 versi\u00f3n de Java debo usar con el navegador Web Mozilla Firefox? [8](#qu\u00e9-versi\u00f3n-de-java-debo-usar-con-el-navegador-web-mozilla-firefox) 3.4 \u00bfQu\u00e9 versi\u00f3n de Java debo usar con el navegador Microsoft Internet Explorer? [9](#qu\u00e9-versi\u00f3n-de-java-debo-usar-con-el-navegador-microsoft-internet-explorer) 3.5 \u00bfQu\u00e9 versi\u00f3n de Java debo usar con el navegador Google Chrome? [9](#qu\u00e9-versi\u00f3n-de-java-debo-usar-con-el-navegador-google-chrome) 3.6 \u00bfQu\u00e9 versi\u00f3n de Java debo usar con el navegador Apple Safari? [10](#qu\u00e9-versi\u00f3n-de-java-debo-usar-con-el-navegador-apple-safari) 3.7 \u00bfQu\u00e9 versi\u00f3n de Java debo usar con la variante de 64 bits de mi Navegador Web? [10](#qu\u00e9-versi\u00f3n-de-java-debo-usar-con-la-variante-de-64-bits-de-mi-navegador-web) 3.8 \u00bfQu\u00e9 versi\u00f3n de Java debo usar con Mac OS X? [11](#qu\u00e9-versi\u00f3n-de-java-debo-usar-con-mac-os-x) 3.8.1 Applets de Java en versiones posteriores a la actualizaci\u00f3n 2012-006 de Apple [12](#applets-de-java-en-versiones-posteriores-a-la-actualizaci\u00f3n-2012-006-de-apple) 3.8.2 Applets de Java en versiones posteriores a la actualizaci\u00f3n 2012-003 de Apple [12](#applets-de-java-en-versiones-posteriores-a-la-actualizaci\u00f3n-2012-003-de-apple) 3.8.3 Applets de Java en Mac OS X Mountain Lion (10.8.x) [13](#applets-de-java-en-mac-os-x-mountain-lion-10.8.x) 3.9 Informaci\u00f3n adicional [13](#informaci\u00f3n-adicional) 4 Componentes del Cliente [14](#componentes-del-cliente) 5 Despliegue del Cliente [15](#despliegue-del-cliente) 5.1 Ficheros para el despliegue del Cliente [15](#ficheros-para-el-despliegue-del-cliente) 5.2 Despliegue del Cliente [15](#despliegue-del-cliente-1) 6 Uso del Cliente de Firma como Applet de Java [16](#uso-del-cliente-de-firma-como-applet-de-java) 6.1 Carga del Cliente [16](#carga-del-cliente) 6.2 Tratamiento de errores [17](#tratamiento-de-errores) 6.3 Firma electr\u00f3nica [18](#firma-electr\u00f3nica) 6.4 Cofirma ( co-sign ) 21 6.5 Contrafirma ( counter-sign ) 21 6.6 Firma y Multifirma Masiva [22](#_Toc400985736) 6.6.1 Consideraciones previas [22](#consideraciones-previas) 6.6.2 Firma/multifirma de directorios [23](#firmamultifirma-de-directorios) 6.6.3 Modo de operaci\u00f3n program\u00e1tica [26](#modo-de-operaci\u00f3n-program\u00e1tica) 6.7 Cifrado de datos [34](#cifrado-de-datos) 6.8 Descifrado de datos [36](#descifrado-de-datos) 6.9 Estructuras CMS cifradas / Sobres Digitales [38](#estructuras-cms-cifradas-sobres-digitales) 6.9.1 Tipo de contenido [38](#tipo-de-contenido) 6.9.2 Sobres con m\u00faltiples remitentes [41](#sobres-con-m\u00faltiples-remitentes) 7 Despliegue del Cliente @firma en Servidor [43](#despliegue-del-cliente-firma-en-servidor) 7.1 Diferencias del despliegue del Cliente en servidor [43](#diferencias-del-despliegue-del-cliente-en-servidor) 7.2 Acceso a las funcionalidades a bajo nivel del Cliente [44](#acceso-a-las-funcionalidades-a-bajo-nivel-del-cliente) 7.3 Acceso a las funcionalidades a alto nivel del Cliente [45](#acceso-a-las-funcionalidades-a-alto-nivel-del-cliente) 7.3.1 Ejemplo de integraci\u00f3n [45](#ejemplo-de-integraci\u00f3n) 8 Configuraci\u00f3n del Cliente [47](#configuraci\u00f3n-del-cliente-1) 8.1 Configuraci\u00f3n de idioma [47](#configuraci\u00f3n-de-idioma) 8.2 Inicializaci\u00f3n de las operaciones [47](#inicializaci\u00f3n-de-las-operaciones) 8.3 Cambio de almac\u00e9n de certificados [47](#cambio-de-almac\u00e9n-de-certificados) 8.3.1 Forzar ruta del almac\u00e9n de Mozilla Firefox [49](#forzar-ruta-del-almac\u00e9n-de-mozilla-firefox) 8.4 Selecci\u00f3n y filtrado de certificados [50](#selecci\u00f3n-y-filtrado-de-certificados) 8.4.1 Selecci\u00f3n de los certificados para operaciones criptogr\u00e1ficas [50](#selecci\u00f3n-de-los-certificados-para-operaciones-criptogr\u00e1ficas) 8.4.2 Filtros de certificados [52](#filtros-de-certificados) 8.5 Configuraci\u00f3n de firma [55](#configuraci\u00f3n-de-firma) 8.5.1 Algoritmos de firma digital [55](#algoritmos-de-firma-digital) 8.5.2 Formato de firma electr\u00f3nica [56](#formato-de-firma-electr\u00f3nica) 8.5.3 Modos de firma electr\u00f3nica [56](#modos-de-firma-electr\u00f3nica) 8.5.4 Pol\u00edtica de Firma [57](#pol\u00edtica-de-firma) 8.6 Configuraci\u00f3n de sobres digitales [58](#configuraci\u00f3n-de-sobres-digitales) 8.6.1 Selecci\u00f3n de destinatarios desde LDAP [58](#selecci\u00f3n-de-destinatarios-desde-ldap) 8.7 Configuraci\u00f3n de cifrado [59](#configuraci\u00f3n-de-cifrado) 8.7.1 Algoritmos de cifrado [59](#algoritmos-de-cifrado) 8.7.2 Modo de clave [59](#modo-de-clave) 8.7.3 Clave y contrase\u00f1a de cifrado [59](#clave-y-contrase\u00f1a-de-cifrado) 8.7.4 Almac\u00e9n de claves de cifrado [60](#almac\u00e9n-de-claves-de-cifrado) 9 Otras funcionalidades [62](#otras-funcionalidades) 9.1 Guardar la firma en un fichero [62](#guardar-la-firma-en-un-fichero) 9.2 Obtener el certificado usado para firmar [62](#obtener-el-certificado-usado-para-firmar) 9.3 Leer el contenido de un fichero de texto [62](#leer-el-contenido-de-un-fichero-de-texto) 9.4 Leer el contenido de un fichero en Base64 [62](#leer-el-contenido-de-un-fichero-en-base64) 9.5 Convertir un texto plano a Base64 [63](#convertir-un-texto-plano-a-base64) 9.6 Obtener el hash de un fichero [63](#obtener-el-hash-de-un-fichero) 9.7 Obtener la ruta de un fichero [63](#obtener-la-ruta-de-un-fichero) 9.8 Obtener la ruta de un directorio [64](#obtener-la-ruta-de-un-directorio) 10 Ejemplos de uso [65](#ejemplos-de-uso) 11 Buenas pr\u00e1cticas en la integraci\u00f3n del cliente [66](#buenas-pr\u00e1cticas-en-la-integraci\u00f3n-del-cliente) 11.1 Localizar la ruta del Applet Cliente @firma [66](#localizar-la-ruta-del-applet-cliente-firma) 11.2 Reducir las opciones de configuraci\u00f3n [66](#reducir-las-opciones-de-configuraci\u00f3n) 11.3 Configuraci\u00f3n y uso del cliente en operaciones \u00fanicas [67](#configuraci\u00f3n-y-uso-del-cliente-en-operaciones-\u00fanicas) 12 Funciones y m\u00e9todos en la interfaz Applet del cliente @firma v3.x a\u00f1adidos respecto a versiones anteriores [68](#funciones-y-m\u00e9todos-en-la-interfaz-applet-del-cliente-firma-v3.x-a\u00f1adidos-respecto-a-versiones-anteriores) 13 Casos problem\u00e1ticos de despliegue e integraci\u00f3n del cliente [72](#casos-problem\u00e1ticos-de-despliegue-e-integraci\u00f3n-del-cliente) 13.1 Despliegue del cliente en servidores Web que requieren identificaci\u00f3n de los usuarios mediante certificado cliente [72](#despliegue-del-cliente-en-servidores-web-que-requieren-identificaci\u00f3n-de-los-usuarios-mediante-certificado-cliente) 13.1.1 Applets de Java y Autenticaci\u00f3n con Certificado Cliente [72](#applets-de-java-y-autenticaci\u00f3n-con-certificado-cliente) 13.1.2 Alternativa de despliegue [76](#alternativa-de-despliegue) 13.2 Problema con el objeto HTML File en los nuevos navegadores [76](#problema-con-el-objeto-html-file-en-los-nuevos-navegadores) 13.3 Procedimiento de carga para ficheros mayores de 4MB [77](#procedimiento-de-carga-para-ficheros-mayores-de-4mb) 13.4 Mensajes de confirmaci\u00f3n durante el proceso de firma masiva [78](#mensajes-de-confirmaci\u00f3n-durante-el-proceso-de-firma-masiva) 14 Siglas [79](#_Toc400985792) 15 Documentos de Referencia [80](#documentos-de-referencia) Anexo A. Formatos de firma binaria gen\u00e9rica soportados por el cliente [81](#anexo-a.-formatos-de-firma-binaria-gen\u00e9rica-soportados-por-el-cliente) Anexo B. Configuraci\u00f3n espec\u00edfica para el formato CAdES [93](#anexo-b.-configuraci\u00f3n-espec\u00edfica-para-el-formato-cades) Creative Commons [94](#creative-commons) Introducci\u00f3n El Cliente de Firma es una herramienta de Firma Electr\u00f3nica que funciona en forma de Applet de Java integrado en una p\u00e1gina Web mediante JavaScript. El Cliente hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados ( KeyStore ) del navegador web ( Internet Explorer, Mozilla, Firefox ) o el sistema operativo as\u00ed como de los que est\u00e9n en dispositivos (tarjetas inteligentes , dispositivos USB ) configurados en el mismo (el caso de los DNI-e). El Cliente de Firma, como su nombre indica, es una aplicaci\u00f3n que se ejecuta en cliente (en el ordenador del usuario, no en el servidor Web). Esto es as\u00ed para evitar que la clave privada asociada a un certificado tenga que \u201csalir\u201d del contenedor del usuario (tarjeta, dispositivo USB o navegador) ubicado en su PC. De hecho, nunca llega a salir del navegador, el Cliente le env\u00eda los datos a firmar y \u00e9ste los devuelve firmados. El Cliente de Firma contiene las interfaces y componentes web necesarios para la realizaci\u00f3n de los siguientes procesos (adem\u00e1s de otros auxiliares como c\u00e1lculos de hash, lectura de ficheros, etc\u2026): Firma de datos y ficheros. Multifirma masiva de datos y ficheros. Co-firma (CoSignature) Multifirma al mismo nivel. Contrafirma (CounterSignature) Multifirma en cascada. Cifrado de datos. Generaci\u00f3n de sobres electr\u00f3nicos. El componente Applet Cliente @firma hace uso de Google Analitics con el objetivo de conocer estad\u00edsticas de las funciones que se utilizan del Cliente y los entornos en los que principalmente se ejecutan y en los que deben centrarse las labores de mantenimiento. No almacena ning\u00fan tipo de informaci\u00f3n personal del usuario, ni hace uso de cookies. Objeto y alcance El presente documento recoge la descripci\u00f3n del cliente @firma y todas sus funcionalidades, as\u00ed como la informaci\u00f3n necesaria para permitir a los integradores del cliente incorporarlo como parte de sus aplicaciones Web para la realizaci\u00f3n de operaciones criptogr\u00e1ficas. Los aspectos detallados que se tratan del Cliente de Firma son los siguientes: Requisitos del Cliente Sistemas operativos soportados Navegadores soportados Otros requisitos Componentes del Cliente Funcionalidad b\u00e1sica del Cliente: Firma Firma masiva de hashes Multifirma masiva de ficheros Multifirma masiva program\u00e1tica Co-firma Contrafirma Cifrado y descifrado de datos Generaci\u00f3n de sobres digitales. Apertura de sobres. Configuraci\u00f3n del cliente: Algoritmos y formatos Selecci\u00f3n de certificados Otras funcionalidades Ejemplos que abarquen los aspectos anteriormente descritos. Requisitos m\u00ednimos Sistema Operativo Windows XP SP3 / Vista SP2 / 7 SP1 / Server 2003 SP2 / Server 2008 SP2 / 8 / 8.1 y superiores El Applet Cliente @firma no es compatible con Windows 8 RT. Linux 2.6 (Guadalinex y Ubuntu) y superiores. Apple OS X 10.9.4 (OS X Mavericks) y superiores, 10.10 (OS X Yosemite) y superiores. Navegador web: Firefox 3.0 y superiores. Internet Explorer 7 o superior, en 32 (x86) y 64 bits (x64). Las versiones de 64 bits necesitan un JRE de 64 bits. No se soporta Windows en IA64. Google Chrome 4 o superior (no soportado en OS X). Es necesario una versi\u00f3n de Chrome que soporte Applets de Java. Apple Safari 7.0.6 o superior (\u00fanicamente soportado en OS X) JRE: JRE 6 de 32 bits (\u00faltima update disponible) instalado y habilitado en el navegador. Se recomienda el uso de la \u00faltima versi\u00f3n disponible de Java 7. JRE 7 de 32 bits o 64 bits instalado y habilitado en el navegador. \u00daltima versi\u00f3n disponible recomendada. Se desaconseja el uso de las updates 5 y 65 de Java 7 debido a que estas pueden causar problemas en la carga del applet Cliente. JRE 8u20 de 32 bits o 64 bits instalado y habilitado en el navegador. \u00daltima versi\u00f3n disponible recomendada. Certificado digital de usuario instalado en el navegador / sistema operativo o disponible a trav\u00e9s de un m\u00f3dulo PKCS#11 o CSP instalado en el navegador (caso del DNI-e). El Cliente siempre acceder\u00e1 al almac\u00e9n de certificados del sistema operativo en el que se ejecute, salvo cuando se ejecute sobre Mozilla Firefox, en cuyo caso acceder\u00e1 al almac\u00e9n de este navegador. \u00bfQu\u00e9 versi\u00f3n de mi navegador Web debo usar con mi sistema operativo? A continuaci\u00f3n se muestra la tabla de compatibilidad de versi\u00f3n de navegador Web seg\u00fan producto y sistema operativo. Es importante recalcar que algunas de las celdas reflejan configuraciones no certificadas por Oracle como compatibles con JSE. Esto quiere decir que, si bien se han hecho las pruebas pertinentes por parte del Cliente @firma para asegurar su correcto funcionamiento, pueden existir problemas no detectados de compatibilidad de JSE con esa versi\u00f3n de navegador en ese sistema operativo, por lo que no se dar\u00e1 soporte a esa combinaci\u00f3n mientras Oracle no la certifique. Internet Explorer Google Chrome Mozilla Firefox Apple Safari Opera Windows XP SP3 7 o superior 4 o superior 3.6 o superior No soportado No soportado Windows Vista SP2 8 o superior 4 o superior 3.6 o superior No soportado No soportado Windows 7 SP1 8 o superior 4 o superior 3.6 o superior No soportado No soportado Mac OS X Mavericks / Yosemite N/A No soportado Versiones de la 3.6 a la 20 5 o superior No soportado Linux N/A No soportado 3.6 o superior N/A No soportado Internet Explorer 10 y 11 en Windows 8 El Applet Cliente @firma no es compatible con Internet Explorer en su versi\u00f3n Metro, y debe ser ejecutado con la versi\u00f3n de escritorio de Internet Explorer. Para automatizar en cierta manera el cambio de Internet Explorer desde Metro hasta el escritorio cl\u00e1sico de Windows 8 se debe incluir la siguiente meta-informaci\u00f3n en la cabecera de la p\u00e1gina HTML: <meta http-equiv=\"X-UA-Compatible\" content=\"requiresActiveX=true\"/> Puede encontrar m\u00e1s informaci\u00f3n sobre complementos de navegador ( plugins ) en Internet Explorer sobre Metro en Windows 8 en: http://msdn.microsoft.com/en-us/library/ie/hh968248%28v=vs.85%29.aspx \u00bfQu\u00e9 versi\u00f3n de Java debo usar en Linux? Existen m\u00faltiples versiones de Linux, cada una de las cuales, introduce cambios que pueden afectar al funcionamiento del Cliente @firma. Seg\u00fan la distribuci\u00f3n y versi\u00f3n utilizada de Linux puede funcionar adecuadamente una u otra versi\u00f3n de Java. Se recomienda, por su mayor soporte, que en Linux se utilice siempre la JRE 6 de Oracle. \u00bfQu\u00e9 versi\u00f3n de Java debo usar con el navegador Web Mozilla Firefox? A continuaci\u00f3n se nuestra la tabla de compatibilidad de versiones de Java (distinguiendo entre Java 1.6 y 1.7) seg\u00fan versi\u00f3n de Mozilla Firefox (con independencia del sistema operativo y la arquitectura). En ciertas celdas se indica que la combinaci\u00f3n no est\u00e1 certificada por Oracle, lo cual significa que, aunque se han hecho las pertinentes pruebas de correcto funcionamiento con el Cliente @firma, no se da soporte a esa combinaci\u00f3n. Java 6 Java 7 Firefox 3.6 6u18 o superior 7u07 o superior Firefox 4 6u25 o superior 7u07 o superior Firefox 5 6u27 o superior 7u07 o superior Firefox 7 y superiores NO CERTIFICADO 7u07 o superior \u00bfQu\u00e9 versi\u00f3n de Java debo usar con el navegador Microsoft Internet Explorer? A continuaci\u00f3n se nuestra la tabla de compatibilidad de versiones de Java (distinguiendo entre Java 1.6 y 1.7) seg\u00fan versi\u00f3n de Internet Explorer (con independencia de la versi\u00f3n y arquitectura de Windows). En ciertas celdas se indica que la combinaci\u00f3n no est\u00e1 certificada por Oracle, lo cual significa que, aunque se han hecho las pertinentes pruebas de correcto funcionamiento con el Cliente @firma, no se da soporte a esa combinaci\u00f3n. Java 6 Java 7 Internet Explorer 7 6u13 o superior 7u07 o superior Internet Explorer 8 6u13 o superior 7u07 o superior Internet Explorer 9 y superiores 6u25 o superior 7u07 o superior Internet Explorer 9 (64 bits) y superiores -- 7u07 (64 bits) o superior \u00bfQu\u00e9 versi\u00f3n de Java debo usar con el navegador Google Chrome? A continuaci\u00f3n se nuestra la tabla de compatibilidad de versiones de Java (distinguiendo entre Java 1.6 y 1.7) seg\u00fan versi\u00f3n de Google Chrome (con independencia del sistema operativo y la arquitectura). En ciertas celdas se indica que la combinaci\u00f3n no est\u00e1 certificada por Oracle, lo cual significa que, aunque se han hecho las pertinentes pruebas de correcto funcionamiento con el Cliente @firma, no se da soporte a esa combinaci\u00f3n. Recuerde que el Cliente @firma no soporta Google Chrome en Mac OS X. Java 6 Java 7 Google Chrome 4 6u21 o superior 7u07 o superior Google Chrome 10 6u25 o superior 7u07 o superior Google Chrome 11 y superiores NO CERTIFICADO 7u07 o superior \u00bfQu\u00e9 versi\u00f3n de Java debo usar con el navegador Apple Safari? A continuaci\u00f3n se nuestra la tabla de compatibilidad de versiones de Java (distinguiendo entre Java 1.6 y 1.7) y la versi\u00f3n seg\u00fan versi\u00f3n de Google Chrome (con independencia del sistema operativo y la arquitectura). En ciertas celdas se indica que la combinaci\u00f3n no est\u00e1 certificada por Oracle, lo cual significa que, aunque se han hecho las pertinentes pruebas de correcto funcionamiento con el Cliente @firma, no se da soporte a esa combinaci\u00f3n. Java 6 Java 7 Apple Safari (Mac OS X) NO CERTIFICADO 7u10 o superior Apple Safari (Windows XP) NO COMPATIBLE NO CERTIFICADO Apple Safari (Windows 7) NO CERTIFICADO NO CERTIFICADO Para el uso del navegador Apple Safari en cualquier sistema operativo se recomienda tener instalada la \u00faltima versi\u00f3n disponible de Java 7. La compatibilidad del Cliente @firma sobre Apple Safari en Windows est\u00e1 limitada por la compatibilidad del navegador con el plugin de Java, por lo que se recomienda el uso de otro navegador en Windows. \u00bfQu\u00e9 versi\u00f3n de Java debo usar con la variante de 64 bits de mi Navegador Web? A continuaci\u00f3n se nuestra la tabla de compatibilidad de versiones de Java en 64 bits seg\u00fan combinaci\u00f3n de versi\u00f3n de 64 bits de sistema operativo y versi\u00f3n de 64 bits de navegador Web. Es importante recalcar que este es un caso excepcional, ya que, incluso si el sistema operativo es de 64 bits, es posible (y de hecho lo normal), usar un navegador Web de 32 bits con java de 32 bits, con lo que no aplicar\u00eda esta matriz. Solo se da soporte a arquitecturas de 64 bits basadas en x64 (tambi\u00e9n llamada \u201cIntel 64\u201d, \u201cx86-64\u201d, \u201cAMD 64\u201d o \u201cEM64T\u201d). En ciertas celdas se indica que la combinaci\u00f3n no est\u00e1 certificada por Oracle, lo cual significa que, aunque se han hecho las pertinentes pruebas de correcto funcionamiento con el Cliente @firma, no se da soporte a esa combinaci\u00f3n. Internet Explorer 64 Google Chrome 64 Mozilla Firefox 64 Apple Safari 64 Opera 64 Windows 64-bit (x64) 7u07 y superior N/A N/A N/A N/A Mac OS X 64-bit N/A N/A N/A 8u20 y superior N/A Linux 64-bit (x64) N/A N/A N/A N/A NO CERTIFICADO Internet Explorer 64 s\u00f3lo puede utilizarse con seguridad en Java 7 de 64bits ya que las versiones de Java 6 64 bits no incluyen las bibliotecas necesarias para el acceso de los almacenes de Windows y Mozilla y los permisos del sistema del usuario pueden bloquear su instalaci\u00f3n. Las celdas marcadas con \u201cN/A\u201d indican que no est\u00e1 disponible una versi\u00f3n final de navegador Web para arquitecturas x64. No se da soporte a ning\u00fan tipo de versi\u00f3n preliminar (\u201calpha\u201d, \u201cbeta\u201d, \u201crelease candidate\u201d, \u201cnightly build\u201d, etc.). \u00bfQu\u00e9 versi\u00f3n de Java debo usar con Mac OS X? Apple Java 6 Oracle Java 7 Oracle Java 8 10.9 (Mavericks) NO CERTIFICADO JRE 7u67 o superior JRE 8u20 o superior 10.10 (Yosemite) NO CERTIFICADO JRE 7u67 o superior JRE 8u20 o superior Aunque Java est\u00e9 correctamente instalado, puede ser necesaria la activaci\u00f3n del soporte espec\u00edfico de Applets de Java y aplicaciones Java WebStart. La forma de realizar esta activaci\u00f3n depende de su versi\u00f3n de Java y OS X, si bien habitualmente puede realizarse desde \u201cPreferencias de Java\u201d, en el men\u00fa \u201cUtilidades\u201d de Mac OS X: < Applets de Java en versiones posteriores a la actualizaci\u00f3n 2012-006 de Apple La actualizaci\u00f3n 2012-006 de Apple Java para OS X deshabilita por completo la ejecuci\u00f3n de Applets de Java y aplicaciones Java WebStart en navegadores Web (con el JRE de Apple), introduciendo una incompatibilidad total con el Cliente @firma. Puede solventar este inconveniente de dos formas alternativas: Volviendo a habilitar manualmente el soporte de Applets de Java y aplicaciones Java WebStart siguiendo las instrucciones descritas en la siguiente p\u00e1gina Web: http://support.apple.com/kb/HT5559 Instalando Oracle JRE 7 para Mac OS X Es importante tener en cuenta que Oracle JRE 7 es incompatible con las versiones de 32 bits del navegador Web Google Chrome (las \u00fanicas actualmente disponibles). Applets de Java en versiones posteriores a la actualizaci\u00f3n 2012-003 de Apple Por defecto, tras instalar la actualizaci\u00f3n de Java 2012-003 de Apple, Mac OS X no permite la ejecuci\u00f3n de Applets o aplicaciones Java Web Start, lo cual provoca que el Applet Cliente @firma no funcione. Para habilitar los Applets de Java y las aplicaciones Web Start en Mac OS X es necesario indicarlo desde el panel de \u201cPreferencias de Java\u201d dentro de las Preferencias generales de Mac OS X y marcar la casilla \u201cActivar m\u00f3dulo de Applet y aplicaciones Web Start\u201d. < Como medida de seguridad, si el usuario no ejecuta Applets de Java por un periodo de tiempo prolongado, Mac OS X deshabilita autom\u00e1ticamente la ejecuci\u00f3n de Applets y aplicaciones Java Web Start, por lo que ser\u00e1 necesario comprobar que esta ejecuci\u00f3n est\u00e1 permitida antes de iniciar el Applet Cliente @firma, independientemente de si esta ejecuci\u00f3n ya fue habilitada anteriormente. Applets de Java en Mac OS X Mountain Lion (10.8.x) Mac OS X Mountain Lion introduce, como medida de seguridad una restricci\u00f3n a la ejecuci\u00f3n de aplicaciones descargadas a trav\u00e9s de Internet, como son los Applets de Java. Por defecto, Mac OS X no permite esta ejecuci\u00f3n a menos las aplicaciones se hayan descargado a trav\u00e9s de la Apple Mac App Store (o eventualmente que el desarrollador que firma la aplicaci\u00f3n est\u00e9 autorizado por la propia Apple). Para permitir la ejecuci\u00f3n del Applet @firma descargado desde una p\u00e1gina Web normal, es necesario indicarlo mediante la opci\u00f3n de Seguridad y Privacidad (dentro de Preferencias) de Mac OS X marcando la opci\u00f3n \u201cPermitir aplicaciones descargadas de: Cualquier sitio\u201d. < Informaci\u00f3n adicional http://www.oracle.com/technetwork/java/javase/config-417990.html http://www.oracle.com/technetwork/java/javase/system-configurations-135212.html http://www.oracle.com/technetwork/java/javase/6u10-142936.html http://www.oracle.com/technetwork/java/javase/6u12-137788.html http://www.oracle.com/technetwork/java/javase/6u18-142093.html http://www.oracle.com/technetwork/java/javase/6u21-156341.html http://www.oracle.com/technetwork/java/javase/6u25releasenotes-356444.html http://www.oracle.com/technetwork/java/javase/6u29-relnotes-507960.html http://www.oracle.com/technetwork/java/javase/certconfig-2095354.html Componentes del Cliente El cliente se compone de: Applet cliente. Este es n\u00facleo de la aplicaci\u00f3n. Se encuentran en forma de fichero .jar . Bibliotecas JavaScript : Contienen funciones para la automatizaci\u00f3n de los procesos de firma. Son opcionales y se puede operar sin ellas, pero facilitan los procesos m\u00e1s comunes. El conjunto principal de bibliotecas JavaScript no est\u00e1n dise\u00f1adas para ser modificadas directamente por el integrador excepto en caso de necesidades muy espec\u00edficas. No obstante, existe una biblioteca JavaScript llamada constantes.js que s\u00ed contiene par\u00e1metros modificables que permiten una mayor personalizaci\u00f3n del comportamiento del cliente. Despliegue del Cliente Ficheros para el despliegue del Cliente El listado completo de archivos que cubren todas las construcciones soportadas por el cliente son: applet_afirma_3_4.jar N\u00facleo del Cliente @firma. Este fichero se distribuye firmado y configurado a trav\u00e9s del MANIFEST.MF que contiene para ser ejecutado desde cualquier origen. Sin embargo, por seguridad y para evitar que aparezcan ventanas innecesarias de advertencia al usuario, el integrador deber\u00eda eliminar esta firma, configurarlo para la ejecuci\u00f3n expresamente en los dominios en los que se vaya a desplega y firmarlo con un certificado de firma de c\u00f3digo reconocido por Oracle Java. constantes.js Fichero de variables JavaScript para la instalaci\u00f3n y carga del Cliente @firma. Puede ser modificado por el integrador. common-js\\.js Ficheros JavaScript del Cliente @firma. No deben ser modificador por el integrador. No debe eliminarse ninguno de estos ficheros de la carpeta del servidor Web. \u00danicamente el fichero constantes.js puede ser modificado por el integrador para personalizar el despliegue. Despliegue del Cliente Para el despliegue del cliente en un entorno Web, por defecto, deben situarse todos los ficheros proporcionados, respetando la estructura de directorios, en la misma carpeta que la p\u00e1gina Web desde la que se realizar\u00e1 su carga. En ciertas ocasiones, puede convenir que los archivos del Cliente residan en una ruta distinta al de la p\u00e1gina web que lo despliega. Para estos casos, deben situarse los archivos donde se deseen y configurar la ruta mediante la constante JavaScript \u201cbase\u201d del fichero constantes.js . La ruta establecida mediante la constante \u201cbase\u201d podr\u00e1 ser absoluta o relativa. Siempre usar\u00e1 la barra separadora \u201c/\u201d (nunca \u201c\\) y no terminar\u00e1 con este car\u00e1cter. Rutas de ejemplo: Absolutas: \u201cfile:///C:/ficheros\u201d,\u201dhttp://www.minhap.es/ficheros\u201d, \u201chttps://ficheros\u201d\u2026 Relativas: \u201cficheros\u201d, \u201cafirma/ficheros\u201d, \u201c/ficheros\u201d\u2026 En caso de que el Cliente se cargue desde una Web creada al vuelo (no existe como un fichero en el servidor) ser\u00e1 obligatorio establecer la variable \u201cbase\u201d para indicar d\u00f3nde se encuentran los distintos componentes del Cliente. Despliegue en entornos de Web din\u00e1mica, servidores de aplicaciones y en general servidores no est\u00e1ticos El Applet Cliente @firma necesita que todos sus recursos (JAR de Java, ficheros JavaScript y p\u00e1gina HTML de despliegue) se encuentren en el mismo directorio (misma ruta Web). Cuando se despliega este en servidores Web no est\u00e1ticos (como un servidor de Portlets, un servidor de p\u00e1ginas activas de Microsoft, etc.), es responsabilidad del integrador hacer que los recursos puedan ser referenciados tal y como si estuviesen en un servidor est\u00e1tico o bien modificar tanto HTML como JavaScript para introducir referencias absolutas donde pudiese ser necesario. Como norma general, no se proporciona soporte t\u00e9cnico para problemas de despliegue en entornos Web con servidores no est\u00e1ticos, como pueden ser: Servidores de aplicaciones usando p\u00e1ginas din\u00e1micas (JSP, JSF, ASP, etc.). Mapeos virtuales de los directorios que puedan afectar a los recursos del Applet Cliemte @firma. Servidores de Portlets. Etc. Uso del Cliente de Firma como Applet de Java Carga del Cliente Para la carga del Cliente desde una p\u00e1gina Web ser\u00e1 necesario importar en esta, al menos, las bibliotecas \u201c constantes.js \u201d y \u201c instalador.js \u201d que acompa\u00f1an al Cliente. Para importarlas, se puede utilizar su ruta relativa desde la p\u00e1gina Web que las carga o la ruta absoluta de los ficheros. El proceso de carga se inicia al invocar la funci\u00f3n JavaScript \u201c cargarAppletFirma() \u201d incluida en el fichero \u201c instalador.js \u201d. El cliente de firma queda cargado en memoria y puede accederse a las funcionalidades que implementa por medio de la variable JavaScript \u201cclienteFirma\u201d, localizada en el fichero \u201c constantes.js \u201d. La carga del cliente en una p\u00e1gina puede realizarse con s\u00f3lo introducir una sentencia JavaScript en el propio cuerpo de la p\u00e1gina que se encargue de invocar al m\u00e9todo de carga. Por ejemplo: <html> <head> <script type=\"text/javascript\" language=\"javascript\" src=\"constantes.js\"></script> <script type=\"text/javascript\" language=\"javascript\" src=\"common-js/instalador.js\"></script> [\u2026] </head> <body> <script type=\"text/javascript\"> cargarAppletFirma(); </script> [\u2026] </body> </html> Tratamiento de errores Es posible tratar todos los errores que se hayan producido durante la operaci\u00f3n del cliente mediante JavaScript. El cliente siempre almacena si la \u00faltima operaci\u00f3n criptogr\u00e1fica que realiz\u00f3 finaliz\u00f3 correctamente o no. Es posible consultar este resultado mediante el m\u00e9todo del cliente isError() . En caso de producirse un error adem\u00e1s, se podr\u00e1 obtener la descripci\u00f3n del mismo mediante el m\u00e9todo getErrorMessage() . De esta forma pueden elaborarse mecanismos JavaScript capaces de detectar y mostrar los errores pertinentes al usuario. Un ejemplo que ilustra este sistema de tratamiento de errores es: v ar fichero= document.getElementById( \"fichero\"); clienteFirma.initialize(); clienteFirma.setFileuri(fichero.value); firmar(); if(!clienteFirma.isError()) { var firmaB64 = document.getElementById(\"firmaB64\"); firmaB64.value = clienteFirma.getSignatureBase64Encoded(); return true; // Enviar } else { alert(\"No se ha podido firmar: \" + clienteFirma.getErrorMessage()); return false; } Tambi\u00e9n es posible dejar la tarea de notificaci\u00f3n de los errores directamente al cliente. En caso de hacerlo, el cliente mostrar\u00e1 un mensaje de error mediante un dialogo Java por cada error de operaci\u00f3n detectado, salvo en multifirmas masivas en donde estas notificaciones har\u00edan inviable un uso eficiente del cliente. En cambio, en las operaciones de multifirma masiva se generan trazas de log. Para activar este mecanismo de notificaci\u00f3n de errores es necesario configurar a true la constante showErrors del fichero JavaScript \u201c constantes.js \u201d y establecerla antes de cada operaci\u00f3n mediante la funci\u00f3n initialize() de \u201c firma.js \u201d. Por defecto, esta opci\u00f3n est\u00e1 configurada a false . Firma electr\u00f3nica El proceso de firma electr\u00f3nica permite, por defecto, la firma de cualquier tipo de datos, independientemente de su formato. En concreto, los datos de entrada pueden ser. Se permiten diferentes tipos de datos a firmar (solo se puede firmar un tipo cada vez): un fichero : se establece qu\u00e9 fichero firmar mediante el m\u00e9todo setFileuri , que recibe como par\u00e1metro de entrada una cadena con la ruta al fichero a firmar. Este m\u00e9todo no comprueba en ning\u00fan momento la existencia de un fichero en la ruta indicada. Si el fichero no existiese se producir\u00eda un error durante la operaci\u00f3n en cuesti\u00f3n. datos : se establecen mediante el m\u00e9todo setData , que recibe una cadena con los datos codificados en base 64. un hash : se establece mediante el m\u00e9todo setHash , que recibe una cadena con el hash codificado en base 64. Si no se invoca ninguno de estos m\u00e9todos, el Cliente solicitar\u00e1 al usuario un fichero para firmar En las firmas XML (XAdES y XMLsSig), en el caso de que los datos insertados est\u00e9n en base 64 (ya sea mediante el setFileuri y un fichero de texto que contenga el base 64 de los datos o a trav\u00e9s del setData y una cadena doblemente codificada en base 64), no se realizar\u00e1 la codificaci\u00f3n interna en base 64 que requiere la firma XML para ficheros binarios. As\u00ed obtenemos que se firma la codificaci\u00f3n base 64 de los datos y no una doble codificaci\u00f3n en base 64 de estos. Este mismo comportamiento lo podemos obtener mediante el m\u00e9todo setFileuriBase64 que establece como datos de entrada para las firmas electr\u00f3nicas el contenido descodificado de un fichero en base 64. Mientras que indicar con setFileuri un fichero con datos codificados en base 64 s\u00f3lo aplica a las firmas XAdES y XMLdSig, el m\u00e9todo setFileuriBase64 funciona con todos los formatos de firma. Esto permite indicar los datos a firmar a trav\u00e9s de un fichero que los contiene en base 64. Previamente a la realizaci\u00f3n de la firma, es aconsejable la inicializaci\u00f3n del cliente y su configuraci\u00f3n con los par\u00e1metros preestablecidos. Esto podemos realizarlo con las funciones JavaScript initialize() y configuraFirmar() , que configura los siguientes par\u00e1metros seg\u00fan las variables indicadas del fichero constantes.js\u201d : Algoritmo de firma : Determinado por la variable signatureAlgorithm . Por defecto, SHA1withRSA. Formato de firma : Determinado por la variable signatureFormat . Por defecto, CMS. Filtro de certificados : Determinado por la variable certFilter . Por defecto, ninguno. El m\u00e9todo del applet que se ha de invocar para firmar es sign() , aunque tambi\u00e9n se puede llamar a la funci\u00f3n JavaScript firmar() (en firma.js ) que, como en los casos anteriores, espera si es necesario a que el cliente est\u00e9 cargado y actualiza el entorno operativo si es necesario. Por ejemplo: <script type=\"text/javascript\" language=\"javascript\"> function enviar() { var fichero= document.getElementById(\"fichero\"); initialize(); configurarFirma(); clienteFirma.setFileuri(fichero.value); firmar(); if(!clienteFirma.isError()) { var firmaB64 = document.getElementById(\"firmaB64\"); firmaB64.value = clienteFirma.getSignatureBase64Encoded(); return true; // Enviar } else { alert(\"No se ha podido firmar: \"+clienteFirma.getErrorMessage()); return false; } } </script> [\u2026] <form id=\"formulario\" action=\"/enviarFirma\"> <input type=\"hidden\" id=\"firmaB64\"> <br> Fichero a firmar: <input type=\"file\" id=\"fichero\"> <input type=\"submit\" onclick=\"return enviar();\"> </form> Pueden ejecutarse operaciones de firma, as\u00ed como de cofirma y contrafirma desde el HTML de prueba demoMultifirma.html . < Figura 1: HTML de prueba demoMultifirma.html Cofirma ( co-sign ) La cofirma permite a varios usuarios firmar un mismo documento. Una cofirma siempre firma los datos que se le indican, nunca se aplica ni depende de otra de las firmas del documento. El caso de la cofirma es igual al de la firma simple, pero adem\u00e1s de los datos hay que pasar al Cliente la firma electr\u00f3nica de los dem\u00e1s firmantes. Esto se puede hacer de diferentes maneras: Mediante un fichero que contenga la firma electr\u00f3nica, con el m\u00e9todo setElectronicSignatureFile() , que recibe como par\u00e1metro una cadena con la ruta al fichero. Introduciendo directamente la firma, con el m\u00e9todo setElectronicSignature() que recibe como par\u00e1metro una cadena con la firma en base 64. Si no se especifica, se pedir\u00e1 al usuario que seleccione el fichero de firma. Una vez especificados los par\u00e1metros necesarios, se invoca al m\u00e9todo coSign() . La salida es an\u00e1loga a la de la operaci\u00f3n de firma. Pueden ejecutarse operaciones de cofirma, as\u00ed como de firma y contrafirma desde el HTML de prueba \u201c demoMultifirma.html \u201d. Contrafirma ( counter-sign ) La contrafirma permite a un usuario firmar las firmas de otros usuarios. El caso de la contrafirma es similar a los anteriores, pero s\u00f3lo es necesario indicar la firma que deseamos contrafirma (no son necesarios los datos) y, seg\u00fan la operaci\u00f3n concreta, puede ser necesario conocer la estructura de firmantes que contiene. Para conocer la estructura de firmantes de una firma el Cliente dispone del m\u00e9todo getSignersStructure() . Este m\u00e9todo devuelve una cadena que contiene los nombres de los firmantes separados por un retorno de carro (\u201c \\n \u201d en JavaScript). Al comienzo del nombre hay tantos tabulados (\u201c \\t \u201d) como nivel ocupe el firmante en el documento. Por ejemplo, si A y B co-firman un documento y C contra-firma la firma de A, entonces la cadena devuelta ser\u00eda \u201c A\\n\\tC\\nB \u201d. La firma que deseamos contrafirmar se especifica mediante el m\u00e9todo setElectronicSignature() o setElectronicSignatureFile() , que reciben la firma en base 64 y la ruta del fichero de firma, respectivamente. En el fichero demoMultifirma.html se puede ver un ejemplo de c\u00f3mo tratar esta cadena. Se puede especificar qu\u00e9 firmas se desean firmar de diferentes maneras: Todas las firmas hojas (firmas no contra-firmadas): invocando el m\u00e9todo counterSignLeafs() . Todas las firmas: invocando el m\u00e9todo counterSignTree(). Todas las firmas de un firmante: configurando los firmantes con el m\u00e9todo setSignersToCounterSign() que recibe como par\u00e1metro una cadena con los nombres de los firmantes separados por \u201c \\n \u201d e invocando el m\u00e9todo counterSignSigners(). Firmas concretas: con el m\u00e9todo setSignersToCounterSign() indicamos que firmas deseamos contrafirmar a partir de su posici\u00f3n (partiendo de 0) seg\u00fan el orden de aparici\u00f3n en la estructura devuelta por getSignersStructure (). Las posiciones se indican con n\u00fameros separados por \u201c \\n \u201d. Por ejemplo, \u201c 0\\n3\\n4 \u201d indica que se contrafirmen las firmas de las posiciones 0, 3 y 4. Se invoca con el m\u00e9todo counterSignSigners(). La salida es an\u00e1loga a la de la firma digital. T\u00e9ngase en cuenta que las contrafirmas siempre aplican a una firma y se colocan bajo esta en el \u00e1rbol de firmas, al contrario que las cofirmas, que siempre se colocan como un nodo dependiente de los datos. Pueden ejecutarse operaciones de contrafirma, as\u00ed como de firma y cofirma desde el HTML de prueba \u201c demoMultifirma.html \u201d. NOTA IMPORTANTE: Dado que las contrafirmas se aplican sobre las firmas previas y no sobre los propios datos, no es posible (no es conceptualmente correcto) realizar contrafirmas multi-fase, es decir, las huellas digitales se calculan al vuelo siempre (no se admiten huellas digitales pre-generadas externamente), ya que estas se generan en base a las firmas, no a los datos. Firma y Multifirma Masiva Consideraciones previas Un aspecto importante que debe tenerse en cuenta en todas las operaciones de firma y multifirma masiva es que los procesos no son interactivos a nivel de operaci\u00f3n individual, es decir, que no se requiere intervenci\u00f3n del usuario y este no recibe informaci\u00f3n ni notificaciones hasta que finaliza el proceso completo, tanto si han ocurrido errores durante su desarrollo como si transcurri\u00f3 sin incidencias. Este modo de operar permite que, por ejemplo al iniciar un proceso de 2.000 firmas, el usuario pueda despreocuparse hasta su finalizaci\u00f3n, y que este no se detendr\u00e1 en una firma aunque ocurriese un error (sea cual sea este). Siguiendo el ejemplo, si el usuario iniciase la firma de los 2.000 ficheros y desatendiese el proceso pensando que este tardar\u00e1 una o dos horas, el proceso no se habr\u00e1 detenido porque el fichero n\u00famero 3 estuviese corrupto, sino que se firmar\u00edan los 1.999 restantes y en el informe final de operaci\u00f3n se marcar\u00e1n las incidencias ocurridas. Una excepci\u00f3n a esta regla es el uso de dispositivos de firma que requieren la introducci\u00f3n de un PIN / contrase\u00f1a o una confirmaci\u00f3n para cada una de las operaciones de firma (como el DNIe). Aunque los mensajes y di\u00e1logos de aplicaci\u00f3n se pospondr\u00e1n a la finalizaci\u00f3n total de las tareas, esta confirmaci\u00f3n o introducci\u00f3n de PIN no puede ser omitida, por lo que el usuario debe realizarla por cada operaci\u00f3n individual. Consulte el punto \u201cTratamiento de errores\u201d para m\u00e1s informaci\u00f3n sobre c\u00f3mo se muestran los errores en los procesos de firma y multifirma masiva. Firma/multifirma de directorios Este proceso permite establecer un directorio y firmar/multifirmar todos los ficheros que contiene en una \u00fanica operaci\u00f3n, obteniendo la firma individual de cada uno de ellos. El tipo de operaci\u00f3n a realizar se especificar\u00e1 mediante setMassiveOperation , lo que nos permitir\u00e1 realizar una firma masiva simple ( FIRMAR ), cofirmar ( COFIRMAR ) o contrafirmar todas las firmas al completo que encontremos ( CONTRAFIRMAR_ARBOL ) o tan s\u00f3lo las firmas hoja ( CONTRAFIRMAR_HOJAS ). La operaci\u00f3n se ejecutar\u00e1 mediante el m\u00e9todo signDirectory del cliente y, en caso de no haber especificado ning\u00fan directorio, se mostrar\u00e1 la pantalla para su selecci\u00f3n. Los ficheros que se firmaran durante la operaci\u00f3n pueden ser filtrados por extensi\u00f3n. Para esto se usar\u00e1 el m\u00e9todo setInIncludeExtensions que recibe las extensiones de los ficheros que se deben procesar separadas por comas (\u201c,\u201d). Por ejemplo: clienteFirma.setInIncludeExtensions(\u201ctxt,xml,p7s\u201d); Tambi\u00e9n es posible indicar que se desean procesar los ficheros de los subdirectorios de la ruta indicada. Esto se configura mediante el m\u00e9todo setInRecursiveDirectorySign . En el caso de las operaciones de multifirma es muy recomendable utilizar el mismo formato de firma del que ya dispusiese la firma original. Para indicar que se desea respetar este formato debe usarse el m\u00e9todo setOriginalFormat . En caso de tratarse de una operaci\u00f3n de firma masiva o no desear respetar el formato original del fichero de firma, se realizar\u00e1 una operaci\u00f3n de firma conforme la configuraci\u00f3n establecida mediante el mecanismo tradicional. Seg\u00fan el tipo de operaci\u00f3n masiva que se haya solicitado y el tipo de fichero que se encuentre durante la misma se realizar\u00e1 una u otra acci\u00f3n: Firma: Fichero binario: Se firmar\u00e1 con la configuraci\u00f3n de firma establecida. Fichero de firma: Se firmar\u00e1 con la configuraci\u00f3n de firma establecida. Cofirma: Fichero binario: Se firmar\u00e1 con la configuraci\u00f3n de firma establecida. Fichero de firma: Se extraer\u00e1n, siempre que sea posible, los datos impl\u00edcitos de la firma y se cofirmar\u00e1 el fichero. Contrafirma: Fichero binario: Se ignorar\u00e1. Fichero de firma: Se contrafirmar\u00e1 completamente o s\u00f3lo las firmas hoja seg\u00fan tipo de operaci\u00f3n ( CONTRAFIRMAR_ARBOL o CONTRAFIRMAR_HOJAS ). En cada caso, se entender\u00e1 como fichero de firma todo aquel que sea una firma en el formato configurado, o en cualquier formato si se ha solicitado mantener el formato original. El resto de ficheros son considerados ficheros binarios. Los documentos PDF, ODF y OOXML ser\u00e1n considerados a efectos de firmas PAdES/PDF, ODF y OOXML, respectivamente, como documentos de firma, independientemente de que estos est\u00e9n firmados o no. Esto es as\u00ed porque para estos formatos cada firma es independiente del resto y hacer una firma o cofirma al documento se interpreta como agregarle una nueva firma. Las firmas resultado de esta operaci\u00f3n se almacenar\u00e1n en el directorio establecido con el m\u00e9todo setOutputDirectoryToSign . El m\u00e9todo crear\u00e1 los ficheros de firma con el mismo nombre que el fichero original (extensi\u00f3n incluida) y la extensi\u00f3n apropiada seg\u00fan el formato de la firma. En el caso de la cofirma y contrafirma se insertar\u00e1n las part\u00edculas \u201c .cosign \u201d y \u201c .countersign \u201d, respectivamente, antes de la extensi\u00f3n de firma. Si se ejecuta una operaci\u00f3n de cofirma, pero el fichero es considerado un binario, se generar\u00e1 una firma, como ya se explic\u00f3 anteriormente, y se agregar\u00e1 la part\u00edcula \u201c. signed \u201d. En caso de no indicar un directorio de salida se tomar\u00e1 el mismo directorio en donde se encuentren los ficheros de entrada. En el mismo directorio de salida se crear\u00e1 un fichero de log ( result.log ) en donde se registrar\u00e1 el resultado de cada una de las acciones realizadas durante la operaci\u00f3n masiva. En caso de producirse uno o m\u00e1s errores durante el proceso el m\u00e9todo signDirectory devolver\u00e1 false , pero no se detendr\u00e1 hasta haber finalizado la operaci\u00f3n. Para conocer con m\u00e1s detalle la causa de los errores que puedan producirse ser\u00e1 necesario consultar el fichero de log. Un ejemplo del uso de esta funcionalidad es: clienteFirma.initialize(); clienteFirma.setSignatureFormat(\"CADES\"); clienteFirma.setSignatureAlgorithm(\"SHA1withRSA\"); clienteFirma.setInputDirectoryToSign(\"C:/ficheros\"); clienteFirma.setOutputDirectoryToSign(\"C:/firmas\"); clienteFirma.setInIncludeExtensions(\"csig\"); clienteFirma.setInRecursiveDirectorySign(true); clienteFirma.setMassiveOperation(\"CONTRAFIRMAR_HOJAS\"); clienteFirma.signDirectory(); if(!clienteFirma.isError()) { alert(\"La operacion finalizo con exito\"); } else { alert(\"Se detectaron errores durante el proceso de firma consulte el log de error para m\u00e1s informaci\u00f3n\"); } Puede verse el funcionamiento de la multifirma masiva basada en ficheros en el HTML de prueba demoFirmaDirectorios.html . < Figura 2: HTML de prueba demoFirmaDirectorios.html Modo de operaci\u00f3n program\u00e1tica Adicionalmente a la metodolog\u00eda ya comentada se dispone de un procedimiento para la firma independiente de datos, ficheros y hashes en base a una configuraci\u00f3n \u00fanica de firma. El procedimiento a seguir para realizar esta operaci\u00f3n es el siguiente: Configuraci\u00f3n del cliente. Inicializaci\u00f3n de la operaci\u00f3n masiva. Firma masiva de los datos. Finalizaci\u00f3n de la operaci\u00f3n. Configuraci\u00f3n del cliente Los aspectos configurables del cliente que afectan a la operaci\u00f3n masiva son: Operaci\u00f3n masiva a realizar (Firma, cofirma y contrafirma de nodos hoja o del \u00e1rbol completo de firma). Algoritmo de firma (SHA1withRSA, SHA512withRSA, etc.). Importante: No se soportan los algoritmos obsoletos MD2 y MD5. Formato con el que realizar las firmas (CMS, XAdES Detached, PDF, ODF\u2026). Si se debe respetar el formato original que, en el caso de las operaciones cofirma y contrafirma, significa detectar el formato de las firmas introducidas para multifirmar con el mismo formato. Modo de firma (Impl\u00edcita o expl\u00edcita). Certificado con el que firmar . La configuraci\u00f3n de estos par\u00e1metros se realiza respectivamente mediante los m\u00e9todos: setMassiveOperation(String) setSignatureAlgorithm(String) setSignatureFormat(String) setOriginalFormat(boolean) setSignatureMode(String) setSelectedCertificateAlias(String) La mayor\u00eda de estos m\u00e9todos se utilizan en la configuraci\u00f3n de la firma simple del applet, pero otros se utilizan \u00fanicamente para la firma masiva: setMassiveOperation(String) , que configura el tipo de operaci\u00f3n masiva y puede recibir los par\u00e1metros: FIRMAR: Firmar datos. COFIRMAR: Cofirma una firma dada. S\u00f3lo podr\u00e1 cofirmar cuando los datos est\u00e9n contenidos en la firma o exista una referencia a ellos. No admite que se le proporcionen datos no reconocibles como una firma. En el caso de proporcionarse un documento PDF, ODF u OOXML y se configure el formato PAdES, ODF u OOXML, respectivamente, se agregar\u00e1 una firmar al documento, independientemente de si este estaba firmado o no, ya que en estos formatos cada firmar es independiente del resto. CONTRAFIRMAR_ARBOL: Contrafirmar todas las firmas de un documento de firma. No admite que se le proporcionen datos no reconocibles como una firma. CONTRAFIRMAR_HOJAS: Contrafirmar todas las firmas hoja de un documento de firma. No admite que se le proporcionen datos no reconocibles como una firma. setOriginalFormat(boolean) , que se configurar\u00e1 a true o false seg\u00fan se desee respetar o no el formato original de firma durante las operaciones de cofirma y contrafirma. Durante la operaci\u00f3n de firma se ignora este par\u00e1metro. El comportamiento de esta opci\u00f3n es el siguiente: Si la opci\u00f3n est\u00e1 activada: Se identificar\u00e1 el formato de la firma original y se multifirmar\u00e1 en este formato. Si no est\u00e1 activada la opci\u00f3n: Se comprobar\u00e1 el formato de la firma y, si es compatible con el formato establecido, se cofirmar\u00e1 / contrafirmar\u00e1 en ese formato. Si no es compatible, fallar\u00e1 la operaci\u00f3n: Es decir, que si est\u00e1 activada esta funci\u00f3n y, por ejemplo, indicamos que se cofirme en CAdES una firma CMS, se ignorar\u00e1 el formato indicado y se cofirmar\u00e1 en CMS (el formato original). Si fuese el caso contrario, y se solicita una cofirma CMS y la firma original es CAdES, se ignorar\u00eda el CMS y se firmar\u00eda en CAdES. Si la opci\u00f3n \"respetar el formato original\" estuviese desactivada ( setOriginalFormat(false) ) se multifirmar\u00eda siempre en el formato indicado, o se informar\u00eda mediante un mensaje de error que el fichero indicado no es un fichero de firma compatible si el formato indicado no lo soportase. El mantener activa esta opci\u00f3n es \u00fatil cuando no se conozca el formato en el que fuesen originalmente firmados los datos o queramos evitarnos el seleccionarlo para cada elemento de firma, mientras que el desactivarlo evita que se realice el proceso de b\u00fasqueda del formato original y, que de seleccionar un formato equivocado, se nos informe. Inicializaci\u00f3n de la operaci\u00f3n masiva El proceso de inicializaci\u00f3n configura los par\u00e1metros ya comentados en el m\u00f3dulo de firma masiva y reinicia el registro de mensajes ( log ) del m\u00f3dulo. Desde el momento de la inicializaci\u00f3n y hasta que se finalice el proceso de firma masiva estos par\u00e1metros, a excepci\u00f3n del tipo de operaci\u00f3n ( setMassiveOperation(String) ) y, cuando la operaci\u00f3n es FIRMAR, el formato de firma ( setSignatureFormat(String) ), permanecen inalterados a lo largo de las operaciones realizadas por el m\u00f3dulo, aunque s\u00ed afectar\u00e1n los cambios de configuraci\u00f3n al resto de funcionalidades del cliente. En caso de que no se hubiesen establecido todas las propiedades necesarias para la configuraci\u00f3n de la firma masiva se tomar\u00e1n los valores por defecto establecidos por el cliente. Estos son: Operaci\u00f3n: Firma. Algoritmo: SHA1 con RSA. Formato: CAdES. Respetar formato original: Activado. Modo: Expl\u00edcito. En el caso del alias, si no se ha establecido ninguno, se mostrar\u00e1 un di\u00e1logo para permitir seleccionar el certificado de firma al inicializar el proceso de firma masiva. La inicializaci\u00f3n del proceso de firma masiva se realiza mediante el m\u00e9todo initMassiveSignature() . Firma masiva de los datos Existen 3 m\u00e9todos para firmar, cofirmar o contrafirmar (nodos u hojas), seg\u00fan sea la operaci\u00f3n configurada para el proceso: massiveSignatureData(String) massiveSignatureFile(String) massiveSignatureHash(String) El m\u00e9todo massiveSignatureData(String) realiza la operaci\u00f3n configurada sobre los datos que recibe en forma de cadena de texto en base 64; massiveSignatureFile(String) ejecuta la operaci\u00f3n sobre el fichero cuya ruta recibe c\u00f3mo par\u00e1metro y massiveSignatureHash(String) lo hace sobre un hash en base 64. A diferencia de cualquier otro m\u00e9todo del Applet que lea o almacene datos en disco, el m\u00e9todo no pedir\u00e1 confirmaci\u00f3n al usuario para acceder al fichero. El usuario habr\u00e1 dado su consentimiento para hacer esto al inicio del proceso de firma masiva. En caso de utilizarse el m\u00e9todo massiveSignatureFile(String) , se solicitar\u00e1 confirmaci\u00f3n al usuario para acceder a este fichero de su sistema y cualquier otro dentro del proceso de firma masiva. En caso de aceptarse, no se volver\u00e1 a mostrar este mensaje salvo que se finalice el proceso masivo ( endMassiveSignature() ) y se inicie uno nuevo. < Figura 3: Confirmaci\u00f3n de acceso a ficheros en el proceso de firma masiva A diferencia de la mayor\u00eda de par\u00e1metros de la configuraci\u00f3n de la firma masiva, es posible modificar el tipo de operaci\u00f3n que se desea en cualquier momento durante su desarrollo. Para esto s\u00f3lo es necesario utilizar el m\u00e9todo setMassiveSignatureOperation(String) en el momento en el que se desee modificar la configuraci\u00f3n. En el caso de realizarse una firma masiva (ni cofirmas, ni contrafirmas) es posible modificar a mitad del proceso el formato con el que queremos firmar. Esto se realizar\u00e1 mediante el m\u00e9todo setSignatureFormat(String) , que permitir\u00e1 generar firmas en el nuevo formato, pero no afectar\u00e1 al formato inicialmente configurado (el establecido antes del initMassiveSignature() ). Si durante la operaci\u00f3n de firma masiva establecemos el formato a null , se establecer\u00e1 el formato inicialmente configurado. El formato de las cofirmas y contrafirmas masivas no se puede modificar durante la ejecuci\u00f3n, pero puede configurarse que se respete el formato original para que se opere siempre en el formato adecuado. El comportamiento de cada una de las operaciones simples podr\u00e1 variar seg\u00fan el tipo de fichero que se les proporcione: Firma: Fichero binario: Se firmar\u00e1 con la configuraci\u00f3n de firma establecida. Fichero de firma: Se firmar\u00e1 con la configuraci\u00f3n de firma establecida. Cofirma: Fichero binario: Fallar\u00e1 la operaci\u00f3n. Fichero de firma: Se extraer\u00e1n, siempre que sea posible, los datos impl\u00edcitos de la firma y se agregar\u00e1 una nueva firma al fichero. Contrafirma: Fichero binario: Fallar\u00e1 la operaci\u00f3n. Fichero de firma: Se contrafirmar\u00e1 completamente o s\u00f3lo las firmas hoja seg\u00fan tipo de operaci\u00f3n ( CONTRAFIRMAR_ARBOL o CONTRAFIRMAR_HOJAS ). IMPORTANTE: T\u00e9ngase en cuenta las siguientes consideraciones: Las operaciones de cofirma y contrafirma no pueden realizarse sobre hashes ya que desde estos no pueden obtenerse los datos originales. Determinados formatos de firma pueden exigir que sea necesario firmar sobre los datos o un fichero, no siendo posible firmar hashes. Por ejemplo, los formatos XML enveloped, ODF y PDF. La operaci\u00f3n de firma recibe los datos (mediante cualquiera de los 3 m\u00e9todos comentados) mientras que la cofirma y las contrafirmas reciben una firma previamente generada con formato reconocido. La contrafirma se aplica sobre firmas y es indiferente que estas almacenen datos impl\u00edcitos o no, pero la cofirma requiere los datos originales para ser firmados por lo que es obligatorio que se proporcione una firma con los datos impl\u00edcitos o, al menos, una expl\u00edcita realizada con el mismo algoritmo de firma con el que se solicita la cofirma, para as\u00ed poder reutilizar el hash que almacena. En el caso de firmas con formato propio del tipo de documento (PDF, ODF y OOXML) la operaci\u00f3n de cofirma supondr\u00e1 agregar una nueva firma al documento. Las operaciones masivas devuelven su resultado en forma de cadena en base 64. En caso de producirse alg\u00fan error se devolver\u00e1 null y en ning\u00fan caso se lanzar\u00e1 una excepci\u00f3n, permitiendo al integrador obviar la captura de \u00e9stas, o se interrumpir\u00e1 el proceso. Cada operaci\u00f3n individual de la firma masiva realizada generar\u00e1 una entrada en el registro de mensajes ( log ). En el caso de finalizar la operaci\u00f3n correctamente esta simplemente lo indicar\u00e1, mientras que en el caso de error la entrada explicar\u00e1 el error producido. Finalizaci\u00f3n de la operaci\u00f3n La finalizaci\u00f3n de la operaci\u00f3n elimina la configuraci\u00f3n de operaci\u00f3n masiva establecida por lo que ya no es posible continuar operando hasta que se vuelva a inicializar. Tras ser finalizada la operaci\u00f3n, la nueva inicializaci\u00f3n podr\u00eda tomar una nueva configuraci\u00f3n de firma establecida. El m\u00e9todo para llevar a cabo la finalizaci\u00f3n de la operaci\u00f3n masiva es endMassiveSignature() . El finalizar la operaci\u00f3n no elimina los mensajes de registro ( log ) generados durante la misma, por lo que es posible seguir accediendo a ellos. S\u00ed, en cambio, los eliminar\u00e1 el iniciar una nueva operaci\u00f3n de firma masiva. Registro de mensajes de la operaci\u00f3n masiva Por cada operaci\u00f3n individual de firma/multifirma realizada durante el proceso masivo se genera una entrada en el registro de mensajes. Para obtener, tras una operaci\u00f3n individual, el mensaje generado se debe utilizar el m\u00e9todo getMassiveSignatureCurrentLog() . La forma de este registro ser\u00e1: Operaci\u00f3n sobre TIPO_DATO: MENSAJE. En donde TIPO_DATO ser\u00e1 la palabra \u201cdatos\u201d, \u201cfichero\u201d o \u201chash\u201d seg\u00fan el m\u00e9todo utilizado para la operaci\u00f3n (massiveSignatureData, massiveSignatureFile o massiveSignatureHash respectivamente); y MENSAJE ser\u00e1 el mensaje obtenido, \u201cCorrecta\u201d en el caso de que la operaci\u00f3n finalizase correctamente o la explicaci\u00f3n del error en caso de que se produjese. Puede obtenerse todo el log generado hasta el momento para su proceso mediante el m\u00e9todo getMassiveSignatureLog() . El texto que devuelve este m\u00e9todo se compone de todas las entradas del mismo con el formato indicado separadas por un retorno de carro (\u201c\\r\\n\u201d). Puede almacenarse este mismo log en disco mediante la funci\u00f3n saveMassiveSignatureLog() , que lo almacenar\u00e1 en la ruta indicada con el m\u00e9todo setOutFilePath(String) . Si no se ha establecido ning\u00fan fichero de salida se mostrar\u00e1 un di\u00e1logo de guardado para seleccionar en donde se desea almacenar el fichero. El registro de mensajes permanecer\u00e1 aun cuando se finalice la operaci\u00f3n masiva, pero se reiniciar\u00e1 en cada nueva inicializaci\u00f3n del proceso. Guardado de firmas en disco Este mecanismo no est\u00e1 optimizado para el guardado de firmas en disco. Si su objetivo es almacenar las firmas resultantes en el sistema del usuario, consulte el apartado \u201c 9.1 Guardar la firma en un fichero \u201d y eval\u00fae si es preferible su uso. Si requiere almacenar las firmas en disco y utilizar el mecanismo de firma masiva program\u00e1tica, dese cuenta de que se requerir\u00e1 al usuario confirmaci\u00f3n para el guardado de cada una de las firmas. Las firmas resultantes de la operaci\u00f3n de firma masiva se devuelven en base 64 por cada operaci\u00f3n de firma individual (realizadas con massiveSignatureData(String), massiveSignatureFile(String) o massiveSignatureHash(String)), por lo cual el cliente no las almacena internamente como hace con las operaciones de firma simple. Por este motivo, el simple uso del m\u00e9todo de guardado de firma del cliente no aplica a esta situaci\u00f3n. Si desea guardar los datos en disco tenga en cuenta que esto requiere confirmaci\u00f3n expl\u00edcita del usuario, por lo que deber\u00e1 aprobar cada guardado individual de datos. En su lugar se puede utilizar la siguiente sucesi\u00f3n de llamadas a m\u00e9todos: setElectronicSignature(String) : Recibe como par\u00e1metro la firma en base64 y la guarda internamente. setOutFilePath(String) : Establece el fichero de salida. Para permitir al usuario que seleccione el nombre y directorio de salida para cada fichero firmado, se le pasar\u00e1 el par\u00e1metro null . saveSignToFile() : Pide confirmaci\u00f3n al usuario y almacena la firma en el directorio de salida indicado. Ejemplo Java de operaci\u00f3n masiva // Creamos una instancia del applet (innecesario para su uso en Web) SignApplet clienteFirma = new SignApplet(); // Configuramos la operaci\u00f3n que deseamos clienteFirma.setMassiveOperation(\"FIRMAR\"); clienteFirma.setSignatureFormat(\"CMS\"); clienteFirma.setSignatureMode(\"IMPLICIT\"); // Inicializamos la operaci\u00f3n (en este momento se nos pedir\u00e1 seleccionar un // certificado de firma) clienteFirma.initMassiveSignature(); // Una vez inicializada la operaci\u00f3n, cualquier cambio en el algoritmo, formato, // tipo de operaci\u00f3n, etc. no ser\u00e1 tenido en cuenta para la operaci\u00f3n masiva, // aunque s\u00ed para el resto de operaciones del cliente // Vector en el que almacenar los resultados en base 64 Vector<String> firmasB64 = new Vector<String>(); // Firmamos y almacenamos los datos. Por norma general es recomendable operar // directamente con las firmas generadas (guardarlas, enviarlas,\u2026) y no // mantenerlas todas cargadas para evitar problemas de desbordamiento de // memoria // Firma de ficheros firmasB64.add( clienteFirma.massiveSignatureFile(\"C:\\Fichero.txt\") ); firmasB64.add( clienteFirma.massiveSignatureFile(\"C:\\Fichero.xml\") ); firmasB64.add( clienteFirma.massiveSignatureFile(\"C:\\Fichero.odt\") ); // Firma de datos firmasB64.add( clienteFirma.massiveSignatureData( clienteFirma.getFileBase64Encoded(\"C:\\Fichero.txt\", true ) )); firmasB64.add( clienteFirma.massiveSignatureData( clienteFirma.getFileBase64Encoded(\"C:\\Fichero.xml\", true ) )); firmasB64.add( clienteFirma.massiveSignatureData( clienteFirma.getFileBase64Encoded(\"C:\\Fichero.odt\", true ) )); // Firma de hashes clienteFirma.setFileuri(\"C:\\Fichero.txt\"); firmasB64.add( clienteFirma.massiveSignatureHash( clienteFirma.getFileHashBase64Encoded( true ) )); clienteFirma.setFileuri(\"C:\\Fichero.xml\"); firmasB64.add( clienteFirma.massiveSignatureHash( clienteFirma.getFileHashBase64Encoded( true ) )); clienteFirma.setFileuri(\"C:\\Fichero.odt\"); firmasB64.add( clienteFirma.massiveSignatureHash( clienteFirma.getFileHashBase64Encoded( true ) )); // Finalizamos la operaci\u00f3n clienteFirma.endMassiveSignature(); // Almacenamos el log preguntando al usuario donde lo desea almacenar clienteFirma.saveMassiveSignatureLog(); // Adem\u00e1s de almacenarlas en un vector queremos guardarlas en disco (en este caso no mantenemos referencias a los ficheros originales) for ( int i=0; i<firmasB64.size(); i++) { if (firmasB64.get(i) != null ) { clienteFirma.setElectronicSignature(firmasB64.get(i)); clienteFirma.setOutFilePath(\"firma\"+i+\".csig\"); clienteFirma.saveSignToFile(); } } // Mostramos un mensaje de error al usuario por cada error obtenido String[] mensajes = clienteFirma.getMassiveSignatureLog().trim().split(\"\\r\\n\"); for ( int i=0; i<firmasB64.size(); i++) { if (firmasB64.get(i) == null ) { JOptionPane. showMessageDialog ( clienteFirma, mensajes[i], \"Error\", JOptionPane. ERROR_MESSAGE ); } } Puede verse el funcionamiento de la multifirma masiva basada en ficheros en el HTML de prueba demoFirmaDirectorios.html . < Figura 4: HTML de prueba demoMultifirmaMasiva.html Cifrado de datos El Cliente @firma incorpora funcionalidades de cifrado sim\u00e9trico de datos que permite encriptar datos o ficheros de tal forma que s\u00f3lo aquella persona que tenga la clave o contrase\u00f1a utilizada para el cifrado puede recuperar esos datos. Antes de proceder al cifrado de datos con el Cliente, conviene reinicializar su configuraci\u00f3n debido a que esta funcionalidad comparte recursos con los procesos de firma y podr\u00eda haber incompatibilidad en la entrada de datos. Para esta tarea puede utilizarse el m\u00e9todo \u201cinitialize()\u201d de la biblioteca JavaScript llamada \u201c cripto.js \u201d que reinicia las propiedades del cliente a sus valores por defecto. Para iniciar el proceso de cifrado habr\u00e1 que introducir previamente los datos a cifrar. Es posible especificar los datos a cifrar de diferentes formas: datos : se especifica cu\u00e1l es la cadena a cifrar mediante el m\u00e9todo setPlainData , que recibe la cadena que se desea cifrar en Base64. fichero : es posible especificar que se cifre un fichero indic\u00e1ndole la ruta a la llamada del proceso de firma. Para ello, utilizaremos directamente el m\u00e9todo de cifrado cipherFile . Por defecto el cliente de cifrado define como algoritmo de cifrado AES y generaci\u00f3n autom\u00e1tica de clave, aunque posteriormente veremos las posibilidades de configuraci\u00f3n de estos par\u00e1metros. Tras indicar la configuraci\u00f3n del cifrador, podemos ejecutar la operaci\u00f3n de cifrado. Para cifrar los datos establecidos mediante setPlainData , utilizaremos el m\u00e9todo cipherData . Para cifrar un fichero, usaremos el m\u00e9todo cipherFile , que recibe la ruta de un fichero en disco. Tambi\u00e9n podemos utilizar las funciones JavaScript (en cripto.js ), cifrarDatos y cifrarFichero , que reciben los datos en Base64 y la ruta del fichero, respectivamente. El comportamiento de la llamada es an\u00e1logo al resto de llamadas al Applet, indicando si la ejecuci\u00f3n se ha llevado a cabo de forma correcta o los errores en caso negativo. Los datos cifrados se podr\u00e1n obtener una vez haya finalizado mediante la llamada al m\u00e9todo getCipherData o la funci\u00f3n JavaScript obtenerResultadoCifrado , que devuelven los datos cifrados codificados en formato Base 64. Es posible almacenar estos datos cifrados en un archivo mediante la funci\u00f3n saveCipherDataToFile , a la cual le pasaremos la ruta absoluta del archivo destino (atenci\u00f3n, el archivo destino ser\u00e1 sobrescrito para evitar problemas a la hora de descifrar). El fichero destino se crear\u00e1 si no exist\u00eda, pero la ruta de directorios del fichero deber\u00e1 existir o la operaci\u00f3n fallar\u00e1. El contenido del archivo destino son los datos cifrados, por lo que no se recomienda su edici\u00f3n, ya que pudiera alterar gravemente el contenido plano del mensaje cifrado o incluso destruirlo. Un ejemplo de aplicaci\u00f3n de lo anterior para un proceso completo de cifrado ser\u00eda el siguiente: <html> <head> <script type=\"text/javascript\" language=\"javascript\" src=\"constantes.js\"></script> <script type=\"text/javascript\" language=\"javascript\" src=\"common-js/instalador.js\"></script> <script type=\"text/javascript\" language=\"javascript\" src=\"common-js/cripto.js\"></script> <script type=\"text/javascript\" language=\"javascript\"> function cifrar() { var texto= document.getElementById(\"campo1\").value; clienteFirma.initialize(); clienteFirma.setKeyMode(\u201cGENERATEKEY\u201d); clienteFirma.setCipherAlgorithm(\u201cAES\u201d); clienteFirma.setPlainData(clienteFirma.getBase64FromText(texto, null), null); clienteFirma.setShowErrors(false); cifrarDatos(); if(!clienteFirma.isError()){ var datosCifrados = clienteFirma.getCipherData(); var campoCifrado =document.getElementById(\u201ccampo2\u201d); campoCifrado .value = datosCifrados; return true; }else{ alert(\"No se ha podido cifrar los datos: \"+clienteFirma.getErrorMessage()); return false; } } </script> [\u2026] </head> <body> <script type=\"text/javascript\"> cargarAppletFirma(); </script> [\u2026] <label>Datos planos</label><br/> <textarea id=\u201dcampo1\u201d cols=\u201d20\u201d rows=\u201d5\u201d nowrap>Introduzca texto plano aqu\u00ed</textarea> <br/><br/><input type=\u201dbutton\u201d value=\u201dCifrar\u201d onClick=\u201dcifrar();\u201d/><br/><br/> <label>Datos cifrados</label><br/> <textarea id=\u201dcampo2\u201d cols=\u201d20\u201d rows=\u201d5\u201d nowrap readonly></textarea> [\u2026] </body> </html> Este ejemplo b\u00e1sico captura el texto introducido en un \u00e1rea de texto, la cifra con generaci\u00f3n autom\u00e1tica de clave y el algoritmo AES y la muestra en un segundo \u00e1rea de texto tras pulsar un bot\u00f3n. Para m\u00e1s informaci\u00f3n, consultar el ejemplo incluido y el apartado Configuraci\u00f3n de cifrado para conocer las opciones de configuraci\u00f3n de esta operaci\u00f3n. Puede verse las distintas configuraciones de cifrado y descifrado de datos en el HTML de ejemplo demoCifrado.html . < Figura 10: HTML de ejemplo demoCifrado.html Puede encontrar informaci\u00f3n adicional sobre el cifrado de datos en el punto Algoritmos de cifrado de este mismo documento. Descifrado de datos De manera similar al cifrado, deberemos especificar cu\u00e1les son los datos a descifrar, y al igual que antes podremos especificar los datos cifrados mediante dos m\u00e9todos distintos: datos o texto cifrado : se especifica cu\u00e1l es la cadena a descifrar mediante el m\u00e9todo setCipherData . Los datos de entrada estar\u00e1n en base 64 (igual que la salida del algoritmo de cifrado) para evitar la aparici\u00f3n de caracteres extra\u00f1os o no imprimibles. Internamente estos datos se decodificaran a la base apropiada y se descifrar\u00e1n. fichero : tambi\u00e9n es posible especificar que los datos a cifrar provienen de un archivo indic\u00e1ndole la ruta ( decipherFile ), o usando la funci\u00f3n setFileuri para especificarla. Tambi\u00e9n aqu\u00ed se deber\u00e1 especificar la ruta absoluta del fichero. Evidentemente para descifrar datos no podremos auto generar una clave, sino que tendremos que especificarle una siempre. En caso que se intente iniciar el m\u00e9todo de descifrado sin especificar la clave supondr\u00e1 un fallo autom\u00e1tico. Los datos descifrados se pueden recuperar mediante la llamada a la funci\u00f3n getPlainData . Tambi\u00e9n tenemos un m\u00e9todo para escribir estos datos recuperados a un archivo mediante la llamada a savePlainDataToFile y pas\u00e1ndole la ruta absoluta del archivo destino. El fichero destino se crear\u00e1 si no exist\u00eda, pero la ruta de directorios del fichero deber\u00e1 existir o la operaci\u00f3n fallar\u00e1. Un ejemplo b\u00e1sico para descifrar ser\u00eda el siguiente: <html> <head> <script type=\"text/javascript\" language=\"javascript\" src=\"constantes.js\"></script> <script type=\"text/javascript\" language=\"javascript\" src=\"common-js/instalador.js\"></script> <script type=\"text/javascript\" language=\"javascript\" src=\"common-js/cripto.js\"></script> <script type=\"text/javascript\" language=\"javascript\"> function descifrar() { var textoCifrado= document.getElementById(\"campo1\").value; var clave=document.getElementById(\u201cclave\u201d).value; var archivoOrigen=document.getElementById(\u201corigen\u201d).value; clienteFirma.initialize(); clienteFirma.setKey(clave); clienteFirma.setKeyMode(\u201cUSERINPUT\u201d); clienteFirma.setCipherAlgorithm(\u201cAES\u201d); descifrarArchivo(archivoOrigen); if(!clienteFirma.isError()){ var datosPlanos = clienteFirma.getTextFromBase64( clienteFirma.getPlainData(), null); var campoPlano=document.getElementById(\u201ccampo2\u201d); campoPlano .value = datosCifrados; var archivoDestino=document.getElementById(\u201cdestino\u201d).value; clienteFirma.savePlainDataToFile(archivoDestino); return true; }else{ alert(\"No se ha podido descifrar los datos: \"+clienteFirma.getErrorMessage()); return false; } } </script> [\u2026] </head> <body> <script type=\"text/javascript\"> cargarAppletFirma(); </script> [\u2026] <label>Fichero cifrado:</label> <input type=\u201dfile\u201d id=\u201dorigen\u201d/> <label>Fichero plano (introduzca URI):</label> <input type=\u201dtext\u201d id=\u201ddestino\u201d value=\u201d\u201d/> <br/><br/><input type=\u201dbutton\u201d value=\u201dDescifrar\u201d onClick=\u201ddescifrar();\u201d/><br/><br/> <label>Datos descifrados</label><br/> <textarea id=\u201d campo2 \u201d cols=\u201d20\u201d rows=\u201d5\u201d nowrap readonly></textarea> [\u2026] </body> </html> Puede encontrar informaci\u00f3n adicional sobre el descifrado de datos en el apartado Configuraci\u00f3n de cifrado , y ver un ejemplo de uso en el HTML de ejemplo demoCifrado.html . Estructuras CMS cifradas / Sobres Digitales CMS define una estructura de datos que puede albergar distintos tipos de contenido (datos planos, hashes, datos comprimidos, datos cifrados\u2026). El Cliente @firma permite generar algunas de estas estructuras, entre las que se encuentran los llamados \u201cSobres Digitales\u201d. Los tipos de contenidos que permite generar el Cliente @firma son: CMS encriptado ( EncryptedCMS ). CMS envuelto ( EnvelopedCMS ). CMS autenticado ( Authenticated&Enveloped ). PKCS#7 firmado y envuelto ( Signed&Enveloped ). Los tipos de contenido considerados sobres digitales son aquellos indicados como \u201cenvuelto\u201d. Estos son el envuelto, el autenticado y envuelto, y el firmado y envuelto. Tipo de contenido CMS encriptado Esta estructura est\u00e1 basada en un mensaje criptogr\u00e1fico que s\u00f3lo contiene el texto cifrado sim\u00e9tricamente y opcionalmente el algoritmo utilizado para el cifrado. No contiene ninguna informaci\u00f3n sobre la clave, emisor o receptor, por este motivo no puede considerarse un sobre digital. La metodolog\u00eda para su creaci\u00f3n es: Se establece los datos a incluir en el mensaje mediante una llamada a setData , pas\u00e1ndole en base 64 los datos que se desean incluir en el mensaje, o setFileuri , para incluir un fichero. Opcionalmente se definen el algoritmo de cifrado, la clave y el modo de clave. Se configura que queremos una estructura de datos cifrados llamando al m\u00e9todo setCMSContentType con el valor EncryptedData . Se realiza una llamada a buildCMSStructure . El CMS generado se puede recuperar como un String codificado en base 64 mediante el m\u00e9todo getB64Data o guardarla en un archivo con la operaci\u00f3n saveDataToFile . Consulte el apartado 8.7 Configuraci\u00f3n de cifrado para conocer las distintas opciones de cifrado que puede utilizar para la configuraci\u00f3n del CMS encriptado. CMS envuelto Mediante la creaci\u00f3n de un CMS envuelto obtenemos un sobre digital en el cual podremos incluir contenido cifrado s\u00f3lo visible por los receptores que le indiquemos. Posteriormente veremos la estructura generada y comentaremos algunos detalles sobre ella. El procedimiento de creaci\u00f3n es el siguiente: Definimos los datos a incluir en el sobre digital de igual manera que en el apartado anterior, indicando los datos en base 64 mediante setData o un fichero mediante setFileuri . Definimos tambi\u00e9n el resto de par\u00e1metros opcionales. El modo de clave \u201cPASSWORD\u201d y sus algoritmos no est\u00e1n permitidos. Opcionalmente, establecemos el alias del certificado que deseamos indicar como remitente del sobre por medio de la funci\u00f3n setSelectedCertificateAlias . Establecemos los receptores v\u00e1lidos para el mensaje mediante una llamada a la funci\u00f3n setRecipientsToCMS especific\u00e1ndole como par\u00e1metros una cadena con los diferentes archivos con la clave p\u00fablica de los diferentes sujetos separados por retornos de carro (\u201c\\n\u201d). Estos ficheros deber\u00e1n indicar su ruta completa y pueden ser formato CER o DER. Pueden eliminarse los receptores indicados llamando a este m\u00e9todo con el par\u00e1metro null . Para la generaci\u00f3n del sobre ser\u00e1 necesario indicar al menos un receptor v\u00e1lido. De forma independiente a los receptores indicados mediante el m\u00e9todo setRecipientsToCMS , es posible configurar receptores adicionales mediante el m\u00e9todo addRecipientToCMS que recibe el certificado del receptor codificado en base 64. Para eliminar alguno de los receptores agregados mediante este m\u00e9todo puede utilizarse removeRecipientToCMS . Se configura que queremos una estructura de datos cifrados llamando al m\u00e9todo setCMSContentType con el valor EnvelopedData . Se realiza una llamada a buildCMSStructure . Tras la llamada nos solicitar\u00e1 que indiquemos el emisor del mensaje, mediante la selecci\u00f3n de nuestro certificado digital, aunque es opcional indicar el emisor, es recomendable. Una vez concluida la operaci\u00f3n, podremos obtener el resultado mediante la llamada a getB64Data o guardarla en un archivo con saveDataToFile . Si se desean agregar m\u00e1s remitentes al sobre, puede realizarse la operaci\u00f3n tal como se describe en el apartado Sobres con m\u00faltiples remitentes. PKCS#7 firmado y envuelto Similar al CMS envuelto, pero los datos adem\u00e1s de cifrarse son firmados por el emisor. El procedimiento es el siguiente: Definimos los datos a incluir en el sobre digital de igual manera que en el apartado anterior, indicando los datos en base 64 mediante setData . Para incluir un fichero le indicaremos la direcci\u00f3n absoluta del fichero en la llamada setFileuri . Opcionalmente, definimos tambi\u00e9n la configuraci\u00f3n del cifrado, teniendo en cuenta que el modo de clave \u201cPASSWORD\u201d y sus algoritmos asociados no est\u00e1n permitidos. Opcionalmente, establecemos el alias del certificado que deseamos indicar como remitente del sobre por medio de la funci\u00f3n setSelectedCertificateAlias . Establecemos los receptores v\u00e1lidos para el mensaje mediante una llamada a la funci\u00f3n setRecipientsToCMS especific\u00e1ndole como par\u00e1metros una cadena con los diferentes archivos con la clave p\u00fablica de los diferentes sujetos separados por retornos de carro (\u201c\\n\u201d). Estos ficheros deber\u00e1n indicar su ruta completa y pueden ser formato CER o DER. Pueden eliminarse los receptores indicados llamando a este m\u00e9todo con el par\u00e1metro null. Para la generaci\u00f3n del sobre ser\u00e1 necesario indicar al menos un receptor v\u00e1lido. De forma independiente a los receptores indicados mediante el m\u00e9todo setRecipientsToCMS , es posible configurar receptores adicionales mediante el m\u00e9todo addRecipientToCMS que recibe el certificado del receptor codificado en base 64. Para eliminar alguno de los receptores agregados mediante este m\u00e9todo puede utilizarse removeRecipientToCMS . Empaquetamos los datos: Si queremos firmar y envolverlos datos de entrada se configura la estructura de datos con el m\u00e9todo setCMSContentType y el valor SignedAndEnvelopedData . Luego hacemos la llamada al m\u00e9todo buildCMSStructure . Si queremos firmar y envolver un fichero especifico, podemos llamar al m\u00e9todo signAndPackFile utilizando la ruta del fichero. Tras la llamada, si no indicamos el remitente del sobre en el paso 2, nos solicitar\u00e1 que seleccionemos el emisor del mensaje mediante la selecci\u00f3n de nuestro certificado digital. En esta ocasi\u00f3n es obligatorio indicarlo para as\u00ed firmar los datos. Una vez concluida la operaci\u00f3n, podremos obtener el resultado mediante la llamada a getB64Data o guardarla en un archivo con saveDataToFile . Si se desean agregar m\u00e1s remitentes al sobre, puede realizarse la operaci\u00f3n tal como se describe en el apartado Sobres con m\u00faltiples remitentes. CMS autenticado y envuelto Similar al PKCS#7 firmado y envuelto. El ensobrado firmado y envuelto contaba con una vulnerabilidad que hac\u00eda posible que el sobre fuese modificado sin que se detectase con posterioridad. El ensobrado CMS autenticado corrige este problema generando un c\u00f3digo de autenticaci\u00f3n para el sobre que no puede ser replicado tras su modificaci\u00f3n sin conocer cu\u00e1l es su contenido. De esta forma, cualquier cambio en el sobre har\u00e1 fallar el proceso de validaci\u00f3n con ese c\u00f3digo y este no podr\u00eda sustituirse por otro sin conocer el contenido del sobre. El procedimiento para generar un sobre CMS autenticado y envuelto es el siguiente: Definimos los datos a incluir en el sobre digital indic\u00e1ndolos en base 64 mediante setData . Para incluir un fichero le indicar\u00edamos la direcci\u00f3n absoluta del fichero en la llamada setFileuri . Opcionalmente, definimos tambi\u00e9n la configuraci\u00f3n del cifrado, teniendo en cuenta que el modo de clave \u201cPASSWORD\u201d y sus algoritmos asociados no est\u00e1n permitidos. Opcionalmente, establecemos el alias del certificado que deseamos indicar como remitente del sobre por medio de la funci\u00f3n setSelectedCertificateAlias . Establecemos los receptores v\u00e1lidos para el mensaje mediante una llamada a la funci\u00f3n setRecipientsToCMS especific\u00e1ndole como par\u00e1metros una cadena con los diferentes archivos con la clave p\u00fablica de los diferentes sujetos separados por retornos de carro (\u201c\\n\u201d). Estos ficheros deber\u00e1n indicar su ruta completa y pueden ser formato CER o DER. Pueden eliminarse los receptores indicados llamando a este m\u00e9todo con el par\u00e1metro null . Para la generaci\u00f3n del sobre ser\u00e1 necesario indicar al menos un receptor v\u00e1lido. De forma independiente a los receptores indicados mediante el m\u00e9todo setRecipientsToCMS , es posible configurar receptores adicionales mediante el m\u00e9todo addRecipientToCMS que recibe el certificado del receptor codificado en base 64. Para eliminar alguno de los receptores agregados mediante este m\u00e9todo puede utilizarse removeRecipientToCMS . Se configura que queremos una estructura de datos cifrados llamando al m\u00e9todo setCMSContentType con el valor AuthEnvelopedData . Hacemos la llamada al m\u00e9todo buildCMSStructure . Tras la llamada, si no indicamos el remitente del sobre en el paso 2, nos solicitar\u00e1 que indiquemos el emisor del mensaje mediante la selecci\u00f3n de nuestro certificado digital, obligatorio para poder autenticar los datos. Una vez concluida la operaci\u00f3n, podremos obtener el resultado mediante la llamada a getB64Data o guardarla en un archivo con saveDataToFile . Sobres con m\u00faltiples remitentes El Cliente @firma permite definir m\u00faltiples remitentes para los sobres digitales de tipo \u201cenvelopedData\u201d y \u201csignedAndEnvelopedData\u201d. Para agregar m\u00faltiples remitentes a un sobre ser\u00e1 necesario generar el sobre normalmente y agregar en una operaci\u00f3n posterior la informaci\u00f3n de un nuevo remitente. Si se desean agregar nuevos remitentes al sobre puede repetirse esta operaci\u00f3n tantas veces como se desee. El procedimiento a seguir es el siguiente: Una vez tenemos el sobre generado con el remitente inicial el proceso a seguir es el siguiente: Seleccionamos el sobre digital al que deseemos agregar el nuevo remitente. Podemos hacer esto introduci\u00e9ndolo en base 64 mediante setData o indicando la ruta absoluta en la que se encuentra el sobre en disco utilizando setFileuri . Opcionalmente, seleccionamos el certificado del nuevo remitente configurando el almac\u00e9n en donde se encuentra mediante setKeystore y su alias con setSelectedCertificateAlias . Si no se introducen estos datos, se pedir\u00e1 el certificado al usuario. Hacemos la llamada al m\u00e9todo coEnvelop . Tras la llamada, si no indicamos el nuevo remitente, se nos solicitar\u00e1 mediante un di\u00e1logo modal que lo seleccionemos del almac\u00e9n configurado y, seguidamente, se agregar\u00e1 la informaci\u00f3n del nuevo remitente. Una vez concluida la operaci\u00f3n, podremos obtener el resultado mediante la llamada a getB64Data o guardarla en un archivo con la operaci\u00f3n saveDataToFile . Despliegue del Cliente @firma en Servidor El n\u00facleo del Cliente @firma se distribuye en forma de biblioteca Java, por lo que es posible integrarla en otras aplicaciones Java como una biblioteca independiente. Para esto s\u00f3lo es necesario agregarla a proyecto Java, ya sea cliente para ejecuci\u00f3n en cliente o servidor, en la que se quiera integrar, recordando que el sistema en donde vaya a ejecutarse debe cumplir con los requisitos m\u00ednimos del Cliente @firma. Puede decirse que existen 2 formas de acceder a las funcionalidades de las que dispone el Cliente @firma: Acceso a bajo nivel: Esto implica hacer uso de toda la API del Cliente @firma para realizar cada operaci\u00f3n unitaria necesaria (extracci\u00f3n de certificados de los almacenes, configuraci\u00f3n de los m\u00f3dulos de firma,\u2026) para componer la operaci\u00f3n que se desea realizar(firma de datos, generaci\u00f3n de sobres digitales, etc.). El uso de estas funcionalidades requiere un conocimiento m\u00e1s interno del Cliente @firma y el uso intensivo del Javadoc del mismo para identificar los m\u00e9todos apropiados para componer las operaciones que se desean. Acceso a alto nivel: Esto implica el uso del Cliente @firma a trav\u00e9s de la misma Clase applet que se utiliza para la integraci\u00f3n en p\u00e1ginas Web. Por medio de esta clase se puede acceder a las funcionalidades ya conocidas del cliente, preparadas para su uso directo por parte del integrador (firma/multifirma de ficheros, datos y hashes; operaciones masivas;\u2026). Diferencias del despliegue del Cliente en servidor Existen algunas consideraciones que deben tenerse en cuenta antes de comenzar a integrar el Cliente @firma en servidor, debido a las diferencias al despliegue en la m\u00e1quina del usuario: La integraci\u00f3n del Cliente @firma en servidor est\u00e1 orientada a la firma de datos por parte de las entidades que lo integran, no de los usuarios. El Cliente no se carga en un navegador Web que tiene un almac\u00e9n de certificados predefinido, por lo es necesario indicar siempre a qu\u00e9 almac\u00e9n de certificados se debe acceder. Se accede a los almacenes de certificados del servidor, no del usuario. No es com\u00fan disponer de los certificados instalados en los almacenes de los navegadores o sistemas operativos. Normalmente dispondremos del certificado en un fichero (P12/PFX, JKS\u2026) o dispositivo externo (tarjeta inteligente, HSM\u2026). Es recomendable que se configure el acceso a dispositivos de firma externos (tarjetas inteligentes, tokens USB,\u2026) en alguno de los almacenes locales (CAPI, Mozilla,\u2026) y se utilicen a trav\u00e9s de los mismos. El uso del Cliente en servidor debe ser 100% program\u00e1tico. No debe requerir la intervenci\u00f3n de un usuario. Opciones que antes se delegaban al usuario tienen que realizarse autom\u00e1ticamente. Por ejemplo, la selecci\u00f3n del certificado de firma. No pueden utilizarse los m\u00e9todos de carga y guardado de ficheros en disco, ya que estos, por seguridad, solicitan confirmaci\u00f3n al usuario. Los m\u00e9todos vetados son: getFileBase64Encoded getTextFileContent(String) saveDataToFile(String) savePlainDataToFile(String) saveCipherDataToFile(String) setFileuri(String) setFileuriBase64(String) setElectronicSignatureFile(String) setOutFilePath(String) setKeyStore(String, String, String) setInputDirectoryToSign(String) setOutputDirectoryToSign(String) initMassiveSignature() cipherFile(String) decipherFile(String) signAndPackFile(String) No se pueden realizar firmas con el DNIe, ya que este requiere la autorizaci\u00f3n del usuario para firmar. Las operaciones deben terminar siempre, ya sea exitosamente o debido a un error, pero en ning\u00fan caso deben bloquearse, por ejemplo, con mensajes modales de aviso. ADVERTENCIA: Debido a que el applet del Cliente no ha sido desarrollado para usarse como interfaz program\u00e1tica para el uso desde servidor, la actual versi\u00f3n del Cliente @firma no permite que todas las operaciones se puedan realizar de forma 100% program\u00e1tica. Esto implica que hay operaciones que no es posible realizar desde servidor. Deben evitarse siempre los di\u00e1logos gr\u00e1ficos, ya que es posible que el servidor no disponga de un entorno de ventanas. Por ejemplo, deben evitarse las barras de progreso en la carga de ficheros. Acceso a las funcionalidades a bajo nivel del Cliente El uso de las funcionalidades a bajo nivel del Cliente @firma puede ser tedioso debido a que es necesario conocer los distintos elementos que lo componen. En este punto se hace especialmente importante atender a las consideraciones del apartado anterior y gestionar los errores que pudieran surgir resultado de la configuraci\u00f3n del Cliente o de la operaci\u00f3n. Para el uso de estas funcionalidades, dir\u00edjase al Javadoc del Cliente @firma y a la documentaci\u00f3n t\u00e9cnica del mismo. Acceso a las funcionalidades a alto nivel del Cliente Las funcionalidades de alto nivel del Cliente @firma son las mismas disponibles para los integradores que lo utilizan a modo de applet desde HTML. Las clases y m\u00e9todos p\u00fablicos del Cliente @firma vienen documentados en la versi\u00f3n del Javadoc orientada a integradores. Las principales ventajas de utilizar esta clase para hacer uso del Cliente son: Nos permiten reutilizar los conocimientos adquiridos en el despliegue del Cliente en el sistema del usuario. Podremos utilizar los mismos m\u00e9todos que se utilizan en este entorno. Nos proporciona el mismo comportamiento del que disponemos en el despliegue com\u00fan del Cliente. Por ejemplo, para firmar nos bastar\u00e1 con seleccionar la configuraci\u00f3n adecuada (formato, modo, almac\u00e9n, certificado,\u2026) y llamar al m\u00e9todo de firma. No tendremos que preocuparnos de cargar el m\u00f3dulo del formato de firma escogido, extraer el certificado del almac\u00e9n, etc. Es importante saber que la clase applet del Cliente, denominada SignApplet, no fue desarrollada con esta finalidad y, en la actual versi\u00f3n del Cliente, no funciona en todos los casos de uso soportados por el Cliente, por existir operaciones que requieren de interacci\u00f3n con el usuario. Por este motivo, no se garantiza que se puedan acceder a todas las funcionalidades del Cliente a trav\u00e9s de esta interfaz . Un ejemplo de esto es el acceso a almacenes de certificados en fichero (P12/PFX y JKS), que no est\u00e1n soportados para las operaciones de multifirma. Para cargar el Cliente en una aplicaci\u00f3n Java y utilizar el Applet como interfaz de acceso a sus funcionalidades, haremos: \u2026 // Cargamos el cliente SignApplet afirma = new SignApplet(); \u2026 Una vez cargado el Cliente haremos uso de las funciones descritas en este manual y el JavaDoc para integradores del Cliente para realizar las distintas operaciones soportadas. Siempre que se desee realizar una nueva operaci\u00f3n debe invocarse al m\u00e9todo initialize() del Cliente @firma para restaurar los valores por defecto y eliminar los resultados de anteriores operaciones. Ejemplo de integraci\u00f3n A continuaci\u00f3n se muestra un ejemplo de uso del cliente en donde se realiza una firma electr\u00f3nica usando un certificado de un almac\u00e9n PKCS#12: \u2026 // Cargamos el cliente SignApplet afirma = new SignApplet(); // Configuramos la operacion de firma afirma.setKeyStore(\"C:/almacen.p12\", \"1111\", \"P12\"); // Almacen PKCS12 // System.out.println(afirma.getCertificatesAlias()); // Imprime los alias afirma.setSelectedCertificateAlias(\"aliasCertificado\"); // Certificado afirma.setFileuri(\"C:/entrada.txt\"); // Fichero de datos afirma.setSignatureFormat(\"CAdES\"); // Formato afirma.setSignatureMode(\"Implicit\"); // Modo // Ejecutamos la operacion afirma.sign(); // Comprobamos si ocurrio un error durante la firma if (afirma.isError()) { System. err .println(\"Error en la firma: \" + afirma.getErrorMessage()); return ; } // Almacenamos la firma afirma.setOutFilePath(\"C:/salida.csig\"); afirma.saveSignToFile(); // Mostramos el resultado if (afirma.isError()) { System. err .println(\"Error al almacenar la firma: \" + afirma.getErrorMessage()); } else { System. err .println(\"La operacion finalizo correctamente\"); } \u2026 Configuraci\u00f3n del Cliente Configuraci\u00f3n de idioma El Cliente @firma tiene configurado por defecto el idioma espa\u00f1ol para los textos. Sin embargo, al iniciarse el applet se toma la configuraci\u00f3n de idioma del sistema del usuario y se configura este idioma para la aplicaci\u00f3n. Tambi\u00e9n es posible forzar el cambio de idioma para asegurar que los mensajes del Cliente se mostrar\u00e1n en un idioma concreto. Es requisito indispensable que el idioma est\u00e9 soportado por el Cliente. Si se indica un idioma no soportado o no v\u00e1lido, se configurar\u00e1 el idioma del sistema, o el idioma por defecto si este tampoco estuviese. Igualmente, si alguno de los textos necesarios no estuviese disponible en el idioma solicitado, se tomar\u00e1 del idioma por defecto. Para forzar un idioma ser\u00e1 necesario indicarlo en en el constantes.js de configuraci\u00f3n del applet. En el fichero constantes.js estableceremos la variable locale al valor, conforme las ISO 639 y 3166. Por ejemplo: var locale = \u201cen_UK\u201d; Inicializaci\u00f3n de las operaciones Antes de iniciar una operaci\u00f3n criptogr\u00e1fica se debe invocar el m\u00e9todo initialize() del Cliente, que borra las entradas y salidas de operaciones anteriores. En las bibliotecas JavaScript \u201c firma.js \u201d y \u201c constantes.js \u201d se incluye un m\u00e9todo initialize() que lo invoca al initialize() del cliente y configura diversos par\u00e1metros, como el formato de firma por defecto o el filtro de certificados. Cambio de almac\u00e9n de certificados Al ejecutar el cliente @firma como Applet se configura por defecto el almac\u00e9n de certificados del navegador o sistema operativo sobre el que se ejecuta. Seg\u00fan la configuraci\u00f3n navegador/sistema operativo el almac\u00e9n de certificados por defecto ser\u00e1: Internet Explorer Mozilla Firefox 32 Bits Mozilla Firefox 64 Bits Google Chrome / Opera Apple Safari Windows Almac\u00e9n Windows Almac\u00e9n Mozilla Almac\u00e9n Windows Almac\u00e9n Windows Almac\u00e9n Windows Linux / Solaris Almac\u00e9n Mozilla Almac\u00e9n Mozilla Almac\u00e9n Mozilla Mac OS X Almac\u00e9n Mozilla Almac\u00e9n Mozilla Llavero Mac OS X Llavero Mac OS X Leyenda: Gris = no aplica. Para detalles sobre compatibilidad consulte con la secci\u00f3n Requisitos m\u00ednimos de este mismo documento. El cliente @firma, sin embargo, permite la configuraci\u00f3n de este almac\u00e9n de certificados de tal forma que es posible indicar de qu\u00e9 almac\u00e9n deben extraerse los certificados. Esta configuraci\u00f3n se establece mediante el m\u00e9todo setKeystore(String path, String pass, String type). Este m\u00e9todo recibe, por orden: path : La ruta al almac\u00e9n de certificados que se desea utilizar (s\u00f3lo para almacenes en disco). Si es necesaria para el tipo de almac\u00e9n seleccionado y no se indica, se le mostrar\u00e1 un di\u00e1logo al usuario para que lo seleccione. pass : La contrase\u00f1a para abrir el almac\u00e9n. Aplica a cualquier almac\u00e9n que pueda estar protegido por contrase\u00f1a (PKCS#12/PFX, Mozilla Firefox configurado con clave maestra,\u2026). Si no se indica y es necesaria se le mostrar\u00e1 un di\u00e1logo al usuario para que la inserte. type : Tipo de almac\u00e9n de certificados. Los distintos par\u00e1metros admitidos son: WINDOWS : Repositorio de Microsoft Windows (MSCAPI). APPLE : Repositorio de Apple Macintosh (Llavero o KeyChain). MOZILLA : Repositorio Mozilla. Para su uso en Windows es obligatorio tener instalado Mozilla Firefox. P11 : Repositorio de tipo PKCS#11 accesible desde una biblioteca nativa del sistema. No es recomendable el uso directo de este tipo de almac\u00e9n, en su lugar deber\u00eda aconsejarse al usuario que instale el dispositivo y acceda a \u00e9l a trav\u00e9s del almac\u00e9n de certificados de su navegador. Si no se indica, se le solicitar\u00e1 al usuario la ruta y contrase\u00f1a de la biblioteca. P12 : Repositorios en disco en formato PKCS#12 o PFX. Si no se indica, se le solicitar\u00e1 al usuario la ruta y contrase\u00f1a del almac\u00e9n. Si se indica en la llamada al m\u00e9todo la contrase\u00f1a del almac\u00e9n, se utilizar\u00e1 esta tambi\u00e9n para la selecci\u00f3n de los certificados. JKS : Repositorios en disco en formato JKS. Si no se indica, se le solicitar\u00e1 al usuario la ruta y contrase\u00f1a del almac\u00e9n. Si se indica en la llamada al m\u00e9todo la contrase\u00f1a del almac\u00e9n, se utilizar\u00e1 esta tambi\u00e9n para la selecci\u00f3n de los certificados. SINGLE : Certificado suelto en disco. Estos certificados s\u00f3lo disponen de clave p\u00fablica, por lo que no son aptos para firmar. Si no se indica, se le solicitar\u00e1 al usuario la ruta del certificado. JAVACE : Repositorios en disco en formato Java Case Exact. Si no se indica, se le solicitar\u00e1 al usuario la ruta y contrase\u00f1a del almac\u00e9n. Si se indica en la llamada al m\u00e9todo la contrase\u00f1a del almac\u00e9n, se utilizar\u00e1 esta tambi\u00e9n para la selecci\u00f3n de los certificados. WINADDRESSBOOK : Repositorio de Certificados de Otras Personas de Windows. Este almac\u00e9n no contiene certificados personales de firma, por lo que no se recomienda su uso para tal fin. WINDOWS-CA : Repositorio de Certificados de Autoridades de Certificaci\u00f3n de Windows. Este almac\u00e9n no contiene certificados personales de firma, por lo que no se recomienda su uso para tal fin. WINDOWS-ROOT : Repositorio de Certificados Ra\u00edz de Windows. Este almac\u00e9n no contiene certificados personales de firma, por lo que no se recomienda su uso para tal fin. En caso de seleccionar un almac\u00e9n no v\u00e1lido (el almac\u00e9n de Apple en Windows, por ejemplo) u ocurrir un error durante su inicializaci\u00f3n, el cliente se reconfigurar\u00e1 al almac\u00e9n que se tuviese configurado en ese momento. Forzar ruta del almac\u00e9n de Mozilla Firefox El Applet Cliente @firma detecta autom\u00e1ticamente d\u00f3nde est\u00e1 instalado Mozilla Firefox y, de esta forma, c\u00f3mo acceder al almac\u00e9n de certificados del navegador y cu\u00e1l es el almac\u00e9n correspondiente al usuario que est\u00e1 usando actualmente el navegador, ya Firefox permite la existencia de varios perfiles de usuario dentro de la misma cuenta de usuario del sistema operativo. Existen ocasiones muy concretas en las que no es posible detectar d\u00f3nde est\u00e1 instalado el navegador como, por ejemplo, si se utiliza un navegador Firefox Portable o si se intenta acceder al almac\u00e9n de una cuenta concreta de Firefox sin usar el propio navegador. En estos casos, el Applet Cliente @firma usar\u00e1 las siguientes variables del sistema para localizar los recursos necesarios: NSS_HOME: Directorio con las bibliotecas NSS compatibles con la versi\u00f3n de a la que pertenezca el almac\u00e9n al que deseamos acceder. PROFILE_HOME: Directorio con el perfil de usuario de Firefox al que pertenece el almac\u00e9n. Si un integrador desease desde un sistema integrado acceder a un almac\u00e9n de una cuenta concreta de Firefox, deber\u00e1 configurar estas variables de entorno. Selecci\u00f3n y filtrado de certificados Selecci\u00f3n de los certificados para operaciones criptogr\u00e1ficas Muchas operaciones criptogr\u00e1ficas de las soportadas por el cliente @firma requieren que se seleccione un certificado de usuario como, por ejemplo, la firma. Los certificados accesibles por el applet de firma son aquellos disponibles desde el repositorio de certificados del sistema o navegador y es posible seleccionar uno de ellos mediante el m\u00e9todo del cliente setSelectedCertificateAlias(String) al que debe pasarse uno de los certificados recogidos mediante el m\u00e9todo getCertificatesAlias() . Es posible permitir al usuario seleccionar un certificado directamente a trav\u00e9s de un di\u00e1logo de selecci\u00f3n de certificados. Podemos mostrar este di\u00e1logo a trav\u00e9s del m\u00e9todo showCertSelectionDialog() , que devuelve el alias del certificado. Cuando el usuario selecciona un certificado a trav\u00e9s de este m\u00e9todo, este queda autom\u00e1ticamente seleccionado, de modo que es posible recuperarlo mediante los m\u00e9todos getSignCertificate() y getSignCertificateBase64Encoded() , detallados en el apartado \u201cObtener el certificado usado para firmar\u201d. En caso no seleccionarse un certificado, al realizar una operaci\u00f3n criptogr\u00e1fica que lo requiera, se solicitar\u00e1 \u00e9ste autom\u00e1ticamente al usuario mediante el di\u00e1logo de selecci\u00f3n. < Figura 5: Selecci\u00f3n de certificado Por defecto, s\u00f3lo se mostrar\u00e1n aquellos certificados aptos para realizar una firma electr\u00f3nica (independientemente de como se declare en campo KeyUsage explicado en siguiente apartado). Si desea que se muestren todos los certificados, a fin de seleccionar uno con un fin distinto al de firma, utilice el m\u00e9todo setShowOnlySignatureCertificates(boolean) . Al pasar el valor, false a este m\u00e9todo se mostrar\u00e1n todos los certificados del almac\u00e9n seleccionado, independientemente de si son v\u00e1lidos para firma o no. Para indicar los receptores de los sobre digitales se deber\u00e1n introducir las direcciones de sus certificados exportados (ficheros CER o DER). El m\u00e9todo utilizado es setRecipientsToCMS(String) y recibe una cadena con las rutas de los certificados separadas por el car\u00e1cter \u2018\\n\u2019. Por ejemplo: clienteFirma.setRecipientsToCMS(\"C:/detinatario1.cer\\nC:/destinatario2.cer\" ); De forma independiente a los receptores indicados mediante el m\u00e9todo setRecipientsToCMS , es posible configurar receptores adicionales de sobre digital mediante el m\u00e9todo addRecipientToCMS que recibe el certificado del receptor codificado en base 64. Para eliminar alguno de los receptores agregados mediante este m\u00e9todo puede utilizarse removeRecipientToCMS . Un punto importante a destacar es que el m\u00e9todo getCertificateAlias() proporciona los alias reales con los que los certificados han sido dados de alta en los almacenes (que son siempre los que deben usarse con setSelectedCertificateAlias(String) ), pero que el di\u00e1logo de selecci\u00f3n de certificado solicita la selecci\u00f3n en base a un \u201cnombre descriptivo\u201d, que se compone a partir del Nombre Com\u00fan (CN) del titular, el alias real si procede y el nombre de la entidad emisora. Este \u201cnombre descriptivo\u201d se usa porque en muchas ocasiones los alias reales no son realmente descriptivos o est\u00e1n en formatos poco pr\u00e1cticos (como X.500). Filtros de certificados El Cliente de firma incorpora una funcionalidad que permite hacer una preselecci\u00f3n de los certificados que se muestran para selecci\u00f3n al usuario, de forma que se puedan descartar a priori los no aceptados o no apropiados y as\u00ed disminuir la probabilidad de que el usuario erre en la elecci\u00f3n del certificado adecuado. El establecimiento de los filtros se realiza mediante el m\u00e9todo addRFC2254CertificateFilter(String, String, boolean) , que admite tres par\u00e1metros: Filtro a aplicar en el campo Principal del titular del certificado X.509. Debe proporcionarse una cadena de texto con una condici\u00f3n de filtro seg\u00fan la normativa RFC 2254. Filtro a aplicar en el campo Principal del emisor del certificado X.509 Debe proporcionarse una cadena de texto con una condici\u00f3n de filtro seg\u00fan la normativa RFC 2254. Se indicar\u00e1 true si se desea que solo se muestren los certificados aptos para firma electr\u00f3nica seg\u00fan el campo KeyUsage del certificado X.509, false si no se desea hacer distinci\u00f3n por el valor de este campo. El paso de null en cualquiera de los par\u00e1metros indica que, por el criterio correspondiente, no se aplicar\u00e1 ning\u00fan filtro. Para m\u00e1s informaci\u00f3n, consulte la documentaci\u00f3n JavaDoc. Ejemplos de uso: Selecci\u00f3n entre certificados de firma de DNIe: clienteFirma.addRFC2254CertificateFilter(null, \"cn=AC DNIE*\", true ); Selecci\u00f3n entre cualquier certificado marcado como apto para firma electr\u00f3nica: clienteFirma.addRFC2254CertificateFilter(null, null, true ); Selecci\u00f3n \u00fanicamente entre certificados emitidos por Camerfirma: clienteFirma.addRFC2254CertificateFilter(null, \"o=Camerfirma\" , false ); Selecci\u00f3n con diversos criterios en un mismo Principal: clienteFirma.addRFC2254CertificateFilter( \"(&(OU=Clase 2 persona fisica)(C=ES))\" , null, false ); Selecci\u00f3n entre certificados de un titular cuyo n\u00famero de DNI sea \u201c123456789Z\u201d (funciona con la mayor\u00eda de los emisores de certificados, como DNIe, FNMT, etc.): clienteFirma.addRFC2254CertificateFilter( \"SERIALNUMBER=123456789Z\" , null, false ); Selecci\u00f3n del certificado de firma del DNIe de un titular con n\u00famero de DNI \u201c123456789Z\u201d: clienteFirma.addRFC2254CertificateFilter( \"SERIALNUMBER=123456789Z\", \"cn=AC DNIE*\", true ); Un filtro establecido mediante este m\u00e9todo bloquear\u00eda todos aquellos certificados que no cumpliesen las 3 condiciones indicadas en el filtro: subject , issuer y keyusage . Utilizando varias veces este m\u00e9todo podemos agregar nuevos filtros, de tal forma que un certificado ser\u00e1 v\u00e1lido cuando cumpla al menos uno de ellos. Ejemplo de uso: Selecci\u00f3n del certificado de firma del DNIe y los certificados expedidos por Camerfirma: clienteFirma.addRFC2254CertificateFilter(null, \"cn=AC DNIE*\", true ); clienteFirma.addRFC2254CertificateFilter(null, \"o=Camerfirma\" , false ); Para borrar los filtros establecidos, ya sea para obtener todos los certificados del almac\u00e9n o introducir nuevos filtros, usaremos el m\u00e9todo resetFilters() . Es posible solicitar al cliente que, en caso de que s\u00f3lo exista un certificado en el almac\u00e9n o s\u00f3lo un certificado pase los filtros indicados, se seleccione autom\u00e1ticamente, sin dar al usuario la posibilidad de elegir. Esto se puede hacer mediante el m\u00e9todo setMandatoryCertificate(boolean) . Por defecto, se mostrar\u00e1 el di\u00e1logo de selecci\u00f3n aunque s\u00f3lo haya un certificado disponible para seleccionar. Si el filtro devolviese m\u00e1s de un certificado, se ignorar\u00eda el valor establecido mediante setMandatoryCertificate(boolean) . NOTA IMPORTANTE SOBRE FILTROS RFC2254: Los nombres de los campos X.500/LDAP que encontramos en la identificaci\u00f3n del titular y el emisor de un certificado, se codifican internamente mediante un OID ASN.1 consistente en una sucesi\u00f3n de n\u00fameros separados por puntos. Estos OID se traducen para una mayor facilidad de lectura en palabras asociadas. Por ejemplo, el OID 2.5.4.4 identifica al campo apellido, y se traduce por la palabra SURNAME . No obstante, el diccionario de traducci\u00f3n de OID a palabras legibles no es un\u00edvoco, y existe la posibilidad de que a un mismo OID le correspondan dos palabras. Siguiendo con el ejemplo anterior, aunque la mayor\u00eda de los diccionarios asocian la palabra SURNAME al OID 2.5.4.4 , algunos le asocian la palabra SN . Adicionalmente, otro inconveniente que podemos encontrar es que un determinado diccionario de OID no contenga ninguna palabra asociada a un OID particular. Un ejemplo de este caso podr\u00edamos encontrarlo en el OID 0.2.262.1.10.12.0 , que aunque corresponde a la palabra liabilityLimitationFlag no figura en los diccionarios comunes. Cuando un OID no figura en un diccionario se usa directamente el OID. El Cliente @firma utiliza el diccionario de OID de Java, que puede diferir del usado por el sistema operativo y de los usados por otras aplicaciones. Para evitar problemas de filtrado debidos a estas circunstancias, debe construir siempre los filtros previendo que un campo puede aparecer referenciado por cualquiera de sus nombres o por su OID . Por ejemplo, si desea filtrar por apellido, la expresi\u00f3n de filtrado debe ser construida de forma que funcione correctamente tanto si este aparece referenciado por su OID ( 2.5.4.4 ) como por cualquiera de sus palabras descriptivas ( SURNAME , SN , etc.). Independientemente de que se utilicen en el filtro todas las palabras posibles con las que se identifique un OID, listamos a continuaci\u00f3n las opciones preferentes para los OID m\u00e1s comunes para los que se conocen varias de estas palabras: 2.5.4.4: SURNAME 2.5.4.4: GIVENNAME 1.2.840.113549.1.9.1: EMAILADDRESS 2.5.4.12 = T 2.5.4.46 = DNQ 2.5.4.43 = INITIALS 2.5.4.44 = GENERATION Consulte la documentaci\u00f3n sobre la normativa RFC 2254 para obtener m\u00e1s informaci\u00f3n de c\u00f3mo construir adecuadamente sus filtros. Informaci\u00f3n adicional: Copia de la normativa RFC 2254: http://www.faqs.org/rfcs/rfc2254.html Ejemplo de diccionario de OID: http://www.cs.auckland.ac.nz/~pgut001/dumpasn1.cfg La marca de certificado apto para firma electr\u00f3nica en el atributo KeyUsage de un certificado X.509 La inmensa mayor\u00eda de los certificados digitales usan el atributo X.509 KeyUsage para determinar el uso de un certificado (autenticaci\u00f3n, firma electr\u00f3nica, SSL servidor, etc.), por lo que distinguir por este para la selecci\u00f3n del certificado apropiado para las operaciones de firma es en general una buena opci\u00f3n. No obstante, la mayor\u00eda de los certificados emitidos por la FNMT-RCM (CERES, APE, etc.) no siguen las normativas internacionales en este sentido y en el atributo KeyUsage no marcan que son adecuados para firma electr\u00f3nica pese a que se publicitan como aptos para dicho uso. Debido a esta falta de adecuaci\u00f3n, si se marca mediante el \u00faltimo par\u00e1metro del m\u00e9todo anteriormente comentado que solo deben mostrarse certificados aptos para firma, no se mostrar\u00e1 ning\u00fan certificado emitido por la FNMT-RCM. Los certificados del DNIe sin embargo si siguen las normativas internacionales y marcan con los atributos correspondientes el uso, encontr\u00e1ndonos en cada DNIe un certificado apto para firma y otro que no lo es (el de autenticaci\u00f3n). Para consultar el significado preciso de cada uno de los valores del campo KeyUsage consulte con el emisor de sus certificados. Configuraci\u00f3n de firma Algoritmos de firma digital El cliente permite usar distintos algoritmos de firma digital, siempre especificados con el formato A with B, donde A es el algoritmo de huella digital y B el de cifrado asim\u00e9trico. Entre los algoritmos soportados encontramos: SHA1withRSA (por defecto) SHA256withRSA SHA384withRSA SHA512withRSA (es el m\u00e1s seguro) El algoritmo a utilizar se puede cambiar con el m\u00e9todo setSignatureAlgorithm , que recibe como par\u00e1metro una de las cadenas citadas. No se soportan los algoritmos obsoletos MD2 o MD5. NOTAS IMPORTANTES: No todas las operaciones soportan todos los algoritmos: Los formatos de firma XAdES y XMLDSig solo soportan firmas con algoritmos SHA-2 (SHA256withRSA, SHA384withRSA y SHA512withRSA) en versiones posteriores a Java 6 update 18. En las primeras versiones de Java 7, se produjo un error de regresi\u00f3n de Java que trajo de vuelta este problema. En las \u00faltimas versiones de Java 7 este error est\u00e1 solucionado. Referencia: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6845600 No todos los almacenes de certificados soportan todos los algoritmos: SHA256withRSA, SHA384withRSA y SHA512withRSA no est\u00e1n soportados en la configuraci\u00f3n tradicional del almac\u00e9n de Windows hasta versiones avanzadas de Java 6. En las primeras versiones de java 7 tampoco es posible. Los formatos de firma no gen\u00e9ricos (ODF, OOXML, PDF) ignorar\u00e1n cualquier configuraci\u00f3n especificada por el integrador que no est\u00e9 soportada por su correspondiente normativa. Por ejemplo, modo de firma expl\u00edcito, algoritmos de firma no soportados\u2026 Formato de firma electr\u00f3nica El cliente permite crear firmas digitales en distintos formatos (por defecto CAdES). Globalmente se soportan los siguientes formatos y normativas de firma electr\u00f3nica: CMS: Representado por la cadena \u201c CMS/PKCS#7 \u201d. CAdES: Representado por la cadena \u201c CAdES \u201d. XMLDSig Internally Detached: Representado por la cadena \u201c XMLDSig Detached \u201d. XMLDSig Enveloping: Representado por la cadena \u201c XMLDSig Enveloping \u201d. XMLDSig Enveloped: Representado por la cadena \u201c XMLDSig Enveloped \u201d. XAdES Internally Detached: Representado por la cadena \u201c XAdES Detached \u201d. XAdES Enveloping: Representado por la cadena \u201c XAdES Enveloping \u201d. XAdES Enveloped: Representado por la cadena \u201c XAdES Enveloped \u201d. Factura Electr\u00f3nica: Representado por la cadena \u201c FacturaE \u201d. PAdES: Representado por la cadena \u201c Adobe PDF \u201d. ODF (Open Document Format): Representado por la cadena \u201c ODF \u201d. OOXML (Office Open XML): Representado por la cadena \u201c OOXML \u201d. El formato se puede cambiar con el m\u00e9todo setSignatureFormat que recibe como par\u00e1metro la cadena que representa al formato en cuesti\u00f3n. Las variantes EPES de los formatos de firma que las soportan se generar\u00e1n autom\u00e1ticamente al configurar el formato de firma correspondiente y una pol\u00edtica de firma (consulte el apartado Pol\u00edtica de Firma). Modos de firma electr\u00f3nica Determinados formatos de firma electr\u00f3nica soportan los llamados, modos de firma. El modo de firma determina si los datos firmados se incorporar\u00e1n o no junto con la firma electr\u00f3nica generada. Los modos de firma existentes son: Impl\u00edcito: Representado por la cadena \u201c implicit \u201d. Expl\u00edcito: Representado por la cadena \u201c explicit \u201d. El modo de firma se puede cambiar con el m\u00e9todo setSignatureMode que recibe como par\u00e1metro la cadena que representa al modo en cuesti\u00f3n. Los par\u00e1metros son insensibles a may\u00fasculas y min\u00fasculas. Los formatos soportados por el cliente @firma que admiten configuraci\u00f3n de modo son: CMS/PKCS#7 CAdES XMLdSig Detached XMLdSig Enveloping XAdES Detached XAdES Enveloping Un formato de firma puede definir modos propios v\u00e1lidos para su configuraci\u00f3n. Pol\u00edtica de Firma El cliente permite especificar, para cada firma electr\u00f3nica, la pol\u00edtica a la que esta se adec\u00faa. Los formatos de firma, soportados por el cliente, que admiten pol\u00edticas de firma son CAdES, PDF/PAdES y XAdES (en sus variantes Detached, Enveloping y Enveloped). En el momento de establecer en el cliente la pol\u00edtica de firma para una firma CAdES, se generar\u00e1 una firma CAdES-EPES en lugar de la firma CAdES-BES tradicional. De igual manera, al establecer la pol\u00edtica de firma para una firma XAdES o PAdES se generar\u00e1 una firma XAdES-EPES o PAdES-EPES, respectivamente. Las firmas con pol\u00edtica generadas por el cliente @firma son de referencia externa. Es decir, la pol\u00edtica no se incluye en la propia firma, tan s\u00f3lo una referencia a la misma. Es posible establecer una pol\u00edtica de firma en el cliente @firma mediante el m\u00e9todo setPolicy que recibe como par\u00e1metros 4 cadenas: Identificador: URI identificadora de la pol\u00edtica de firma (normalmente una URL hacia el XML o el ASN.1 que formaliza la pol\u00edtica) u OID (que puede estar en forma de URN) identificador de la pol\u00edtica. Descripci\u00f3n: Descripci\u00f3n breve de la pol\u00edtica. Calificador: URL calificadora de la pol\u00edtica de firma (normalmente la URL apunta a un documento en formato PDF que describe la pol\u00edtica). Hash: Huella digital SHA-1 en base64 de la pol\u00edtica de firma. Ejemplo de uso: setPolicy( \"urn:oid:2.16.724.1.3.1.1.2.1.9\", \"Politica de firma electronica para las Administraciones Publicas en Espana\", \"https://sede.060.gob.es/politica_de_firma_anexo_1.pdf\", \"G7roucf600+f03r/o0bAOQ6WAs0=\" ); En cualquier caso, para el establecimiento de estos par\u00e1metros, consulte con detenimiento los documentos de su pol\u00edtica de firma y establezca los valores que all\u00ed se indiquen. Restricci\u00f3n de formatos, algoritmos y modos de firma en las pol\u00edticas de firma La mayor\u00eda de las pol\u00edticas de firma restringen la forma en la que se puede realizar una firma electr\u00f3nica acorde a la pol\u00edtica concreta. Esta restricci\u00f3n puede afectar a casi cualquier aspecto de la firma, y entre estos aspectos encontramos: Los algoritmos de firma (SHA1withRSA, SHA512withRSA, etc.) que pueden utilizarse. El tipo de firma admitido (CAdES, PAdES, XAdES, etc.). Las variantes de firma admitidas (expl\u00edcitas, impl\u00edcitas, enveloping , enveloped , externally detached , internally detached , etc.). Por ejemplo, las firmas XAdES-EPES conformes a la pol\u00edtica de firma de la AGE en su versi\u00f3n 1.9 deben ser siempre de tipo \u201c Internally Detached \u201d (preferiblemente) o \u201c Enveloped \u201d. Etc. Si especifica una pol\u00edtica de firma en sus firmas electr\u00f3nicas, debe asegurarse de que la totalidad de los par\u00e1metros de esta sean compatibles con dicha pol\u00edtica, leyendo con detenimiento tanto la documentaci\u00f3n del Cliente @firma como la versi\u00f3n PDF de descripci\u00f3n de la pol\u00edtica de firma. Configuraci\u00f3n de sobres digitales Selecci\u00f3n de destinatarios desde LDAP Adem\u00e1s de la posibilidad de seleccionar los destinatarios de un sobre digital a partir de sus certificados de clave p\u00fablica almacenados en disco, el cliente @firma permite la configuraci\u00f3n de un LDAP para seleccionar los certificados que este tenga publicados. El procedimiento para la selecci\u00f3n de estos certificados es la siguiente: Configuraci\u00f3n del servidor LDAP al que se desea acceder. Esto lo conseguimos mediante el m\u00e9todo setLdapConfiguration (String address, String port, String root) . Este m\u00e9todo recibe: address : Direcci\u00f3n URL del LDAP. port : Puerto a trav\u00e9s del que se realiza la conexi\u00f3n. Si no se indica se usar\u00e1 el puerto 389, el por defecto para LDAP. root : Direcci\u00f3n ra\u00edz del LDAP (actualmente sin uso). Selecci\u00f3n del certificado que se desea recuperar del LDAP. Para ello se utilizar\u00e1 el m\u00e9todo setLdapCertificatePrincipal , que recibe como par\u00e1metro el principal del certificado que deseamos. Recuperaci\u00f3n del certificado en base 64 mediante el m\u00e9todo getLdapCertificate . Configuraci\u00f3n del destinatario del sobre indic\u00e1ndolo mediante el m\u00e9todo addRecipientToCMS , que recibe como par\u00e1metro el certificado en base 64 recuperado del LDAP. Pueden agregase m\u00e1s de un destinatario de esta manera. Una vez establecido un destinatario, puede eliminarse mediante el m\u00e9todo removeRecipientToCMS al que se le pasa como par\u00e1metro el mismo certificado en base 64 con el que se estableci\u00f3. Configuraci\u00f3n de cifrado Algoritmos de cifrado Los algoritmos de cifrado permitidos son los siguientes: Cifrado con clave AES (por defecto) ARCFOUR Blowfish DES DESede (triple DES o 3DES) RC2 Cifrado con contrase\u00f1a PBEWithSHA1AndDESede (basado en DESede/3DES) PBEWithSHA1AndRC2_40 (basado en RC2) PBEWithMD5AndDES (basado en DES) Para establecer el algoritmo deberemos invocar la funci\u00f3n setCipherAlgorithm y podemos recuperar el algoritmo actual con el m\u00e9todo getCipherAlgorithm . Modo de clave Definen de qu\u00e9 manera se trata la clave de cifrado. Existen tres posibilidades GENERATEKEY, USERINPUT y PASSWORD. GENERATEKEY: La clave se generar\u00e1 autom\u00e1ticamente. USERINPUT: El usuario deber\u00e1 establecer la clave en base 64. PASSWORD: La clave de usuario se generar\u00e1 a partir de una contrase\u00f1a. Esto requiere el uso de algoritmos de cifrado dise\u00f1ados con este objetivo (algoritmos PBE). El modo de clave se establece mediante setKeyMode y se recupera con getKeyMode . Clave y contrase\u00f1a de cifrado Para obtener la clave que se ha utilizado para el cifrado/descifrado deberemos ejecutar el m\u00e9todo getKey , el cual nos devolver\u00e1 la clave codificada en base 64. Para fijar una clave para el cifrado o descifrado de datos usaremos setKey , adjuntando como par\u00e1metro la clave deseada en base 64. En el caso de haber especificado el modo de clave PASSWORD (consultar apartado Modo de clave), en lugar de una clave de cifrado ser\u00e1 necesario especificar una contrase\u00f1a de cifrado. Para establecer la contrase\u00f1a de cifrado/descifrado se utilizar\u00e1 el m\u00e9todo setPassword . Para recuperar la contrase\u00f1a establecida se utilizar\u00e1 el m\u00e9todo getPassword . ADVERTENCIA: Las contrase\u00f1as de cifrado/descifrado no podr\u00e1n contener caracteres no ASCII. Almac\u00e9n de claves de cifrado El cliente @firma v3.2 y superiores permiten a los usuarios almacenar sus claves de cifrado en un almac\u00e9n de claves protegido por contrase\u00f1a. Es posible configurar el cliente @firma para que, en el momento de autogenerar una clave de cifrado se ofrezca al usuario la posibilidad de almacenarla en su almac\u00e9n personal de claves. Para esto ser\u00e1 necesario configurar el Cliente en modo \u201cGENERATEKEY\u201d tal como se indica en el apartado Modo de clave. En caso de que el usuario acepte almacenar la clave en su almac\u00e9n, se comprobar\u00e1 que este ya exista. Si exist\u00eda, se le solicitar\u00e1 al usuario la contrase\u00f1a para abrirlo y el alias con el que desea almacenar la clave. Si no exist\u00eda, se le indicar\u00e1 al usuario y se le dar\u00e1 la posibilidad de crearlo para lo que se le solicitar\u00e1 la contrase\u00f1a con la que desea protegerlo. Tras crear el almac\u00e9n se proceder\u00e1 a almacenar la clave tal como ya se indic\u00f3. En caso de rechazarse el guardado de la clave en el almac\u00e9n, se cancelar\u00e1 toda la operaci\u00f3n de cifrado pues el que se hubiese habilitado es signo de que la web delegaba en el usuario la gesti\u00f3n de la clave y este posiblemente no tenga posibilidad de hacerlo, ya que es posible que no se le haya mostrado la clave. El almac\u00e9n de claves se guarda con el nombre ciphkeys.jceks en el directorio ra\u00edz del usuario activo. Al encontrarse en este directorio, el almac\u00e9n ser\u00e1 distinto para cada usuario del sistema que utilice el Cliente y un usuario no podr\u00e1 acceder al almac\u00e9n del resto de usuarios. Tenga en cuenta que si este fichero es eliminado no se podr\u00e1n recuperar las claves almacenadas en \u00e9l, por lo que es posible que no pueda recuperar los datos cifrados con el Cliente. El integrador puede permitir al usuario utilizar sus claves ya almacenadas en el almac\u00e9n para cifrar nuevos datos. Para esto s\u00f3lo ser\u00eda necesario configurar el modo de clave del Cliente al valor \u201cUSERINPUT\u201d (consultar apartado Modo de clave ) y ejecutar la operaci\u00f3n de cifrado. Cuando se desee descifrar un contenido y no se haya indicado directamente la clave para el descifrado, se le preguntar\u00e1 al usuario si desea tomar la clave de su almac\u00e9n personal. En caso de aceptar, se le pedir\u00e1 la contrase\u00f1a del almac\u00e9n y se le dar\u00e1 a elegir mediante un di\u00e1logo modal entre las claves almacenadas (de las que se mostrar\u00e1 el alias asignado y el algoritmo de cifrado para el que fueron generadas). Si no existiese el almac\u00e9n de claves o el usuario no quisiera utilizarlo, se le preguntar\u00eda directamente por la clave de cifrado. Cuando se activa el modo de clave para el cifrado/descifrado con contrase\u00f1as (modo \u201cPASSWORD\u201d establecido seg\u00fan el apartado Modo de clave ) el almac\u00e9n de claves queda inhabilitado. Queda a elecci\u00f3n del integrador la posibilidad de permitir que el usuario pueda o no almacenar la clave de cifrado en su almac\u00e9n personal de claves o utilizar las almacenadas para cifrar. Esto puede hacerlo mediante el m\u00e9todo setUseCipherKeystore al que se le puede pasar un true o un false para permitir o no su uso (por defecto se permitir\u00e1 almacenarlas). Este m\u00e9todo no afecta al descifrado de datos. Si no se indicase la clave para el descifrado y el usuario dispusiese de un almac\u00e9n de claves, siempre se le dar\u00e1 la posibilidad de descifrar mediante una de las claves almacenadas. A continuaci\u00f3n se muestran algunos ejemplos para el uso del almac\u00e9n de claves de cifrado: Cifrado con las opciones por defecto (algoritmo de cifrado AES con una clave autogenerada) permitiendo que el usuario almacene la clave en su almac\u00e9n: \u2026 clienteFirma.setFileuri( \u201cfichero_texto\u201d ); clienteFirma.cipherData(); var cipheredData = clienteFirma. getCipherData(); \u2026 Cifrado con las opciones por defecto (algoritmo de cifrado AES con una clave autogenerada) NO permitiendo que el usuario almacene la clave en su almac\u00e9n: \u2026 clienteFirma.setFileuri( \u201cfichero_texto\u201d ); clienteFirma.setUseCipherKeyStore( false ); clienteFirma.cipherData(); var cipheredData = clienteFirma. getCipherData(); \u2026 Cifrado con una clave tomada del almac\u00e9n del usuario (si no existiese se solicitar\u00eda directamente al usuario): \u2026 clienteFirma.setFileuri( \u201cfichero_texto\u201d ); clienteFirma.setKeyMode( \u201cUSERINPUT\u201d ); clienteFirma.cipherData(); var cipheredData = clienteFirma. getCipherData(); \u2026 Descifrado con una clave tomada del almac\u00e9n del usuario: \u2026 clienteFirma.setFileuri( \u201cfichero_cifrado\u201d ); clienteFirma.decipherData(); var plainData = clienteFirma. getPlainData(); \u2026 Otras funcionalidades Guardar la firma en un fichero El m\u00e9todo saveSignToFile permite guardar la \u00faltima firma generada en un fichero. Se puede especificar la ruta al fichero con setOutFilePath , que recibe una cadena con la ruta al fichero de salida. Si no se especifica, se permitir\u00e1 elegir al usuario. Si el integrador es quien ha decidido la ruta de guardado mediante el m\u00e9todo setOutFilePath , se pedir\u00e1 confirmaci\u00f3n al usuario para el guardado del fichero. Si el fichero ya existe, se pide confirmaci\u00f3n: < Figura 7: Di\u00e1logo para confirmar la sobreescritura de ficheros Obtener el certificado usado para firmar Es posible recuperar el certificado utilizado en la \u00faltima operaci\u00f3n de firma mediante el m\u00e9todo getSignCertificate . Este m\u00e9todo obtiene una instancia de la clase X509Certificate de Java. El m\u00e9todo getSignCertificateBase64Encoded devuelve una cadena de texto con el certificado, codificado en base 64, utilizado en para la \u00faltima firma realizada. El certificado no estar\u00e1 delimitado por ninguna cadena ASCII ni car\u00e1cter extra. Leer el contenido de un fichero de texto El m\u00e9todo getTextFileContent que recibe como par\u00e1metro una URI a un fichero devuelve el contenido del mismo como una cadena. Si el fichero est\u00e1 almacenado en local, la URI comenzar\u00e1 por \u201cfile:///\u201d. Leer el contenido de un fichero en Base64 El m\u00e9todo getFileBase64Encoded que recibe dos par\u00e1metros (ruta al fichero y un booleano que indica si mostrar o no gr\u00e1ficamente al usuario el progreso en la lectura del fichero). En caso de producirse un error se devolver\u00e1 null . Convertir un texto plano a Base64 El m\u00e9todo getBase64FromText recibe como par\u00e1metros un texto plano y el nombre de un juego de caracteres y codifica este primero a base 64 en base al juego de caracteres indicado. En caso de producirse un error se devolver\u00e1 null . Es importante tener en cuenta que el indicar un juego de caracteres u otro en este m\u00e9todo no implica que el texto se recodifique antes de convertirse en Base64, sino que la secuencia interna de caracteres se interprete de una u otra manera. En caso de dudas sobre el juego de caracteres m\u00e1s apropiado a usar, se debe especificar null , y el sistema usar\u00e1 el por defecto o el m\u00e1s adecuado. Este aspecto es de especial relevancia en el caso de textos que representen XML bien formados, ya que la especificaci\u00f3n de un juego de caracteres inadecuado provocar\u00e1 la introducci\u00f3n de caracteres extra\u00f1os que invalidar\u00e1n el XML. Obtener el hash de un fichero El m\u00e9todo getFileHashBase64Encoded devuelve una cadena con el hash de un fichero codificado en base 64. En caso de producirse un error se devolver\u00e1 null . Obtener la ruta de un fichero Para permitir a un usuario obtener la ruta completa de un fichero el cliente dispone del m\u00e9todo loadFilePath(String, String, String). Este m\u00e9todo abre una ventana modal para la selecci\u00f3n de un fichero. Es posible configurar el di\u00e1logo de selecci\u00f3n a trav\u00e9s de los par\u00e1metros que recibe la funci\u00f3n y que son respectivamente: El t\u00edtulo de la ventana de selecci\u00f3n. El listado de extensiones permitidas separadas por \u201c$%$\u201d. La descripci\u00f3n del fichero que se busca. Todos los par\u00e1metros pueden ser nulos. La salida de este m\u00e9todo puede utilizarse para configurar la entrada del cliente mediante el m\u00e9todo setFileuri . ADVERTENCIA: Este m\u00e9todo bloquea el script desde el que se ejecuta a la espera de que el usuario seleccione un fichero mediante el di\u00e1logo mostrado. Este comportamiento puede hacer que algunos navegadores muestren al usuario una advertencia informando que el script est\u00e1 ocupado y puede ser da\u00f1ino, d\u00e1ndole la posibilidad de bloquearlo. En caso de que se desee evitar esta interferencia, es responsabilidad del integrador ejecutar este m\u00e9todo de forma as\u00edncrona al resto del script (por ejemplo, mediante AJAX). Obtener la ruta de un directorio Para permitir a un usuario obtener la ruta completa de un directorio puede hacerse uso el m\u00e9todo selectDirectory . Este m\u00e9todo devuelve la ruta absoluta al directorio. ADVERTENCIA: Este m\u00e9todo bloquea el script desde el que se ejecuta a la espera de que el usuario seleccione un directorio mediante el di\u00e1logo mostrado. Este comportamiento puede hacer que algunos navegadores muestren al usuario una advertencia informando que el script est\u00e1 ocupado y puede ser da\u00f1ino, d\u00e1ndole la posibilidad de bloquearlo. En caso de que se desee evitar esta interferencia, es responsabilidad del integrador ejecutar este m\u00e9todo de forma as\u00edncrona al resto del script (por ejemplo, mediante AJAX). Ejemplos de uso Junto al cliente se distribuyen los siguientes ficheros HTML de ejemplo de uso del cliente: demoMultifirma . html : Ejemplos de firma, co-firma y contra-firma demoMultifirmaMasiva .*html *: Ejemplo de multifirma masiva program\u00e1tica. demoFirmaDirectorios .*html *: Ejemplo de multifirma masiva sobre directorios. demoCifrado.html: Ejemplo de cifrado. demoSobreDigital.html : Ejemplo de CMS encriptado, CMS envuelto y CMS firmado y envuelto. demoKeyStores.html : Ejemplo de la funcionalidad de cambio de almac\u00e9n de certificados. demoLdap.html : Ejemplo de la carga de certificados desde LDAP. Buenas pr\u00e1cticas en la integraci\u00f3n del cliente Localizar la ruta del Applet Cliente @firma Aunque la librer\u00eda que facilita el uso del cliente ( instalador.js ) toma como direcci\u00f3n por defecto de los recursos del cliente la del HTML que lo carga, es muy recomendable el establecer la ruta del Cliente expl\u00edcitamente. En concreto, el par\u00e1metro a establecer se encuentra en el fichero constantes.js : base : Ruta del directorio en el que se encuentra el Applet Cliente @firma. Esta ruta debe apuntar al directorio en donde se encuentran las construcciones de este Applet, no a ninguna construcci\u00f3n en concreto. Por ejemplo, si la localizaci\u00f3n de una de las construcciones fuese \u201chttp://www.minhap.es/clienteAfirma/ COMPLETA_j6_afirma5_core.jar\u201d la direcci\u00f3n que se deber\u00eda establecer ser\u00eda \u201chttp://www.minhap.es/clienteAfirma\u201d. Las rutas indicadas pueden ser absolutas o relativas. Las rutas absolutas deben comenzar por \"file:///\" (n\u00f3tese la triple barra), \"http://\" o \"https://\" (por ejemplo, \"file:///C:/ficheros\", \"http://www.minhap.es/ficheros\",...) y las rutas relativas no pueden empezar por \"/\" (por ejemplo, \"afirma/ficheros\"). Se debe usar siempre el separador \"/\", nunca \"\\. La configuraci\u00f3n de esta ruta, asegura la completa localizaci\u00f3n del cliente independientemente de la distribuci\u00f3n de los HTML de la aplicaci\u00f3n Web o de si estos se generan autom\u00e1ticamente. En este \u00faltimo caso ser\u00eda necesario establecer la ruta absoluta de los directorios. Reducir las opciones de configuraci\u00f3n Siempre debe ofrecerse al usuario el menor n\u00famero de opciones de configuraci\u00f3n posibles sobre el proceso de firma o cualquier otra operaci\u00f3n criptogr\u00e1fica. Son dos los aspectos que llevan a esta decisi\u00f3n: El cliente de firma com\u00fanmente se integra en las aplicaciones Web para un fin determinado como puede ser el env\u00edo de un formulario Web firmado, por ejemplo, por lo que es el sistema de backend el receptor de los datos generados y el que finalmente debe almacenarlos y gestionarlos. En este caso, es l\u00f3gico que sea el integrador el que decida la configuraci\u00f3n y condiciones de la operaci\u00f3n. La finalidad del usuario, no suele ser el propio uso del cliente, sino el acceso al servicio dado por la aplicaci\u00f3n que lo integra. De esta forma, los usuarios no tienen por qu\u00e9 conocer detalles de las operaciones criptogr\u00e1ficas que se realizan y ni siquiera conocimientos de los conceptos relacionados con la firma electr\u00f3nica. En estos casos conviene simplificarle la tarea y no llevarle a dudar acerca de la opci\u00f3n m\u00e1s acertada para su fin concreto. Configuraci\u00f3n y uso del cliente en operaciones \u00fanicas En el caso de que la ejecuci\u00f3n de las operaciones del cliente dependan de una configuraci\u00f3n introducida por el usuario o generada en tiempo de ejecuci\u00f3n, es recomendable el realizar la configuraci\u00f3n y ejecuci\u00f3n de la operaci\u00f3n criptogr\u00e1fica sin dar posibilidad de alterar el proceso. Por ejemplo, una forma de proceder ser\u00eda el inicializar y configurar el cliente nada m\u00e1s cargarlo (filtro de certificados, datos obtenidos de una ventana anterior\u2026) y establecer el resto de la configuraci\u00f3n a medida que el usuario inserta los datos (formato de firma, datos a firmar, certificado de usuario,\u2026) para, finalmente, s\u00f3lo ejecutar la operaci\u00f3n de firma. Este mecanismo tiene el inconveniente que cualquier interrupci\u00f3n en el cliente puede desechar toda esa informaci\u00f3n y terminar operando con una configuraci\u00f3n por defecto en lugar de la indicada por el usuario. En su lugar, es recomendable que, una vez se vaya a realizar la operaci\u00f3n criptogr\u00e1fica, sea cuando se configure el cliente. Como ejemplo, en una implementaci\u00f3n gen\u00e9rica JavaScript de invocaci\u00f3n al cliente esto ser\u00eda: // Inicializamos la configuraci\u00f3n para asegurar que no hay preestablecido // ning\u00fan valor de operaciones anteriores clienteFirma.initialize(); // Configuramos todos los par\u00e1metros del cliente, ya sea con datos directorios o // extra\u00eddos de la p\u00e1gina (formularios, contexto de la aplicaci\u00f3n,\u2026) clienteFirma.setSignatureFormat(\"CADES\"); clienteFirma.setSignatureAlgorithm(\"SHA1withRSA\"); clienteFirma.setFileuri(document.getElementById(\"fichero\").value); // Ejecutamos la operaci\u00f3n que corresponda clienteFirma.sign(); Este modo de ejecuci\u00f3n ayudar\u00e1 a evitar que, por ejemplo, el refrescar la p\u00e1gina Web con F5 se pierda la sincronizaci\u00f3n con la configuraci\u00f3n real del cliente con la que pueda verse en un momento determinado en la p\u00e1gina Web. El uso de la tecla F5 o el bot\u00f3n \u201cRefrescar Pantalla\u201d debe evitarse siempre cuando nos encontremos a medias de un procedimiento online. En el caso de que el entorno de despliegue pueda detectarlo, incluso es recomendable que se obligue al usuario a reiniciar el procedimiento completo. Funciones y m\u00e9todos en la interfaz Applet del cliente @firma v3.x a\u00f1adidos respecto a versiones anteriores public String getCertificate(final String alias) Obtiene el certificado X.509 correspondiente al alias proporcionado. El resultado es el certificado en Base64 delimitado por las cadenas ASCII -----BEGIN CERTIFICATE----- y -----END CERTIFICATE-----. public String getCertificatePublicKey(final String alias) Obtiene la clave p\u00fablica del certificado X.509 correspondiente al alias proporcionado. El resultado es una clave RSA en Base64 delimitado por las cadenas ASCII -----BEGIN RSA PUBLIC KEY----- y -----END RSA PUBLIC KEY-----. public String getCertificates() Obtiene todos los certificados del almac\u00e9n actual en una \u00fanica cadena en donde los elementos se dividen mediante el separador STRING_SEPARATOR definido como constante en el cliente. El formato individual de los certificados es el mismo que el devuelto por el m\u00e9todo public String getCertificate(final String alias). Tambi\u00e9n es posible obtener de forma segura un array con los certificados mediante el m\u00e9todo JavaScript getCertificates() definido en \u201cfirma.js\u201d. public String[] getArrayCertificates() Obtiene todos los certificados del almac\u00e9n actual en un array unidimensional, con el mismo formato individual que el devuelto por el m\u00e9todo public String getCertificate(final String alias). public String getCertificatesAlias() Se ha considerado \u00fatil que el integrador, v\u00eda JavaScript, pueda obtener los alias del almac\u00e9n de certificados utilizado por el navegador Web activo. Este m\u00e9todo obtiene los alias de los certificados en una \u00fanica cadena separ\u00e1ndolos mediante la constante STRING_SEPARATOR definida en el cliente. Tambi\u00e9n es posible obtener de forma segura un array con los alias de los certificados mediante el m\u00e9todo JavaScript getCertificatesAlias() definido en \u201cfirma.js\u201d. Para m\u00e1s informaci\u00f3n, consulte la documentaci\u00f3n en formato JavaDoc. public String[] getArrayCertificatesAlias() Se ha considerado \u00fatil que el integrador, v\u00eda JavaScript, pueda obtener los alias del almac\u00e9n de certificados utilizado por el navegador Web activo. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public void setSelectedCertificateAlias(String certAlias) Como complemento al m\u00e9todo anterior, se ha considerado \u00fatil que el integrador, v\u00eda JavaScript, pueda establecer el alias del certificado a utilizar por el Applet en el navegador Web activo. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public boolean signDirectory() Para las funciones de firma masiva, firma todos los archivos de un directorio seg\u00fan la configuraci\u00f3n establecida. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public boolean initMassiveSignature() Inicializa una operaci\u00f3n de firma masiva program\u00e1tica. Esto toma la configuraci\u00f3n actual de certificado, formato de firma, algoritmo, modo, etc y la aplica a cada firma individual generara mediante los m\u00e9todos massiveSignatureData(), massiveSignatureFile() y massiveSignatureHash(). La operaci\u00f3n de firma masiva program\u00e1tica finaliza al invocarse al m\u00e9todo endMassiveSignature(). Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public void endMassiveSignature() Finaliza un proceso de firma masiva. Hasta que no se inicie un nuevo proceso mediante el m\u00e9todo initMassiveSignature() no ser\u00e1 posible realizar firmas/multifirmas mediante los m\u00e9todos massiveSignatureData(), massiveSignatureFile() y massiveSignatureHash(). Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public String massiveSignatureData(String b64Data) Genera una firma/multifirma, dentro de un proceso de firma, a partir de los datos indicados en base 64. La operaci\u00f3n concreta realizada se debe indicar con setMassiveOperation(String). El m\u00e9todo devuelve el resultado de la operaci\u00f3n criptogr\u00e1fica. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public String massiveSignatureFile(String path) Genera una firma/multifirma, dentro de un proceso de firma, a partir del fichero cuya ruta se ha indicado. La operaci\u00f3n concreta realizada se debe indicar con setMassiveOperation(String). El m\u00e9todo devuelve el resultado de la operaci\u00f3n criptogr\u00e1fica. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public String massiveSignatureHash(String b64Hash) Genera una firma/multifirma, dentro de un proceso de firma, a partir del hash indicado en base 64. Este m\u00e9todo requiere que se haya establecido la operaci\u00f3n de firma mediante el m\u00e9todo setMassiveOperation(String). El m\u00e9todo devuelve el resultado de la operaci\u00f3n criptogr\u00e1fica. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public void setMassiveOperation(String massiveOperation) Para las funciones de firma masiva, establece la operaci\u00f3n masiva a realizar en el proceso generado por el m\u00e9todo signDirectory() o los m\u00e9todos de firma masiva program\u00e1tica (massiveSignatureData(), massiveSignatureFile() y massiveSignatureHash()). Las operaciones masivas aceptadas son \u201cFIRMAR\u201d, \u201cCOFIRMAR\u201d, \u201cCONTRAFIRMAR_ARBOL\u201d y \u201cCONTRAFIRMAR_HOJAS\u201d. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public void setOriginalFormat(boolean originalFormat) Para las funciones de firma masiva, indica si se debe respetar el formato de firma original para las operaciones de multifirma masiva o, si en cambio, se usar\u00e1 la configuraci\u00f3n de firma establecida para todas las firmas. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public String getInputDirectoryToSign() Para las funciones de firma masiva, devuelve la ruta absoluta del directorio donde se ubican los ficheros a ser firmados de forma masiva. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public void setInputDirectoryToSign(String directory) Para las funciones de firma masiva, establece el directorio de donde se tomar\u00e1n los ficheros de firma y datos para la operaci\u00f3n de firma masiva. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public String getOutputDirectoryToSign() Para las funciones de firma masiva, devuelve la ruta absoluta del directorio donde se almacenar\u00e1n las firmas resultado de la operaci\u00f3n de firma masiva. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public void setOutputDirectoryToSign(String directory) Para las funciones de firma masiva, establece el directorio donde se depositar\u00e1n las firmas masivas de los archivos situados en InputDirectoryToSign. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public void setInIncludeExtensions(String extensions) Para las funciones de firma masiva, define las extensiones que se incluir\u00e1n en la firma de directorios. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public void setInRecursiveDirectorySign(boolean recursiveSignDir) Para las funciones de firma masiva, establece si la firma de directorios se efectuar\u00e1 de forma recursiva o no. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. public void setFileuriBase64(String uri) Establece los datos contenidos en el fichero indicado (en donde se encontrar\u00e1n codificados en base 64), como los datos de entrada para las operaciones criptogr\u00e1ficas y establece la ruta introducida como ruta de entrada. El contenido del fichero se interpretar\u00e1 siempre como datos en base 64 no realiz\u00e1ndose la comprobaci\u00f3n previa de los mismos. public String loadFilePath(String title, String exts, String description) Muestra un di\u00e1logo modal para la selecci\u00f3n de un fichero del que se recuperar\u00e1 su ruta completa. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc. addRFC2254CertificateFilter(String subjectFilter, String issuerFilter, Boolean signatureKeyUsage) Agrega un filtro al listado de filtros de certificados de usuario. Los filtros limitar\u00e1n los certificados que se muestran al usuario para su selecci\u00f3n a s\u00f3lo aquellos que cumplan, al menos, uno de los filtros definidos. Para m\u00e1s informaci\u00f3n consulte el apartado Filtros de certificados. public void resetFilters() Elimina todos los filtros de certificado definidos hasta el momento. Para m\u00e1s informaci\u00f3n consulte el apartado Filtros de certificados. public void setMandatoryCertificate(boolean mandatory) Establece que debe seleccionarse autom\u00e1ticamente un certificado de firma si este es el \u00fanico del almac\u00e9n de certificados o, en caso de establecer filtros, si es el \u00fanico que los cumple. Para m\u00e1s informaci\u00f3n consulte el apartado Filtros de certificados. Casos problem\u00e1ticos de despliegue e integraci\u00f3n del cliente Despliegue del cliente en servidores Web que requieren identificaci\u00f3n de los usuarios mediante certificado cliente Applets de Java y Autenticaci\u00f3n con Certificado Cliente En los servidores en los que se requiere autenticaci\u00f3n cliente (autenticaci\u00f3n por certificado cliente) para acceder a un contenido, los Applets Java no son una excepci\u00f3n por lo que el acceso por parte de Java puede derivar en un error de conexi\u00f3n, ya que las conexiones que establece son independientes del navegador web. El Plugin de Java contempla esta posibilidad, y gestiona la autenticaci\u00f3n por certificado cliente de forma independiente de los Applets que ejecute, por lo que estos no deben implementar ning\u00fan cambio para adaptarse a estos entornos, siendo todo el proceso completamente transparente para ellos. El almac\u00e9n que usa el Plugin de Java para seleccionar el certificado en muestra al servidor Web var\u00eda seg\u00fan la configuraci\u00f3n cliente, pero sigue en todos los casos el mismo proceso: Intenta acceder primero al almac\u00e9n nativo del navegador Web (MS-CAPI, Apple KeyRing o Mozilla/Firefox NSS). Si por problemas de configuraci\u00f3n el almac\u00e9n nativo no pudiese ser accedido por el Plugin de Java, se selecciona el almac\u00e9n propio del JRE. Se pide al usuario que seleccione uno de los certificados del almac\u00e9n finalmente seleccionado, que ser\u00e1 el que se env\u00ede al servidor Web. La clasificaci\u00f3n de los navegadores Web por almac\u00e9n utilizado para los certificados y por sistema operativo es la siguiente: Almac\u00e9n de certificados MS-CAPI Windows Internet Explorer Google Chrome Apple Safari Opera Almac\u00e9n de certificados del llavero de Apple OS X Mac OS X Apple Safari Google Chrome Opera Internet Explorer Almac\u00e9n de certificados Mozilla / Firefox (NSS) Windows Mozilla / Firefox Linux / Solaris Mozilla / Firefox Google Chrome Opera A continuaci\u00f3n, detallamos la configuraci\u00f3n adicional necesaria en cada uno de los casos para el correcto funcionamiento en servidores Web que soliciten certificado cliente. Esta configuraci\u00f3n no es espec\u00edfica para el Cliente @firma, sino que ser\u00e1 necesaria para cualquier otro Applet de Java que establezca conexiones independientes del navegador con el servidor Web: MS-CAPI No es necesario ning\u00fan proceso adicional de configuraci\u00f3n. Mozilla / Firefox (NSS) Es necesario instalar previamente en el entorno de ejecuci\u00f3n de Java las bibliotecas JSS (Netscape Java Security Services), atendiendo a las siguientes precauciones: Ha de seguirse el proceso de instalaci\u00f3n exactamente como se describe en la documentaci\u00f3n de Java: http://java.sun.com/j2se/1.5.0/docs/guide/deployment/deployment-guide/keystores.html . Las instrucciones publicadas por Sun Microsystems / Oracle est\u00e1n desactualizadas y no aplican para las \u00faltimas versiones de Mozilla Firefox, para las cuales deben seguirse los siguientes pasos: Copiar el fichero jss4.jar al directorio de extensiones del entorno de ejecuci\u00f3n de Java (JRE) en uso: %JAVA_HOME%\\lib\\ext en sistemas Windows $JAVA_HOME/lib/ext en sistemas basados en UNIX (Linux, Solaris, Mac OS X) Copiar el fichero la biblioteca nativa de JSS en el directorio principal de bibliotecas del sistema operativo. Es necesario cerciorarse de que la biblioteca que copiemos corresponda con la versi\u00f3n y arquitectura de nuestro sistema operativo: En sistemas Windows, el fichero jss4.dll debe copiarse al directorio %SystemRoot%\\system32 En sistemas Linux y Solaris, el fichero jss4.so debe copiarse al directorio /lib o al directorio /usr/lib En sistemas Mac OS X, el fichero jss4.dylib o el fichero jss4.so (dependiendo de la compilaci\u00f3n utilizada) debe copiarse al directorio /lib o al directorio /usr/lib Hemos tambi\u00e9n de asegurarnos de que la versi\u00f3n instalada de JSS sea compatible con nuestra versi\u00f3n de Mozilla / Firefox. Consulte atentamente la documentaci\u00f3n de los productos antes de proceder a instalarlos. Firefox 3 solo es completamente compatible con JSS 4.3.2 y superiores: https://developer.mozilla.org/En/JSS/4_3_ReleaseNotes , pero aun presenta ciertos problemas de compatibilidad en sistemas Windows. En cualquier caso, si encuentra dificultades, pruebe a instalar siempre la versi\u00f3n m\u00e1s actualizada. JSS puede descargarse de forma libre desde: ftp://ftp.mozilla.org/pub/mozilla.org/security/jss/releases/ No obstante, para ciertas versiones de JSS, la Comunidad Mozilla no distribuye binarios, sino \u00fanicamente el c\u00f3digo fuente. Almac\u00e9n propio de Java Como se ha comentado anteriormente, cuando el Plugin del entorno de ejecuci\u00f3n de Java (JRE) no puede acceder al almac\u00e9n del navegador Web, solicita al usuario la selecci\u00f3n de un certificado de su propio almac\u00e9n. El principal problema de esta opci\u00f3n es que JRE no accede a los m\u00f3dulos PKCS#11 o CSP del sistema, por lo que los certificados residentes en tarjetas inteligentes (incluido DNIe) o dispositivos externos (USB, etc.) no son accesibles. Para comprobar los certificados existentes en el almac\u00e9n de Java e importar certificados en \u00e9l, se pueden seguir los siguientes pasos (sistemas operativos Windows): Abrir la opci\u00f3n de \u201cJava\u201d en el Panel de Control y seleccionar la pesta\u00f1a \u201cSeguridad\u201d: < Figura 8: Panel de control de Java Pulsar el bot\u00f3n \u201cCertificados\u201d y seleccionar el tipo de certificado como \u201cAutenticaci\u00f3n de cliente\u201d, dentro de la pesta\u00f1a \u201cUsuario\u201d. < Figura 9: Certificados del almac\u00e9n de Java Los certificados mostrados en la lista son los disponibles por el Plugin de Java para autenticar a un Applet ante un servidor Web que requiere certificado cliente. Podemos importar nuevos certificados usando el bot\u00f3n \u201cImportar\u201d. Para realizar las mismas comprobaciones en otros sistemas operativos, consulte la documentaci\u00f3n del entorno de Java instalado (JRE) y del Java Plugin. Alternativa de despliegue Una variante sobre lo arriba expuesto es el no publicar el cliente @firma al completo en un servidor con autenticaci\u00f3n con certificado cliente, tan s\u00f3lo las p\u00e1ginas Web que dan acceso al mismo. Es posible situar, tanto el Applet de carga como los ficheros instalables en un segundo servidor (o una ruta del mismo configurada para no pedir certificados). Con esto obtenemos que: P\u00e1ginas Web: En servidor con conexi\u00f3n SSL y autenticaci\u00f3n con certificado cliente. Binarios Java: En servidor con conexi\u00f3n SSL o sin ella (seg\u00fan se desee) y sin autenticaci\u00f3n. El principal beneficio de esta alternativa est\u00e1 claro, no es necesario que los binarios java se autentiquen contra el servidor, por lo que no es necesario que el usuario configure ning\u00fan certificado en el repositorio de Java. Para configurar este entorno basta con configurar la variables base del fichero de despliegue \u201c constantes.js \u201d. Esta variable apunta al directorio en el que se sit\u00faan los Applets con las construcciones del Cliente. Deber\u00e1 establecerse para que apunte a la ruta en la que se sit\u00faa este fichero (en un servidor que no requiere autenticaci\u00f3n cliente). Problema con el objeto HTML File en los nuevos navegadores La nueva generaci\u00f3n de navegadores Web (Internet Explorer 8, Firefox 3,\u2026) ha restringido el comportamiento del objeto File de HTML por motivos de seguridad. La finalidad de este componente es \u00fanicamente el permitir la carga de ficheros a un servidor. Sin embargo, antes se le permit\u00eda obtener a este servidor excesiva informaci\u00f3n sobre el sistema del usuario ya que, determinados navegadores, mediante JavaScript, proporcionaban la ruta completa en la que estaba almacenado el fichero. Los nuevos navegadores no permiten obtener m\u00e1s que el nombre del fichero o, a lo sumo, este y una ruta gen\u00e9rica y no descriptiva. Esto podr\u00eda inhabilitar la pr\u00e1ctica que han seguido muchos integradores del cliente @firma, que utilizaban este componente para, adem\u00e1s de la carga del fichero, obtener la ruta del mismo para as\u00ed utilizar el m\u00e9todo setFileuri() y operar con el fichero. Con objeto de solventar en parte este problema, se ha incluido en el Applet cliente el m\u00e9todo loadFilePath() que muestra al usuario un di\u00e1logo para la selecci\u00f3n de un fichero de datos y devuelve la ruta completa de ese fichero. Con esto el usuario es libre de usar la ruta con el m\u00e9todo setFileuri() para realizar la firma del fichero y/o mostr\u00e1rsela al usuario en un cuadro de texto, por ejemplo. Puede encontrarse la descripci\u00f3n completa del m\u00e9todo en el JavaDoc del cliente @firma. Sin embargo, al igual que no permite obtener la ruta del fichero seleccionado, el objeto File no permite establecer de forma externa una ruta de fichero para su posterior subida al servidor, ya que esto posibilitar\u00eda a cualquier p\u00e1gina Web maliciosa a obtener ficheros del disco duro del usuario sin su consentimiento. Esto imposibilita el tomar la ruta del fichero mediante el m\u00e9todo loadFilePath() para luego cargarlo con un objeto File . La soluci\u00f3n a este problema puede llevarse a cabo mediante el uso de diferentes mecanismos, cada cual ajustado al entorno, el fin y las tecnolog\u00edas con las que cuente el integrador del sistema. Una soluci\u00f3n simple ser\u00eda, por ejemplo, el leer el fichero mediante el m\u00e9todo getFileBase64Encoded() y anexar la cadena en base 64 resultante como campo oculto al formulario del usuario (configurar con el m\u00e9todo POST). La ruta del fichero se habr\u00e1 obtenido previamente con la ayuda del m\u00e9todo loadFilePath() y especificado al cliente mediante setFileuri(). ADVERTENCIA : Si su sistema requiere o permite que el usuario env\u00ede ficheros mayores de 4 megas de tama\u00f1o, consulte el apartado Procedimiento de carga para ficheros mayores de 4MB . Procedimiento de carga para ficheros mayores de 4MB Al ejecutar el Cliente @firma en un entorno con Java 6u10 o superior y el plugin de nueva generaci\u00f3n activado (configuraci\u00f3n por defecto), nos encontramos con que no es posible convertir ficheros de datos mayores de 4MB a cadenas Base64. Esta operaci\u00f3n es necesaria para posteriormente adjuntar los datos firmados (o la firma impl\u00edcita generada) al formulario Web a trav\u00e9s del cual se enviar\u00e1 la informaci\u00f3n al servidor. Esta limitaci\u00f3n tambi\u00e9n puede afectar a la generaci\u00f3n de firmas XML impl\u00edcitas de ficheros mayores de 4MB. Este problema no tiene soluci\u00f3n actualmente pero es posible realizar algunas pr\u00e1cticas con las que es posible evitarlo en caso de que el propio fichero de datos no sea mayor de este tama\u00f1o. Eval\u00fae si es necesario que su sistema firme los ficheros adjuntos a una transacci\u00f3n o si basta con firmar la propia transacci\u00f3n. Esto podr\u00eda hacerse mediante un XML en el que se almacenen los datos de la transacci\u00f3n (identificador, los datos proporcionados por el usuario, nombre de los ficheros adjuntos y su hash,\u2026). Si su sistema realiza firmas de ficheros seleccionados por el usuario y se van a admitir ficheros mayores de 4MB, eval\u00fae el uso de firmas binarias (CAdES), que son de menor tama\u00f1o, en lugar de firmas XML (XAdES). El problema comentado puede afectar a la generaci\u00f3n de firmas XML (XMLdSig / XAdES) de ficheros binarios mayores de 4MB. Si es necesario el env\u00edo de ficheros mayores de 4MB al servidor, deber\u00e1n enviarse mediante el componente File de los formularios HTML. Para esto, tendremos que firmar previamente los datos y obligar a que sea el propio usuario quien seleccione los ficheros de firma generados. Se propone el siguiente modelo de aplicaci\u00f3n Web: Mostrar al usuario el formulario Web con la informaci\u00f3n que debe rellenar. Esto puede hacerse en una \u00fanica p\u00e1gina Web o en varias si la cantidad de datos lo requiere. En el punto que corresponda del formulario, se dar\u00e1 la opci\u00f3n al usuario de seleccionar los ficheros que desea adjuntar al mismo. Esto abrir\u00e1 una nueva ventana en donde se cargar\u00e1 el Cliente @firma y, mediante el m\u00e9todo descrito en el apartado 13.2 Problema con el objeto HTML File en los nuevos navegadores , se dar\u00e1 al usuario la posibilidad de firmar los ficheros. En este caso, en lugar de adjuntar el resultado de la firma al formulario Web, se le permitir\u00e1 almacenarla en disco, notific\u00e1ndole que esta es la firma electr\u00f3nica generada que posteriormente se deber\u00e1 adjuntar al formulario y que, si lo desea, puede conservar como parte del resguardo de la transacci\u00f3n. En este paso se pueden firmar tantos ficheros como se deseen. Consulte el apartado 9.1 Guardar la firma en un fichero para conocer como almacenar las firmas en el sistema del usuario. De vuelta al formulario principal y al final del mismo se mostrar\u00e1 un bot\u00f3n Aceptar que redirigir\u00e1 al usuario a una nueva p\u00e1gina en la que se cargar\u00e1 el Cliente @firma y se mostrar\u00e1 el resumen de los datos del formulario para que confirme que son v\u00e1lidos. Tambi\u00e9n en esta p\u00e1gina se mostrar\u00e1n los componentes necesarios de tipo File de HTML para que el usuario cargue los ficheros de firma generados en el paso anterior (y los documentos firmados en caso de firmas expl\u00edcitas). En esta ocasi\u00f3n no se utilizar\u00e1 el Cliente para cargar los ficheros de firma, \u00fanicamente el componente File Tras revisar los datos y seleccionar los ficheros necesarios, el usuario podr\u00e1 enviar el formulario para finalizar el tr\u00e1mite. Al pulsar el bot\u00f3n Enviar, se firmar\u00e1 la transacci\u00f3n con el Cliente @firma y seguidamente se enviar\u00e1 el formulario con esta firma. El concepto de transacci\u00f3n deber\u00e1 definirse para cada sistema. Puede ser, por ejemplo, un XML que contenga todos los datos del formulario y la relaci\u00f3n de ficheros adjuntos (nombres y hashes). NOTA: En sistemas con el Plugin de pr\u00f3xima generaci\u00f3n desactivado el l\u00edmite se encuentra en torno a los 50MB. Sin embargo, no debe presuponerse que el usuario operar\u00e1 desde este entorno. Mensajes de confirmaci\u00f3n durante el proceso de firma masiva A partir del Cliente @firma v3.3, cualquier acceso a disco como leer y guardar datos requiere del consentimiento expreso del usuario. Este procedimiento no afecta a la mec\u00e1nica de las aplicaciones que integran el Cliente, por lo que no requerir\u00e1n ning\u00fan tipo de modificaci\u00f3n, salvo en casos concretos de firma masiva de datos. El proceso de firma masiva program\u00e1tica dispone de un m\u00e9todo para la firma de ficheros, aseg\u00farese de utilizar este m\u00e9todo ( massiveSignatureFile() ) si va a firmar ficheros en disco, y no realizar la carga del fichero y luego firmar los datos mediante el m\u00e9todo correspondiente ( massiveSignatureData() ). Por otra parte, el proceso de firma masiva program\u00e1tica no dispone de un m\u00e9todo propio para el guardado de las firmas en disco. En anteriores versiones del Cliente era posible utilizar los m\u00e9todos comunes de guardado para almacenar las firmas pero a partir de la versi\u00f3n 3.3 esto supone que se pida confirmaci\u00f3n para el guardado de cada firma individual. Por motivos de seguridad, este comportamiento no puede evitarse. Si se desea firmar ficheros y almacenar el resultado en disco, consulte el apartado \u201cFirma/multifirma de directorios\u201d en donde se detalla el mecanismo de firma de directorios. Este mecanismo permitir\u00eda firmar y almacenar todos los ficheros sin necesidad de que el usuario lo apruebe individualmente. Siglas CAdES CMS Advanced Electronic Signature CMS Cryptographic Message Standard CSP Cryptographic Service Provider (proveedor de servicios criptogr\u00e1ficos) DNIe DNI electr\u00f3nico JAR Java Archive JCE Java Cryptography Extension JRE Java Runtime Environment PDF Portable Document Format PKCS#1 Public Key Cryptography Standard number 1 (est\u00e1ndar de criptograf\u00eda de clave p\u00fablica n\u00ba 1) PKCS#7 Public Key Cryptography Standard number 7 (est\u00e1ndar de criptograf\u00eda de clave p\u00fablica n\u00ba 7) PKCS#11 Public Key Cryptography Standard number 11 (est\u00e1ndar de criptograf\u00eda de clave p\u00fablica n\u00ba 11) PKCS#12 Public Key Cryptography Standard number 12 (est\u00e1ndar de criptograf\u00eda de clave p\u00fablica n\u00ba 12) PKI Public Key Infrastructure SHA Secure Hash Algorithm URI Uniform Resource Identifier (Identificador Uniforme de Recursos) URL Uniform Resource Locator (Localizador Uniforme de Recursos) WYSIWYS What You See Is What You Sign (lo que ves es lo que firmas) XAdES XML Advanced Electronic Signature (firma electr\u00f3nica avanzada XML) XML eXtensible Markup Language (Lenguaje de marcas extensible) XMLDSig XML Digital Signature (firma digital XML) Documentos de Referencia [JAVADOC] Documentaci\u00f3n de los m\u00e9todos p\u00fablicos del Applet de Firma en la carpeta javadoc. Anexo A. Formatos de firma binaria gen\u00e9rica soportados por el cliente Matriz de formatos soportados en formatos binarios (CMS y CAdES) Adicionalmente, deben observarse las siguientes aclaraciones sobre los formatos: Las firmas CMS generadas son compatibles PKCS#7 Las firmas CAdES generadas son compatibles con la especificaci\u00f3n CAdES-BES o CAdES-EPES. Algoritmos de huella digital El cliente de firma soporta (con las salvedades indicadas en las notas posteriores) la aplicaci\u00f3n de los siguientes algoritmos de huella digital para las firmas binarias: SHA-1, SHA-256, SHA-384, SHA-512. Uso de los par\u00e1metros de funcionamiento El modo de uso del cliente para establecer los par\u00e1metros de funcionamiento del Cliente consiste en realizar llamadas a ciertos m\u00e9todos del Applet indicando cadenas de texto que identifican los valores que queremos establecer. En particular, se indican los formatos y sub-formatos (modos) de firma mediante unas cadenas de texto espec\u00edficas. Adem\u00e1s, cada formato o sub-formato introducido va asociado a una extensi\u00f3n de fichero (que define su tipo), extensiones que se usan como filtro de entrada o de salida a la hora de abrir o salvar archivos. Las cadenas de identificaci\u00f3n de formato deben usarse con la llamada JavaScript: clienteFirma.setSignatureFormat(String format) Y las cadenas de sub-formato con la llamada JavaScript: clienteFirma.setSignatureMode(String mode) Ambas funciones est\u00e1n documentadas en el JavaDoc del Applet, Rem\u00edtase a estos documentos para m\u00e1s informaci\u00f3n. El orden de llamada de ambos m\u00e9todos no es significativo. Par\u00e1metros de funcionamiento Cadenas (se ignoran las diferencias entre may\u00fasculas y min\u00fasculas) de identificaci\u00f3n de formato (varias alternativas por cada uno de ellos, por flexibilidad de uso, se muestran separadas por \u201c/\u201d). CMS \"CMS\" / \"PKCS7\" / \"PKCS#7\" CAdES \"CAdES\" / \"CAdES-BES\" Cadenas de identificaci\u00f3n del modo de firma (insensibles a may\u00fasculas/min\u00fasculas). Firma Expl\u00edcita \"Explicit\" Firma Impl\u00edcita \"Implicit\" Ficheros de entrada (todos: CMS y CAdES, Impl\u00edcitas y Expl\u00edcitas) Binarios (*.*) Ficheros de salida CMS y CAdES Ficheros de firma ASN.1 (*.csig) Cofirmas cruzadas entre CMS y CAdES Las cofirmas de un documento dan como resultado dos firmas sobre este mismo documento que se encuentran a un mismo nivel, es decir, que ninguna envuelve a la otra ni una prevalece sobre la otra. A nivel de formato interno, esto quiere decir que cuando cofirmamos un documento ya firmado previamente, esta firma previa no se modifica. Si tenemos en cuenta que CAdES es en realidad un subconjunto de CMS, el resultado de una cofirma CAdES sobre un documento firmado previamente con CMS (o viceversa), son dos firmas independientes, una en CAdES y otra en CMS. Dado que todas las firmas CAdES son CMS pero no todas las firmas CMS son CAdES, el resultado global de la firma se adec\u00faa al est\u00e1ndar m\u00e1s amplio, CMS en este caso. Otro efecto de compatibilidad de formatos de las cofirmas con varios formatos de un \u00fanico documento es la ruptura de la compatibilidad con PKCS#7, ya que, aunque las firmas generadas por el cliente mediante CMS son compatibles con PKCS#7, las generadas con CAdES no lo son, por lo que, en el momento que se introduzca una estructura CAdES, se perder\u00e1 la compatibilidad PKCS#7 en el global de la firma. Formato CMS de Firma Digital Al igual que otros elementos CMS que describiremos posteriormente, la estructura de una firma CMS viene definida en la RFC 3852, aunque en este caso en especial, y para mantener la compatibilidad con PKCS#7, el elemento signedData especificado en la RFC indicada se encuentra limitado. La estructura empleada por el cliente de firma es la siguiente: Figura 10: Estructura PKCS#7 SignedData CMS Version . Indica las diferentes versiones del mensaje. Para que la compatibilidad con PKCS#7 se mantenga debe ser 0. Digest Algorithm Identifier . Identifica el algoritmo utilizado. ContentInfo . Secuencia de par\u00e1metros que identifican el contenido del mensaje. Comprende el tipo de contenido ( contentType ) que en nuestro caso ser\u00e1 Data y content que se refiere a la secuencia de bytes correspondiente a los datos mismos. Extended Certificates And Certificates . Opcional. Permite especificar una cadena de certificados para la validaci\u00f3n de los distintos certificados firmantes. Certificate revocation Lists . Opcional. Permite especificar las CRL para los certificados utilizados. Signer Info . Estructura que especifica la informaci\u00f3n de los diferentes firmantes del contenido del mensaje. Se subdividen en los siguientes campos: Versi\u00f3n . Especifica la versi\u00f3n de esta estructura y ser\u00e1 siempre 1 para PKCS#7. Issuer And Serial Number . Especifica el certificado usado mediante el emisor y n\u00famero de serie de \u00e9ste. Digest Algorithm Identifier . Identifica el algoritmo utilizado. Authenticated Attributes . Opcional. Secuencia de atributos firmados que especifican ciertos par\u00e1metros importantes para la interpretaci\u00f3n del contenido. Si el tipo del contenido fuese distinto de Data , ser\u00eda obligatorio incorporar como atributos el tipo empleado y el hash del contenido, pero en nuestro caso esto no es posible ya que siempre tendremos el ContentType Data . Digest Encryption Algorithm . Describe que algoritmo se ha usado en la encriptaci\u00f3n de la firma y resumen del documento. Encrypted Digest . Hash del mensaje encriptado empleando la clave privada del certificado y el algoritmo especificado antes Unauthenticated Attributes . Opcional. Atributos no firmados definidos en PKCS#9, como por ejemplo las contrafirmas. Formato de sobre digital CMS encriptado La estructura vendr\u00eda definida como sigue: Figura 16: Estructura PKCS#7 EncryptedData CMS Version . Ser\u00e1 0 si no existen UnprotectedAtributes o 2 en caso contrario. Encrypted Content Info . Subestructura que se define mediante los siguientes campos: Content Type . Define el tipo de contenido. Content Encryption Algorithm . Define el algoritmo utilizado para encriptar el contenido. Encrypted Content . Contenido encriptado usando el algoritmo especificado anteriormente. Unprotected Attributes . Opcional. Secuencia de par\u00e1metros auxiliares definidos por otros est\u00e1ndares. Como se puede apreciar, esta estructura no contiene la clave de cifrado ni ning\u00fan m\u00e9todo de transmisi\u00f3n de esta, por lo que si se usa como mensaje se debe buscar un m\u00e9todo para compartir una clave privada. Formato de Sobre Digital CMS Envuelto Esta estructura se identifica con el sobre digital identificado en la RFC 3852 como Enveloped CMS y sigue la siguiente estructura: Figura 17: Estructura PKCS#7 EnvelopedData CMS Version . Viene determinada en funci\u00f3n de los par\u00e1metros presentes en la estructura generada. Para que fuese compatible con la estructura especificada en PKCS#7 deber\u00eda ser 0, pero quitar\u00eda mucha de las opciones m\u00e1s importantes que incorpora esta soluci\u00f3n. Originator Info . Define el emisor del mensaje. Aunque es opcional, su presencia viene determinada por los algoritmos utilizados internamente. Recipient Info . Define los receptores v\u00e1lidos para el mensaje actual. Por requerimientos de la tecnolog\u00eda utilizada ser\u00e1n de tipo keytransport , ya que necesitamos incorporar la clave sim\u00e9trica utilizada en el cifrado. Se distinguen los siguientes campos: Version . Puede ser 0 o 2 en funci\u00f3n de los datos incluidos en Recipient Identifier . En nuestro caso ser\u00e1 2. Key Encryption Algorithm . Define el algoritmo por el cual se ha encriptado la clave sim\u00e9trica adjunta. Se utilizan algoritmos asim\u00e9tricos y en nuestro caso RSA. Encrypted Key . Clave utilizada para encriptar el contenido del mensaje cifrada utilizando el algoritmo anteriormente definido. Encrypted Content Info . Estructura igual que la contenida en CMS encriptado: Content Type . Define el tipo de contenido. Content Encryption Algorithm . Define el algoritmo utilizado para encriptar el contenido. Encrypted Content . Contenido encriptado usando el algoritmo especificado especificado. Unprotected Attributes . Conjunto de atributos no cifrados definidos o necesarios por otros est\u00e1ndares. Formato de sobre digital CMS Firmado y envuelto Esta estructura es un atajo para crear un CMS envuelto en cuyo interior se encuentra un mensaje firmado. Esto significa que la \u00fanica diferencia en cuanto a la estructura es que el conten type de la subestructura Encrypted Content Info ser\u00eda un Signed Data como el definido en el CMS Firmado. La diferencia fundamental es que los par\u00e1metros a especificar no son tan libres, ya que por ejemplo es obligatorio especificar el emisor, ya que tenemos que firmar el mensaje con su certificado. Este es un ejemplo de c\u00f3mo se pueden anidar estructuras CMS. Por ejemplo, podr\u00edamos insertar un CMS envuelto en un CMS firmado (obviando la utilidad que pudiese tener o no) simplemente generando el CMS envuelto y especificando el resultado de la salida como datos de entrada para la creaci\u00f3n del CMS firmado, y as\u00ed sucesivamente. Figura 18: Estructura PKCS#7 SignedAndEnvelopedData Formato de sobre digital CMS Autenticado Esta estructura se identifica con el sobre digital identificado en la RFC 3852 como Authenticated CMS y sigue la siguiente estructura: < Figura 19: Estructura CMS AuthenticatedData CMS Version. Viene determinada en funci\u00f3n de los par\u00e1metros presentes en la estructura generada. Para que fuese compatible con la estructura especificada en PKCS#7 deber\u00eda ser 0, pero quitar\u00eda mucha de las opciones m\u00e1s importantes que incorpora esta soluci\u00f3n. Originator Info . Define el emisor del mensaje. Aunque es opcional, su presencia viene determinada por los algoritmos utilizados internamente. Recipient Info . Define los receptores v\u00e1lidos para el mensaje actual. Por requerimientos de la tecnolog\u00eda utilizada ser\u00e1n de tipo keytransport , ya que necesitamos incorporar la clave sim\u00e9trica utilizada en el cifrado. Se distinguen los siguientes campos: Version . Puede ser 0 o 2 en funci\u00f3n de los datos incluidos en Recipient Identifier . En nuestro caso ser\u00e1 2. RecipientIdentifier: Identifica al usuario al que va dirigido el sobre. Key Encryption Algorithm . Define el algoritmo por el cual se ha encriptado la clave sim\u00e9trica adjunta. Se utilizan algoritmos asim\u00e9tricos y en nuestro caso RSA. Encrypted Key . Clave utilizada para encriptar el contenido del mensaje cifrada utilizando el algoritmo anteriormente definido. MessageAuthenticationCodeAlgorithm : Define el algoritmo con el que se crear\u00e1 la MAC. DigestAlgorithmIdentifier : Identifica el algoritmo utilizado. ContentInfo : Secuencia de par\u00e1metros que identifican el contenido del mensaje. Comprende el tipo de contenido ( contentType ) que en nuestro caso ser\u00e1 Data y content que se refiere a la secuencia de bytes correspondiente a los datos mismos. AuthenticatedAtributes: Opcional. Secuencia de atributos firmados que especifican ciertos par\u00e1metros importantes para la interpretaci\u00f3n del contenido. Si el tipo del contenido fuese distinto de Data , ser\u00eda obligatorio incorporar como atributos el tipo empleado y el hash del contenido, pero en nuestro caso esto no es posible ya que siempre tendremos el ContentType Data . MessageAuthenticationCode: C\u00f3digo que autentifica el mensaje. Unauthenticated Attributes . Opcional. Atributos no firmados definidos en PKCS#9, como por ejemplo las contrafirmas. Anexo B. Configuraci\u00f3n espec\u00edfica para el formato CAdES El Cliente de firma genera firmas CAdES compatibles por estructura y atributos tanto con la versi\u00f3n 1.7.3 como con la 1.8.1, pero en ambas versiones, el atributo Signing Certificate se puede generar de dos formas distintas, la V1 y la V2. Por defecto, y para una mayor compatibilidad, este atributo se genera de la forma V1 cuando la firma se genera con un algoritmo de firma cuya operaci\u00f3n de huella digital es SHA1 y con la forma V2 cuando se usa cualquier otro algoritmo. Este comportamiento se puede variar indicando expl\u00edcitamente si deseamos usar o no la versi\u00f3n 2 del atributo. Esto se har\u00e1 mediante el m\u00e9todo del Applet (que es posible invocar v\u00eda JavaScript): clienteFirma.addExtraParam(String paramName, String paramValue), y el siguiente uso: clienteFirma.addExtraParam(\u201csigningCertificateV2\u201d, \u201c true \u201d); Desde la invocaci\u00f3n de este m\u00e9todo todas las firmas CAdES que se realicen hasta el reinicio del Applet tendr\u00e1n la forma V2 del atributo Signing Certificate. Si queremos restablecer el comportamiento normal de generaci\u00f3n en la forma V1 debemos invocar el paso de par\u00e1metro adicional de este otra forma: clienteFirma.addExtraParam(\u201csigningCertificateV2\u201d, \u201c false \u201d); Para las firmas en CAdES que van a sufrir un tratamiento posterior acorde a la versi\u00f3n CAdES 1.8.1 (como por ejemplo sellos de tiempo complejos), se recomienda usar siempre la forma V2 del atributo Signing Certificate. Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported Usted es libre de: | < style=\"width:0.52083in;height:0.52083in\" alt=\"share\" /> | Compartir - copiar, distribuir, ejecutar y comunicar p\u00fablicamente la obra | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"remix\" /> | hacer obras derivadas | Bajo las condiciones siguientes: | < style=\"width:0.52083in;height:0.52083in\" alt=\"by\" /> | Atribuci\u00f3n \u2014 Debe reconocer los cr\u00e9ditos de la obra de la manera especificada por el autor o el licenciante (pero no de una manera que sugiera que tiene su apoyo o que apoyan el uso que hace de su obra). | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"nc\" /> | NoComercial \u2014 No puede utilizar esta obra para fines comerciales. | | < style=\"width:0.52083in;height:0.52083in\" alt=\"sa\" /> | Compartir bajo la Misma Licencia \u2014 Si altera o transforma esta obra, o genera una obra derivada, s\u00f3lo puede distribuir la obra generada bajo una licencia id\u00e9ntica a \u00e9sta. | Entendiendo que: Renuncia \u2014 Alguna de estas condiciones puede no aplicarse si se obtiene el permiso del titular de los derechos de autor Dominio P\u00fablico \u2014 Cuando la obra o alguno de sus elementos se hallen en el dominio p\u00fablico seg\u00fan la ley vigente aplicable, esta situaci\u00f3n no quedar\u00e1 afectada por la licencia. Otros derechos \u2014 Los derechos siguientes no quedan afectados por la licencia de ninguna manera: Los derechos derivados de usos leg\u00edtimos u otras limitaciones reconocidas por ley no se ven afectados por lo anterior. Los derechos morales del auto; Derechos que pueden ostentar otras personas sobre la propia obra o su uso, como por ejemplo derechos de imagen o de privacidad. Aviso \u2014 Al reutilizar o distribuir la obra, tiene que dejar muy en claro los t\u00e9rminos de la licencia de esta obra. La mejor forma de hacerlo es enlazar a esta p\u00e1gina. Licencia LA OBRA O LA PRESTACI\u00d3N (SEG\u00daN SE DEFINEN M\u00c1S ADELANTE) SE PROPORCIONA BAJO LOS T\u00c9RMINOS DE ESTA LICENCIA P\u00daBLICA DE CREATIVE COMMONS (CCPL O LICENCIA). LA OBRA O LA PRESTACI\u00d3N SE ENCUENTRA PROTEGIDA POR LA LEY ESPA\u00d1OLA DE PROPIEDAD INTELECTUAL Y/O CUALESQUIERA OTRAS NORMAS QUE RESULTEN DE APLICACI\u00d3N. QUEDA PROHIBIDO CUALQUIER USO DE LA OBRA O PRESTACI\u00d3N DIFERENTE A LO AUTORIZADO BAJO ESTA LICENCIA O LO DISPUESTO EN LA LEY DE PROPIEDAD INTELECTUAL. MEDIANTE EL EJERCICIO DE CUALQUIER DERECHO SOBRE LA OBRA O LA PRESTACI\u00d3N, USTED ACEPTA Y CONSIENTE LAS LIMITACIONES Y OBLIGACIONES DE ESTA LICENCIA, SIN PERJUICIO DE LA NECESIDAD DE CONSENTIMIENTO EXPRESO EN CASO DE VIOLACI\u00d3N PREVIA DE LOS T\u00c9RMINOS DE LA MISMA. EL LICENCIADOR LE CONCEDE LOS DERECHOS CONTENIDOS EN ESTA LICENCIA, SIEMPRE QUE USTED ACEPTE LOS PRESENTES T\u00c9RMINOS Y CONDICIONES. 1. Definiciones La obra es la creaci\u00f3n literaria, art\u00edstica o cient\u00edfica ofrecida bajo los t\u00e9rminos de esta licencia. En esta licencia se considera una prestaci\u00f3n cualquier interpretaci\u00f3n, ejecuci\u00f3n, fonograma, grabaci\u00f3n audiovisual, emisi\u00f3n o transmisi\u00f3n, mera fotograf\u00eda u otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente aplicable. La aplicaci\u00f3n de esta licencia a una colecci\u00f3n (definida m\u00e1s adelante) afectar\u00e1 \u00fanicamente a su estructura en cuanto forma de expresi\u00f3n de la selecci\u00f3n o disposici\u00f3n de sus contenidos, no siendo extensiva a \u00e9stos. En este caso la colecci\u00f3n tendr\u00e1 la consideraci\u00f3n de obra a efectos de esta licencia. El titular originario es: En el caso de una obra literaria, art\u00edstica o cient\u00edfica, la persona natural o grupo de personas que cre\u00f3 la obra. En el caso de una obra colectiva, la persona que la edite y divulgue bajo su nombre, salvo pacto contrario. En el caso de una interpretaci\u00f3n o ejecuci\u00f3n, el actor, cantante, m\u00fasico, o cualquier otra persona que represente, cante, lea, recite, interprete o ejecute en cualquier forma una obra. En el caso de un fonograma, el productor fonogr\u00e1fico, es decir, la persona natural o jur\u00eddica bajo cuya iniciativa y responsabilidad se realiza por primera vez una fijaci\u00f3n exclusivamente sonora de la ejecuci\u00f3n de una obra o de otros sonidos. En el caso de una grabaci\u00f3n audiovisual, el productor de la grabaci\u00f3n, es decir, la persona natural o jur\u00eddica que tenga la iniciativa y asuma la responsabilidad de las fijaciones de un plano o secuencia de im\u00e1genes, con o sin sonido. En el caso de una emisi\u00f3n o una transmisi\u00f3n, la entidad de radiodifusi\u00f3n. En el caso de una mera fotograf\u00eda, aquella persona que la haya realizado. En el caso de otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente, la persona que \u00e9sta se\u00f1ale. Se considerar\u00e1n obras derivadas aquellas obras creadas a partir de la licenciada, como por ejemplo: las traducciones y adaptaciones; las revisiones, actualizaciones y anotaciones; los compendios, res\u00famenes y extractos; los arreglos musicales y, en general, cualesquiera transformaciones de una obra literaria, art\u00edstica o cient\u00edfica. Para evitar la duda, si la obra consiste en una composici\u00f3n musical o grabaci\u00f3n de sonidos, la sincronizaci\u00f3n temporal de la obra con una imagen en movimiento (synching) ser\u00e1 considerada como una obra derivada a efectos de esta licencia. Tendr\u00e1n la consideraci\u00f3n de colecciones la recopilaci\u00f3n de obras ajenas, de datos o de otros elementos independientes como las antolog\u00edas y las bases de datos que por la selecci\u00f3n o disposici\u00f3n de sus contenidos constituyan creaciones intelectuales. La mera incorporaci\u00f3n de una obra en una colecci\u00f3n no dar\u00e1 lugar a una derivada a efectos de esta licencia. El licenciador es la persona o la entidad que ofrece la obra o prestaci\u00f3n bajo los t\u00e9rminos de esta licencia y le concede los derechos de explotaci\u00f3n de la misma conforme a lo dispuesto en ella. Usted es la persona o la entidad que ejercita los derechos concedidos mediante esta licencia y que no ha violado previamente los t\u00e9rminos de la misma con respecto a la obra o la prestaci\u00f3n, o que ha recibido el permiso expreso del licenciador de ejercitar los derechos concedidos mediante esta licencia a pesar de una violaci\u00f3n anterior. La transformaci\u00f3n de una obra comprende su traducci\u00f3n, adaptaci\u00f3n y cualquier otra modificaci\u00f3n en su forma de la que se derive una obra diferente. La creaci\u00f3n resultante de la transformaci\u00f3n de una obra tendr\u00e1 la consideraci\u00f3n de obra derivada. Se entiende por reproducci\u00f3n la fijaci\u00f3n directa o indirecta, provisional o permanente, por cualquier medio y en cualquier forma, de toda la obra o la prestaci\u00f3n o de parte de ella, que permita su comunicaci\u00f3n o la obtenci\u00f3n de copias. Se entiende por distribuci\u00f3n la puesta a disposici\u00f3n del p\u00fablico del original o de las copias de la obra o la prestaci\u00f3n, en un soporte tangible, mediante su venta, alquiler, pr\u00e9stamo o de cualquier otra forma. Se entiende por comunicaci\u00f3n p\u00fablica todo acto por el cual una pluralidad de personas, que no pertenezcan al \u00e1mbito dom\u00e9stico de quien la lleva a cabo, pueda tener acceso a la obra o la prestaci\u00f3n sin previa distribuci\u00f3n de ejemplares a cada una de ellas. Se considera comunicaci\u00f3n p\u00fablica la puesta a disposici\u00f3n del p\u00fablico de obras o prestaciones por procedimientos al\u00e1mbricos o inal\u00e1mbricos, de tal forma que cualquier persona pueda acceder a ellas desde el lugar y en el momento que elija. La explotaci\u00f3n de la obra o la prestaci\u00f3n comprende la reproducci\u00f3n, la distribuci\u00f3n, la comunicaci\u00f3n p\u00fablica y, en su caso, la transformaci\u00f3n. 2. L\u00edmites de los derechos. Nada en esta licencia pretende reducir o restringir cualesquiera l\u00edmites legales de los derechos exclusivos del titular de los derechos de propiedad intelectual de acuerdo con la Ley de propiedad intelectual o cualesquiera otras leyes aplicables, ya sean derivados de usos leg\u00edtimos, tales como la copia privada o la cita, u otras limitaciones como la resultante de la primera venta de ejemplares (agotamiento). 3. Concesi\u00f3n de licencia. Conforme a los t\u00e9rminos y a las condiciones de esta licencia, el licenciador concede, por el plazo de protecci\u00f3n de los derechos de propiedad intelectual y a t\u00edtulo gratuito, una licencia de \u00e1mbito mundial no exclusiva que incluye los derechos siguientes: Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n. Derecho a incorporar la obra o la prestaci\u00f3n en una o m\u00e1s colecciones. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n l\u00edcitamente incorporada en una colecci\u00f3n. Derecho de transformaci\u00f3n de la obra para crear una obra derivada siempre y cuando se incluya en \u00e9sta una indicaci\u00f3n de la transformaci\u00f3n o modificaci\u00f3n efectuada. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de obras derivadas creadas a partir de la obra licenciada. Derecho a extraer y reutilizar la obra o la prestaci\u00f3n de una base de datos. Para evitar cualquier duda, el titular originario: Conserva el derecho a percibir las remuneraciones o compensaciones previstas por actos de explotaci\u00f3n de la obra o prestaci\u00f3n, calificadas por la ley como irrenunciables e inalienables y sujetas a gesti\u00f3n colectiva obligatoria. Renuncia al derecho exclusivo a percibir, tanto individualmente como mediante una entidad de gesti\u00f3n colectiva de derechos, cualquier remuneraci\u00f3n derivada de actos de explotaci\u00f3n de la obra o prestaci\u00f3n que usted realice. Estos derechos se pueden ejercitar en todos los medios y formatos, tangibles o intangibles, conocidos en el momento de la concesi\u00f3n de esta licencia. Los derechos mencionados incluyen el derecho a efectuar las modificaciones que sean precisas t\u00e9cnicamente para el ejercicio de los derechos en otros medios y formatos. Todos los derechos no concedidos expresamente por el licenciador quedan reservados, incluyendo, a t\u00edtulo enunciativo pero no limitativo, los derechos morales irrenunciables reconocidos por la ley aplicable. En la medida en que el licenciador ostente derechos exclusivos previstos por la ley nacional vigente que implementa la directiva europea en materia de derecho sui generis sobre bases de datos, renuncia expresamente a dichos derechos exclusivos. 4. Restricciones. La concesi\u00f3n de derechos que supone esta licencia se encuentra sujeta y limitada a las restricciones siguientes: Usted puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n solamente bajo los t\u00e9rminos de esta licencia y debe incluir una copia de la misma, o su Identificador Uniforme de Recurso (URI). Usted no puede ofrecer o imponer ninguna condici\u00f3n sobre la obra o prestaci\u00f3n que altere o restrinja los t\u00e9rminos de esta licencia o el ejercicio de sus derechos por parte de los concesionarios de la misma. Usted no puede sublicenciar la obra o prestaci\u00f3n. Usted debe mantener intactos todos los avisos que se refieran a esta licencia y a la ausencia de garant\u00edas. Usted no puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n con medidas tecnol\u00f3gicas que controlen el acceso o el uso de una manera contraria a los t\u00e9rminos de esta licencia. Esta secci\u00f3n 4.a tambi\u00e9n afecta a la obra o prestaci\u00f3n incorporada en una colecci\u00f3n, pero ello no implica que \u00e9sta en su conjunto quede autom\u00e1ticamente o deba quedar sujeta a los t\u00e9rminos de la misma. En el caso que le sea requerido, previa comunicaci\u00f3n del licenciador, si usted incorpora la obra en una colecci\u00f3n y/o crea una obra derivada, deber\u00e1 quitar cualquier cr\u00e9dito requerido en el apartado 4.b, en la medida de lo posible. Si usted reproduce, distribuye o comunica p\u00fablicamente la obra o la prestaci\u00f3n, una colecci\u00f3n que la incorpore o cualquier obra derivada, debe mantener intactos todos los avisos sobre la propiedad intelectual e indicar, de manera razonable conforme al medio o a los medios que usted est\u00e9 utilizando: El nombre del autor original, o el seud\u00f3nimo si es el caso, as\u00ed como el del titular originario, si le es facilitado. El nombre de aquellas partes (por ejemplo: instituci\u00f3n, publicaci\u00f3n, revista) que el titular originario y/o el licenciador designen para ser reconocidos en el aviso legal, las condiciones de uso, o de cualquier otra manera razonable. El t\u00edtulo de la obra o la prestaci\u00f3n si le es facilitado. El URI, si existe, que el licenciador especifique para ser vinculado a la obra o la prestaci\u00f3n, a menos que tal URI no se refiera al aviso legal o a la informaci\u00f3n sobre la licencia de la obra o la prestaci\u00f3n. En el caso de una obra derivada, un aviso que identifique la transformaci\u00f3n de la obra en la obra derivada (p. ej., \"traducci\u00f3n castellana de la obra de Autor Original,\" o \"gui\u00f3n basado en obra original de Autor Original\"). Este reconocimiento debe hacerse de manera razonable. En el caso de una obra derivada o incorporaci\u00f3n en una colecci\u00f3n estos cr\u00e9ditos deber\u00e1n aparecer como m\u00ednimo en el mismo lugar donde se hallen los correspondientes a otros autores o titulares y de forma comparable a los mismos. Para evitar la duda, los cr\u00e9ditos requeridos en esta secci\u00f3n s\u00f3lo ser\u00e1n utilizados a efectos de atribuci\u00f3n de la obra o la prestaci\u00f3n en la manera especificada anteriormente. Sin un permiso previo por escrito, usted no puede afirmar ni dar a entender impl\u00edcitamente ni expl\u00edcitamente ninguna conexi\u00f3n, patrocinio o aprobaci\u00f3n por parte del titular originario, el licenciador y/o las partes reconocidas hacia usted o hacia el uso que hace de la obra o la prestaci\u00f3n. Para evitar cualquier duda, debe hacerse notar que las restricciones anteriores (p\u00e1rrafos 4.a y 4.b) no son de aplicaci\u00f3n a aquellas partes de la obra o la prestaci\u00f3n objeto de esta licencia que \u00fanicamente puedan ser protegidas mediante el derecho sui generis sobre bases de datos recogido por la ley nacional vigente implementando la directiva europea de bases de datos 5. Exoneraci\u00f3n de responsabilidad A MENOS QUE SE ACUERDE MUTUAMENTE ENTRE LAS PARTES, EL LICENCIADOR OFRECE LA OBRA O LA PRESTACI\u00d3N TAL CUAL (ON AN \"AS-IS\" BASIS) Y NO CONFIERE NINGUNA GARANT\u00cdA DE CUALQUIER TIPO RESPECTO DE LA OBRA O LA PRESTACI\u00d3N O DE LA PRESENCIA O AUSENCIA DE ERRORES QUE PUEDAN O NO SER DESCUBIERTOS. ALGUNAS JURISDICCIONES NO PERMITEN LA EXCLUSI\u00d3N DE TALES GARANT\u00cdAS, POR LO QUE TAL EXCLUSI\u00d3N PUEDE NO SER DE APLICACI\u00d3N A USTED. 6. Limitaci\u00f3n de responsabilidad. SALVO QUE LO DISPONGA EXPRESA E IMPERATIVAMENTE LA LEY APLICABLE, EN NING\u00daN CASO EL LICENCIADOR SER\u00c1 RESPONSABLE ANTE USTED POR CUALESQUIERA DA\u00d1OS RESULTANTES, GENERALES O ESPECIALES (INCLUIDO EL DA\u00d1O EMERGENTE Y EL LUCRO CESANTE), FORTUITOS O CAUSALES, DIRECTOS O INDIRECTOS, PRODUCIDOS EN CONEXI\u00d3N CON ESTA LICENCIA O EL USO DE LA OBRA O LA PRESTACI\u00d3N, INCLUSO SI EL LICENCIADOR HUBIERA SIDO INFORMADO DE LA POSIBILIDAD DE TALES DA\u00d1OS. 7. Finalizaci\u00f3n de la licencia Esta licencia y la concesi\u00f3n de los derechos que contiene terminar\u00e1n autom\u00e1ticamente en caso de cualquier incumplimiento de los t\u00e9rminos de la misma. Las personas o entidades que hayan recibido de usted obras derivadas o colecciones bajo esta licencia, sin embargo, no ver\u00e1n sus licencias finalizadas, siempre que tales personas o entidades se mantengan en el cumplimiento \u00edntegro de esta licencia. Las secciones 1, 2, 5, 6, 7 y 8 permanecer\u00e1n vigentes pese a cualquier finalizaci\u00f3n de esta licencia. Conforme a las condiciones y t\u00e9rminos anteriores, la concesi\u00f3n de derechos de esta licencia es vigente por todo el plazo de protecci\u00f3n de los derechos de propiedad intelectual seg\u00fan la ley aplicable. A pesar de lo anterior, el licenciador se reserva el derecho a divulgar o publicar la obra o la prestaci\u00f3n en condiciones distintas a las presentes, o de retirar la obra o la prestaci\u00f3n en cualquier momento. No obstante, ello no supondr\u00e1 dar por concluida esta licencia (o cualquier otra licencia que haya sido concedida, o sea necesario ser concedida, bajo los t\u00e9rminos de esta licencia), que continuar\u00e1 vigente y con efectos completos a no ser que haya finalizado conforme a lo establecido anteriormente, sin perjuicio del derecho moral de arrepentimiento en los t\u00e9rminos reconocidos por la ley de propiedad intelectual aplicable. 8. Miscel\u00e1nea Cada vez que usted realice cualquier tipo de explotaci\u00f3n de la obra o la prestaci\u00f3n, o de una colecci\u00f3n que la incorpore, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra o la prestaci\u00f3n en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Cada vez que usted realice cualquier tipo de explotaci\u00f3n de una obra derivada, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra objeto de esta licencia en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Si alguna disposici\u00f3n de esta licencia resulta inv\u00e1lida o inaplicable seg\u00fan la Ley vigente, ello no afectar\u00e1 la validez o aplicabilidad del resto de los t\u00e9rminos de esta licencia y, sin ninguna acci\u00f3n adicional por cualquiera las partes de este acuerdo, tal disposici\u00f3n se entender\u00e1 reformada en lo estrictamente necesario para hacer que tal disposici\u00f3n sea v\u00e1lida y ejecutiva. No se entender\u00e1 que existe renuncia respecto de alg\u00fan t\u00e9rmino o disposici\u00f3n de esta licencia, ni que se consiente violaci\u00f3n alguna de la misma, a menos que tal renuncia o consentimiento figure por escrito y lleve la firma de la parte que renuncie o consienta. Esta licencia constituye el acuerdo pleno entre las partes con respecto a la obra o la prestaci\u00f3n objeto de la licencia. No caben interpretaciones, acuerdos o condiciones con respecto a la obra o la prestaci\u00f3n que no se encuentren expresamente especificados en la presente licencia. El licenciador no estar\u00e1 obligado por ninguna disposici\u00f3n complementaria que pueda aparecer en cualquier comunicaci\u00f3n que le haga llegar usted. Esta licencia no se puede modificar sin el mutuo acuerdo por escrito entre el licenciador y usted.","title":"CF manual integrador"},{"location":"markdown_strict/CF_manual-integrador/#introduccion","text":"El Cliente de Firma es una herramienta de Firma Electr\u00f3nica que funciona en forma de Applet de Java integrado en una p\u00e1gina Web mediante JavaScript. El Cliente hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados ( KeyStore ) del navegador web ( Internet Explorer, Mozilla, Firefox ) o el sistema operativo as\u00ed como de los que est\u00e9n en dispositivos (tarjetas inteligentes , dispositivos USB ) configurados en el mismo (el caso de los DNI-e). El Cliente de Firma, como su nombre indica, es una aplicaci\u00f3n que se ejecuta en cliente (en el ordenador del usuario, no en el servidor Web). Esto es as\u00ed para evitar que la clave privada asociada a un certificado tenga que \u201csalir\u201d del contenedor del usuario (tarjeta, dispositivo USB o navegador) ubicado en su PC. De hecho, nunca llega a salir del navegador, el Cliente le env\u00eda los datos a firmar y \u00e9ste los devuelve firmados. El Cliente de Firma contiene las interfaces y componentes web necesarios para la realizaci\u00f3n de los siguientes procesos (adem\u00e1s de otros auxiliares como c\u00e1lculos de hash, lectura de ficheros, etc\u2026): Firma de datos y ficheros. Multifirma masiva de datos y ficheros. Co-firma (CoSignature) Multifirma al mismo nivel. Contrafirma (CounterSignature) Multifirma en cascada. Cifrado de datos. Generaci\u00f3n de sobres electr\u00f3nicos. El componente Applet Cliente @firma hace uso de Google Analitics con el objetivo de conocer estad\u00edsticas de las funciones que se utilizan del Cliente y los entornos en los que principalmente se ejecutan y en los que deben centrarse las labores de mantenimiento. No almacena ning\u00fan tipo de informaci\u00f3n personal del usuario, ni hace uso de cookies.","title":"Introducci\u00f3n"},{"location":"markdown_strict/CF_manual-integrador/#objeto-y-alcance","text":"El presente documento recoge la descripci\u00f3n del cliente @firma y todas sus funcionalidades, as\u00ed como la informaci\u00f3n necesaria para permitir a los integradores del cliente incorporarlo como parte de sus aplicaciones Web para la realizaci\u00f3n de operaciones criptogr\u00e1ficas. Los aspectos detallados que se tratan del Cliente de Firma son los siguientes: Requisitos del Cliente Sistemas operativos soportados Navegadores soportados Otros requisitos Componentes del Cliente Funcionalidad b\u00e1sica del Cliente: Firma Firma masiva de hashes Multifirma masiva de ficheros Multifirma masiva program\u00e1tica Co-firma Contrafirma Cifrado y descifrado de datos Generaci\u00f3n de sobres digitales. Apertura de sobres. Configuraci\u00f3n del cliente: Algoritmos y formatos Selecci\u00f3n de certificados Otras funcionalidades Ejemplos que abarquen los aspectos anteriormente descritos.","title":"Objeto y alcance"},{"location":"markdown_strict/CF_manual-integrador/#requisitos-minimos","text":"Sistema Operativo Windows XP SP3 / Vista SP2 / 7 SP1 / Server 2003 SP2 / Server 2008 SP2 / 8 / 8.1 y superiores El Applet Cliente @firma no es compatible con Windows 8 RT. Linux 2.6 (Guadalinex y Ubuntu) y superiores. Apple OS X 10.9.4 (OS X Mavericks) y superiores, 10.10 (OS X Yosemite) y superiores. Navegador web: Firefox 3.0 y superiores. Internet Explorer 7 o superior, en 32 (x86) y 64 bits (x64). Las versiones de 64 bits necesitan un JRE de 64 bits. No se soporta Windows en IA64. Google Chrome 4 o superior (no soportado en OS X). Es necesario una versi\u00f3n de Chrome que soporte Applets de Java. Apple Safari 7.0.6 o superior (\u00fanicamente soportado en OS X) JRE: JRE 6 de 32 bits (\u00faltima update disponible) instalado y habilitado en el navegador. Se recomienda el uso de la \u00faltima versi\u00f3n disponible de Java 7. JRE 7 de 32 bits o 64 bits instalado y habilitado en el navegador. \u00daltima versi\u00f3n disponible recomendada. Se desaconseja el uso de las updates 5 y 65 de Java 7 debido a que estas pueden causar problemas en la carga del applet Cliente. JRE 8u20 de 32 bits o 64 bits instalado y habilitado en el navegador. \u00daltima versi\u00f3n disponible recomendada. Certificado digital de usuario instalado en el navegador / sistema operativo o disponible a trav\u00e9s de un m\u00f3dulo PKCS#11 o CSP instalado en el navegador (caso del DNI-e). El Cliente siempre acceder\u00e1 al almac\u00e9n de certificados del sistema operativo en el que se ejecute, salvo cuando se ejecute sobre Mozilla Firefox, en cuyo caso acceder\u00e1 al almac\u00e9n de este navegador.","title":"Requisitos m\u00ednimos"},{"location":"markdown_strict/CF_manual-integrador/#que-version-de-mi-navegador-web-debo-usar-con-mi-sistema-operativo","text":"A continuaci\u00f3n se muestra la tabla de compatibilidad de versi\u00f3n de navegador Web seg\u00fan producto y sistema operativo. Es importante recalcar que algunas de las celdas reflejan configuraciones no certificadas por Oracle como compatibles con JSE. Esto quiere decir que, si bien se han hecho las pruebas pertinentes por parte del Cliente @firma para asegurar su correcto funcionamiento, pueden existir problemas no detectados de compatibilidad de JSE con esa versi\u00f3n de navegador en ese sistema operativo, por lo que no se dar\u00e1 soporte a esa combinaci\u00f3n mientras Oracle no la certifique. Internet Explorer Google Chrome Mozilla Firefox Apple Safari Opera Windows XP SP3 7 o superior 4 o superior 3.6 o superior No soportado No soportado Windows Vista SP2 8 o superior 4 o superior 3.6 o superior No soportado No soportado Windows 7 SP1 8 o superior 4 o superior 3.6 o superior No soportado No soportado Mac OS X Mavericks / Yosemite N/A No soportado Versiones de la 3.6 a la 20 5 o superior No soportado Linux N/A No soportado 3.6 o superior N/A No soportado","title":"\u00bfQu\u00e9 versi\u00f3n de mi navegador Web debo usar con mi sistema operativo?"},{"location":"markdown_strict/CF_manual-integrador/#internet-explorer-10-y-11-en-windows-8","text":"El Applet Cliente @firma no es compatible con Internet Explorer en su versi\u00f3n Metro, y debe ser ejecutado con la versi\u00f3n de escritorio de Internet Explorer. Para automatizar en cierta manera el cambio de Internet Explorer desde Metro hasta el escritorio cl\u00e1sico de Windows 8 se debe incluir la siguiente meta-informaci\u00f3n en la cabecera de la p\u00e1gina HTML: <meta http-equiv=\"X-UA-Compatible\" content=\"requiresActiveX=true\"/> Puede encontrar m\u00e1s informaci\u00f3n sobre complementos de navegador ( plugins ) en Internet Explorer sobre Metro en Windows 8 en: http://msdn.microsoft.com/en-us/library/ie/hh968248%28v=vs.85%29.aspx","title":"Internet Explorer 10 y 11 en Windows 8"},{"location":"markdown_strict/CF_manual-integrador/#que-version-de-java-debo-usar-en-linux","text":"Existen m\u00faltiples versiones de Linux, cada una de las cuales, introduce cambios que pueden afectar al funcionamiento del Cliente @firma. Seg\u00fan la distribuci\u00f3n y versi\u00f3n utilizada de Linux puede funcionar adecuadamente una u otra versi\u00f3n de Java. Se recomienda, por su mayor soporte, que en Linux se utilice siempre la JRE 6 de Oracle.","title":"\u00bfQu\u00e9 versi\u00f3n de Java debo usar en Linux?"},{"location":"markdown_strict/CF_manual-integrador/#que-version-de-java-debo-usar-con-el-navegador-web-mozilla-firefox","text":"A continuaci\u00f3n se nuestra la tabla de compatibilidad de versiones de Java (distinguiendo entre Java 1.6 y 1.7) seg\u00fan versi\u00f3n de Mozilla Firefox (con independencia del sistema operativo y la arquitectura). En ciertas celdas se indica que la combinaci\u00f3n no est\u00e1 certificada por Oracle, lo cual significa que, aunque se han hecho las pertinentes pruebas de correcto funcionamiento con el Cliente @firma, no se da soporte a esa combinaci\u00f3n. Java 6 Java 7 Firefox 3.6 6u18 o superior 7u07 o superior Firefox 4 6u25 o superior 7u07 o superior Firefox 5 6u27 o superior 7u07 o superior Firefox 7 y superiores NO CERTIFICADO 7u07 o superior","title":"\u00bfQu\u00e9 versi\u00f3n de Java debo usar con el navegador Web Mozilla Firefox?"},{"location":"markdown_strict/CF_manual-integrador/#que-version-de-java-debo-usar-con-el-navegador-microsoft-internet-explorer","text":"A continuaci\u00f3n se nuestra la tabla de compatibilidad de versiones de Java (distinguiendo entre Java 1.6 y 1.7) seg\u00fan versi\u00f3n de Internet Explorer (con independencia de la versi\u00f3n y arquitectura de Windows). En ciertas celdas se indica que la combinaci\u00f3n no est\u00e1 certificada por Oracle, lo cual significa que, aunque se han hecho las pertinentes pruebas de correcto funcionamiento con el Cliente @firma, no se da soporte a esa combinaci\u00f3n. Java 6 Java 7 Internet Explorer 7 6u13 o superior 7u07 o superior Internet Explorer 8 6u13 o superior 7u07 o superior Internet Explorer 9 y superiores 6u25 o superior 7u07 o superior Internet Explorer 9 (64 bits) y superiores -- 7u07 (64 bits) o superior","title":"\u00bfQu\u00e9 versi\u00f3n de Java debo usar con el navegador Microsoft Internet Explorer?"},{"location":"markdown_strict/CF_manual-integrador/#que-version-de-java-debo-usar-con-el-navegador-google-chrome","text":"A continuaci\u00f3n se nuestra la tabla de compatibilidad de versiones de Java (distinguiendo entre Java 1.6 y 1.7) seg\u00fan versi\u00f3n de Google Chrome (con independencia del sistema operativo y la arquitectura). En ciertas celdas se indica que la combinaci\u00f3n no est\u00e1 certificada por Oracle, lo cual significa que, aunque se han hecho las pertinentes pruebas de correcto funcionamiento con el Cliente @firma, no se da soporte a esa combinaci\u00f3n. Recuerde que el Cliente @firma no soporta Google Chrome en Mac OS X. Java 6 Java 7 Google Chrome 4 6u21 o superior 7u07 o superior Google Chrome 10 6u25 o superior 7u07 o superior Google Chrome 11 y superiores NO CERTIFICADO 7u07 o superior","title":"\u00bfQu\u00e9 versi\u00f3n de Java debo usar con el navegador Google Chrome?"},{"location":"markdown_strict/CF_manual-integrador/#que-version-de-java-debo-usar-con-el-navegador-apple-safari","text":"A continuaci\u00f3n se nuestra la tabla de compatibilidad de versiones de Java (distinguiendo entre Java 1.6 y 1.7) y la versi\u00f3n seg\u00fan versi\u00f3n de Google Chrome (con independencia del sistema operativo y la arquitectura). En ciertas celdas se indica que la combinaci\u00f3n no est\u00e1 certificada por Oracle, lo cual significa que, aunque se han hecho las pertinentes pruebas de correcto funcionamiento con el Cliente @firma, no se da soporte a esa combinaci\u00f3n. Java 6 Java 7 Apple Safari (Mac OS X) NO CERTIFICADO 7u10 o superior Apple Safari (Windows XP) NO COMPATIBLE NO CERTIFICADO Apple Safari (Windows 7) NO CERTIFICADO NO CERTIFICADO Para el uso del navegador Apple Safari en cualquier sistema operativo se recomienda tener instalada la \u00faltima versi\u00f3n disponible de Java 7. La compatibilidad del Cliente @firma sobre Apple Safari en Windows est\u00e1 limitada por la compatibilidad del navegador con el plugin de Java, por lo que se recomienda el uso de otro navegador en Windows.","title":"\u00bfQu\u00e9 versi\u00f3n de Java debo usar con el navegador Apple Safari?"},{"location":"markdown_strict/CF_manual-integrador/#que-version-de-java-debo-usar-con-la-variante-de-64-bits-de-mi-navegador-web","text":"A continuaci\u00f3n se nuestra la tabla de compatibilidad de versiones de Java en 64 bits seg\u00fan combinaci\u00f3n de versi\u00f3n de 64 bits de sistema operativo y versi\u00f3n de 64 bits de navegador Web. Es importante recalcar que este es un caso excepcional, ya que, incluso si el sistema operativo es de 64 bits, es posible (y de hecho lo normal), usar un navegador Web de 32 bits con java de 32 bits, con lo que no aplicar\u00eda esta matriz. Solo se da soporte a arquitecturas de 64 bits basadas en x64 (tambi\u00e9n llamada \u201cIntel 64\u201d, \u201cx86-64\u201d, \u201cAMD 64\u201d o \u201cEM64T\u201d). En ciertas celdas se indica que la combinaci\u00f3n no est\u00e1 certificada por Oracle, lo cual significa que, aunque se han hecho las pertinentes pruebas de correcto funcionamiento con el Cliente @firma, no se da soporte a esa combinaci\u00f3n. Internet Explorer 64 Google Chrome 64 Mozilla Firefox 64 Apple Safari 64 Opera 64 Windows 64-bit (x64) 7u07 y superior N/A N/A N/A N/A Mac OS X 64-bit N/A N/A N/A 8u20 y superior N/A Linux 64-bit (x64) N/A N/A N/A N/A NO CERTIFICADO Internet Explorer 64 s\u00f3lo puede utilizarse con seguridad en Java 7 de 64bits ya que las versiones de Java 6 64 bits no incluyen las bibliotecas necesarias para el acceso de los almacenes de Windows y Mozilla y los permisos del sistema del usuario pueden bloquear su instalaci\u00f3n. Las celdas marcadas con \u201cN/A\u201d indican que no est\u00e1 disponible una versi\u00f3n final de navegador Web para arquitecturas x64. No se da soporte a ning\u00fan tipo de versi\u00f3n preliminar (\u201calpha\u201d, \u201cbeta\u201d, \u201crelease candidate\u201d, \u201cnightly build\u201d, etc.).","title":"\u00bfQu\u00e9 versi\u00f3n de Java debo usar con la variante de 64 bits de mi Navegador Web?"},{"location":"markdown_strict/CF_manual-integrador/#que-version-de-java-debo-usar-con-mac-os-x","text":"Apple Java 6 Oracle Java 7 Oracle Java 8 10.9 (Mavericks) NO CERTIFICADO JRE 7u67 o superior JRE 8u20 o superior 10.10 (Yosemite) NO CERTIFICADO JRE 7u67 o superior JRE 8u20 o superior Aunque Java est\u00e9 correctamente instalado, puede ser necesaria la activaci\u00f3n del soporte espec\u00edfico de Applets de Java y aplicaciones Java WebStart. La forma de realizar esta activaci\u00f3n depende de su versi\u00f3n de Java y OS X, si bien habitualmente puede realizarse desde \u201cPreferencias de Java\u201d, en el men\u00fa \u201cUtilidades\u201d de Mac OS X: <","title":"\u00bfQu\u00e9 versi\u00f3n de Java debo usar con Mac OS X?"},{"location":"markdown_strict/CF_manual-integrador/#applets-de-java-en-versiones-posteriores-a-la-actualizacion-2012-006-de-apple","text":"La actualizaci\u00f3n 2012-006 de Apple Java para OS X deshabilita por completo la ejecuci\u00f3n de Applets de Java y aplicaciones Java WebStart en navegadores Web (con el JRE de Apple), introduciendo una incompatibilidad total con el Cliente @firma. Puede solventar este inconveniente de dos formas alternativas: Volviendo a habilitar manualmente el soporte de Applets de Java y aplicaciones Java WebStart siguiendo las instrucciones descritas en la siguiente p\u00e1gina Web: http://support.apple.com/kb/HT5559 Instalando Oracle JRE 7 para Mac OS X Es importante tener en cuenta que Oracle JRE 7 es incompatible con las versiones de 32 bits del navegador Web Google Chrome (las \u00fanicas actualmente disponibles).","title":"Applets de Java en versiones posteriores a la actualizaci\u00f3n 2012-006 de Apple"},{"location":"markdown_strict/CF_manual-integrador/#applets-de-java-en-versiones-posteriores-a-la-actualizacion-2012-003-de-apple","text":"Por defecto, tras instalar la actualizaci\u00f3n de Java 2012-003 de Apple, Mac OS X no permite la ejecuci\u00f3n de Applets o aplicaciones Java Web Start, lo cual provoca que el Applet Cliente @firma no funcione. Para habilitar los Applets de Java y las aplicaciones Web Start en Mac OS X es necesario indicarlo desde el panel de \u201cPreferencias de Java\u201d dentro de las Preferencias generales de Mac OS X y marcar la casilla \u201cActivar m\u00f3dulo de Applet y aplicaciones Web Start\u201d. < Como medida de seguridad, si el usuario no ejecuta Applets de Java por un periodo de tiempo prolongado, Mac OS X deshabilita autom\u00e1ticamente la ejecuci\u00f3n de Applets y aplicaciones Java Web Start, por lo que ser\u00e1 necesario comprobar que esta ejecuci\u00f3n est\u00e1 permitida antes de iniciar el Applet Cliente @firma, independientemente de si esta ejecuci\u00f3n ya fue habilitada anteriormente.","title":"Applets de Java en versiones posteriores a la actualizaci\u00f3n 2012-003 de Apple"},{"location":"markdown_strict/CF_manual-integrador/#applets-de-java-en-mac-os-x-mountain-lion-108x","text":"Mac OS X Mountain Lion introduce, como medida de seguridad una restricci\u00f3n a la ejecuci\u00f3n de aplicaciones descargadas a trav\u00e9s de Internet, como son los Applets de Java. Por defecto, Mac OS X no permite esta ejecuci\u00f3n a menos las aplicaciones se hayan descargado a trav\u00e9s de la Apple Mac App Store (o eventualmente que el desarrollador que firma la aplicaci\u00f3n est\u00e9 autorizado por la propia Apple). Para permitir la ejecuci\u00f3n del Applet @firma descargado desde una p\u00e1gina Web normal, es necesario indicarlo mediante la opci\u00f3n de Seguridad y Privacidad (dentro de Preferencias) de Mac OS X marcando la opci\u00f3n \u201cPermitir aplicaciones descargadas de: Cualquier sitio\u201d. <","title":"Applets de Java en Mac OS X Mountain Lion (10.8.x)"},{"location":"markdown_strict/CF_manual-integrador/#informacion-adicional","text":"http://www.oracle.com/technetwork/java/javase/config-417990.html http://www.oracle.com/technetwork/java/javase/system-configurations-135212.html http://www.oracle.com/technetwork/java/javase/6u10-142936.html http://www.oracle.com/technetwork/java/javase/6u12-137788.html http://www.oracle.com/technetwork/java/javase/6u18-142093.html http://www.oracle.com/technetwork/java/javase/6u21-156341.html http://www.oracle.com/technetwork/java/javase/6u25releasenotes-356444.html http://www.oracle.com/technetwork/java/javase/6u29-relnotes-507960.html http://www.oracle.com/technetwork/java/javase/certconfig-2095354.html","title":"Informaci\u00f3n adicional"},{"location":"markdown_strict/CF_manual-integrador/#componentes-del-cliente","text":"El cliente se compone de: Applet cliente. Este es n\u00facleo de la aplicaci\u00f3n. Se encuentran en forma de fichero .jar . Bibliotecas JavaScript : Contienen funciones para la automatizaci\u00f3n de los procesos de firma. Son opcionales y se puede operar sin ellas, pero facilitan los procesos m\u00e1s comunes. El conjunto principal de bibliotecas JavaScript no est\u00e1n dise\u00f1adas para ser modificadas directamente por el integrador excepto en caso de necesidades muy espec\u00edficas. No obstante, existe una biblioteca JavaScript llamada constantes.js que s\u00ed contiene par\u00e1metros modificables que permiten una mayor personalizaci\u00f3n del comportamiento del cliente.","title":"Componentes del Cliente"},{"location":"markdown_strict/CF_manual-integrador/#despliegue-del-cliente","text":"","title":"Despliegue del Cliente"},{"location":"markdown_strict/CF_manual-integrador/#ficheros-para-el-despliegue-del-cliente","text":"El listado completo de archivos que cubren todas las construcciones soportadas por el cliente son: applet_afirma_3_4.jar N\u00facleo del Cliente @firma. Este fichero se distribuye firmado y configurado a trav\u00e9s del MANIFEST.MF que contiene para ser ejecutado desde cualquier origen. Sin embargo, por seguridad y para evitar que aparezcan ventanas innecesarias de advertencia al usuario, el integrador deber\u00eda eliminar esta firma, configurarlo para la ejecuci\u00f3n expresamente en los dominios en los que se vaya a desplega y firmarlo con un certificado de firma de c\u00f3digo reconocido por Oracle Java. constantes.js Fichero de variables JavaScript para la instalaci\u00f3n y carga del Cliente @firma. Puede ser modificado por el integrador. common-js\\.js Ficheros JavaScript del Cliente @firma. No deben ser modificador por el integrador. No debe eliminarse ninguno de estos ficheros de la carpeta del servidor Web. \u00danicamente el fichero constantes.js puede ser modificado por el integrador para personalizar el despliegue.","title":"Ficheros para el despliegue del Cliente"},{"location":"markdown_strict/CF_manual-integrador/#despliegue-del-cliente_1","text":"Para el despliegue del cliente en un entorno Web, por defecto, deben situarse todos los ficheros proporcionados, respetando la estructura de directorios, en la misma carpeta que la p\u00e1gina Web desde la que se realizar\u00e1 su carga. En ciertas ocasiones, puede convenir que los archivos del Cliente residan en una ruta distinta al de la p\u00e1gina web que lo despliega. Para estos casos, deben situarse los archivos donde se deseen y configurar la ruta mediante la constante JavaScript \u201cbase\u201d del fichero constantes.js . La ruta establecida mediante la constante \u201cbase\u201d podr\u00e1 ser absoluta o relativa. Siempre usar\u00e1 la barra separadora \u201c/\u201d (nunca \u201c\\) y no terminar\u00e1 con este car\u00e1cter. Rutas de ejemplo: Absolutas: \u201cfile:///C:/ficheros\u201d,\u201dhttp://www.minhap.es/ficheros\u201d, \u201chttps://ficheros\u201d\u2026 Relativas: \u201cficheros\u201d, \u201cafirma/ficheros\u201d, \u201c/ficheros\u201d\u2026 En caso de que el Cliente se cargue desde una Web creada al vuelo (no existe como un fichero en el servidor) ser\u00e1 obligatorio establecer la variable \u201cbase\u201d para indicar d\u00f3nde se encuentran los distintos componentes del Cliente.","title":"Despliegue del Cliente"},{"location":"markdown_strict/CF_manual-integrador/#despliegue-en-entornos-de-web-dinamica-servidores-de-aplicaciones-y-en-general-servidores-no-estaticos","text":"El Applet Cliente @firma necesita que todos sus recursos (JAR de Java, ficheros JavaScript y p\u00e1gina HTML de despliegue) se encuentren en el mismo directorio (misma ruta Web). Cuando se despliega este en servidores Web no est\u00e1ticos (como un servidor de Portlets, un servidor de p\u00e1ginas activas de Microsoft, etc.), es responsabilidad del integrador hacer que los recursos puedan ser referenciados tal y como si estuviesen en un servidor est\u00e1tico o bien modificar tanto HTML como JavaScript para introducir referencias absolutas donde pudiese ser necesario. Como norma general, no se proporciona soporte t\u00e9cnico para problemas de despliegue en entornos Web con servidores no est\u00e1ticos, como pueden ser: Servidores de aplicaciones usando p\u00e1ginas din\u00e1micas (JSP, JSF, ASP, etc.). Mapeos virtuales de los directorios que puedan afectar a los recursos del Applet Cliemte @firma. Servidores de Portlets. Etc.","title":"Despliegue en entornos de Web din\u00e1mica, servidores de aplicaciones y en general servidores no est\u00e1ticos"},{"location":"markdown_strict/CF_manual-integrador/#uso-del-cliente-de-firma-como-applet-de-java","text":"","title":"Uso del Cliente de Firma como Applet de Java"},{"location":"markdown_strict/CF_manual-integrador/#carga-del-cliente","text":"Para la carga del Cliente desde una p\u00e1gina Web ser\u00e1 necesario importar en esta, al menos, las bibliotecas \u201c constantes.js \u201d y \u201c instalador.js \u201d que acompa\u00f1an al Cliente. Para importarlas, se puede utilizar su ruta relativa desde la p\u00e1gina Web que las carga o la ruta absoluta de los ficheros. El proceso de carga se inicia al invocar la funci\u00f3n JavaScript \u201c cargarAppletFirma() \u201d incluida en el fichero \u201c instalador.js \u201d. El cliente de firma queda cargado en memoria y puede accederse a las funcionalidades que implementa por medio de la variable JavaScript \u201cclienteFirma\u201d, localizada en el fichero \u201c constantes.js \u201d. La carga del cliente en una p\u00e1gina puede realizarse con s\u00f3lo introducir una sentencia JavaScript en el propio cuerpo de la p\u00e1gina que se encargue de invocar al m\u00e9todo de carga. Por ejemplo: <html> <head> <script type=\"text/javascript\" language=\"javascript\" src=\"constantes.js\"></script> <script type=\"text/javascript\" language=\"javascript\" src=\"common-js/instalador.js\"></script> [\u2026] </head> <body> <script type=\"text/javascript\"> cargarAppletFirma(); </script> [\u2026] </body> </html>","title":"Carga del Cliente"},{"location":"markdown_strict/CF_manual-integrador/#tratamiento-de-errores","text":"Es posible tratar todos los errores que se hayan producido durante la operaci\u00f3n del cliente mediante JavaScript. El cliente siempre almacena si la \u00faltima operaci\u00f3n criptogr\u00e1fica que realiz\u00f3 finaliz\u00f3 correctamente o no. Es posible consultar este resultado mediante el m\u00e9todo del cliente isError() . En caso de producirse un error adem\u00e1s, se podr\u00e1 obtener la descripci\u00f3n del mismo mediante el m\u00e9todo getErrorMessage() . De esta forma pueden elaborarse mecanismos JavaScript capaces de detectar y mostrar los errores pertinentes al usuario. Un ejemplo que ilustra este sistema de tratamiento de errores es: v ar fichero= document.getElementById( \"fichero\"); clienteFirma.initialize(); clienteFirma.setFileuri(fichero.value); firmar(); if(!clienteFirma.isError()) { var firmaB64 = document.getElementById(\"firmaB64\"); firmaB64.value = clienteFirma.getSignatureBase64Encoded(); return true; // Enviar } else { alert(\"No se ha podido firmar: \" + clienteFirma.getErrorMessage()); return false; } Tambi\u00e9n es posible dejar la tarea de notificaci\u00f3n de los errores directamente al cliente. En caso de hacerlo, el cliente mostrar\u00e1 un mensaje de error mediante un dialogo Java por cada error de operaci\u00f3n detectado, salvo en multifirmas masivas en donde estas notificaciones har\u00edan inviable un uso eficiente del cliente. En cambio, en las operaciones de multifirma masiva se generan trazas de log. Para activar este mecanismo de notificaci\u00f3n de errores es necesario configurar a true la constante showErrors del fichero JavaScript \u201c constantes.js \u201d y establecerla antes de cada operaci\u00f3n mediante la funci\u00f3n initialize() de \u201c firma.js \u201d. Por defecto, esta opci\u00f3n est\u00e1 configurada a false .","title":"Tratamiento de errores"},{"location":"markdown_strict/CF_manual-integrador/#firma-electronica","text":"El proceso de firma electr\u00f3nica permite, por defecto, la firma de cualquier tipo de datos, independientemente de su formato. En concreto, los datos de entrada pueden ser. Se permiten diferentes tipos de datos a firmar (solo se puede firmar un tipo cada vez): un fichero : se establece qu\u00e9 fichero firmar mediante el m\u00e9todo setFileuri , que recibe como par\u00e1metro de entrada una cadena con la ruta al fichero a firmar. Este m\u00e9todo no comprueba en ning\u00fan momento la existencia de un fichero en la ruta indicada. Si el fichero no existiese se producir\u00eda un error durante la operaci\u00f3n en cuesti\u00f3n. datos : se establecen mediante el m\u00e9todo setData , que recibe una cadena con los datos codificados en base 64. un hash : se establece mediante el m\u00e9todo setHash , que recibe una cadena con el hash codificado en base 64. Si no se invoca ninguno de estos m\u00e9todos, el Cliente solicitar\u00e1 al usuario un fichero para firmar En las firmas XML (XAdES y XMLsSig), en el caso de que los datos insertados est\u00e9n en base 64 (ya sea mediante el setFileuri y un fichero de texto que contenga el base 64 de los datos o a trav\u00e9s del setData y una cadena doblemente codificada en base 64), no se realizar\u00e1 la codificaci\u00f3n interna en base 64 que requiere la firma XML para ficheros binarios. As\u00ed obtenemos que se firma la codificaci\u00f3n base 64 de los datos y no una doble codificaci\u00f3n en base 64 de estos. Este mismo comportamiento lo podemos obtener mediante el m\u00e9todo setFileuriBase64 que establece como datos de entrada para las firmas electr\u00f3nicas el contenido descodificado de un fichero en base 64. Mientras que indicar con setFileuri un fichero con datos codificados en base 64 s\u00f3lo aplica a las firmas XAdES y XMLdSig, el m\u00e9todo setFileuriBase64 funciona con todos los formatos de firma. Esto permite indicar los datos a firmar a trav\u00e9s de un fichero que los contiene en base 64. Previamente a la realizaci\u00f3n de la firma, es aconsejable la inicializaci\u00f3n del cliente y su configuraci\u00f3n con los par\u00e1metros preestablecidos. Esto podemos realizarlo con las funciones JavaScript initialize() y configuraFirmar() , que configura los siguientes par\u00e1metros seg\u00fan las variables indicadas del fichero constantes.js\u201d : Algoritmo de firma : Determinado por la variable signatureAlgorithm . Por defecto, SHA1withRSA. Formato de firma : Determinado por la variable signatureFormat . Por defecto, CMS. Filtro de certificados : Determinado por la variable certFilter . Por defecto, ninguno. El m\u00e9todo del applet que se ha de invocar para firmar es sign() , aunque tambi\u00e9n se puede llamar a la funci\u00f3n JavaScript firmar() (en firma.js ) que, como en los casos anteriores, espera si es necesario a que el cliente est\u00e9 cargado y actualiza el entorno operativo si es necesario. Por ejemplo: <script type=\"text/javascript\" language=\"javascript\"> function enviar() { var fichero= document.getElementById(\"fichero\"); initialize(); configurarFirma(); clienteFirma.setFileuri(fichero.value); firmar(); if(!clienteFirma.isError()) { var firmaB64 = document.getElementById(\"firmaB64\"); firmaB64.value = clienteFirma.getSignatureBase64Encoded(); return true; // Enviar } else { alert(\"No se ha podido firmar: \"+clienteFirma.getErrorMessage()); return false; } } </script> [\u2026] <form id=\"formulario\" action=\"/enviarFirma\"> <input type=\"hidden\" id=\"firmaB64\"> <br> Fichero a firmar: <input type=\"file\" id=\"fichero\"> <input type=\"submit\" onclick=\"return enviar();\"> </form> Pueden ejecutarse operaciones de firma, as\u00ed como de cofirma y contrafirma desde el HTML de prueba demoMultifirma.html . < Figura 1: HTML de prueba demoMultifirma.html","title":"Firma electr\u00f3nica"},{"location":"markdown_strict/CF_manual-integrador/#cofirma-co-sign","text":"La cofirma permite a varios usuarios firmar un mismo documento. Una cofirma siempre firma los datos que se le indican, nunca se aplica ni depende de otra de las firmas del documento. El caso de la cofirma es igual al de la firma simple, pero adem\u00e1s de los datos hay que pasar al Cliente la firma electr\u00f3nica de los dem\u00e1s firmantes. Esto se puede hacer de diferentes maneras: Mediante un fichero que contenga la firma electr\u00f3nica, con el m\u00e9todo setElectronicSignatureFile() , que recibe como par\u00e1metro una cadena con la ruta al fichero. Introduciendo directamente la firma, con el m\u00e9todo setElectronicSignature() que recibe como par\u00e1metro una cadena con la firma en base 64. Si no se especifica, se pedir\u00e1 al usuario que seleccione el fichero de firma. Una vez especificados los par\u00e1metros necesarios, se invoca al m\u00e9todo coSign() . La salida es an\u00e1loga a la de la operaci\u00f3n de firma. Pueden ejecutarse operaciones de cofirma, as\u00ed como de firma y contrafirma desde el HTML de prueba \u201c demoMultifirma.html \u201d.","title":"Cofirma (co-sign)"},{"location":"markdown_strict/CF_manual-integrador/#contrafirma-counter-sign","text":"La contrafirma permite a un usuario firmar las firmas de otros usuarios. El caso de la contrafirma es similar a los anteriores, pero s\u00f3lo es necesario indicar la firma que deseamos contrafirma (no son necesarios los datos) y, seg\u00fan la operaci\u00f3n concreta, puede ser necesario conocer la estructura de firmantes que contiene. Para conocer la estructura de firmantes de una firma el Cliente dispone del m\u00e9todo getSignersStructure() . Este m\u00e9todo devuelve una cadena que contiene los nombres de los firmantes separados por un retorno de carro (\u201c \\n \u201d en JavaScript). Al comienzo del nombre hay tantos tabulados (\u201c \\t \u201d) como nivel ocupe el firmante en el documento. Por ejemplo, si A y B co-firman un documento y C contra-firma la firma de A, entonces la cadena devuelta ser\u00eda \u201c A\\n\\tC\\nB \u201d. La firma que deseamos contrafirmar se especifica mediante el m\u00e9todo setElectronicSignature() o setElectronicSignatureFile() , que reciben la firma en base 64 y la ruta del fichero de firma, respectivamente. En el fichero demoMultifirma.html se puede ver un ejemplo de c\u00f3mo tratar esta cadena. Se puede especificar qu\u00e9 firmas se desean firmar de diferentes maneras: Todas las firmas hojas (firmas no contra-firmadas): invocando el m\u00e9todo counterSignLeafs() . Todas las firmas: invocando el m\u00e9todo counterSignTree(). Todas las firmas de un firmante: configurando los firmantes con el m\u00e9todo setSignersToCounterSign() que recibe como par\u00e1metro una cadena con los nombres de los firmantes separados por \u201c \\n \u201d e invocando el m\u00e9todo counterSignSigners(). Firmas concretas: con el m\u00e9todo setSignersToCounterSign() indicamos que firmas deseamos contrafirmar a partir de su posici\u00f3n (partiendo de 0) seg\u00fan el orden de aparici\u00f3n en la estructura devuelta por getSignersStructure (). Las posiciones se indican con n\u00fameros separados por \u201c \\n \u201d. Por ejemplo, \u201c 0\\n3\\n4 \u201d indica que se contrafirmen las firmas de las posiciones 0, 3 y 4. Se invoca con el m\u00e9todo counterSignSigners(). La salida es an\u00e1loga a la de la firma digital. T\u00e9ngase en cuenta que las contrafirmas siempre aplican a una firma y se colocan bajo esta en el \u00e1rbol de firmas, al contrario que las cofirmas, que siempre se colocan como un nodo dependiente de los datos. Pueden ejecutarse operaciones de contrafirma, as\u00ed como de firma y cofirma desde el HTML de prueba \u201c demoMultifirma.html \u201d. NOTA IMPORTANTE: Dado que las contrafirmas se aplican sobre las firmas previas y no sobre los propios datos, no es posible (no es conceptualmente correcto) realizar contrafirmas multi-fase, es decir, las huellas digitales se calculan al vuelo siempre (no se admiten huellas digitales pre-generadas externamente), ya que estas se generan en base a las firmas, no a los datos.","title":"Contrafirma (counter-sign)"},{"location":"markdown_strict/CF_manual-integrador/#firma-y-multifirma-masiva","text":"","title":"Firma y Multifirma Masiva"},{"location":"markdown_strict/CF_manual-integrador/#consideraciones-previas","text":"Un aspecto importante que debe tenerse en cuenta en todas las operaciones de firma y multifirma masiva es que los procesos no son interactivos a nivel de operaci\u00f3n individual, es decir, que no se requiere intervenci\u00f3n del usuario y este no recibe informaci\u00f3n ni notificaciones hasta que finaliza el proceso completo, tanto si han ocurrido errores durante su desarrollo como si transcurri\u00f3 sin incidencias. Este modo de operar permite que, por ejemplo al iniciar un proceso de 2.000 firmas, el usuario pueda despreocuparse hasta su finalizaci\u00f3n, y que este no se detendr\u00e1 en una firma aunque ocurriese un error (sea cual sea este). Siguiendo el ejemplo, si el usuario iniciase la firma de los 2.000 ficheros y desatendiese el proceso pensando que este tardar\u00e1 una o dos horas, el proceso no se habr\u00e1 detenido porque el fichero n\u00famero 3 estuviese corrupto, sino que se firmar\u00edan los 1.999 restantes y en el informe final de operaci\u00f3n se marcar\u00e1n las incidencias ocurridas. Una excepci\u00f3n a esta regla es el uso de dispositivos de firma que requieren la introducci\u00f3n de un PIN / contrase\u00f1a o una confirmaci\u00f3n para cada una de las operaciones de firma (como el DNIe). Aunque los mensajes y di\u00e1logos de aplicaci\u00f3n se pospondr\u00e1n a la finalizaci\u00f3n total de las tareas, esta confirmaci\u00f3n o introducci\u00f3n de PIN no puede ser omitida, por lo que el usuario debe realizarla por cada operaci\u00f3n individual. Consulte el punto \u201cTratamiento de errores\u201d para m\u00e1s informaci\u00f3n sobre c\u00f3mo se muestran los errores en los procesos de firma y multifirma masiva.","title":"Consideraciones previas"},{"location":"markdown_strict/CF_manual-integrador/#firmamultifirma-de-directorios","text":"Este proceso permite establecer un directorio y firmar/multifirmar todos los ficheros que contiene en una \u00fanica operaci\u00f3n, obteniendo la firma individual de cada uno de ellos. El tipo de operaci\u00f3n a realizar se especificar\u00e1 mediante setMassiveOperation , lo que nos permitir\u00e1 realizar una firma masiva simple ( FIRMAR ), cofirmar ( COFIRMAR ) o contrafirmar todas las firmas al completo que encontremos ( CONTRAFIRMAR_ARBOL ) o tan s\u00f3lo las firmas hoja ( CONTRAFIRMAR_HOJAS ). La operaci\u00f3n se ejecutar\u00e1 mediante el m\u00e9todo signDirectory del cliente y, en caso de no haber especificado ning\u00fan directorio, se mostrar\u00e1 la pantalla para su selecci\u00f3n. Los ficheros que se firmaran durante la operaci\u00f3n pueden ser filtrados por extensi\u00f3n. Para esto se usar\u00e1 el m\u00e9todo setInIncludeExtensions que recibe las extensiones de los ficheros que se deben procesar separadas por comas (\u201c,\u201d). Por ejemplo: clienteFirma.setInIncludeExtensions(\u201ctxt,xml,p7s\u201d); Tambi\u00e9n es posible indicar que se desean procesar los ficheros de los subdirectorios de la ruta indicada. Esto se configura mediante el m\u00e9todo setInRecursiveDirectorySign . En el caso de las operaciones de multifirma es muy recomendable utilizar el mismo formato de firma del que ya dispusiese la firma original. Para indicar que se desea respetar este formato debe usarse el m\u00e9todo setOriginalFormat . En caso de tratarse de una operaci\u00f3n de firma masiva o no desear respetar el formato original del fichero de firma, se realizar\u00e1 una operaci\u00f3n de firma conforme la configuraci\u00f3n establecida mediante el mecanismo tradicional. Seg\u00fan el tipo de operaci\u00f3n masiva que se haya solicitado y el tipo de fichero que se encuentre durante la misma se realizar\u00e1 una u otra acci\u00f3n: Firma: Fichero binario: Se firmar\u00e1 con la configuraci\u00f3n de firma establecida. Fichero de firma: Se firmar\u00e1 con la configuraci\u00f3n de firma establecida. Cofirma: Fichero binario: Se firmar\u00e1 con la configuraci\u00f3n de firma establecida. Fichero de firma: Se extraer\u00e1n, siempre que sea posible, los datos impl\u00edcitos de la firma y se cofirmar\u00e1 el fichero. Contrafirma: Fichero binario: Se ignorar\u00e1. Fichero de firma: Se contrafirmar\u00e1 completamente o s\u00f3lo las firmas hoja seg\u00fan tipo de operaci\u00f3n ( CONTRAFIRMAR_ARBOL o CONTRAFIRMAR_HOJAS ). En cada caso, se entender\u00e1 como fichero de firma todo aquel que sea una firma en el formato configurado, o en cualquier formato si se ha solicitado mantener el formato original. El resto de ficheros son considerados ficheros binarios. Los documentos PDF, ODF y OOXML ser\u00e1n considerados a efectos de firmas PAdES/PDF, ODF y OOXML, respectivamente, como documentos de firma, independientemente de que estos est\u00e9n firmados o no. Esto es as\u00ed porque para estos formatos cada firma es independiente del resto y hacer una firma o cofirma al documento se interpreta como agregarle una nueva firma. Las firmas resultado de esta operaci\u00f3n se almacenar\u00e1n en el directorio establecido con el m\u00e9todo setOutputDirectoryToSign . El m\u00e9todo crear\u00e1 los ficheros de firma con el mismo nombre que el fichero original (extensi\u00f3n incluida) y la extensi\u00f3n apropiada seg\u00fan el formato de la firma. En el caso de la cofirma y contrafirma se insertar\u00e1n las part\u00edculas \u201c .cosign \u201d y \u201c .countersign \u201d, respectivamente, antes de la extensi\u00f3n de firma. Si se ejecuta una operaci\u00f3n de cofirma, pero el fichero es considerado un binario, se generar\u00e1 una firma, como ya se explic\u00f3 anteriormente, y se agregar\u00e1 la part\u00edcula \u201c. signed \u201d. En caso de no indicar un directorio de salida se tomar\u00e1 el mismo directorio en donde se encuentren los ficheros de entrada. En el mismo directorio de salida se crear\u00e1 un fichero de log ( result.log ) en donde se registrar\u00e1 el resultado de cada una de las acciones realizadas durante la operaci\u00f3n masiva. En caso de producirse uno o m\u00e1s errores durante el proceso el m\u00e9todo signDirectory devolver\u00e1 false , pero no se detendr\u00e1 hasta haber finalizado la operaci\u00f3n. Para conocer con m\u00e1s detalle la causa de los errores que puedan producirse ser\u00e1 necesario consultar el fichero de log. Un ejemplo del uso de esta funcionalidad es: clienteFirma.initialize(); clienteFirma.setSignatureFormat(\"CADES\"); clienteFirma.setSignatureAlgorithm(\"SHA1withRSA\"); clienteFirma.setInputDirectoryToSign(\"C:/ficheros\"); clienteFirma.setOutputDirectoryToSign(\"C:/firmas\"); clienteFirma.setInIncludeExtensions(\"csig\"); clienteFirma.setInRecursiveDirectorySign(true); clienteFirma.setMassiveOperation(\"CONTRAFIRMAR_HOJAS\"); clienteFirma.signDirectory(); if(!clienteFirma.isError()) { alert(\"La operacion finalizo con exito\"); } else { alert(\"Se detectaron errores durante el proceso de firma consulte el log de error para m\u00e1s informaci\u00f3n\"); } Puede verse el funcionamiento de la multifirma masiva basada en ficheros en el HTML de prueba demoFirmaDirectorios.html . < Figura 2: HTML de prueba demoFirmaDirectorios.html","title":"Firma/multifirma de directorios"},{"location":"markdown_strict/CF_manual-integrador/#modo-de-operacion-programatica","text":"Adicionalmente a la metodolog\u00eda ya comentada se dispone de un procedimiento para la firma independiente de datos, ficheros y hashes en base a una configuraci\u00f3n \u00fanica de firma. El procedimiento a seguir para realizar esta operaci\u00f3n es el siguiente: Configuraci\u00f3n del cliente. Inicializaci\u00f3n de la operaci\u00f3n masiva. Firma masiva de los datos. Finalizaci\u00f3n de la operaci\u00f3n.","title":"Modo de operaci\u00f3n program\u00e1tica"},{"location":"markdown_strict/CF_manual-integrador/#configuracion-del-cliente","text":"Los aspectos configurables del cliente que afectan a la operaci\u00f3n masiva son: Operaci\u00f3n masiva a realizar (Firma, cofirma y contrafirma de nodos hoja o del \u00e1rbol completo de firma). Algoritmo de firma (SHA1withRSA, SHA512withRSA, etc.). Importante: No se soportan los algoritmos obsoletos MD2 y MD5. Formato con el que realizar las firmas (CMS, XAdES Detached, PDF, ODF\u2026). Si se debe respetar el formato original que, en el caso de las operaciones cofirma y contrafirma, significa detectar el formato de las firmas introducidas para multifirmar con el mismo formato. Modo de firma (Impl\u00edcita o expl\u00edcita). Certificado con el que firmar . La configuraci\u00f3n de estos par\u00e1metros se realiza respectivamente mediante los m\u00e9todos: setMassiveOperation(String) setSignatureAlgorithm(String) setSignatureFormat(String) setOriginalFormat(boolean) setSignatureMode(String) setSelectedCertificateAlias(String) La mayor\u00eda de estos m\u00e9todos se utilizan en la configuraci\u00f3n de la firma simple del applet, pero otros se utilizan \u00fanicamente para la firma masiva: setMassiveOperation(String) , que configura el tipo de operaci\u00f3n masiva y puede recibir los par\u00e1metros: FIRMAR: Firmar datos. COFIRMAR: Cofirma una firma dada. S\u00f3lo podr\u00e1 cofirmar cuando los datos est\u00e9n contenidos en la firma o exista una referencia a ellos. No admite que se le proporcionen datos no reconocibles como una firma. En el caso de proporcionarse un documento PDF, ODF u OOXML y se configure el formato PAdES, ODF u OOXML, respectivamente, se agregar\u00e1 una firmar al documento, independientemente de si este estaba firmado o no, ya que en estos formatos cada firmar es independiente del resto. CONTRAFIRMAR_ARBOL: Contrafirmar todas las firmas de un documento de firma. No admite que se le proporcionen datos no reconocibles como una firma. CONTRAFIRMAR_HOJAS: Contrafirmar todas las firmas hoja de un documento de firma. No admite que se le proporcionen datos no reconocibles como una firma. setOriginalFormat(boolean) , que se configurar\u00e1 a true o false seg\u00fan se desee respetar o no el formato original de firma durante las operaciones de cofirma y contrafirma. Durante la operaci\u00f3n de firma se ignora este par\u00e1metro. El comportamiento de esta opci\u00f3n es el siguiente: Si la opci\u00f3n est\u00e1 activada: Se identificar\u00e1 el formato de la firma original y se multifirmar\u00e1 en este formato. Si no est\u00e1 activada la opci\u00f3n: Se comprobar\u00e1 el formato de la firma y, si es compatible con el formato establecido, se cofirmar\u00e1 / contrafirmar\u00e1 en ese formato. Si no es compatible, fallar\u00e1 la operaci\u00f3n: Es decir, que si est\u00e1 activada esta funci\u00f3n y, por ejemplo, indicamos que se cofirme en CAdES una firma CMS, se ignorar\u00e1 el formato indicado y se cofirmar\u00e1 en CMS (el formato original). Si fuese el caso contrario, y se solicita una cofirma CMS y la firma original es CAdES, se ignorar\u00eda el CMS y se firmar\u00eda en CAdES. Si la opci\u00f3n \"respetar el formato original\" estuviese desactivada ( setOriginalFormat(false) ) se multifirmar\u00eda siempre en el formato indicado, o se informar\u00eda mediante un mensaje de error que el fichero indicado no es un fichero de firma compatible si el formato indicado no lo soportase. El mantener activa esta opci\u00f3n es \u00fatil cuando no se conozca el formato en el que fuesen originalmente firmados los datos o queramos evitarnos el seleccionarlo para cada elemento de firma, mientras que el desactivarlo evita que se realice el proceso de b\u00fasqueda del formato original y, que de seleccionar un formato equivocado, se nos informe.","title":"Configuraci\u00f3n del cliente"},{"location":"markdown_strict/CF_manual-integrador/#inicializacion-de-la-operacion-masiva","text":"El proceso de inicializaci\u00f3n configura los par\u00e1metros ya comentados en el m\u00f3dulo de firma masiva y reinicia el registro de mensajes ( log ) del m\u00f3dulo. Desde el momento de la inicializaci\u00f3n y hasta que se finalice el proceso de firma masiva estos par\u00e1metros, a excepci\u00f3n del tipo de operaci\u00f3n ( setMassiveOperation(String) ) y, cuando la operaci\u00f3n es FIRMAR, el formato de firma ( setSignatureFormat(String) ), permanecen inalterados a lo largo de las operaciones realizadas por el m\u00f3dulo, aunque s\u00ed afectar\u00e1n los cambios de configuraci\u00f3n al resto de funcionalidades del cliente. En caso de que no se hubiesen establecido todas las propiedades necesarias para la configuraci\u00f3n de la firma masiva se tomar\u00e1n los valores por defecto establecidos por el cliente. Estos son: Operaci\u00f3n: Firma. Algoritmo: SHA1 con RSA. Formato: CAdES. Respetar formato original: Activado. Modo: Expl\u00edcito. En el caso del alias, si no se ha establecido ninguno, se mostrar\u00e1 un di\u00e1logo para permitir seleccionar el certificado de firma al inicializar el proceso de firma masiva. La inicializaci\u00f3n del proceso de firma masiva se realiza mediante el m\u00e9todo initMassiveSignature() .","title":"Inicializaci\u00f3n de la operaci\u00f3n masiva"},{"location":"markdown_strict/CF_manual-integrador/#firma-masiva-de-los-datos","text":"Existen 3 m\u00e9todos para firmar, cofirmar o contrafirmar (nodos u hojas), seg\u00fan sea la operaci\u00f3n configurada para el proceso: massiveSignatureData(String) massiveSignatureFile(String) massiveSignatureHash(String) El m\u00e9todo massiveSignatureData(String) realiza la operaci\u00f3n configurada sobre los datos que recibe en forma de cadena de texto en base 64; massiveSignatureFile(String) ejecuta la operaci\u00f3n sobre el fichero cuya ruta recibe c\u00f3mo par\u00e1metro y massiveSignatureHash(String) lo hace sobre un hash en base 64. A diferencia de cualquier otro m\u00e9todo del Applet que lea o almacene datos en disco, el m\u00e9todo no pedir\u00e1 confirmaci\u00f3n al usuario para acceder al fichero. El usuario habr\u00e1 dado su consentimiento para hacer esto al inicio del proceso de firma masiva. En caso de utilizarse el m\u00e9todo massiveSignatureFile(String) , se solicitar\u00e1 confirmaci\u00f3n al usuario para acceder a este fichero de su sistema y cualquier otro dentro del proceso de firma masiva. En caso de aceptarse, no se volver\u00e1 a mostrar este mensaje salvo que se finalice el proceso masivo ( endMassiveSignature() ) y se inicie uno nuevo. < Figura 3: Confirmaci\u00f3n de acceso a ficheros en el proceso de firma masiva A diferencia de la mayor\u00eda de par\u00e1metros de la configuraci\u00f3n de la firma masiva, es posible modificar el tipo de operaci\u00f3n que se desea en cualquier momento durante su desarrollo. Para esto s\u00f3lo es necesario utilizar el m\u00e9todo setMassiveSignatureOperation(String) en el momento en el que se desee modificar la configuraci\u00f3n. En el caso de realizarse una firma masiva (ni cofirmas, ni contrafirmas) es posible modificar a mitad del proceso el formato con el que queremos firmar. Esto se realizar\u00e1 mediante el m\u00e9todo setSignatureFormat(String) , que permitir\u00e1 generar firmas en el nuevo formato, pero no afectar\u00e1 al formato inicialmente configurado (el establecido antes del initMassiveSignature() ). Si durante la operaci\u00f3n de firma masiva establecemos el formato a null , se establecer\u00e1 el formato inicialmente configurado. El formato de las cofirmas y contrafirmas masivas no se puede modificar durante la ejecuci\u00f3n, pero puede configurarse que se respete el formato original para que se opere siempre en el formato adecuado. El comportamiento de cada una de las operaciones simples podr\u00e1 variar seg\u00fan el tipo de fichero que se les proporcione: Firma: Fichero binario: Se firmar\u00e1 con la configuraci\u00f3n de firma establecida. Fichero de firma: Se firmar\u00e1 con la configuraci\u00f3n de firma establecida. Cofirma: Fichero binario: Fallar\u00e1 la operaci\u00f3n. Fichero de firma: Se extraer\u00e1n, siempre que sea posible, los datos impl\u00edcitos de la firma y se agregar\u00e1 una nueva firma al fichero. Contrafirma: Fichero binario: Fallar\u00e1 la operaci\u00f3n. Fichero de firma: Se contrafirmar\u00e1 completamente o s\u00f3lo las firmas hoja seg\u00fan tipo de operaci\u00f3n ( CONTRAFIRMAR_ARBOL o CONTRAFIRMAR_HOJAS ). IMPORTANTE: T\u00e9ngase en cuenta las siguientes consideraciones: Las operaciones de cofirma y contrafirma no pueden realizarse sobre hashes ya que desde estos no pueden obtenerse los datos originales. Determinados formatos de firma pueden exigir que sea necesario firmar sobre los datos o un fichero, no siendo posible firmar hashes. Por ejemplo, los formatos XML enveloped, ODF y PDF. La operaci\u00f3n de firma recibe los datos (mediante cualquiera de los 3 m\u00e9todos comentados) mientras que la cofirma y las contrafirmas reciben una firma previamente generada con formato reconocido. La contrafirma se aplica sobre firmas y es indiferente que estas almacenen datos impl\u00edcitos o no, pero la cofirma requiere los datos originales para ser firmados por lo que es obligatorio que se proporcione una firma con los datos impl\u00edcitos o, al menos, una expl\u00edcita realizada con el mismo algoritmo de firma con el que se solicita la cofirma, para as\u00ed poder reutilizar el hash que almacena. En el caso de firmas con formato propio del tipo de documento (PDF, ODF y OOXML) la operaci\u00f3n de cofirma supondr\u00e1 agregar una nueva firma al documento. Las operaciones masivas devuelven su resultado en forma de cadena en base 64. En caso de producirse alg\u00fan error se devolver\u00e1 null y en ning\u00fan caso se lanzar\u00e1 una excepci\u00f3n, permitiendo al integrador obviar la captura de \u00e9stas, o se interrumpir\u00e1 el proceso. Cada operaci\u00f3n individual de la firma masiva realizada generar\u00e1 una entrada en el registro de mensajes ( log ). En el caso de finalizar la operaci\u00f3n correctamente esta simplemente lo indicar\u00e1, mientras que en el caso de error la entrada explicar\u00e1 el error producido.","title":"Firma masiva de los datos"},{"location":"markdown_strict/CF_manual-integrador/#finalizacion-de-la-operacion","text":"La finalizaci\u00f3n de la operaci\u00f3n elimina la configuraci\u00f3n de operaci\u00f3n masiva establecida por lo que ya no es posible continuar operando hasta que se vuelva a inicializar. Tras ser finalizada la operaci\u00f3n, la nueva inicializaci\u00f3n podr\u00eda tomar una nueva configuraci\u00f3n de firma establecida. El m\u00e9todo para llevar a cabo la finalizaci\u00f3n de la operaci\u00f3n masiva es endMassiveSignature() . El finalizar la operaci\u00f3n no elimina los mensajes de registro ( log ) generados durante la misma, por lo que es posible seguir accediendo a ellos. S\u00ed, en cambio, los eliminar\u00e1 el iniciar una nueva operaci\u00f3n de firma masiva.","title":"Finalizaci\u00f3n de la operaci\u00f3n"},{"location":"markdown_strict/CF_manual-integrador/#registro-de-mensajes-de-la-operacion-masiva","text":"Por cada operaci\u00f3n individual de firma/multifirma realizada durante el proceso masivo se genera una entrada en el registro de mensajes. Para obtener, tras una operaci\u00f3n individual, el mensaje generado se debe utilizar el m\u00e9todo getMassiveSignatureCurrentLog() . La forma de este registro ser\u00e1: Operaci\u00f3n sobre TIPO_DATO: MENSAJE. En donde TIPO_DATO ser\u00e1 la palabra \u201cdatos\u201d, \u201cfichero\u201d o \u201chash\u201d seg\u00fan el m\u00e9todo utilizado para la operaci\u00f3n (massiveSignatureData, massiveSignatureFile o massiveSignatureHash respectivamente); y MENSAJE ser\u00e1 el mensaje obtenido, \u201cCorrecta\u201d en el caso de que la operaci\u00f3n finalizase correctamente o la explicaci\u00f3n del error en caso de que se produjese. Puede obtenerse todo el log generado hasta el momento para su proceso mediante el m\u00e9todo getMassiveSignatureLog() . El texto que devuelve este m\u00e9todo se compone de todas las entradas del mismo con el formato indicado separadas por un retorno de carro (\u201c\\r\\n\u201d). Puede almacenarse este mismo log en disco mediante la funci\u00f3n saveMassiveSignatureLog() , que lo almacenar\u00e1 en la ruta indicada con el m\u00e9todo setOutFilePath(String) . Si no se ha establecido ning\u00fan fichero de salida se mostrar\u00e1 un di\u00e1logo de guardado para seleccionar en donde se desea almacenar el fichero. El registro de mensajes permanecer\u00e1 aun cuando se finalice la operaci\u00f3n masiva, pero se reiniciar\u00e1 en cada nueva inicializaci\u00f3n del proceso.","title":"Registro de mensajes de la operaci\u00f3n masiva"},{"location":"markdown_strict/CF_manual-integrador/#guardado-de-firmas-en-disco","text":"Este mecanismo no est\u00e1 optimizado para el guardado de firmas en disco. Si su objetivo es almacenar las firmas resultantes en el sistema del usuario, consulte el apartado \u201c 9.1 Guardar la firma en un fichero \u201d y eval\u00fae si es preferible su uso. Si requiere almacenar las firmas en disco y utilizar el mecanismo de firma masiva program\u00e1tica, dese cuenta de que se requerir\u00e1 al usuario confirmaci\u00f3n para el guardado de cada una de las firmas. Las firmas resultantes de la operaci\u00f3n de firma masiva se devuelven en base 64 por cada operaci\u00f3n de firma individual (realizadas con massiveSignatureData(String), massiveSignatureFile(String) o massiveSignatureHash(String)), por lo cual el cliente no las almacena internamente como hace con las operaciones de firma simple. Por este motivo, el simple uso del m\u00e9todo de guardado de firma del cliente no aplica a esta situaci\u00f3n. Si desea guardar los datos en disco tenga en cuenta que esto requiere confirmaci\u00f3n expl\u00edcita del usuario, por lo que deber\u00e1 aprobar cada guardado individual de datos. En su lugar se puede utilizar la siguiente sucesi\u00f3n de llamadas a m\u00e9todos: setElectronicSignature(String) : Recibe como par\u00e1metro la firma en base64 y la guarda internamente. setOutFilePath(String) : Establece el fichero de salida. Para permitir al usuario que seleccione el nombre y directorio de salida para cada fichero firmado, se le pasar\u00e1 el par\u00e1metro null . saveSignToFile() : Pide confirmaci\u00f3n al usuario y almacena la firma en el directorio de salida indicado.","title":"Guardado de firmas en disco"},{"location":"markdown_strict/CF_manual-integrador/#ejemplo-java-de-operacion-masiva","text":"// Creamos una instancia del applet (innecesario para su uso en Web) SignApplet clienteFirma = new SignApplet(); // Configuramos la operaci\u00f3n que deseamos clienteFirma.setMassiveOperation(\"FIRMAR\"); clienteFirma.setSignatureFormat(\"CMS\"); clienteFirma.setSignatureMode(\"IMPLICIT\"); // Inicializamos la operaci\u00f3n (en este momento se nos pedir\u00e1 seleccionar un // certificado de firma) clienteFirma.initMassiveSignature(); // Una vez inicializada la operaci\u00f3n, cualquier cambio en el algoritmo, formato, // tipo de operaci\u00f3n, etc. no ser\u00e1 tenido en cuenta para la operaci\u00f3n masiva, // aunque s\u00ed para el resto de operaciones del cliente // Vector en el que almacenar los resultados en base 64 Vector<String> firmasB64 = new Vector<String>(); // Firmamos y almacenamos los datos. Por norma general es recomendable operar // directamente con las firmas generadas (guardarlas, enviarlas,\u2026) y no // mantenerlas todas cargadas para evitar problemas de desbordamiento de // memoria // Firma de ficheros firmasB64.add( clienteFirma.massiveSignatureFile(\"C:\\Fichero.txt\") ); firmasB64.add( clienteFirma.massiveSignatureFile(\"C:\\Fichero.xml\") ); firmasB64.add( clienteFirma.massiveSignatureFile(\"C:\\Fichero.odt\") ); // Firma de datos firmasB64.add( clienteFirma.massiveSignatureData( clienteFirma.getFileBase64Encoded(\"C:\\Fichero.txt\", true ) )); firmasB64.add( clienteFirma.massiveSignatureData( clienteFirma.getFileBase64Encoded(\"C:\\Fichero.xml\", true ) )); firmasB64.add( clienteFirma.massiveSignatureData( clienteFirma.getFileBase64Encoded(\"C:\\Fichero.odt\", true ) )); // Firma de hashes clienteFirma.setFileuri(\"C:\\Fichero.txt\"); firmasB64.add( clienteFirma.massiveSignatureHash( clienteFirma.getFileHashBase64Encoded( true ) )); clienteFirma.setFileuri(\"C:\\Fichero.xml\"); firmasB64.add( clienteFirma.massiveSignatureHash( clienteFirma.getFileHashBase64Encoded( true ) )); clienteFirma.setFileuri(\"C:\\Fichero.odt\"); firmasB64.add( clienteFirma.massiveSignatureHash( clienteFirma.getFileHashBase64Encoded( true ) )); // Finalizamos la operaci\u00f3n clienteFirma.endMassiveSignature(); // Almacenamos el log preguntando al usuario donde lo desea almacenar clienteFirma.saveMassiveSignatureLog(); // Adem\u00e1s de almacenarlas en un vector queremos guardarlas en disco (en este caso no mantenemos referencias a los ficheros originales) for ( int i=0; i<firmasB64.size(); i++) { if (firmasB64.get(i) != null ) { clienteFirma.setElectronicSignature(firmasB64.get(i)); clienteFirma.setOutFilePath(\"firma\"+i+\".csig\"); clienteFirma.saveSignToFile(); } } // Mostramos un mensaje de error al usuario por cada error obtenido String[] mensajes = clienteFirma.getMassiveSignatureLog().trim().split(\"\\r\\n\"); for ( int i=0; i<firmasB64.size(); i++) { if (firmasB64.get(i) == null ) { JOptionPane. showMessageDialog ( clienteFirma, mensajes[i], \"Error\", JOptionPane. ERROR_MESSAGE ); } } Puede verse el funcionamiento de la multifirma masiva basada en ficheros en el HTML de prueba demoFirmaDirectorios.html . < Figura 4: HTML de prueba demoMultifirmaMasiva.html","title":"Ejemplo Java de operaci\u00f3n masiva"},{"location":"markdown_strict/CF_manual-integrador/#cifrado-de-datos","text":"El Cliente @firma incorpora funcionalidades de cifrado sim\u00e9trico de datos que permite encriptar datos o ficheros de tal forma que s\u00f3lo aquella persona que tenga la clave o contrase\u00f1a utilizada para el cifrado puede recuperar esos datos. Antes de proceder al cifrado de datos con el Cliente, conviene reinicializar su configuraci\u00f3n debido a que esta funcionalidad comparte recursos con los procesos de firma y podr\u00eda haber incompatibilidad en la entrada de datos. Para esta tarea puede utilizarse el m\u00e9todo \u201cinitialize()\u201d de la biblioteca JavaScript llamada \u201c cripto.js \u201d que reinicia las propiedades del cliente a sus valores por defecto. Para iniciar el proceso de cifrado habr\u00e1 que introducir previamente los datos a cifrar. Es posible especificar los datos a cifrar de diferentes formas: datos : se especifica cu\u00e1l es la cadena a cifrar mediante el m\u00e9todo setPlainData , que recibe la cadena que se desea cifrar en Base64. fichero : es posible especificar que se cifre un fichero indic\u00e1ndole la ruta a la llamada del proceso de firma. Para ello, utilizaremos directamente el m\u00e9todo de cifrado cipherFile . Por defecto el cliente de cifrado define como algoritmo de cifrado AES y generaci\u00f3n autom\u00e1tica de clave, aunque posteriormente veremos las posibilidades de configuraci\u00f3n de estos par\u00e1metros. Tras indicar la configuraci\u00f3n del cifrador, podemos ejecutar la operaci\u00f3n de cifrado. Para cifrar los datos establecidos mediante setPlainData , utilizaremos el m\u00e9todo cipherData . Para cifrar un fichero, usaremos el m\u00e9todo cipherFile , que recibe la ruta de un fichero en disco. Tambi\u00e9n podemos utilizar las funciones JavaScript (en cripto.js ), cifrarDatos y cifrarFichero , que reciben los datos en Base64 y la ruta del fichero, respectivamente. El comportamiento de la llamada es an\u00e1logo al resto de llamadas al Applet, indicando si la ejecuci\u00f3n se ha llevado a cabo de forma correcta o los errores en caso negativo. Los datos cifrados se podr\u00e1n obtener una vez haya finalizado mediante la llamada al m\u00e9todo getCipherData o la funci\u00f3n JavaScript obtenerResultadoCifrado , que devuelven los datos cifrados codificados en formato Base 64. Es posible almacenar estos datos cifrados en un archivo mediante la funci\u00f3n saveCipherDataToFile , a la cual le pasaremos la ruta absoluta del archivo destino (atenci\u00f3n, el archivo destino ser\u00e1 sobrescrito para evitar problemas a la hora de descifrar). El fichero destino se crear\u00e1 si no exist\u00eda, pero la ruta de directorios del fichero deber\u00e1 existir o la operaci\u00f3n fallar\u00e1. El contenido del archivo destino son los datos cifrados, por lo que no se recomienda su edici\u00f3n, ya que pudiera alterar gravemente el contenido plano del mensaje cifrado o incluso destruirlo. Un ejemplo de aplicaci\u00f3n de lo anterior para un proceso completo de cifrado ser\u00eda el siguiente: <html> <head> <script type=\"text/javascript\" language=\"javascript\" src=\"constantes.js\"></script> <script type=\"text/javascript\" language=\"javascript\" src=\"common-js/instalador.js\"></script> <script type=\"text/javascript\" language=\"javascript\" src=\"common-js/cripto.js\"></script> <script type=\"text/javascript\" language=\"javascript\"> function cifrar() { var texto= document.getElementById(\"campo1\").value; clienteFirma.initialize(); clienteFirma.setKeyMode(\u201cGENERATEKEY\u201d); clienteFirma.setCipherAlgorithm(\u201cAES\u201d); clienteFirma.setPlainData(clienteFirma.getBase64FromText(texto, null), null); clienteFirma.setShowErrors(false); cifrarDatos(); if(!clienteFirma.isError()){ var datosCifrados = clienteFirma.getCipherData(); var campoCifrado =document.getElementById(\u201ccampo2\u201d); campoCifrado .value = datosCifrados; return true; }else{ alert(\"No se ha podido cifrar los datos: \"+clienteFirma.getErrorMessage()); return false; } } </script> [\u2026] </head> <body> <script type=\"text/javascript\"> cargarAppletFirma(); </script> [\u2026] <label>Datos planos</label><br/> <textarea id=\u201dcampo1\u201d cols=\u201d20\u201d rows=\u201d5\u201d nowrap>Introduzca texto plano aqu\u00ed</textarea> <br/><br/><input type=\u201dbutton\u201d value=\u201dCifrar\u201d onClick=\u201dcifrar();\u201d/><br/><br/> <label>Datos cifrados</label><br/> <textarea id=\u201dcampo2\u201d cols=\u201d20\u201d rows=\u201d5\u201d nowrap readonly></textarea> [\u2026] </body> </html> Este ejemplo b\u00e1sico captura el texto introducido en un \u00e1rea de texto, la cifra con generaci\u00f3n autom\u00e1tica de clave y el algoritmo AES y la muestra en un segundo \u00e1rea de texto tras pulsar un bot\u00f3n. Para m\u00e1s informaci\u00f3n, consultar el ejemplo incluido y el apartado Configuraci\u00f3n de cifrado para conocer las opciones de configuraci\u00f3n de esta operaci\u00f3n. Puede verse las distintas configuraciones de cifrado y descifrado de datos en el HTML de ejemplo demoCifrado.html . < Figura 10: HTML de ejemplo demoCifrado.html Puede encontrar informaci\u00f3n adicional sobre el cifrado de datos en el punto Algoritmos de cifrado de este mismo documento.","title":"Cifrado de datos"},{"location":"markdown_strict/CF_manual-integrador/#descifrado-de-datos","text":"De manera similar al cifrado, deberemos especificar cu\u00e1les son los datos a descifrar, y al igual que antes podremos especificar los datos cifrados mediante dos m\u00e9todos distintos: datos o texto cifrado : se especifica cu\u00e1l es la cadena a descifrar mediante el m\u00e9todo setCipherData . Los datos de entrada estar\u00e1n en base 64 (igual que la salida del algoritmo de cifrado) para evitar la aparici\u00f3n de caracteres extra\u00f1os o no imprimibles. Internamente estos datos se decodificaran a la base apropiada y se descifrar\u00e1n. fichero : tambi\u00e9n es posible especificar que los datos a cifrar provienen de un archivo indic\u00e1ndole la ruta ( decipherFile ), o usando la funci\u00f3n setFileuri para especificarla. Tambi\u00e9n aqu\u00ed se deber\u00e1 especificar la ruta absoluta del fichero. Evidentemente para descifrar datos no podremos auto generar una clave, sino que tendremos que especificarle una siempre. En caso que se intente iniciar el m\u00e9todo de descifrado sin especificar la clave supondr\u00e1 un fallo autom\u00e1tico. Los datos descifrados se pueden recuperar mediante la llamada a la funci\u00f3n getPlainData . Tambi\u00e9n tenemos un m\u00e9todo para escribir estos datos recuperados a un archivo mediante la llamada a savePlainDataToFile y pas\u00e1ndole la ruta absoluta del archivo destino. El fichero destino se crear\u00e1 si no exist\u00eda, pero la ruta de directorios del fichero deber\u00e1 existir o la operaci\u00f3n fallar\u00e1. Un ejemplo b\u00e1sico para descifrar ser\u00eda el siguiente: <html> <head> <script type=\"text/javascript\" language=\"javascript\" src=\"constantes.js\"></script> <script type=\"text/javascript\" language=\"javascript\" src=\"common-js/instalador.js\"></script> <script type=\"text/javascript\" language=\"javascript\" src=\"common-js/cripto.js\"></script> <script type=\"text/javascript\" language=\"javascript\"> function descifrar() { var textoCifrado= document.getElementById(\"campo1\").value; var clave=document.getElementById(\u201cclave\u201d).value; var archivoOrigen=document.getElementById(\u201corigen\u201d).value; clienteFirma.initialize(); clienteFirma.setKey(clave); clienteFirma.setKeyMode(\u201cUSERINPUT\u201d); clienteFirma.setCipherAlgorithm(\u201cAES\u201d); descifrarArchivo(archivoOrigen); if(!clienteFirma.isError()){ var datosPlanos = clienteFirma.getTextFromBase64( clienteFirma.getPlainData(), null); var campoPlano=document.getElementById(\u201ccampo2\u201d); campoPlano .value = datosCifrados; var archivoDestino=document.getElementById(\u201cdestino\u201d).value; clienteFirma.savePlainDataToFile(archivoDestino); return true; }else{ alert(\"No se ha podido descifrar los datos: \"+clienteFirma.getErrorMessage()); return false; } } </script> [\u2026] </head> <body> <script type=\"text/javascript\"> cargarAppletFirma(); </script> [\u2026] <label>Fichero cifrado:</label> <input type=\u201dfile\u201d id=\u201dorigen\u201d/> <label>Fichero plano (introduzca URI):</label> <input type=\u201dtext\u201d id=\u201ddestino\u201d value=\u201d\u201d/> <br/><br/><input type=\u201dbutton\u201d value=\u201dDescifrar\u201d onClick=\u201ddescifrar();\u201d/><br/><br/> <label>Datos descifrados</label><br/> <textarea id=\u201d campo2 \u201d cols=\u201d20\u201d rows=\u201d5\u201d nowrap readonly></textarea> [\u2026] </body> </html> Puede encontrar informaci\u00f3n adicional sobre el descifrado de datos en el apartado Configuraci\u00f3n de cifrado , y ver un ejemplo de uso en el HTML de ejemplo demoCifrado.html .","title":"Descifrado de datos"},{"location":"markdown_strict/CF_manual-integrador/#estructuras-cms-cifradas-sobres-digitales","text":"CMS define una estructura de datos que puede albergar distintos tipos de contenido (datos planos, hashes, datos comprimidos, datos cifrados\u2026). El Cliente @firma permite generar algunas de estas estructuras, entre las que se encuentran los llamados \u201cSobres Digitales\u201d. Los tipos de contenidos que permite generar el Cliente @firma son: CMS encriptado ( EncryptedCMS ). CMS envuelto ( EnvelopedCMS ). CMS autenticado ( Authenticated&Enveloped ). PKCS#7 firmado y envuelto ( Signed&Enveloped ). Los tipos de contenido considerados sobres digitales son aquellos indicados como \u201cenvuelto\u201d. Estos son el envuelto, el autenticado y envuelto, y el firmado y envuelto.","title":"Estructuras CMS cifradas / Sobres Digitales"},{"location":"markdown_strict/CF_manual-integrador/#tipo-de-contenido","text":"","title":"Tipo de contenido"},{"location":"markdown_strict/CF_manual-integrador/#cms-encriptado","text":"Esta estructura est\u00e1 basada en un mensaje criptogr\u00e1fico que s\u00f3lo contiene el texto cifrado sim\u00e9tricamente y opcionalmente el algoritmo utilizado para el cifrado. No contiene ninguna informaci\u00f3n sobre la clave, emisor o receptor, por este motivo no puede considerarse un sobre digital. La metodolog\u00eda para su creaci\u00f3n es: Se establece los datos a incluir en el mensaje mediante una llamada a setData , pas\u00e1ndole en base 64 los datos que se desean incluir en el mensaje, o setFileuri , para incluir un fichero. Opcionalmente se definen el algoritmo de cifrado, la clave y el modo de clave. Se configura que queremos una estructura de datos cifrados llamando al m\u00e9todo setCMSContentType con el valor EncryptedData . Se realiza una llamada a buildCMSStructure . El CMS generado se puede recuperar como un String codificado en base 64 mediante el m\u00e9todo getB64Data o guardarla en un archivo con la operaci\u00f3n saveDataToFile . Consulte el apartado 8.7 Configuraci\u00f3n de cifrado para conocer las distintas opciones de cifrado que puede utilizar para la configuraci\u00f3n del CMS encriptado.","title":"CMS encriptado"},{"location":"markdown_strict/CF_manual-integrador/#cms-envuelto","text":"Mediante la creaci\u00f3n de un CMS envuelto obtenemos un sobre digital en el cual podremos incluir contenido cifrado s\u00f3lo visible por los receptores que le indiquemos. Posteriormente veremos la estructura generada y comentaremos algunos detalles sobre ella. El procedimiento de creaci\u00f3n es el siguiente: Definimos los datos a incluir en el sobre digital de igual manera que en el apartado anterior, indicando los datos en base 64 mediante setData o un fichero mediante setFileuri . Definimos tambi\u00e9n el resto de par\u00e1metros opcionales. El modo de clave \u201cPASSWORD\u201d y sus algoritmos no est\u00e1n permitidos. Opcionalmente, establecemos el alias del certificado que deseamos indicar como remitente del sobre por medio de la funci\u00f3n setSelectedCertificateAlias . Establecemos los receptores v\u00e1lidos para el mensaje mediante una llamada a la funci\u00f3n setRecipientsToCMS especific\u00e1ndole como par\u00e1metros una cadena con los diferentes archivos con la clave p\u00fablica de los diferentes sujetos separados por retornos de carro (\u201c\\n\u201d). Estos ficheros deber\u00e1n indicar su ruta completa y pueden ser formato CER o DER. Pueden eliminarse los receptores indicados llamando a este m\u00e9todo con el par\u00e1metro null . Para la generaci\u00f3n del sobre ser\u00e1 necesario indicar al menos un receptor v\u00e1lido. De forma independiente a los receptores indicados mediante el m\u00e9todo setRecipientsToCMS , es posible configurar receptores adicionales mediante el m\u00e9todo addRecipientToCMS que recibe el certificado del receptor codificado en base 64. Para eliminar alguno de los receptores agregados mediante este m\u00e9todo puede utilizarse removeRecipientToCMS . Se configura que queremos una estructura de datos cifrados llamando al m\u00e9todo setCMSContentType con el valor EnvelopedData . Se realiza una llamada a buildCMSStructure . Tras la llamada nos solicitar\u00e1 que indiquemos el emisor del mensaje, mediante la selecci\u00f3n de nuestro certificado digital, aunque es opcional indicar el emisor, es recomendable. Una vez concluida la operaci\u00f3n, podremos obtener el resultado mediante la llamada a getB64Data o guardarla en un archivo con saveDataToFile . Si se desean agregar m\u00e1s remitentes al sobre, puede realizarse la operaci\u00f3n tal como se describe en el apartado Sobres con m\u00faltiples remitentes.","title":"CMS envuelto"},{"location":"markdown_strict/CF_manual-integrador/#pkcs7-firmado-y-envuelto","text":"Similar al CMS envuelto, pero los datos adem\u00e1s de cifrarse son firmados por el emisor. El procedimiento es el siguiente: Definimos los datos a incluir en el sobre digital de igual manera que en el apartado anterior, indicando los datos en base 64 mediante setData . Para incluir un fichero le indicaremos la direcci\u00f3n absoluta del fichero en la llamada setFileuri . Opcionalmente, definimos tambi\u00e9n la configuraci\u00f3n del cifrado, teniendo en cuenta que el modo de clave \u201cPASSWORD\u201d y sus algoritmos asociados no est\u00e1n permitidos. Opcionalmente, establecemos el alias del certificado que deseamos indicar como remitente del sobre por medio de la funci\u00f3n setSelectedCertificateAlias . Establecemos los receptores v\u00e1lidos para el mensaje mediante una llamada a la funci\u00f3n setRecipientsToCMS especific\u00e1ndole como par\u00e1metros una cadena con los diferentes archivos con la clave p\u00fablica de los diferentes sujetos separados por retornos de carro (\u201c\\n\u201d). Estos ficheros deber\u00e1n indicar su ruta completa y pueden ser formato CER o DER. Pueden eliminarse los receptores indicados llamando a este m\u00e9todo con el par\u00e1metro null. Para la generaci\u00f3n del sobre ser\u00e1 necesario indicar al menos un receptor v\u00e1lido. De forma independiente a los receptores indicados mediante el m\u00e9todo setRecipientsToCMS , es posible configurar receptores adicionales mediante el m\u00e9todo addRecipientToCMS que recibe el certificado del receptor codificado en base 64. Para eliminar alguno de los receptores agregados mediante este m\u00e9todo puede utilizarse removeRecipientToCMS . Empaquetamos los datos: Si queremos firmar y envolverlos datos de entrada se configura la estructura de datos con el m\u00e9todo setCMSContentType y el valor SignedAndEnvelopedData . Luego hacemos la llamada al m\u00e9todo buildCMSStructure . Si queremos firmar y envolver un fichero especifico, podemos llamar al m\u00e9todo signAndPackFile utilizando la ruta del fichero. Tras la llamada, si no indicamos el remitente del sobre en el paso 2, nos solicitar\u00e1 que seleccionemos el emisor del mensaje mediante la selecci\u00f3n de nuestro certificado digital. En esta ocasi\u00f3n es obligatorio indicarlo para as\u00ed firmar los datos. Una vez concluida la operaci\u00f3n, podremos obtener el resultado mediante la llamada a getB64Data o guardarla en un archivo con saveDataToFile . Si se desean agregar m\u00e1s remitentes al sobre, puede realizarse la operaci\u00f3n tal como se describe en el apartado Sobres con m\u00faltiples remitentes.","title":"PKCS#7 firmado y envuelto"},{"location":"markdown_strict/CF_manual-integrador/#cms-autenticado-y-envuelto","text":"Similar al PKCS#7 firmado y envuelto. El ensobrado firmado y envuelto contaba con una vulnerabilidad que hac\u00eda posible que el sobre fuese modificado sin que se detectase con posterioridad. El ensobrado CMS autenticado corrige este problema generando un c\u00f3digo de autenticaci\u00f3n para el sobre que no puede ser replicado tras su modificaci\u00f3n sin conocer cu\u00e1l es su contenido. De esta forma, cualquier cambio en el sobre har\u00e1 fallar el proceso de validaci\u00f3n con ese c\u00f3digo y este no podr\u00eda sustituirse por otro sin conocer el contenido del sobre. El procedimiento para generar un sobre CMS autenticado y envuelto es el siguiente: Definimos los datos a incluir en el sobre digital indic\u00e1ndolos en base 64 mediante setData . Para incluir un fichero le indicar\u00edamos la direcci\u00f3n absoluta del fichero en la llamada setFileuri . Opcionalmente, definimos tambi\u00e9n la configuraci\u00f3n del cifrado, teniendo en cuenta que el modo de clave \u201cPASSWORD\u201d y sus algoritmos asociados no est\u00e1n permitidos. Opcionalmente, establecemos el alias del certificado que deseamos indicar como remitente del sobre por medio de la funci\u00f3n setSelectedCertificateAlias . Establecemos los receptores v\u00e1lidos para el mensaje mediante una llamada a la funci\u00f3n setRecipientsToCMS especific\u00e1ndole como par\u00e1metros una cadena con los diferentes archivos con la clave p\u00fablica de los diferentes sujetos separados por retornos de carro (\u201c\\n\u201d). Estos ficheros deber\u00e1n indicar su ruta completa y pueden ser formato CER o DER. Pueden eliminarse los receptores indicados llamando a este m\u00e9todo con el par\u00e1metro null . Para la generaci\u00f3n del sobre ser\u00e1 necesario indicar al menos un receptor v\u00e1lido. De forma independiente a los receptores indicados mediante el m\u00e9todo setRecipientsToCMS , es posible configurar receptores adicionales mediante el m\u00e9todo addRecipientToCMS que recibe el certificado del receptor codificado en base 64. Para eliminar alguno de los receptores agregados mediante este m\u00e9todo puede utilizarse removeRecipientToCMS . Se configura que queremos una estructura de datos cifrados llamando al m\u00e9todo setCMSContentType con el valor AuthEnvelopedData . Hacemos la llamada al m\u00e9todo buildCMSStructure . Tras la llamada, si no indicamos el remitente del sobre en el paso 2, nos solicitar\u00e1 que indiquemos el emisor del mensaje mediante la selecci\u00f3n de nuestro certificado digital, obligatorio para poder autenticar los datos. Una vez concluida la operaci\u00f3n, podremos obtener el resultado mediante la llamada a getB64Data o guardarla en un archivo con saveDataToFile .","title":"CMS autenticado y envuelto"},{"location":"markdown_strict/CF_manual-integrador/#sobres-con-multiples-remitentes","text":"El Cliente @firma permite definir m\u00faltiples remitentes para los sobres digitales de tipo \u201cenvelopedData\u201d y \u201csignedAndEnvelopedData\u201d. Para agregar m\u00faltiples remitentes a un sobre ser\u00e1 necesario generar el sobre normalmente y agregar en una operaci\u00f3n posterior la informaci\u00f3n de un nuevo remitente. Si se desean agregar nuevos remitentes al sobre puede repetirse esta operaci\u00f3n tantas veces como se desee. El procedimiento a seguir es el siguiente: Una vez tenemos el sobre generado con el remitente inicial el proceso a seguir es el siguiente: Seleccionamos el sobre digital al que deseemos agregar el nuevo remitente. Podemos hacer esto introduci\u00e9ndolo en base 64 mediante setData o indicando la ruta absoluta en la que se encuentra el sobre en disco utilizando setFileuri . Opcionalmente, seleccionamos el certificado del nuevo remitente configurando el almac\u00e9n en donde se encuentra mediante setKeystore y su alias con setSelectedCertificateAlias . Si no se introducen estos datos, se pedir\u00e1 el certificado al usuario. Hacemos la llamada al m\u00e9todo coEnvelop . Tras la llamada, si no indicamos el nuevo remitente, se nos solicitar\u00e1 mediante un di\u00e1logo modal que lo seleccionemos del almac\u00e9n configurado y, seguidamente, se agregar\u00e1 la informaci\u00f3n del nuevo remitente. Una vez concluida la operaci\u00f3n, podremos obtener el resultado mediante la llamada a getB64Data o guardarla en un archivo con la operaci\u00f3n saveDataToFile .","title":"Sobres con m\u00faltiples remitentes"},{"location":"markdown_strict/CF_manual-integrador/#_1","text":"","title":""},{"location":"markdown_strict/CF_manual-integrador/#despliegue-del-cliente-firma-en-servidor","text":"El n\u00facleo del Cliente @firma se distribuye en forma de biblioteca Java, por lo que es posible integrarla en otras aplicaciones Java como una biblioteca independiente. Para esto s\u00f3lo es necesario agregarla a proyecto Java, ya sea cliente para ejecuci\u00f3n en cliente o servidor, en la que se quiera integrar, recordando que el sistema en donde vaya a ejecutarse debe cumplir con los requisitos m\u00ednimos del Cliente @firma. Puede decirse que existen 2 formas de acceder a las funcionalidades de las que dispone el Cliente @firma: Acceso a bajo nivel: Esto implica hacer uso de toda la API del Cliente @firma para realizar cada operaci\u00f3n unitaria necesaria (extracci\u00f3n de certificados de los almacenes, configuraci\u00f3n de los m\u00f3dulos de firma,\u2026) para componer la operaci\u00f3n que se desea realizar(firma de datos, generaci\u00f3n de sobres digitales, etc.). El uso de estas funcionalidades requiere un conocimiento m\u00e1s interno del Cliente @firma y el uso intensivo del Javadoc del mismo para identificar los m\u00e9todos apropiados para componer las operaciones que se desean. Acceso a alto nivel: Esto implica el uso del Cliente @firma a trav\u00e9s de la misma Clase applet que se utiliza para la integraci\u00f3n en p\u00e1ginas Web. Por medio de esta clase se puede acceder a las funcionalidades ya conocidas del cliente, preparadas para su uso directo por parte del integrador (firma/multifirma de ficheros, datos y hashes; operaciones masivas;\u2026).","title":"Despliegue del Cliente @firma en Servidor"},{"location":"markdown_strict/CF_manual-integrador/#diferencias-del-despliegue-del-cliente-en-servidor","text":"Existen algunas consideraciones que deben tenerse en cuenta antes de comenzar a integrar el Cliente @firma en servidor, debido a las diferencias al despliegue en la m\u00e1quina del usuario: La integraci\u00f3n del Cliente @firma en servidor est\u00e1 orientada a la firma de datos por parte de las entidades que lo integran, no de los usuarios. El Cliente no se carga en un navegador Web que tiene un almac\u00e9n de certificados predefinido, por lo es necesario indicar siempre a qu\u00e9 almac\u00e9n de certificados se debe acceder. Se accede a los almacenes de certificados del servidor, no del usuario. No es com\u00fan disponer de los certificados instalados en los almacenes de los navegadores o sistemas operativos. Normalmente dispondremos del certificado en un fichero (P12/PFX, JKS\u2026) o dispositivo externo (tarjeta inteligente, HSM\u2026). Es recomendable que se configure el acceso a dispositivos de firma externos (tarjetas inteligentes, tokens USB,\u2026) en alguno de los almacenes locales (CAPI, Mozilla,\u2026) y se utilicen a trav\u00e9s de los mismos. El uso del Cliente en servidor debe ser 100% program\u00e1tico. No debe requerir la intervenci\u00f3n de un usuario. Opciones que antes se delegaban al usuario tienen que realizarse autom\u00e1ticamente. Por ejemplo, la selecci\u00f3n del certificado de firma. No pueden utilizarse los m\u00e9todos de carga y guardado de ficheros en disco, ya que estos, por seguridad, solicitan confirmaci\u00f3n al usuario. Los m\u00e9todos vetados son: getFileBase64Encoded getTextFileContent(String) saveDataToFile(String) savePlainDataToFile(String) saveCipherDataToFile(String) setFileuri(String) setFileuriBase64(String) setElectronicSignatureFile(String) setOutFilePath(String) setKeyStore(String, String, String) setInputDirectoryToSign(String) setOutputDirectoryToSign(String) initMassiveSignature() cipherFile(String) decipherFile(String) signAndPackFile(String) No se pueden realizar firmas con el DNIe, ya que este requiere la autorizaci\u00f3n del usuario para firmar. Las operaciones deben terminar siempre, ya sea exitosamente o debido a un error, pero en ning\u00fan caso deben bloquearse, por ejemplo, con mensajes modales de aviso. ADVERTENCIA: Debido a que el applet del Cliente no ha sido desarrollado para usarse como interfaz program\u00e1tica para el uso desde servidor, la actual versi\u00f3n del Cliente @firma no permite que todas las operaciones se puedan realizar de forma 100% program\u00e1tica. Esto implica que hay operaciones que no es posible realizar desde servidor. Deben evitarse siempre los di\u00e1logos gr\u00e1ficos, ya que es posible que el servidor no disponga de un entorno de ventanas. Por ejemplo, deben evitarse las barras de progreso en la carga de ficheros.","title":"Diferencias del despliegue del Cliente en servidor"},{"location":"markdown_strict/CF_manual-integrador/#acceso-a-las-funcionalidades-a-bajo-nivel-del-cliente","text":"El uso de las funcionalidades a bajo nivel del Cliente @firma puede ser tedioso debido a que es necesario conocer los distintos elementos que lo componen. En este punto se hace especialmente importante atender a las consideraciones del apartado anterior y gestionar los errores que pudieran surgir resultado de la configuraci\u00f3n del Cliente o de la operaci\u00f3n. Para el uso de estas funcionalidades, dir\u00edjase al Javadoc del Cliente @firma y a la documentaci\u00f3n t\u00e9cnica del mismo.","title":"Acceso a las funcionalidades a bajo nivel del Cliente"},{"location":"markdown_strict/CF_manual-integrador/#acceso-a-las-funcionalidades-a-alto-nivel-del-cliente","text":"Las funcionalidades de alto nivel del Cliente @firma son las mismas disponibles para los integradores que lo utilizan a modo de applet desde HTML. Las clases y m\u00e9todos p\u00fablicos del Cliente @firma vienen documentados en la versi\u00f3n del Javadoc orientada a integradores. Las principales ventajas de utilizar esta clase para hacer uso del Cliente son: Nos permiten reutilizar los conocimientos adquiridos en el despliegue del Cliente en el sistema del usuario. Podremos utilizar los mismos m\u00e9todos que se utilizan en este entorno. Nos proporciona el mismo comportamiento del que disponemos en el despliegue com\u00fan del Cliente. Por ejemplo, para firmar nos bastar\u00e1 con seleccionar la configuraci\u00f3n adecuada (formato, modo, almac\u00e9n, certificado,\u2026) y llamar al m\u00e9todo de firma. No tendremos que preocuparnos de cargar el m\u00f3dulo del formato de firma escogido, extraer el certificado del almac\u00e9n, etc. Es importante saber que la clase applet del Cliente, denominada SignApplet, no fue desarrollada con esta finalidad y, en la actual versi\u00f3n del Cliente, no funciona en todos los casos de uso soportados por el Cliente, por existir operaciones que requieren de interacci\u00f3n con el usuario. Por este motivo, no se garantiza que se puedan acceder a todas las funcionalidades del Cliente a trav\u00e9s de esta interfaz . Un ejemplo de esto es el acceso a almacenes de certificados en fichero (P12/PFX y JKS), que no est\u00e1n soportados para las operaciones de multifirma. Para cargar el Cliente en una aplicaci\u00f3n Java y utilizar el Applet como interfaz de acceso a sus funcionalidades, haremos: \u2026 // Cargamos el cliente SignApplet afirma = new SignApplet(); \u2026 Una vez cargado el Cliente haremos uso de las funciones descritas en este manual y el JavaDoc para integradores del Cliente para realizar las distintas operaciones soportadas. Siempre que se desee realizar una nueva operaci\u00f3n debe invocarse al m\u00e9todo initialize() del Cliente @firma para restaurar los valores por defecto y eliminar los resultados de anteriores operaciones.","title":"Acceso a las funcionalidades a alto nivel del Cliente"},{"location":"markdown_strict/CF_manual-integrador/#ejemplo-de-integracion","text":"A continuaci\u00f3n se muestra un ejemplo de uso del cliente en donde se realiza una firma electr\u00f3nica usando un certificado de un almac\u00e9n PKCS#12: \u2026 // Cargamos el cliente SignApplet afirma = new SignApplet(); // Configuramos la operacion de firma afirma.setKeyStore(\"C:/almacen.p12\", \"1111\", \"P12\"); // Almacen PKCS12 // System.out.println(afirma.getCertificatesAlias()); // Imprime los alias afirma.setSelectedCertificateAlias(\"aliasCertificado\"); // Certificado afirma.setFileuri(\"C:/entrada.txt\"); // Fichero de datos afirma.setSignatureFormat(\"CAdES\"); // Formato afirma.setSignatureMode(\"Implicit\"); // Modo // Ejecutamos la operacion afirma.sign(); // Comprobamos si ocurrio un error durante la firma if (afirma.isError()) { System. err .println(\"Error en la firma: \" + afirma.getErrorMessage()); return ; } // Almacenamos la firma afirma.setOutFilePath(\"C:/salida.csig\"); afirma.saveSignToFile(); // Mostramos el resultado if (afirma.isError()) { System. err .println(\"Error al almacenar la firma: \" + afirma.getErrorMessage()); } else { System. err .println(\"La operacion finalizo correctamente\"); } \u2026","title":"Ejemplo de integraci\u00f3n"},{"location":"markdown_strict/CF_manual-integrador/#configuracion-del-cliente_1","text":"","title":"Configuraci\u00f3n del Cliente"},{"location":"markdown_strict/CF_manual-integrador/#configuracion-de-idioma","text":"El Cliente @firma tiene configurado por defecto el idioma espa\u00f1ol para los textos. Sin embargo, al iniciarse el applet se toma la configuraci\u00f3n de idioma del sistema del usuario y se configura este idioma para la aplicaci\u00f3n. Tambi\u00e9n es posible forzar el cambio de idioma para asegurar que los mensajes del Cliente se mostrar\u00e1n en un idioma concreto. Es requisito indispensable que el idioma est\u00e9 soportado por el Cliente. Si se indica un idioma no soportado o no v\u00e1lido, se configurar\u00e1 el idioma del sistema, o el idioma por defecto si este tampoco estuviese. Igualmente, si alguno de los textos necesarios no estuviese disponible en el idioma solicitado, se tomar\u00e1 del idioma por defecto. Para forzar un idioma ser\u00e1 necesario indicarlo en en el constantes.js de configuraci\u00f3n del applet. En el fichero constantes.js estableceremos la variable locale al valor, conforme las ISO 639 y 3166. Por ejemplo: var locale = \u201cen_UK\u201d;","title":"Configuraci\u00f3n de idioma"},{"location":"markdown_strict/CF_manual-integrador/#inicializacion-de-las-operaciones","text":"Antes de iniciar una operaci\u00f3n criptogr\u00e1fica se debe invocar el m\u00e9todo initialize() del Cliente, que borra las entradas y salidas de operaciones anteriores. En las bibliotecas JavaScript \u201c firma.js \u201d y \u201c constantes.js \u201d se incluye un m\u00e9todo initialize() que lo invoca al initialize() del cliente y configura diversos par\u00e1metros, como el formato de firma por defecto o el filtro de certificados.","title":"Inicializaci\u00f3n de las operaciones"},{"location":"markdown_strict/CF_manual-integrador/#cambio-de-almacen-de-certificados","text":"Al ejecutar el cliente @firma como Applet se configura por defecto el almac\u00e9n de certificados del navegador o sistema operativo sobre el que se ejecuta. Seg\u00fan la configuraci\u00f3n navegador/sistema operativo el almac\u00e9n de certificados por defecto ser\u00e1: Internet Explorer Mozilla Firefox 32 Bits Mozilla Firefox 64 Bits Google Chrome / Opera Apple Safari Windows Almac\u00e9n Windows Almac\u00e9n Mozilla Almac\u00e9n Windows Almac\u00e9n Windows Almac\u00e9n Windows Linux / Solaris Almac\u00e9n Mozilla Almac\u00e9n Mozilla Almac\u00e9n Mozilla Mac OS X Almac\u00e9n Mozilla Almac\u00e9n Mozilla Llavero Mac OS X Llavero Mac OS X Leyenda: Gris = no aplica. Para detalles sobre compatibilidad consulte con la secci\u00f3n Requisitos m\u00ednimos de este mismo documento. El cliente @firma, sin embargo, permite la configuraci\u00f3n de este almac\u00e9n de certificados de tal forma que es posible indicar de qu\u00e9 almac\u00e9n deben extraerse los certificados. Esta configuraci\u00f3n se establece mediante el m\u00e9todo setKeystore(String path, String pass, String type). Este m\u00e9todo recibe, por orden: path : La ruta al almac\u00e9n de certificados que se desea utilizar (s\u00f3lo para almacenes en disco). Si es necesaria para el tipo de almac\u00e9n seleccionado y no se indica, se le mostrar\u00e1 un di\u00e1logo al usuario para que lo seleccione. pass : La contrase\u00f1a para abrir el almac\u00e9n. Aplica a cualquier almac\u00e9n que pueda estar protegido por contrase\u00f1a (PKCS#12/PFX, Mozilla Firefox configurado con clave maestra,\u2026). Si no se indica y es necesaria se le mostrar\u00e1 un di\u00e1logo al usuario para que la inserte. type : Tipo de almac\u00e9n de certificados. Los distintos par\u00e1metros admitidos son: WINDOWS : Repositorio de Microsoft Windows (MSCAPI). APPLE : Repositorio de Apple Macintosh (Llavero o KeyChain). MOZILLA : Repositorio Mozilla. Para su uso en Windows es obligatorio tener instalado Mozilla Firefox. P11 : Repositorio de tipo PKCS#11 accesible desde una biblioteca nativa del sistema. No es recomendable el uso directo de este tipo de almac\u00e9n, en su lugar deber\u00eda aconsejarse al usuario que instale el dispositivo y acceda a \u00e9l a trav\u00e9s del almac\u00e9n de certificados de su navegador. Si no se indica, se le solicitar\u00e1 al usuario la ruta y contrase\u00f1a de la biblioteca. P12 : Repositorios en disco en formato PKCS#12 o PFX. Si no se indica, se le solicitar\u00e1 al usuario la ruta y contrase\u00f1a del almac\u00e9n. Si se indica en la llamada al m\u00e9todo la contrase\u00f1a del almac\u00e9n, se utilizar\u00e1 esta tambi\u00e9n para la selecci\u00f3n de los certificados. JKS : Repositorios en disco en formato JKS. Si no se indica, se le solicitar\u00e1 al usuario la ruta y contrase\u00f1a del almac\u00e9n. Si se indica en la llamada al m\u00e9todo la contrase\u00f1a del almac\u00e9n, se utilizar\u00e1 esta tambi\u00e9n para la selecci\u00f3n de los certificados. SINGLE : Certificado suelto en disco. Estos certificados s\u00f3lo disponen de clave p\u00fablica, por lo que no son aptos para firmar. Si no se indica, se le solicitar\u00e1 al usuario la ruta del certificado. JAVACE : Repositorios en disco en formato Java Case Exact. Si no se indica, se le solicitar\u00e1 al usuario la ruta y contrase\u00f1a del almac\u00e9n. Si se indica en la llamada al m\u00e9todo la contrase\u00f1a del almac\u00e9n, se utilizar\u00e1 esta tambi\u00e9n para la selecci\u00f3n de los certificados. WINADDRESSBOOK : Repositorio de Certificados de Otras Personas de Windows. Este almac\u00e9n no contiene certificados personales de firma, por lo que no se recomienda su uso para tal fin. WINDOWS-CA : Repositorio de Certificados de Autoridades de Certificaci\u00f3n de Windows. Este almac\u00e9n no contiene certificados personales de firma, por lo que no se recomienda su uso para tal fin. WINDOWS-ROOT : Repositorio de Certificados Ra\u00edz de Windows. Este almac\u00e9n no contiene certificados personales de firma, por lo que no se recomienda su uso para tal fin. En caso de seleccionar un almac\u00e9n no v\u00e1lido (el almac\u00e9n de Apple en Windows, por ejemplo) u ocurrir un error durante su inicializaci\u00f3n, el cliente se reconfigurar\u00e1 al almac\u00e9n que se tuviese configurado en ese momento.","title":"Cambio de almac\u00e9n de certificados"},{"location":"markdown_strict/CF_manual-integrador/#forzar-ruta-del-almacen-de-mozilla-firefox","text":"El Applet Cliente @firma detecta autom\u00e1ticamente d\u00f3nde est\u00e1 instalado Mozilla Firefox y, de esta forma, c\u00f3mo acceder al almac\u00e9n de certificados del navegador y cu\u00e1l es el almac\u00e9n correspondiente al usuario que est\u00e1 usando actualmente el navegador, ya Firefox permite la existencia de varios perfiles de usuario dentro de la misma cuenta de usuario del sistema operativo. Existen ocasiones muy concretas en las que no es posible detectar d\u00f3nde est\u00e1 instalado el navegador como, por ejemplo, si se utiliza un navegador Firefox Portable o si se intenta acceder al almac\u00e9n de una cuenta concreta de Firefox sin usar el propio navegador. En estos casos, el Applet Cliente @firma usar\u00e1 las siguientes variables del sistema para localizar los recursos necesarios: NSS_HOME: Directorio con las bibliotecas NSS compatibles con la versi\u00f3n de a la que pertenezca el almac\u00e9n al que deseamos acceder. PROFILE_HOME: Directorio con el perfil de usuario de Firefox al que pertenece el almac\u00e9n. Si un integrador desease desde un sistema integrado acceder a un almac\u00e9n de una cuenta concreta de Firefox, deber\u00e1 configurar estas variables de entorno.","title":"Forzar ruta del almac\u00e9n de Mozilla Firefox"},{"location":"markdown_strict/CF_manual-integrador/#seleccion-y-filtrado-de-certificados","text":"","title":"Selecci\u00f3n y filtrado de certificados"},{"location":"markdown_strict/CF_manual-integrador/#seleccion-de-los-certificados-para-operaciones-criptograficas","text":"Muchas operaciones criptogr\u00e1ficas de las soportadas por el cliente @firma requieren que se seleccione un certificado de usuario como, por ejemplo, la firma. Los certificados accesibles por el applet de firma son aquellos disponibles desde el repositorio de certificados del sistema o navegador y es posible seleccionar uno de ellos mediante el m\u00e9todo del cliente setSelectedCertificateAlias(String) al que debe pasarse uno de los certificados recogidos mediante el m\u00e9todo getCertificatesAlias() . Es posible permitir al usuario seleccionar un certificado directamente a trav\u00e9s de un di\u00e1logo de selecci\u00f3n de certificados. Podemos mostrar este di\u00e1logo a trav\u00e9s del m\u00e9todo showCertSelectionDialog() , que devuelve el alias del certificado. Cuando el usuario selecciona un certificado a trav\u00e9s de este m\u00e9todo, este queda autom\u00e1ticamente seleccionado, de modo que es posible recuperarlo mediante los m\u00e9todos getSignCertificate() y getSignCertificateBase64Encoded() , detallados en el apartado \u201cObtener el certificado usado para firmar\u201d. En caso no seleccionarse un certificado, al realizar una operaci\u00f3n criptogr\u00e1fica que lo requiera, se solicitar\u00e1 \u00e9ste autom\u00e1ticamente al usuario mediante el di\u00e1logo de selecci\u00f3n. < Figura 5: Selecci\u00f3n de certificado Por defecto, s\u00f3lo se mostrar\u00e1n aquellos certificados aptos para realizar una firma electr\u00f3nica (independientemente de como se declare en campo KeyUsage explicado en siguiente apartado). Si desea que se muestren todos los certificados, a fin de seleccionar uno con un fin distinto al de firma, utilice el m\u00e9todo setShowOnlySignatureCertificates(boolean) . Al pasar el valor, false a este m\u00e9todo se mostrar\u00e1n todos los certificados del almac\u00e9n seleccionado, independientemente de si son v\u00e1lidos para firma o no. Para indicar los receptores de los sobre digitales se deber\u00e1n introducir las direcciones de sus certificados exportados (ficheros CER o DER). El m\u00e9todo utilizado es setRecipientsToCMS(String) y recibe una cadena con las rutas de los certificados separadas por el car\u00e1cter \u2018\\n\u2019. Por ejemplo: clienteFirma.setRecipientsToCMS(\"C:/detinatario1.cer\\nC:/destinatario2.cer\" ); De forma independiente a los receptores indicados mediante el m\u00e9todo setRecipientsToCMS , es posible configurar receptores adicionales de sobre digital mediante el m\u00e9todo addRecipientToCMS que recibe el certificado del receptor codificado en base 64. Para eliminar alguno de los receptores agregados mediante este m\u00e9todo puede utilizarse removeRecipientToCMS . Un punto importante a destacar es que el m\u00e9todo getCertificateAlias() proporciona los alias reales con los que los certificados han sido dados de alta en los almacenes (que son siempre los que deben usarse con setSelectedCertificateAlias(String) ), pero que el di\u00e1logo de selecci\u00f3n de certificado solicita la selecci\u00f3n en base a un \u201cnombre descriptivo\u201d, que se compone a partir del Nombre Com\u00fan (CN) del titular, el alias real si procede y el nombre de la entidad emisora. Este \u201cnombre descriptivo\u201d se usa porque en muchas ocasiones los alias reales no son realmente descriptivos o est\u00e1n en formatos poco pr\u00e1cticos (como X.500).","title":"Selecci\u00f3n de los certificados para operaciones criptogr\u00e1ficas"},{"location":"markdown_strict/CF_manual-integrador/#filtros-de-certificados","text":"El Cliente de firma incorpora una funcionalidad que permite hacer una preselecci\u00f3n de los certificados que se muestran para selecci\u00f3n al usuario, de forma que se puedan descartar a priori los no aceptados o no apropiados y as\u00ed disminuir la probabilidad de que el usuario erre en la elecci\u00f3n del certificado adecuado. El establecimiento de los filtros se realiza mediante el m\u00e9todo addRFC2254CertificateFilter(String, String, boolean) , que admite tres par\u00e1metros: Filtro a aplicar en el campo Principal del titular del certificado X.509. Debe proporcionarse una cadena de texto con una condici\u00f3n de filtro seg\u00fan la normativa RFC 2254. Filtro a aplicar en el campo Principal del emisor del certificado X.509 Debe proporcionarse una cadena de texto con una condici\u00f3n de filtro seg\u00fan la normativa RFC 2254. Se indicar\u00e1 true si se desea que solo se muestren los certificados aptos para firma electr\u00f3nica seg\u00fan el campo KeyUsage del certificado X.509, false si no se desea hacer distinci\u00f3n por el valor de este campo. El paso de null en cualquiera de los par\u00e1metros indica que, por el criterio correspondiente, no se aplicar\u00e1 ning\u00fan filtro. Para m\u00e1s informaci\u00f3n, consulte la documentaci\u00f3n JavaDoc. Ejemplos de uso: Selecci\u00f3n entre certificados de firma de DNIe: clienteFirma.addRFC2254CertificateFilter(null, \"cn=AC DNIE*\", true ); Selecci\u00f3n entre cualquier certificado marcado como apto para firma electr\u00f3nica: clienteFirma.addRFC2254CertificateFilter(null, null, true ); Selecci\u00f3n \u00fanicamente entre certificados emitidos por Camerfirma: clienteFirma.addRFC2254CertificateFilter(null, \"o=Camerfirma\" , false ); Selecci\u00f3n con diversos criterios en un mismo Principal: clienteFirma.addRFC2254CertificateFilter( \"(&(OU=Clase 2 persona fisica)(C=ES))\" , null, false ); Selecci\u00f3n entre certificados de un titular cuyo n\u00famero de DNI sea \u201c123456789Z\u201d (funciona con la mayor\u00eda de los emisores de certificados, como DNIe, FNMT, etc.): clienteFirma.addRFC2254CertificateFilter( \"SERIALNUMBER=123456789Z\" , null, false ); Selecci\u00f3n del certificado de firma del DNIe de un titular con n\u00famero de DNI \u201c123456789Z\u201d: clienteFirma.addRFC2254CertificateFilter( \"SERIALNUMBER=123456789Z\", \"cn=AC DNIE*\", true ); Un filtro establecido mediante este m\u00e9todo bloquear\u00eda todos aquellos certificados que no cumpliesen las 3 condiciones indicadas en el filtro: subject , issuer y keyusage . Utilizando varias veces este m\u00e9todo podemos agregar nuevos filtros, de tal forma que un certificado ser\u00e1 v\u00e1lido cuando cumpla al menos uno de ellos. Ejemplo de uso: Selecci\u00f3n del certificado de firma del DNIe y los certificados expedidos por Camerfirma: clienteFirma.addRFC2254CertificateFilter(null, \"cn=AC DNIE*\", true ); clienteFirma.addRFC2254CertificateFilter(null, \"o=Camerfirma\" , false ); Para borrar los filtros establecidos, ya sea para obtener todos los certificados del almac\u00e9n o introducir nuevos filtros, usaremos el m\u00e9todo resetFilters() . Es posible solicitar al cliente que, en caso de que s\u00f3lo exista un certificado en el almac\u00e9n o s\u00f3lo un certificado pase los filtros indicados, se seleccione autom\u00e1ticamente, sin dar al usuario la posibilidad de elegir. Esto se puede hacer mediante el m\u00e9todo setMandatoryCertificate(boolean) . Por defecto, se mostrar\u00e1 el di\u00e1logo de selecci\u00f3n aunque s\u00f3lo haya un certificado disponible para seleccionar. Si el filtro devolviese m\u00e1s de un certificado, se ignorar\u00eda el valor establecido mediante setMandatoryCertificate(boolean) . NOTA IMPORTANTE SOBRE FILTROS RFC2254: Los nombres de los campos X.500/LDAP que encontramos en la identificaci\u00f3n del titular y el emisor de un certificado, se codifican internamente mediante un OID ASN.1 consistente en una sucesi\u00f3n de n\u00fameros separados por puntos. Estos OID se traducen para una mayor facilidad de lectura en palabras asociadas. Por ejemplo, el OID 2.5.4.4 identifica al campo apellido, y se traduce por la palabra SURNAME . No obstante, el diccionario de traducci\u00f3n de OID a palabras legibles no es un\u00edvoco, y existe la posibilidad de que a un mismo OID le correspondan dos palabras. Siguiendo con el ejemplo anterior, aunque la mayor\u00eda de los diccionarios asocian la palabra SURNAME al OID 2.5.4.4 , algunos le asocian la palabra SN . Adicionalmente, otro inconveniente que podemos encontrar es que un determinado diccionario de OID no contenga ninguna palabra asociada a un OID particular. Un ejemplo de este caso podr\u00edamos encontrarlo en el OID 0.2.262.1.10.12.0 , que aunque corresponde a la palabra liabilityLimitationFlag no figura en los diccionarios comunes. Cuando un OID no figura en un diccionario se usa directamente el OID. El Cliente @firma utiliza el diccionario de OID de Java, que puede diferir del usado por el sistema operativo y de los usados por otras aplicaciones. Para evitar problemas de filtrado debidos a estas circunstancias, debe construir siempre los filtros previendo que un campo puede aparecer referenciado por cualquiera de sus nombres o por su OID . Por ejemplo, si desea filtrar por apellido, la expresi\u00f3n de filtrado debe ser construida de forma que funcione correctamente tanto si este aparece referenciado por su OID ( 2.5.4.4 ) como por cualquiera de sus palabras descriptivas ( SURNAME , SN , etc.). Independientemente de que se utilicen en el filtro todas las palabras posibles con las que se identifique un OID, listamos a continuaci\u00f3n las opciones preferentes para los OID m\u00e1s comunes para los que se conocen varias de estas palabras: 2.5.4.4: SURNAME 2.5.4.4: GIVENNAME 1.2.840.113549.1.9.1: EMAILADDRESS 2.5.4.12 = T 2.5.4.46 = DNQ 2.5.4.43 = INITIALS 2.5.4.44 = GENERATION Consulte la documentaci\u00f3n sobre la normativa RFC 2254 para obtener m\u00e1s informaci\u00f3n de c\u00f3mo construir adecuadamente sus filtros. Informaci\u00f3n adicional: Copia de la normativa RFC 2254: http://www.faqs.org/rfcs/rfc2254.html Ejemplo de diccionario de OID: http://www.cs.auckland.ac.nz/~pgut001/dumpasn1.cfg","title":"Filtros de certificados"},{"location":"markdown_strict/CF_manual-integrador/#la-marca-de-certificado-apto-para-firma-electronica-en-el-atributo-keyusage-de-un-certificado-x509","text":"La inmensa mayor\u00eda de los certificados digitales usan el atributo X.509 KeyUsage para determinar el uso de un certificado (autenticaci\u00f3n, firma electr\u00f3nica, SSL servidor, etc.), por lo que distinguir por este para la selecci\u00f3n del certificado apropiado para las operaciones de firma es en general una buena opci\u00f3n. No obstante, la mayor\u00eda de los certificados emitidos por la FNMT-RCM (CERES, APE, etc.) no siguen las normativas internacionales en este sentido y en el atributo KeyUsage no marcan que son adecuados para firma electr\u00f3nica pese a que se publicitan como aptos para dicho uso. Debido a esta falta de adecuaci\u00f3n, si se marca mediante el \u00faltimo par\u00e1metro del m\u00e9todo anteriormente comentado que solo deben mostrarse certificados aptos para firma, no se mostrar\u00e1 ning\u00fan certificado emitido por la FNMT-RCM. Los certificados del DNIe sin embargo si siguen las normativas internacionales y marcan con los atributos correspondientes el uso, encontr\u00e1ndonos en cada DNIe un certificado apto para firma y otro que no lo es (el de autenticaci\u00f3n). Para consultar el significado preciso de cada uno de los valores del campo KeyUsage consulte con el emisor de sus certificados.","title":"La marca de certificado apto para firma electr\u00f3nica en el atributo KeyUsage de un certificado X.509"},{"location":"markdown_strict/CF_manual-integrador/#configuracion-de-firma","text":"","title":"Configuraci\u00f3n de firma"},{"location":"markdown_strict/CF_manual-integrador/#algoritmos-de-firma-digital","text":"El cliente permite usar distintos algoritmos de firma digital, siempre especificados con el formato A with B, donde A es el algoritmo de huella digital y B el de cifrado asim\u00e9trico. Entre los algoritmos soportados encontramos: SHA1withRSA (por defecto) SHA256withRSA SHA384withRSA SHA512withRSA (es el m\u00e1s seguro) El algoritmo a utilizar se puede cambiar con el m\u00e9todo setSignatureAlgorithm , que recibe como par\u00e1metro una de las cadenas citadas. No se soportan los algoritmos obsoletos MD2 o MD5. NOTAS IMPORTANTES: No todas las operaciones soportan todos los algoritmos: Los formatos de firma XAdES y XMLDSig solo soportan firmas con algoritmos SHA-2 (SHA256withRSA, SHA384withRSA y SHA512withRSA) en versiones posteriores a Java 6 update 18. En las primeras versiones de Java 7, se produjo un error de regresi\u00f3n de Java que trajo de vuelta este problema. En las \u00faltimas versiones de Java 7 este error est\u00e1 solucionado. Referencia: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6845600 No todos los almacenes de certificados soportan todos los algoritmos: SHA256withRSA, SHA384withRSA y SHA512withRSA no est\u00e1n soportados en la configuraci\u00f3n tradicional del almac\u00e9n de Windows hasta versiones avanzadas de Java 6. En las primeras versiones de java 7 tampoco es posible. Los formatos de firma no gen\u00e9ricos (ODF, OOXML, PDF) ignorar\u00e1n cualquier configuraci\u00f3n especificada por el integrador que no est\u00e9 soportada por su correspondiente normativa. Por ejemplo, modo de firma expl\u00edcito, algoritmos de firma no soportados\u2026","title":"Algoritmos de firma digital"},{"location":"markdown_strict/CF_manual-integrador/#formato-de-firma-electronica","text":"El cliente permite crear firmas digitales en distintos formatos (por defecto CAdES). Globalmente se soportan los siguientes formatos y normativas de firma electr\u00f3nica: CMS: Representado por la cadena \u201c CMS/PKCS#7 \u201d. CAdES: Representado por la cadena \u201c CAdES \u201d. XMLDSig Internally Detached: Representado por la cadena \u201c XMLDSig Detached \u201d. XMLDSig Enveloping: Representado por la cadena \u201c XMLDSig Enveloping \u201d. XMLDSig Enveloped: Representado por la cadena \u201c XMLDSig Enveloped \u201d. XAdES Internally Detached: Representado por la cadena \u201c XAdES Detached \u201d. XAdES Enveloping: Representado por la cadena \u201c XAdES Enveloping \u201d. XAdES Enveloped: Representado por la cadena \u201c XAdES Enveloped \u201d. Factura Electr\u00f3nica: Representado por la cadena \u201c FacturaE \u201d. PAdES: Representado por la cadena \u201c Adobe PDF \u201d. ODF (Open Document Format): Representado por la cadena \u201c ODF \u201d. OOXML (Office Open XML): Representado por la cadena \u201c OOXML \u201d. El formato se puede cambiar con el m\u00e9todo setSignatureFormat que recibe como par\u00e1metro la cadena que representa al formato en cuesti\u00f3n. Las variantes EPES de los formatos de firma que las soportan se generar\u00e1n autom\u00e1ticamente al configurar el formato de firma correspondiente y una pol\u00edtica de firma (consulte el apartado Pol\u00edtica de Firma).","title":"Formato de firma electr\u00f3nica"},{"location":"markdown_strict/CF_manual-integrador/#modos-de-firma-electronica","text":"Determinados formatos de firma electr\u00f3nica soportan los llamados, modos de firma. El modo de firma determina si los datos firmados se incorporar\u00e1n o no junto con la firma electr\u00f3nica generada. Los modos de firma existentes son: Impl\u00edcito: Representado por la cadena \u201c implicit \u201d. Expl\u00edcito: Representado por la cadena \u201c explicit \u201d. El modo de firma se puede cambiar con el m\u00e9todo setSignatureMode que recibe como par\u00e1metro la cadena que representa al modo en cuesti\u00f3n. Los par\u00e1metros son insensibles a may\u00fasculas y min\u00fasculas. Los formatos soportados por el cliente @firma que admiten configuraci\u00f3n de modo son: CMS/PKCS#7 CAdES XMLdSig Detached XMLdSig Enveloping XAdES Detached XAdES Enveloping Un formato de firma puede definir modos propios v\u00e1lidos para su configuraci\u00f3n.","title":"Modos de firma electr\u00f3nica"},{"location":"markdown_strict/CF_manual-integrador/#politica-de-firma","text":"El cliente permite especificar, para cada firma electr\u00f3nica, la pol\u00edtica a la que esta se adec\u00faa. Los formatos de firma, soportados por el cliente, que admiten pol\u00edticas de firma son CAdES, PDF/PAdES y XAdES (en sus variantes Detached, Enveloping y Enveloped). En el momento de establecer en el cliente la pol\u00edtica de firma para una firma CAdES, se generar\u00e1 una firma CAdES-EPES en lugar de la firma CAdES-BES tradicional. De igual manera, al establecer la pol\u00edtica de firma para una firma XAdES o PAdES se generar\u00e1 una firma XAdES-EPES o PAdES-EPES, respectivamente. Las firmas con pol\u00edtica generadas por el cliente @firma son de referencia externa. Es decir, la pol\u00edtica no se incluye en la propia firma, tan s\u00f3lo una referencia a la misma. Es posible establecer una pol\u00edtica de firma en el cliente @firma mediante el m\u00e9todo setPolicy que recibe como par\u00e1metros 4 cadenas: Identificador: URI identificadora de la pol\u00edtica de firma (normalmente una URL hacia el XML o el ASN.1 que formaliza la pol\u00edtica) u OID (que puede estar en forma de URN) identificador de la pol\u00edtica. Descripci\u00f3n: Descripci\u00f3n breve de la pol\u00edtica. Calificador: URL calificadora de la pol\u00edtica de firma (normalmente la URL apunta a un documento en formato PDF que describe la pol\u00edtica). Hash: Huella digital SHA-1 en base64 de la pol\u00edtica de firma. Ejemplo de uso: setPolicy( \"urn:oid:2.16.724.1.3.1.1.2.1.9\", \"Politica de firma electronica para las Administraciones Publicas en Espana\", \"https://sede.060.gob.es/politica_de_firma_anexo_1.pdf\", \"G7roucf600+f03r/o0bAOQ6WAs0=\" ); En cualquier caso, para el establecimiento de estos par\u00e1metros, consulte con detenimiento los documentos de su pol\u00edtica de firma y establezca los valores que all\u00ed se indiquen.","title":"Pol\u00edtica de Firma"},{"location":"markdown_strict/CF_manual-integrador/#restriccion-de-formatos-algoritmos-y-modos-de-firma-en-las-politicas-de-firma","text":"La mayor\u00eda de las pol\u00edticas de firma restringen la forma en la que se puede realizar una firma electr\u00f3nica acorde a la pol\u00edtica concreta. Esta restricci\u00f3n puede afectar a casi cualquier aspecto de la firma, y entre estos aspectos encontramos: Los algoritmos de firma (SHA1withRSA, SHA512withRSA, etc.) que pueden utilizarse. El tipo de firma admitido (CAdES, PAdES, XAdES, etc.). Las variantes de firma admitidas (expl\u00edcitas, impl\u00edcitas, enveloping , enveloped , externally detached , internally detached , etc.). Por ejemplo, las firmas XAdES-EPES conformes a la pol\u00edtica de firma de la AGE en su versi\u00f3n 1.9 deben ser siempre de tipo \u201c Internally Detached \u201d (preferiblemente) o \u201c Enveloped \u201d. Etc. Si especifica una pol\u00edtica de firma en sus firmas electr\u00f3nicas, debe asegurarse de que la totalidad de los par\u00e1metros de esta sean compatibles con dicha pol\u00edtica, leyendo con detenimiento tanto la documentaci\u00f3n del Cliente @firma como la versi\u00f3n PDF de descripci\u00f3n de la pol\u00edtica de firma.","title":"Restricci\u00f3n de formatos, algoritmos y modos de firma en las pol\u00edticas de firma"},{"location":"markdown_strict/CF_manual-integrador/#configuracion-de-sobres-digitales","text":"","title":"Configuraci\u00f3n de sobres digitales"},{"location":"markdown_strict/CF_manual-integrador/#seleccion-de-destinatarios-desde-ldap","text":"Adem\u00e1s de la posibilidad de seleccionar los destinatarios de un sobre digital a partir de sus certificados de clave p\u00fablica almacenados en disco, el cliente @firma permite la configuraci\u00f3n de un LDAP para seleccionar los certificados que este tenga publicados. El procedimiento para la selecci\u00f3n de estos certificados es la siguiente: Configuraci\u00f3n del servidor LDAP al que se desea acceder. Esto lo conseguimos mediante el m\u00e9todo setLdapConfiguration (String address, String port, String root) . Este m\u00e9todo recibe: address : Direcci\u00f3n URL del LDAP. port : Puerto a trav\u00e9s del que se realiza la conexi\u00f3n. Si no se indica se usar\u00e1 el puerto 389, el por defecto para LDAP. root : Direcci\u00f3n ra\u00edz del LDAP (actualmente sin uso). Selecci\u00f3n del certificado que se desea recuperar del LDAP. Para ello se utilizar\u00e1 el m\u00e9todo setLdapCertificatePrincipal , que recibe como par\u00e1metro el principal del certificado que deseamos. Recuperaci\u00f3n del certificado en base 64 mediante el m\u00e9todo getLdapCertificate . Configuraci\u00f3n del destinatario del sobre indic\u00e1ndolo mediante el m\u00e9todo addRecipientToCMS , que recibe como par\u00e1metro el certificado en base 64 recuperado del LDAP. Pueden agregase m\u00e1s de un destinatario de esta manera. Una vez establecido un destinatario, puede eliminarse mediante el m\u00e9todo removeRecipientToCMS al que se le pasa como par\u00e1metro el mismo certificado en base 64 con el que se estableci\u00f3.","title":"Selecci\u00f3n de destinatarios desde LDAP"},{"location":"markdown_strict/CF_manual-integrador/#configuracion-de-cifrado","text":"","title":"Configuraci\u00f3n de cifrado"},{"location":"markdown_strict/CF_manual-integrador/#algoritmos-de-cifrado","text":"Los algoritmos de cifrado permitidos son los siguientes: Cifrado con clave AES (por defecto) ARCFOUR Blowfish DES DESede (triple DES o 3DES) RC2 Cifrado con contrase\u00f1a PBEWithSHA1AndDESede (basado en DESede/3DES) PBEWithSHA1AndRC2_40 (basado en RC2) PBEWithMD5AndDES (basado en DES) Para establecer el algoritmo deberemos invocar la funci\u00f3n setCipherAlgorithm y podemos recuperar el algoritmo actual con el m\u00e9todo getCipherAlgorithm .","title":"Algoritmos de cifrado"},{"location":"markdown_strict/CF_manual-integrador/#modo-de-clave","text":"Definen de qu\u00e9 manera se trata la clave de cifrado. Existen tres posibilidades GENERATEKEY, USERINPUT y PASSWORD. GENERATEKEY: La clave se generar\u00e1 autom\u00e1ticamente. USERINPUT: El usuario deber\u00e1 establecer la clave en base 64. PASSWORD: La clave de usuario se generar\u00e1 a partir de una contrase\u00f1a. Esto requiere el uso de algoritmos de cifrado dise\u00f1ados con este objetivo (algoritmos PBE). El modo de clave se establece mediante setKeyMode y se recupera con getKeyMode .","title":"Modo de clave"},{"location":"markdown_strict/CF_manual-integrador/#clave-y-contrasena-de-cifrado","text":"Para obtener la clave que se ha utilizado para el cifrado/descifrado deberemos ejecutar el m\u00e9todo getKey , el cual nos devolver\u00e1 la clave codificada en base 64. Para fijar una clave para el cifrado o descifrado de datos usaremos setKey , adjuntando como par\u00e1metro la clave deseada en base 64. En el caso de haber especificado el modo de clave PASSWORD (consultar apartado Modo de clave), en lugar de una clave de cifrado ser\u00e1 necesario especificar una contrase\u00f1a de cifrado. Para establecer la contrase\u00f1a de cifrado/descifrado se utilizar\u00e1 el m\u00e9todo setPassword . Para recuperar la contrase\u00f1a establecida se utilizar\u00e1 el m\u00e9todo getPassword . ADVERTENCIA: Las contrase\u00f1as de cifrado/descifrado no podr\u00e1n contener caracteres no ASCII.","title":"Clave y contrase\u00f1a de cifrado"},{"location":"markdown_strict/CF_manual-integrador/#almacen-de-claves-de-cifrado","text":"El cliente @firma v3.2 y superiores permiten a los usuarios almacenar sus claves de cifrado en un almac\u00e9n de claves protegido por contrase\u00f1a. Es posible configurar el cliente @firma para que, en el momento de autogenerar una clave de cifrado se ofrezca al usuario la posibilidad de almacenarla en su almac\u00e9n personal de claves. Para esto ser\u00e1 necesario configurar el Cliente en modo \u201cGENERATEKEY\u201d tal como se indica en el apartado Modo de clave. En caso de que el usuario acepte almacenar la clave en su almac\u00e9n, se comprobar\u00e1 que este ya exista. Si exist\u00eda, se le solicitar\u00e1 al usuario la contrase\u00f1a para abrirlo y el alias con el que desea almacenar la clave. Si no exist\u00eda, se le indicar\u00e1 al usuario y se le dar\u00e1 la posibilidad de crearlo para lo que se le solicitar\u00e1 la contrase\u00f1a con la que desea protegerlo. Tras crear el almac\u00e9n se proceder\u00e1 a almacenar la clave tal como ya se indic\u00f3. En caso de rechazarse el guardado de la clave en el almac\u00e9n, se cancelar\u00e1 toda la operaci\u00f3n de cifrado pues el que se hubiese habilitado es signo de que la web delegaba en el usuario la gesti\u00f3n de la clave y este posiblemente no tenga posibilidad de hacerlo, ya que es posible que no se le haya mostrado la clave. El almac\u00e9n de claves se guarda con el nombre ciphkeys.jceks en el directorio ra\u00edz del usuario activo. Al encontrarse en este directorio, el almac\u00e9n ser\u00e1 distinto para cada usuario del sistema que utilice el Cliente y un usuario no podr\u00e1 acceder al almac\u00e9n del resto de usuarios. Tenga en cuenta que si este fichero es eliminado no se podr\u00e1n recuperar las claves almacenadas en \u00e9l, por lo que es posible que no pueda recuperar los datos cifrados con el Cliente. El integrador puede permitir al usuario utilizar sus claves ya almacenadas en el almac\u00e9n para cifrar nuevos datos. Para esto s\u00f3lo ser\u00eda necesario configurar el modo de clave del Cliente al valor \u201cUSERINPUT\u201d (consultar apartado Modo de clave ) y ejecutar la operaci\u00f3n de cifrado. Cuando se desee descifrar un contenido y no se haya indicado directamente la clave para el descifrado, se le preguntar\u00e1 al usuario si desea tomar la clave de su almac\u00e9n personal. En caso de aceptar, se le pedir\u00e1 la contrase\u00f1a del almac\u00e9n y se le dar\u00e1 a elegir mediante un di\u00e1logo modal entre las claves almacenadas (de las que se mostrar\u00e1 el alias asignado y el algoritmo de cifrado para el que fueron generadas). Si no existiese el almac\u00e9n de claves o el usuario no quisiera utilizarlo, se le preguntar\u00eda directamente por la clave de cifrado. Cuando se activa el modo de clave para el cifrado/descifrado con contrase\u00f1as (modo \u201cPASSWORD\u201d establecido seg\u00fan el apartado Modo de clave ) el almac\u00e9n de claves queda inhabilitado. Queda a elecci\u00f3n del integrador la posibilidad de permitir que el usuario pueda o no almacenar la clave de cifrado en su almac\u00e9n personal de claves o utilizar las almacenadas para cifrar. Esto puede hacerlo mediante el m\u00e9todo setUseCipherKeystore al que se le puede pasar un true o un false para permitir o no su uso (por defecto se permitir\u00e1 almacenarlas). Este m\u00e9todo no afecta al descifrado de datos. Si no se indicase la clave para el descifrado y el usuario dispusiese de un almac\u00e9n de claves, siempre se le dar\u00e1 la posibilidad de descifrar mediante una de las claves almacenadas. A continuaci\u00f3n se muestran algunos ejemplos para el uso del almac\u00e9n de claves de cifrado: Cifrado con las opciones por defecto (algoritmo de cifrado AES con una clave autogenerada) permitiendo que el usuario almacene la clave en su almac\u00e9n: \u2026 clienteFirma.setFileuri( \u201cfichero_texto\u201d ); clienteFirma.cipherData(); var cipheredData = clienteFirma. getCipherData(); \u2026 Cifrado con las opciones por defecto (algoritmo de cifrado AES con una clave autogenerada) NO permitiendo que el usuario almacene la clave en su almac\u00e9n: \u2026 clienteFirma.setFileuri( \u201cfichero_texto\u201d ); clienteFirma.setUseCipherKeyStore( false ); clienteFirma.cipherData(); var cipheredData = clienteFirma. getCipherData(); \u2026 Cifrado con una clave tomada del almac\u00e9n del usuario (si no existiese se solicitar\u00eda directamente al usuario): \u2026 clienteFirma.setFileuri( \u201cfichero_texto\u201d ); clienteFirma.setKeyMode( \u201cUSERINPUT\u201d ); clienteFirma.cipherData(); var cipheredData = clienteFirma. getCipherData(); \u2026 Descifrado con una clave tomada del almac\u00e9n del usuario: \u2026 clienteFirma.setFileuri( \u201cfichero_cifrado\u201d ); clienteFirma.decipherData(); var plainData = clienteFirma. getPlainData(); \u2026","title":"Almac\u00e9n de claves de cifrado"},{"location":"markdown_strict/CF_manual-integrador/#otras-funcionalidades","text":"","title":"Otras funcionalidades"},{"location":"markdown_strict/CF_manual-integrador/#guardar-la-firma-en-un-fichero","text":"El m\u00e9todo saveSignToFile permite guardar la \u00faltima firma generada en un fichero. Se puede especificar la ruta al fichero con setOutFilePath , que recibe una cadena con la ruta al fichero de salida. Si no se especifica, se permitir\u00e1 elegir al usuario. Si el integrador es quien ha decidido la ruta de guardado mediante el m\u00e9todo setOutFilePath , se pedir\u00e1 confirmaci\u00f3n al usuario para el guardado del fichero. Si el fichero ya existe, se pide confirmaci\u00f3n: < Figura 7: Di\u00e1logo para confirmar la sobreescritura de ficheros","title":"Guardar la firma en un fichero"},{"location":"markdown_strict/CF_manual-integrador/#obtener-el-certificado-usado-para-firmar","text":"Es posible recuperar el certificado utilizado en la \u00faltima operaci\u00f3n de firma mediante el m\u00e9todo getSignCertificate . Este m\u00e9todo obtiene una instancia de la clase X509Certificate de Java. El m\u00e9todo getSignCertificateBase64Encoded devuelve una cadena de texto con el certificado, codificado en base 64, utilizado en para la \u00faltima firma realizada. El certificado no estar\u00e1 delimitado por ninguna cadena ASCII ni car\u00e1cter extra.","title":"Obtener el certificado usado para firmar"},{"location":"markdown_strict/CF_manual-integrador/#leer-el-contenido-de-un-fichero-de-texto","text":"El m\u00e9todo getTextFileContent que recibe como par\u00e1metro una URI a un fichero devuelve el contenido del mismo como una cadena. Si el fichero est\u00e1 almacenado en local, la URI comenzar\u00e1 por \u201cfile:///\u201d.","title":"Leer el contenido de un fichero de texto"},{"location":"markdown_strict/CF_manual-integrador/#leer-el-contenido-de-un-fichero-en-base64","text":"El m\u00e9todo getFileBase64Encoded que recibe dos par\u00e1metros (ruta al fichero y un booleano que indica si mostrar o no gr\u00e1ficamente al usuario el progreso en la lectura del fichero). En caso de producirse un error se devolver\u00e1 null .","title":"Leer el contenido de un fichero en Base64"},{"location":"markdown_strict/CF_manual-integrador/#convertir-un-texto-plano-a-base64","text":"El m\u00e9todo getBase64FromText recibe como par\u00e1metros un texto plano y el nombre de un juego de caracteres y codifica este primero a base 64 en base al juego de caracteres indicado. En caso de producirse un error se devolver\u00e1 null . Es importante tener en cuenta que el indicar un juego de caracteres u otro en este m\u00e9todo no implica que el texto se recodifique antes de convertirse en Base64, sino que la secuencia interna de caracteres se interprete de una u otra manera. En caso de dudas sobre el juego de caracteres m\u00e1s apropiado a usar, se debe especificar null , y el sistema usar\u00e1 el por defecto o el m\u00e1s adecuado. Este aspecto es de especial relevancia en el caso de textos que representen XML bien formados, ya que la especificaci\u00f3n de un juego de caracteres inadecuado provocar\u00e1 la introducci\u00f3n de caracteres extra\u00f1os que invalidar\u00e1n el XML.","title":"Convertir un texto plano a Base64"},{"location":"markdown_strict/CF_manual-integrador/#obtener-el-hash-de-un-fichero","text":"El m\u00e9todo getFileHashBase64Encoded devuelve una cadena con el hash de un fichero codificado en base 64. En caso de producirse un error se devolver\u00e1 null .","title":"Obtener el hash de un fichero"},{"location":"markdown_strict/CF_manual-integrador/#obtener-la-ruta-de-un-fichero","text":"Para permitir a un usuario obtener la ruta completa de un fichero el cliente dispone del m\u00e9todo loadFilePath(String, String, String). Este m\u00e9todo abre una ventana modal para la selecci\u00f3n de un fichero. Es posible configurar el di\u00e1logo de selecci\u00f3n a trav\u00e9s de los par\u00e1metros que recibe la funci\u00f3n y que son respectivamente: El t\u00edtulo de la ventana de selecci\u00f3n. El listado de extensiones permitidas separadas por \u201c$%$\u201d. La descripci\u00f3n del fichero que se busca. Todos los par\u00e1metros pueden ser nulos. La salida de este m\u00e9todo puede utilizarse para configurar la entrada del cliente mediante el m\u00e9todo setFileuri . ADVERTENCIA: Este m\u00e9todo bloquea el script desde el que se ejecuta a la espera de que el usuario seleccione un fichero mediante el di\u00e1logo mostrado. Este comportamiento puede hacer que algunos navegadores muestren al usuario una advertencia informando que el script est\u00e1 ocupado y puede ser da\u00f1ino, d\u00e1ndole la posibilidad de bloquearlo. En caso de que se desee evitar esta interferencia, es responsabilidad del integrador ejecutar este m\u00e9todo de forma as\u00edncrona al resto del script (por ejemplo, mediante AJAX).","title":"Obtener la ruta de un fichero"},{"location":"markdown_strict/CF_manual-integrador/#obtener-la-ruta-de-un-directorio","text":"Para permitir a un usuario obtener la ruta completa de un directorio puede hacerse uso el m\u00e9todo selectDirectory . Este m\u00e9todo devuelve la ruta absoluta al directorio. ADVERTENCIA: Este m\u00e9todo bloquea el script desde el que se ejecuta a la espera de que el usuario seleccione un directorio mediante el di\u00e1logo mostrado. Este comportamiento puede hacer que algunos navegadores muestren al usuario una advertencia informando que el script est\u00e1 ocupado y puede ser da\u00f1ino, d\u00e1ndole la posibilidad de bloquearlo. En caso de que se desee evitar esta interferencia, es responsabilidad del integrador ejecutar este m\u00e9todo de forma as\u00edncrona al resto del script (por ejemplo, mediante AJAX).","title":"Obtener la ruta de un directorio"},{"location":"markdown_strict/CF_manual-integrador/#ejemplos-de-uso","text":"Junto al cliente se distribuyen los siguientes ficheros HTML de ejemplo de uso del cliente: demoMultifirma . html : Ejemplos de firma, co-firma y contra-firma demoMultifirmaMasiva .*html *: Ejemplo de multifirma masiva program\u00e1tica. demoFirmaDirectorios .*html *: Ejemplo de multifirma masiva sobre directorios. demoCifrado.html: Ejemplo de cifrado. demoSobreDigital.html : Ejemplo de CMS encriptado, CMS envuelto y CMS firmado y envuelto. demoKeyStores.html : Ejemplo de la funcionalidad de cambio de almac\u00e9n de certificados. demoLdap.html : Ejemplo de la carga de certificados desde LDAP.","title":"Ejemplos de uso"},{"location":"markdown_strict/CF_manual-integrador/#buenas-practicas-en-la-integracion-del-cliente","text":"","title":"Buenas pr\u00e1cticas en la integraci\u00f3n del cliente"},{"location":"markdown_strict/CF_manual-integrador/#localizar-la-ruta-del-applet-cliente-firma","text":"Aunque la librer\u00eda que facilita el uso del cliente ( instalador.js ) toma como direcci\u00f3n por defecto de los recursos del cliente la del HTML que lo carga, es muy recomendable el establecer la ruta del Cliente expl\u00edcitamente. En concreto, el par\u00e1metro a establecer se encuentra en el fichero constantes.js : base : Ruta del directorio en el que se encuentra el Applet Cliente @firma. Esta ruta debe apuntar al directorio en donde se encuentran las construcciones de este Applet, no a ninguna construcci\u00f3n en concreto. Por ejemplo, si la localizaci\u00f3n de una de las construcciones fuese \u201chttp://www.minhap.es/clienteAfirma/ COMPLETA_j6_afirma5_core.jar\u201d la direcci\u00f3n que se deber\u00eda establecer ser\u00eda \u201chttp://www.minhap.es/clienteAfirma\u201d. Las rutas indicadas pueden ser absolutas o relativas. Las rutas absolutas deben comenzar por \"file:///\" (n\u00f3tese la triple barra), \"http://\" o \"https://\" (por ejemplo, \"file:///C:/ficheros\", \"http://www.minhap.es/ficheros\",...) y las rutas relativas no pueden empezar por \"/\" (por ejemplo, \"afirma/ficheros\"). Se debe usar siempre el separador \"/\", nunca \"\\. La configuraci\u00f3n de esta ruta, asegura la completa localizaci\u00f3n del cliente independientemente de la distribuci\u00f3n de los HTML de la aplicaci\u00f3n Web o de si estos se generan autom\u00e1ticamente. En este \u00faltimo caso ser\u00eda necesario establecer la ruta absoluta de los directorios.","title":"Localizar la ruta del Applet Cliente @firma"},{"location":"markdown_strict/CF_manual-integrador/#reducir-las-opciones-de-configuracion","text":"Siempre debe ofrecerse al usuario el menor n\u00famero de opciones de configuraci\u00f3n posibles sobre el proceso de firma o cualquier otra operaci\u00f3n criptogr\u00e1fica. Son dos los aspectos que llevan a esta decisi\u00f3n: El cliente de firma com\u00fanmente se integra en las aplicaciones Web para un fin determinado como puede ser el env\u00edo de un formulario Web firmado, por ejemplo, por lo que es el sistema de backend el receptor de los datos generados y el que finalmente debe almacenarlos y gestionarlos. En este caso, es l\u00f3gico que sea el integrador el que decida la configuraci\u00f3n y condiciones de la operaci\u00f3n. La finalidad del usuario, no suele ser el propio uso del cliente, sino el acceso al servicio dado por la aplicaci\u00f3n que lo integra. De esta forma, los usuarios no tienen por qu\u00e9 conocer detalles de las operaciones criptogr\u00e1ficas que se realizan y ni siquiera conocimientos de los conceptos relacionados con la firma electr\u00f3nica. En estos casos conviene simplificarle la tarea y no llevarle a dudar acerca de la opci\u00f3n m\u00e1s acertada para su fin concreto.","title":"Reducir las opciones de configuraci\u00f3n"},{"location":"markdown_strict/CF_manual-integrador/#configuracion-y-uso-del-cliente-en-operaciones-unicas","text":"En el caso de que la ejecuci\u00f3n de las operaciones del cliente dependan de una configuraci\u00f3n introducida por el usuario o generada en tiempo de ejecuci\u00f3n, es recomendable el realizar la configuraci\u00f3n y ejecuci\u00f3n de la operaci\u00f3n criptogr\u00e1fica sin dar posibilidad de alterar el proceso. Por ejemplo, una forma de proceder ser\u00eda el inicializar y configurar el cliente nada m\u00e1s cargarlo (filtro de certificados, datos obtenidos de una ventana anterior\u2026) y establecer el resto de la configuraci\u00f3n a medida que el usuario inserta los datos (formato de firma, datos a firmar, certificado de usuario,\u2026) para, finalmente, s\u00f3lo ejecutar la operaci\u00f3n de firma. Este mecanismo tiene el inconveniente que cualquier interrupci\u00f3n en el cliente puede desechar toda esa informaci\u00f3n y terminar operando con una configuraci\u00f3n por defecto en lugar de la indicada por el usuario. En su lugar, es recomendable que, una vez se vaya a realizar la operaci\u00f3n criptogr\u00e1fica, sea cuando se configure el cliente. Como ejemplo, en una implementaci\u00f3n gen\u00e9rica JavaScript de invocaci\u00f3n al cliente esto ser\u00eda: // Inicializamos la configuraci\u00f3n para asegurar que no hay preestablecido // ning\u00fan valor de operaciones anteriores clienteFirma.initialize(); // Configuramos todos los par\u00e1metros del cliente, ya sea con datos directorios o // extra\u00eddos de la p\u00e1gina (formularios, contexto de la aplicaci\u00f3n,\u2026) clienteFirma.setSignatureFormat(\"CADES\"); clienteFirma.setSignatureAlgorithm(\"SHA1withRSA\"); clienteFirma.setFileuri(document.getElementById(\"fichero\").value); // Ejecutamos la operaci\u00f3n que corresponda clienteFirma.sign(); Este modo de ejecuci\u00f3n ayudar\u00e1 a evitar que, por ejemplo, el refrescar la p\u00e1gina Web con F5 se pierda la sincronizaci\u00f3n con la configuraci\u00f3n real del cliente con la que pueda verse en un momento determinado en la p\u00e1gina Web. El uso de la tecla F5 o el bot\u00f3n \u201cRefrescar Pantalla\u201d debe evitarse siempre cuando nos encontremos a medias de un procedimiento online. En el caso de que el entorno de despliegue pueda detectarlo, incluso es recomendable que se obligue al usuario a reiniciar el procedimiento completo.","title":"Configuraci\u00f3n y uso del cliente en operaciones \u00fanicas"},{"location":"markdown_strict/CF_manual-integrador/#funciones-y-metodos-en-la-interfaz-applet-del-cliente-firma-v3x-anadidos-respecto-a-versiones-anteriores","text":"","title":"Funciones y m\u00e9todos en la interfaz Applet del cliente @firma v3.x a\u00f1adidos respecto a versiones anteriores"},{"location":"markdown_strict/CF_manual-integrador/#public-string-getcertificatefinal-string-alias","text":"Obtiene el certificado X.509 correspondiente al alias proporcionado. El resultado es el certificado en Base64 delimitado por las cadenas ASCII -----BEGIN CERTIFICATE----- y -----END CERTIFICATE-----.","title":"public String getCertificate(final String alias)"},{"location":"markdown_strict/CF_manual-integrador/#public-string-getcertificatepublickeyfinal-string-alias","text":"Obtiene la clave p\u00fablica del certificado X.509 correspondiente al alias proporcionado. El resultado es una clave RSA en Base64 delimitado por las cadenas ASCII -----BEGIN RSA PUBLIC KEY----- y -----END RSA PUBLIC KEY-----.","title":"public String getCertificatePublicKey(final String alias)"},{"location":"markdown_strict/CF_manual-integrador/#public-string-getcertificates","text":"Obtiene todos los certificados del almac\u00e9n actual en una \u00fanica cadena en donde los elementos se dividen mediante el separador STRING_SEPARATOR definido como constante en el cliente. El formato individual de los certificados es el mismo que el devuelto por el m\u00e9todo public String getCertificate(final String alias). Tambi\u00e9n es posible obtener de forma segura un array con los certificados mediante el m\u00e9todo JavaScript getCertificates() definido en \u201cfirma.js\u201d.","title":"public String getCertificates()"},{"location":"markdown_strict/CF_manual-integrador/#public-string-getarraycertificates","text":"Obtiene todos los certificados del almac\u00e9n actual en un array unidimensional, con el mismo formato individual que el devuelto por el m\u00e9todo public String getCertificate(final String alias).","title":"public String[] getArrayCertificates()"},{"location":"markdown_strict/CF_manual-integrador/#public-string-getcertificatesalias","text":"Se ha considerado \u00fatil que el integrador, v\u00eda JavaScript, pueda obtener los alias del almac\u00e9n de certificados utilizado por el navegador Web activo. Este m\u00e9todo obtiene los alias de los certificados en una \u00fanica cadena separ\u00e1ndolos mediante la constante STRING_SEPARATOR definida en el cliente. Tambi\u00e9n es posible obtener de forma segura un array con los alias de los certificados mediante el m\u00e9todo JavaScript getCertificatesAlias() definido en \u201cfirma.js\u201d. Para m\u00e1s informaci\u00f3n, consulte la documentaci\u00f3n en formato JavaDoc.","title":"public String getCertificatesAlias()"},{"location":"markdown_strict/CF_manual-integrador/#public-string-getarraycertificatesalias","text":"Se ha considerado \u00fatil que el integrador, v\u00eda JavaScript, pueda obtener los alias del almac\u00e9n de certificados utilizado por el navegador Web activo. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public String[] getArrayCertificatesAlias()"},{"location":"markdown_strict/CF_manual-integrador/#public-void-setselectedcertificatealiasstring-certalias","text":"Como complemento al m\u00e9todo anterior, se ha considerado \u00fatil que el integrador, v\u00eda JavaScript, pueda establecer el alias del certificado a utilizar por el Applet en el navegador Web activo. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public void setSelectedCertificateAlias(String certAlias)"},{"location":"markdown_strict/CF_manual-integrador/#public-boolean-signdirectory","text":"Para las funciones de firma masiva, firma todos los archivos de un directorio seg\u00fan la configuraci\u00f3n establecida. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public boolean signDirectory()"},{"location":"markdown_strict/CF_manual-integrador/#public-boolean-initmassivesignature","text":"Inicializa una operaci\u00f3n de firma masiva program\u00e1tica. Esto toma la configuraci\u00f3n actual de certificado, formato de firma, algoritmo, modo, etc y la aplica a cada firma individual generara mediante los m\u00e9todos massiveSignatureData(), massiveSignatureFile() y massiveSignatureHash(). La operaci\u00f3n de firma masiva program\u00e1tica finaliza al invocarse al m\u00e9todo endMassiveSignature(). Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public boolean initMassiveSignature()"},{"location":"markdown_strict/CF_manual-integrador/#public-void-endmassivesignature","text":"Finaliza un proceso de firma masiva. Hasta que no se inicie un nuevo proceso mediante el m\u00e9todo initMassiveSignature() no ser\u00e1 posible realizar firmas/multifirmas mediante los m\u00e9todos massiveSignatureData(), massiveSignatureFile() y massiveSignatureHash(). Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public void endMassiveSignature()"},{"location":"markdown_strict/CF_manual-integrador/#public-string-massivesignaturedatastring-b64data","text":"Genera una firma/multifirma, dentro de un proceso de firma, a partir de los datos indicados en base 64. La operaci\u00f3n concreta realizada se debe indicar con setMassiveOperation(String). El m\u00e9todo devuelve el resultado de la operaci\u00f3n criptogr\u00e1fica. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public String massiveSignatureData(String b64Data)"},{"location":"markdown_strict/CF_manual-integrador/#public-string-massivesignaturefilestring-path","text":"Genera una firma/multifirma, dentro de un proceso de firma, a partir del fichero cuya ruta se ha indicado. La operaci\u00f3n concreta realizada se debe indicar con setMassiveOperation(String). El m\u00e9todo devuelve el resultado de la operaci\u00f3n criptogr\u00e1fica. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public String massiveSignatureFile(String path)"},{"location":"markdown_strict/CF_manual-integrador/#public-string-massivesignaturehashstring-b64hash","text":"Genera una firma/multifirma, dentro de un proceso de firma, a partir del hash indicado en base 64. Este m\u00e9todo requiere que se haya establecido la operaci\u00f3n de firma mediante el m\u00e9todo setMassiveOperation(String). El m\u00e9todo devuelve el resultado de la operaci\u00f3n criptogr\u00e1fica. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public String massiveSignatureHash(String b64Hash)"},{"location":"markdown_strict/CF_manual-integrador/#public-void-setmassiveoperationstring-massiveoperation","text":"Para las funciones de firma masiva, establece la operaci\u00f3n masiva a realizar en el proceso generado por el m\u00e9todo signDirectory() o los m\u00e9todos de firma masiva program\u00e1tica (massiveSignatureData(), massiveSignatureFile() y massiveSignatureHash()). Las operaciones masivas aceptadas son \u201cFIRMAR\u201d, \u201cCOFIRMAR\u201d, \u201cCONTRAFIRMAR_ARBOL\u201d y \u201cCONTRAFIRMAR_HOJAS\u201d. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public void setMassiveOperation(String massiveOperation)"},{"location":"markdown_strict/CF_manual-integrador/#public-void-setoriginalformatboolean-originalformat","text":"Para las funciones de firma masiva, indica si se debe respetar el formato de firma original para las operaciones de multifirma masiva o, si en cambio, se usar\u00e1 la configuraci\u00f3n de firma establecida para todas las firmas. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public void setOriginalFormat(boolean originalFormat)"},{"location":"markdown_strict/CF_manual-integrador/#public-string-getinputdirectorytosign","text":"Para las funciones de firma masiva, devuelve la ruta absoluta del directorio donde se ubican los ficheros a ser firmados de forma masiva. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public String getInputDirectoryToSign()"},{"location":"markdown_strict/CF_manual-integrador/#public-void-setinputdirectorytosignstring-directory","text":"Para las funciones de firma masiva, establece el directorio de donde se tomar\u00e1n los ficheros de firma y datos para la operaci\u00f3n de firma masiva. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public void setInputDirectoryToSign(String directory)"},{"location":"markdown_strict/CF_manual-integrador/#public-string-getoutputdirectorytosign","text":"Para las funciones de firma masiva, devuelve la ruta absoluta del directorio donde se almacenar\u00e1n las firmas resultado de la operaci\u00f3n de firma masiva. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public String getOutputDirectoryToSign()"},{"location":"markdown_strict/CF_manual-integrador/#public-void-setoutputdirectorytosignstring-directory","text":"Para las funciones de firma masiva, establece el directorio donde se depositar\u00e1n las firmas masivas de los archivos situados en InputDirectoryToSign. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public void setOutputDirectoryToSign(String directory)"},{"location":"markdown_strict/CF_manual-integrador/#public-void-setinincludeextensionsstring-extensions","text":"Para las funciones de firma masiva, define las extensiones que se incluir\u00e1n en la firma de directorios. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public void setInIncludeExtensions(String extensions)"},{"location":"markdown_strict/CF_manual-integrador/#public-void-setinrecursivedirectorysignboolean-recursivesigndir","text":"Para las funciones de firma masiva, establece si la firma de directorios se efectuar\u00e1 de forma recursiva o no. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public void setInRecursiveDirectorySign(boolean recursiveSignDir)"},{"location":"markdown_strict/CF_manual-integrador/#public-void-setfileuribase64string-uri","text":"Establece los datos contenidos en el fichero indicado (en donde se encontrar\u00e1n codificados en base 64), como los datos de entrada para las operaciones criptogr\u00e1ficas y establece la ruta introducida como ruta de entrada. El contenido del fichero se interpretar\u00e1 siempre como datos en base 64 no realiz\u00e1ndose la comprobaci\u00f3n previa de los mismos.","title":"public void setFileuriBase64(String uri)"},{"location":"markdown_strict/CF_manual-integrador/#public-string-loadfilepathstring-title-string-exts-string-description","text":"Muestra un di\u00e1logo modal para la selecci\u00f3n de un fichero del que se recuperar\u00e1 su ruta completa. Para m\u00e1s informaci\u00f3n, consulte la informaci\u00f3n en formato JavaDoc.","title":"public String loadFilePath(String title, String exts, String description)"},{"location":"markdown_strict/CF_manual-integrador/#addrfc2254certificatefilterstring-subjectfilter-string-issuerfilter-boolean-signaturekeyusage","text":"Agrega un filtro al listado de filtros de certificados de usuario. Los filtros limitar\u00e1n los certificados que se muestran al usuario para su selecci\u00f3n a s\u00f3lo aquellos que cumplan, al menos, uno de los filtros definidos. Para m\u00e1s informaci\u00f3n consulte el apartado Filtros de certificados.","title":"addRFC2254CertificateFilter(String subjectFilter, String issuerFilter, Boolean signatureKeyUsage)"},{"location":"markdown_strict/CF_manual-integrador/#public-void-resetfilters","text":"Elimina todos los filtros de certificado definidos hasta el momento. Para m\u00e1s informaci\u00f3n consulte el apartado Filtros de certificados.","title":"public void resetFilters()"},{"location":"markdown_strict/CF_manual-integrador/#public-void-setmandatorycertificateboolean-mandatory","text":"Establece que debe seleccionarse autom\u00e1ticamente un certificado de firma si este es el \u00fanico del almac\u00e9n de certificados o, en caso de establecer filtros, si es el \u00fanico que los cumple. Para m\u00e1s informaci\u00f3n consulte el apartado Filtros de certificados.","title":"public void setMandatoryCertificate(boolean mandatory)"},{"location":"markdown_strict/CF_manual-integrador/#casos-problematicos-de-despliegue-e-integracion-del-cliente","text":"","title":"Casos problem\u00e1ticos de despliegue e integraci\u00f3n del cliente"},{"location":"markdown_strict/CF_manual-integrador/#despliegue-del-cliente-en-servidores-web-que-requieren-identificacion-de-los-usuarios-mediante-certificado-cliente","text":"","title":"Despliegue del cliente en servidores Web que requieren identificaci\u00f3n de los usuarios mediante certificado cliente"},{"location":"markdown_strict/CF_manual-integrador/#applets-de-java-y-autenticacion-con-certificado-cliente","text":"En los servidores en los que se requiere autenticaci\u00f3n cliente (autenticaci\u00f3n por certificado cliente) para acceder a un contenido, los Applets Java no son una excepci\u00f3n por lo que el acceso por parte de Java puede derivar en un error de conexi\u00f3n, ya que las conexiones que establece son independientes del navegador web. El Plugin de Java contempla esta posibilidad, y gestiona la autenticaci\u00f3n por certificado cliente de forma independiente de los Applets que ejecute, por lo que estos no deben implementar ning\u00fan cambio para adaptarse a estos entornos, siendo todo el proceso completamente transparente para ellos. El almac\u00e9n que usa el Plugin de Java para seleccionar el certificado en muestra al servidor Web var\u00eda seg\u00fan la configuraci\u00f3n cliente, pero sigue en todos los casos el mismo proceso: Intenta acceder primero al almac\u00e9n nativo del navegador Web (MS-CAPI, Apple KeyRing o Mozilla/Firefox NSS). Si por problemas de configuraci\u00f3n el almac\u00e9n nativo no pudiese ser accedido por el Plugin de Java, se selecciona el almac\u00e9n propio del JRE. Se pide al usuario que seleccione uno de los certificados del almac\u00e9n finalmente seleccionado, que ser\u00e1 el que se env\u00ede al servidor Web. La clasificaci\u00f3n de los navegadores Web por almac\u00e9n utilizado para los certificados y por sistema operativo es la siguiente: Almac\u00e9n de certificados MS-CAPI Windows Internet Explorer Google Chrome Apple Safari Opera Almac\u00e9n de certificados del llavero de Apple OS X Mac OS X Apple Safari Google Chrome Opera Internet Explorer Almac\u00e9n de certificados Mozilla / Firefox (NSS) Windows Mozilla / Firefox Linux / Solaris Mozilla / Firefox Google Chrome Opera A continuaci\u00f3n, detallamos la configuraci\u00f3n adicional necesaria en cada uno de los casos para el correcto funcionamiento en servidores Web que soliciten certificado cliente. Esta configuraci\u00f3n no es espec\u00edfica para el Cliente @firma, sino que ser\u00e1 necesaria para cualquier otro Applet de Java que establezca conexiones independientes del navegador con el servidor Web:","title":"Applets de Java y Autenticaci\u00f3n con Certificado Cliente"},{"location":"markdown_strict/CF_manual-integrador/#ms-capi","text":"No es necesario ning\u00fan proceso adicional de configuraci\u00f3n.","title":"MS-CAPI"},{"location":"markdown_strict/CF_manual-integrador/#mozilla-firefox-nss","text":"Es necesario instalar previamente en el entorno de ejecuci\u00f3n de Java las bibliotecas JSS (Netscape Java Security Services), atendiendo a las siguientes precauciones: Ha de seguirse el proceso de instalaci\u00f3n exactamente como se describe en la documentaci\u00f3n de Java: http://java.sun.com/j2se/1.5.0/docs/guide/deployment/deployment-guide/keystores.html . Las instrucciones publicadas por Sun Microsystems / Oracle est\u00e1n desactualizadas y no aplican para las \u00faltimas versiones de Mozilla Firefox, para las cuales deben seguirse los siguientes pasos: Copiar el fichero jss4.jar al directorio de extensiones del entorno de ejecuci\u00f3n de Java (JRE) en uso: %JAVA_HOME%\\lib\\ext en sistemas Windows $JAVA_HOME/lib/ext en sistemas basados en UNIX (Linux, Solaris, Mac OS X) Copiar el fichero la biblioteca nativa de JSS en el directorio principal de bibliotecas del sistema operativo. Es necesario cerciorarse de que la biblioteca que copiemos corresponda con la versi\u00f3n y arquitectura de nuestro sistema operativo: En sistemas Windows, el fichero jss4.dll debe copiarse al directorio %SystemRoot%\\system32 En sistemas Linux y Solaris, el fichero jss4.so debe copiarse al directorio /lib o al directorio /usr/lib En sistemas Mac OS X, el fichero jss4.dylib o el fichero jss4.so (dependiendo de la compilaci\u00f3n utilizada) debe copiarse al directorio /lib o al directorio /usr/lib Hemos tambi\u00e9n de asegurarnos de que la versi\u00f3n instalada de JSS sea compatible con nuestra versi\u00f3n de Mozilla / Firefox. Consulte atentamente la documentaci\u00f3n de los productos antes de proceder a instalarlos. Firefox 3 solo es completamente compatible con JSS 4.3.2 y superiores: https://developer.mozilla.org/En/JSS/4_3_ReleaseNotes , pero aun presenta ciertos problemas de compatibilidad en sistemas Windows. En cualquier caso, si encuentra dificultades, pruebe a instalar siempre la versi\u00f3n m\u00e1s actualizada. JSS puede descargarse de forma libre desde: ftp://ftp.mozilla.org/pub/mozilla.org/security/jss/releases/ No obstante, para ciertas versiones de JSS, la Comunidad Mozilla no distribuye binarios, sino \u00fanicamente el c\u00f3digo fuente.","title":"Mozilla / Firefox (NSS)"},{"location":"markdown_strict/CF_manual-integrador/#almacen-propio-de-java","text":"Como se ha comentado anteriormente, cuando el Plugin del entorno de ejecuci\u00f3n de Java (JRE) no puede acceder al almac\u00e9n del navegador Web, solicita al usuario la selecci\u00f3n de un certificado de su propio almac\u00e9n. El principal problema de esta opci\u00f3n es que JRE no accede a los m\u00f3dulos PKCS#11 o CSP del sistema, por lo que los certificados residentes en tarjetas inteligentes (incluido DNIe) o dispositivos externos (USB, etc.) no son accesibles. Para comprobar los certificados existentes en el almac\u00e9n de Java e importar certificados en \u00e9l, se pueden seguir los siguientes pasos (sistemas operativos Windows): Abrir la opci\u00f3n de \u201cJava\u201d en el Panel de Control y seleccionar la pesta\u00f1a \u201cSeguridad\u201d: < Figura 8: Panel de control de Java Pulsar el bot\u00f3n \u201cCertificados\u201d y seleccionar el tipo de certificado como \u201cAutenticaci\u00f3n de cliente\u201d, dentro de la pesta\u00f1a \u201cUsuario\u201d. < Figura 9: Certificados del almac\u00e9n de Java Los certificados mostrados en la lista son los disponibles por el Plugin de Java para autenticar a un Applet ante un servidor Web que requiere certificado cliente. Podemos importar nuevos certificados usando el bot\u00f3n \u201cImportar\u201d. Para realizar las mismas comprobaciones en otros sistemas operativos, consulte la documentaci\u00f3n del entorno de Java instalado (JRE) y del Java Plugin.","title":"Almac\u00e9n propio de Java"},{"location":"markdown_strict/CF_manual-integrador/#alternativa-de-despliegue","text":"Una variante sobre lo arriba expuesto es el no publicar el cliente @firma al completo en un servidor con autenticaci\u00f3n con certificado cliente, tan s\u00f3lo las p\u00e1ginas Web que dan acceso al mismo. Es posible situar, tanto el Applet de carga como los ficheros instalables en un segundo servidor (o una ruta del mismo configurada para no pedir certificados). Con esto obtenemos que: P\u00e1ginas Web: En servidor con conexi\u00f3n SSL y autenticaci\u00f3n con certificado cliente. Binarios Java: En servidor con conexi\u00f3n SSL o sin ella (seg\u00fan se desee) y sin autenticaci\u00f3n. El principal beneficio de esta alternativa est\u00e1 claro, no es necesario que los binarios java se autentiquen contra el servidor, por lo que no es necesario que el usuario configure ning\u00fan certificado en el repositorio de Java. Para configurar este entorno basta con configurar la variables base del fichero de despliegue \u201c constantes.js \u201d. Esta variable apunta al directorio en el que se sit\u00faan los Applets con las construcciones del Cliente. Deber\u00e1 establecerse para que apunte a la ruta en la que se sit\u00faa este fichero (en un servidor que no requiere autenticaci\u00f3n cliente).","title":"Alternativa de despliegue"},{"location":"markdown_strict/CF_manual-integrador/#problema-con-el-objeto-html-file-en-los-nuevos-navegadores","text":"La nueva generaci\u00f3n de navegadores Web (Internet Explorer 8, Firefox 3,\u2026) ha restringido el comportamiento del objeto File de HTML por motivos de seguridad. La finalidad de este componente es \u00fanicamente el permitir la carga de ficheros a un servidor. Sin embargo, antes se le permit\u00eda obtener a este servidor excesiva informaci\u00f3n sobre el sistema del usuario ya que, determinados navegadores, mediante JavaScript, proporcionaban la ruta completa en la que estaba almacenado el fichero. Los nuevos navegadores no permiten obtener m\u00e1s que el nombre del fichero o, a lo sumo, este y una ruta gen\u00e9rica y no descriptiva. Esto podr\u00eda inhabilitar la pr\u00e1ctica que han seguido muchos integradores del cliente @firma, que utilizaban este componente para, adem\u00e1s de la carga del fichero, obtener la ruta del mismo para as\u00ed utilizar el m\u00e9todo setFileuri() y operar con el fichero. Con objeto de solventar en parte este problema, se ha incluido en el Applet cliente el m\u00e9todo loadFilePath() que muestra al usuario un di\u00e1logo para la selecci\u00f3n de un fichero de datos y devuelve la ruta completa de ese fichero. Con esto el usuario es libre de usar la ruta con el m\u00e9todo setFileuri() para realizar la firma del fichero y/o mostr\u00e1rsela al usuario en un cuadro de texto, por ejemplo. Puede encontrarse la descripci\u00f3n completa del m\u00e9todo en el JavaDoc del cliente @firma. Sin embargo, al igual que no permite obtener la ruta del fichero seleccionado, el objeto File no permite establecer de forma externa una ruta de fichero para su posterior subida al servidor, ya que esto posibilitar\u00eda a cualquier p\u00e1gina Web maliciosa a obtener ficheros del disco duro del usuario sin su consentimiento. Esto imposibilita el tomar la ruta del fichero mediante el m\u00e9todo loadFilePath() para luego cargarlo con un objeto File . La soluci\u00f3n a este problema puede llevarse a cabo mediante el uso de diferentes mecanismos, cada cual ajustado al entorno, el fin y las tecnolog\u00edas con las que cuente el integrador del sistema. Una soluci\u00f3n simple ser\u00eda, por ejemplo, el leer el fichero mediante el m\u00e9todo getFileBase64Encoded() y anexar la cadena en base 64 resultante como campo oculto al formulario del usuario (configurar con el m\u00e9todo POST). La ruta del fichero se habr\u00e1 obtenido previamente con la ayuda del m\u00e9todo loadFilePath() y especificado al cliente mediante setFileuri(). ADVERTENCIA : Si su sistema requiere o permite que el usuario env\u00ede ficheros mayores de 4 megas de tama\u00f1o, consulte el apartado Procedimiento de carga para ficheros mayores de 4MB .","title":"Problema con el objeto HTML File en los nuevos navegadores"},{"location":"markdown_strict/CF_manual-integrador/#procedimiento-de-carga-para-ficheros-mayores-de-4mb","text":"Al ejecutar el Cliente @firma en un entorno con Java 6u10 o superior y el plugin de nueva generaci\u00f3n activado (configuraci\u00f3n por defecto), nos encontramos con que no es posible convertir ficheros de datos mayores de 4MB a cadenas Base64. Esta operaci\u00f3n es necesaria para posteriormente adjuntar los datos firmados (o la firma impl\u00edcita generada) al formulario Web a trav\u00e9s del cual se enviar\u00e1 la informaci\u00f3n al servidor. Esta limitaci\u00f3n tambi\u00e9n puede afectar a la generaci\u00f3n de firmas XML impl\u00edcitas de ficheros mayores de 4MB. Este problema no tiene soluci\u00f3n actualmente pero es posible realizar algunas pr\u00e1cticas con las que es posible evitarlo en caso de que el propio fichero de datos no sea mayor de este tama\u00f1o. Eval\u00fae si es necesario que su sistema firme los ficheros adjuntos a una transacci\u00f3n o si basta con firmar la propia transacci\u00f3n. Esto podr\u00eda hacerse mediante un XML en el que se almacenen los datos de la transacci\u00f3n (identificador, los datos proporcionados por el usuario, nombre de los ficheros adjuntos y su hash,\u2026). Si su sistema realiza firmas de ficheros seleccionados por el usuario y se van a admitir ficheros mayores de 4MB, eval\u00fae el uso de firmas binarias (CAdES), que son de menor tama\u00f1o, en lugar de firmas XML (XAdES). El problema comentado puede afectar a la generaci\u00f3n de firmas XML (XMLdSig / XAdES) de ficheros binarios mayores de 4MB. Si es necesario el env\u00edo de ficheros mayores de 4MB al servidor, deber\u00e1n enviarse mediante el componente File de los formularios HTML. Para esto, tendremos que firmar previamente los datos y obligar a que sea el propio usuario quien seleccione los ficheros de firma generados. Se propone el siguiente modelo de aplicaci\u00f3n Web: Mostrar al usuario el formulario Web con la informaci\u00f3n que debe rellenar. Esto puede hacerse en una \u00fanica p\u00e1gina Web o en varias si la cantidad de datos lo requiere. En el punto que corresponda del formulario, se dar\u00e1 la opci\u00f3n al usuario de seleccionar los ficheros que desea adjuntar al mismo. Esto abrir\u00e1 una nueva ventana en donde se cargar\u00e1 el Cliente @firma y, mediante el m\u00e9todo descrito en el apartado 13.2 Problema con el objeto HTML File en los nuevos navegadores , se dar\u00e1 al usuario la posibilidad de firmar los ficheros. En este caso, en lugar de adjuntar el resultado de la firma al formulario Web, se le permitir\u00e1 almacenarla en disco, notific\u00e1ndole que esta es la firma electr\u00f3nica generada que posteriormente se deber\u00e1 adjuntar al formulario y que, si lo desea, puede conservar como parte del resguardo de la transacci\u00f3n. En este paso se pueden firmar tantos ficheros como se deseen. Consulte el apartado 9.1 Guardar la firma en un fichero para conocer como almacenar las firmas en el sistema del usuario. De vuelta al formulario principal y al final del mismo se mostrar\u00e1 un bot\u00f3n Aceptar que redirigir\u00e1 al usuario a una nueva p\u00e1gina en la que se cargar\u00e1 el Cliente @firma y se mostrar\u00e1 el resumen de los datos del formulario para que confirme que son v\u00e1lidos. Tambi\u00e9n en esta p\u00e1gina se mostrar\u00e1n los componentes necesarios de tipo File de HTML para que el usuario cargue los ficheros de firma generados en el paso anterior (y los documentos firmados en caso de firmas expl\u00edcitas). En esta ocasi\u00f3n no se utilizar\u00e1 el Cliente para cargar los ficheros de firma, \u00fanicamente el componente File Tras revisar los datos y seleccionar los ficheros necesarios, el usuario podr\u00e1 enviar el formulario para finalizar el tr\u00e1mite. Al pulsar el bot\u00f3n Enviar, se firmar\u00e1 la transacci\u00f3n con el Cliente @firma y seguidamente se enviar\u00e1 el formulario con esta firma. El concepto de transacci\u00f3n deber\u00e1 definirse para cada sistema. Puede ser, por ejemplo, un XML que contenga todos los datos del formulario y la relaci\u00f3n de ficheros adjuntos (nombres y hashes). NOTA: En sistemas con el Plugin de pr\u00f3xima generaci\u00f3n desactivado el l\u00edmite se encuentra en torno a los 50MB. Sin embargo, no debe presuponerse que el usuario operar\u00e1 desde este entorno.","title":"Procedimiento de carga para ficheros mayores de 4MB"},{"location":"markdown_strict/CF_manual-integrador/#mensajes-de-confirmacion-durante-el-proceso-de-firma-masiva","text":"A partir del Cliente @firma v3.3, cualquier acceso a disco como leer y guardar datos requiere del consentimiento expreso del usuario. Este procedimiento no afecta a la mec\u00e1nica de las aplicaciones que integran el Cliente, por lo que no requerir\u00e1n ning\u00fan tipo de modificaci\u00f3n, salvo en casos concretos de firma masiva de datos. El proceso de firma masiva program\u00e1tica dispone de un m\u00e9todo para la firma de ficheros, aseg\u00farese de utilizar este m\u00e9todo ( massiveSignatureFile() ) si va a firmar ficheros en disco, y no realizar la carga del fichero y luego firmar los datos mediante el m\u00e9todo correspondiente ( massiveSignatureData() ). Por otra parte, el proceso de firma masiva program\u00e1tica no dispone de un m\u00e9todo propio para el guardado de las firmas en disco. En anteriores versiones del Cliente era posible utilizar los m\u00e9todos comunes de guardado para almacenar las firmas pero a partir de la versi\u00f3n 3.3 esto supone que se pida confirmaci\u00f3n para el guardado de cada firma individual. Por motivos de seguridad, este comportamiento no puede evitarse. Si se desea firmar ficheros y almacenar el resultado en disco, consulte el apartado \u201cFirma/multifirma de directorios\u201d en donde se detalla el mecanismo de firma de directorios. Este mecanismo permitir\u00eda firmar y almacenar todos los ficheros sin necesidad de que el usuario lo apruebe individualmente.","title":"Mensajes de confirmaci\u00f3n durante el proceso de firma masiva"},{"location":"markdown_strict/CF_manual-integrador/#siglas","text":"CAdES CMS Advanced Electronic Signature CMS Cryptographic Message Standard CSP Cryptographic Service Provider (proveedor de servicios criptogr\u00e1ficos) DNIe DNI electr\u00f3nico JAR Java Archive JCE Java Cryptography Extension JRE Java Runtime Environment PDF Portable Document Format PKCS#1 Public Key Cryptography Standard number 1 (est\u00e1ndar de criptograf\u00eda de clave p\u00fablica n\u00ba 1) PKCS#7 Public Key Cryptography Standard number 7 (est\u00e1ndar de criptograf\u00eda de clave p\u00fablica n\u00ba 7) PKCS#11 Public Key Cryptography Standard number 11 (est\u00e1ndar de criptograf\u00eda de clave p\u00fablica n\u00ba 11) PKCS#12 Public Key Cryptography Standard number 12 (est\u00e1ndar de criptograf\u00eda de clave p\u00fablica n\u00ba 12) PKI Public Key Infrastructure SHA Secure Hash Algorithm URI Uniform Resource Identifier (Identificador Uniforme de Recursos) URL Uniform Resource Locator (Localizador Uniforme de Recursos) WYSIWYS What You See Is What You Sign (lo que ves es lo que firmas) XAdES XML Advanced Electronic Signature (firma electr\u00f3nica avanzada XML) XML eXtensible Markup Language (Lenguaje de marcas extensible) XMLDSig XML Digital Signature (firma digital XML)","title":"Siglas"},{"location":"markdown_strict/CF_manual-integrador/#documentos-de-referencia","text":"[JAVADOC] Documentaci\u00f3n de los m\u00e9todos p\u00fablicos del Applet de Firma en la carpeta javadoc.","title":"Documentos de Referencia"},{"location":"markdown_strict/CF_manual-integrador/#anexo-a-formatos-de-firma-binaria-generica-soportados-por-el-cliente","text":"Matriz de formatos soportados en formatos binarios (CMS y CAdES) Adicionalmente, deben observarse las siguientes aclaraciones sobre los formatos: Las firmas CMS generadas son compatibles PKCS#7 Las firmas CAdES generadas son compatibles con la especificaci\u00f3n CAdES-BES o CAdES-EPES. Algoritmos de huella digital El cliente de firma soporta (con las salvedades indicadas en las notas posteriores) la aplicaci\u00f3n de los siguientes algoritmos de huella digital para las firmas binarias: SHA-1, SHA-256, SHA-384, SHA-512. Uso de los par\u00e1metros de funcionamiento El modo de uso del cliente para establecer los par\u00e1metros de funcionamiento del Cliente consiste en realizar llamadas a ciertos m\u00e9todos del Applet indicando cadenas de texto que identifican los valores que queremos establecer. En particular, se indican los formatos y sub-formatos (modos) de firma mediante unas cadenas de texto espec\u00edficas. Adem\u00e1s, cada formato o sub-formato introducido va asociado a una extensi\u00f3n de fichero (que define su tipo), extensiones que se usan como filtro de entrada o de salida a la hora de abrir o salvar archivos. Las cadenas de identificaci\u00f3n de formato deben usarse con la llamada JavaScript: clienteFirma.setSignatureFormat(String format) Y las cadenas de sub-formato con la llamada JavaScript: clienteFirma.setSignatureMode(String mode) Ambas funciones est\u00e1n documentadas en el JavaDoc del Applet, Rem\u00edtase a estos documentos para m\u00e1s informaci\u00f3n. El orden de llamada de ambos m\u00e9todos no es significativo. Par\u00e1metros de funcionamiento Cadenas (se ignoran las diferencias entre may\u00fasculas y min\u00fasculas) de identificaci\u00f3n de formato (varias alternativas por cada uno de ellos, por flexibilidad de uso, se muestran separadas por \u201c/\u201d). CMS \"CMS\" / \"PKCS7\" / \"PKCS#7\" CAdES \"CAdES\" / \"CAdES-BES\" Cadenas de identificaci\u00f3n del modo de firma (insensibles a may\u00fasculas/min\u00fasculas). Firma Expl\u00edcita \"Explicit\" Firma Impl\u00edcita \"Implicit\" Ficheros de entrada (todos: CMS y CAdES, Impl\u00edcitas y Expl\u00edcitas) Binarios (*.*) Ficheros de salida CMS y CAdES Ficheros de firma ASN.1 (*.csig) Cofirmas cruzadas entre CMS y CAdES Las cofirmas de un documento dan como resultado dos firmas sobre este mismo documento que se encuentran a un mismo nivel, es decir, que ninguna envuelve a la otra ni una prevalece sobre la otra. A nivel de formato interno, esto quiere decir que cuando cofirmamos un documento ya firmado previamente, esta firma previa no se modifica. Si tenemos en cuenta que CAdES es en realidad un subconjunto de CMS, el resultado de una cofirma CAdES sobre un documento firmado previamente con CMS (o viceversa), son dos firmas independientes, una en CAdES y otra en CMS. Dado que todas las firmas CAdES son CMS pero no todas las firmas CMS son CAdES, el resultado global de la firma se adec\u00faa al est\u00e1ndar m\u00e1s amplio, CMS en este caso. Otro efecto de compatibilidad de formatos de las cofirmas con varios formatos de un \u00fanico documento es la ruptura de la compatibilidad con PKCS#7, ya que, aunque las firmas generadas por el cliente mediante CMS son compatibles con PKCS#7, las generadas con CAdES no lo son, por lo que, en el momento que se introduzca una estructura CAdES, se perder\u00e1 la compatibilidad PKCS#7 en el global de la firma. Formato CMS de Firma Digital Al igual que otros elementos CMS que describiremos posteriormente, la estructura de una firma CMS viene definida en la RFC 3852, aunque en este caso en especial, y para mantener la compatibilidad con PKCS#7, el elemento signedData especificado en la RFC indicada se encuentra limitado. La estructura empleada por el cliente de firma es la siguiente: Figura 10: Estructura PKCS#7 SignedData CMS Version . Indica las diferentes versiones del mensaje. Para que la compatibilidad con PKCS#7 se mantenga debe ser 0. Digest Algorithm Identifier . Identifica el algoritmo utilizado. ContentInfo . Secuencia de par\u00e1metros que identifican el contenido del mensaje. Comprende el tipo de contenido ( contentType ) que en nuestro caso ser\u00e1 Data y content que se refiere a la secuencia de bytes correspondiente a los datos mismos. Extended Certificates And Certificates . Opcional. Permite especificar una cadena de certificados para la validaci\u00f3n de los distintos certificados firmantes. Certificate revocation Lists . Opcional. Permite especificar las CRL para los certificados utilizados. Signer Info . Estructura que especifica la informaci\u00f3n de los diferentes firmantes del contenido del mensaje. Se subdividen en los siguientes campos: Versi\u00f3n . Especifica la versi\u00f3n de esta estructura y ser\u00e1 siempre 1 para PKCS#7. Issuer And Serial Number . Especifica el certificado usado mediante el emisor y n\u00famero de serie de \u00e9ste. Digest Algorithm Identifier . Identifica el algoritmo utilizado. Authenticated Attributes . Opcional. Secuencia de atributos firmados que especifican ciertos par\u00e1metros importantes para la interpretaci\u00f3n del contenido. Si el tipo del contenido fuese distinto de Data , ser\u00eda obligatorio incorporar como atributos el tipo empleado y el hash del contenido, pero en nuestro caso esto no es posible ya que siempre tendremos el ContentType Data . Digest Encryption Algorithm . Describe que algoritmo se ha usado en la encriptaci\u00f3n de la firma y resumen del documento. Encrypted Digest . Hash del mensaje encriptado empleando la clave privada del certificado y el algoritmo especificado antes Unauthenticated Attributes . Opcional. Atributos no firmados definidos en PKCS#9, como por ejemplo las contrafirmas. Formato de sobre digital CMS encriptado La estructura vendr\u00eda definida como sigue: Figura 16: Estructura PKCS#7 EncryptedData CMS Version . Ser\u00e1 0 si no existen UnprotectedAtributes o 2 en caso contrario. Encrypted Content Info . Subestructura que se define mediante los siguientes campos: Content Type . Define el tipo de contenido. Content Encryption Algorithm . Define el algoritmo utilizado para encriptar el contenido. Encrypted Content . Contenido encriptado usando el algoritmo especificado anteriormente. Unprotected Attributes . Opcional. Secuencia de par\u00e1metros auxiliares definidos por otros est\u00e1ndares. Como se puede apreciar, esta estructura no contiene la clave de cifrado ni ning\u00fan m\u00e9todo de transmisi\u00f3n de esta, por lo que si se usa como mensaje se debe buscar un m\u00e9todo para compartir una clave privada. Formato de Sobre Digital CMS Envuelto Esta estructura se identifica con el sobre digital identificado en la RFC 3852 como Enveloped CMS y sigue la siguiente estructura: Figura 17: Estructura PKCS#7 EnvelopedData CMS Version . Viene determinada en funci\u00f3n de los par\u00e1metros presentes en la estructura generada. Para que fuese compatible con la estructura especificada en PKCS#7 deber\u00eda ser 0, pero quitar\u00eda mucha de las opciones m\u00e1s importantes que incorpora esta soluci\u00f3n. Originator Info . Define el emisor del mensaje. Aunque es opcional, su presencia viene determinada por los algoritmos utilizados internamente. Recipient Info . Define los receptores v\u00e1lidos para el mensaje actual. Por requerimientos de la tecnolog\u00eda utilizada ser\u00e1n de tipo keytransport , ya que necesitamos incorporar la clave sim\u00e9trica utilizada en el cifrado. Se distinguen los siguientes campos: Version . Puede ser 0 o 2 en funci\u00f3n de los datos incluidos en Recipient Identifier . En nuestro caso ser\u00e1 2. Key Encryption Algorithm . Define el algoritmo por el cual se ha encriptado la clave sim\u00e9trica adjunta. Se utilizan algoritmos asim\u00e9tricos y en nuestro caso RSA. Encrypted Key . Clave utilizada para encriptar el contenido del mensaje cifrada utilizando el algoritmo anteriormente definido. Encrypted Content Info . Estructura igual que la contenida en CMS encriptado: Content Type . Define el tipo de contenido. Content Encryption Algorithm . Define el algoritmo utilizado para encriptar el contenido. Encrypted Content . Contenido encriptado usando el algoritmo especificado especificado. Unprotected Attributes . Conjunto de atributos no cifrados definidos o necesarios por otros est\u00e1ndares. Formato de sobre digital CMS Firmado y envuelto Esta estructura es un atajo para crear un CMS envuelto en cuyo interior se encuentra un mensaje firmado. Esto significa que la \u00fanica diferencia en cuanto a la estructura es que el conten type de la subestructura Encrypted Content Info ser\u00eda un Signed Data como el definido en el CMS Firmado. La diferencia fundamental es que los par\u00e1metros a especificar no son tan libres, ya que por ejemplo es obligatorio especificar el emisor, ya que tenemos que firmar el mensaje con su certificado. Este es un ejemplo de c\u00f3mo se pueden anidar estructuras CMS. Por ejemplo, podr\u00edamos insertar un CMS envuelto en un CMS firmado (obviando la utilidad que pudiese tener o no) simplemente generando el CMS envuelto y especificando el resultado de la salida como datos de entrada para la creaci\u00f3n del CMS firmado, y as\u00ed sucesivamente. Figura 18: Estructura PKCS#7 SignedAndEnvelopedData Formato de sobre digital CMS Autenticado Esta estructura se identifica con el sobre digital identificado en la RFC 3852 como Authenticated CMS y sigue la siguiente estructura: < Figura 19: Estructura CMS AuthenticatedData CMS Version. Viene determinada en funci\u00f3n de los par\u00e1metros presentes en la estructura generada. Para que fuese compatible con la estructura especificada en PKCS#7 deber\u00eda ser 0, pero quitar\u00eda mucha de las opciones m\u00e1s importantes que incorpora esta soluci\u00f3n. Originator Info . Define el emisor del mensaje. Aunque es opcional, su presencia viene determinada por los algoritmos utilizados internamente. Recipient Info . Define los receptores v\u00e1lidos para el mensaje actual. Por requerimientos de la tecnolog\u00eda utilizada ser\u00e1n de tipo keytransport , ya que necesitamos incorporar la clave sim\u00e9trica utilizada en el cifrado. Se distinguen los siguientes campos: Version . Puede ser 0 o 2 en funci\u00f3n de los datos incluidos en Recipient Identifier . En nuestro caso ser\u00e1 2. RecipientIdentifier: Identifica al usuario al que va dirigido el sobre. Key Encryption Algorithm . Define el algoritmo por el cual se ha encriptado la clave sim\u00e9trica adjunta. Se utilizan algoritmos asim\u00e9tricos y en nuestro caso RSA. Encrypted Key . Clave utilizada para encriptar el contenido del mensaje cifrada utilizando el algoritmo anteriormente definido. MessageAuthenticationCodeAlgorithm : Define el algoritmo con el que se crear\u00e1 la MAC. DigestAlgorithmIdentifier : Identifica el algoritmo utilizado. ContentInfo : Secuencia de par\u00e1metros que identifican el contenido del mensaje. Comprende el tipo de contenido ( contentType ) que en nuestro caso ser\u00e1 Data y content que se refiere a la secuencia de bytes correspondiente a los datos mismos. AuthenticatedAtributes: Opcional. Secuencia de atributos firmados que especifican ciertos par\u00e1metros importantes para la interpretaci\u00f3n del contenido. Si el tipo del contenido fuese distinto de Data , ser\u00eda obligatorio incorporar como atributos el tipo empleado y el hash del contenido, pero en nuestro caso esto no es posible ya que siempre tendremos el ContentType Data . MessageAuthenticationCode: C\u00f3digo que autentifica el mensaje. Unauthenticated Attributes . Opcional. Atributos no firmados definidos en PKCS#9, como por ejemplo las contrafirmas.","title":"Anexo A. Formatos de firma binaria gen\u00e9rica soportados por el cliente"},{"location":"markdown_strict/CF_manual-integrador/#anexo-b-configuracion-especifica-para-el-formato-cades","text":"El Cliente de firma genera firmas CAdES compatibles por estructura y atributos tanto con la versi\u00f3n 1.7.3 como con la 1.8.1, pero en ambas versiones, el atributo Signing Certificate se puede generar de dos formas distintas, la V1 y la V2. Por defecto, y para una mayor compatibilidad, este atributo se genera de la forma V1 cuando la firma se genera con un algoritmo de firma cuya operaci\u00f3n de huella digital es SHA1 y con la forma V2 cuando se usa cualquier otro algoritmo. Este comportamiento se puede variar indicando expl\u00edcitamente si deseamos usar o no la versi\u00f3n 2 del atributo. Esto se har\u00e1 mediante el m\u00e9todo del Applet (que es posible invocar v\u00eda JavaScript): clienteFirma.addExtraParam(String paramName, String paramValue), y el siguiente uso: clienteFirma.addExtraParam(\u201csigningCertificateV2\u201d, \u201c true \u201d); Desde la invocaci\u00f3n de este m\u00e9todo todas las firmas CAdES que se realicen hasta el reinicio del Applet tendr\u00e1n la forma V2 del atributo Signing Certificate. Si queremos restablecer el comportamiento normal de generaci\u00f3n en la forma V1 debemos invocar el paso de par\u00e1metro adicional de este otra forma: clienteFirma.addExtraParam(\u201csigningCertificateV2\u201d, \u201c false \u201d); Para las firmas en CAdES que van a sufrir un tratamiento posterior acorde a la versi\u00f3n CAdES 1.8.1 (como por ejemplo sellos de tiempo complejos), se recomienda usar siempre la forma V2 del atributo Signing Certificate.","title":"Anexo B. Configuraci\u00f3n espec\u00edfica para el formato CAdES"},{"location":"markdown_strict/CF_manual-integrador/#_2","text":"","title":""},{"location":"markdown_strict/CF_manual-integrador/#creative-commons","text":"Reconocimiento-NoComercial-CompartirIgual 3.0 Unported Usted es libre de: | < style=\"width:0.52083in;height:0.52083in\" alt=\"share\" /> | Compartir - copiar, distribuir, ejecutar y comunicar p\u00fablicamente la obra | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"remix\" /> | hacer obras derivadas | Bajo las condiciones siguientes: | < style=\"width:0.52083in;height:0.52083in\" alt=\"by\" /> | Atribuci\u00f3n \u2014 Debe reconocer los cr\u00e9ditos de la obra de la manera especificada por el autor o el licenciante (pero no de una manera que sugiera que tiene su apoyo o que apoyan el uso que hace de su obra). | |-----------|-------------------------------------------------------------| | < style=\"width:0.52083in;height:0.52083in\" alt=\"nc\" /> | NoComercial \u2014 No puede utilizar esta obra para fines comerciales. | | < style=\"width:0.52083in;height:0.52083in\" alt=\"sa\" /> | Compartir bajo la Misma Licencia \u2014 Si altera o transforma esta obra, o genera una obra derivada, s\u00f3lo puede distribuir la obra generada bajo una licencia id\u00e9ntica a \u00e9sta. | Entendiendo que: Renuncia \u2014 Alguna de estas condiciones puede no aplicarse si se obtiene el permiso del titular de los derechos de autor Dominio P\u00fablico \u2014 Cuando la obra o alguno de sus elementos se hallen en el dominio p\u00fablico seg\u00fan la ley vigente aplicable, esta situaci\u00f3n no quedar\u00e1 afectada por la licencia. Otros derechos \u2014 Los derechos siguientes no quedan afectados por la licencia de ninguna manera: Los derechos derivados de usos leg\u00edtimos u otras limitaciones reconocidas por ley no se ven afectados por lo anterior. Los derechos morales del auto; Derechos que pueden ostentar otras personas sobre la propia obra o su uso, como por ejemplo derechos de imagen o de privacidad. Aviso \u2014 Al reutilizar o distribuir la obra, tiene que dejar muy en claro los t\u00e9rminos de la licencia de esta obra. La mejor forma de hacerlo es enlazar a esta p\u00e1gina. Licencia LA OBRA O LA PRESTACI\u00d3N (SEG\u00daN SE DEFINEN M\u00c1S ADELANTE) SE PROPORCIONA BAJO LOS T\u00c9RMINOS DE ESTA LICENCIA P\u00daBLICA DE CREATIVE COMMONS (CCPL O LICENCIA). LA OBRA O LA PRESTACI\u00d3N SE ENCUENTRA PROTEGIDA POR LA LEY ESPA\u00d1OLA DE PROPIEDAD INTELECTUAL Y/O CUALESQUIERA OTRAS NORMAS QUE RESULTEN DE APLICACI\u00d3N. QUEDA PROHIBIDO CUALQUIER USO DE LA OBRA O PRESTACI\u00d3N DIFERENTE A LO AUTORIZADO BAJO ESTA LICENCIA O LO DISPUESTO EN LA LEY DE PROPIEDAD INTELECTUAL. MEDIANTE EL EJERCICIO DE CUALQUIER DERECHO SOBRE LA OBRA O LA PRESTACI\u00d3N, USTED ACEPTA Y CONSIENTE LAS LIMITACIONES Y OBLIGACIONES DE ESTA LICENCIA, SIN PERJUICIO DE LA NECESIDAD DE CONSENTIMIENTO EXPRESO EN CASO DE VIOLACI\u00d3N PREVIA DE LOS T\u00c9RMINOS DE LA MISMA. EL LICENCIADOR LE CONCEDE LOS DERECHOS CONTENIDOS EN ESTA LICENCIA, SIEMPRE QUE USTED ACEPTE LOS PRESENTES T\u00c9RMINOS Y CONDICIONES. 1. Definiciones La obra es la creaci\u00f3n literaria, art\u00edstica o cient\u00edfica ofrecida bajo los t\u00e9rminos de esta licencia. En esta licencia se considera una prestaci\u00f3n cualquier interpretaci\u00f3n, ejecuci\u00f3n, fonograma, grabaci\u00f3n audiovisual, emisi\u00f3n o transmisi\u00f3n, mera fotograf\u00eda u otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente aplicable. La aplicaci\u00f3n de esta licencia a una colecci\u00f3n (definida m\u00e1s adelante) afectar\u00e1 \u00fanicamente a su estructura en cuanto forma de expresi\u00f3n de la selecci\u00f3n o disposici\u00f3n de sus contenidos, no siendo extensiva a \u00e9stos. En este caso la colecci\u00f3n tendr\u00e1 la consideraci\u00f3n de obra a efectos de esta licencia. El titular originario es: En el caso de una obra literaria, art\u00edstica o cient\u00edfica, la persona natural o grupo de personas que cre\u00f3 la obra. En el caso de una obra colectiva, la persona que la edite y divulgue bajo su nombre, salvo pacto contrario. En el caso de una interpretaci\u00f3n o ejecuci\u00f3n, el actor, cantante, m\u00fasico, o cualquier otra persona que represente, cante, lea, recite, interprete o ejecute en cualquier forma una obra. En el caso de un fonograma, el productor fonogr\u00e1fico, es decir, la persona natural o jur\u00eddica bajo cuya iniciativa y responsabilidad se realiza por primera vez una fijaci\u00f3n exclusivamente sonora de la ejecuci\u00f3n de una obra o de otros sonidos. En el caso de una grabaci\u00f3n audiovisual, el productor de la grabaci\u00f3n, es decir, la persona natural o jur\u00eddica que tenga la iniciativa y asuma la responsabilidad de las fijaciones de un plano o secuencia de im\u00e1genes, con o sin sonido. En el caso de una emisi\u00f3n o una transmisi\u00f3n, la entidad de radiodifusi\u00f3n. En el caso de una mera fotograf\u00eda, aquella persona que la haya realizado. En el caso de otros objetos protegidos por la legislaci\u00f3n de propiedad intelectual vigente, la persona que \u00e9sta se\u00f1ale. Se considerar\u00e1n obras derivadas aquellas obras creadas a partir de la licenciada, como por ejemplo: las traducciones y adaptaciones; las revisiones, actualizaciones y anotaciones; los compendios, res\u00famenes y extractos; los arreglos musicales y, en general, cualesquiera transformaciones de una obra literaria, art\u00edstica o cient\u00edfica. Para evitar la duda, si la obra consiste en una composici\u00f3n musical o grabaci\u00f3n de sonidos, la sincronizaci\u00f3n temporal de la obra con una imagen en movimiento (synching) ser\u00e1 considerada como una obra derivada a efectos de esta licencia. Tendr\u00e1n la consideraci\u00f3n de colecciones la recopilaci\u00f3n de obras ajenas, de datos o de otros elementos independientes como las antolog\u00edas y las bases de datos que por la selecci\u00f3n o disposici\u00f3n de sus contenidos constituyan creaciones intelectuales. La mera incorporaci\u00f3n de una obra en una colecci\u00f3n no dar\u00e1 lugar a una derivada a efectos de esta licencia. El licenciador es la persona o la entidad que ofrece la obra o prestaci\u00f3n bajo los t\u00e9rminos de esta licencia y le concede los derechos de explotaci\u00f3n de la misma conforme a lo dispuesto en ella. Usted es la persona o la entidad que ejercita los derechos concedidos mediante esta licencia y que no ha violado previamente los t\u00e9rminos de la misma con respecto a la obra o la prestaci\u00f3n, o que ha recibido el permiso expreso del licenciador de ejercitar los derechos concedidos mediante esta licencia a pesar de una violaci\u00f3n anterior. La transformaci\u00f3n de una obra comprende su traducci\u00f3n, adaptaci\u00f3n y cualquier otra modificaci\u00f3n en su forma de la que se derive una obra diferente. La creaci\u00f3n resultante de la transformaci\u00f3n de una obra tendr\u00e1 la consideraci\u00f3n de obra derivada. Se entiende por reproducci\u00f3n la fijaci\u00f3n directa o indirecta, provisional o permanente, por cualquier medio y en cualquier forma, de toda la obra o la prestaci\u00f3n o de parte de ella, que permita su comunicaci\u00f3n o la obtenci\u00f3n de copias. Se entiende por distribuci\u00f3n la puesta a disposici\u00f3n del p\u00fablico del original o de las copias de la obra o la prestaci\u00f3n, en un soporte tangible, mediante su venta, alquiler, pr\u00e9stamo o de cualquier otra forma. Se entiende por comunicaci\u00f3n p\u00fablica todo acto por el cual una pluralidad de personas, que no pertenezcan al \u00e1mbito dom\u00e9stico de quien la lleva a cabo, pueda tener acceso a la obra o la prestaci\u00f3n sin previa distribuci\u00f3n de ejemplares a cada una de ellas. Se considera comunicaci\u00f3n p\u00fablica la puesta a disposici\u00f3n del p\u00fablico de obras o prestaciones por procedimientos al\u00e1mbricos o inal\u00e1mbricos, de tal forma que cualquier persona pueda acceder a ellas desde el lugar y en el momento que elija. La explotaci\u00f3n de la obra o la prestaci\u00f3n comprende la reproducci\u00f3n, la distribuci\u00f3n, la comunicaci\u00f3n p\u00fablica y, en su caso, la transformaci\u00f3n. 2. L\u00edmites de los derechos. Nada en esta licencia pretende reducir o restringir cualesquiera l\u00edmites legales de los derechos exclusivos del titular de los derechos de propiedad intelectual de acuerdo con la Ley de propiedad intelectual o cualesquiera otras leyes aplicables, ya sean derivados de usos leg\u00edtimos, tales como la copia privada o la cita, u otras limitaciones como la resultante de la primera venta de ejemplares (agotamiento). 3. Concesi\u00f3n de licencia. Conforme a los t\u00e9rminos y a las condiciones de esta licencia, el licenciador concede, por el plazo de protecci\u00f3n de los derechos de propiedad intelectual y a t\u00edtulo gratuito, una licencia de \u00e1mbito mundial no exclusiva que incluye los derechos siguientes: Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n. Derecho a incorporar la obra o la prestaci\u00f3n en una o m\u00e1s colecciones. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de la obra o la prestaci\u00f3n l\u00edcitamente incorporada en una colecci\u00f3n. Derecho de transformaci\u00f3n de la obra para crear una obra derivada siempre y cuando se incluya en \u00e9sta una indicaci\u00f3n de la transformaci\u00f3n o modificaci\u00f3n efectuada. Derecho de reproducci\u00f3n, distribuci\u00f3n y comunicaci\u00f3n p\u00fablica de obras derivadas creadas a partir de la obra licenciada. Derecho a extraer y reutilizar la obra o la prestaci\u00f3n de una base de datos. Para evitar cualquier duda, el titular originario: Conserva el derecho a percibir las remuneraciones o compensaciones previstas por actos de explotaci\u00f3n de la obra o prestaci\u00f3n, calificadas por la ley como irrenunciables e inalienables y sujetas a gesti\u00f3n colectiva obligatoria. Renuncia al derecho exclusivo a percibir, tanto individualmente como mediante una entidad de gesti\u00f3n colectiva de derechos, cualquier remuneraci\u00f3n derivada de actos de explotaci\u00f3n de la obra o prestaci\u00f3n que usted realice. Estos derechos se pueden ejercitar en todos los medios y formatos, tangibles o intangibles, conocidos en el momento de la concesi\u00f3n de esta licencia. Los derechos mencionados incluyen el derecho a efectuar las modificaciones que sean precisas t\u00e9cnicamente para el ejercicio de los derechos en otros medios y formatos. Todos los derechos no concedidos expresamente por el licenciador quedan reservados, incluyendo, a t\u00edtulo enunciativo pero no limitativo, los derechos morales irrenunciables reconocidos por la ley aplicable. En la medida en que el licenciador ostente derechos exclusivos previstos por la ley nacional vigente que implementa la directiva europea en materia de derecho sui generis sobre bases de datos, renuncia expresamente a dichos derechos exclusivos. 4. Restricciones. La concesi\u00f3n de derechos que supone esta licencia se encuentra sujeta y limitada a las restricciones siguientes: Usted puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n solamente bajo los t\u00e9rminos de esta licencia y debe incluir una copia de la misma, o su Identificador Uniforme de Recurso (URI). Usted no puede ofrecer o imponer ninguna condici\u00f3n sobre la obra o prestaci\u00f3n que altere o restrinja los t\u00e9rminos de esta licencia o el ejercicio de sus derechos por parte de los concesionarios de la misma. Usted no puede sublicenciar la obra o prestaci\u00f3n. Usted debe mantener intactos todos los avisos que se refieran a esta licencia y a la ausencia de garant\u00edas. Usted no puede reproducir, distribuir o comunicar p\u00fablicamente la obra o prestaci\u00f3n con medidas tecnol\u00f3gicas que controlen el acceso o el uso de una manera contraria a los t\u00e9rminos de esta licencia. Esta secci\u00f3n 4.a tambi\u00e9n afecta a la obra o prestaci\u00f3n incorporada en una colecci\u00f3n, pero ello no implica que \u00e9sta en su conjunto quede autom\u00e1ticamente o deba quedar sujeta a los t\u00e9rminos de la misma. En el caso que le sea requerido, previa comunicaci\u00f3n del licenciador, si usted incorpora la obra en una colecci\u00f3n y/o crea una obra derivada, deber\u00e1 quitar cualquier cr\u00e9dito requerido en el apartado 4.b, en la medida de lo posible. Si usted reproduce, distribuye o comunica p\u00fablicamente la obra o la prestaci\u00f3n, una colecci\u00f3n que la incorpore o cualquier obra derivada, debe mantener intactos todos los avisos sobre la propiedad intelectual e indicar, de manera razonable conforme al medio o a los medios que usted est\u00e9 utilizando: El nombre del autor original, o el seud\u00f3nimo si es el caso, as\u00ed como el del titular originario, si le es facilitado. El nombre de aquellas partes (por ejemplo: instituci\u00f3n, publicaci\u00f3n, revista) que el titular originario y/o el licenciador designen para ser reconocidos en el aviso legal, las condiciones de uso, o de cualquier otra manera razonable. El t\u00edtulo de la obra o la prestaci\u00f3n si le es facilitado. El URI, si existe, que el licenciador especifique para ser vinculado a la obra o la prestaci\u00f3n, a menos que tal URI no se refiera al aviso legal o a la informaci\u00f3n sobre la licencia de la obra o la prestaci\u00f3n. En el caso de una obra derivada, un aviso que identifique la transformaci\u00f3n de la obra en la obra derivada (p. ej., \"traducci\u00f3n castellana de la obra de Autor Original,\" o \"gui\u00f3n basado en obra original de Autor Original\"). Este reconocimiento debe hacerse de manera razonable. En el caso de una obra derivada o incorporaci\u00f3n en una colecci\u00f3n estos cr\u00e9ditos deber\u00e1n aparecer como m\u00ednimo en el mismo lugar donde se hallen los correspondientes a otros autores o titulares y de forma comparable a los mismos. Para evitar la duda, los cr\u00e9ditos requeridos en esta secci\u00f3n s\u00f3lo ser\u00e1n utilizados a efectos de atribuci\u00f3n de la obra o la prestaci\u00f3n en la manera especificada anteriormente. Sin un permiso previo por escrito, usted no puede afirmar ni dar a entender impl\u00edcitamente ni expl\u00edcitamente ninguna conexi\u00f3n, patrocinio o aprobaci\u00f3n por parte del titular originario, el licenciador y/o las partes reconocidas hacia usted o hacia el uso que hace de la obra o la prestaci\u00f3n. Para evitar cualquier duda, debe hacerse notar que las restricciones anteriores (p\u00e1rrafos 4.a y 4.b) no son de aplicaci\u00f3n a aquellas partes de la obra o la prestaci\u00f3n objeto de esta licencia que \u00fanicamente puedan ser protegidas mediante el derecho sui generis sobre bases de datos recogido por la ley nacional vigente implementando la directiva europea de bases de datos 5. Exoneraci\u00f3n de responsabilidad A MENOS QUE SE ACUERDE MUTUAMENTE ENTRE LAS PARTES, EL LICENCIADOR OFRECE LA OBRA O LA PRESTACI\u00d3N TAL CUAL (ON AN \"AS-IS\" BASIS) Y NO CONFIERE NINGUNA GARANT\u00cdA DE CUALQUIER TIPO RESPECTO DE LA OBRA O LA PRESTACI\u00d3N O DE LA PRESENCIA O AUSENCIA DE ERRORES QUE PUEDAN O NO SER DESCUBIERTOS. ALGUNAS JURISDICCIONES NO PERMITEN LA EXCLUSI\u00d3N DE TALES GARANT\u00cdAS, POR LO QUE TAL EXCLUSI\u00d3N PUEDE NO SER DE APLICACI\u00d3N A USTED. 6. Limitaci\u00f3n de responsabilidad. SALVO QUE LO DISPONGA EXPRESA E IMPERATIVAMENTE LA LEY APLICABLE, EN NING\u00daN CASO EL LICENCIADOR SER\u00c1 RESPONSABLE ANTE USTED POR CUALESQUIERA DA\u00d1OS RESULTANTES, GENERALES O ESPECIALES (INCLUIDO EL DA\u00d1O EMERGENTE Y EL LUCRO CESANTE), FORTUITOS O CAUSALES, DIRECTOS O INDIRECTOS, PRODUCIDOS EN CONEXI\u00d3N CON ESTA LICENCIA O EL USO DE LA OBRA O LA PRESTACI\u00d3N, INCLUSO SI EL LICENCIADOR HUBIERA SIDO INFORMADO DE LA POSIBILIDAD DE TALES DA\u00d1OS. 7. Finalizaci\u00f3n de la licencia Esta licencia y la concesi\u00f3n de los derechos que contiene terminar\u00e1n autom\u00e1ticamente en caso de cualquier incumplimiento de los t\u00e9rminos de la misma. Las personas o entidades que hayan recibido de usted obras derivadas o colecciones bajo esta licencia, sin embargo, no ver\u00e1n sus licencias finalizadas, siempre que tales personas o entidades se mantengan en el cumplimiento \u00edntegro de esta licencia. Las secciones 1, 2, 5, 6, 7 y 8 permanecer\u00e1n vigentes pese a cualquier finalizaci\u00f3n de esta licencia. Conforme a las condiciones y t\u00e9rminos anteriores, la concesi\u00f3n de derechos de esta licencia es vigente por todo el plazo de protecci\u00f3n de los derechos de propiedad intelectual seg\u00fan la ley aplicable. A pesar de lo anterior, el licenciador se reserva el derecho a divulgar o publicar la obra o la prestaci\u00f3n en condiciones distintas a las presentes, o de retirar la obra o la prestaci\u00f3n en cualquier momento. No obstante, ello no supondr\u00e1 dar por concluida esta licencia (o cualquier otra licencia que haya sido concedida, o sea necesario ser concedida, bajo los t\u00e9rminos de esta licencia), que continuar\u00e1 vigente y con efectos completos a no ser que haya finalizado conforme a lo establecido anteriormente, sin perjuicio del derecho moral de arrepentimiento en los t\u00e9rminos reconocidos por la ley de propiedad intelectual aplicable. 8. Miscel\u00e1nea Cada vez que usted realice cualquier tipo de explotaci\u00f3n de la obra o la prestaci\u00f3n, o de una colecci\u00f3n que la incorpore, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra o la prestaci\u00f3n en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Cada vez que usted realice cualquier tipo de explotaci\u00f3n de una obra derivada, el licenciador ofrece a los terceros y sucesivos licenciatarios la concesi\u00f3n de derechos sobre la obra objeto de esta licencia en las mismas condiciones y t\u00e9rminos que la licencia concedida a usted. Si alguna disposici\u00f3n de esta licencia resulta inv\u00e1lida o inaplicable seg\u00fan la Ley vigente, ello no afectar\u00e1 la validez o aplicabilidad del resto de los t\u00e9rminos de esta licencia y, sin ninguna acci\u00f3n adicional por cualquiera las partes de este acuerdo, tal disposici\u00f3n se entender\u00e1 reformada en lo estrictamente necesario para hacer que tal disposici\u00f3n sea v\u00e1lida y ejecutiva. No se entender\u00e1 que existe renuncia respecto de alg\u00fan t\u00e9rmino o disposici\u00f3n de esta licencia, ni que se consiente violaci\u00f3n alguna de la misma, a menos que tal renuncia o consentimiento figure por escrito y lleve la firma de la parte que renuncie o consienta. Esta licencia constituye el acuerdo pleno entre las partes con respecto a la obra o la prestaci\u00f3n objeto de la licencia. No caben interpretaciones, acuerdos o condiciones con respecto a la obra o la prestaci\u00f3n que no se encuentren expresamente especificados en la presente licencia. El licenciador no estar\u00e1 obligado por ninguna disposici\u00f3n complementaria que pueda aparecer en cualquier comunicaci\u00f3n que le haga llegar usted. Esta licencia no se puede modificar sin el mutuo acuerdo por escrito entre el licenciador y usted.","title":"Creative Commons"},{"location":"markdown_strict/CF_manual-migracion/","text":"< < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported . \u00cdndice 1 Introducci\u00f3n [3](#introducci\u00f3n) 2 Objeto [4](#objeto) 3 Alcance [5](#alcance) 4 Migraci\u00f3n a la versi\u00f3n 3.3.1 del Cliente @firma [6](#migraci\u00f3n-a-la-versi\u00f3n-3.4-del-cliente-firma) 4.1 Migraci\u00f3n desde el Cliente 2.4 [6](#migraci\u00f3n-desde-el-cliente-2.4) 4.1.1 Despliegue del Cliente @firma [7](#despliegue-del-cliente-firma) 4.1.2 Carga del Applet de firma 8 4.1.3 Cambios en los procedimientos [9](#_Toc332965075) 4.1.4 Restricciones [11](#restricciones) 4.2 Migraci\u00f3n desde el Cliente 3.0.2/3.0.3 [15](#migraci\u00f3n-desde-el-cliente-3.0.23.0.3) 4.2.1 Despliegue del Cliente @firma [15](#despliegue-del-cliente-firma-1) 4.2.2 Cambios en los procedimientos [16](#cambios-en-los-procedimientos-1) 4.2.3 Restricciones [19](#restricciones-1) 4.3 Migraci\u00f3n desde el Cliente 3.1/3.1.1 [21](#migraci\u00f3n-desde-el-cliente-3.13.1.1) 4.3.1 Despliegue del Cliente @firma [21](#despliegue-del-cliente-firma-2) 4.3.2 Cambios en los procedimientos [22](#cambios-en-los-procedimientos-2) 4.3.3 Restricciones [24](#restricciones-2) 4.4 Migraci\u00f3n desde el Cliente 3.2 [27](#migraci\u00f3n-desde-el-cliente-3.2) 4.4.1 Despliegue del Cliente @firma [27](#despliegue-del-cliente-firma-3) 4.4.2 Cambios en los procedimientos [28](#cambios-en-los-procedimientos-3) 4.4.3 Restricciones [30](#restricciones-3) 4.5 Migraci\u00f3n desde el Cliente 3.3 [33](#migraci\u00f3n-desde-el-cliente-3.3) 4.5.1 Cambios en los procedimientos [33](#cambios-en-los-procedimientos-4) 5 Glosario de t\u00e9rminos [34](#glosario-de-t\u00e9rminos) Introducci\u00f3n El Cliente de Firma es una herramienta de Firma Electr\u00f3nica que funciona en forma de Applet de Java integrado en una p\u00e1gina Web mediante JavaScript. El Cliente hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados ( keystore ) del navegador web ( Internet Explorer, Mozilla, Firefox ) o el sistema operativo as\u00ed como de los que est\u00e9n en dispositivos (tarjetas inteligentes , dispositivos USB ) configurados en el mismo (el caso de los DNI-e). El Cliente de Firma, como su nombre indica, es una aplicaci\u00f3n que se ejecuta en cliente (en el ordenador del usuario, no en el servidor Web). Esto es as\u00ed para evitar que la clave privada asociada a un certificado tenga que \u201csalir\u201d del contenedor del usuario (tarjeta, dispositivo USB o navegador) ubicado en su PC. De hecho, nunca llega a salir del navegador, el Cliente le env\u00eda los datos a firmar y \u00e9ste los devuelve firmados. El Cliente de Firma contiene las interfaces y componentes web necesarios para la realizaci\u00f3n de los siguientes procesos (adem\u00e1s de otros auxiliares como c\u00e1lculos de hash, lectura de ficheros, etc\u2026): Firma de formularios Web. Firma de datos y ficheros. Multifirma masiva de datos y ficheros. Cofirma (CoSignature) Multifirma al mismo nivel. Contrafirma (CounterSignature) Multifirma en cascada. Como complemento al cliente de firma, se encuentra un cliente de cifrado que nos permite realizar las funciones de encriptaci\u00f3n y desencriptaci\u00f3n de datos atendiendo a diferentes algoritmos y configuraciones. Adem\u00e1s permite la generaci\u00f3n de sobres digitales. Objeto El presente documento describe el procedimiento de la migraci\u00f3n de las aplicaciones Web que integren el Cliente @firma para incorporar su \u00faltima versi\u00f3n. Este manual expone el procedimiento de migraci\u00f3n desde la versi\u00f3n 2.4 del Cliente en adelante. Alcance Este manual se ha realizado tomando como base el que se ha realizado una integraci\u00f3n est\u00e1ndar de una versi\u00f3n del cliente @firma distinta a la \u00faltima, esto es: Se hace uso de las bibliotecas JavaScript que se distribuyen con esa versi\u00f3n del Cliente. Se hace uso de los m\u00e9todos publicados en el Applet. Los pasos detallados en este manual sirven para adaptar los despliegues existentes del Cliente @firma a su \u00faltima versi\u00f3n. Aqu\u00ed s\u00f3lo se describe la migraci\u00f3n de las funcionalidades del Cliente implementadas en versiones anteriores. Para la incorporaci\u00f3n de las nuevas funcionalidades disponibles en la \u00faltima versi\u00f3n del Cliente ser\u00e1 necesario dirigirse al \u201cManual del Integrador\u201d. Migraci\u00f3n a la versi\u00f3n 3.4 del Cliente @firma La redacci\u00f3n de este manual viene motivada principalmente por el cambio metodol\u00f3gico y de arquitectura que se ha ido realizado a lo largo de las distintas versiones del Cliente @firma, en buena parte motivadas por los cambios de las nuevas versiones de Java. Acceda al apartado correspondiente a la versi\u00f3n del Cliente @firma que tenga desplegada y realice los cambios necesarios para la adaptaci\u00f3n a la \u00faltima versi\u00f3n. Si va a realizar un nuevo despliegue del Cliente @firma, ignore este documento y despliegue la \u00faltima versi\u00f3n del Cliente vali\u00e9ndose de su Manual del integrador. Migraci\u00f3n desde el Cliente 2.4 Mientras que en la versi\u00f3n 2.4 del cliente y anteriores se instalaban siempre las dependencias del cliente y este deb\u00eda cargarse en cada ejecuci\u00f3n, en la nueva versi\u00f3n del Cliente las dependencias s\u00f3lo se instalan en caso de ser necesarias y el Cliente se despliega mediante JNLP. Durante la carga del Cliente, si se detecta que el entorno puede requerir la instalaci\u00f3n de dependencias del Cliente, se cargar\u00e1 un Bootloader encargado de comprobar si estas dependencias est\u00e1n cubiertas o es necesario instalarlas. La carga del Bootloader, las comprobaciones y la instalaci\u00f3n de dependencias son autom\u00e1ticas y el integrador no tiene que hacer nada al respecto. Cuando el sistema del usuario no es susceptible de requerir dependencias adicionales, se cargar\u00e1 directamente el Cliente y no el Bootloader. Adicionalmente, la nueva versi\u00f3n del cliente cuenta con una nueva arquitectura que divide sus funcionalidades en 3 construcciones distintas: Construcci\u00f3n LITE : Soporta firmas PKCS#1, CMS/PKCS#7 y CADES, e incorpora todas las capacidades actuales del cliente (firmas, cifrados, acceso a repositorios\u2026). Construcci\u00f3n MEDIA : Soporta firmas XMLdSig, XAdES, ODF y OOXML, m\u00e1s las funcionalidades de la construcci\u00f3n LITE. Construcci\u00f3n COMPLETA : Soporta firmas PDF, adem\u00e1s de disponer de las funcionalidades de la construcci\u00f3n MEDIA. En el momento de cargar el Cliente el integrador podr\u00e1 indicar que construcci\u00f3n se desea, seg\u00fan las funcionalidades que requiera su sistema. El nuevo Cliente @firma se despliega de forma similar a las versiones anteriores. Para actualizar el Cliente @firma a la \u00faltima versi\u00f3n y adaptar nuestra aplicaci\u00f3n Web deberemos seguir los siguientes pasos: Sustituir la totalidad de ficheros de despliegue (bibliotecas JavaScript, ficheros JNLP, archivos JAR, ficheros ZIP, ficheros de propiedades y cualquier otro ficheros distribuido con el Cliente @firma) del cliente por las de la \u00faltima versi\u00f3n. Durante este proceso, al sustituir el fichero \u201c constantes.js \u201d, deberemos asegurarnos de que las constantes del nuevo cliente tienen asignadas el mismo valor que el del cliente desplegado. Consulte el apartado Despliegue del Cliente @firma para m\u00e1s detalle. Adaptar, si procede, los HTML que cargan el cliente seg\u00fan se explica en el apartado Carga del Applet de firma . Revisar si alguno de los m\u00e9todos utilizados ha cambiado su comportamiento seg\u00fan se indica en el apartado Cambios en los procedimientos para asegurarnos de que no afecta a nuestra aplicaci\u00f3n. En caso de afectarnos, proceder tal como se indica. Comprobar que no hacemos uso de ninguno de los m\u00e9todos eliminados del Cliente. De hacerlo, lo sustituiremos seg\u00fan se indica en el apartado Antes exist\u00eda un solo m\u00e9todo para configurar los destinatarios de los sobres electr\u00f3nicos: setRecipientsToCMS(String): Este m\u00e9todo defin\u00eda todos los destinatarios del sobre de una sola vez. Como par\u00e1metro recib\u00eda el listado de rutas locales de los certificados de los destinatarios separadas por \u2018\\n\u2019. En la nueva versi\u00f3n, existen dos m\u00e9todos adicionales para indicar los destinatarios:addRecipientToCMS(String): Permite agregar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. removeRecipientToCMS(String): Permite eliminar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. El m\u00e9todo removeRecipientToCMS elimina cualquier certificado de la lista, ya haya sido cargado mediante addRecipientToCMS o setRecipientsToCMS. Si deseamos eliminar todos los certificados podemos utilizar setRecipientsToCMS(null).Restricciones, o por un mecanismo alternativo si no existe alternativa. Despliegue del Cliente @firma Importaci\u00f3n de librer\u00edas JavaScript Las librer\u00edas JavaScript del nuevo cliente @firma han sufrido ciertos cambios desde sus versiones anteriores, por lo que deber\u00e1 revisarse el modo de uso desde sus p\u00e1ginas Web HTML. Estos cambios se han realizado para mejorar la compatibilidad con ciertas versiones del entorno de ejecuci\u00f3n de Java (JRE), pero sobre todo para garantizar el funcionamiento correcto con versiones futuras de JRE, navegadores Web y sistemas operativos, especialmente en las nuevas arquitecturas de 64 bits. El integrador ya no necesita gestionar la instalaci\u00f3n y actualizaci\u00f3n del Cliente, dado que estos procesos se gestionan de forma completamente autom\u00e1tica. Debe retirar cualquier referencia en su c\u00f3digo HTML a los siguientes m\u00e9todos JavaScript o par\u00e1metros: instalar() desinstalar() isActualizado() actualizar() isInstalado() getDirectorioInstalacion() Variable installDirectory en constantes.js Variable instalador en instalador.js Los JavaScript que necesita importar en sus p\u00e1ginas HTML pueden igualmente haber cambiado. Aseg\u00farese de que no importa ning\u00fan JavaScript que no exista en el directorio de despliegue o en su subdirectorio common-js. Consulte las p\u00e1ginas Web de ejemplo para determinar que ficheros JavaScript es necesario importar para las distintas operaciones de criptograf\u00eda y firma electr\u00f3nica. Note especialmente que se han eliminado las librer\u00edas JavaScript \u201c runApplet.js \u201d y \u201c time.js \u201d. Es obligatorio eliminar las esperas expl\u00edcitas a la carga del Applet . Esto es, las sentencias que hacen uso de los m\u00e9todos de la biblioteca \u201ctime.js\u201d y la variable clienteFirmaCargado. Por ejemplo: whenTry(\"clienteFirmaCargado == true\", \"clienteFirma.setCipherAlgorithm('\" + cipherAlgorithm + \"')\", \"No se ha podido iniciar el Applet de firma.\"); Por regla general, el navegador Web no termina la carga de la p\u00e1gina hasta que no se finaliza la carga del Cliente, por lo que no suele ser necesario agregar sentencias de este tipo. Carga del Applet de firma La nueva arquitectura del cliente elimina el sistema de m\u00f3dulos ( plugins ) con el que se contaba en versiones V2.x (debido a nuevas restricciones de seguridad de la JRE1.6u17 y superiores) y establece 3 construcciones distintas que incorporan diferentes funcionalidades (cada una incorporando las funcionalidades de las anteriores). Esta nueva arquitectura requiere que cada vez que se cargue el Applet mediante el m\u00e9todo cargarAppletFirma() se indique la construcci\u00f3n m\u00ednima que exija nuestra aplicaci\u00f3n para funcionar correctamente. Esto lo haremos pas\u00e1ndole los par\u00e1metros \u2018LITE\u2019, \u2018MEDIA\u2019 o \u2018COMPLETA\u2019 al m\u00e9todo seg\u00fan sea la construcci\u00f3n que necesitemos. Si no se indica nada, se interpretar\u00e1 que se desea la construcci\u00f3n por defecto, que ser\u00e1 la \u2018LITE\u2019 salvo que se indique lo contrario mediante la variable defaultBuild del fichero \u201c constantes.js \u201d. El integrador deber\u00e1 consultar el listado de funcionalidades incorporado en cada construcci\u00f3n del usuario para indicar cual debe utilizar. Para cargar el applet de firma exigiendo que se disponga de al menos la construcci\u00f3n MEDIA, por ejemplo, usar\u00edamos la sentencia: <script type=\"text/javascript\"> cargarAppletFirma(\u2018MEDIA\u2019); </script> Tambi\u00e9n podr\u00edamos establecer la variable defaultBuild del fichero \u201c constantes.js \u201d con el valor MEDIA y hacer: <script type=\"text/javascript\"> cargarAppletFirma(); </script> Localizaci\u00f3n de la llamada al m\u00e9todo de carga del Applet En la versi\u00f3n 3 del Cliente @firma se ha cambiado el modo de despliegue de los Applets para seguir las \u00faltimas recomendaciones de Oracle al respecto. Debido a estos cambios, la llamada al m\u00e9todo cargarAppletFirma() no puede ser realizada dentro de una etiqueta XML, y debe situarse dentro del cuerpo de una secci\u00f3n delimitada por etiquetas. La implicaci\u00f3n pr\u00e1ctica m\u00e1s directa de esta restricci\u00f3n es que ahora no es posible realizar la llamada de carga en la propiedad onLoad() de la etiqueta HTML <body>, siendo la opci\u00f3n recomendada situar esta llamada en cualquier lugar entre las etiquetas <body> y </body>. Cualquier otra llamada al Applet (comprobar si est\u00e1 instalado, obtener la versi\u00f3n, etc.) sigue pudi\u00e9ndose invocar desde onLoad() o cualquier otro gestor de eventos interno a una etiqueta HTML. Esto aplica igualmente a cualquier proceso de carga del cliente desde un disparador de evento: onClick(), onMouseOver()\u2026 Cambios en los procedimientos Formato de firma por defecto En las nuevas versiones del Cliente @firma el formato de firma por defecto es CAdES. Si su herramienta no configurase el formato de firma expl\u00edcitamente mediante el m\u00e9todo setSignatureFormat(String), deber\u00e1 introducir esta sentencia indicando el formato que desee utilizar o modificar el formato de firma por defecto por medio de la variable signatureFormat, del fichero de configuraci\u00f3n \u201c constantes.js\u201d. Cadena de certificaci\u00f3n en firmas XAdES En las nuevas versiones del Cliente @firma se inserta la cadena de certificaci\u00f3n completa en las firmas XAdES generadas. Este es el comportamiento recomendado para firmas XAdES, pero impide la correcta validaci\u00f3n de las firmas con versiones de la Plataforma @firma anteriores a la 5.5. Para desactivar este comportamiento es necesario establecer el par\u00e1metro extra \u201cincludeOnlySignningCertificate\u201d al valor \u201ctrue\u201d. Podemos hacer esto mediante la siguiente llamada: clienteFirma.addExtraParam(\u201cincludeOnlySignningCertificate\u201d, \u201ctrue\u201d); Ensobrado de datos En la versi\u00f3n 2.4 y anteriores del cliente, por un error en la implementaci\u00f3n, se establec\u00eda el texto plano que se deseaba ensobrar mediante el m\u00e9todo setData(String). En la nueva versi\u00f3n del cliente, tal como se indicaba en la especificaci\u00f3n del m\u00e9todo, el texto que se le debe pasar a este m\u00e9todo debe estar codificado en base 64. Podemos realizar el paso intermedio de pasar de texto plano a texto en base 64 mediante el m\u00e9todo: getBase64FromText(String, String). As\u00ed obtenemos que: Versi\u00f3n 2.4 : clienteFirma.setData(\u201ctexto\u201d); Ahora : clienteFirma.setData(clienteFirma.getBase64FromText( \u201ctexto\u201d, \u201cutf-8\u201d)); Cifrado de datos En versiones anteriores del Cliente, el comportamiento de los m\u00e9todos de entrada y salida de las funciones de cifrado ten\u00edan un comportamiento err\u00e1tico. Por ejemplo, el m\u00e9todo setPlainData(String) para indicar los datos que se desean cifrar recib\u00eda el texto en claro para cifrar, mientras que getPlainData() devolv\u00eda este texto en base 64. Ahora todas las entradas y salidas de datos realizadas con los siguientes m\u00e9todos se realizar\u00e1n en base 64: setPlainData(String) setCipherData(String) getPlainData() getCipherData() Si actualmente invoca a alguno de estos m\u00e9todos pas\u00e1ndole o recibiendo los datos en texto claro utilice los m\u00e9todos getBase64FromText(String, String) y getTextFromBase64(String, String) del cliente para realizar las transformaciones oportunas. Devoluci\u00f3n de nulos Las anteriores versiones del cliente dispon\u00edan de m\u00e9todos que deb\u00edan devolver una cadena de texto y, en caso de error o no disponer de datos para su devoluci\u00f3n, devolv\u00edan cadena vac\u00eda. Esta pr\u00e1ctica, que si bien evitaba comprobar que el valor de retorno fuese nulo, llevaban a no poder distinguir cuando la operaci\u00f3n hab\u00eda finalizado correctamente o si se hab\u00edan devuelto datos significativos. La nueva versi\u00f3n del cliente, devuelve nulo en estos m\u00e9todos en los que puede malinterpretarse el resultado si se devolviese cadena vac\u00eda. El comportamiento explicado se refleja en el JavaDoc de la nueva versi\u00f3n del cliente y los m\u00e9todos afectados son: getCipherData() getPlainData() getData() getBase64Data() getPassword() getSignatureBase64Encoded() getSignatureText() En caso de que utilizar alguno de estos m\u00e9todos en nuestra aplicaci\u00f3n, deberemos consultar que el resultado no sea nulo antes de utilizar el valor devuelto. Por ejemplo: var plainText = clienteFirma.getPlainData(); if(plainText == null) { alert(\u201cNo se ha podido recuperar el texto plano\u201d); } else { alert(plainText); } Configuraci\u00f3n del fichero de entrada Existen una serie de m\u00e9todos de operaci\u00f3n que especifican por par\u00e1metro el fichero que se desea procesar, en lugar de tomar el fichero configurado mediante setFileuri(String) o setFileuriBase64Encoded(String). Adicionalmente, estos m\u00e9todos modificaban la configuraci\u00f3n del Cliente de tal forma que los ficheros especificados quedaban establecidos como ficheros de entrada para el resto de operaciones. Los m\u00e9todos en cuesti\u00f3n son: getFileBase64Encoded(String strUri, boolean showProgress) cipherFile(String strUri) decipherFile(String strUri) signAndPackFile(String uri) En la nueva versi\u00f3n del Cliente @firma, los m\u00e9todos mencionados no alteran la configuraci\u00f3n del fichero de entrada establecido en el Cliente. Por ejemplo, dado el siguiente c\u00f3digo: \u2026 clienteFirma.setFileuri(\u201cfoo.txt\u201d); clienteFirma.getFileBase64Encoded(\u201cbar.txt\u201d, false); clienteFirma.sign(); \u2026 El nuevo Cliente @firma firmar\u00eda el fichero \u201cfoo.txt\u201d, mientras que las versiones anteriores firmar\u00edan \u201cbar.txt\u201d. Configuraci\u00f3n de los destinatarios de los sobres electr\u00f3nicos Antes exist\u00eda un solo m\u00e9todo para configurar los destinatarios de los sobres electr\u00f3nicos: setRecipientsToCMS(String): Este m\u00e9todo defin\u00eda todos los destinatarios del sobre de una sola vez. Como par\u00e1metro recib\u00eda el listado de rutas locales de los certificados de los destinatarios separadas por \u2018\\n\u2019. En la nueva versi\u00f3n, existen dos m\u00e9todos adicionales para indicar los destinatarios: addRecipientToCMS(String): Permite agregar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. removeRecipientToCMS(String): Permite eliminar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. El m\u00e9todo removeRecipientToCMS elimina cualquier certificado de la lista, ya haya sido cargado mediante addRecipientToCMS o setRecipientsToCMS. Si deseamos eliminar todos los certificados podemos utilizar setRecipientsToCMS(null). Restricciones Funciones y m\u00e9todos eliminados en el Applet Java public void signHTML(java.io.InputStream is) JavaScript no soporta el tipo de datos Java InputStream, por lo que su uso desde el cliente es imposible, y exponer la funci\u00f3n puede llevar a equ\u00edvocos o causar un uso inapropiado. La firma realizada por este m\u00e9todo es una firma simple, con la configuraci\u00f3n establecida, sobre los datos extra\u00eddos del flujo de entrada. Podemos emular su comportamiento siguiendo los siguientes pasos: Leyendo los datos del flujo de entrada en cuesti\u00f3n desde la aplicaci\u00f3n que utiliza el cliente. Convirtiendo los datos le\u00eddos a Base64. Estableci\u00e9ndolos como entrada del cliente con el m\u00e9todo setData(String). Ejecutando la operaci\u00f3n de firma mediante el m\u00e9todo sign() del cliente. public byte[] getSignature() JavaScript no soporta el tipo de datos de Java byte[], por lo que su uso es imposible, y exponer la funci\u00f3n puede llevar a equ\u00edvocos o causar un uso inapropiado. Para recuperar la informaci\u00f3n de firma puede utilizarse: getSignatureText() para las firmas XML. Obtiene la cadena de texto que representa el XML de firma. Puede obtenerse el mismo resultado que con el m\u00e9todo getSignature() utilizando el m\u00e9todo getBytes() sobre su salida. getSignatureBase64Encoded() para cualquier tipo de firma. Devuelve la firma en forma de cadena en base 64. Puede obtenerse el mismo resultado que con el m\u00e9todo getSignature() decodificando la cadena en base 64 obtenida. public String Firma(String datos) Se elimina el m\u00e9todo deprecado Firma(String). Este m\u00e9todo permit\u00eda la compatibilidad del Cliente con la Plataforma @firma versi\u00f3n 4. Este m\u00e9todo recib\u00eda una cadena en base 64 compuesta por un c\u00f3digo de operaci\u00f3n, el valor de transacci\u00f3n y hasta un par de par\u00e1metros, todos concatenados por el separador almohadilla (\u2018#\u2019): OP#TRANS#PARAM1#PARAM2 Los valores permitidos para el par\u00e1metro de operaci\u00f3n (OP) eran: 0: Operaci\u00f3n de Firma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos firmar y se ignora PARAM2. 1: Operaci\u00f3n de Cofirma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos cofirmar y PARAM2 es la firma electr\u00f3nica original. 2: Operaci\u00f3n de Contrafirma de nodos. Para esta operaci\u00f3n PARAM1 es la firma que deseamos contrafirmar y PARAM2 es el listado de \u00edndices tal como los recibe el m\u00e9todo setSignersToCounterSign(String). El resultado de la operaci\u00f3n es la cadena: cert=CERT;enc=SIGN En esta cadena CERT es el certificado en base 64 utilizado para la firma y SIGN es el resultado de la operaci\u00f3n en base 64. En cada operaci\u00f3n se declaraba un atributo firmado adicional con resto a los que aparecen por regla general en las firmas CMS. Este ser\u00eda el atributo \u201c2.5.4.45\u201d con el valor \u201cTRANS\u201d. Para imitar este comportamiento con el Cliente, se deber\u00edan realizar las siguientes acciones: Descodificar el Base64 del par\u00e1metro que recib\u00eda el m\u00e9todo y obtener cada uno de sus componentes (OP, TRANS, PARAM1 y PARAM2). Configurar el formato de firma CMS, el algoritmo de firma SHA1withRSA y el modo de firma expl\u00edcito, mediante las sentencias: clienteFirma .setSignatureFormat(\u201cCMS\u201d); clienteFirma .setSignatureAlgorithm(\u201cSHA1withRSA\u201d); clienteFirma .setSignatureMode(\u201cexplicit); Configurar el n\u00famero de transacci\u00f3n como atributo firmado adicional: clienteFirma .addSignedAttribute(\u201c2.2.4.45\u201d, TRANS); Configurar los datos de entrada, hash, firma y firmantes seg\u00fan la operaci\u00f3n inidicada (OP) y ejecutar la operaci\u00f3n: switch (OP) { // Firma case 0: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); clienteFirma .sign(); break ; // Cofirma (Firma en paralelo) case 1: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); //Establecemos la firma clienteFirma .setElectronicSignature( PARAM2 ); //Cofirmamos clienteFirma .coSign(); break ; // Contrafirma (Firma en cascada) case 2: //Establecemos la firma clienteFirma .setElectronicSignature( PARAM1 ); //Establecemos los firmantes que se desean contrafirmar clienteFirma .setSignersToCounterSign( PARAM2 ); // Contrafirmamos clienteFirma .counterSignIndexes(); break ; } Recuperar el resultado de la operaci\u00f3n y el certificado utilizado para, si se desea, componer la cadena de salida. clienteFirma .getSignCertificateBase64Encoded(); clienteFirma .getSignatureBase64Encoded(); public String getCMSData() Se elimina el m\u00e9todo en favor del equivalente getB64Data(). Algoritmos de cifrado eliminados Se han eliminado los siguientes algoritmos de cifrado, por considerarse obsoletos o en desuso: CAST5 IDEA Twofish Serpent Aun cuando haya algoritmos de cifrado que se mantengan desde la versi\u00f3n anterior del cliente, es posible que haya cambiado su configuraci\u00f3n por defecto. Por regla general, siempre deber\u00eda descifrarse con la misma versi\u00f3n del cliente con la que se cifr\u00f3. Migraci\u00f3n desde el Cliente 3.0.2/3.0.3 Mientras que en las versi\u00f3n 3.0.2/3.0.3 del Cliente y anteriores se instalaban siempre las dependencias del cliente y este deb\u00eda cargarse en cada ejecuci\u00f3n, en la nueva versi\u00f3n del Cliente las dependencias s\u00f3lo se instalan en caso de ser necesarias y el Cliente se despliega mediante JNLP, por lo que puede quedarse almacenado en la cach\u00e9 de Java. Durante la carga del Cliente, si se detecta que el entorno puede requerir la instalaci\u00f3n de dependencias del Cliente, se cargar\u00e1 un Bootloader encargado de comprobar si estas dependencias est\u00e1n cubiertas o es necesario instalarlas. La carga del Bootloader, las comprobaciones y la instalaci\u00f3n de dependencias son autom\u00e1ticas y el integrador no tiene que hacer nada al respecto. Cuando el sistema del usuario no es susceptible de requerir dependencias adicionales, se cargar\u00e1 directamente el Cliente y no el Bootloader. El nuevo Cliente @firma se despliega de forma similar a las versiones anteriores. Para actualizar el Cliente @firma a la \u00faltima versi\u00f3n y adaptar nuestra aplicaci\u00f3n Web deberemos seguir los siguientes pasos: Sustituir la totalidad de ficheros de despliegue (bibliotecas JavaScript, ficheros JNLP, archivos JAR, ficheros ZIP, ficheros de propiedades y cualquier otro ficheros distribuido con el Cliente @firma) del cliente por las de la \u00faltima versi\u00f3n. Durante este proceso, al sustituir el fichero \u201c constantes.js \u201d, deberemos asegurarnos de que las constantes del nuevo cliente tienen asignadas el mismo valor que el del cliente desplegado. Consulte el apartado Despliegue del Cliente @firma para m\u00e1s detalle. Revisar si alguno de los m\u00e9todos utilizados ha cambiado su comportamiento seg\u00fan se indica en el apartado Cambios en los procedimientos para asegurarnos de que no afecta a nuestra aplicaci\u00f3n. En caso de afectarnos, proceder tal como se indica. Comprobar que no hacemos uso de ninguno de los m\u00e9todos eliminados del Cliente. De hacerlo, lo sustituiremos seg\u00fan se indica en el apartado Restricciones , o por un mecanismo alternativo si no existe alternativa. Despliegue del Cliente @firma Importaci\u00f3n de librer\u00edas JavaScript Las librer\u00edas JavaScript del nuevo cliente @firma han sufrido ciertos cambios desde sus versiones anteriores, por lo que deber\u00e1 revisarse el modo de uso desde sus p\u00e1ginas Web HTML. Estos cambios se han realizado para mejorar la compatibilidad con ciertas versiones del entorno de ejecuci\u00f3n de Java (JRE), pero sobre todo para garantizar el funcionamiento correcto con versiones futuras de JRE, navegadores Web y sistemas operativos, especialmente en las nuevas arquitecturas de 64 bits. El integrador ya no necesita gestionar la instalaci\u00f3n y actualizaci\u00f3n del Cliente, dado que estos procesos se gestionan de forma completamente autom\u00e1tica. Debe retirar cualquier referencia en su c\u00f3digo HTML a los siguientes m\u00e9todos JavaScript o par\u00e1metros: instalar() desinstalar() isActualizado() actualizar() isInstalado() getDirectorioInstalacion() Variable installDirectory en constantes.js Variable instalador en instalador.js Los JavaScript que necesita importar en sus p\u00e1ginas HTML pueden igualmente haber cambiado. Aseg\u00farese de que no importa ning\u00fan JavaScript que no exista en el directorio de despliegue o en su subdirectorio common-js. Consulte las p\u00e1ginas Web de ejemplo para determinar que ficheros JavaScript es necesario importar para las distintas operaciones de criptograf\u00eda y firma electr\u00f3nica. Note especialmente que se han eliminado las librer\u00edas JavaScript \u201c runApplet.js \u201d y \u201c time.js \u201d. Es obligatorio eliminar las esperas expl\u00edcitas a la carga del Applet . Esto es, las sentencias que hacen uso de los m\u00e9todos de la biblioteca \u201ctime.js\u201d y la variable clienteFirmaCargado. Por ejemplo: whenTry(\"clienteFirmaCargado == true\", \"clienteFirma.setCipherAlgorithm('\" + cipherAlgorithm + \"')\", \"No se ha podido iniciar el Applet de firma.\"); Por regla general, el navegador Web no termina la carga de la p\u00e1gina hasta que no se finaliza la carga del Cliente, por lo que no suele ser necesario agregar sentencias de este tipo. Cambios en los procedimientos Confirmaciones de acceso a disco A partir de la versi\u00f3n 3.3, el Cliente @firma pide confirmaci\u00f3n al usuario mediante un di\u00e1logo modal por cada acceso a disco que se realice sin que este lo haya indicado expl\u00edcitamente. Este comportamiento no debe afectar a las aplicaciones desplegadas salvo en caso particulares en el uso del modo de firma masiva program\u00e1tica. Si su aplicaci\u00f3n utiliza el modo de firma masiva program\u00e1tica para la firma masiva de ficheros, aseg\u00farese de utilizar el m\u00e9todo massiveSignatureSign(String) para la ejecuci\u00f3n de las firmas. Si su aplicaci\u00f3n utiliza el modo de firma masiva program\u00e1tica y almacena las firmas resultantes en disco, eval\u00fae el uso del mecanismo de firma de directorios o el usuario se ver\u00e1 obligado a aceptar el guardado individual de cada una de las firmas resultantes. Formato de firma por defecto En las nuevas versiones del Cliente @firma el formato de firma por defecto es CAdES. Si su herramienta no configurase el formato de firma expl\u00edcitamente mediante el m\u00e9todo setSignatureFormat(String), deber\u00e1 introducir esta sentencia indicando el formato que desee utilizar o modificar el formato de firma por defecto por medio de la variable signatureFormat, del fichero de configuraci\u00f3n \u201c constantes.js\u201d. Cadena de certificaci\u00f3n en firmas XAdES En las nuevas versiones del Cliente @firma se inserta la cadena de certificaci\u00f3n completa en las firmas XAdES generadas. Este es el comportamiento recomendado para firmas XAdES, pero impide la correcta validaci\u00f3n de las firmas con versiones de la Plataforma @firma anteriores a la 5.5. Para desactivar este comportamiento es necesario establecer el par\u00e1metro extra \u201cincludeOnlySignningCertificate\u201d al valor \u201ctrue\u201d. Podemos hacer esto mediante la siguiente llamada: clienteFirma.addExtraParam(\u201cincludeOnlySignningCertificate\u201d, \u201ctrue\u201d); Configurar pol\u00edtica de firma La \u00faltima versi\u00f3n del Cliente @firma amplia las opciones para la configuraci\u00f3n de la pol\u00edtica de firma de las firmas avanzadas generadas. En versiones anteriores el m\u00e9todo setPolicy(String, String, String), recib\u00eda el identificador, la descripci\u00f3n y el cualificador de la pol\u00edtica de firma que se desease establecer. En su \u00faltima versi\u00f3n, el Cliente @firma agrega un cuarto par\u00e1metro que es la huella digital (hash) SHA1 de la pol\u00edtica de firma. Este hash se debe introducir en base 64. Ahora el m\u00e9todo setPolicy tiene la forma: void setPolicy(String identifier, String description, String qualifier, String hashB64); Un ejemplo de establecimiento de pol\u00edtica es: clienteFirma.setPolicy(\"urn:oid:2.16.724.1.3.1.1.2.1.8\", \u201cPolitica de la AGE\u201d, \u201chttp://administracionelectronica.gob.es/es/ctt/politicafirma/politica_firma_AGE_v1_8.pdf\u201d, \u201c7SxX3erFuH31TvAw9LZ70N7p1vA=\u201d); As\u00ed mismo, ahora tambi\u00e9n es posible indicar como identificador de la pol\u00edtica una URL, URN u OID. Cifrado de datos En versiones anteriores del Cliente, el comportamiento de los m\u00e9todos de entrada y salida de las funciones de cifrado ten\u00edan un comportamiento err\u00e1tico. Por ejemplo, el m\u00e9todo setPlainData(String) para indicar los datos que se desean cifrar recib\u00eda el texto en claro para cifrar, mientras que getPlainData() devolv\u00eda este texto en base 64. Ahora todas las entradas y salidas de datos realizadas con los siguientes m\u00e9todos se realizar\u00e1n en base 64: setPlainData(String) setCipherData(String) getPlainData() getCipherData() Si actualmente invoca a alguno de estos m\u00e9todos pas\u00e1ndole o recibiendo los datos en texto claro utilice los m\u00e9todos getBase64FromText(String, String) y getTextFromBase64(String, String) del cliente para realizar las transformaciones oportunas. Configuraci\u00f3n del fichero de entrada Existen una serie de m\u00e9todos de operaci\u00f3n que especifican por par\u00e1metro el fichero que se desea procesar, en lugar de tomar el fichero configurado mediante setFileuri(String) o setFileuriBase64Encoded(String). Adicionalmente, estos m\u00e9todos modificaban la configuraci\u00f3n del Cliente de tal forma que los ficheros especificados quedaban establecidos como ficheros de entrada para el resto de operaciones. Los m\u00e9todos en cuesti\u00f3n son: getFileBase64Encoded(String strUri, boolean showProgress) cipherFile(String strUri) decipherFile(String strUri) signAndPackFile(String uri) En la nueva versi\u00f3n del Cliente @firma, los m\u00e9todos mencionados no alteran la configuraci\u00f3n del fichero de entrada establecido en el Cliente. Por ejemplo, dado el siguiente c\u00f3digo: \u2026 clienteFirma.setFileuri(\u201cfoo.txt\u201d); clienteFirma.getFileBase64Encoded(\u201cbar.txt\u201d, false); clienteFirma.sign(); \u2026 El nuevo Cliente @firma firmar\u00eda el fichero \u201cfoo.txt\u201d, mientras que las versiones anteriores firmar\u00edan \u201cbar.txt\u201d. Configuraci\u00f3n de los destinatarios de los sobres electr\u00f3nicos Antes exist\u00eda un solo m\u00e9todo para configurar los destinatarios de los sobres electr\u00f3nicos: setRecipientsToCMS(String): Este m\u00e9todo defin\u00eda todos los destinatarios del sobre de una sola vez. Como par\u00e1metro recib\u00eda el listado de rutas locales de los certificados de los destinatarios separadas por \u2018\\n\u2019. En la nueva versi\u00f3n, existen dos m\u00e9todos adicionales para indicar los destinatarios: addRecipientToCMS(String): Permite agregar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. removeRecipientToCMS(String): Permite eliminar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. El m\u00e9todo removeRecipientToCMS elimina cualquier certificado de la lista, ya haya sido cargado mediante addRecipientToCMS o setRecipientsToCMS. Si deseamos eliminar todos los certificados podemos utilizar setRecipientsToCMS(null). Codificaci\u00f3n de textos Los m\u00e9todos getBase64FromText(String) y getTextFromBase64(String) se sustituyen por una versi\u00f3n que permite seleccionar la codificaci\u00f3n de texto a utilizar. La declaraci\u00f3n de los nuevos m\u00e9todos es: String getBase64FromText(String plainText, String charsetName); String getTextFromBase64(String b64, String charsetName); Si no se establece el par\u00e1metro charsetName se tomar\u00e1 la codificaci\u00f3n por defecto del sistema. En caso de no saber con certeza la codificaci\u00f3n del texto, se deber\u00e1 indicar null. En el caso de tratarse un XML debe indicarse siempre null para que se autodetecte la codificaci\u00f3n del XML. Restricciones public String Firma(String datos) Se elimina el m\u00e9todo deprecado Firma(String). Este m\u00e9todo permit\u00eda la compatibilidad del Cliente con la Plataforma @firma versi\u00f3n 4. Este m\u00e9todo recib\u00eda una cadena en base 64 compuesta por un c\u00f3digo de operaci\u00f3n, el valor de transacci\u00f3n y hasta un par de par\u00e1metros, todos concatenados por el separador almohadilla (\u2018#\u2019): OP#TRANS#PARAM1#PARAM2 Los valores permitidos para el par\u00e1metro de operaci\u00f3n (OP) eran: 0: Operaci\u00f3n de Firma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos firmar y se ignora PARAM2. 1: Operaci\u00f3n de Cofirma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos cofirmar y PARAM2 es la firma electr\u00f3nica original. 2: Operaci\u00f3n de Contrafirma de nodos. Para esta operaci\u00f3n PARAM1 es la firma que deseamos contrafirmar y PARAM2 es el listado de \u00edndices tal como los recibe el m\u00e9todo setSignersToCounterSign(String). El resultado de la operaci\u00f3n es la cadena: cert=CERT;enc=SIGN En esta cadena CERT es el certificado en base 64 utilizado para la firma y SIGN es el resultado de la operaci\u00f3n en base 64. En cada operaci\u00f3n se declaraba un atributo firmado adicional con resto a los que aparecen por regla general en las firmas CMS. Este ser\u00eda el atributo \u201c2.5.4.45\u201d con el valor \u201cTRANS\u201d. Para imitar este comportamiento con el Cliente, se deber\u00edan realizar las siguientes acciones: Descodificar el Base64 del par\u00e1metro que recib\u00eda el m\u00e9todo y obtener cada uno de sus componentes (OP, TRANS, PARAM1 y PARAM2). Configurar el formato de firma CMS, el algoritmo de firma SHA1withRSA y el modo de firma expl\u00edcito, mediante las sentencias: clienteFirma .setSignatureFormat(\u201cCMS\u201d); clienteFirma .setSignatureAlgorithm(\u201cSHA1withRSA\u201d); clienteFirma .setSignatureMode(\u201cexplicit); Configurar el n\u00famero de transacci\u00f3n como atributo firmado adicional: clienteFirma .addSignedAttribute(\u201c2.2.4.45\u201d, TRANS); Configurar los datos de entrada, hash, firma y firmantes seg\u00fan la operaci\u00f3n inidicada (OP) y ejecutar la operaci\u00f3n: switch (OP) { // Firma case 0: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); clienteFirma .sign(); break ; // Cofirma (Firma en paralelo) case 1: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); //Establecemos la firma clienteFirma .setElectronicSignature( PARAM2 ); //Cofirmamos clienteFirma .coSign(); break ; // Contrafirma (Firma en cascada) case 2: //Establecemos la firma clienteFirma .setElectronicSignature( PARAM1 ); //Establecemos los firmantes que se desean contrafirmar clienteFirma .setSignersToCounterSign( PARAM2 ); // Contrafirmamos clienteFirma .counterSignIndexes(); break ; } Recuperar el resultado de la operaci\u00f3n y el certificado utilizado para, si se desea, componer la cadena de salida. clienteFirma .getSignCertificateBase64Encoded(); clienteFirma .getSignatureBase64Encoded(); public String getCMSData() Se elimina el m\u00e9todo en favor del equivalente getB64Data(). Migraci\u00f3n desde el Cliente 3.1/3.1.1 Mientras que en estas versiones exist\u00eda la posibilidad de seleccionar el modo de despliegue del Cliente: tradicional y JNLP. En la nueva versi\u00f3n del Cliente el despliegue siempre se realiza mediante JNLP y las dependencias s\u00f3lo se instalan en caso de ser necesarias. Durante la carga del Cliente, si se detecta que el entorno puede requerir la instalaci\u00f3n de dependencias del Cliente, se cargar\u00e1 un Bootloader encargado de comprobar si estas dependencias est\u00e1n cubiertas o es necesario instalarlas. La carga del Bootloader, las comprobaciones y la instalaci\u00f3n de dependencias son autom\u00e1ticas y el integrador no tiene que hacer nada al respecto. Cuando el sistema del usuario no es susceptible de requerir dependencias adicionales, se cargar\u00e1 directamente el Cliente y no el Bootloader. En la nueva versi\u00f3n del Cliente no existe el applet ArchDetector que exist\u00eda en la versi\u00f3n 3.1. Para actualizar el Cliente @firma a la \u00faltima versi\u00f3n y adaptar nuestra aplicaci\u00f3n Web deberemos seguir los siguientes pasos: Sustituir la totalidad de ficheros de despliegue (bibliotecas JavaScript, ficheros JNLP, archivos JAR, ficheros ZIP, ficheros de propiedades y cualquier otro ficheros distribuido con el Cliente @firma) del cliente por las de la \u00faltima versi\u00f3n. Durante este proceso, al sustituir el fichero \u201c constantes.js \u201d, deberemos asegurarnos de que las constantes del nuevo cliente tienen asignadas el mismo valor que el del cliente desplegado. Consulte el apartado Despliegue del Cliente @firma para m\u00e1s detalle. Revisar si alguno de los m\u00e9todos utilizados ha cambiado su comportamiento seg\u00fan se indica en el apartado Cambios en los procedimientos para asegurarnos de que no afecta a nuestra aplicaci\u00f3n. En caso de afectarnos, proceder tal como se indica. Comprobar que no hacemos uso de ninguno de los m\u00e9todos eliminados del Cliente. De hacerlo, lo sustituiremos seg\u00fan se indica en el apartado Restricciones , o por un mecanismo alternativo si no existe alternativa. Despliegue del Cliente @firma Importaci\u00f3n de librer\u00edas JavaScript Las librer\u00edas JavaScript del nuevo cliente @firma han sufrido ciertos cambios desde sus versiones anteriores, por lo que deber\u00e1 revisarse el modo de uso desde sus p\u00e1ginas Web HTML. Estos cambios se han realizado para mejorar la compatibilidad con ciertas versiones del entorno de ejecuci\u00f3n de Java (JRE), pero sobre todo para garantizar el funcionamiento correcto con versiones futuras de JRE, navegadores Web y sistemas operativos, especialmente en las nuevas arquitecturas de 64 bits. El integrador ya no necesita gestionar la instalaci\u00f3n y actualizaci\u00f3n del Cliente, dado que estos procesos se gestionan de forma completamente autom\u00e1tica. Debe retirar cualquier referencia en su c\u00f3digo HTML a los siguientes m\u00e9todos JavaScript o par\u00e1metros: instalar() desinstalar() isActualizado() actualizar() isInstalado() getDirectorioInstalacion() Variable installDirectory en constantes.js Variable instalador en instalador.js Los JavaScript que necesita importar en sus p\u00e1ginas HTML pueden igualmente haber cambiado. Aseg\u00farese de que no importa ning\u00fan JavaScript que no exista en el directorio de despliegue o en su subdirectorio common-js. Consulte las p\u00e1ginas Web de ejemplo para determinar que ficheros JavaScript es necesario importar para las distintas operaciones de criptograf\u00eda y firma electr\u00f3nica. Note especialmente que se han eliminado las librer\u00edas JavaScript \u201c runApplet.js \u201d y \u201c time.js \u201d. Es obligatorio eliminar las esperas expl\u00edcitas a la carga del Applet . Esto es, las sentencias que hacen uso de los m\u00e9todos de la biblioteca \u201ctime.js\u201d y la variable clienteFirmaCargado. Por ejemplo: whenTry(\"clienteFirmaCargado == true\", \"clienteFirma.setCipherAlgorithm('\" + cipherAlgorithm + \"')\", \"No se ha podido iniciar el Applet de firma.\"); Por regla general, el navegador Web no termina la carga de la p\u00e1gina hasta que no se finaliza la carga del Cliente, por lo que no suele ser necesario agregar sentencias de este tipo. Cambios en los procedimientos Confirmaciones de acceso a disco A partir de la versi\u00f3n 3.3, el Cliente @firma pide confirmaci\u00f3n al usuario mediante un di\u00e1logo modal por cada acceso a disco que se realice sin que este lo haya indicado expl\u00edcitamente. Este comportamiento no debe afectar a las aplicaciones desplegadas salvo en caso particulares en el uso del modo de firma masiva program\u00e1tica. Si su aplicaci\u00f3n utiliza el modo de firma masiva program\u00e1tica para la firma masiva de ficheros, aseg\u00farese de utilizar el m\u00e9todo massiveSignatureSign(String) para la ejecuci\u00f3n de las firmas. Si su aplicaci\u00f3n utiliza el modo de firma masiva program\u00e1tica y almacena las firmas resultantes en disco, eval\u00fae el uso del mecanismo de firma de directorios o el usuario se ver\u00e1 obligado a aceptar el guardado individual de cada una de las firmas resultantes. Formato de firma por defecto En las nuevas versiones del Cliente @firma el formato de firma por defecto es CAdES. Si su herramienta no configurase el formato de firma expl\u00edcitamente mediante el m\u00e9todo setSignatureFormat(String), deber\u00e1 introducir esta sentencia indicando el formato que desee utilizar o modificar el formato de firma por defecto por medio de la variable signatureFormat, del fichero de configuraci\u00f3n \u201c constantes.js\u201d. Cadena de certificaci\u00f3n en firmas XAdES En las nuevas versiones del Cliente @firma se inserta la cadena de certificaci\u00f3n completa en las firmas XAdES generadas. Este es el comportamiento recomendado para firmas XAdES, pero impide la correcta validaci\u00f3n de las firmas con versiones de la Plataforma @firma anteriores a la 5.5. Para desactivar este comportamiento es necesario establecer el par\u00e1metro extra \u201cincludeOnlySignningCertificate\u201d al valor \u201ctrue\u201d. Podemos hacer esto mediante la siguiente llamada: clienteFirma.addExtraParam(\u201cincludeOnlySignningCertificate\u201d, \u201ctrue\u201d); Configurar pol\u00edtica de firma La \u00faltima versi\u00f3n del Cliente @firma amplia las opciones para la configuraci\u00f3n de la pol\u00edtica de firma de las firmas avanzadas generadas. En versiones anteriores el m\u00e9todo setPolicy(String, String, String), recib\u00eda el identificador, la descripci\u00f3n y el cualificador de la pol\u00edtica de firma que se desease establecer. En su \u00faltima versi\u00f3n, el Cliente @firma agrega un cuarto par\u00e1metro que es la huella digital (hash) SHA1 de la pol\u00edtica de firma. Este hash se debe introducir en base 64. Ahora el m\u00e9todo setPolicy tiene la forma: void setPolicy(String identifier, String description, String qualifier, String hashB64); Un ejemplo de establecimiento de pol\u00edtica es: clienteFirma.setPolicy(\"urn:oid:2.16.724.1.3.1.1.2.1.8\", \u201cPolitica de la AGE\u201d, \u201chttp://administracionelectronica.gob.es/es/ctt/politicafirma/politica_firma_AGE_v1_8.pdf\u201d, \u201c7SxX3erFuH31TvAw9LZ70N7p1vA=\u201d); As\u00ed mismo, ahora tambi\u00e9n es posible indicar como identificador de la pol\u00edtica una URL, URN u OID. Cifrado de datos En versiones anteriores del Cliente, el comportamiento de los m\u00e9todos de entrada y salida de las funciones de cifrado ten\u00edan un comportamiento err\u00e1tico. Por ejemplo, el m\u00e9todo setPlainData(String) para indicar los datos que se desean cifrar recib\u00eda el texto en claro para cifrar, mientras que getPlainData() devolv\u00eda este texto en base 64. En la nueva versi\u00f3n del Cliente @firma todas las entradas y salidas de datos realizadas con los siguientes m\u00e9todos se realizar\u00e1n en base 64: setPlainData(String) setCipherData(String) getPlainData() getCipherData() Si actualmente invoca a alguno de estos m\u00e9todos pas\u00e1ndole o recibiendo los datos en texto claro utilice los m\u00e9todos getBase64FromText(String, String) y getTextFromBase64(String, String) del cliente para realizar las transformaciones oportunas. Configuraci\u00f3n de los destinatarios de los sobres electr\u00f3nicos Antes exist\u00eda un solo m\u00e9todo para configurar los destinatarios de los sobres electr\u00f3nicos: setRecipientsToCMS(String): Este m\u00e9todo defin\u00eda todos los destinatarios del sobre de una sola vez. Como par\u00e1metro recib\u00eda el listado de rutas locales de los certificados de los destinatarios separadas por \u2018\\n\u2019. En la nueva versi\u00f3n, existen dos m\u00e9todos adicionales para indicar los destinatarios: addRecipientToCMS(String): Permite agregar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. removeRecipientToCMS(String): Permite eliminar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. El m\u00e9todo removeRecipientToCMS elimina cualquier certificado de la lista, ya haya sido cargado mediante addRecipientToCMS o setRecipientsToCMS. Si deseamos eliminar todos los certificados podemos utilizar setRecipientsToCMS(null). Codificaci\u00f3n de textos Los m\u00e9todos getBase64FromText(String) y getTextFromBase64(String) se sustituyen por una versi\u00f3n que permite seleccionar la codificaci\u00f3n de texto a utilizar. La declaraci\u00f3n de los nuevos m\u00e9todos es: String getBase64FromText(String plainText, String charsetName); String getTextFromBase64(String b64, String charsetName); Si no se establece el par\u00e1metro charsetName se tomar\u00e1 la codificaci\u00f3n por defecto del sistema. En caso de no saber con certeza la codificaci\u00f3n del texto, se deber\u00e1 indicar null. En el caso de tratarse un XML debe indicarse siempre null para que se autodetecte la codificaci\u00f3n del XML. Restricciones Funciones y m\u00e9todos eliminados en el Applet Java public String Firma(String datos) Se elimina el m\u00e9todo deprecado Firma(String). Este m\u00e9todo permit\u00eda la compatibilidad del Cliente con la Plataforma @firma versi\u00f3n 4. Este m\u00e9todo recib\u00eda una cadena en base 64 compuesta por un c\u00f3digo de operaci\u00f3n, el valor de transacci\u00f3n y hasta un par de par\u00e1metros, todos concatenados por el separador almohadilla (\u2018#\u2019): OP#TRANS#PARAM1#PARAM2 Los valores permitidos para el par\u00e1metro de operaci\u00f3n (OP) eran: 0: Operaci\u00f3n de Firma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos firmar y se ignora PARAM2. 1: Operaci\u00f3n de Cofirma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos cofirmar y PARAM2 es la firma electr\u00f3nica original. 2: Operaci\u00f3n de Contrafirma de nodos. Para esta operaci\u00f3n PARAM1 es la firma que deseamos contrafirmar y PARAM2 es el listado de \u00edndices tal como los recibe el m\u00e9todo setSignersToCounterSign(String). El resultado de la operaci\u00f3n es la cadena: cert=CERT;enc=SIGN En esta cadena CERT es el certificado en base 64 utilizado para la firma y SIGN es el resultado de la operaci\u00f3n en base 64. En cada operaci\u00f3n se declaraba un atributo firmado adicional con resto a los que aparecen por regla general en las firmas CMS. Este ser\u00eda el atributo \u201c2.5.4.45\u201d con el valor \u201cTRANS\u201d. Para imitar este comportamiento con el Cliente, se deber\u00edan realizar las siguientes acciones: Descodificar el Base64 del par\u00e1metro que recib\u00eda el m\u00e9todo y obtener cada uno de sus componentes (OP, TRANS, PARAM1 y PARAM2). Configurar el formato de firma CMS, el algoritmo de firma SHA1withRSA y el modo de firma expl\u00edcito, mediante las sentencias: clienteFirma .setSignatureFormat(\u201cCMS\u201d); clienteFirma .setSignatureAlgorithm(\u201cSHA1withRSA\u201d); clienteFirma .setSignatureMode(\u201cexplicit); Configurar el n\u00famero de transacci\u00f3n como atributo firmado adicional: clienteFirma .addSignedAttribute(\u201c2.2.4.45\u201d, TRANS); Configurar los datos de entrada, hash, firma y firmantes seg\u00fan la operaci\u00f3n inidicada (OP) y ejecutar la operaci\u00f3n: switch (OP) { // Firma case 0: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); clienteFirma .sign(); break ; // Cofirma (Firma en paralelo) case 1: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); //Establecemos la firma clienteFirma .setElectronicSignature( PARAM2 ); //Cofirmamos clienteFirma .coSign(); break ; // Contrafirma (Firma en cascada) case 2: //Establecemos la firma clienteFirma .setElectronicSignature( PARAM1 ); //Establecemos los firmantes que se desean contrafirmar clienteFirma .setSignersToCounterSign( PARAM2 ); // Contrafirmamos clienteFirma .counterSignIndexes(); break ; } Recuperar el resultado de la operaci\u00f3n y el certificado utilizado para, si se desea, componer la cadena de salida. clienteFirma .getSignCertificateBase64Encoded(); clienteFirma .getSignatureBase64Encoded(); public String getCMSData() Se elimina el m\u00e9todo en favor del equivalente getB64Data(). public void changeLanguage(String) Se elimina el m\u00e9todo. En su lugar, para establecer el idioma, podemos proporcionar como par\u00e1metros del applet: language: C\u00f3digo de idioma conforme a la ISO 639. Por ejemplo: \u201ces\u201d, \u201cen\u201d, \u201car\u201d, \u201cde\u201d\u2026 country: C\u00f3digo de pa\u00eds o regi\u00f3n conforme a la ISO 3166. Por ejemplo, \u201cES\u201d, \u201cUK\u201d, \u201cUS\u201d, \u201cDE\u201d\u2026 variant: C\u00f3digo de variante de libre uso. Los tres par\u00e1metros son opcionales. S\u00f3lo se tendr\u00e1 en cuenta el par\u00e1metro country si tambi\u00e9n se ha proporcionado el par\u00e1metro language; y el par\u00e1metro variant si se han indicado los otros dos. Migraci\u00f3n desde el Cliente 3.2 En la nueva versi\u00f3n del Cliente s\u00f3lo se instalan las dependencias en caso de ser necesarias. Durante la carga del Cliente, si se detecta que el entorno puede requerir la instalaci\u00f3n de dependencias del Cliente, se cargar\u00e1 un Bootloader encargado de comprobar si estas dependencias est\u00e1n cubiertas o es necesario instalarlas. La carga del Bootloader, las comprobaciones y la instalaci\u00f3n de dependencias son autom\u00e1ticas y el integrador no tiene que hacer nada al respecto. Cuando el sistema del usuario no es susceptible de requerir dependencias adicionales, se cargar\u00e1 directamente el Cliente y no el Bootloader. Para actualizar el Cliente @firma a la \u00faltima versi\u00f3n y adaptar nuestra aplicaci\u00f3n Web deberemos seguir los siguientes pasos: Sustituir la totalidad de ficheros de despliegue (bibliotecas JavaScript, ficheros JNLP, archivos JAR, ficheros ZIP, ficheros de propiedades y cualquier otro ficheros distribuido con el Cliente @firma) del cliente por las de la \u00faltima versi\u00f3n. Durante este proceso, al sustituir el fichero \u201c constantes.js \u201d, deberemos asegurarnos de que las constantes del nuevo cliente tienen asignadas el mismo valor que el del cliente desplegado. Consulte el apartado Despliegue del Cliente @firma para m\u00e1s detalle. Revisar si alguno de los m\u00e9todos utilizados ha cambiado su comportamiento seg\u00fan se indica en el apartado Cambios en los procedimientos para asegurarnos de que no afecta a nuestra aplicaci\u00f3n. En caso de afectarnos, proceder tal como se indica. Comprobar que no hacemos uso de ninguno de los m\u00e9todos eliminados del Cliente. De hacerlo, lo sustituiremos seg\u00fan se indica en el apartado Restricciones , o por un mecanismo alternativo si no existe alternativa. Despliegue del Cliente @firma Importaci\u00f3n de librer\u00edas JavaScript Las librer\u00edas JavaScript del nuevo cliente @firma han sufrido ciertos cambios desde sus versiones anteriores, por lo que deber\u00e1 revisarse el modo de uso desde sus p\u00e1ginas Web HTML. Estos cambios se han realizado para mejorar la compatibilidad con ciertas versiones del entorno de ejecuci\u00f3n de Java (JRE), pero sobre todo para garantizar el funcionamiento correcto con versiones futuras de JRE, navegadores Web y sistemas operativos, especialmente en las nuevas arquitecturas de 64 bits. El integrador ya no necesita gestionar la instalaci\u00f3n y actualizaci\u00f3n del Cliente, dado que estos procesos se gestionan de forma completamente autom\u00e1tica. Debe retirar cualquier referencia en su c\u00f3digo HTML al Bootloader y a los siguientes m\u00e9todos JavaScript o par\u00e1metros: instalar() desinstalar() isActualizado() actualizar() isInstalado() getDirectorioInstalacion() Variable installDirectory en constantes.js Variable instalador en instalador.js Los JavaScript que necesita importar en sus p\u00e1ginas HTML pueden igualmente haber cambiado. Aseg\u00farese de que no importa ning\u00fan JavaScript que no exista en el directorio de despliegue o en su subdirectorio common-js. Consulte las p\u00e1ginas Web de ejemplo para determinar que ficheros JavaScript es necesario importar para las distintas operaciones de criptograf\u00eda y firma electr\u00f3nica. Note especialmente que se han eliminado las librer\u00edas JavaScript \u201c runApplet.js \u201d y \u201c time.js \u201d. Es obligatorio eliminar las esperas expl\u00edcitas a la carga del Applet . Esto es, las sentencias que hacen uso de los m\u00e9todos de la biblioteca \u201ctime.js\u201d y la variable clienteFirmaCargado. Por ejemplo: whenTry(\"clienteFirmaCargado == true\", \"clienteFirma.setCipherAlgorithm('\" + cipherAlgorithm + \"')\", \"No se ha podido iniciar el Applet de firma.\"); Por regla general, el navegador Web no termina la carga de la p\u00e1gina hasta que no se finaliza la carga del Cliente, por lo que no suele ser necesario agregar sentencias de este tipo. Cambios en los procedimientos Confirmaciones de acceso a disco A partir de la versi\u00f3n 3.3, el Cliente @firma pide confirmaci\u00f3n al usuario mediante un di\u00e1logo modal por cada acceso a disco que se realice sin que este lo haya indicado expl\u00edcitamente. Este comportamiento no debe afectar a las aplicaciones desplegadas salvo en caso particulares en el uso del modo de firma masiva program\u00e1tica. Si su aplicaci\u00f3n utiliza el modo de firma masiva program\u00e1tica para la firma masiva de ficheros, aseg\u00farese de utilizar el m\u00e9todo massiveSignatureSign(String) para la ejecuci\u00f3n de las firmas. Si su aplicaci\u00f3n utiliza el modo de firma masiva program\u00e1tica y almacena las firmas resultantes en disco, eval\u00fae el uso del mecanismo de firma de directorios o el usuario se ver\u00e1 obligado a aceptar el guardado individual de cada una de las firmas resultantes. Formato de firma por defecto En las nuevas versiones del Cliente @firma el formato de firma por defecto es CAdES. Si su herramienta no configurase el formato de firma expl\u00edcitamente mediante el m\u00e9todo setSignatureFormat(String), deber\u00e1 introducir esta sentencia indicando el formato que desee utilizar o modificar el formato de firma por defecto por medio de la variable signatureFormat, del fichero de configuraci\u00f3n \u201c constantes.js\u201d. Cadena de certificaci\u00f3n en firmas XAdES En las nuevas versiones del Cliente @firma se inserta la cadena de certificaci\u00f3n completa en las firmas XAdES generadas. Este es el comportamiento recomendado para firmas XAdES, pero impide la correcta validaci\u00f3n de las firmas con versiones de la Plataforma @firma anteriores a la 5.5. Para desactivar este comportamiento es necesario establecer el par\u00e1metro extra \u201cincludeOnlySignningCertificate\u201d al valor \u201ctrue\u201d. Podemos hacer esto mediante la siguiente llamada: clienteFirma.addExtraParam(\u201cincludeOnlySignningCertificate\u201d, \u201ctrue\u201d); Configurar pol\u00edtica de firma La \u00faltima versi\u00f3n del Cliente @firma amplia las opciones para la configuraci\u00f3n de la pol\u00edtica de firma de las firmas avanzadas generadas. En versiones anteriores el m\u00e9todo setPolicy(String, String, String), recib\u00eda el identificador, la descripci\u00f3n y el cualificador de la pol\u00edtica de firma que se desease establecer. En su \u00faltima versi\u00f3n, el Cliente @firma agrega un cuarto par\u00e1metro que es la huella digital (hash) SHA1 de la pol\u00edtica de firma. Este hash se debe introducir en base 64. Ahora el m\u00e9todo setPolicy tiene la forma: void setPolicy(String identifier, String description, String qualifier, String hashB64); Un ejemplo de establecimiento de pol\u00edtica es: clienteFirma.setPolicy(\"urn:oid:2.16.724.1.3.1.1.2.1.8\", \u201cPolitica de la AGE\u201d, \u201chttp://administracionelectronica.gob.es/es/ctt/politicafirma/politica_firma_AGE_v1_8.pdf\u201d, \u201c7SxX3erFuH31TvAw9LZ70N7p1vA=\u201d); As\u00ed mismo, ahora tambi\u00e9n es posible indicar como identificador de la pol\u00edtica una URL, URN u OID. Cifrado de datos En versiones anteriores del Cliente, el comportamiento de los m\u00e9todos de entrada y salida de las funciones de cifrado ten\u00edan un comportamiento err\u00e1tico. Por ejemplo, el m\u00e9todo setPlainData(String) para indicar los datos que se desean cifrar recib\u00eda el texto en claro para cifrar, mientras que getPlainData() devolv\u00eda este texto en base 64. En la nueva versi\u00f3n del Cliente @firma todas las entradas y salidas de datos realizadas con los siguientes m\u00e9todos se realizar\u00e1n en base 64: setPlainData(String) setCipherData(String) getPlainData() getCipherData() Si actualmente invoca a alguno de estos m\u00e9todos pas\u00e1ndole o recibiendo los datos en texto claro utilice los m\u00e9todos getBase64FromText(String, String) y getTextFromBase64(String, String) del cliente para realizar las transformaciones oportunas. Codificaci\u00f3n de textos Los m\u00e9todos getBase64FromText(String) y getTextFromBase64(String) se sustituyen por una versi\u00f3n que permite seleccionar la codificaci\u00f3n de texto a utilizar. La declaraci\u00f3n de los nuevos m\u00e9todos es: String getBase64FromText(String plainText, String charsetName); String getTextFromBase64(String b64, String charsetName); Si no se establece el par\u00e1metro charsetName se tomar\u00e1 la codificaci\u00f3n por defecto del sistema. En caso de no saber con certeza la codificaci\u00f3n del texto, se deber\u00e1 indicar null. En el caso de tratarse un XML debe indicarse siempre null para que se autodetecte la codificaci\u00f3n del XML. Restricciones Funciones y m\u00e9todos eliminados en el Applet Java public String Firma(String datos) Se elimina el m\u00e9todo deprecado Firma(String). Este m\u00e9todo permit\u00eda la compatibilidad del Cliente con la Plataforma @firma versi\u00f3n 4. Este m\u00e9todo recib\u00eda una cadena en base 64 compuesta por un c\u00f3digo de operaci\u00f3n, el valor de transacci\u00f3n y hasta un par de par\u00e1metros, todos concatenados por el separador almohadilla (\u2018#\u2019): OP#TRANS#PARAM1#PARAM2 Los valores permitidos para el par\u00e1metro de operaci\u00f3n (OP) eran: 0: Operaci\u00f3n de Firma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos firmar y se ignora PARAM2. 1: Operaci\u00f3n de Cofirma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos cofirmar y PARAM2 es la firma electr\u00f3nica original. 2: Operaci\u00f3n de Contrafirma de nodos. Para esta operaci\u00f3n PARAM1 es la firma que deseamos contrafirmar y PARAM2 es el listado de \u00edndices tal como los recibe el m\u00e9todo setSignersToCounterSign(String). El resultado de la operaci\u00f3n es la cadena: cert=CERT;enc=SIGN En esta cadena CERT es el certificado en base 64 utilizado para la firma y SIGN es el resultado de la operaci\u00f3n en base 64. En cada operaci\u00f3n se declaraba un atributo firmado adicional con resto a los que aparecen por regla general en las firmas CMS. Este ser\u00eda el atributo \u201c2.5.4.45\u201d con el valor \u201cTRANS\u201d. Para imitar este comportamiento con el Cliente, se deber\u00edan realizar las siguientes acciones: Descodificar el Base64 del par\u00e1metro que recib\u00eda el m\u00e9todo y obtener cada uno de sus componentes (OP, TRANS, PARAM1 y PARAM2). Configurar el formato de firma CMS, el algoritmo de firma SHA1withRSA y el modo de firma expl\u00edcito, mediante las sentencias: clienteFirma .setSignatureFormat(\u201cCMS\u201d); clienteFirma .setSignatureAlgorithm(\u201cSHA1withRSA\u201d); clienteFirma .setSignatureMode(\u201cexplicit); Configurar el n\u00famero de transacci\u00f3n como atributo firmado adicional: clienteFirma .addSignedAttribute(\u201c2.2.4.45\u201d, TRANS); Configurar los datos de entrada, hash, firma y firmantes seg\u00fan la operaci\u00f3n inidicada (OP) y ejecutar la operaci\u00f3n: switch (OP) { // Firma case 0: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); clienteFirma .sign(); break ; // Cofirma (Firma en paralelo) case 1: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); //Establecemos la firma clienteFirma .setElectronicSignature( PARAM2 ); //Cofirmamos clienteFirma .coSign(); break ; // Contrafirma (Firma en cascada) case 2: //Establecemos la firma clienteFirma .setElectronicSignature( PARAM1 ); //Establecemos los firmantes que se desean contrafirmar clienteFirma .setSignersToCounterSign( PARAM2 ); // Contrafirmamos clienteFirma .counterSignIndexes(); break ; } Recuperar el resultado de la operaci\u00f3n y el certificado utilizado para, si se desea, componer la cadena de salida. clienteFirma .getSignCertificateBase64Encoded(); clienteFirma .getSignatureBase64Encoded(); public String getCMSData() Se elimina el m\u00e9todo en favor del equivalente getB64Data(). public void changeLanguage(String) Se elimina el m\u00e9todo. En su lugar, para establecer el idioma, podemos proporcionar como par\u00e1metros del applet: language: C\u00f3digo de idioma conforme a la ISO 639. Por ejemplo: \u201ces\u201d, \u201cen\u201d, \u201car\u201d, \u201cde\u201d\u2026 country: C\u00f3digo de pa\u00eds o regi\u00f3n conforme a la ISO 3166. Por ejemplo, \u201cES\u201d, \u201cUK\u201d, \u201cUS\u201d, \u201cDE\u201d\u2026 variant: C\u00f3digo de variante de libre uso. Los tres par\u00e1metros son opcionales. S\u00f3lo se tendr\u00e1 en cuenta el par\u00e1metro country si tambi\u00e9n se ha proporcionado el par\u00e1metro language; y el par\u00e1metro variant si se han indicado los otros dos. Migraci\u00f3n desde el Cliente 3.3 En la nueva versi\u00f3n del Cliente es una revisi\u00f3n menor desde el Cliente 3.3 que corrige algunos bugs del mismo, a\u00f1ade la compatibilidad con las \u00faltimas versiones de Firefox y agrega nuevas opciones de configuraci\u00f3n. As\u00ed pues, la migraci\u00f3n del Cliente 3.3 al 3.1 es pr\u00e1cticamente instant\u00e1nea y s\u00f3lo es necesario, si lo deseamos, hacer cambios para la correcci\u00f3n de su comportamiento mediante las nuevas propiedades que incorpora. Para actualizar el Cliente @firma a la \u00faltima versi\u00f3n y adaptar nuestra aplicaci\u00f3n Web deberemos seguir los siguientes pasos: Sustituir la totalidad de ficheros de despliegue (bibliotecas JavaScript, ficheros JNLP, archivos JAR, ficheros ZIP, ficheros de propiedades y cualquier otro ficheros distribuido con el Cliente @firma) del cliente por las de la \u00faltima versi\u00f3n. Durante este proceso, al sustituir el fichero \u201c constantes.js \u201d, deberemos asegurarnos de que las constantes del nuevo cliente tienen asignadas el mismo valor que el del cliente desplegado. Revisar si alguno de los m\u00e9todos utilizados ha cambiado su comportamiento seg\u00fan se indica en el apartado Cambios en los procedimientos para asegurarnos de que no afecta a nuestra aplicaci\u00f3n. En caso de afectarnos, proceder tal como se indica. Cambios en los procedimientos Cadena de certificaci\u00f3n en firmas XAdES En las nuevas versiones del Cliente @firma se inserta la cadena de certificaci\u00f3n completa en las firmas XAdES generadas. Este es el comportamiento recomendado para firmas XAdES, pero impide la correcta validaci\u00f3n de las firmas con versiones de la Plataforma @firma anteriores a la 5.5. Para desactivar este comportamiento es necesario establecer el par\u00e1metro extra \u201cincludeOnlySignningCertificate\u201d al valor \u201ctrue\u201d. Podemos hacer esto mediante la siguiente llamada: clienteFirma.addExtraParam(\u201cincludeOnlySignningCertificate\u201d, \u201ctrue\u201d); Glosario de t\u00e9rminos Firma electr\u00f3nica Es el conjunto de datos, en forma electr\u00f3nica, anejos a otros datos electr\u00f3nicos o asociados funcionalmente con ellos, utilizados como medio para identificar formalmente al autor o a los autores del documento que la recoge. XML Digital Signature (XMLDSig) Es una recomendaci\u00f3n del W3C que define una sintaxis XML para la firma digital XML Advanced Signature (XAdES) Es un conjunto de extensiones a las recomendaciones XML-DSig haci\u00e9ndolas adecuadas para la firma electr\u00f3nica avanzada. RSA Es un sistema criptogr\u00e1fico de clave p\u00fablica desarrollado en 1977. En la actualidad, RSA es el primer y m\u00e1s utilizado algoritmo de este tipo y es v\u00e1lido tanto para cifrar como para firmar digitalmente. XML Es un metalenguaje extensible de etiquetas desarrollado por el World Wide Web Consortium (W3C). Es una simplificaci\u00f3n y adaptaci\u00f3n del SGML y permite definir la gram\u00e1tica de lenguajes espec\u00edficos (de la misma manera que HTML es a su vez un lenguaje definido por SGML). Por lo tanto XML no es realmente un lenguaje en particular, sino una manera de definir lenguajes para diferentes necesidades. Algunos de estos lenguajes que usan XML para su definici\u00f3n son XHTML, SVG, MathML. Office Open XML (OOXML) Es un formato de archivo abierto y est\u00e1ndar cuyas extensiones m\u00e1s comunes son .docx, .xlsx y .pptx. Se le utiliza para representar y almacenar hojas de c\u00e1lculo, diagramas, presentaciones y documentos de texto. Un archivo Office Open XML contiene principalmente datos basados en el lenguaje de marcado XML, comprimidos en un contenedor .zip espec\u00edfico. Open Document Format (ODF) Es un formato de fichero est\u00e1ndar para el almacenamiento de documentos ofim\u00e1ticos tales como hojas de c\u00e1lculo, memorandos, gr\u00e1ficas y presentaciones. Aunque las especificaciones fueron inicialmente elaboradas por Sun, el est\u00e1ndar fue desarrollado por el comit\u00e9 t\u00e9cnico para Open Office XML de la organizaci\u00f3n OASIS y est\u00e1 basado en un esquema XML inicialmente creado e implementado por la suite ofim\u00e1tica OpenOffice.org (ver OpenOffice.org XML). ZIP Es un formato de almacenamiento sin p\u00e9rdida, muy utilizado para la compresi\u00f3n de datos como im\u00e1genes, programas o documentos. PDF Es un formato de almacenamiento de documentos, desarrollado por la empresa Adobe Systems. Este formato es de tipo compuesto (imagen vectorial, mapa de bits y texto). SHA Es un sistema de funciones hash criptogr\u00e1ficas relacionadas de la Agencia de Seguridad Nacional de los Estados Unidos y publicadas por el National Institute of Standards and Technology (NIST). El primer miembro de la familia fue publicado en 1993 es oficialmente llamado SHA. Sin embargo, hoy d\u00eda, no oficialmente se le llama SHA-0 para evitar confusiones con sus sucesores. Dos a\u00f1os m\u00e1s tarde el primer sucesor de SHA fue publicado con el nombre de SHA-1. Existen cuatro variantes m\u00e1s que se han publicado desde entonces cuyas diferencias se basan en un dise\u00f1o algo modificado y rangos de salida incrementados: SHA-224, SHA-256, SHA-384, y SHA-512 (llam\u00e1ndose SHA-2 a todos ellos). PKCS Se refiere a un grupo de est\u00e1ndares de criptograf\u00eda de clave p\u00fablica concebidos y publicados por los laboratorios de RSA en California. A RSA Security se le asignaron los derechos de licenciamiento para la patente de algoritmo de clave asim\u00e9trica RSA y adquiri\u00f3 los derechos de licenciamiento para muchas otras patentes de claves. W3C Es un consorcio internacional que produce recomendaciones para la World Wide Web. Est\u00e1 dirigida por Tim Berners-Lee, el creador original de URL (Uniform Resource Locator, Localizador Uniforme de Recursos), HTTP (HyperText Transfer Protocol, Protocolo de Transferencia de HiperTexto) y HTML (Lenguaje de Marcado de HiperTexto) que son las principales tecnolog\u00edas sobre las que se basa la Web. OpenOffice.org Es una suite ofim\u00e1tica libre (c\u00f3digo abierto y distribuci\u00f3n gratuita) que incluye herramientas como procesador de textos, hoja de c\u00e1lculo, presentaciones, herramientas para el dibujo vectorial y base de datos. Est\u00e1 disponible para varias plataformas, tales como Microsoft Windows, GNU/Linux, BSD, Solaris y Mac OS X. Soporta numerosos formatos de archivo, incluyendo como predeterminado el formato est\u00e1ndar ISO/IEC OpenDocument (ODF), entre otros formatos comunes. A febrero de 2010, OpenOffice.org soporta m\u00e1s de 110 idiomas. Base64 Es un sistema de numeraci\u00f3n posicional que usa 64 como base. Es la mayor potencia de dos que puede ser representada usando \u00fanicamente los caracteres imprimibles de ASCII. Esto ha propiciado su uso para codificaci\u00f3n de correos electr\u00f3nicos, PGP y otras aplicaciones. Todas las variantes famosas que se conocen con el nombre de Base64 usan el rango de caracteres A-Z, a-z y 0-9 en este orden para los primeros 62 d\u00edgitos, pero los s\u00edmbolos escogidos para los \u00faltimos dos d\u00edgitos var\u00edan considerablemente de unas a otras. Otros m\u00e9todos de codificaci\u00f3n como UUEncode y las \u00faltimas versiones de binhex usan un conjunto diferente de 64 caracteres para representar 6 d\u00edgitos binarios, pero \u00e9stos nunca son llamados Base64. ASN.1 Es una norma para representar datos independientemente de la m\u00e1quina que se est\u00e9 usando y sus formas de representaci\u00f3n internas. Es un protocolo de nivel de presentaci\u00f3n en el modelo OSI. Autoridad de Certificaci\u00f3n (CA) Es una entidad de confianza, responsable de emitir y revocar los certificados digitales o certificados, utilizados en la firma electr\u00f3nica, para lo cual se emplea la criptograf\u00eda de clave p\u00fablica. Jur\u00eddicamente es un caso particular de Prestador de Servicios de Certificaci\u00f3n. Certificado Digital Es un documento digital mediante el cual un tercero confiable (una autoridad de certificaci\u00f3n) garantiza la vinculaci\u00f3n entre la identidad de un sujeto o entidad y su clave p\u00fablica. Infraestructura de Clave P\u00fablica (PKI) Es una combinaci\u00f3n de hardware y software, pol\u00edticas y procedimientos de seguridad que permiten la ejecuci\u00f3n con garant\u00edas de operaciones criptogr\u00e1ficas como el cifrado, la firma digital o el no repudio de transacciones electr\u00f3nicas.","title":"CF manual migracion"},{"location":"markdown_strict/CF_manual-migracion/#introduccion","text":"El Cliente de Firma es una herramienta de Firma Electr\u00f3nica que funciona en forma de Applet de Java integrado en una p\u00e1gina Web mediante JavaScript. El Cliente hace uso de los certificados digitales X.509 y de las claves privadas asociadas a los mismos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados ( keystore ) del navegador web ( Internet Explorer, Mozilla, Firefox ) o el sistema operativo as\u00ed como de los que est\u00e9n en dispositivos (tarjetas inteligentes , dispositivos USB ) configurados en el mismo (el caso de los DNI-e). El Cliente de Firma, como su nombre indica, es una aplicaci\u00f3n que se ejecuta en cliente (en el ordenador del usuario, no en el servidor Web). Esto es as\u00ed para evitar que la clave privada asociada a un certificado tenga que \u201csalir\u201d del contenedor del usuario (tarjeta, dispositivo USB o navegador) ubicado en su PC. De hecho, nunca llega a salir del navegador, el Cliente le env\u00eda los datos a firmar y \u00e9ste los devuelve firmados. El Cliente de Firma contiene las interfaces y componentes web necesarios para la realizaci\u00f3n de los siguientes procesos (adem\u00e1s de otros auxiliares como c\u00e1lculos de hash, lectura de ficheros, etc\u2026): Firma de formularios Web. Firma de datos y ficheros. Multifirma masiva de datos y ficheros. Cofirma (CoSignature) Multifirma al mismo nivel. Contrafirma (CounterSignature) Multifirma en cascada. Como complemento al cliente de firma, se encuentra un cliente de cifrado que nos permite realizar las funciones de encriptaci\u00f3n y desencriptaci\u00f3n de datos atendiendo a diferentes algoritmos y configuraciones. Adem\u00e1s permite la generaci\u00f3n de sobres digitales.","title":"Introducci\u00f3n"},{"location":"markdown_strict/CF_manual-migracion/#objeto","text":"El presente documento describe el procedimiento de la migraci\u00f3n de las aplicaciones Web que integren el Cliente @firma para incorporar su \u00faltima versi\u00f3n. Este manual expone el procedimiento de migraci\u00f3n desde la versi\u00f3n 2.4 del Cliente en adelante.","title":"Objeto"},{"location":"markdown_strict/CF_manual-migracion/#alcance","text":"Este manual se ha realizado tomando como base el que se ha realizado una integraci\u00f3n est\u00e1ndar de una versi\u00f3n del cliente @firma distinta a la \u00faltima, esto es: Se hace uso de las bibliotecas JavaScript que se distribuyen con esa versi\u00f3n del Cliente. Se hace uso de los m\u00e9todos publicados en el Applet. Los pasos detallados en este manual sirven para adaptar los despliegues existentes del Cliente @firma a su \u00faltima versi\u00f3n. Aqu\u00ed s\u00f3lo se describe la migraci\u00f3n de las funcionalidades del Cliente implementadas en versiones anteriores. Para la incorporaci\u00f3n de las nuevas funcionalidades disponibles en la \u00faltima versi\u00f3n del Cliente ser\u00e1 necesario dirigirse al \u201cManual del Integrador\u201d.","title":"Alcance"},{"location":"markdown_strict/CF_manual-migracion/#migracion-a-la-version-34-del-cliente-firma","text":"La redacci\u00f3n de este manual viene motivada principalmente por el cambio metodol\u00f3gico y de arquitectura que se ha ido realizado a lo largo de las distintas versiones del Cliente @firma, en buena parte motivadas por los cambios de las nuevas versiones de Java. Acceda al apartado correspondiente a la versi\u00f3n del Cliente @firma que tenga desplegada y realice los cambios necesarios para la adaptaci\u00f3n a la \u00faltima versi\u00f3n. Si va a realizar un nuevo despliegue del Cliente @firma, ignore este documento y despliegue la \u00faltima versi\u00f3n del Cliente vali\u00e9ndose de su Manual del integrador.","title":"Migraci\u00f3n a la versi\u00f3n 3.4 del Cliente @firma"},{"location":"markdown_strict/CF_manual-migracion/#migracion-desde-el-cliente-24","text":"Mientras que en la versi\u00f3n 2.4 del cliente y anteriores se instalaban siempre las dependencias del cliente y este deb\u00eda cargarse en cada ejecuci\u00f3n, en la nueva versi\u00f3n del Cliente las dependencias s\u00f3lo se instalan en caso de ser necesarias y el Cliente se despliega mediante JNLP. Durante la carga del Cliente, si se detecta que el entorno puede requerir la instalaci\u00f3n de dependencias del Cliente, se cargar\u00e1 un Bootloader encargado de comprobar si estas dependencias est\u00e1n cubiertas o es necesario instalarlas. La carga del Bootloader, las comprobaciones y la instalaci\u00f3n de dependencias son autom\u00e1ticas y el integrador no tiene que hacer nada al respecto. Cuando el sistema del usuario no es susceptible de requerir dependencias adicionales, se cargar\u00e1 directamente el Cliente y no el Bootloader. Adicionalmente, la nueva versi\u00f3n del cliente cuenta con una nueva arquitectura que divide sus funcionalidades en 3 construcciones distintas: Construcci\u00f3n LITE : Soporta firmas PKCS#1, CMS/PKCS#7 y CADES, e incorpora todas las capacidades actuales del cliente (firmas, cifrados, acceso a repositorios\u2026). Construcci\u00f3n MEDIA : Soporta firmas XMLdSig, XAdES, ODF y OOXML, m\u00e1s las funcionalidades de la construcci\u00f3n LITE. Construcci\u00f3n COMPLETA : Soporta firmas PDF, adem\u00e1s de disponer de las funcionalidades de la construcci\u00f3n MEDIA. En el momento de cargar el Cliente el integrador podr\u00e1 indicar que construcci\u00f3n se desea, seg\u00fan las funcionalidades que requiera su sistema. El nuevo Cliente @firma se despliega de forma similar a las versiones anteriores. Para actualizar el Cliente @firma a la \u00faltima versi\u00f3n y adaptar nuestra aplicaci\u00f3n Web deberemos seguir los siguientes pasos: Sustituir la totalidad de ficheros de despliegue (bibliotecas JavaScript, ficheros JNLP, archivos JAR, ficheros ZIP, ficheros de propiedades y cualquier otro ficheros distribuido con el Cliente @firma) del cliente por las de la \u00faltima versi\u00f3n. Durante este proceso, al sustituir el fichero \u201c constantes.js \u201d, deberemos asegurarnos de que las constantes del nuevo cliente tienen asignadas el mismo valor que el del cliente desplegado. Consulte el apartado Despliegue del Cliente @firma para m\u00e1s detalle. Adaptar, si procede, los HTML que cargan el cliente seg\u00fan se explica en el apartado Carga del Applet de firma . Revisar si alguno de los m\u00e9todos utilizados ha cambiado su comportamiento seg\u00fan se indica en el apartado Cambios en los procedimientos para asegurarnos de que no afecta a nuestra aplicaci\u00f3n. En caso de afectarnos, proceder tal como se indica. Comprobar que no hacemos uso de ninguno de los m\u00e9todos eliminados del Cliente. De hacerlo, lo sustituiremos seg\u00fan se indica en el apartado Antes exist\u00eda un solo m\u00e9todo para configurar los destinatarios de los sobres electr\u00f3nicos: setRecipientsToCMS(String): Este m\u00e9todo defin\u00eda todos los destinatarios del sobre de una sola vez. Como par\u00e1metro recib\u00eda el listado de rutas locales de los certificados de los destinatarios separadas por \u2018\\n\u2019. En la nueva versi\u00f3n, existen dos m\u00e9todos adicionales para indicar los destinatarios:addRecipientToCMS(String): Permite agregar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. removeRecipientToCMS(String): Permite eliminar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. El m\u00e9todo removeRecipientToCMS elimina cualquier certificado de la lista, ya haya sido cargado mediante addRecipientToCMS o setRecipientsToCMS. Si deseamos eliminar todos los certificados podemos utilizar setRecipientsToCMS(null).Restricciones, o por un mecanismo alternativo si no existe alternativa.","title":"Migraci\u00f3n desde el Cliente 2.4"},{"location":"markdown_strict/CF_manual-migracion/#despliegue-del-cliente-firma","text":"","title":"Despliegue del Cliente @firma"},{"location":"markdown_strict/CF_manual-migracion/#importacion-de-librerias-javascript","text":"Las librer\u00edas JavaScript del nuevo cliente @firma han sufrido ciertos cambios desde sus versiones anteriores, por lo que deber\u00e1 revisarse el modo de uso desde sus p\u00e1ginas Web HTML. Estos cambios se han realizado para mejorar la compatibilidad con ciertas versiones del entorno de ejecuci\u00f3n de Java (JRE), pero sobre todo para garantizar el funcionamiento correcto con versiones futuras de JRE, navegadores Web y sistemas operativos, especialmente en las nuevas arquitecturas de 64 bits. El integrador ya no necesita gestionar la instalaci\u00f3n y actualizaci\u00f3n del Cliente, dado que estos procesos se gestionan de forma completamente autom\u00e1tica. Debe retirar cualquier referencia en su c\u00f3digo HTML a los siguientes m\u00e9todos JavaScript o par\u00e1metros: instalar() desinstalar() isActualizado() actualizar() isInstalado() getDirectorioInstalacion() Variable installDirectory en constantes.js Variable instalador en instalador.js Los JavaScript que necesita importar en sus p\u00e1ginas HTML pueden igualmente haber cambiado. Aseg\u00farese de que no importa ning\u00fan JavaScript que no exista en el directorio de despliegue o en su subdirectorio common-js. Consulte las p\u00e1ginas Web de ejemplo para determinar que ficheros JavaScript es necesario importar para las distintas operaciones de criptograf\u00eda y firma electr\u00f3nica. Note especialmente que se han eliminado las librer\u00edas JavaScript \u201c runApplet.js \u201d y \u201c time.js \u201d. Es obligatorio eliminar las esperas expl\u00edcitas a la carga del Applet . Esto es, las sentencias que hacen uso de los m\u00e9todos de la biblioteca \u201ctime.js\u201d y la variable clienteFirmaCargado. Por ejemplo: whenTry(\"clienteFirmaCargado == true\", \"clienteFirma.setCipherAlgorithm('\" + cipherAlgorithm + \"')\", \"No se ha podido iniciar el Applet de firma.\"); Por regla general, el navegador Web no termina la carga de la p\u00e1gina hasta que no se finaliza la carga del Cliente, por lo que no suele ser necesario agregar sentencias de este tipo.","title":"Importaci\u00f3n de librer\u00edas JavaScript"},{"location":"markdown_strict/CF_manual-migracion/#carga-del-applet-de-firma","text":"La nueva arquitectura del cliente elimina el sistema de m\u00f3dulos ( plugins ) con el que se contaba en versiones V2.x (debido a nuevas restricciones de seguridad de la JRE1.6u17 y superiores) y establece 3 construcciones distintas que incorporan diferentes funcionalidades (cada una incorporando las funcionalidades de las anteriores). Esta nueva arquitectura requiere que cada vez que se cargue el Applet mediante el m\u00e9todo cargarAppletFirma() se indique la construcci\u00f3n m\u00ednima que exija nuestra aplicaci\u00f3n para funcionar correctamente. Esto lo haremos pas\u00e1ndole los par\u00e1metros \u2018LITE\u2019, \u2018MEDIA\u2019 o \u2018COMPLETA\u2019 al m\u00e9todo seg\u00fan sea la construcci\u00f3n que necesitemos. Si no se indica nada, se interpretar\u00e1 que se desea la construcci\u00f3n por defecto, que ser\u00e1 la \u2018LITE\u2019 salvo que se indique lo contrario mediante la variable defaultBuild del fichero \u201c constantes.js \u201d. El integrador deber\u00e1 consultar el listado de funcionalidades incorporado en cada construcci\u00f3n del usuario para indicar cual debe utilizar. Para cargar el applet de firma exigiendo que se disponga de al menos la construcci\u00f3n MEDIA, por ejemplo, usar\u00edamos la sentencia: <script type=\"text/javascript\"> cargarAppletFirma(\u2018MEDIA\u2019); </script> Tambi\u00e9n podr\u00edamos establecer la variable defaultBuild del fichero \u201c constantes.js \u201d con el valor MEDIA y hacer: <script type=\"text/javascript\"> cargarAppletFirma(); </script>","title":"Carga del Applet de firma"},{"location":"markdown_strict/CF_manual-migracion/#localizacion-de-la-llamada-al-metodo-de-carga-del-applet","text":"En la versi\u00f3n 3 del Cliente @firma se ha cambiado el modo de despliegue de los Applets para seguir las \u00faltimas recomendaciones de Oracle al respecto. Debido a estos cambios, la llamada al m\u00e9todo cargarAppletFirma() no puede ser realizada dentro de una etiqueta XML, y debe situarse dentro del cuerpo de una secci\u00f3n delimitada por etiquetas. La implicaci\u00f3n pr\u00e1ctica m\u00e1s directa de esta restricci\u00f3n es que ahora no es posible realizar la llamada de carga en la propiedad onLoad() de la etiqueta HTML <body>, siendo la opci\u00f3n recomendada situar esta llamada en cualquier lugar entre las etiquetas <body> y </body>. Cualquier otra llamada al Applet (comprobar si est\u00e1 instalado, obtener la versi\u00f3n, etc.) sigue pudi\u00e9ndose invocar desde onLoad() o cualquier otro gestor de eventos interno a una etiqueta HTML. Esto aplica igualmente a cualquier proceso de carga del cliente desde un disparador de evento: onClick(), onMouseOver()\u2026","title":"Localizaci\u00f3n de la llamada al m\u00e9todo de carga del Applet"},{"location":"markdown_strict/CF_manual-migracion/#cambios-en-los-procedimientos","text":"","title":"Cambios en los procedimientos"},{"location":"markdown_strict/CF_manual-migracion/#formato-de-firma-por-defecto","text":"En las nuevas versiones del Cliente @firma el formato de firma por defecto es CAdES. Si su herramienta no configurase el formato de firma expl\u00edcitamente mediante el m\u00e9todo setSignatureFormat(String), deber\u00e1 introducir esta sentencia indicando el formato que desee utilizar o modificar el formato de firma por defecto por medio de la variable signatureFormat, del fichero de configuraci\u00f3n \u201c constantes.js\u201d.","title":"Formato de firma por defecto"},{"location":"markdown_strict/CF_manual-migracion/#cadena-de-certificacion-en-firmas-xades","text":"En las nuevas versiones del Cliente @firma se inserta la cadena de certificaci\u00f3n completa en las firmas XAdES generadas. Este es el comportamiento recomendado para firmas XAdES, pero impide la correcta validaci\u00f3n de las firmas con versiones de la Plataforma @firma anteriores a la 5.5. Para desactivar este comportamiento es necesario establecer el par\u00e1metro extra \u201cincludeOnlySignningCertificate\u201d al valor \u201ctrue\u201d. Podemos hacer esto mediante la siguiente llamada: clienteFirma.addExtraParam(\u201cincludeOnlySignningCertificate\u201d, \u201ctrue\u201d);","title":"Cadena de certificaci\u00f3n en firmas XAdES"},{"location":"markdown_strict/CF_manual-migracion/#ensobrado-de-datos","text":"En la versi\u00f3n 2.4 y anteriores del cliente, por un error en la implementaci\u00f3n, se establec\u00eda el texto plano que se deseaba ensobrar mediante el m\u00e9todo setData(String). En la nueva versi\u00f3n del cliente, tal como se indicaba en la especificaci\u00f3n del m\u00e9todo, el texto que se le debe pasar a este m\u00e9todo debe estar codificado en base 64. Podemos realizar el paso intermedio de pasar de texto plano a texto en base 64 mediante el m\u00e9todo: getBase64FromText(String, String). As\u00ed obtenemos que: Versi\u00f3n 2.4 : clienteFirma.setData(\u201ctexto\u201d); Ahora : clienteFirma.setData(clienteFirma.getBase64FromText( \u201ctexto\u201d, \u201cutf-8\u201d));","title":"Ensobrado de datos"},{"location":"markdown_strict/CF_manual-migracion/#cifrado-de-datos","text":"En versiones anteriores del Cliente, el comportamiento de los m\u00e9todos de entrada y salida de las funciones de cifrado ten\u00edan un comportamiento err\u00e1tico. Por ejemplo, el m\u00e9todo setPlainData(String) para indicar los datos que se desean cifrar recib\u00eda el texto en claro para cifrar, mientras que getPlainData() devolv\u00eda este texto en base 64. Ahora todas las entradas y salidas de datos realizadas con los siguientes m\u00e9todos se realizar\u00e1n en base 64: setPlainData(String) setCipherData(String) getPlainData() getCipherData() Si actualmente invoca a alguno de estos m\u00e9todos pas\u00e1ndole o recibiendo los datos en texto claro utilice los m\u00e9todos getBase64FromText(String, String) y getTextFromBase64(String, String) del cliente para realizar las transformaciones oportunas.","title":"Cifrado de datos"},{"location":"markdown_strict/CF_manual-migracion/#devolucion-de-nulos","text":"Las anteriores versiones del cliente dispon\u00edan de m\u00e9todos que deb\u00edan devolver una cadena de texto y, en caso de error o no disponer de datos para su devoluci\u00f3n, devolv\u00edan cadena vac\u00eda. Esta pr\u00e1ctica, que si bien evitaba comprobar que el valor de retorno fuese nulo, llevaban a no poder distinguir cuando la operaci\u00f3n hab\u00eda finalizado correctamente o si se hab\u00edan devuelto datos significativos. La nueva versi\u00f3n del cliente, devuelve nulo en estos m\u00e9todos en los que puede malinterpretarse el resultado si se devolviese cadena vac\u00eda. El comportamiento explicado se refleja en el JavaDoc de la nueva versi\u00f3n del cliente y los m\u00e9todos afectados son: getCipherData() getPlainData() getData() getBase64Data() getPassword() getSignatureBase64Encoded() getSignatureText() En caso de que utilizar alguno de estos m\u00e9todos en nuestra aplicaci\u00f3n, deberemos consultar que el resultado no sea nulo antes de utilizar el valor devuelto. Por ejemplo: var plainText = clienteFirma.getPlainData(); if(plainText == null) { alert(\u201cNo se ha podido recuperar el texto plano\u201d); } else { alert(plainText); }","title":"Devoluci\u00f3n de nulos"},{"location":"markdown_strict/CF_manual-migracion/#configuracion-del-fichero-de-entrada","text":"Existen una serie de m\u00e9todos de operaci\u00f3n que especifican por par\u00e1metro el fichero que se desea procesar, en lugar de tomar el fichero configurado mediante setFileuri(String) o setFileuriBase64Encoded(String). Adicionalmente, estos m\u00e9todos modificaban la configuraci\u00f3n del Cliente de tal forma que los ficheros especificados quedaban establecidos como ficheros de entrada para el resto de operaciones. Los m\u00e9todos en cuesti\u00f3n son: getFileBase64Encoded(String strUri, boolean showProgress) cipherFile(String strUri) decipherFile(String strUri) signAndPackFile(String uri) En la nueva versi\u00f3n del Cliente @firma, los m\u00e9todos mencionados no alteran la configuraci\u00f3n del fichero de entrada establecido en el Cliente. Por ejemplo, dado el siguiente c\u00f3digo: \u2026 clienteFirma.setFileuri(\u201cfoo.txt\u201d); clienteFirma.getFileBase64Encoded(\u201cbar.txt\u201d, false); clienteFirma.sign(); \u2026 El nuevo Cliente @firma firmar\u00eda el fichero \u201cfoo.txt\u201d, mientras que las versiones anteriores firmar\u00edan \u201cbar.txt\u201d.","title":"Configuraci\u00f3n del fichero de entrada"},{"location":"markdown_strict/CF_manual-migracion/#configuracion-de-los-destinatarios-de-los-sobres-electronicos","text":"Antes exist\u00eda un solo m\u00e9todo para configurar los destinatarios de los sobres electr\u00f3nicos: setRecipientsToCMS(String): Este m\u00e9todo defin\u00eda todos los destinatarios del sobre de una sola vez. Como par\u00e1metro recib\u00eda el listado de rutas locales de los certificados de los destinatarios separadas por \u2018\\n\u2019. En la nueva versi\u00f3n, existen dos m\u00e9todos adicionales para indicar los destinatarios: addRecipientToCMS(String): Permite agregar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. removeRecipientToCMS(String): Permite eliminar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. El m\u00e9todo removeRecipientToCMS elimina cualquier certificado de la lista, ya haya sido cargado mediante addRecipientToCMS o setRecipientsToCMS. Si deseamos eliminar todos los certificados podemos utilizar setRecipientsToCMS(null).","title":"Configuraci\u00f3n de los destinatarios de los sobres electr\u00f3nicos"},{"location":"markdown_strict/CF_manual-migracion/#restricciones","text":"","title":"Restricciones"},{"location":"markdown_strict/CF_manual-migracion/#funciones-y-metodos-eliminados-en-el-applet-java","text":"","title":"Funciones y m\u00e9todos eliminados en el Applet Java"},{"location":"markdown_strict/CF_manual-migracion/#public-void-signhtmljavaioinputstream-is","text":"JavaScript no soporta el tipo de datos Java InputStream, por lo que su uso desde el cliente es imposible, y exponer la funci\u00f3n puede llevar a equ\u00edvocos o causar un uso inapropiado. La firma realizada por este m\u00e9todo es una firma simple, con la configuraci\u00f3n establecida, sobre los datos extra\u00eddos del flujo de entrada. Podemos emular su comportamiento siguiendo los siguientes pasos: Leyendo los datos del flujo de entrada en cuesti\u00f3n desde la aplicaci\u00f3n que utiliza el cliente. Convirtiendo los datos le\u00eddos a Base64. Estableci\u00e9ndolos como entrada del cliente con el m\u00e9todo setData(String). Ejecutando la operaci\u00f3n de firma mediante el m\u00e9todo sign() del cliente.","title":"public void signHTML(java.io.InputStream is)"},{"location":"markdown_strict/CF_manual-migracion/#public-byte-getsignature","text":"JavaScript no soporta el tipo de datos de Java byte[], por lo que su uso es imposible, y exponer la funci\u00f3n puede llevar a equ\u00edvocos o causar un uso inapropiado. Para recuperar la informaci\u00f3n de firma puede utilizarse: getSignatureText() para las firmas XML. Obtiene la cadena de texto que representa el XML de firma. Puede obtenerse el mismo resultado que con el m\u00e9todo getSignature() utilizando el m\u00e9todo getBytes() sobre su salida. getSignatureBase64Encoded() para cualquier tipo de firma. Devuelve la firma en forma de cadena en base 64. Puede obtenerse el mismo resultado que con el m\u00e9todo getSignature() decodificando la cadena en base 64 obtenida.","title":"public byte[] getSignature()"},{"location":"markdown_strict/CF_manual-migracion/#public-string-firmastring-datos","text":"Se elimina el m\u00e9todo deprecado Firma(String). Este m\u00e9todo permit\u00eda la compatibilidad del Cliente con la Plataforma @firma versi\u00f3n 4. Este m\u00e9todo recib\u00eda una cadena en base 64 compuesta por un c\u00f3digo de operaci\u00f3n, el valor de transacci\u00f3n y hasta un par de par\u00e1metros, todos concatenados por el separador almohadilla (\u2018#\u2019): OP#TRANS#PARAM1#PARAM2 Los valores permitidos para el par\u00e1metro de operaci\u00f3n (OP) eran: 0: Operaci\u00f3n de Firma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos firmar y se ignora PARAM2. 1: Operaci\u00f3n de Cofirma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos cofirmar y PARAM2 es la firma electr\u00f3nica original. 2: Operaci\u00f3n de Contrafirma de nodos. Para esta operaci\u00f3n PARAM1 es la firma que deseamos contrafirmar y PARAM2 es el listado de \u00edndices tal como los recibe el m\u00e9todo setSignersToCounterSign(String). El resultado de la operaci\u00f3n es la cadena: cert=CERT;enc=SIGN En esta cadena CERT es el certificado en base 64 utilizado para la firma y SIGN es el resultado de la operaci\u00f3n en base 64. En cada operaci\u00f3n se declaraba un atributo firmado adicional con resto a los que aparecen por regla general en las firmas CMS. Este ser\u00eda el atributo \u201c2.5.4.45\u201d con el valor \u201cTRANS\u201d. Para imitar este comportamiento con el Cliente, se deber\u00edan realizar las siguientes acciones: Descodificar el Base64 del par\u00e1metro que recib\u00eda el m\u00e9todo y obtener cada uno de sus componentes (OP, TRANS, PARAM1 y PARAM2). Configurar el formato de firma CMS, el algoritmo de firma SHA1withRSA y el modo de firma expl\u00edcito, mediante las sentencias: clienteFirma .setSignatureFormat(\u201cCMS\u201d); clienteFirma .setSignatureAlgorithm(\u201cSHA1withRSA\u201d); clienteFirma .setSignatureMode(\u201cexplicit); Configurar el n\u00famero de transacci\u00f3n como atributo firmado adicional: clienteFirma .addSignedAttribute(\u201c2.2.4.45\u201d, TRANS); Configurar los datos de entrada, hash, firma y firmantes seg\u00fan la operaci\u00f3n inidicada (OP) y ejecutar la operaci\u00f3n: switch (OP) { // Firma case 0: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); clienteFirma .sign(); break ; // Cofirma (Firma en paralelo) case 1: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); //Establecemos la firma clienteFirma .setElectronicSignature( PARAM2 ); //Cofirmamos clienteFirma .coSign(); break ; // Contrafirma (Firma en cascada) case 2: //Establecemos la firma clienteFirma .setElectronicSignature( PARAM1 ); //Establecemos los firmantes que se desean contrafirmar clienteFirma .setSignersToCounterSign( PARAM2 ); // Contrafirmamos clienteFirma .counterSignIndexes(); break ; } Recuperar el resultado de la operaci\u00f3n y el certificado utilizado para, si se desea, componer la cadena de salida. clienteFirma .getSignCertificateBase64Encoded(); clienteFirma .getSignatureBase64Encoded();","title":"public String Firma(String datos)"},{"location":"markdown_strict/CF_manual-migracion/#public-string-getcmsdata","text":"Se elimina el m\u00e9todo en favor del equivalente getB64Data().","title":"public String getCMSData()"},{"location":"markdown_strict/CF_manual-migracion/#algoritmos-de-cifrado-eliminados","text":"Se han eliminado los siguientes algoritmos de cifrado, por considerarse obsoletos o en desuso: CAST5 IDEA Twofish Serpent Aun cuando haya algoritmos de cifrado que se mantengan desde la versi\u00f3n anterior del cliente, es posible que haya cambiado su configuraci\u00f3n por defecto. Por regla general, siempre deber\u00eda descifrarse con la misma versi\u00f3n del cliente con la que se cifr\u00f3.","title":"Algoritmos de cifrado eliminados"},{"location":"markdown_strict/CF_manual-migracion/#migracion-desde-el-cliente-302303","text":"Mientras que en las versi\u00f3n 3.0.2/3.0.3 del Cliente y anteriores se instalaban siempre las dependencias del cliente y este deb\u00eda cargarse en cada ejecuci\u00f3n, en la nueva versi\u00f3n del Cliente las dependencias s\u00f3lo se instalan en caso de ser necesarias y el Cliente se despliega mediante JNLP, por lo que puede quedarse almacenado en la cach\u00e9 de Java. Durante la carga del Cliente, si se detecta que el entorno puede requerir la instalaci\u00f3n de dependencias del Cliente, se cargar\u00e1 un Bootloader encargado de comprobar si estas dependencias est\u00e1n cubiertas o es necesario instalarlas. La carga del Bootloader, las comprobaciones y la instalaci\u00f3n de dependencias son autom\u00e1ticas y el integrador no tiene que hacer nada al respecto. Cuando el sistema del usuario no es susceptible de requerir dependencias adicionales, se cargar\u00e1 directamente el Cliente y no el Bootloader. El nuevo Cliente @firma se despliega de forma similar a las versiones anteriores. Para actualizar el Cliente @firma a la \u00faltima versi\u00f3n y adaptar nuestra aplicaci\u00f3n Web deberemos seguir los siguientes pasos: Sustituir la totalidad de ficheros de despliegue (bibliotecas JavaScript, ficheros JNLP, archivos JAR, ficheros ZIP, ficheros de propiedades y cualquier otro ficheros distribuido con el Cliente @firma) del cliente por las de la \u00faltima versi\u00f3n. Durante este proceso, al sustituir el fichero \u201c constantes.js \u201d, deberemos asegurarnos de que las constantes del nuevo cliente tienen asignadas el mismo valor que el del cliente desplegado. Consulte el apartado Despliegue del Cliente @firma para m\u00e1s detalle. Revisar si alguno de los m\u00e9todos utilizados ha cambiado su comportamiento seg\u00fan se indica en el apartado Cambios en los procedimientos para asegurarnos de que no afecta a nuestra aplicaci\u00f3n. En caso de afectarnos, proceder tal como se indica. Comprobar que no hacemos uso de ninguno de los m\u00e9todos eliminados del Cliente. De hacerlo, lo sustituiremos seg\u00fan se indica en el apartado Restricciones , o por un mecanismo alternativo si no existe alternativa.","title":"Migraci\u00f3n desde el Cliente 3.0.2/3.0.3"},{"location":"markdown_strict/CF_manual-migracion/#despliegue-del-cliente-firma_1","text":"","title":"Despliegue del Cliente @firma"},{"location":"markdown_strict/CF_manual-migracion/#importacion-de-librerias-javascript_1","text":"Las librer\u00edas JavaScript del nuevo cliente @firma han sufrido ciertos cambios desde sus versiones anteriores, por lo que deber\u00e1 revisarse el modo de uso desde sus p\u00e1ginas Web HTML. Estos cambios se han realizado para mejorar la compatibilidad con ciertas versiones del entorno de ejecuci\u00f3n de Java (JRE), pero sobre todo para garantizar el funcionamiento correcto con versiones futuras de JRE, navegadores Web y sistemas operativos, especialmente en las nuevas arquitecturas de 64 bits. El integrador ya no necesita gestionar la instalaci\u00f3n y actualizaci\u00f3n del Cliente, dado que estos procesos se gestionan de forma completamente autom\u00e1tica. Debe retirar cualquier referencia en su c\u00f3digo HTML a los siguientes m\u00e9todos JavaScript o par\u00e1metros: instalar() desinstalar() isActualizado() actualizar() isInstalado() getDirectorioInstalacion() Variable installDirectory en constantes.js Variable instalador en instalador.js Los JavaScript que necesita importar en sus p\u00e1ginas HTML pueden igualmente haber cambiado. Aseg\u00farese de que no importa ning\u00fan JavaScript que no exista en el directorio de despliegue o en su subdirectorio common-js. Consulte las p\u00e1ginas Web de ejemplo para determinar que ficheros JavaScript es necesario importar para las distintas operaciones de criptograf\u00eda y firma electr\u00f3nica. Note especialmente que se han eliminado las librer\u00edas JavaScript \u201c runApplet.js \u201d y \u201c time.js \u201d. Es obligatorio eliminar las esperas expl\u00edcitas a la carga del Applet . Esto es, las sentencias que hacen uso de los m\u00e9todos de la biblioteca \u201ctime.js\u201d y la variable clienteFirmaCargado. Por ejemplo: whenTry(\"clienteFirmaCargado == true\", \"clienteFirma.setCipherAlgorithm('\" + cipherAlgorithm + \"')\", \"No se ha podido iniciar el Applet de firma.\"); Por regla general, el navegador Web no termina la carga de la p\u00e1gina hasta que no se finaliza la carga del Cliente, por lo que no suele ser necesario agregar sentencias de este tipo.","title":"Importaci\u00f3n de librer\u00edas JavaScript"},{"location":"markdown_strict/CF_manual-migracion/#cambios-en-los-procedimientos_1","text":"","title":"Cambios en los procedimientos"},{"location":"markdown_strict/CF_manual-migracion/#confirmaciones-de-acceso-a-disco","text":"A partir de la versi\u00f3n 3.3, el Cliente @firma pide confirmaci\u00f3n al usuario mediante un di\u00e1logo modal por cada acceso a disco que se realice sin que este lo haya indicado expl\u00edcitamente. Este comportamiento no debe afectar a las aplicaciones desplegadas salvo en caso particulares en el uso del modo de firma masiva program\u00e1tica. Si su aplicaci\u00f3n utiliza el modo de firma masiva program\u00e1tica para la firma masiva de ficheros, aseg\u00farese de utilizar el m\u00e9todo massiveSignatureSign(String) para la ejecuci\u00f3n de las firmas. Si su aplicaci\u00f3n utiliza el modo de firma masiva program\u00e1tica y almacena las firmas resultantes en disco, eval\u00fae el uso del mecanismo de firma de directorios o el usuario se ver\u00e1 obligado a aceptar el guardado individual de cada una de las firmas resultantes.","title":"Confirmaciones de acceso a disco"},{"location":"markdown_strict/CF_manual-migracion/#formato-de-firma-por-defecto_1","text":"En las nuevas versiones del Cliente @firma el formato de firma por defecto es CAdES. Si su herramienta no configurase el formato de firma expl\u00edcitamente mediante el m\u00e9todo setSignatureFormat(String), deber\u00e1 introducir esta sentencia indicando el formato que desee utilizar o modificar el formato de firma por defecto por medio de la variable signatureFormat, del fichero de configuraci\u00f3n \u201c constantes.js\u201d.","title":"Formato de firma por defecto"},{"location":"markdown_strict/CF_manual-migracion/#cadena-de-certificacion-en-firmas-xades_1","text":"En las nuevas versiones del Cliente @firma se inserta la cadena de certificaci\u00f3n completa en las firmas XAdES generadas. Este es el comportamiento recomendado para firmas XAdES, pero impide la correcta validaci\u00f3n de las firmas con versiones de la Plataforma @firma anteriores a la 5.5. Para desactivar este comportamiento es necesario establecer el par\u00e1metro extra \u201cincludeOnlySignningCertificate\u201d al valor \u201ctrue\u201d. Podemos hacer esto mediante la siguiente llamada: clienteFirma.addExtraParam(\u201cincludeOnlySignningCertificate\u201d, \u201ctrue\u201d);","title":"Cadena de certificaci\u00f3n en firmas XAdES"},{"location":"markdown_strict/CF_manual-migracion/#configurar-politica-de-firma","text":"La \u00faltima versi\u00f3n del Cliente @firma amplia las opciones para la configuraci\u00f3n de la pol\u00edtica de firma de las firmas avanzadas generadas. En versiones anteriores el m\u00e9todo setPolicy(String, String, String), recib\u00eda el identificador, la descripci\u00f3n y el cualificador de la pol\u00edtica de firma que se desease establecer. En su \u00faltima versi\u00f3n, el Cliente @firma agrega un cuarto par\u00e1metro que es la huella digital (hash) SHA1 de la pol\u00edtica de firma. Este hash se debe introducir en base 64. Ahora el m\u00e9todo setPolicy tiene la forma: void setPolicy(String identifier, String description, String qualifier, String hashB64); Un ejemplo de establecimiento de pol\u00edtica es: clienteFirma.setPolicy(\"urn:oid:2.16.724.1.3.1.1.2.1.8\", \u201cPolitica de la AGE\u201d, \u201chttp://administracionelectronica.gob.es/es/ctt/politicafirma/politica_firma_AGE_v1_8.pdf\u201d, \u201c7SxX3erFuH31TvAw9LZ70N7p1vA=\u201d); As\u00ed mismo, ahora tambi\u00e9n es posible indicar como identificador de la pol\u00edtica una URL, URN u OID.","title":"Configurar pol\u00edtica de firma"},{"location":"markdown_strict/CF_manual-migracion/#cifrado-de-datos_1","text":"En versiones anteriores del Cliente, el comportamiento de los m\u00e9todos de entrada y salida de las funciones de cifrado ten\u00edan un comportamiento err\u00e1tico. Por ejemplo, el m\u00e9todo setPlainData(String) para indicar los datos que se desean cifrar recib\u00eda el texto en claro para cifrar, mientras que getPlainData() devolv\u00eda este texto en base 64. Ahora todas las entradas y salidas de datos realizadas con los siguientes m\u00e9todos se realizar\u00e1n en base 64: setPlainData(String) setCipherData(String) getPlainData() getCipherData() Si actualmente invoca a alguno de estos m\u00e9todos pas\u00e1ndole o recibiendo los datos en texto claro utilice los m\u00e9todos getBase64FromText(String, String) y getTextFromBase64(String, String) del cliente para realizar las transformaciones oportunas.","title":"Cifrado de datos"},{"location":"markdown_strict/CF_manual-migracion/#configuracion-del-fichero-de-entrada_1","text":"Existen una serie de m\u00e9todos de operaci\u00f3n que especifican por par\u00e1metro el fichero que se desea procesar, en lugar de tomar el fichero configurado mediante setFileuri(String) o setFileuriBase64Encoded(String). Adicionalmente, estos m\u00e9todos modificaban la configuraci\u00f3n del Cliente de tal forma que los ficheros especificados quedaban establecidos como ficheros de entrada para el resto de operaciones. Los m\u00e9todos en cuesti\u00f3n son: getFileBase64Encoded(String strUri, boolean showProgress) cipherFile(String strUri) decipherFile(String strUri) signAndPackFile(String uri) En la nueva versi\u00f3n del Cliente @firma, los m\u00e9todos mencionados no alteran la configuraci\u00f3n del fichero de entrada establecido en el Cliente. Por ejemplo, dado el siguiente c\u00f3digo: \u2026 clienteFirma.setFileuri(\u201cfoo.txt\u201d); clienteFirma.getFileBase64Encoded(\u201cbar.txt\u201d, false); clienteFirma.sign(); \u2026 El nuevo Cliente @firma firmar\u00eda el fichero \u201cfoo.txt\u201d, mientras que las versiones anteriores firmar\u00edan \u201cbar.txt\u201d.","title":"Configuraci\u00f3n del fichero de entrada"},{"location":"markdown_strict/CF_manual-migracion/#configuracion-de-los-destinatarios-de-los-sobres-electronicos_1","text":"Antes exist\u00eda un solo m\u00e9todo para configurar los destinatarios de los sobres electr\u00f3nicos: setRecipientsToCMS(String): Este m\u00e9todo defin\u00eda todos los destinatarios del sobre de una sola vez. Como par\u00e1metro recib\u00eda el listado de rutas locales de los certificados de los destinatarios separadas por \u2018\\n\u2019. En la nueva versi\u00f3n, existen dos m\u00e9todos adicionales para indicar los destinatarios: addRecipientToCMS(String): Permite agregar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. removeRecipientToCMS(String): Permite eliminar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. El m\u00e9todo removeRecipientToCMS elimina cualquier certificado de la lista, ya haya sido cargado mediante addRecipientToCMS o setRecipientsToCMS. Si deseamos eliminar todos los certificados podemos utilizar setRecipientsToCMS(null).","title":"Configuraci\u00f3n de los destinatarios de los sobres electr\u00f3nicos"},{"location":"markdown_strict/CF_manual-migracion/#codificacion-de-textos","text":"Los m\u00e9todos getBase64FromText(String) y getTextFromBase64(String) se sustituyen por una versi\u00f3n que permite seleccionar la codificaci\u00f3n de texto a utilizar. La declaraci\u00f3n de los nuevos m\u00e9todos es: String getBase64FromText(String plainText, String charsetName); String getTextFromBase64(String b64, String charsetName); Si no se establece el par\u00e1metro charsetName se tomar\u00e1 la codificaci\u00f3n por defecto del sistema. En caso de no saber con certeza la codificaci\u00f3n del texto, se deber\u00e1 indicar null. En el caso de tratarse un XML debe indicarse siempre null para que se autodetecte la codificaci\u00f3n del XML.","title":"Codificaci\u00f3n de textos"},{"location":"markdown_strict/CF_manual-migracion/#restricciones_1","text":"","title":"Restricciones"},{"location":"markdown_strict/CF_manual-migracion/#public-string-firmastring-datos_1","text":"Se elimina el m\u00e9todo deprecado Firma(String). Este m\u00e9todo permit\u00eda la compatibilidad del Cliente con la Plataforma @firma versi\u00f3n 4. Este m\u00e9todo recib\u00eda una cadena en base 64 compuesta por un c\u00f3digo de operaci\u00f3n, el valor de transacci\u00f3n y hasta un par de par\u00e1metros, todos concatenados por el separador almohadilla (\u2018#\u2019): OP#TRANS#PARAM1#PARAM2 Los valores permitidos para el par\u00e1metro de operaci\u00f3n (OP) eran: 0: Operaci\u00f3n de Firma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos firmar y se ignora PARAM2. 1: Operaci\u00f3n de Cofirma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos cofirmar y PARAM2 es la firma electr\u00f3nica original. 2: Operaci\u00f3n de Contrafirma de nodos. Para esta operaci\u00f3n PARAM1 es la firma que deseamos contrafirmar y PARAM2 es el listado de \u00edndices tal como los recibe el m\u00e9todo setSignersToCounterSign(String). El resultado de la operaci\u00f3n es la cadena: cert=CERT;enc=SIGN En esta cadena CERT es el certificado en base 64 utilizado para la firma y SIGN es el resultado de la operaci\u00f3n en base 64. En cada operaci\u00f3n se declaraba un atributo firmado adicional con resto a los que aparecen por regla general en las firmas CMS. Este ser\u00eda el atributo \u201c2.5.4.45\u201d con el valor \u201cTRANS\u201d. Para imitar este comportamiento con el Cliente, se deber\u00edan realizar las siguientes acciones: Descodificar el Base64 del par\u00e1metro que recib\u00eda el m\u00e9todo y obtener cada uno de sus componentes (OP, TRANS, PARAM1 y PARAM2). Configurar el formato de firma CMS, el algoritmo de firma SHA1withRSA y el modo de firma expl\u00edcito, mediante las sentencias: clienteFirma .setSignatureFormat(\u201cCMS\u201d); clienteFirma .setSignatureAlgorithm(\u201cSHA1withRSA\u201d); clienteFirma .setSignatureMode(\u201cexplicit); Configurar el n\u00famero de transacci\u00f3n como atributo firmado adicional: clienteFirma .addSignedAttribute(\u201c2.2.4.45\u201d, TRANS); Configurar los datos de entrada, hash, firma y firmantes seg\u00fan la operaci\u00f3n inidicada (OP) y ejecutar la operaci\u00f3n: switch (OP) { // Firma case 0: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); clienteFirma .sign(); break ; // Cofirma (Firma en paralelo) case 1: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); //Establecemos la firma clienteFirma .setElectronicSignature( PARAM2 ); //Cofirmamos clienteFirma .coSign(); break ; // Contrafirma (Firma en cascada) case 2: //Establecemos la firma clienteFirma .setElectronicSignature( PARAM1 ); //Establecemos los firmantes que se desean contrafirmar clienteFirma .setSignersToCounterSign( PARAM2 ); // Contrafirmamos clienteFirma .counterSignIndexes(); break ; } Recuperar el resultado de la operaci\u00f3n y el certificado utilizado para, si se desea, componer la cadena de salida. clienteFirma .getSignCertificateBase64Encoded(); clienteFirma .getSignatureBase64Encoded();","title":"public String Firma(String datos)"},{"location":"markdown_strict/CF_manual-migracion/#public-string-getcmsdata_1","text":"Se elimina el m\u00e9todo en favor del equivalente getB64Data().","title":"public String getCMSData()"},{"location":"markdown_strict/CF_manual-migracion/#migracion-desde-el-cliente-31311","text":"Mientras que en estas versiones exist\u00eda la posibilidad de seleccionar el modo de despliegue del Cliente: tradicional y JNLP. En la nueva versi\u00f3n del Cliente el despliegue siempre se realiza mediante JNLP y las dependencias s\u00f3lo se instalan en caso de ser necesarias. Durante la carga del Cliente, si se detecta que el entorno puede requerir la instalaci\u00f3n de dependencias del Cliente, se cargar\u00e1 un Bootloader encargado de comprobar si estas dependencias est\u00e1n cubiertas o es necesario instalarlas. La carga del Bootloader, las comprobaciones y la instalaci\u00f3n de dependencias son autom\u00e1ticas y el integrador no tiene que hacer nada al respecto. Cuando el sistema del usuario no es susceptible de requerir dependencias adicionales, se cargar\u00e1 directamente el Cliente y no el Bootloader. En la nueva versi\u00f3n del Cliente no existe el applet ArchDetector que exist\u00eda en la versi\u00f3n 3.1. Para actualizar el Cliente @firma a la \u00faltima versi\u00f3n y adaptar nuestra aplicaci\u00f3n Web deberemos seguir los siguientes pasos: Sustituir la totalidad de ficheros de despliegue (bibliotecas JavaScript, ficheros JNLP, archivos JAR, ficheros ZIP, ficheros de propiedades y cualquier otro ficheros distribuido con el Cliente @firma) del cliente por las de la \u00faltima versi\u00f3n. Durante este proceso, al sustituir el fichero \u201c constantes.js \u201d, deberemos asegurarnos de que las constantes del nuevo cliente tienen asignadas el mismo valor que el del cliente desplegado. Consulte el apartado Despliegue del Cliente @firma para m\u00e1s detalle. Revisar si alguno de los m\u00e9todos utilizados ha cambiado su comportamiento seg\u00fan se indica en el apartado Cambios en los procedimientos para asegurarnos de que no afecta a nuestra aplicaci\u00f3n. En caso de afectarnos, proceder tal como se indica. Comprobar que no hacemos uso de ninguno de los m\u00e9todos eliminados del Cliente. De hacerlo, lo sustituiremos seg\u00fan se indica en el apartado Restricciones , o por un mecanismo alternativo si no existe alternativa.","title":"Migraci\u00f3n desde el Cliente 3.1/3.1.1"},{"location":"markdown_strict/CF_manual-migracion/#despliegue-del-cliente-firma_2","text":"","title":"Despliegue del Cliente @firma"},{"location":"markdown_strict/CF_manual-migracion/#importacion-de-librerias-javascript_2","text":"Las librer\u00edas JavaScript del nuevo cliente @firma han sufrido ciertos cambios desde sus versiones anteriores, por lo que deber\u00e1 revisarse el modo de uso desde sus p\u00e1ginas Web HTML. Estos cambios se han realizado para mejorar la compatibilidad con ciertas versiones del entorno de ejecuci\u00f3n de Java (JRE), pero sobre todo para garantizar el funcionamiento correcto con versiones futuras de JRE, navegadores Web y sistemas operativos, especialmente en las nuevas arquitecturas de 64 bits. El integrador ya no necesita gestionar la instalaci\u00f3n y actualizaci\u00f3n del Cliente, dado que estos procesos se gestionan de forma completamente autom\u00e1tica. Debe retirar cualquier referencia en su c\u00f3digo HTML a los siguientes m\u00e9todos JavaScript o par\u00e1metros: instalar() desinstalar() isActualizado() actualizar() isInstalado() getDirectorioInstalacion() Variable installDirectory en constantes.js Variable instalador en instalador.js Los JavaScript que necesita importar en sus p\u00e1ginas HTML pueden igualmente haber cambiado. Aseg\u00farese de que no importa ning\u00fan JavaScript que no exista en el directorio de despliegue o en su subdirectorio common-js. Consulte las p\u00e1ginas Web de ejemplo para determinar que ficheros JavaScript es necesario importar para las distintas operaciones de criptograf\u00eda y firma electr\u00f3nica. Note especialmente que se han eliminado las librer\u00edas JavaScript \u201c runApplet.js \u201d y \u201c time.js \u201d. Es obligatorio eliminar las esperas expl\u00edcitas a la carga del Applet . Esto es, las sentencias que hacen uso de los m\u00e9todos de la biblioteca \u201ctime.js\u201d y la variable clienteFirmaCargado. Por ejemplo: whenTry(\"clienteFirmaCargado == true\", \"clienteFirma.setCipherAlgorithm('\" + cipherAlgorithm + \"')\", \"No se ha podido iniciar el Applet de firma.\"); Por regla general, el navegador Web no termina la carga de la p\u00e1gina hasta que no se finaliza la carga del Cliente, por lo que no suele ser necesario agregar sentencias de este tipo.","title":"Importaci\u00f3n de librer\u00edas JavaScript"},{"location":"markdown_strict/CF_manual-migracion/#cambios-en-los-procedimientos_2","text":"","title":"Cambios en los procedimientos"},{"location":"markdown_strict/CF_manual-migracion/#confirmaciones-de-acceso-a-disco_1","text":"A partir de la versi\u00f3n 3.3, el Cliente @firma pide confirmaci\u00f3n al usuario mediante un di\u00e1logo modal por cada acceso a disco que se realice sin que este lo haya indicado expl\u00edcitamente. Este comportamiento no debe afectar a las aplicaciones desplegadas salvo en caso particulares en el uso del modo de firma masiva program\u00e1tica. Si su aplicaci\u00f3n utiliza el modo de firma masiva program\u00e1tica para la firma masiva de ficheros, aseg\u00farese de utilizar el m\u00e9todo massiveSignatureSign(String) para la ejecuci\u00f3n de las firmas. Si su aplicaci\u00f3n utiliza el modo de firma masiva program\u00e1tica y almacena las firmas resultantes en disco, eval\u00fae el uso del mecanismo de firma de directorios o el usuario se ver\u00e1 obligado a aceptar el guardado individual de cada una de las firmas resultantes.","title":"Confirmaciones de acceso a disco"},{"location":"markdown_strict/CF_manual-migracion/#formato-de-firma-por-defecto_2","text":"En las nuevas versiones del Cliente @firma el formato de firma por defecto es CAdES. Si su herramienta no configurase el formato de firma expl\u00edcitamente mediante el m\u00e9todo setSignatureFormat(String), deber\u00e1 introducir esta sentencia indicando el formato que desee utilizar o modificar el formato de firma por defecto por medio de la variable signatureFormat, del fichero de configuraci\u00f3n \u201c constantes.js\u201d.","title":"Formato de firma por defecto"},{"location":"markdown_strict/CF_manual-migracion/#cadena-de-certificacion-en-firmas-xades_2","text":"En las nuevas versiones del Cliente @firma se inserta la cadena de certificaci\u00f3n completa en las firmas XAdES generadas. Este es el comportamiento recomendado para firmas XAdES, pero impide la correcta validaci\u00f3n de las firmas con versiones de la Plataforma @firma anteriores a la 5.5. Para desactivar este comportamiento es necesario establecer el par\u00e1metro extra \u201cincludeOnlySignningCertificate\u201d al valor \u201ctrue\u201d. Podemos hacer esto mediante la siguiente llamada: clienteFirma.addExtraParam(\u201cincludeOnlySignningCertificate\u201d, \u201ctrue\u201d);","title":"Cadena de certificaci\u00f3n en firmas XAdES"},{"location":"markdown_strict/CF_manual-migracion/#configurar-politica-de-firma_1","text":"La \u00faltima versi\u00f3n del Cliente @firma amplia las opciones para la configuraci\u00f3n de la pol\u00edtica de firma de las firmas avanzadas generadas. En versiones anteriores el m\u00e9todo setPolicy(String, String, String), recib\u00eda el identificador, la descripci\u00f3n y el cualificador de la pol\u00edtica de firma que se desease establecer. En su \u00faltima versi\u00f3n, el Cliente @firma agrega un cuarto par\u00e1metro que es la huella digital (hash) SHA1 de la pol\u00edtica de firma. Este hash se debe introducir en base 64. Ahora el m\u00e9todo setPolicy tiene la forma: void setPolicy(String identifier, String description, String qualifier, String hashB64); Un ejemplo de establecimiento de pol\u00edtica es: clienteFirma.setPolicy(\"urn:oid:2.16.724.1.3.1.1.2.1.8\", \u201cPolitica de la AGE\u201d, \u201chttp://administracionelectronica.gob.es/es/ctt/politicafirma/politica_firma_AGE_v1_8.pdf\u201d, \u201c7SxX3erFuH31TvAw9LZ70N7p1vA=\u201d); As\u00ed mismo, ahora tambi\u00e9n es posible indicar como identificador de la pol\u00edtica una URL, URN u OID.","title":"Configurar pol\u00edtica de firma"},{"location":"markdown_strict/CF_manual-migracion/#cifrado-de-datos_2","text":"En versiones anteriores del Cliente, el comportamiento de los m\u00e9todos de entrada y salida de las funciones de cifrado ten\u00edan un comportamiento err\u00e1tico. Por ejemplo, el m\u00e9todo setPlainData(String) para indicar los datos que se desean cifrar recib\u00eda el texto en claro para cifrar, mientras que getPlainData() devolv\u00eda este texto en base 64. En la nueva versi\u00f3n del Cliente @firma todas las entradas y salidas de datos realizadas con los siguientes m\u00e9todos se realizar\u00e1n en base 64: setPlainData(String) setCipherData(String) getPlainData() getCipherData() Si actualmente invoca a alguno de estos m\u00e9todos pas\u00e1ndole o recibiendo los datos en texto claro utilice los m\u00e9todos getBase64FromText(String, String) y getTextFromBase64(String, String) del cliente para realizar las transformaciones oportunas.","title":"Cifrado de datos"},{"location":"markdown_strict/CF_manual-migracion/#configuracion-de-los-destinatarios-de-los-sobres-electronicos_2","text":"Antes exist\u00eda un solo m\u00e9todo para configurar los destinatarios de los sobres electr\u00f3nicos: setRecipientsToCMS(String): Este m\u00e9todo defin\u00eda todos los destinatarios del sobre de una sola vez. Como par\u00e1metro recib\u00eda el listado de rutas locales de los certificados de los destinatarios separadas por \u2018\\n\u2019. En la nueva versi\u00f3n, existen dos m\u00e9todos adicionales para indicar los destinatarios: addRecipientToCMS(String): Permite agregar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. removeRecipientToCMS(String): Permite eliminar un certificado al listado de destinatarios del sobre. Recibe el certificado codificado en base 64. El m\u00e9todo removeRecipientToCMS elimina cualquier certificado de la lista, ya haya sido cargado mediante addRecipientToCMS o setRecipientsToCMS. Si deseamos eliminar todos los certificados podemos utilizar setRecipientsToCMS(null).","title":"Configuraci\u00f3n de los destinatarios de los sobres electr\u00f3nicos"},{"location":"markdown_strict/CF_manual-migracion/#codificacion-de-textos_1","text":"Los m\u00e9todos getBase64FromText(String) y getTextFromBase64(String) se sustituyen por una versi\u00f3n que permite seleccionar la codificaci\u00f3n de texto a utilizar. La declaraci\u00f3n de los nuevos m\u00e9todos es: String getBase64FromText(String plainText, String charsetName); String getTextFromBase64(String b64, String charsetName); Si no se establece el par\u00e1metro charsetName se tomar\u00e1 la codificaci\u00f3n por defecto del sistema. En caso de no saber con certeza la codificaci\u00f3n del texto, se deber\u00e1 indicar null. En el caso de tratarse un XML debe indicarse siempre null para que se autodetecte la codificaci\u00f3n del XML.","title":"Codificaci\u00f3n de textos"},{"location":"markdown_strict/CF_manual-migracion/#restricciones_2","text":"","title":"Restricciones"},{"location":"markdown_strict/CF_manual-migracion/#funciones-y-metodos-eliminados-en-el-applet-java_1","text":"","title":"Funciones y m\u00e9todos eliminados en el Applet Java"},{"location":"markdown_strict/CF_manual-migracion/#public-string-firmastring-datos_2","text":"Se elimina el m\u00e9todo deprecado Firma(String). Este m\u00e9todo permit\u00eda la compatibilidad del Cliente con la Plataforma @firma versi\u00f3n 4. Este m\u00e9todo recib\u00eda una cadena en base 64 compuesta por un c\u00f3digo de operaci\u00f3n, el valor de transacci\u00f3n y hasta un par de par\u00e1metros, todos concatenados por el separador almohadilla (\u2018#\u2019): OP#TRANS#PARAM1#PARAM2 Los valores permitidos para el par\u00e1metro de operaci\u00f3n (OP) eran: 0: Operaci\u00f3n de Firma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos firmar y se ignora PARAM2. 1: Operaci\u00f3n de Cofirma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos cofirmar y PARAM2 es la firma electr\u00f3nica original. 2: Operaci\u00f3n de Contrafirma de nodos. Para esta operaci\u00f3n PARAM1 es la firma que deseamos contrafirmar y PARAM2 es el listado de \u00edndices tal como los recibe el m\u00e9todo setSignersToCounterSign(String). El resultado de la operaci\u00f3n es la cadena: cert=CERT;enc=SIGN En esta cadena CERT es el certificado en base 64 utilizado para la firma y SIGN es el resultado de la operaci\u00f3n en base 64. En cada operaci\u00f3n se declaraba un atributo firmado adicional con resto a los que aparecen por regla general en las firmas CMS. Este ser\u00eda el atributo \u201c2.5.4.45\u201d con el valor \u201cTRANS\u201d. Para imitar este comportamiento con el Cliente, se deber\u00edan realizar las siguientes acciones: Descodificar el Base64 del par\u00e1metro que recib\u00eda el m\u00e9todo y obtener cada uno de sus componentes (OP, TRANS, PARAM1 y PARAM2). Configurar el formato de firma CMS, el algoritmo de firma SHA1withRSA y el modo de firma expl\u00edcito, mediante las sentencias: clienteFirma .setSignatureFormat(\u201cCMS\u201d); clienteFirma .setSignatureAlgorithm(\u201cSHA1withRSA\u201d); clienteFirma .setSignatureMode(\u201cexplicit); Configurar el n\u00famero de transacci\u00f3n como atributo firmado adicional: clienteFirma .addSignedAttribute(\u201c2.2.4.45\u201d, TRANS); Configurar los datos de entrada, hash, firma y firmantes seg\u00fan la operaci\u00f3n inidicada (OP) y ejecutar la operaci\u00f3n: switch (OP) { // Firma case 0: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); clienteFirma .sign(); break ; // Cofirma (Firma en paralelo) case 1: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); //Establecemos la firma clienteFirma .setElectronicSignature( PARAM2 ); //Cofirmamos clienteFirma .coSign(); break ; // Contrafirma (Firma en cascada) case 2: //Establecemos la firma clienteFirma .setElectronicSignature( PARAM1 ); //Establecemos los firmantes que se desean contrafirmar clienteFirma .setSignersToCounterSign( PARAM2 ); // Contrafirmamos clienteFirma .counterSignIndexes(); break ; } Recuperar el resultado de la operaci\u00f3n y el certificado utilizado para, si se desea, componer la cadena de salida. clienteFirma .getSignCertificateBase64Encoded(); clienteFirma .getSignatureBase64Encoded();","title":"public String Firma(String datos)"},{"location":"markdown_strict/CF_manual-migracion/#public-string-getcmsdata_2","text":"Se elimina el m\u00e9todo en favor del equivalente getB64Data().","title":"public String getCMSData()"},{"location":"markdown_strict/CF_manual-migracion/#public-void-changelanguagestring","text":"Se elimina el m\u00e9todo. En su lugar, para establecer el idioma, podemos proporcionar como par\u00e1metros del applet: language: C\u00f3digo de idioma conforme a la ISO 639. Por ejemplo: \u201ces\u201d, \u201cen\u201d, \u201car\u201d, \u201cde\u201d\u2026 country: C\u00f3digo de pa\u00eds o regi\u00f3n conforme a la ISO 3166. Por ejemplo, \u201cES\u201d, \u201cUK\u201d, \u201cUS\u201d, \u201cDE\u201d\u2026 variant: C\u00f3digo de variante de libre uso. Los tres par\u00e1metros son opcionales. S\u00f3lo se tendr\u00e1 en cuenta el par\u00e1metro country si tambi\u00e9n se ha proporcionado el par\u00e1metro language; y el par\u00e1metro variant si se han indicado los otros dos.","title":"public void changeLanguage(String)"},{"location":"markdown_strict/CF_manual-migracion/#migracion-desde-el-cliente-32","text":"En la nueva versi\u00f3n del Cliente s\u00f3lo se instalan las dependencias en caso de ser necesarias. Durante la carga del Cliente, si se detecta que el entorno puede requerir la instalaci\u00f3n de dependencias del Cliente, se cargar\u00e1 un Bootloader encargado de comprobar si estas dependencias est\u00e1n cubiertas o es necesario instalarlas. La carga del Bootloader, las comprobaciones y la instalaci\u00f3n de dependencias son autom\u00e1ticas y el integrador no tiene que hacer nada al respecto. Cuando el sistema del usuario no es susceptible de requerir dependencias adicionales, se cargar\u00e1 directamente el Cliente y no el Bootloader. Para actualizar el Cliente @firma a la \u00faltima versi\u00f3n y adaptar nuestra aplicaci\u00f3n Web deberemos seguir los siguientes pasos: Sustituir la totalidad de ficheros de despliegue (bibliotecas JavaScript, ficheros JNLP, archivos JAR, ficheros ZIP, ficheros de propiedades y cualquier otro ficheros distribuido con el Cliente @firma) del cliente por las de la \u00faltima versi\u00f3n. Durante este proceso, al sustituir el fichero \u201c constantes.js \u201d, deberemos asegurarnos de que las constantes del nuevo cliente tienen asignadas el mismo valor que el del cliente desplegado. Consulte el apartado Despliegue del Cliente @firma para m\u00e1s detalle. Revisar si alguno de los m\u00e9todos utilizados ha cambiado su comportamiento seg\u00fan se indica en el apartado Cambios en los procedimientos para asegurarnos de que no afecta a nuestra aplicaci\u00f3n. En caso de afectarnos, proceder tal como se indica. Comprobar que no hacemos uso de ninguno de los m\u00e9todos eliminados del Cliente. De hacerlo, lo sustituiremos seg\u00fan se indica en el apartado Restricciones , o por un mecanismo alternativo si no existe alternativa.","title":"Migraci\u00f3n desde el Cliente 3.2"},{"location":"markdown_strict/CF_manual-migracion/#despliegue-del-cliente-firma_3","text":"","title":"Despliegue del Cliente @firma"},{"location":"markdown_strict/CF_manual-migracion/#importacion-de-librerias-javascript_3","text":"Las librer\u00edas JavaScript del nuevo cliente @firma han sufrido ciertos cambios desde sus versiones anteriores, por lo que deber\u00e1 revisarse el modo de uso desde sus p\u00e1ginas Web HTML. Estos cambios se han realizado para mejorar la compatibilidad con ciertas versiones del entorno de ejecuci\u00f3n de Java (JRE), pero sobre todo para garantizar el funcionamiento correcto con versiones futuras de JRE, navegadores Web y sistemas operativos, especialmente en las nuevas arquitecturas de 64 bits. El integrador ya no necesita gestionar la instalaci\u00f3n y actualizaci\u00f3n del Cliente, dado que estos procesos se gestionan de forma completamente autom\u00e1tica. Debe retirar cualquier referencia en su c\u00f3digo HTML al Bootloader y a los siguientes m\u00e9todos JavaScript o par\u00e1metros: instalar() desinstalar() isActualizado() actualizar() isInstalado() getDirectorioInstalacion() Variable installDirectory en constantes.js Variable instalador en instalador.js Los JavaScript que necesita importar en sus p\u00e1ginas HTML pueden igualmente haber cambiado. Aseg\u00farese de que no importa ning\u00fan JavaScript que no exista en el directorio de despliegue o en su subdirectorio common-js. Consulte las p\u00e1ginas Web de ejemplo para determinar que ficheros JavaScript es necesario importar para las distintas operaciones de criptograf\u00eda y firma electr\u00f3nica. Note especialmente que se han eliminado las librer\u00edas JavaScript \u201c runApplet.js \u201d y \u201c time.js \u201d. Es obligatorio eliminar las esperas expl\u00edcitas a la carga del Applet . Esto es, las sentencias que hacen uso de los m\u00e9todos de la biblioteca \u201ctime.js\u201d y la variable clienteFirmaCargado. Por ejemplo: whenTry(\"clienteFirmaCargado == true\", \"clienteFirma.setCipherAlgorithm('\" + cipherAlgorithm + \"')\", \"No se ha podido iniciar el Applet de firma.\"); Por regla general, el navegador Web no termina la carga de la p\u00e1gina hasta que no se finaliza la carga del Cliente, por lo que no suele ser necesario agregar sentencias de este tipo.","title":"Importaci\u00f3n de librer\u00edas JavaScript"},{"location":"markdown_strict/CF_manual-migracion/#cambios-en-los-procedimientos_3","text":"","title":"Cambios en los procedimientos"},{"location":"markdown_strict/CF_manual-migracion/#confirmaciones-de-acceso-a-disco_2","text":"A partir de la versi\u00f3n 3.3, el Cliente @firma pide confirmaci\u00f3n al usuario mediante un di\u00e1logo modal por cada acceso a disco que se realice sin que este lo haya indicado expl\u00edcitamente. Este comportamiento no debe afectar a las aplicaciones desplegadas salvo en caso particulares en el uso del modo de firma masiva program\u00e1tica. Si su aplicaci\u00f3n utiliza el modo de firma masiva program\u00e1tica para la firma masiva de ficheros, aseg\u00farese de utilizar el m\u00e9todo massiveSignatureSign(String) para la ejecuci\u00f3n de las firmas. Si su aplicaci\u00f3n utiliza el modo de firma masiva program\u00e1tica y almacena las firmas resultantes en disco, eval\u00fae el uso del mecanismo de firma de directorios o el usuario se ver\u00e1 obligado a aceptar el guardado individual de cada una de las firmas resultantes.","title":"Confirmaciones de acceso a disco"},{"location":"markdown_strict/CF_manual-migracion/#formato-de-firma-por-defecto_3","text":"En las nuevas versiones del Cliente @firma el formato de firma por defecto es CAdES. Si su herramienta no configurase el formato de firma expl\u00edcitamente mediante el m\u00e9todo setSignatureFormat(String), deber\u00e1 introducir esta sentencia indicando el formato que desee utilizar o modificar el formato de firma por defecto por medio de la variable signatureFormat, del fichero de configuraci\u00f3n \u201c constantes.js\u201d.","title":"Formato de firma por defecto"},{"location":"markdown_strict/CF_manual-migracion/#cadena-de-certificacion-en-firmas-xades_3","text":"En las nuevas versiones del Cliente @firma se inserta la cadena de certificaci\u00f3n completa en las firmas XAdES generadas. Este es el comportamiento recomendado para firmas XAdES, pero impide la correcta validaci\u00f3n de las firmas con versiones de la Plataforma @firma anteriores a la 5.5. Para desactivar este comportamiento es necesario establecer el par\u00e1metro extra \u201cincludeOnlySignningCertificate\u201d al valor \u201ctrue\u201d. Podemos hacer esto mediante la siguiente llamada: clienteFirma.addExtraParam(\u201cincludeOnlySignningCertificate\u201d, \u201ctrue\u201d);","title":"Cadena de certificaci\u00f3n en firmas XAdES"},{"location":"markdown_strict/CF_manual-migracion/#configurar-politica-de-firma_2","text":"La \u00faltima versi\u00f3n del Cliente @firma amplia las opciones para la configuraci\u00f3n de la pol\u00edtica de firma de las firmas avanzadas generadas. En versiones anteriores el m\u00e9todo setPolicy(String, String, String), recib\u00eda el identificador, la descripci\u00f3n y el cualificador de la pol\u00edtica de firma que se desease establecer. En su \u00faltima versi\u00f3n, el Cliente @firma agrega un cuarto par\u00e1metro que es la huella digital (hash) SHA1 de la pol\u00edtica de firma. Este hash se debe introducir en base 64. Ahora el m\u00e9todo setPolicy tiene la forma: void setPolicy(String identifier, String description, String qualifier, String hashB64); Un ejemplo de establecimiento de pol\u00edtica es: clienteFirma.setPolicy(\"urn:oid:2.16.724.1.3.1.1.2.1.8\", \u201cPolitica de la AGE\u201d, \u201chttp://administracionelectronica.gob.es/es/ctt/politicafirma/politica_firma_AGE_v1_8.pdf\u201d, \u201c7SxX3erFuH31TvAw9LZ70N7p1vA=\u201d); As\u00ed mismo, ahora tambi\u00e9n es posible indicar como identificador de la pol\u00edtica una URL, URN u OID.","title":"Configurar pol\u00edtica de firma"},{"location":"markdown_strict/CF_manual-migracion/#cifrado-de-datos_3","text":"En versiones anteriores del Cliente, el comportamiento de los m\u00e9todos de entrada y salida de las funciones de cifrado ten\u00edan un comportamiento err\u00e1tico. Por ejemplo, el m\u00e9todo setPlainData(String) para indicar los datos que se desean cifrar recib\u00eda el texto en claro para cifrar, mientras que getPlainData() devolv\u00eda este texto en base 64. En la nueva versi\u00f3n del Cliente @firma todas las entradas y salidas de datos realizadas con los siguientes m\u00e9todos se realizar\u00e1n en base 64: setPlainData(String) setCipherData(String) getPlainData() getCipherData() Si actualmente invoca a alguno de estos m\u00e9todos pas\u00e1ndole o recibiendo los datos en texto claro utilice los m\u00e9todos getBase64FromText(String, String) y getTextFromBase64(String, String) del cliente para realizar las transformaciones oportunas.","title":"Cifrado de datos"},{"location":"markdown_strict/CF_manual-migracion/#codificacion-de-textos_2","text":"Los m\u00e9todos getBase64FromText(String) y getTextFromBase64(String) se sustituyen por una versi\u00f3n que permite seleccionar la codificaci\u00f3n de texto a utilizar. La declaraci\u00f3n de los nuevos m\u00e9todos es: String getBase64FromText(String plainText, String charsetName); String getTextFromBase64(String b64, String charsetName); Si no se establece el par\u00e1metro charsetName se tomar\u00e1 la codificaci\u00f3n por defecto del sistema. En caso de no saber con certeza la codificaci\u00f3n del texto, se deber\u00e1 indicar null. En el caso de tratarse un XML debe indicarse siempre null para que se autodetecte la codificaci\u00f3n del XML.","title":"Codificaci\u00f3n de textos"},{"location":"markdown_strict/CF_manual-migracion/#restricciones_3","text":"","title":"Restricciones"},{"location":"markdown_strict/CF_manual-migracion/#funciones-y-metodos-eliminados-en-el-applet-java_2","text":"","title":"Funciones y m\u00e9todos eliminados en el Applet Java"},{"location":"markdown_strict/CF_manual-migracion/#public-string-firmastring-datos_3","text":"Se elimina el m\u00e9todo deprecado Firma(String). Este m\u00e9todo permit\u00eda la compatibilidad del Cliente con la Plataforma @firma versi\u00f3n 4. Este m\u00e9todo recib\u00eda una cadena en base 64 compuesta por un c\u00f3digo de operaci\u00f3n, el valor de transacci\u00f3n y hasta un par de par\u00e1metros, todos concatenados por el separador almohadilla (\u2018#\u2019): OP#TRANS#PARAM1#PARAM2 Los valores permitidos para el par\u00e1metro de operaci\u00f3n (OP) eran: 0: Operaci\u00f3n de Firma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos firmar y se ignora PARAM2. 1: Operaci\u00f3n de Cofirma. Para esta operaci\u00f3n PARAM1 es el hash de los datos que deseamos cofirmar y PARAM2 es la firma electr\u00f3nica original. 2: Operaci\u00f3n de Contrafirma de nodos. Para esta operaci\u00f3n PARAM1 es la firma que deseamos contrafirmar y PARAM2 es el listado de \u00edndices tal como los recibe el m\u00e9todo setSignersToCounterSign(String). El resultado de la operaci\u00f3n es la cadena: cert=CERT;enc=SIGN En esta cadena CERT es el certificado en base 64 utilizado para la firma y SIGN es el resultado de la operaci\u00f3n en base 64. En cada operaci\u00f3n se declaraba un atributo firmado adicional con resto a los que aparecen por regla general en las firmas CMS. Este ser\u00eda el atributo \u201c2.5.4.45\u201d con el valor \u201cTRANS\u201d. Para imitar este comportamiento con el Cliente, se deber\u00edan realizar las siguientes acciones: Descodificar el Base64 del par\u00e1metro que recib\u00eda el m\u00e9todo y obtener cada uno de sus componentes (OP, TRANS, PARAM1 y PARAM2). Configurar el formato de firma CMS, el algoritmo de firma SHA1withRSA y el modo de firma expl\u00edcito, mediante las sentencias: clienteFirma .setSignatureFormat(\u201cCMS\u201d); clienteFirma .setSignatureAlgorithm(\u201cSHA1withRSA\u201d); clienteFirma .setSignatureMode(\u201cexplicit); Configurar el n\u00famero de transacci\u00f3n como atributo firmado adicional: clienteFirma .addSignedAttribute(\u201c2.2.4.45\u201d, TRANS); Configurar los datos de entrada, hash, firma y firmantes seg\u00fan la operaci\u00f3n inidicada (OP) y ejecutar la operaci\u00f3n: switch (OP) { // Firma case 0: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); clienteFirma .sign(); break ; // Cofirma (Firma en paralelo) case 1: // Establecemos el hash en base 64 para la firma clienteFirma .setHash( PARAM1 ); //Establecemos la firma clienteFirma .setElectronicSignature( PARAM2 ); //Cofirmamos clienteFirma .coSign(); break ; // Contrafirma (Firma en cascada) case 2: //Establecemos la firma clienteFirma .setElectronicSignature( PARAM1 ); //Establecemos los firmantes que se desean contrafirmar clienteFirma .setSignersToCounterSign( PARAM2 ); // Contrafirmamos clienteFirma .counterSignIndexes(); break ; } Recuperar el resultado de la operaci\u00f3n y el certificado utilizado para, si se desea, componer la cadena de salida. clienteFirma .getSignCertificateBase64Encoded(); clienteFirma .getSignatureBase64Encoded();","title":"public String Firma(String datos)"},{"location":"markdown_strict/CF_manual-migracion/#public-string-getcmsdata_3","text":"Se elimina el m\u00e9todo en favor del equivalente getB64Data().","title":"public String getCMSData()"},{"location":"markdown_strict/CF_manual-migracion/#public-void-changelanguagestring_1","text":"Se elimina el m\u00e9todo. En su lugar, para establecer el idioma, podemos proporcionar como par\u00e1metros del applet: language: C\u00f3digo de idioma conforme a la ISO 639. Por ejemplo: \u201ces\u201d, \u201cen\u201d, \u201car\u201d, \u201cde\u201d\u2026 country: C\u00f3digo de pa\u00eds o regi\u00f3n conforme a la ISO 3166. Por ejemplo, \u201cES\u201d, \u201cUK\u201d, \u201cUS\u201d, \u201cDE\u201d\u2026 variant: C\u00f3digo de variante de libre uso. Los tres par\u00e1metros son opcionales. S\u00f3lo se tendr\u00e1 en cuenta el par\u00e1metro country si tambi\u00e9n se ha proporcionado el par\u00e1metro language; y el par\u00e1metro variant si se han indicado los otros dos.","title":"public void changeLanguage(String)"},{"location":"markdown_strict/CF_manual-migracion/#migracion-desde-el-cliente-33","text":"En la nueva versi\u00f3n del Cliente es una revisi\u00f3n menor desde el Cliente 3.3 que corrige algunos bugs del mismo, a\u00f1ade la compatibilidad con las \u00faltimas versiones de Firefox y agrega nuevas opciones de configuraci\u00f3n. As\u00ed pues, la migraci\u00f3n del Cliente 3.3 al 3.1 es pr\u00e1cticamente instant\u00e1nea y s\u00f3lo es necesario, si lo deseamos, hacer cambios para la correcci\u00f3n de su comportamiento mediante las nuevas propiedades que incorpora. Para actualizar el Cliente @firma a la \u00faltima versi\u00f3n y adaptar nuestra aplicaci\u00f3n Web deberemos seguir los siguientes pasos: Sustituir la totalidad de ficheros de despliegue (bibliotecas JavaScript, ficheros JNLP, archivos JAR, ficheros ZIP, ficheros de propiedades y cualquier otro ficheros distribuido con el Cliente @firma) del cliente por las de la \u00faltima versi\u00f3n. Durante este proceso, al sustituir el fichero \u201c constantes.js \u201d, deberemos asegurarnos de que las constantes del nuevo cliente tienen asignadas el mismo valor que el del cliente desplegado. Revisar si alguno de los m\u00e9todos utilizados ha cambiado su comportamiento seg\u00fan se indica en el apartado Cambios en los procedimientos para asegurarnos de que no afecta a nuestra aplicaci\u00f3n. En caso de afectarnos, proceder tal como se indica.","title":"Migraci\u00f3n desde el Cliente 3.3"},{"location":"markdown_strict/CF_manual-migracion/#cambios-en-los-procedimientos_4","text":"","title":"Cambios en los procedimientos"},{"location":"markdown_strict/CF_manual-migracion/#cadena-de-certificacion-en-firmas-xades_4","text":"En las nuevas versiones del Cliente @firma se inserta la cadena de certificaci\u00f3n completa en las firmas XAdES generadas. Este es el comportamiento recomendado para firmas XAdES, pero impide la correcta validaci\u00f3n de las firmas con versiones de la Plataforma @firma anteriores a la 5.5. Para desactivar este comportamiento es necesario establecer el par\u00e1metro extra \u201cincludeOnlySignningCertificate\u201d al valor \u201ctrue\u201d. Podemos hacer esto mediante la siguiente llamada: clienteFirma.addExtraParam(\u201cincludeOnlySignningCertificate\u201d, \u201ctrue\u201d);","title":"Cadena de certificaci\u00f3n en firmas XAdES"},{"location":"markdown_strict/CF_manual-migracion/#glosario-de-terminos","text":"Firma electr\u00f3nica Es el conjunto de datos, en forma electr\u00f3nica, anejos a otros datos electr\u00f3nicos o asociados funcionalmente con ellos, utilizados como medio para identificar formalmente al autor o a los autores del documento que la recoge. XML Digital Signature (XMLDSig) Es una recomendaci\u00f3n del W3C que define una sintaxis XML para la firma digital XML Advanced Signature (XAdES) Es un conjunto de extensiones a las recomendaciones XML-DSig haci\u00e9ndolas adecuadas para la firma electr\u00f3nica avanzada. RSA Es un sistema criptogr\u00e1fico de clave p\u00fablica desarrollado en 1977. En la actualidad, RSA es el primer y m\u00e1s utilizado algoritmo de este tipo y es v\u00e1lido tanto para cifrar como para firmar digitalmente. XML Es un metalenguaje extensible de etiquetas desarrollado por el World Wide Web Consortium (W3C). Es una simplificaci\u00f3n y adaptaci\u00f3n del SGML y permite definir la gram\u00e1tica de lenguajes espec\u00edficos (de la misma manera que HTML es a su vez un lenguaje definido por SGML). Por lo tanto XML no es realmente un lenguaje en particular, sino una manera de definir lenguajes para diferentes necesidades. Algunos de estos lenguajes que usan XML para su definici\u00f3n son XHTML, SVG, MathML. Office Open XML (OOXML) Es un formato de archivo abierto y est\u00e1ndar cuyas extensiones m\u00e1s comunes son .docx, .xlsx y .pptx. Se le utiliza para representar y almacenar hojas de c\u00e1lculo, diagramas, presentaciones y documentos de texto. Un archivo Office Open XML contiene principalmente datos basados en el lenguaje de marcado XML, comprimidos en un contenedor .zip espec\u00edfico. Open Document Format (ODF) Es un formato de fichero est\u00e1ndar para el almacenamiento de documentos ofim\u00e1ticos tales como hojas de c\u00e1lculo, memorandos, gr\u00e1ficas y presentaciones. Aunque las especificaciones fueron inicialmente elaboradas por Sun, el est\u00e1ndar fue desarrollado por el comit\u00e9 t\u00e9cnico para Open Office XML de la organizaci\u00f3n OASIS y est\u00e1 basado en un esquema XML inicialmente creado e implementado por la suite ofim\u00e1tica OpenOffice.org (ver OpenOffice.org XML). ZIP Es un formato de almacenamiento sin p\u00e9rdida, muy utilizado para la compresi\u00f3n de datos como im\u00e1genes, programas o documentos. PDF Es un formato de almacenamiento de documentos, desarrollado por la empresa Adobe Systems. Este formato es de tipo compuesto (imagen vectorial, mapa de bits y texto). SHA Es un sistema de funciones hash criptogr\u00e1ficas relacionadas de la Agencia de Seguridad Nacional de los Estados Unidos y publicadas por el National Institute of Standards and Technology (NIST). El primer miembro de la familia fue publicado en 1993 es oficialmente llamado SHA. Sin embargo, hoy d\u00eda, no oficialmente se le llama SHA-0 para evitar confusiones con sus sucesores. Dos a\u00f1os m\u00e1s tarde el primer sucesor de SHA fue publicado con el nombre de SHA-1. Existen cuatro variantes m\u00e1s que se han publicado desde entonces cuyas diferencias se basan en un dise\u00f1o algo modificado y rangos de salida incrementados: SHA-224, SHA-256, SHA-384, y SHA-512 (llam\u00e1ndose SHA-2 a todos ellos). PKCS Se refiere a un grupo de est\u00e1ndares de criptograf\u00eda de clave p\u00fablica concebidos y publicados por los laboratorios de RSA en California. A RSA Security se le asignaron los derechos de licenciamiento para la patente de algoritmo de clave asim\u00e9trica RSA y adquiri\u00f3 los derechos de licenciamiento para muchas otras patentes de claves. W3C Es un consorcio internacional que produce recomendaciones para la World Wide Web. Est\u00e1 dirigida por Tim Berners-Lee, el creador original de URL (Uniform Resource Locator, Localizador Uniforme de Recursos), HTTP (HyperText Transfer Protocol, Protocolo de Transferencia de HiperTexto) y HTML (Lenguaje de Marcado de HiperTexto) que son las principales tecnolog\u00edas sobre las que se basa la Web. OpenOffice.org Es una suite ofim\u00e1tica libre (c\u00f3digo abierto y distribuci\u00f3n gratuita) que incluye herramientas como procesador de textos, hoja de c\u00e1lculo, presentaciones, herramientas para el dibujo vectorial y base de datos. Est\u00e1 disponible para varias plataformas, tales como Microsoft Windows, GNU/Linux, BSD, Solaris y Mac OS X. Soporta numerosos formatos de archivo, incluyendo como predeterminado el formato est\u00e1ndar ISO/IEC OpenDocument (ODF), entre otros formatos comunes. A febrero de 2010, OpenOffice.org soporta m\u00e1s de 110 idiomas. Base64 Es un sistema de numeraci\u00f3n posicional que usa 64 como base. Es la mayor potencia de dos que puede ser representada usando \u00fanicamente los caracteres imprimibles de ASCII. Esto ha propiciado su uso para codificaci\u00f3n de correos electr\u00f3nicos, PGP y otras aplicaciones. Todas las variantes famosas que se conocen con el nombre de Base64 usan el rango de caracteres A-Z, a-z y 0-9 en este orden para los primeros 62 d\u00edgitos, pero los s\u00edmbolos escogidos para los \u00faltimos dos d\u00edgitos var\u00edan considerablemente de unas a otras. Otros m\u00e9todos de codificaci\u00f3n como UUEncode y las \u00faltimas versiones de binhex usan un conjunto diferente de 64 caracteres para representar 6 d\u00edgitos binarios, pero \u00e9stos nunca son llamados Base64. ASN.1 Es una norma para representar datos independientemente de la m\u00e1quina que se est\u00e9 usando y sus formas de representaci\u00f3n internas. Es un protocolo de nivel de presentaci\u00f3n en el modelo OSI. Autoridad de Certificaci\u00f3n (CA) Es una entidad de confianza, responsable de emitir y revocar los certificados digitales o certificados, utilizados en la firma electr\u00f3nica, para lo cual se emplea la criptograf\u00eda de clave p\u00fablica. Jur\u00eddicamente es un caso particular de Prestador de Servicios de Certificaci\u00f3n. Certificado Digital Es un documento digital mediante el cual un tercero confiable (una autoridad de certificaci\u00f3n) garantiza la vinculaci\u00f3n entre la identidad de un sujeto o entidad y su clave p\u00fablica. Infraestructura de Clave P\u00fablica (PKI) Es una combinaci\u00f3n de hardware y software, pol\u00edticas y procedimientos de seguridad que permiten la ejecuci\u00f3n con garant\u00edas de operaciones criptogr\u00e1ficas como el cifrado, la firma digital o el no repudio de transacciones electr\u00f3nicas.","title":"Glosario de t\u00e9rminos"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/","text":"El Cliente @firma se compone de m\u00faltiples m\u00f3dulos que le dotan de las distintas funcionalidades de firma, acceso a almacenes y otras caracter\u00edsticas, o que proporcionan funcionalidades de car\u00e1cter general que se utilizan en otros m\u00f3dulos. El presente documento explica a rasgos generales los principales m\u00f3dulos y clases Java del Cliente @firma, enfocando la explicaci\u00f3n para permitir que un desarrollador los integre en sus aplicaciones Java y pueda utilizar las funcionalidades de alto nivel que ofrece. La funcionalidad e interfaces de las clases internas del Cliente @firma son susceptibles a cambios sin previo aviso. Se recomienda que los desarrolladores que utilicen los m\u00f3dulos del cliente @firma utilicen versiones estables de los mismos para evitar cambios. Los m\u00f3dulos del Cliente @firma 1.6 y superiores podr\u00e1n encontrarse en el repositorio central de Maven. Los ficheros fuente del proyecto y todas sus dependencias modificadas est\u00e1n disponibles en GitHub: https://github.com/ctt-gob-es/ No se ofrece soporte sobre las distintas clases del proyecto, si bien s\u00ed se corregir\u00e1 cualquier error que afecte al funcionamiento de los productos con soporte del Cliente @firma. La descripci\u00f3n completa de las clases y m\u00e9todos que se mencionan en este documento puede encontrarse en el Javadoc de los distintos m\u00f3dulos del proyecto. N\u00facleo del cliente El m\u00f3dulo core del Cliente @firma ( afirma-core ) es el m\u00f3dulo principal del proyecto. Las principales clases de inter\u00e9s de este m\u00f3dulo son: Interfaces de utilidad AOSigner : Interfaz de los manejadores de firma. AOCipher : Interfaz de los manejadores de cifrado. AOEnveloper : Interfaz de los manejadores de envoltorios de datos. Clases de utilidad Base64 : Clase para la codificaci\u00f3n y descodificaci\u00f3n de cadenas en base 64. MimeHelper : Clase para la identificaci\u00f3n de tipos de datos. AOUtil : Clase con funciones de utilidad general. Factor\u00edas AOSignerFactory : Factor\u00eda para la obtenci\u00f3n centralizada de manejadores de firma. AOUIFactory : Factor\u00eda para la obtenci\u00f3n centralizada de las clases de gesti\u00f3n de interfaces. Interfaces de Utilidad En este apartado se mostrar\u00e1n las interfaces que implementan las distintas clases que proporcionan al Cliente @firma las capacidades de gesti\u00f3n de firmas, cifrados y sobres digitales. es.gob.afirma.core.signers.AOSigner Es la interfaz b\u00e1sica que implementa cada uno de los manejadores de firma del Cliente. Esta clase proporciona varios m\u00e9todos de utilidad para el tratamiento de las firmas y la generaci\u00f3n de firmas, cofirmas y contrafirmas. Los manejadores de firma que implementan esta interfaz gestionan firmas en un formato concreto. Por ejemplo: CAdES, PAdES, XAdES, Factura Electr\u00f3nica,... Estas implementaciones se encuentran en los distintos m\u00f3dulos de firma que se describen en el apartado M\u00f3dulos de firma . Los m\u00e9todos de especial inter\u00e9s para el manejo de firma electr\u00f3nicas son: boolean isValidDataFile(byte[] data) throws IOException Indica si los datos proporcionados pueden ser firmados por el manejador de firma. Hay formatos de firma que siempre responder\u00e1n que s\u00ed, como el manejador de CAdES que puede firmar cualquier tipo de datos, mientras que otros deber\u00e1n comprobar que los datos son compatibles, como el manejador de PAdES que s\u00f3lo puede firmar documentos PDF y tendr\u00e1 que comprobar que los datos son de este tipo. boolean isSign(byte[] data) throws IOException Indica si los datos indicados se corresponden con una firma compatible con el formato del manejador. Esto es importante para identificar si esos datos son una firma que podamos cofirmar o contrafirmar. Hay que tener en cuenta que existen formatos compatibles con otros, aunque no en ambos sentidos. Por ejemplo, una firma CAdES puede considerarse una firma CMS, por lo que el manejador de CMS devolver\u00eda true al pasarle una firma CAdES en el m\u00e9todo isSign(byte[] data). Sin embargo, una firma CMS no tiene por qu\u00e9 ser una firma CAdES, as\u00ed que el manejador de CAdES podr\u00eda devolver false si se le pasa una firma CMS. byte[] getData(byte[] signData) throws AOException , IOException Recupera los datos que se firmaron si estos est\u00e1n contenidos en la firma electr\u00f3nica pasada por par\u00e1metro. Si los datos no est\u00e1n contenidos devolver\u00e1 null, y si los datos no se corresponden con una firma soportada por el manejador o se obtiene un error al recuperarlos, se lanzar\u00e1 una excepci\u00f3n. byte[] sign(byte[] data, String algorithm, PrivateKey key, Certificate[] certChain, Properties extraParams) throws AOException, IOException Realiza la firma de unos datos. El manejador de firma debe soportar los datos indicados. Deberemos configurar el algoritmo de firma (consultar la documentaci\u00f3n de la clase AOSignConstants para m\u00e1s informaci\u00f3n), la clave y la cadena de certificaci\u00f3n del certificado de firma (consultar el apartado de almacenes de certificados para comprobar c\u00f3mo se obtienen) y las propiedades de configuraci\u00f3n del formato en modo Properties (consultar las propiedades soportadas por cada formato de firma). Ejemplo de uso: ... // Instanciamos el manejador de firmas PAdES incluido en // el m\u00f3dulo afirma-crypto-pdf AOSigner signer = new AOPDFSigner(); // Comprobamos que el documento que deseamos firmar sea // compatible con el manejador (que sea un PDF) if (!signer.isValidDataFile(data)) { throw new IllegalArgumentException( \"No se ha introducido un documento PDF valido\"); } // Generamos una firma PAdES byte [] signedPDF = signer.sign( data, AOSignConstants.SIGN_ALGORITHM_SHA512WITHRSA, key, certChain, null ); ... byte[] cosign(byte[] sign, String algorithm, PrivateKey key, Certificate[] certChain, Properties extraParams) throws AOException, IOException Realiza la cofirma de unos datos a partir de una firma. Esta firma debe contener los datos originalmente firmados o, si no los tiene, debe haberse realizado con el mismo algoritmo de firma que la cofirma que vamos a realizar (para poder reaprovechar la huella digital de los datos). Es importante saber si nuestro manejador de firma soporta la operaci\u00f3n de cofirma. Para realizar la cofirma tambi\u00e9n deberemos indicar el algoritmo de firma, la clave y la cadena del certificado de firma y la configuraci\u00f3n en formato Properties que deseamos aplicar (consultar la documentaci\u00f3n del formato de firma para conocer os par\u00e1metros soportados). Ejemplo de uso: ... // Instanciamos el manejador de firmas CAdES incluido en los m\u00f3dulos // afirma-crypto-cades y afirma-crypto-cades-multi AOSigner signer = new AOCAdESSigner(); // Comprobamos que el documento que deseamos firmar sea compatible // con el manejador if (!signer.isSign(data)) { throw new IllegalArgumentException( \"No se ha introducido una firma CAdES valida\"); } // Cofirmamos byte [] cosignature = signer.cosign( data, AOSignConstants.SIGN_ALGORITHM_SHA512WITHRSA, key, certChain, null ); ... byte[] cosign(byte[] data, byte[] sign, String algorithm, PrivateKey key, Certificate[] certChain, Properties extraParams) throws AOException, IOException Este m\u00e9todo realiza la cofirma de unos datos tal como el anterior pero, en esta ocasi\u00f3n, se le pueden pasar los datos originalmente firmados por si estos no est\u00e1n incluidos en la firma que proporcionamos. byte[] countersign(byte[] sign, String algorithm, CounterSignTarget targetType, Object[] targets, PrivateKey key, Certificate[] certChain, Properties extraParams) throws AOException, IOException Este m\u00e9todo genera la contrafirma de una firma. La firma indicada debe estar soportada por el manejador y este debe ser compatible con la operaci\u00f3n de contrafirma. Como par\u00e1metro se le indica la firma (no tiene porqu\u00e9 incluir los datos originalmente firmados), el algoritmo de firma, el tipo de contrafirma, los nodos del \u00e1rbol de firmas que se desea contrafirmar, la clave y la cadena del certificado de firma y las propiedades de configuraci\u00f3n de la operaci\u00f3n en forma de Properties. El tipo de contrafirma indica si se deben firmar todos los nodos del \u00e1rbol de firmas, s\u00f3lo lo nodos hoja, una serie de nodos concretos o los nodos correspondientes a unos determinados firmantes. Se determinan los objetivos a contrafirmar mediante los valores del enumerado CounterSignTarget. S\u00f3lo en el caso de la contrafirma de nodos (NODES) y firmantes (SIGNERS) ser\u00e1 necesario utilizar el par\u00e1metro targets en donde se indicar\u00e1n los \u00edndices de los nodos a contrafirmar (en el caso de la contrafirma de nodos) o los nombres de los firmantes (en el caso de la contrafirma de firmantes). La posici\u00f3n de los nodos se determina en preorden a partir del \u00e1rbol de firmas devuelto con el m\u00e9todo getSignersStructure(byte[] signature, boolean asSimpleSignInfo) y el nombre de los firmantes el obtenido como elementos del \u00e1rbol devuelto por este m\u00e9todo cuando asSimpleSignInfo es false. Ejemplo de uso: ... // Instanciamos el manejador de firmas XAdES incluido en el m\u00f3dulo // afirma-crypto-xades AOSigner signer = new AOXAdESSigner(); // Comprobamos que el documento que deseamos firmar sea compatible // con el manejador if (!signer.isSign(data)) { throw new IllegalArgumentException( \"No se ha introducido una firma XAdES valida\"); } // Contrafirmamos los nodos hoja byte [] countersignature = signer.countersign( data, AOSignConstants.SIGN_ALGORITHM_SHA512WITHRSA, CounterSignTarget.LEAFS, null , key, certChain, null ); ... Si nuestra aplicaci\u00f3n utiliza un \u00fanico formato de firma podemos instanciar directamente el manejador de firma del formato deseado para realizar las distintas operaciones. Si, por el contrario, nuestra aplicaci\u00f3n utiliza m\u00e1s de un formato de firma o puede cambiar de formato en un futuro, se pueden gestionar los manejadores de firma a trav\u00e9s de la clase AOSignerFactory descrita en el apartado de Factor\u00edas incluidos en el n\u00facleo del Cliente @firma. es.gob.afirma.core.ciphers.AOCipher Esta interfaz es la que implementan los manejadores de las funciones de cifrado sim\u00e9trico. Estos manejadores permiten el cifrado y el descifrado de datos para las configuraciones que soporten. Tambi\u00e9n deben permitir obtener claves de cifrado v\u00e1lidas para esas configuraciones, ya sea gener\u00e1ndolas u obteni\u00e9ndolas a partir de una versi\u00f3n codificada de la misma. Los m\u00e9todos de principal inter\u00e9s de estos manejadores son: Key generateKey(AOCipherConfig algorithmConfig) throws NoSuchAlgorithmException, AOException Genera una clave de cifrado aleatoria compatible con una configuraci\u00f3n de cifrado dada. Si la configuraci\u00f3n no est\u00e1 soportada o no se puede generar la clave se lanza una excepci\u00f3n. Ejemplo de uso ... AOCipherConfig cipherConfig = new AOCipherConfig( AOCipherAlgorithm.AES, null , null ); AOCipher cipher = AOSunJCECipher(); Key key = cipher.generateKey(cipherConfig); ... Key decodeKey(byte[] keyEncoded, AOCipherConfig algorithmConfig, Object[] params) throws KeyException Obtiene un objeto clave a partir de su versi\u00f3n codificada. Este m\u00e9todo es \u00fatil cuando ya existe una clave privada almacenada de forma externa o introducida directamente por el usuario. Recibe la codificaci\u00f3n de esta clave, la configuraci\u00f3n del algoritmo de cifrado con la que es compatible y una lista de par\u00e1metros adicionales por si son necesarios para la descodificaci\u00f3n. En caso de error al generar la clave se lanza una excepci\u00f3n. byte[] cipher(byte[] data, AOCipherConfig algorithmConfig, Key cipherKey) throws AOException, KeyException Cifra sim\u00e9tricamente unos datos (data) a partir de una configuraci\u00f3n de cifrado (algorithmConfig) y una clave de cifrado (cipherKey). La configuraci\u00f3n de cifrado debe estar soportada por el manejador y la clave de cifrado ser compatible con este algoritmo. Se lanzar\u00e1 una excepci\u00f3n si la configuraci\u00f3n no est\u00e1 soportada, la clave no es v\u00e1lida o no se puede realizar el cifrado. Ejemplo de uso ... // Definimos la configuracion de cifrado AOCipherConfig cipherConfig = new AOCipherConfig( AOCipherAlgorithm.AES, null , null ); AOCipher cipher = AOSunJCECipher(); // Generamos la clave Key key = cipher.generateKey(cipherConfig); // Ciframos los datos byte [] cipheredData = cipher.cipher(data, cipherConfig, key); // Obtenemos la codificacion de la clave generada byte [] keyEncoded = key.getEncoded(); ... byte[] decipher(byte[] data, AOCipherConfig algorithmConfig, Key decipherKey) throws AOException, InvalidKeyException Descifra unos datos cifrados (data) a partir de una configuraci\u00f3n de cifrado (algorithmConfig) y una clave de cifrado (decipherKey). La configuraci\u00f3n de cifrado debe estar soportada por el manejador y la clave de cifrado ser compatible con este algoritmo. Se lanzar\u00e1 una excepci\u00f3n si la configuraci\u00f3n no est\u00e1 soportada, la clave no es v\u00e1lida o no se puede realizar el descifrado. Ejemplo de uso ... // Definimos la configuracion de descifrado AOCipherConfig cipherConfig = new AOCipherConfig( AOCipherAlgorithm.AES, null , null ); AOCipher cipher = AOSunJCECipher(); // Recogemos la clave codificada utilizada en el proceso de cifrado Key key = cipher.decodeKey(keyEncoded, cipherConfig, null ); // Desciframos los datos byte [] plainData = cipher.decipher(data, cipherConfig, key); ... es.gob.afirma.core.envelopers.AOEnveloper Es la interfaz que implementan los manejadores que gestionan la generaci\u00f3n y apertura de sobres digitales y otros envoltorios. La \u00fanica implementaci\u00f3n funcional de este m\u00e9todo es AOCMSEnveloper (del m\u00f3dulo afirma-crypto-cms-enveloper ). Los m\u00e9todos m\u00e1s relevantes para la gesti\u00f3n de los envoltorios son: byte[] envelop(byte[] data, String signAlgorithm, String type, PrivateKeyEntry keyEntry, X509Certificate[] certDest, AOCipherAlgorithm cipherAlgorithm, String dataType, Properties extraParams) throws AOException M\u00e9todo para la generaci\u00f3n de un envoltorio. Seg\u00fan el tipo (type) este envoltorio puede incluir los datos en plano o estar estos procesados de alguna manera. Los formatos m\u00e1s extendidos cifran estos datos de tal forma que s\u00f3lo uno de los destinatarios pueda descifrarlo. Una configuraci\u00f3n com\u00fan de este tipo de envoltorios son los sobres electr\u00f3nicos. En estos sobres, los datos son cifrados mediante un algoritmo sim\u00e9trico y una clave aleatoria. La clave se incluye a su vez m\u00faltiples veces en el sobre, cifrada cada una de ellas con la clave p\u00fablica del certificado de uno de los destinatarios definidos en el sobre. De esta forma, cada destinatario declarado podr\u00e1 descifrar con su clave privada la clave con la que se cifraron los datos y con esta ya obtener los datos originales. El m\u00e9todo recibe los datos a envolver, el algoritmo de firma que se desee utilizar en los envoltorios que lo requieran y cuyo algoritmo de huella digital se utilizar\u00e1 de ser necesario (por ejemplo, indicando SHA256withRSA se utilizar\u00e1 este algoritmo para la firma de los envoltorios que lo necesiten y el algoritmo SHA156 para los envoltorios que necesiten algoritmo de huella digital), el tipo de envoltorio deseado (cuyos valores se definir\u00e1n para cada implementaci\u00f3n de la interfaz), la clave privada de quien genera el envoltorio para poder identificarlo como remitente (seg\u00fan el tipo de envoltorio), los certificados de los destinatarios (seg\u00fan el tipo de envoltorio), la configuraci\u00f3n de cifrado (seg\u00fan el tipo de envoltorio), el tipo de los datos envueltos (opcional) y par\u00e1metros adicionales que puedan hacer falta para la configuraci\u00f3n de la operaci\u00f3n (seg\u00fan las necesidades del envoltorio). byte[] recoverData(byte[] envelop, PrivateKeyEntry addresseePke) throws InvalidKeyException, AOException M\u00e9todo para recuperar el contenido de un envoltorio de datos. Este m\u00e9todo recibe el envoltorio y la clave privada de un destinatario cuando se hayan especificado destinatarios para el envoltorio (seg\u00fan tipo). El m\u00e9todo lanza excepciones cuando la clave indicada no se valida o no se pertenezca a un destinario del envoltorio o cuando se produzca otro error durante su apertura. Clases de Utilidad En el n\u00facleo del Cliente @firma se incluyen una serie de clases de utilidad general que se utilizan en casi todos los m\u00f3dulos del Cliente y que un desarrollador/integrador puede utilizar en aquellas aplicaciones que integren el Cliente @firma. A continuaci\u00f3n se detalla cada una de estas clases y los m\u00e9todos que proporcionan para facilitar la labor del integrador/desarrollador. es.gob.afirma.core.misc.Base64 Es una clase para la codificaci\u00f3n de datos a Base 64 y viceversa. Esta clase cuenta con varios m\u00e9todos est\u00e1ticos que se pueden utilizar para tratar aquellas entradas y salidas del Cliente. static String encode( byte[] source ) Codifica datos en una cadena en base 64. static String encode( byte[] source, boolean urlSafe ) Como el anterior, pero, si se indica que la codificaci\u00f3n sea URL Safe , el base 64 resultante usar\u00e1 el car\u00e1cter \u2018-\u2019 en lugar de \u2018+\u2019 y \u2018_\u2019 en lugar de \u2018/\u2019. De esta forma, la cadena base 64 podr\u00e1 enviarse a trav\u00e9s de una URL sin provocar errores de codificaci\u00f3n. static byte[] decode( String s ) throws IOException Decodifica una cadena en base 64 en datos binarios. Se lanza una excepci\u00f3n si la cadena proporcionada no es interpretable como base 64. static byte[] decode( String s, boolean urlSafe ) throws IOException Como el anterior, pero, si se indica que la codificaci\u00f3n sea URL Safe , esperar\u00e1 que la cadena base 64 proporcionada est\u00e9 codificada de esta manera. es.gob.afirma.core.misc.MimeHelper Clase para la identificaci\u00f3n del tipo de datos. Esta clase proporciona el MimeType de los datos y, si es posible, la extensi\u00f3n asignada a ese tipo de documentos y una descripci\u00f3n textual. Adem\u00e1s, incluye m\u00e9todos est\u00e1ticos para obtener el OID de un tipo de dato a partir de su MimeType y viceversa. Para el an\u00e1lisis de unos datos es necesario crear un objeto de esta clase con esos datos y despu\u00e9s obtener los valores identificados. Los m\u00e9todos de inter\u00e9s de la clase son: MimeHelper(byte[] data) Constructor a partir del cual obtenemos un objeto capaz de analizar los datos proporcionados. String getMimeType()throws IOException Obtiene el MimeType de los datos. Devuelve \"application/octet-stream\" si no puede identificarlos. String getExtension() Obtiene la extensi\u00f3n del tipo de fichero en el que se almacenan estos datos. static String transformMimeTypeToOid(String mimetype) M\u00e9todo est\u00e1tico que obtiene el OID identificador del tipo de datos correspondiente a un MimeType. Si no se encuentra, se devuelve el OID gen\u00e9rico \"1.2.840.113549.1.7.1\". static String transformOidToMimeType(String oid) M\u00e9todo est\u00e1tico que obtiene el MimeType asignado a un OID identificador de tipo de datos. Si no se encuentra, se devuelve el MimeType (\"application/octet-stream\"). es.gob.afirma.core.misc.AOUtil Clase con m\u00faltiples m\u00e9todos est\u00e1ticos de utilidad general. static boolean copyFile(File source, File dest) throws IOException Clase para copiar el fichero indicado por source en la ruta de dest. static URI createURI(String file) throws URISyntaxException M\u00e9todo para crear una URI a partir de cualquier cadena de texto con forma de URI o URL (remota o local). Admite los separadores de ruta \"/\" y \"\\, y rutas locales que no empiecen por \"file://\". static InputStream loadFile(URI uri) throws IOException Abre un flujo de datos con el contenido de una URI. static byte[] getDataFromInputStream(InputStream input) throws IOException Lee todo el contenido de un flujo de datos. static String getCN(X509Certificate c) Obtiene el nombre com\u00fan (CN o Common Name ) del Subject de un certificado. Si no tiene definido el nombre com\u00fan devuelve la unidad organizativa (OU o Organization Unit ). Si no encuentra tampoco esta se devuelve el valor del RDN m\u00e1s significativo seg\u00fan el orden. static String getCN(String principal) Obtiene el nombre com\u00fan (CN o Common Name ) a partir del Principal de un certificado. Si no tiene definido el nombre com\u00fan devuelve la unidad organizativa (OU o Organization Unit ). Si no encuentra tampoco esta se devuelve el valor del RDN m\u00e1s significativo seg\u00fan el orden. Factor\u00edas Estas son factor\u00edas que permiten gestionar de forma centralizada algunos de los recursos con los que cuenta el Cliente @firma. El uso de estas factor\u00edas facilitar\u00e1 cambios posteriores en su aplicaci\u00f3n, la ampliaci\u00f3n de sus funcionalidades y el soporte de distintos entornos. es.gob.afirma.core.signers.AOSignerFactory La clase AOSignerFactory es la factor\u00eda desde la que se cargan los manejadores de firma para cada formato soportado por el Cliente. Cuando deseemos trabajar con un formato de firma, podemos solicitar a esta clase el manejador adecuado para ese formato. Para que la factor\u00eda devuelve el manejador de un formato concreto, ser\u00e1 necesario haber importado en el proyecto el m\u00f3dulo de firma correspondiente a ese formato. Los dos principales m\u00e9todos de inter\u00e9s son: static AOSigner getSigner(String signFormat) Este m\u00e9todo permite obtener un manejador de firma para el formato de firma indicado. Este m\u00e9todo es el que se utiliza com\u00fanmente para seleccionar el manejador de firma a utilizar cuando son varios los formatos soportados por la aplicaci\u00f3n o puede cambiarse de formato en un futuro. En caso de soportar un \u00fanico formato se podr\u00eda instanciar directamente un objeto del manejador de firma concreto. El manejador de firma instanciado es un objeto que implementa la interfaz AOSigner. Pueden tomarse los nombres de formatos de firma de la clase AOSignConstants. Ejemplo de uso: ... AOSigner signer = AOSignerFactory.getSigner( AOSignConstants.SIGN_FORMAT_CADES); // Firmamos en formato CAdES byte [] signature = signer.sign( data, // Datos que se firman AOSignConstants.SIGN_ALGORITHM_SHA1WITHRSA, // Algoritmo de firma key, // Referencia a la clave privada certChain, // Cadena de certificaci\u00f3n null // Propiedades extra de configuraci\u00f3n ) ; ... static AOSigner getSigner(byte[] signData) throws IOException Este m\u00e9todo permite obtener el manejador de firma m\u00e1s adecuado para manipular firmas con el formato de la firma introducida por par\u00e1metro. La principal utilidad de este m\u00e9todo es comprobar si unos datos son en realidad una firma con un formato soportado. Una vez obtenido el manejador podemos utilizarlo para manipular la firma y, por ejemplo, cofirmarla/contrafirmar, extraer los datos que se firmaron u obtener informaci\u00f3n de ella. Si los datos introducidos no se corresponde con una firma soportada (podr\u00eda ser una firma pero en un formato que desconocemos, una para el que ahora no tenemos disponible el manejador o una firma en un formato soportado pero con alguna peculiaridad para la que no est\u00e1 preparada el manejador) se devuelve null. Ejemplo de uso: ... byte [] cosignature = null ; // Cofirmamos en el mismo formato en el que esta firmada AOSigner signer = AOSignerFactory.getSigner(signature); if (signer != null ) { cosignature = signer.cosign( signature, // Firma AOSignConstants.SIGN_ALGORITHM_SHA1WITHRSA, // Algoritmo key, // Referencia a la clave privada certChain, // Cadena de certificaci\u00f3n null // Propiedades extra de configuracion ); } ... es.gob.afirma.core.ui.AOUIFactory Esta es una factor\u00eda orientada a obtener informaci\u00f3n del usuario o decisiones por su parte mediante componentes gr\u00e1ficos. AOUIFactory utiliza, seg\u00fan el entorno en el que se ejecute el Cliente, un gestor u otro para generar los di\u00e1logos gr\u00e1ficos que se necesiten. Actualmente, esta factor\u00eda utiliza por defecto una u otra implementaci\u00f3n seg\u00fan el entorno en el que se ejecute que se encuentre. En un futuro, podr\u00edan darse de alta nuevos manejadores y gracias a esta factor\u00eda no ser\u00eda necesario hacer cambios en el c\u00f3digo, tan s\u00f3lo establecerla como el manejador activo. Los manejadores implementados se encuentran en el m\u00f3dulo afirma-ui-core-jse . Aunque el di\u00e1logo de selecci\u00f3n de certificados tambi\u00e9n se maneja internamente mediante esta factor\u00eda, para una integraci\u00f3n por separado de este di\u00e1logo en otra herramienta, es m\u00e1s sencillo hacerlo a trav\u00e9s de la clase AOKeyStoreDialog definida en el m\u00f3dulo afirma-core-keystores , debido a la relaci\u00f3n intr\u00ednseca entre el di\u00e1logo de selecci\u00f3n de certificados y los distintos almacenes a los que se tiene acceso. Para saber m\u00e1s sobre esta clase, consulte el apartado M\u00f3dulo afirma-core-keystores para m\u00e1s informaci\u00f3n. Los manejadores de interfaces gr\u00e1ficos implementan la interfaz: es.gob.afirma.core.ui.AOUIManager . La selecci\u00f3n del gestor de interfaces a utilizar se har\u00e1 de forma autom\u00e1tica pero es posible establecer expl\u00edcitamente qu\u00e9 gestor utilizar mediante el m\u00e9todo: static void setUIManager(AOUIManager manager) Los m\u00e9todos est\u00e1ticos que proporciona AOUIFactory directamente para su uso son: static File[] getLoadFiles(String dialogTitle, String currentDir, String filename, String[] extensions, String description, boolean selectDirectory, boolean multiSelect, Object icon, Object parentComponent) Muestra un di\u00e1logo para la selecci\u00f3n de ficheros. Tambi\u00e9n se puede mencionar m\u00faltiples Se puede configurar mediante par\u00e1metros para permitir seleccionar uno o varios ficheros o, en su lugar, permitir seleccionar un directorio. Son configurables tambi\u00e9n el t\u00edtulo del di\u00e1logo, el nombre del fichero, las extensiones permitidas, la descripci\u00f3n del tipo de fichero, el icono y el componente padre sobre el que mostrar el di\u00e1logo si corresponde. static char[] getPassword(String text, Object parent) Muestra un di\u00e1logo para la obtenci\u00f3n de una contrase\u00f1a. Permite establecer el texto de solicitud de la contrase\u00f1a y el componente padre sobre el que mostrar el di\u00e1logo, si corresponde. static char[] getPassword(String text, String charset, boolean beep, Object parent) Muestra un di\u00e1logo para la obtenci\u00f3n de una contrase\u00f1a. Permite establecer el texto de solicitud de la contrase\u00f1a, el conjunto de caracteres permitidos, indicar si se debe reproducir un beep del sistema si se trata de insertar un car\u00e1cter no v\u00e1lido y configurar el componente padre sobre el que mostrar el di\u00e1logo, si corresponde. static File getSaveDataToFile(byte[] data, String dialogTitle, String currentDir, String selectedFile, String[] exts, String description, Object parent) Muestra un di\u00e1logo para el guardado de datos en disco y la obtenci\u00f3n del fichero guardado. Permite establecer los datos a guardar, el t\u00edtulo del di\u00e1logo, el directorio actual, el fichero seleccionado por defecto, un listado de las extensiones de fichero que se desea que aparezcan en el di\u00e1logo, la descripci\u00f3n del tipo de fichero y el componente padre sobre el que mostrar el di\u00e1logo, si corresponde. static Object showCertificateSelectionDialog(Object parent, NameCertificateBean[] selectionValues) Muestra un di\u00e1logo para la obtenci\u00f3n de un alias de certificado seleccionado por el usuario. Permite configurar el componente padre sobre el que mostrar el di\u00e1logo, si corresponde, y el listado con los certificados (y su informaci\u00f3n) entre los que puede seleccionarse. Se devuelve el alias del certificado seleccionado. static int showConfirmDialog(Object parent, Object message, String title, int optionType, int messageType) Muestra un di\u00e1logo para solicitar la confirmaci\u00f3n del usuario. Permite configurar el componente padre sobre el que mostrar el di\u00e1logo, el mensaje que aparecer\u00e1 en el mismo, su t\u00edtulo, las opciones disponibles y el tipo de di\u00e1logo. static Object showInputDialog(Object parent, Object message, String title, int messageType, Object icon, Object[] selectionValues, Object initialSelectionValue) Muestra un di\u00e1logo para obtener la opci\u00f3n seleccionada por el usuario entre las m\u00faltiples que se configuran. Permite configurar el componente padre sobre el que mostrar el di\u00e1logo, el mensaje que aparecer\u00e1 en el mismo, su t\u00edtulo, el tipo de di\u00e1logo, el icono que deber\u00e1 mostrarse, las opciones seleccionables y el valor inicialmente seleccionado. Almacenes de certificados El uso de certificados es imprescindible para ejecutar las operaciones de firma y ensobrado de datos. Estos certificados se localizan en almacenes de certificados, desde donde cualquier aplicaci\u00f3n compatible puede acceder a ellos. El Cliente @firma es compatible con m\u00faltiples almacenes de certificados (almacenes sistema, almacenes en disco, almacenes con formato est\u00e1ndar...). La gesti\u00f3n de estos almacenes se realiza de forma centralizada, de tal forma que es posible indicar a qu\u00e9 almac\u00e9n deseamos acceder y extraer los certificados que en ellos se encuentran y las claves necesarias para realizar operaciones criptogr\u00e1ficas como la firma de documentos. La gesti\u00f3n de almacenes centralizada se realiza en el Cliente @firma mediante el m\u00f3dulo afirma-core-keystores . Adicionalmente, para el acceso al almac\u00e9n de certificados de Mozilla Firefox es necesario el m\u00f3dulo afirma-keystores-mozilla , y para el uso de certificados simples (que no est\u00e1n en una almac\u00e9n) se utiliza afirma-keystores-single . M\u00f3dulo afirma-core-keystores Es el m\u00f3dulo principal para la gestionar de almacenes de claves y certificados. Este m\u00f3dulo cuenta con una factor\u00eda mediante la cual es posible seleccionar el almac\u00e9n de claves deseado, lo que nos devuelve un manejador para el mismo. Mediante es manejador podremos realizar una serie de operaciones como son, introducir la clave para el acceso al almac\u00e9n, listar los certificados que contiene y extraer sus claves. Las clases de especial inter\u00e9s de este m\u00f3dulo son: es.gob.afirma.keystores.AOKeyStore Enumerado con el listado de almacenes inicialmente soportado por los clientes. Principalmente, estos son: WINDOWS . Almac\u00e9n de claves personales de Windows. S\u00f3lo disponible en sistemas Windows. APPLE . Almac\u00e9n de claves de Mac OS X. S\u00f3lo disponible en sistemas Mac OS X. Permite acceder tanto al almac\u00e9n central del sistema como a almacenes en fichero (si se indica su ruta). MOZ_UNI . Almac\u00e9n de claves de Mozilla Firefox. S\u00f3lo disponible en aquellos en los que se encuentre instalado Mozilla Firefox. En caso de encontrarse instalados e insertados dispositivos PKCS#11, los certificados de estos se listar\u00e1n junto con los del almac\u00e9n interno de Mozilla. Este almac\u00e9n s\u00f3lo puede utilizarse si se encuentra disponible el m\u00f3dulo afirma-keystores-mozilla . SHARED_NSS . Almac\u00e9n de claves central de Linux. Funciona igual que el almac\u00e9n MOZ_UNI y tambi\u00e9n depende del m\u00f3dulo afirma-keystores-mozilla . PKCS12 . Almacenes en disco acordes con el est\u00e1ndar PKCS#12. Para el uso de este manejador es necesario que se especifique la ruta en donde se encuentra del almac\u00e9n que se solicita (fichero \".p12\" y \".pfx\"). JAVA . Almacenes en disco acordes al formato Java de almac\u00e9n de certificado (JKS). Para el uso de este manejador es necesario que se especifique la ruta en donde se encuentra del almac\u00e9n que se solicita (fichero \".jks\"). PKCS11 . Almacenes en dispositivo externo con controlador PKCS#11. Para el acceso a este tipo de dispositivos es necesario que se especifique la ruta de la biblioteca PKCS#11 (\".dll\", \".so\", \".dlib\",...) que lo controla. SINGLE . Certificados \"sueltos\" en disco. Es necesario que se indique la ruta del certificado concreto que desea cargar (\".cer\", \".p7b\"...). Estos certificados carecen de clave privada, por lo que no pueden utilizarse para la firma de documentos, aunque s\u00ed como destinatarios de un sobre electr\u00f3nico. WINADDRESSBOOK . Libreta de direcciones de Windows. S\u00f3lo disponible en sistemas Windows. Estos certificados carecen de clave privada, por lo que no pueden utilizarse para la firma de documentos, aunque s\u00ed como destinatarios de un sobre electr\u00f3nico. JCEKS : Almac\u00e9n de claves seg\u00fan formato Java. Permite el almac\u00e9n de claves, como las de cifrado de datos. Requiere que se indique el fichero del almac\u00e9n. DNIEJAVA: Almac\u00e9n del DNIe al que se acceder\u00e1 mediante el la biblioteca JMulticard. Es necesario incluir esta biblioteca en el proyecto para poder utilizar este almac\u00e9n. KNOWN_SMARTCARDS : Almac\u00e9n compuesto por diversas tarjetas inteligentes de las que se buscar\u00e1 el PKCS#11 en el sistema. El Cliente @firma utiliza este almac\u00e9n cuando se carga desde un perfil temporal de Windows. es.gob.afirma.keystores.AOKeyStoreManagerFactory Es la factor\u00eda a partir de la cual se obtienen los distintos manejadores de almac\u00e9n de certificados. El m\u00e9todo para obtener estos manejadores es: static AggregatedKeyStoreManager getAOKeyStoreManager(AOKeyStore store, String lib, String description, PasswordCallback pssCallback, Object parentComponent) throws AOKeystoreAlternativeException, IOException Recibe el tipo de almac\u00e9n deseado, la ruta de la biblioteca o almac\u00e9n y su descripci\u00f3n si no se trata de un almac\u00e9n de sistema, un callback a trav\u00e9s del cual se pueda insertar la clave del almac\u00e9n y un componente visual para la visualizaci\u00f3n de los posibles di\u00e1logos modales sobre el mismo. Puede lanzar una IOException si no puede acceder al almac\u00e9n, o una AOKeyStoreAlternativeException si el almac\u00e9n no est\u00e1 disponible y se propone una alternativa (declarada en la propia excepci\u00f3n). Ejemplo de uso ... // Obtenemos el gestor del almacen de certificados de Mozilla Firefox AOKeyStoreManager ksm = AOKeyStoreManagerFactory.getAOKeyStoreManager( AOKeyStore.MOZ_UNI, null , null , AOKeyStore.MOZ_UNI.getStorePasswordCallback(null), null ); ... Ejemplo de uso ... // Creamos un PasswordCallback que ya incluye la contrase\u00f1a su uso // directo PasswordCallback psc = new CachePasswordCallback(\"123456\".getChars()); // Obtenemos el gestor para un almac\u00e9n en fichero local de tipo PKCS12 // sin interacci\u00f3n del usuario (valido para su uso en servidor) AOKeyStoreManager ksm = AOKeyStoreManagerFactory.getAOKeyStoreManager( AOKeyStore.PKCS12, \"/ruta/almacen.pfx\", null , psc, this .parent); ... es.gob.afirma.keystores.AOKeyStoreManager Manejador para la gesti\u00f3n de un almac\u00e9n de certificados. Un objeto de este tipo permite obtener los alias de los certificados del almac\u00e9n, los propios certificados y sus claves. Los m\u00e9todos de principal inter\u00e9s de esta clase son: String[] getAliases() Recupera un array con los alias de todos los certificados del almac\u00e9n. Estos alias ser\u00e1n los que utilizaremos para obtener los certificados y las claves del almac\u00e9n. X509Certificate getCertificate(String alias) Recupera del almac\u00e9n el certificado con el alias indicado. X509Certificate[] getCertificateChain(String alias) Recupera del almac\u00e9n todo lo posibles de la cadena de certificaci\u00f3n del certificado con el alias indicado. void setEntryPasswordCallBack(PasswordCallback pwc) Establece el PasswordCallback para la autorizar la obtenci\u00f3n de las PrivateKeyEntry del almac\u00e9n. KeyStore.PrivateKeyEntry getKeyEntry(String alias) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException Recupera del almac\u00e9n la referencia a la clave privada del certificado cuyo alias se indica. Utiliza el PassworCallback indica mediante setEntryPasswordCallBack o, si no se indic\u00f3, el por defecto para el almac\u00e9n de claves configurado. Se lanzar\u00e1 una excepci\u00f3n en caso de ocurrir un error en el tratamiento del almac\u00e9n de claves (KeyStoreException), la clave que se intenta recuperar no sea v\u00e1lida (NoSuchAlgorithmException), no se consiga recuperar la clave (UnrecoverableEntryException) o el usuario cancele la operaci\u00f3n (AOCancelledOperationException). Ejemplo de uso ... // Recuperamos los alias del almacen y la referencia a clave privada // del primero de ellos PrivateKeyEntry scKeyEntry = null ; String[] aliases = ksm.getAliases(); if (aliases.length > 0) { scKeyEntry = ksm.getKeyEntry(aliases[0]); } ... es.gob.afirma.keystores.AOKeyStoreDialog Clase que controla el di\u00e1logo de selecci\u00f3n de certificados. Su implementaci\u00f3n depende de los m\u00f3dulos gr\u00e1ficos del proyecto: afirma-ui-core-jse y afirma-ui-core-jse-keystores . La configuraci\u00f3n acerca del almac\u00e9n del que se deben mostrar los certificados y cuales de ellos se deben visualizar se establece por medio de sus constructores: AOKeyStoreDialog(AOKeyStoreManager ksm, Object parentComponent, boolean checkPrivateKeys, boolean showExpiredCertificates, boolean checkValidity) Crea el di\u00e1logo para la selecci\u00f3n de un certificado permitiendo configurar: ksm : Manejador del almac\u00e9n de claves al que acceder. parentComponent : Componente gr\u00e1fico sobre el que se muestra el di\u00e1logo. checkPrivateKeys : Establece si deben mostrarse \u00fanicamente los certificados que posean clave privada con la cual firmar. showExpiredCertificates : Establece si deben mostrarse tambi\u00e9n los certificados que se encuentren fuera de su periodo de validez. checkValidity : Habilita que se muestre un di\u00e1logo de advertencia si se selecciona un certificado que pueda ser considerado no v\u00e1lido (fuera del periodo de validez,...). AOKeyStoreDialog(AOKeyStoreManager ksm, Object parentComponent, boolean checkPrivateKeys, boolean showExpiredCertificates, boolean checkValidity, List<? extends CertificateFilter> certFilters, boolean mandatoryCertificate) Crea el di\u00e1logo para la selecci\u00f3n de un certificado permitiendo configurar: ksm : Manejador del almac\u00e9n de claves al que acceder. parentComponent : Componente gr\u00e1fico sobre el que se muestra el di\u00e1logo. checkPrivateKeys : Establece si deben mostrarse \u00fanicamente los certificados que posean clave privada con la cual firmar. showExpiredCertificates : Establece si deben mostrarse tambi\u00e9n los certificados que se encuentren fuera de su periodo de validez. checkValidity : Habilita que se muestre un di\u00e1logo de advertencia si se selecciona un certificado que pueda ser considerado no v\u00e1lido (fuera del periodo de validez,...). certFilters : Listado de filtros de certificados. S\u00f3lo se mostrar\u00e1n los certificados que pasen, al menos, por uno de los filtros indicados. mandatoryCertificate : Establece que si s\u00f3lo hay un certificado pasa el proceso de filtrado, o si no hay filtros y s\u00f3lo hay un certificado en el almac\u00e9n, se devuelva el alias de este certificado sin ni siquiera mostrara el di\u00e1logo de selecci\u00f3n. Para la visualizaci\u00f3n y uso del di\u00e1logo contamos principalmente con el m\u00e9todo: String show() throws AOCertificatesNotFoundException; Muestra el di\u00e1logo de selecci\u00f3n de certificados seg\u00fan la configuraci\u00f3n establecida en el constructor. Devuelve el alias del certificado seleccionado por el usuario, o directamente el \u00fanico que hubiese que mostrar si se configur\u00f3 el par\u00e1metro mandatory a true. Si no se encuentran certificado se lanza la excepci\u00f3n AOCertificatesNotFoundException, mientras que si el usuario cierra el di\u00e1logo sin seleccionar un certificado se lanza una AOCancelledOperationException. es.gob.afirma.keystores.filters.CertificateFilter Clase abstracta de la que debe heredar un filtro de certificados. Existen varios filtros de certificados implementados en el m\u00f3dulo afirma-keystores-filters . Los m\u00e9todos que se deben implementar son: boolean matches(X509Certificate cert) Debe devolver true si el certificado indicado cumple con los criterios establecidos en el filtro. String[] matches(String[] aliases, AOKeyStoreManager ksm) Debe devolver el listado con los alias de los certificados que cumplen con los criterios establecidos en el filtro. Si no se implementa este m\u00e9todo, se utilizar\u00e1 el m\u00e9todo anterior por cada certificado individual si supera el filtro establecido, en cuyo caso pasa a la lista de certificados v\u00e1lidos. Implementar este m\u00e9todo es \u00fatil cuando se desean establecer condiciones especiales que afectan a diversos certificados. Por ejemplo, un certificado s\u00f3lo se mostrar\u00e1 si est\u00e1 declarado como un certificado de firma o, si no est\u00e1 declarado como tal pero no hay ning\u00fan otro certificado con ese n\u00famero de serie del Subject . M\u00f3dulo afirma-keystores-mozilla M\u00f3dulo particular para el acceso al almac\u00e9n de Java. Salvo que se desee obtener exclusivamente acceso al almac\u00e9n de Mozilla Firefox, no es recomendable manipular directamente las clases de este m\u00f3dulo. Obtenga este manejador mediante la factor\u00eda de afirma-core-keystores indicando el tipo de almac\u00e9n AOKeyStore.MOZ_UNI. Este almac\u00e9n gestiona de forma unificada los certificados del almac\u00e9n interno de Mozilla y los certificados de los dispositivos externos instalados en el almac\u00e9n mediante su PKCS#11. M\u00f3dulo afirma-keystores-single M\u00f3dulo particular para el manejo de certificados en disco no contenidos en ning\u00fan almac\u00e9n de certificados. Salvo que se desee \u00fanicamente utilizar estos certificados, no es necesario manipular directamente las clases de este m\u00f3dulo. Obtenga este manejador mediante la factor\u00eda de afirma-core-keystores indicando el tipo de almac\u00e9n AOKeyStore.SINGLE. Los certificados gestionados mediante este manejador carecen de clave privada, por lo que no se pueden utilizar para realizar firmas electr\u00f3nicas ni otras operaciones criptogr\u00e1ficas. En cambio, pueden utilizarse para designar a los destinatarios de sobres electr\u00f3nicos. Para utilizar el di\u00e1logo gr\u00e1fico de selecci\u00f3n con los certificados de este almac\u00e9n ser\u00e1 necesario establecer correctamente el par\u00e1metro que determina si se deben mostrar los certificados que carecen de clave privada. M\u00f3dulo afirma-keystores-capiaddressbook M\u00f3dulo particular para el acceso a la libreta de direcciones de sistemas Windows. Salvo que se desee \u00fanicamente utilizar los certificados de es almac\u00e9n, no es necesario manipular directamente la clase de este m\u00f3dulo. Obtenga este manejador mediante la factor\u00eda de afirma-core-keystores indicando el tipo de almac\u00e9n AOKeyStore.WINADDRESSBOOK. Los certificados gestionados mediante este manejador carecen de clave privada, por lo que no se pueden utilizar para realizar firmas electr\u00f3nicas ni otras operaciones criptogr\u00e1ficas. En cambio, pueden utilizarse para designar a los destinatarios de sobres electr\u00f3nicos. Para utilizar el di\u00e1logo gr\u00e1fico de selecci\u00f3n con los certificados de este almac\u00e9n ser\u00e1 necesario establecer correctamente el par\u00e1metro que determina si se deben mostrar los certificados que carecen de clave privada. M\u00f3dulos de firma Un m\u00f3dulo de firma se compone del conjunto de clases que permiten la gesti\u00f3n de un formato de firma (generaci\u00f3n, identificaci\u00f3n y extracci\u00f3n de datos de firma) donde, al menos una de las cuales, debe implementar la interfaz es.gob.afirma.core.signers.AOSigner para permitir su uso de forma homog\u00e9nea al resto de m\u00f3dulos. El que el Cliente @firma soporte o no un formato de firma depende de si integra o no el m\u00f3dulo de firma que se encarga de la gesti\u00f3n de ese formato. Cada uno de los m\u00f3dulos tiene sus propias dependencias, de tal forma que una construcci\u00f3n del Cliente puede disponer de distintos m\u00f3dulos, no necesariamente todos ellos, mientras se incluyan las dependencias de cada uno. Para gestionar firmas en un formato concreto deberemos utilizar las clases del m\u00f3dulo que implementa AOSigner y se encarga de la gesti\u00f3n de este formato. Para consultar c\u00f3mo utilizar la clase AOSigner, revisa el apartado Interfaces de Utilidad de este documento. Para gestionar de forma centralizada los formatos de firma disponibles utilice la clase es.gob.afirma.core.signers.AOSignerFactory . Puede consultar m\u00e1s informaci\u00f3n sobre esta clase en el apartado Factor\u00edas de este m\u00f3dulo. A continuaci\u00f3n se listan los distintos m\u00f3dulos de firma de los que dispone el Cliente @firma y los formatos que soporta: M\u00f3dulo afirma-crypto-cades Este m\u00f3dulo permite la generaci\u00f3n y gesti\u00f3n de firmas en formato CAdES y firmas empaquetadas CAdES-ASiC-S. Todas las firmas CAdES generadas son acordes al formato B-Level. Este m\u00f3dulo depende del core del proyecto ( afirma-core ) y del m\u00f3dulo de funciones de gesti\u00f3n de firmas binarias ( afirma-crypto-core-pkcs7 ). El m\u00f3dulo afirma-crypto-cades no soporta las operaciones de cofirma y contrafirma para lo que requiere que se incluya el m\u00f3dulo afirma-crypto-cades-multi para estas funciones. Utilizaremos el m\u00f3dulo afirma-crypto-cades sin incluir el m\u00f3dulo afirma-crypto-cades-multi s\u00f3lo cuando nuestra aplicaci\u00f3n no realice nunca multifirmas CAdES. Como dependencias externas utiliza las bibliotecas de SpongyCastle. El manejador de firma que implementa la interfaz AOSigner para el manejo de firmas CAdES es es.gob.afirma.signers.cades.AOCAdESSigner . Para obtener este manejador a partir de la factor\u00eda AOSignerFactory, debe utilizarse la constante es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_CADES. El manejador de firma que implementa la interfaz AOSigner para el manejo de firmas CAdES-ASiC-S es es.gob.afirma.signers.cades.asic.AOCAdESASiCSSigner . Para obtener este manejador a partir de la factor\u00eda AOSignerFactory, debe utilizarse la constante es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_CADES_ASIC_S. Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas, cofirmas y contrafirmas CAdES se detallan en el manual de integraci\u00f3n del Cliente @firma y el Javadoc de la clase es.gob.afirma.signers.cades.AOCAdESExtraParams . M\u00f3dulo afirma-crypto-cadestri-client Este m\u00f3dulo permite la generaci\u00f3n de firmas en formato CAdES y empaquetados CAdES-ASiC-S de forma trif\u00e1sica. Las firmas soportadas por este m\u00f3dulo son exactamente iguales a las del m\u00f3dulo afirma-crypto-cades . Este m\u00f3dulo s\u00f3lo permite generar firmas de los formatos soportados y no implementa el resto de m\u00e9todos de la interfaz AOSigner (detecci\u00f3n de datos v\u00e1lidos, identificaci\u00f3n de formatos de firma, extracci\u00f3n de los datos\u2026) Este m\u00f3dulo s\u00f3lo tiene dependencia con el m\u00f3dulo core ( afirma-core ) y, para funcionar, requiere conectar con el servicio de firmas trif\u00e1sicas del Cliente @firma. El manejador de firma que implementa la interfaz AOSigner para la generaci\u00f3n de firmas trif\u00e1sicas CAdES es es.gob.afirma.signers.cadestri.client.AOCAdESTriPhaseSigner y la constante para obtener el manejador a partir de la factor\u00eda AOSignerFactory es es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_CADES_TRI. El manejador de firma que implementa la interfaz AOSigner para la generaci\u00f3n de firmas trif\u00e1sicas empaquetadas CAdES-ASiC-S es es.gob.afirma.signers.cadestri.client.asic.AOCAdESASiCSTriPhaseSigner y la constante para obtener el manejador a partir de la factor\u00eda AOSignerFactory es es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_CADES_ASIC_S_TRI. M\u00f3dulo afirma-crypto-cms Este m\u00f3dulo permite la generaci\u00f3n y gesti\u00f3n de firmas en formato CMS/PKCS#7. Este m\u00f3dulo depende del core del proyecto ( afirma-core ) y de afirma-crypto-core-pkcs7 , el m\u00f3dulo de funciones de gesti\u00f3n de firmas binarias. Como dependencias externas utiliza las bibliotecas de SpongyCastle. El manejador de firma que implementa la interfaz AOSigner es es.gob.afirma.signers.cms.AOCMSSigner . Para obtener este manejador a partir de la factor\u00eda AOSignerFactory, debe utilizarse la constante es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_CMS. Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas, cofirmas y contrafirmas CMS se detallan en el manual de integraci\u00f3n del Cliente @firma y el Javadoc de la clase es.gob.afirma.signers.cms.AOCMSExtraParams . M\u00f3dulo afirma-crypto-pdf Este m\u00f3dulo permite la generaci\u00f3n y gesti\u00f3n de firmas en formato PAdES/PDF. Las firmas PAdES generadas ser\u00e1n acordes al formato B-Level cuando se especifique el subfiltro ETSI.CAdES.detached a trav\u00e9s de las propiedades extraParams. Este m\u00f3dulo depende del core del proyecto ( afirma-core ), el m\u00f3dulo de funciones de gesti\u00f3n de firmas binarias ( afirma-crypto-core-pkcs7 ), el m\u00f3dulo para la generaci\u00f3n de sellos de tiempo en firmas binarias ( afirma-crypto-core-pkcs7-tsp ) y el m\u00f3dulo de generaci\u00f3n de firmas CAdES ( afirma-crypto-cades ). Como dependencias externas utiliza las bibliotecas de SpongyCastle e iText (versi\u00f3n propia generada sobre la versi\u00f3n 2.1.7 de iText). El manejador de firma que implementa la interfaz AOSigner es es.gob.afirma.signers.pades.AOPDFSigner . Para obtener este manejador a partir de la factor\u00eda AOSignerFactory, debe utilizarse la constante es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_PADES. Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas y multifirmas PAdES se detallan en el manual de integraci\u00f3n del Cliente @firma y el Javadoc de la clase es.gob.afirma.signers.pades.PDFExtraParams . M\u00f3dulo afirma-crypto-padestri-client Este m\u00f3dulo permite la generaci\u00f3n de firmas en formato PAdES de forma trif\u00e1sica. Las firmas soportadas por este m\u00f3dulo son exactamente iguales a las del m\u00f3dulo afirma-crypto-pdf . Este m\u00f3dulo s\u00f3lo permite generar firmas de los formatos soportados y no implementa el resto de m\u00e9todos de la interfaz AOSigner (detecci\u00f3n de datos v\u00e1lidos, identificaci\u00f3n de formatos de firma, extracci\u00f3n de los datos\u2026) Este m\u00f3dulo s\u00f3lo tiene dependencia con el m\u00f3dulo core ( afirma-core ) y, para funcionar, requiere conectar con el servicio de firmas trif\u00e1sicas del Cliente @firma. El manejador de firma que implementa la interfaz AOSigner para la generaci\u00f3n de firmas trif\u00e1sicas PAdES es es.gob.afirma.signers.cadestri.client.AOPAdESTriPhaseSigner y la constante para obtener el manejador a partir de la factor\u00eda AOSignerFactory es es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_PADES_TRI. M\u00f3dulo afirma-crypto-xades Este m\u00f3dulo permite la generaci\u00f3n y gesti\u00f3n de firmas en formato XAdES, firmas de Factura Electr\u00f3nica (FacturaE) y firmas empaquetadas XAdES-ASiC-S. Todas las firmas XAdES generadas son acordes al formato B-Level. Este m\u00f3dulo depende del core del proyecto ( afirma-core ) y de el m\u00f3dulo de funciones de gesti\u00f3n de firmas XML ( afirma-crypto-core-xml ). Como dependencia externa utiliza la biblioteca JXAdES. Los manejadores de firma que implementa la interfaz AOSigner son: es.gob.afirma.signers.xades.AOXAdESSigner : Para las firmas XAdES. es.gob.afirma.signers.xades.AOFacturaESigner : Para la firma de facturas electr\u00f3nicas. es.gob.afirma.signers.xades.asic.AOXAdESASiCSSigner : Para las firmas empaquetadas XAdES-ASiC-S. Para obtener estos manejadores a partir de la factor\u00eda AOSignerFactory, deben utilizarse las constantes es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_XADES (para el formato XAdES) es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_FACTURAE (para el formato FacturaE) y es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_XADES-ASIC-S (para el formato XAdES-ASiC-S) Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas, cofirmas y contrafirmas XAdES se detallan en el manual del Cliente @firma y el Javadoc de la clase es.gob.afirma.signers.xades.AOXAdESExtraParams . Salvo que se configure expl\u00edcitamente el tipo de firma XAdES, se generar\u00e1n firmas XAdES Enveloping. Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas de facturas electr\u00f3nicas son un subconjunto de las permitidas en las firmas XAdES y se detallan en el manual de integraci\u00f3n del Cliente @firma y el Javadoc del m\u00e9todo sign() de la clase es.gob.afirma.signers.xades.AOFacturaESigner . Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas, cofirmas y contrafirmas XAdES-ASiC-S se detallan en el Javadoc de la clase es.gob.afirma.signers.xades.AOXAdESASiCSExtraParams . M\u00f3dulo afirma-crypto-xadestri-client Este m\u00f3dulo permite la generaci\u00f3n de firmas en formato XAdES, FacturaE y empaquetados XAdES-ASiC-S de forma trif\u00e1sica. Las firmas soportadas por este m\u00f3dulo son exactamente iguales a las del m\u00f3dulo afirma-crypto-xades . Este m\u00f3dulo s\u00f3lo permite generar firmas de los formatos soportados y no implementa el resto de m\u00e9todos de la interfaz AOSigner (detecci\u00f3n de datos v\u00e1lidos, identificaci\u00f3n de formatos de firma, extracci\u00f3n de los datos\u2026) Este m\u00f3dulo s\u00f3lo tiene dependencia con el m\u00f3dulo core ( afirma-core ) y, para funcionar, requiere conectar con el servicio de firmas trif\u00e1sicas del Cliente @firma. El manejador de firma que implementa la interfaz AOSigner para la generaci\u00f3n de firmas trif\u00e1sicas XAdES es es.gob.afirma.signers.cadestri.client.AOXAdESTriPhaseSigner y la constante para obtener el manejador a partir de la factor\u00eda AOSignerFactory es es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_XADES_TRI. El manejador de firma que implementa la interfaz AOSigner para la generaci\u00f3n de firmas trif\u00e1sicas de factura electr\u00f3nica es es.gob.afirma.signers.cadestri.client.AOFacturaETriPhaseSigner y la constante para obtener el manejador a partir de la factor\u00eda AOSignerFactory es es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_FACTURAE_TRI. El manejador de firma que implementa la interfaz AOSigner para la generaci\u00f3n de firmas trif\u00e1sicas empaquetadas XAdES-ASiC-S es es.gob.afirma.signers.cadestri.client.asic.AOXAdESASiCSTriPhaseSigner y la constante para obtener el manejador a partir de la factor\u00eda AOSignerFactory es es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_XADES_ASIC_S_TRI. M\u00f3dulo afirma-crypto-xmlsignature Este m\u00f3dulo permite la generaci\u00f3n y gesti\u00f3n de firmas en formato XMLdSign. Este m\u00f3dulo depende del core del proyecto ( afirma-core ) y del m\u00f3dulo de funciones de gesti\u00f3n de firmas XML ( afirma-crypto-core-xml ). El manejador de firma que implementa la interfaz AOSigner es es.gob.afirma.signers.xmldsig.AOXMLDSigSigner . Para obtener este manejador a partir de la factor\u00eda AOSignerFactory, debe utilizarse la constante es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_XMLDSIG. Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas, cofirmas y contrafirmas XMLdSig se detallan en el manual de integraci\u00f3n del Cliente @firma y el Javadoc de la clase es.gob.afirma.signers.xmldsig.AOXMLDSigExtraParams . Salvo que se configure expl\u00edcitamente el tipo de firma XMLdSig, se generar\u00e1n firmas XMLdSig Enveloping. M\u00f3dulo afirma-crypto-odf Este m\u00f3dulo permite la generaci\u00f3n y gesti\u00f3n de firmas en formato ODF (Open Document Format). Este m\u00f3dulo depende del core del proyecto ( afirma-core ) y del m\u00f3dulo de funciones de gesti\u00f3n de firmas XML ( afirma-crypto-core-xml ). El manejador de firma que implementa la interfaz AOSigner es es.gob.afirma.signers.odf.AOODFSigner . Para obtener este manejador a partir de la factor\u00eda AOSignerFactory, debe utilizarse la constante es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_ODF. Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas y multifirmas ODF se detallan en el manual de integraci\u00f3n del Cliente @firma y el Javadoc de la clase es.gob.afirma.signers.odf.AOODFExtraParams . M\u00f3dulo afirma-crypto-ooxml Este m\u00f3dulo permite la generaci\u00f3n y gesti\u00f3n de firmas en formato OOXML (Office Open XML). Este m\u00f3dulo depende del core del proyecto ( afirma-core ) y del m\u00f3dulo de funciones de gesti\u00f3n de firmas XML ( afirma-crypto-core-xml ) y los m\u00f3dulos de firmas XAdES ( afirma-crypto-xades ) y XMLdSig ( afirma-crypto-xmlsignature ), de los que se vale para generar las firmas internas de OOXML. El manejador de firma que implementa la interfaz AOSigner es es.gob.afirma.signers.ooxml.AOOOXMLSigner . Para obtener este manejador a partir de la factor\u00eda AOSignerFactory, debe utilizarse la constante es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_OOXML. Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas y multifirmas OOXML se detallan en el manual de integraci\u00f3n del Cliente @firma y el Javadoc de la clase es.gob.afirma.signers.ooxml.AOOOXMLExtraParams . Firma masiva Los procesos de firma masiva consisten en la realizaci\u00f3n de varias firmas/multifirmas electr\u00f3nicas por medio de una \u00fanica operaci\u00f3n de cara al usuario. Aunque este es un procedimiento que se puede programar directamente a partir de la repetici\u00f3n en bucle de las operaciones de firma, el Cliente @firma cuenta con 2 clases que gestionan buena parte de la l\u00f3gica deseable de este tipo de operaciones. Estas 2 clases se encuentran en el m\u00f3dulo afirma-core-massive y son: es.gob.afirma.massive.DirectorySignatureHelper : Para la gesti\u00f3n de firmas/multifirmas masivas de directorios. es.gob.afirma.massive.MassiveSignatureHelper : Para la gesti\u00f3n de firmas/multifirmas masivas de datos, fichero o hashes con una configuraci\u00f3n prefijada. M\u00f3dulo afirma-core-massive es.gob.afirma.massive.DirectorySignatureHelper Es la clase que permite la firma masiva de ficheros en disco. Esta clase cuenta con un constructor con el que se puede establecer el algoritmo, el formato por defecto y el modo de firma que se debe utilizar una vez creado el objeto pueden utilizarse las distintas funciones con las que cuenta para establecer la configuraci\u00f3n de operaci\u00f3n y ejecutarla. Los m\u00e9todos m\u00e1s relevantes son: void setFileFilter(java.io.FileFilter fileFilter) Establece los filtros de fichero que deben pasar los ficheros de los directorios sobre los que se operan. void setOverwritePreviuosFileSigns(boolean overwrite) Establece si debe sobre escribirse cualquier fichero con el mismo nombre que una de las firmas generadas. void setActiveLog(boolean activeLog) Establece si debe generarse un fichero de log con el resultado. Por defecto, se genera. void setLogPath(String path) Establece la ruta del fichero de log. Por defecto, el fichero de salida de firmas. boolean massiveSign(MassiveType type, String startDir, boolean recurse, String outDir, boolean createOutDir, boolean originalFormat, PrivateKeyEntry keyEntry, Properties config) throws AOException Ejecuta la operaci\u00f3n determinada por type sobre el directorio startDir y sus subdirectorios (en caso de que recurse sea true) y genera las firmas resultantes en outDir (cre\u00e1ndolo si as\u00ed se indica en createOutDir). Si se especifica originalFormat las multifirmas se realizar\u00e1n con el formato de la firma original en lugar del establecido en el constructor. La clave de firma es keyEntry y config determina la configuraci\u00f3n de firma. Ejemplo de uso: ... // Creamos el gestor de firmas de directorios DirectorySignatureHelper massiveHelper = new DirectorySignatureHelper( AOSignConstants.SIGN_ALGORITHM_SHA1WITHRSA, AOSignConstants.SIGN_ALGORITHM_PADES, AOSignConstants.SIGN_MODE_IMPLICIT); // Restringimos la firma solo a ficheros PDF massiveHelper.setFileFilter( new FileFilter { public boolean accept(File file) { return file.getName().toLowerCase().endsWith(\".pdf\"); } }); // Desactivamos la generaci\u00f3n del fichero de log massiveHelper.setActiveLog( false ); // Establecemos una configuracion de firma Properties config = new Properties(); config.setProperty(\"signReason\", \"Prueba\"); config.setProperty(\"signatureProductionCity\", \"Madrid\"); config.setProperty(\"signerContact\", \"fulanito@mail.es\"); // Ejecutamos una operaci\u00f3n masiva de firma sobre todos // los ficheros del directorio indicado massiveHelper.massiveSign( MassiveType.SIGN, \"C:/pruebas\", true , \"C:/salida\", true , true , pke, config); ... boolean massiveSign(MassiveType type, String[] filenames, String outDir, boolean createOutDir, boolean originalFormat, PrivateKeyEntry keyEntry, Properties config) throws AOException Ejecuta la operaci\u00f3n determinada por type sobre los ficheros de los que se proporciona la ruta mediante filenames. Genera las firmas resultantes en outDir (cre\u00e1ndolo si as\u00ed se indica en createOutDir). Si se especifica originalFormat las multifirmas se realizar\u00e1n con el formato de la firma original en lugar del establecido en el constructor. La clave de firma es keyEntry y config determina la configuraci\u00f3n de firma. es.gob.afirma.massive.MassiveSignatureHelper Esta es la clase que contiene la l\u00f3gica para la realizaci\u00f3n de firmas masivas de modo program\u00e1tico. La clase se construye con una configuraci\u00f3n completa con todos los par\u00e1metros necesarios para la ejecuci\u00f3n de la operaci\u00f3n masiva. Para aquellos par\u00e1metros que no est\u00e9n establecidos se utilizar\u00e1 la configuraci\u00f3n por defecto. En ning\u00fan caso debe bloquearse la ejecuci\u00f3n mostrando un di\u00e1logo visual al usuario o solicit\u00e1ndole informaci\u00f3n. El constructor de la clase y los m\u00e9todos de mayor inter\u00e9s son: MassiveSignatureHelper(MassiveSignConfiguration configuration) throws AOException Construye el objeto para la ejecuci\u00f3n de la operaci\u00f3n masiva proporcion\u00e1ndole la configuraci\u00f3n completa de firma. Durante la construcci\u00f3n del objeto se establecen los valores para la operaci\u00f3n y se selecciona el manejador de firma a partir del formato configurado. Si no existe ning\u00fan manejador disponible para el formato indicado, se lanzar\u00e1 una excepci\u00f3n. void setMassiveOperation(MassiveType massiveOperation) Permite modificar, despu\u00e9s de la construcci\u00f3n del objeto e incluso iniciado el proceso masivo, la operaci\u00f3n que se debe ejecutar (firma, cofirma, contrafirma de nodos hoja o contrafirma completa). void setSignatureFormat(String signatureFormat) Permite modificar, despu\u00e9s de la construcci\u00f3n del objeto e incluso iniciado el proceso masivo, el formato de firma que ese debe utilizar. Este m\u00e9todo s\u00f3lo afecta a la operaci\u00f3n de firma masiva. A ninguno de los procesos de multifirma. byte[] signData(byte[] data) Firma/multifirma los datos indicados con la configuraci\u00f3n establecida por defecto. Si es una firma masiva y se configur\u00f3 un nuevo formato con setSignatureFormat(String) despu\u00e9s de la construcci\u00f3n del objeto, se utilizar\u00e1 este \u00faltimo. byte[] signFile(String fileUri) Firma/multifirma el contenido del fichero indicado con la configuraci\u00f3n establecida por defecto. byte[] signHash(byte[] hash) Firma el hash indicado con la configuraci\u00f3n establecida por defecto. Este m\u00e9todo s\u00f3lo puede utilizarse cuando la operaci\u00f3n masiva configurada sea la firma, ni cofirma ni contrafirma. String getCurrentLogEntry() Recupera un texto descriptivo con el resultado de la \u00faltima operaci\u00f3n ejecutado mediante los m\u00e9todos signData(byte[]), signFile(String) o signHash(byte[]). Ejemplo de uso ... // Establecemos la configuracion propia del formato Properties extraParams = new Properties(); extraParams.setProperty(\"includeOnlySignningCertificate\", \"true\"); // Establecemos la configuracion de la operaci\u00f3n MassiveSignConfig config = new MassiveSignConfig(pke); config.setMassiveOperation(MassiveType.COUNTERSIGN_LEAFS); config.setSignatureFormat(AOSignConstants.SIGN_FORMAT_CADES); config.setOriginalFormat( true ); config.setExtraParams(extraParams); MassiveSignatureHelper massiveHelper = new MassiveSignatureHelper(config); // Contrafirmamos los ficheros cuyas rutas se encuentran en // el array FILES. // Si es un PDF, lo cofirmamos en su lugar byte [] result = null ; for (String path : FILES) { if (path.toLowerCase().endsWith(\".pdf\")) { massiveHelper.setSignatureFormat( AOSignConstants.SIGN_FORMAT_PADES); result = massiveHelper.signFile(path); massiveHelper.setSignatureFormat( AOSignConstants.SIGN_FORMAT_CADES); } else { result = massiveHelper.signFile(path); } // Operamos como corresponda con el resultado procesar(result); } ... M\u00f3dulos de cifrado A diferencia de los m\u00f3dulos de firma, el Cliente @firma s\u00f3lo cuenta actualmente con un m\u00f3dulo de cifrado sim\u00e9trico de datos. Este m\u00f3dulo es el que se utiliza en los procesos de cifrado del applet Cliente. Un m\u00f3dulo de cifrado debe poseer al menos una clase que implemente la interfaz es.gob.afirma.core.ciphers.AOCipher , as\u00ed es posible utilizar de forma homog\u00e9nea todos los manejadores con las funciones de cifrado que se puedan crear para uso del Cliente. Actualmente no existe ninguna factor\u00eda que permita recuperar los distintos manejadores de funciones de cifrado por lo que se deber\u00e1n utilizar estos directamente a trav\u00e9s de su clase AOCipher. M\u00f3dulo afirma-crypto-cipher Este m\u00f3dulo de cifrado est\u00e1 basado en el proveedor de seguridad SunJCE de Java. El m\u00f3dulo mantiene internamente la lista de configuraciones soportadas, tomadas estas de las disponibles en Java 6, por lo que no ser\u00e1 posible utilizar otro tipo de configuraciones de cifrado. Los algoritmos soportados son: AES ARCFOUR Blowfish DES DESede RC2 PBEWithMD5AndDES PBEWithSHA1AndDESede PBEWithSHA1AndRC2_40 Cada uno de estos algoritmos soporta varias configuraciones de modo y padding , pero de no indicarse se utilizar\u00e1 la que por defecto define el proveedor. Este m\u00f3dulo s\u00f3lo tiene como dependencia al m\u00f3dulo con el n\u00facleo del proyecto ( afirma-core ). La clase del m\u00f3dulo que implementa la interfaz AOCipher es es.gob.afirma.ciphers.jce.AOSunJCECipher . Adem\u00e1s del propio manejador de funciones de cifrado, este m\u00f3dulo incorpora una clase para la creaci\u00f3n y gesti\u00f3n de una almac\u00e9n de claves de cifrado, AOCipherKeyStoreHelper. es.gob.afirma.ciphers.AOCipherKeyStoreHelper Esta clase permite la gesti\u00f3n de un \u00fanico almac\u00e9n de claves por usuario del sistema. Este almac\u00e9n se sit\u00faa inevitablemente en el fichero ciphkeys.jceks , situado en el directorio del usuario. Esta clase no utiliza ning\u00fan tipo de interfaz gr\u00e1fico, por lo que advertencias y cualquier otro tipo de acceso deber\u00e1n realizarse de forma externa. Los m\u00e9todos principales para la gesti\u00f3n de este almac\u00e9n son: static boolean storeExists() M\u00e9todo est\u00e1tico para comprobar la existencia del almac\u00e9n de claves del usuario actual. AOCipherKeyStoreHelper(char[] p) throws AOException, IOException, GeneralSecurityException Constructor para obtener acceso al almac\u00e9n de claves del usuario o para crearlo en caso de que no exista. String[] getAliases() Lista los alias de las claves del almac\u00e9n. Key getKey(String alias) throws AOException Recupera una clave de cifrado del almac\u00e9n, a partir de su alias. void storeKey(String alias, Key key) throws AOException Almacena una clave en el almac\u00e9n identific\u00e1ndola con el alias indicado. Ejemplo de uso ... char [] password = null ; // Si el almacen existe solicitamos la contrasena establecida, si no // existe solicitamos la contrasena para su creacion if (AOCipherKeyStoreHelper.storeExists()) { password = mostrarDialogoSolicitarContrasenaParaApertura(); } else { password = mostrarDialogoSolicitarContrasenaParaCreacion(); } AOCipherKeyStoreHelper cipherKs = AOCipherKeyStoreHelper(password); // Listamos los alias del almacen y recuperamos la clave del primero // de ellos Key key = null ; String[] aliases = cipherKs.getAliases(); if (aliases.length > 0) { key = cipherKs.getKey(aliases[0]); } return key; ... Ejemplos generales Selecci\u00f3n de almac\u00e9n y firma Secuencia: Selecciona un almac\u00e9n de certificados en base al sistema operativo en el que se ejecute, car Carga el almac\u00e9n de claves. Muestra un di\u00e1logo de selecci\u00f3n de certificados. Obtiene el alias del certificado seleccionado. Selecciona el manejador de firma del formato CAdES. Genera una firma de impl\u00edcita de los datos proporcionado. Devuelve el resultado. C\u00f3digo: public byte [] firma( byte [] datos, Component componentePadre) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException, AOKeystoreAlternativeException, IOException, AOCertificatesNotFoundException, AOException { // Selecci\u00f3n del almac\u00e9n de claves por defecto en base al // sistema operativo AOKeyStore ks; switch (Platform. getOS ()) { case WINDOWS : ks = AOKeyStore. WINDOWS ; // Almac\u00e9n de Windows break ; case MACOSX : ks = AOKeyStore. APPLE ; // Llavero de macOS break ; case LINUX : ks = AOKeyStore. MOZ_UNI ; // Almac\u00e9n de Mozilla break ; default : ks = AOKeyStore. PKCS12 ; // Almac\u00e9n en fichero P12/PFX } // Carga del almac\u00e9n de claves final AOKeyStoreManager ksm = AOKeyStoreManagerFactory. getAOKeyStoreManager ( ks, null , \"Almac\u00e9n de claves PKCS#12\", // Este texto s\u00f3lo se mostrar\u00e1 para PKCS#12 ks.getStorePasswordCallback(componentePadre), componentePadre); // Creamos el di\u00e1logo de selecci\u00f3n de certificados final AOKeyStoreDialog dialog = new AOKeyStoreDialog( ksm, componentePadre, true , // S\u00f3lo certificados con claves privadas true , // No mostrar los caducados false ); // Mostrar advertencia cuando se seleccionase alguno caducado // Mostramos el dialogo de selecci\u00f3n final String selectedAlias = dialog.show(); // Si no se selecciono un certificado, se aborta la operacion if (selectedAlias == null ) { throw new AOCancelledOperationException( \"Operacion cancelada por el usuario\"); } // Obtenci\u00f3n de la clave de firma final PrivateKeyEntry pke = ksm.getKeyEntry(selectedAlias); // Seleccion del manejador de firma final AOSigner signer = AOSignerFactory. getSigner (AOSignConstants. SIGN_FORMAT_CADES ); // Configuramos las propiedades que deseemos del formato final Properties extraParams = new Properties(); // Firma implicita (Attached) extraParams.setProperty(CAdESExtraParams. MODE , \"implicit\"); //$NON-NLS-1$ final byte [] firma = signer.sign( datos, // Datos que deseamos firmar AOSignConstants. SIGN_ALGORITHM_SHA256WITHRSA , // Algoritmo de firma pke.getPrivateKey(), // Referencia a la clave privada pke.getCertificateChain(), // Cadena de certificaci\u00f3n extraParams); // Par\u00e1metros extra de configuraci\u00f3n return firma; } M\u00f3dulos requeridos (adem\u00e1s de sus dependencias): afirma-core afirma-core-keystore afirma-keystores-mozilla afirma-crypto-cades afirma-ui-core-jse-keystores < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"CF manual integracion modulos ES"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#nucleo-del-cliente","text":"El m\u00f3dulo core del Cliente @firma ( afirma-core ) es el m\u00f3dulo principal del proyecto. Las principales clases de inter\u00e9s de este m\u00f3dulo son: Interfaces de utilidad AOSigner : Interfaz de los manejadores de firma. AOCipher : Interfaz de los manejadores de cifrado. AOEnveloper : Interfaz de los manejadores de envoltorios de datos. Clases de utilidad Base64 : Clase para la codificaci\u00f3n y descodificaci\u00f3n de cadenas en base 64. MimeHelper : Clase para la identificaci\u00f3n de tipos de datos. AOUtil : Clase con funciones de utilidad general. Factor\u00edas AOSignerFactory : Factor\u00eda para la obtenci\u00f3n centralizada de manejadores de firma. AOUIFactory : Factor\u00eda para la obtenci\u00f3n centralizada de las clases de gesti\u00f3n de interfaces.","title":"N\u00facleo del cliente"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#interfaces-de-utilidad","text":"En este apartado se mostrar\u00e1n las interfaces que implementan las distintas clases que proporcionan al Cliente @firma las capacidades de gesti\u00f3n de firmas, cifrados y sobres digitales.","title":"Interfaces de Utilidad"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmacoresignersaosigner","text":"Es la interfaz b\u00e1sica que implementa cada uno de los manejadores de firma del Cliente. Esta clase proporciona varios m\u00e9todos de utilidad para el tratamiento de las firmas y la generaci\u00f3n de firmas, cofirmas y contrafirmas. Los manejadores de firma que implementan esta interfaz gestionan firmas en un formato concreto. Por ejemplo: CAdES, PAdES, XAdES, Factura Electr\u00f3nica,... Estas implementaciones se encuentran en los distintos m\u00f3dulos de firma que se describen en el apartado M\u00f3dulos de firma . Los m\u00e9todos de especial inter\u00e9s para el manejo de firma electr\u00f3nicas son: boolean isValidDataFile(byte[] data) throws IOException Indica si los datos proporcionados pueden ser firmados por el manejador de firma. Hay formatos de firma que siempre responder\u00e1n que s\u00ed, como el manejador de CAdES que puede firmar cualquier tipo de datos, mientras que otros deber\u00e1n comprobar que los datos son compatibles, como el manejador de PAdES que s\u00f3lo puede firmar documentos PDF y tendr\u00e1 que comprobar que los datos son de este tipo. boolean isSign(byte[] data) throws IOException Indica si los datos indicados se corresponden con una firma compatible con el formato del manejador. Esto es importante para identificar si esos datos son una firma que podamos cofirmar o contrafirmar. Hay que tener en cuenta que existen formatos compatibles con otros, aunque no en ambos sentidos. Por ejemplo, una firma CAdES puede considerarse una firma CMS, por lo que el manejador de CMS devolver\u00eda true al pasarle una firma CAdES en el m\u00e9todo isSign(byte[] data). Sin embargo, una firma CMS no tiene por qu\u00e9 ser una firma CAdES, as\u00ed que el manejador de CAdES podr\u00eda devolver false si se le pasa una firma CMS. byte[] getData(byte[] signData) throws AOException , IOException Recupera los datos que se firmaron si estos est\u00e1n contenidos en la firma electr\u00f3nica pasada por par\u00e1metro. Si los datos no est\u00e1n contenidos devolver\u00e1 null, y si los datos no se corresponden con una firma soportada por el manejador o se obtiene un error al recuperarlos, se lanzar\u00e1 una excepci\u00f3n. byte[] sign(byte[] data, String algorithm, PrivateKey key, Certificate[] certChain, Properties extraParams) throws AOException, IOException Realiza la firma de unos datos. El manejador de firma debe soportar los datos indicados. Deberemos configurar el algoritmo de firma (consultar la documentaci\u00f3n de la clase AOSignConstants para m\u00e1s informaci\u00f3n), la clave y la cadena de certificaci\u00f3n del certificado de firma (consultar el apartado de almacenes de certificados para comprobar c\u00f3mo se obtienen) y las propiedades de configuraci\u00f3n del formato en modo Properties (consultar las propiedades soportadas por cada formato de firma). Ejemplo de uso: ... // Instanciamos el manejador de firmas PAdES incluido en // el m\u00f3dulo afirma-crypto-pdf AOSigner signer = new AOPDFSigner(); // Comprobamos que el documento que deseamos firmar sea // compatible con el manejador (que sea un PDF) if (!signer.isValidDataFile(data)) { throw new IllegalArgumentException( \"No se ha introducido un documento PDF valido\"); } // Generamos una firma PAdES byte [] signedPDF = signer.sign( data, AOSignConstants.SIGN_ALGORITHM_SHA512WITHRSA, key, certChain, null ); ... byte[] cosign(byte[] sign, String algorithm, PrivateKey key, Certificate[] certChain, Properties extraParams) throws AOException, IOException Realiza la cofirma de unos datos a partir de una firma. Esta firma debe contener los datos originalmente firmados o, si no los tiene, debe haberse realizado con el mismo algoritmo de firma que la cofirma que vamos a realizar (para poder reaprovechar la huella digital de los datos). Es importante saber si nuestro manejador de firma soporta la operaci\u00f3n de cofirma. Para realizar la cofirma tambi\u00e9n deberemos indicar el algoritmo de firma, la clave y la cadena del certificado de firma y la configuraci\u00f3n en formato Properties que deseamos aplicar (consultar la documentaci\u00f3n del formato de firma para conocer os par\u00e1metros soportados). Ejemplo de uso: ... // Instanciamos el manejador de firmas CAdES incluido en los m\u00f3dulos // afirma-crypto-cades y afirma-crypto-cades-multi AOSigner signer = new AOCAdESSigner(); // Comprobamos que el documento que deseamos firmar sea compatible // con el manejador if (!signer.isSign(data)) { throw new IllegalArgumentException( \"No se ha introducido una firma CAdES valida\"); } // Cofirmamos byte [] cosignature = signer.cosign( data, AOSignConstants.SIGN_ALGORITHM_SHA512WITHRSA, key, certChain, null ); ... byte[] cosign(byte[] data, byte[] sign, String algorithm, PrivateKey key, Certificate[] certChain, Properties extraParams) throws AOException, IOException Este m\u00e9todo realiza la cofirma de unos datos tal como el anterior pero, en esta ocasi\u00f3n, se le pueden pasar los datos originalmente firmados por si estos no est\u00e1n incluidos en la firma que proporcionamos. byte[] countersign(byte[] sign, String algorithm, CounterSignTarget targetType, Object[] targets, PrivateKey key, Certificate[] certChain, Properties extraParams) throws AOException, IOException Este m\u00e9todo genera la contrafirma de una firma. La firma indicada debe estar soportada por el manejador y este debe ser compatible con la operaci\u00f3n de contrafirma. Como par\u00e1metro se le indica la firma (no tiene porqu\u00e9 incluir los datos originalmente firmados), el algoritmo de firma, el tipo de contrafirma, los nodos del \u00e1rbol de firmas que se desea contrafirmar, la clave y la cadena del certificado de firma y las propiedades de configuraci\u00f3n de la operaci\u00f3n en forma de Properties. El tipo de contrafirma indica si se deben firmar todos los nodos del \u00e1rbol de firmas, s\u00f3lo lo nodos hoja, una serie de nodos concretos o los nodos correspondientes a unos determinados firmantes. Se determinan los objetivos a contrafirmar mediante los valores del enumerado CounterSignTarget. S\u00f3lo en el caso de la contrafirma de nodos (NODES) y firmantes (SIGNERS) ser\u00e1 necesario utilizar el par\u00e1metro targets en donde se indicar\u00e1n los \u00edndices de los nodos a contrafirmar (en el caso de la contrafirma de nodos) o los nombres de los firmantes (en el caso de la contrafirma de firmantes). La posici\u00f3n de los nodos se determina en preorden a partir del \u00e1rbol de firmas devuelto con el m\u00e9todo getSignersStructure(byte[] signature, boolean asSimpleSignInfo) y el nombre de los firmantes el obtenido como elementos del \u00e1rbol devuelto por este m\u00e9todo cuando asSimpleSignInfo es false. Ejemplo de uso: ... // Instanciamos el manejador de firmas XAdES incluido en el m\u00f3dulo // afirma-crypto-xades AOSigner signer = new AOXAdESSigner(); // Comprobamos que el documento que deseamos firmar sea compatible // con el manejador if (!signer.isSign(data)) { throw new IllegalArgumentException( \"No se ha introducido una firma XAdES valida\"); } // Contrafirmamos los nodos hoja byte [] countersignature = signer.countersign( data, AOSignConstants.SIGN_ALGORITHM_SHA512WITHRSA, CounterSignTarget.LEAFS, null , key, certChain, null ); ... Si nuestra aplicaci\u00f3n utiliza un \u00fanico formato de firma podemos instanciar directamente el manejador de firma del formato deseado para realizar las distintas operaciones. Si, por el contrario, nuestra aplicaci\u00f3n utiliza m\u00e1s de un formato de firma o puede cambiar de formato en un futuro, se pueden gestionar los manejadores de firma a trav\u00e9s de la clase AOSignerFactory descrita en el apartado de Factor\u00edas incluidos en el n\u00facleo del Cliente @firma.","title":"es.gob.afirma.core.signers.AOSigner"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmacoreciphersaocipher","text":"Esta interfaz es la que implementan los manejadores de las funciones de cifrado sim\u00e9trico. Estos manejadores permiten el cifrado y el descifrado de datos para las configuraciones que soporten. Tambi\u00e9n deben permitir obtener claves de cifrado v\u00e1lidas para esas configuraciones, ya sea gener\u00e1ndolas u obteni\u00e9ndolas a partir de una versi\u00f3n codificada de la misma. Los m\u00e9todos de principal inter\u00e9s de estos manejadores son: Key generateKey(AOCipherConfig algorithmConfig) throws NoSuchAlgorithmException, AOException Genera una clave de cifrado aleatoria compatible con una configuraci\u00f3n de cifrado dada. Si la configuraci\u00f3n no est\u00e1 soportada o no se puede generar la clave se lanza una excepci\u00f3n. Ejemplo de uso ... AOCipherConfig cipherConfig = new AOCipherConfig( AOCipherAlgorithm.AES, null , null ); AOCipher cipher = AOSunJCECipher(); Key key = cipher.generateKey(cipherConfig); ... Key decodeKey(byte[] keyEncoded, AOCipherConfig algorithmConfig, Object[] params) throws KeyException Obtiene un objeto clave a partir de su versi\u00f3n codificada. Este m\u00e9todo es \u00fatil cuando ya existe una clave privada almacenada de forma externa o introducida directamente por el usuario. Recibe la codificaci\u00f3n de esta clave, la configuraci\u00f3n del algoritmo de cifrado con la que es compatible y una lista de par\u00e1metros adicionales por si son necesarios para la descodificaci\u00f3n. En caso de error al generar la clave se lanza una excepci\u00f3n. byte[] cipher(byte[] data, AOCipherConfig algorithmConfig, Key cipherKey) throws AOException, KeyException Cifra sim\u00e9tricamente unos datos (data) a partir de una configuraci\u00f3n de cifrado (algorithmConfig) y una clave de cifrado (cipherKey). La configuraci\u00f3n de cifrado debe estar soportada por el manejador y la clave de cifrado ser compatible con este algoritmo. Se lanzar\u00e1 una excepci\u00f3n si la configuraci\u00f3n no est\u00e1 soportada, la clave no es v\u00e1lida o no se puede realizar el cifrado. Ejemplo de uso ... // Definimos la configuracion de cifrado AOCipherConfig cipherConfig = new AOCipherConfig( AOCipherAlgorithm.AES, null , null ); AOCipher cipher = AOSunJCECipher(); // Generamos la clave Key key = cipher.generateKey(cipherConfig); // Ciframos los datos byte [] cipheredData = cipher.cipher(data, cipherConfig, key); // Obtenemos la codificacion de la clave generada byte [] keyEncoded = key.getEncoded(); ... byte[] decipher(byte[] data, AOCipherConfig algorithmConfig, Key decipherKey) throws AOException, InvalidKeyException Descifra unos datos cifrados (data) a partir de una configuraci\u00f3n de cifrado (algorithmConfig) y una clave de cifrado (decipherKey). La configuraci\u00f3n de cifrado debe estar soportada por el manejador y la clave de cifrado ser compatible con este algoritmo. Se lanzar\u00e1 una excepci\u00f3n si la configuraci\u00f3n no est\u00e1 soportada, la clave no es v\u00e1lida o no se puede realizar el descifrado. Ejemplo de uso ... // Definimos la configuracion de descifrado AOCipherConfig cipherConfig = new AOCipherConfig( AOCipherAlgorithm.AES, null , null ); AOCipher cipher = AOSunJCECipher(); // Recogemos la clave codificada utilizada en el proceso de cifrado Key key = cipher.decodeKey(keyEncoded, cipherConfig, null ); // Desciframos los datos byte [] plainData = cipher.decipher(data, cipherConfig, key); ...","title":"es.gob.afirma.core.ciphers.AOCipher"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmacoreenvelopersaoenveloper","text":"Es la interfaz que implementan los manejadores que gestionan la generaci\u00f3n y apertura de sobres digitales y otros envoltorios. La \u00fanica implementaci\u00f3n funcional de este m\u00e9todo es AOCMSEnveloper (del m\u00f3dulo afirma-crypto-cms-enveloper ). Los m\u00e9todos m\u00e1s relevantes para la gesti\u00f3n de los envoltorios son: byte[] envelop(byte[] data, String signAlgorithm, String type, PrivateKeyEntry keyEntry, X509Certificate[] certDest, AOCipherAlgorithm cipherAlgorithm, String dataType, Properties extraParams) throws AOException M\u00e9todo para la generaci\u00f3n de un envoltorio. Seg\u00fan el tipo (type) este envoltorio puede incluir los datos en plano o estar estos procesados de alguna manera. Los formatos m\u00e1s extendidos cifran estos datos de tal forma que s\u00f3lo uno de los destinatarios pueda descifrarlo. Una configuraci\u00f3n com\u00fan de este tipo de envoltorios son los sobres electr\u00f3nicos. En estos sobres, los datos son cifrados mediante un algoritmo sim\u00e9trico y una clave aleatoria. La clave se incluye a su vez m\u00faltiples veces en el sobre, cifrada cada una de ellas con la clave p\u00fablica del certificado de uno de los destinatarios definidos en el sobre. De esta forma, cada destinatario declarado podr\u00e1 descifrar con su clave privada la clave con la que se cifraron los datos y con esta ya obtener los datos originales. El m\u00e9todo recibe los datos a envolver, el algoritmo de firma que se desee utilizar en los envoltorios que lo requieran y cuyo algoritmo de huella digital se utilizar\u00e1 de ser necesario (por ejemplo, indicando SHA256withRSA se utilizar\u00e1 este algoritmo para la firma de los envoltorios que lo necesiten y el algoritmo SHA156 para los envoltorios que necesiten algoritmo de huella digital), el tipo de envoltorio deseado (cuyos valores se definir\u00e1n para cada implementaci\u00f3n de la interfaz), la clave privada de quien genera el envoltorio para poder identificarlo como remitente (seg\u00fan el tipo de envoltorio), los certificados de los destinatarios (seg\u00fan el tipo de envoltorio), la configuraci\u00f3n de cifrado (seg\u00fan el tipo de envoltorio), el tipo de los datos envueltos (opcional) y par\u00e1metros adicionales que puedan hacer falta para la configuraci\u00f3n de la operaci\u00f3n (seg\u00fan las necesidades del envoltorio). byte[] recoverData(byte[] envelop, PrivateKeyEntry addresseePke) throws InvalidKeyException, AOException M\u00e9todo para recuperar el contenido de un envoltorio de datos. Este m\u00e9todo recibe el envoltorio y la clave privada de un destinatario cuando se hayan especificado destinatarios para el envoltorio (seg\u00fan tipo). El m\u00e9todo lanza excepciones cuando la clave indicada no se valida o no se pertenezca a un destinario del envoltorio o cuando se produzca otro error durante su apertura.","title":"es.gob.afirma.core.envelopers.AOEnveloper"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#clases-de-utilidad","text":"En el n\u00facleo del Cliente @firma se incluyen una serie de clases de utilidad general que se utilizan en casi todos los m\u00f3dulos del Cliente y que un desarrollador/integrador puede utilizar en aquellas aplicaciones que integren el Cliente @firma. A continuaci\u00f3n se detalla cada una de estas clases y los m\u00e9todos que proporcionan para facilitar la labor del integrador/desarrollador.","title":"Clases de Utilidad"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmacoremiscbase64","text":"Es una clase para la codificaci\u00f3n de datos a Base 64 y viceversa. Esta clase cuenta con varios m\u00e9todos est\u00e1ticos que se pueden utilizar para tratar aquellas entradas y salidas del Cliente. static String encode( byte[] source ) Codifica datos en una cadena en base 64. static String encode( byte[] source, boolean urlSafe ) Como el anterior, pero, si se indica que la codificaci\u00f3n sea URL Safe , el base 64 resultante usar\u00e1 el car\u00e1cter \u2018-\u2019 en lugar de \u2018+\u2019 y \u2018_\u2019 en lugar de \u2018/\u2019. De esta forma, la cadena base 64 podr\u00e1 enviarse a trav\u00e9s de una URL sin provocar errores de codificaci\u00f3n. static byte[] decode( String s ) throws IOException Decodifica una cadena en base 64 en datos binarios. Se lanza una excepci\u00f3n si la cadena proporcionada no es interpretable como base 64. static byte[] decode( String s, boolean urlSafe ) throws IOException Como el anterior, pero, si se indica que la codificaci\u00f3n sea URL Safe , esperar\u00e1 que la cadena base 64 proporcionada est\u00e9 codificada de esta manera.","title":"es.gob.afirma.core.misc.Base64"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmacoremiscmimehelper","text":"Clase para la identificaci\u00f3n del tipo de datos. Esta clase proporciona el MimeType de los datos y, si es posible, la extensi\u00f3n asignada a ese tipo de documentos y una descripci\u00f3n textual. Adem\u00e1s, incluye m\u00e9todos est\u00e1ticos para obtener el OID de un tipo de dato a partir de su MimeType y viceversa. Para el an\u00e1lisis de unos datos es necesario crear un objeto de esta clase con esos datos y despu\u00e9s obtener los valores identificados. Los m\u00e9todos de inter\u00e9s de la clase son: MimeHelper(byte[] data) Constructor a partir del cual obtenemos un objeto capaz de analizar los datos proporcionados. String getMimeType()throws IOException Obtiene el MimeType de los datos. Devuelve \"application/octet-stream\" si no puede identificarlos. String getExtension() Obtiene la extensi\u00f3n del tipo de fichero en el que se almacenan estos datos. static String transformMimeTypeToOid(String mimetype) M\u00e9todo est\u00e1tico que obtiene el OID identificador del tipo de datos correspondiente a un MimeType. Si no se encuentra, se devuelve el OID gen\u00e9rico \"1.2.840.113549.1.7.1\". static String transformOidToMimeType(String oid) M\u00e9todo est\u00e1tico que obtiene el MimeType asignado a un OID identificador de tipo de datos. Si no se encuentra, se devuelve el MimeType (\"application/octet-stream\").","title":"es.gob.afirma.core.misc.MimeHelper"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmacoremiscaoutil","text":"Clase con m\u00faltiples m\u00e9todos est\u00e1ticos de utilidad general. static boolean copyFile(File source, File dest) throws IOException Clase para copiar el fichero indicado por source en la ruta de dest. static URI createURI(String file) throws URISyntaxException M\u00e9todo para crear una URI a partir de cualquier cadena de texto con forma de URI o URL (remota o local). Admite los separadores de ruta \"/\" y \"\\, y rutas locales que no empiecen por \"file://\". static InputStream loadFile(URI uri) throws IOException Abre un flujo de datos con el contenido de una URI. static byte[] getDataFromInputStream(InputStream input) throws IOException Lee todo el contenido de un flujo de datos. static String getCN(X509Certificate c) Obtiene el nombre com\u00fan (CN o Common Name ) del Subject de un certificado. Si no tiene definido el nombre com\u00fan devuelve la unidad organizativa (OU o Organization Unit ). Si no encuentra tampoco esta se devuelve el valor del RDN m\u00e1s significativo seg\u00fan el orden. static String getCN(String principal) Obtiene el nombre com\u00fan (CN o Common Name ) a partir del Principal de un certificado. Si no tiene definido el nombre com\u00fan devuelve la unidad organizativa (OU o Organization Unit ). Si no encuentra tampoco esta se devuelve el valor del RDN m\u00e1s significativo seg\u00fan el orden.","title":"es.gob.afirma.core.misc.AOUtil"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#factorias","text":"Estas son factor\u00edas que permiten gestionar de forma centralizada algunos de los recursos con los que cuenta el Cliente @firma. El uso de estas factor\u00edas facilitar\u00e1 cambios posteriores en su aplicaci\u00f3n, la ampliaci\u00f3n de sus funcionalidades y el soporte de distintos entornos.","title":"Factor\u00edas"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmacoresignersaosignerfactory","text":"La clase AOSignerFactory es la factor\u00eda desde la que se cargan los manejadores de firma para cada formato soportado por el Cliente. Cuando deseemos trabajar con un formato de firma, podemos solicitar a esta clase el manejador adecuado para ese formato. Para que la factor\u00eda devuelve el manejador de un formato concreto, ser\u00e1 necesario haber importado en el proyecto el m\u00f3dulo de firma correspondiente a ese formato. Los dos principales m\u00e9todos de inter\u00e9s son: static AOSigner getSigner(String signFormat) Este m\u00e9todo permite obtener un manejador de firma para el formato de firma indicado. Este m\u00e9todo es el que se utiliza com\u00fanmente para seleccionar el manejador de firma a utilizar cuando son varios los formatos soportados por la aplicaci\u00f3n o puede cambiarse de formato en un futuro. En caso de soportar un \u00fanico formato se podr\u00eda instanciar directamente un objeto del manejador de firma concreto. El manejador de firma instanciado es un objeto que implementa la interfaz AOSigner. Pueden tomarse los nombres de formatos de firma de la clase AOSignConstants. Ejemplo de uso: ... AOSigner signer = AOSignerFactory.getSigner( AOSignConstants.SIGN_FORMAT_CADES); // Firmamos en formato CAdES byte [] signature = signer.sign( data, // Datos que se firman AOSignConstants.SIGN_ALGORITHM_SHA1WITHRSA, // Algoritmo de firma key, // Referencia a la clave privada certChain, // Cadena de certificaci\u00f3n null // Propiedades extra de configuraci\u00f3n ) ; ... static AOSigner getSigner(byte[] signData) throws IOException Este m\u00e9todo permite obtener el manejador de firma m\u00e1s adecuado para manipular firmas con el formato de la firma introducida por par\u00e1metro. La principal utilidad de este m\u00e9todo es comprobar si unos datos son en realidad una firma con un formato soportado. Una vez obtenido el manejador podemos utilizarlo para manipular la firma y, por ejemplo, cofirmarla/contrafirmar, extraer los datos que se firmaron u obtener informaci\u00f3n de ella. Si los datos introducidos no se corresponde con una firma soportada (podr\u00eda ser una firma pero en un formato que desconocemos, una para el que ahora no tenemos disponible el manejador o una firma en un formato soportado pero con alguna peculiaridad para la que no est\u00e1 preparada el manejador) se devuelve null. Ejemplo de uso: ... byte [] cosignature = null ; // Cofirmamos en el mismo formato en el que esta firmada AOSigner signer = AOSignerFactory.getSigner(signature); if (signer != null ) { cosignature = signer.cosign( signature, // Firma AOSignConstants.SIGN_ALGORITHM_SHA1WITHRSA, // Algoritmo key, // Referencia a la clave privada certChain, // Cadena de certificaci\u00f3n null // Propiedades extra de configuracion ); } ...","title":"es.gob.afirma.core.signers.AOSignerFactory"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmacoreuiaouifactory","text":"Esta es una factor\u00eda orientada a obtener informaci\u00f3n del usuario o decisiones por su parte mediante componentes gr\u00e1ficos. AOUIFactory utiliza, seg\u00fan el entorno en el que se ejecute el Cliente, un gestor u otro para generar los di\u00e1logos gr\u00e1ficos que se necesiten. Actualmente, esta factor\u00eda utiliza por defecto una u otra implementaci\u00f3n seg\u00fan el entorno en el que se ejecute que se encuentre. En un futuro, podr\u00edan darse de alta nuevos manejadores y gracias a esta factor\u00eda no ser\u00eda necesario hacer cambios en el c\u00f3digo, tan s\u00f3lo establecerla como el manejador activo. Los manejadores implementados se encuentran en el m\u00f3dulo afirma-ui-core-jse . Aunque el di\u00e1logo de selecci\u00f3n de certificados tambi\u00e9n se maneja internamente mediante esta factor\u00eda, para una integraci\u00f3n por separado de este di\u00e1logo en otra herramienta, es m\u00e1s sencillo hacerlo a trav\u00e9s de la clase AOKeyStoreDialog definida en el m\u00f3dulo afirma-core-keystores , debido a la relaci\u00f3n intr\u00ednseca entre el di\u00e1logo de selecci\u00f3n de certificados y los distintos almacenes a los que se tiene acceso. Para saber m\u00e1s sobre esta clase, consulte el apartado M\u00f3dulo afirma-core-keystores para m\u00e1s informaci\u00f3n. Los manejadores de interfaces gr\u00e1ficos implementan la interfaz: es.gob.afirma.core.ui.AOUIManager . La selecci\u00f3n del gestor de interfaces a utilizar se har\u00e1 de forma autom\u00e1tica pero es posible establecer expl\u00edcitamente qu\u00e9 gestor utilizar mediante el m\u00e9todo: static void setUIManager(AOUIManager manager) Los m\u00e9todos est\u00e1ticos que proporciona AOUIFactory directamente para su uso son: static File[] getLoadFiles(String dialogTitle, String currentDir, String filename, String[] extensions, String description, boolean selectDirectory, boolean multiSelect, Object icon, Object parentComponent) Muestra un di\u00e1logo para la selecci\u00f3n de ficheros. Tambi\u00e9n se puede mencionar m\u00faltiples Se puede configurar mediante par\u00e1metros para permitir seleccionar uno o varios ficheros o, en su lugar, permitir seleccionar un directorio. Son configurables tambi\u00e9n el t\u00edtulo del di\u00e1logo, el nombre del fichero, las extensiones permitidas, la descripci\u00f3n del tipo de fichero, el icono y el componente padre sobre el que mostrar el di\u00e1logo si corresponde. static char[] getPassword(String text, Object parent) Muestra un di\u00e1logo para la obtenci\u00f3n de una contrase\u00f1a. Permite establecer el texto de solicitud de la contrase\u00f1a y el componente padre sobre el que mostrar el di\u00e1logo, si corresponde. static char[] getPassword(String text, String charset, boolean beep, Object parent) Muestra un di\u00e1logo para la obtenci\u00f3n de una contrase\u00f1a. Permite establecer el texto de solicitud de la contrase\u00f1a, el conjunto de caracteres permitidos, indicar si se debe reproducir un beep del sistema si se trata de insertar un car\u00e1cter no v\u00e1lido y configurar el componente padre sobre el que mostrar el di\u00e1logo, si corresponde. static File getSaveDataToFile(byte[] data, String dialogTitle, String currentDir, String selectedFile, String[] exts, String description, Object parent) Muestra un di\u00e1logo para el guardado de datos en disco y la obtenci\u00f3n del fichero guardado. Permite establecer los datos a guardar, el t\u00edtulo del di\u00e1logo, el directorio actual, el fichero seleccionado por defecto, un listado de las extensiones de fichero que se desea que aparezcan en el di\u00e1logo, la descripci\u00f3n del tipo de fichero y el componente padre sobre el que mostrar el di\u00e1logo, si corresponde. static Object showCertificateSelectionDialog(Object parent, NameCertificateBean[] selectionValues) Muestra un di\u00e1logo para la obtenci\u00f3n de un alias de certificado seleccionado por el usuario. Permite configurar el componente padre sobre el que mostrar el di\u00e1logo, si corresponde, y el listado con los certificados (y su informaci\u00f3n) entre los que puede seleccionarse. Se devuelve el alias del certificado seleccionado. static int showConfirmDialog(Object parent, Object message, String title, int optionType, int messageType) Muestra un di\u00e1logo para solicitar la confirmaci\u00f3n del usuario. Permite configurar el componente padre sobre el que mostrar el di\u00e1logo, el mensaje que aparecer\u00e1 en el mismo, su t\u00edtulo, las opciones disponibles y el tipo de di\u00e1logo. static Object showInputDialog(Object parent, Object message, String title, int messageType, Object icon, Object[] selectionValues, Object initialSelectionValue) Muestra un di\u00e1logo para obtener la opci\u00f3n seleccionada por el usuario entre las m\u00faltiples que se configuran. Permite configurar el componente padre sobre el que mostrar el di\u00e1logo, el mensaje que aparecer\u00e1 en el mismo, su t\u00edtulo, el tipo de di\u00e1logo, el icono que deber\u00e1 mostrarse, las opciones seleccionables y el valor inicialmente seleccionado.","title":"es.gob.afirma.core.ui.AOUIFactory"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#almacenes-de-certificados","text":"El uso de certificados es imprescindible para ejecutar las operaciones de firma y ensobrado de datos. Estos certificados se localizan en almacenes de certificados, desde donde cualquier aplicaci\u00f3n compatible puede acceder a ellos. El Cliente @firma es compatible con m\u00faltiples almacenes de certificados (almacenes sistema, almacenes en disco, almacenes con formato est\u00e1ndar...). La gesti\u00f3n de estos almacenes se realiza de forma centralizada, de tal forma que es posible indicar a qu\u00e9 almac\u00e9n deseamos acceder y extraer los certificados que en ellos se encuentran y las claves necesarias para realizar operaciones criptogr\u00e1ficas como la firma de documentos. La gesti\u00f3n de almacenes centralizada se realiza en el Cliente @firma mediante el m\u00f3dulo afirma-core-keystores . Adicionalmente, para el acceso al almac\u00e9n de certificados de Mozilla Firefox es necesario el m\u00f3dulo afirma-keystores-mozilla , y para el uso de certificados simples (que no est\u00e1n en una almac\u00e9n) se utiliza afirma-keystores-single .","title":"Almacenes de certificados"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-core-keystores","text":"Es el m\u00f3dulo principal para la gestionar de almacenes de claves y certificados. Este m\u00f3dulo cuenta con una factor\u00eda mediante la cual es posible seleccionar el almac\u00e9n de claves deseado, lo que nos devuelve un manejador para el mismo. Mediante es manejador podremos realizar una serie de operaciones como son, introducir la clave para el acceso al almac\u00e9n, listar los certificados que contiene y extraer sus claves. Las clases de especial inter\u00e9s de este m\u00f3dulo son:","title":"M\u00f3dulo afirma-core-keystores"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmakeystoresaokeystore","text":"Enumerado con el listado de almacenes inicialmente soportado por los clientes. Principalmente, estos son: WINDOWS . Almac\u00e9n de claves personales de Windows. S\u00f3lo disponible en sistemas Windows. APPLE . Almac\u00e9n de claves de Mac OS X. S\u00f3lo disponible en sistemas Mac OS X. Permite acceder tanto al almac\u00e9n central del sistema como a almacenes en fichero (si se indica su ruta). MOZ_UNI . Almac\u00e9n de claves de Mozilla Firefox. S\u00f3lo disponible en aquellos en los que se encuentre instalado Mozilla Firefox. En caso de encontrarse instalados e insertados dispositivos PKCS#11, los certificados de estos se listar\u00e1n junto con los del almac\u00e9n interno de Mozilla. Este almac\u00e9n s\u00f3lo puede utilizarse si se encuentra disponible el m\u00f3dulo afirma-keystores-mozilla . SHARED_NSS . Almac\u00e9n de claves central de Linux. Funciona igual que el almac\u00e9n MOZ_UNI y tambi\u00e9n depende del m\u00f3dulo afirma-keystores-mozilla . PKCS12 . Almacenes en disco acordes con el est\u00e1ndar PKCS#12. Para el uso de este manejador es necesario que se especifique la ruta en donde se encuentra del almac\u00e9n que se solicita (fichero \".p12\" y \".pfx\"). JAVA . Almacenes en disco acordes al formato Java de almac\u00e9n de certificado (JKS). Para el uso de este manejador es necesario que se especifique la ruta en donde se encuentra del almac\u00e9n que se solicita (fichero \".jks\"). PKCS11 . Almacenes en dispositivo externo con controlador PKCS#11. Para el acceso a este tipo de dispositivos es necesario que se especifique la ruta de la biblioteca PKCS#11 (\".dll\", \".so\", \".dlib\",...) que lo controla. SINGLE . Certificados \"sueltos\" en disco. Es necesario que se indique la ruta del certificado concreto que desea cargar (\".cer\", \".p7b\"...). Estos certificados carecen de clave privada, por lo que no pueden utilizarse para la firma de documentos, aunque s\u00ed como destinatarios de un sobre electr\u00f3nico. WINADDRESSBOOK . Libreta de direcciones de Windows. S\u00f3lo disponible en sistemas Windows. Estos certificados carecen de clave privada, por lo que no pueden utilizarse para la firma de documentos, aunque s\u00ed como destinatarios de un sobre electr\u00f3nico. JCEKS : Almac\u00e9n de claves seg\u00fan formato Java. Permite el almac\u00e9n de claves, como las de cifrado de datos. Requiere que se indique el fichero del almac\u00e9n. DNIEJAVA: Almac\u00e9n del DNIe al que se acceder\u00e1 mediante el la biblioteca JMulticard. Es necesario incluir esta biblioteca en el proyecto para poder utilizar este almac\u00e9n. KNOWN_SMARTCARDS : Almac\u00e9n compuesto por diversas tarjetas inteligentes de las que se buscar\u00e1 el PKCS#11 en el sistema. El Cliente @firma utiliza este almac\u00e9n cuando se carga desde un perfil temporal de Windows.","title":"es.gob.afirma.keystores.AOKeyStore"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmakeystoresaokeystoremanagerfactory","text":"Es la factor\u00eda a partir de la cual se obtienen los distintos manejadores de almac\u00e9n de certificados. El m\u00e9todo para obtener estos manejadores es: static AggregatedKeyStoreManager getAOKeyStoreManager(AOKeyStore store, String lib, String description, PasswordCallback pssCallback, Object parentComponent) throws AOKeystoreAlternativeException, IOException Recibe el tipo de almac\u00e9n deseado, la ruta de la biblioteca o almac\u00e9n y su descripci\u00f3n si no se trata de un almac\u00e9n de sistema, un callback a trav\u00e9s del cual se pueda insertar la clave del almac\u00e9n y un componente visual para la visualizaci\u00f3n de los posibles di\u00e1logos modales sobre el mismo. Puede lanzar una IOException si no puede acceder al almac\u00e9n, o una AOKeyStoreAlternativeException si el almac\u00e9n no est\u00e1 disponible y se propone una alternativa (declarada en la propia excepci\u00f3n). Ejemplo de uso ... // Obtenemos el gestor del almacen de certificados de Mozilla Firefox AOKeyStoreManager ksm = AOKeyStoreManagerFactory.getAOKeyStoreManager( AOKeyStore.MOZ_UNI, null , null , AOKeyStore.MOZ_UNI.getStorePasswordCallback(null), null ); ... Ejemplo de uso ... // Creamos un PasswordCallback que ya incluye la contrase\u00f1a su uso // directo PasswordCallback psc = new CachePasswordCallback(\"123456\".getChars()); // Obtenemos el gestor para un almac\u00e9n en fichero local de tipo PKCS12 // sin interacci\u00f3n del usuario (valido para su uso en servidor) AOKeyStoreManager ksm = AOKeyStoreManagerFactory.getAOKeyStoreManager( AOKeyStore.PKCS12, \"/ruta/almacen.pfx\", null , psc, this .parent); ...","title":"es.gob.afirma.keystores.AOKeyStoreManagerFactory"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmakeystoresaokeystoremanager","text":"Manejador para la gesti\u00f3n de un almac\u00e9n de certificados. Un objeto de este tipo permite obtener los alias de los certificados del almac\u00e9n, los propios certificados y sus claves. Los m\u00e9todos de principal inter\u00e9s de esta clase son: String[] getAliases() Recupera un array con los alias de todos los certificados del almac\u00e9n. Estos alias ser\u00e1n los que utilizaremos para obtener los certificados y las claves del almac\u00e9n. X509Certificate getCertificate(String alias) Recupera del almac\u00e9n el certificado con el alias indicado. X509Certificate[] getCertificateChain(String alias) Recupera del almac\u00e9n todo lo posibles de la cadena de certificaci\u00f3n del certificado con el alias indicado. void setEntryPasswordCallBack(PasswordCallback pwc) Establece el PasswordCallback para la autorizar la obtenci\u00f3n de las PrivateKeyEntry del almac\u00e9n. KeyStore.PrivateKeyEntry getKeyEntry(String alias) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException Recupera del almac\u00e9n la referencia a la clave privada del certificado cuyo alias se indica. Utiliza el PassworCallback indica mediante setEntryPasswordCallBack o, si no se indic\u00f3, el por defecto para el almac\u00e9n de claves configurado. Se lanzar\u00e1 una excepci\u00f3n en caso de ocurrir un error en el tratamiento del almac\u00e9n de claves (KeyStoreException), la clave que se intenta recuperar no sea v\u00e1lida (NoSuchAlgorithmException), no se consiga recuperar la clave (UnrecoverableEntryException) o el usuario cancele la operaci\u00f3n (AOCancelledOperationException). Ejemplo de uso ... // Recuperamos los alias del almacen y la referencia a clave privada // del primero de ellos PrivateKeyEntry scKeyEntry = null ; String[] aliases = ksm.getAliases(); if (aliases.length > 0) { scKeyEntry = ksm.getKeyEntry(aliases[0]); } ...","title":"es.gob.afirma.keystores.AOKeyStoreManager"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmakeystoresaokeystoredialog","text":"Clase que controla el di\u00e1logo de selecci\u00f3n de certificados. Su implementaci\u00f3n depende de los m\u00f3dulos gr\u00e1ficos del proyecto: afirma-ui-core-jse y afirma-ui-core-jse-keystores . La configuraci\u00f3n acerca del almac\u00e9n del que se deben mostrar los certificados y cuales de ellos se deben visualizar se establece por medio de sus constructores: AOKeyStoreDialog(AOKeyStoreManager ksm, Object parentComponent, boolean checkPrivateKeys, boolean showExpiredCertificates, boolean checkValidity) Crea el di\u00e1logo para la selecci\u00f3n de un certificado permitiendo configurar: ksm : Manejador del almac\u00e9n de claves al que acceder. parentComponent : Componente gr\u00e1fico sobre el que se muestra el di\u00e1logo. checkPrivateKeys : Establece si deben mostrarse \u00fanicamente los certificados que posean clave privada con la cual firmar. showExpiredCertificates : Establece si deben mostrarse tambi\u00e9n los certificados que se encuentren fuera de su periodo de validez. checkValidity : Habilita que se muestre un di\u00e1logo de advertencia si se selecciona un certificado que pueda ser considerado no v\u00e1lido (fuera del periodo de validez,...). AOKeyStoreDialog(AOKeyStoreManager ksm, Object parentComponent, boolean checkPrivateKeys, boolean showExpiredCertificates, boolean checkValidity, List<? extends CertificateFilter> certFilters, boolean mandatoryCertificate) Crea el di\u00e1logo para la selecci\u00f3n de un certificado permitiendo configurar: ksm : Manejador del almac\u00e9n de claves al que acceder. parentComponent : Componente gr\u00e1fico sobre el que se muestra el di\u00e1logo. checkPrivateKeys : Establece si deben mostrarse \u00fanicamente los certificados que posean clave privada con la cual firmar. showExpiredCertificates : Establece si deben mostrarse tambi\u00e9n los certificados que se encuentren fuera de su periodo de validez. checkValidity : Habilita que se muestre un di\u00e1logo de advertencia si se selecciona un certificado que pueda ser considerado no v\u00e1lido (fuera del periodo de validez,...). certFilters : Listado de filtros de certificados. S\u00f3lo se mostrar\u00e1n los certificados que pasen, al menos, por uno de los filtros indicados. mandatoryCertificate : Establece que si s\u00f3lo hay un certificado pasa el proceso de filtrado, o si no hay filtros y s\u00f3lo hay un certificado en el almac\u00e9n, se devuelva el alias de este certificado sin ni siquiera mostrara el di\u00e1logo de selecci\u00f3n. Para la visualizaci\u00f3n y uso del di\u00e1logo contamos principalmente con el m\u00e9todo: String show() throws AOCertificatesNotFoundException; Muestra el di\u00e1logo de selecci\u00f3n de certificados seg\u00fan la configuraci\u00f3n establecida en el constructor. Devuelve el alias del certificado seleccionado por el usuario, o directamente el \u00fanico que hubiese que mostrar si se configur\u00f3 el par\u00e1metro mandatory a true. Si no se encuentran certificado se lanza la excepci\u00f3n AOCertificatesNotFoundException, mientras que si el usuario cierra el di\u00e1logo sin seleccionar un certificado se lanza una AOCancelledOperationException.","title":"es.gob.afirma.keystores.AOKeyStoreDialog"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmakeystoresfilterscertificatefilter","text":"Clase abstracta de la que debe heredar un filtro de certificados. Existen varios filtros de certificados implementados en el m\u00f3dulo afirma-keystores-filters . Los m\u00e9todos que se deben implementar son: boolean matches(X509Certificate cert) Debe devolver true si el certificado indicado cumple con los criterios establecidos en el filtro. String[] matches(String[] aliases, AOKeyStoreManager ksm) Debe devolver el listado con los alias de los certificados que cumplen con los criterios establecidos en el filtro. Si no se implementa este m\u00e9todo, se utilizar\u00e1 el m\u00e9todo anterior por cada certificado individual si supera el filtro establecido, en cuyo caso pasa a la lista de certificados v\u00e1lidos. Implementar este m\u00e9todo es \u00fatil cuando se desean establecer condiciones especiales que afectan a diversos certificados. Por ejemplo, un certificado s\u00f3lo se mostrar\u00e1 si est\u00e1 declarado como un certificado de firma o, si no est\u00e1 declarado como tal pero no hay ning\u00fan otro certificado con ese n\u00famero de serie del Subject .","title":"es.gob.afirma.keystores.filters.CertificateFilter"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-keystores-mozilla","text":"M\u00f3dulo particular para el acceso al almac\u00e9n de Java. Salvo que se desee obtener exclusivamente acceso al almac\u00e9n de Mozilla Firefox, no es recomendable manipular directamente las clases de este m\u00f3dulo. Obtenga este manejador mediante la factor\u00eda de afirma-core-keystores indicando el tipo de almac\u00e9n AOKeyStore.MOZ_UNI. Este almac\u00e9n gestiona de forma unificada los certificados del almac\u00e9n interno de Mozilla y los certificados de los dispositivos externos instalados en el almac\u00e9n mediante su PKCS#11.","title":"M\u00f3dulo afirma-keystores-mozilla"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-keystores-single","text":"M\u00f3dulo particular para el manejo de certificados en disco no contenidos en ning\u00fan almac\u00e9n de certificados. Salvo que se desee \u00fanicamente utilizar estos certificados, no es necesario manipular directamente las clases de este m\u00f3dulo. Obtenga este manejador mediante la factor\u00eda de afirma-core-keystores indicando el tipo de almac\u00e9n AOKeyStore.SINGLE. Los certificados gestionados mediante este manejador carecen de clave privada, por lo que no se pueden utilizar para realizar firmas electr\u00f3nicas ni otras operaciones criptogr\u00e1ficas. En cambio, pueden utilizarse para designar a los destinatarios de sobres electr\u00f3nicos. Para utilizar el di\u00e1logo gr\u00e1fico de selecci\u00f3n con los certificados de este almac\u00e9n ser\u00e1 necesario establecer correctamente el par\u00e1metro que determina si se deben mostrar los certificados que carecen de clave privada.","title":"M\u00f3dulo afirma-keystores-single"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-keystores-capiaddressbook","text":"M\u00f3dulo particular para el acceso a la libreta de direcciones de sistemas Windows. Salvo que se desee \u00fanicamente utilizar los certificados de es almac\u00e9n, no es necesario manipular directamente la clase de este m\u00f3dulo. Obtenga este manejador mediante la factor\u00eda de afirma-core-keystores indicando el tipo de almac\u00e9n AOKeyStore.WINADDRESSBOOK. Los certificados gestionados mediante este manejador carecen de clave privada, por lo que no se pueden utilizar para realizar firmas electr\u00f3nicas ni otras operaciones criptogr\u00e1ficas. En cambio, pueden utilizarse para designar a los destinatarios de sobres electr\u00f3nicos. Para utilizar el di\u00e1logo gr\u00e1fico de selecci\u00f3n con los certificados de este almac\u00e9n ser\u00e1 necesario establecer correctamente el par\u00e1metro que determina si se deben mostrar los certificados que carecen de clave privada.","title":"M\u00f3dulo afirma-keystores-capiaddressbook"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulos-de-firma","text":"Un m\u00f3dulo de firma se compone del conjunto de clases que permiten la gesti\u00f3n de un formato de firma (generaci\u00f3n, identificaci\u00f3n y extracci\u00f3n de datos de firma) donde, al menos una de las cuales, debe implementar la interfaz es.gob.afirma.core.signers.AOSigner para permitir su uso de forma homog\u00e9nea al resto de m\u00f3dulos. El que el Cliente @firma soporte o no un formato de firma depende de si integra o no el m\u00f3dulo de firma que se encarga de la gesti\u00f3n de ese formato. Cada uno de los m\u00f3dulos tiene sus propias dependencias, de tal forma que una construcci\u00f3n del Cliente puede disponer de distintos m\u00f3dulos, no necesariamente todos ellos, mientras se incluyan las dependencias de cada uno. Para gestionar firmas en un formato concreto deberemos utilizar las clases del m\u00f3dulo que implementa AOSigner y se encarga de la gesti\u00f3n de este formato. Para consultar c\u00f3mo utilizar la clase AOSigner, revisa el apartado Interfaces de Utilidad de este documento. Para gestionar de forma centralizada los formatos de firma disponibles utilice la clase es.gob.afirma.core.signers.AOSignerFactory . Puede consultar m\u00e1s informaci\u00f3n sobre esta clase en el apartado Factor\u00edas de este m\u00f3dulo. A continuaci\u00f3n se listan los distintos m\u00f3dulos de firma de los que dispone el Cliente @firma y los formatos que soporta:","title":"M\u00f3dulos de firma"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-crypto-cades","text":"Este m\u00f3dulo permite la generaci\u00f3n y gesti\u00f3n de firmas en formato CAdES y firmas empaquetadas CAdES-ASiC-S. Todas las firmas CAdES generadas son acordes al formato B-Level. Este m\u00f3dulo depende del core del proyecto ( afirma-core ) y del m\u00f3dulo de funciones de gesti\u00f3n de firmas binarias ( afirma-crypto-core-pkcs7 ). El m\u00f3dulo afirma-crypto-cades no soporta las operaciones de cofirma y contrafirma para lo que requiere que se incluya el m\u00f3dulo afirma-crypto-cades-multi para estas funciones. Utilizaremos el m\u00f3dulo afirma-crypto-cades sin incluir el m\u00f3dulo afirma-crypto-cades-multi s\u00f3lo cuando nuestra aplicaci\u00f3n no realice nunca multifirmas CAdES. Como dependencias externas utiliza las bibliotecas de SpongyCastle. El manejador de firma que implementa la interfaz AOSigner para el manejo de firmas CAdES es es.gob.afirma.signers.cades.AOCAdESSigner . Para obtener este manejador a partir de la factor\u00eda AOSignerFactory, debe utilizarse la constante es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_CADES. El manejador de firma que implementa la interfaz AOSigner para el manejo de firmas CAdES-ASiC-S es es.gob.afirma.signers.cades.asic.AOCAdESASiCSSigner . Para obtener este manejador a partir de la factor\u00eda AOSignerFactory, debe utilizarse la constante es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_CADES_ASIC_S. Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas, cofirmas y contrafirmas CAdES se detallan en el manual de integraci\u00f3n del Cliente @firma y el Javadoc de la clase es.gob.afirma.signers.cades.AOCAdESExtraParams .","title":"M\u00f3dulo afirma-crypto-cades"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-crypto-cadestri-client","text":"Este m\u00f3dulo permite la generaci\u00f3n de firmas en formato CAdES y empaquetados CAdES-ASiC-S de forma trif\u00e1sica. Las firmas soportadas por este m\u00f3dulo son exactamente iguales a las del m\u00f3dulo afirma-crypto-cades . Este m\u00f3dulo s\u00f3lo permite generar firmas de los formatos soportados y no implementa el resto de m\u00e9todos de la interfaz AOSigner (detecci\u00f3n de datos v\u00e1lidos, identificaci\u00f3n de formatos de firma, extracci\u00f3n de los datos\u2026) Este m\u00f3dulo s\u00f3lo tiene dependencia con el m\u00f3dulo core ( afirma-core ) y, para funcionar, requiere conectar con el servicio de firmas trif\u00e1sicas del Cliente @firma. El manejador de firma que implementa la interfaz AOSigner para la generaci\u00f3n de firmas trif\u00e1sicas CAdES es es.gob.afirma.signers.cadestri.client.AOCAdESTriPhaseSigner y la constante para obtener el manejador a partir de la factor\u00eda AOSignerFactory es es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_CADES_TRI. El manejador de firma que implementa la interfaz AOSigner para la generaci\u00f3n de firmas trif\u00e1sicas empaquetadas CAdES-ASiC-S es es.gob.afirma.signers.cadestri.client.asic.AOCAdESASiCSTriPhaseSigner y la constante para obtener el manejador a partir de la factor\u00eda AOSignerFactory es es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_CADES_ASIC_S_TRI.","title":"M\u00f3dulo afirma-crypto-cadestri-client"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-crypto-cms","text":"Este m\u00f3dulo permite la generaci\u00f3n y gesti\u00f3n de firmas en formato CMS/PKCS#7. Este m\u00f3dulo depende del core del proyecto ( afirma-core ) y de afirma-crypto-core-pkcs7 , el m\u00f3dulo de funciones de gesti\u00f3n de firmas binarias. Como dependencias externas utiliza las bibliotecas de SpongyCastle. El manejador de firma que implementa la interfaz AOSigner es es.gob.afirma.signers.cms.AOCMSSigner . Para obtener este manejador a partir de la factor\u00eda AOSignerFactory, debe utilizarse la constante es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_CMS. Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas, cofirmas y contrafirmas CMS se detallan en el manual de integraci\u00f3n del Cliente @firma y el Javadoc de la clase es.gob.afirma.signers.cms.AOCMSExtraParams .","title":"M\u00f3dulo afirma-crypto-cms"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-crypto-pdf","text":"Este m\u00f3dulo permite la generaci\u00f3n y gesti\u00f3n de firmas en formato PAdES/PDF. Las firmas PAdES generadas ser\u00e1n acordes al formato B-Level cuando se especifique el subfiltro ETSI.CAdES.detached a trav\u00e9s de las propiedades extraParams. Este m\u00f3dulo depende del core del proyecto ( afirma-core ), el m\u00f3dulo de funciones de gesti\u00f3n de firmas binarias ( afirma-crypto-core-pkcs7 ), el m\u00f3dulo para la generaci\u00f3n de sellos de tiempo en firmas binarias ( afirma-crypto-core-pkcs7-tsp ) y el m\u00f3dulo de generaci\u00f3n de firmas CAdES ( afirma-crypto-cades ). Como dependencias externas utiliza las bibliotecas de SpongyCastle e iText (versi\u00f3n propia generada sobre la versi\u00f3n 2.1.7 de iText). El manejador de firma que implementa la interfaz AOSigner es es.gob.afirma.signers.pades.AOPDFSigner . Para obtener este manejador a partir de la factor\u00eda AOSignerFactory, debe utilizarse la constante es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_PADES. Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas y multifirmas PAdES se detallan en el manual de integraci\u00f3n del Cliente @firma y el Javadoc de la clase es.gob.afirma.signers.pades.PDFExtraParams .","title":"M\u00f3dulo afirma-crypto-pdf"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-crypto-padestri-client","text":"Este m\u00f3dulo permite la generaci\u00f3n de firmas en formato PAdES de forma trif\u00e1sica. Las firmas soportadas por este m\u00f3dulo son exactamente iguales a las del m\u00f3dulo afirma-crypto-pdf . Este m\u00f3dulo s\u00f3lo permite generar firmas de los formatos soportados y no implementa el resto de m\u00e9todos de la interfaz AOSigner (detecci\u00f3n de datos v\u00e1lidos, identificaci\u00f3n de formatos de firma, extracci\u00f3n de los datos\u2026) Este m\u00f3dulo s\u00f3lo tiene dependencia con el m\u00f3dulo core ( afirma-core ) y, para funcionar, requiere conectar con el servicio de firmas trif\u00e1sicas del Cliente @firma. El manejador de firma que implementa la interfaz AOSigner para la generaci\u00f3n de firmas trif\u00e1sicas PAdES es es.gob.afirma.signers.cadestri.client.AOPAdESTriPhaseSigner y la constante para obtener el manejador a partir de la factor\u00eda AOSignerFactory es es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_PADES_TRI.","title":"M\u00f3dulo afirma-crypto-padestri-client"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-crypto-xades","text":"Este m\u00f3dulo permite la generaci\u00f3n y gesti\u00f3n de firmas en formato XAdES, firmas de Factura Electr\u00f3nica (FacturaE) y firmas empaquetadas XAdES-ASiC-S. Todas las firmas XAdES generadas son acordes al formato B-Level. Este m\u00f3dulo depende del core del proyecto ( afirma-core ) y de el m\u00f3dulo de funciones de gesti\u00f3n de firmas XML ( afirma-crypto-core-xml ). Como dependencia externa utiliza la biblioteca JXAdES. Los manejadores de firma que implementa la interfaz AOSigner son: es.gob.afirma.signers.xades.AOXAdESSigner : Para las firmas XAdES. es.gob.afirma.signers.xades.AOFacturaESigner : Para la firma de facturas electr\u00f3nicas. es.gob.afirma.signers.xades.asic.AOXAdESASiCSSigner : Para las firmas empaquetadas XAdES-ASiC-S. Para obtener estos manejadores a partir de la factor\u00eda AOSignerFactory, deben utilizarse las constantes es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_XADES (para el formato XAdES) es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_FACTURAE (para el formato FacturaE) y es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_XADES-ASIC-S (para el formato XAdES-ASiC-S) Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas, cofirmas y contrafirmas XAdES se detallan en el manual del Cliente @firma y el Javadoc de la clase es.gob.afirma.signers.xades.AOXAdESExtraParams . Salvo que se configure expl\u00edcitamente el tipo de firma XAdES, se generar\u00e1n firmas XAdES Enveloping. Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas de facturas electr\u00f3nicas son un subconjunto de las permitidas en las firmas XAdES y se detallan en el manual de integraci\u00f3n del Cliente @firma y el Javadoc del m\u00e9todo sign() de la clase es.gob.afirma.signers.xades.AOFacturaESigner . Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas, cofirmas y contrafirmas XAdES-ASiC-S se detallan en el Javadoc de la clase es.gob.afirma.signers.xades.AOXAdESASiCSExtraParams .","title":"M\u00f3dulo afirma-crypto-xades"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-crypto-xadestri-client","text":"Este m\u00f3dulo permite la generaci\u00f3n de firmas en formato XAdES, FacturaE y empaquetados XAdES-ASiC-S de forma trif\u00e1sica. Las firmas soportadas por este m\u00f3dulo son exactamente iguales a las del m\u00f3dulo afirma-crypto-xades . Este m\u00f3dulo s\u00f3lo permite generar firmas de los formatos soportados y no implementa el resto de m\u00e9todos de la interfaz AOSigner (detecci\u00f3n de datos v\u00e1lidos, identificaci\u00f3n de formatos de firma, extracci\u00f3n de los datos\u2026) Este m\u00f3dulo s\u00f3lo tiene dependencia con el m\u00f3dulo core ( afirma-core ) y, para funcionar, requiere conectar con el servicio de firmas trif\u00e1sicas del Cliente @firma. El manejador de firma que implementa la interfaz AOSigner para la generaci\u00f3n de firmas trif\u00e1sicas XAdES es es.gob.afirma.signers.cadestri.client.AOXAdESTriPhaseSigner y la constante para obtener el manejador a partir de la factor\u00eda AOSignerFactory es es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_XADES_TRI. El manejador de firma que implementa la interfaz AOSigner para la generaci\u00f3n de firmas trif\u00e1sicas de factura electr\u00f3nica es es.gob.afirma.signers.cadestri.client.AOFacturaETriPhaseSigner y la constante para obtener el manejador a partir de la factor\u00eda AOSignerFactory es es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_FACTURAE_TRI. El manejador de firma que implementa la interfaz AOSigner para la generaci\u00f3n de firmas trif\u00e1sicas empaquetadas XAdES-ASiC-S es es.gob.afirma.signers.cadestri.client.asic.AOXAdESASiCSTriPhaseSigner y la constante para obtener el manejador a partir de la factor\u00eda AOSignerFactory es es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_XADES_ASIC_S_TRI.","title":"M\u00f3dulo afirma-crypto-xadestri-client"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-crypto-xmlsignature","text":"Este m\u00f3dulo permite la generaci\u00f3n y gesti\u00f3n de firmas en formato XMLdSign. Este m\u00f3dulo depende del core del proyecto ( afirma-core ) y del m\u00f3dulo de funciones de gesti\u00f3n de firmas XML ( afirma-crypto-core-xml ). El manejador de firma que implementa la interfaz AOSigner es es.gob.afirma.signers.xmldsig.AOXMLDSigSigner . Para obtener este manejador a partir de la factor\u00eda AOSignerFactory, debe utilizarse la constante es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_XMLDSIG. Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas, cofirmas y contrafirmas XMLdSig se detallan en el manual de integraci\u00f3n del Cliente @firma y el Javadoc de la clase es.gob.afirma.signers.xmldsig.AOXMLDSigExtraParams . Salvo que se configure expl\u00edcitamente el tipo de firma XMLdSig, se generar\u00e1n firmas XMLdSig Enveloping.","title":"M\u00f3dulo afirma-crypto-xmlsignature"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-crypto-odf","text":"Este m\u00f3dulo permite la generaci\u00f3n y gesti\u00f3n de firmas en formato ODF (Open Document Format). Este m\u00f3dulo depende del core del proyecto ( afirma-core ) y del m\u00f3dulo de funciones de gesti\u00f3n de firmas XML ( afirma-crypto-core-xml ). El manejador de firma que implementa la interfaz AOSigner es es.gob.afirma.signers.odf.AOODFSigner . Para obtener este manejador a partir de la factor\u00eda AOSignerFactory, debe utilizarse la constante es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_ODF. Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas y multifirmas ODF se detallan en el manual de integraci\u00f3n del Cliente @firma y el Javadoc de la clase es.gob.afirma.signers.odf.AOODFExtraParams .","title":"M\u00f3dulo afirma-crypto-odf"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-crypto-ooxml","text":"Este m\u00f3dulo permite la generaci\u00f3n y gesti\u00f3n de firmas en formato OOXML (Office Open XML). Este m\u00f3dulo depende del core del proyecto ( afirma-core ) y del m\u00f3dulo de funciones de gesti\u00f3n de firmas XML ( afirma-crypto-core-xml ) y los m\u00f3dulos de firmas XAdES ( afirma-crypto-xades ) y XMLdSig ( afirma-crypto-xmlsignature ), de los que se vale para generar las firmas internas de OOXML. El manejador de firma que implementa la interfaz AOSigner es es.gob.afirma.signers.ooxml.AOOOXMLSigner . Para obtener este manejador a partir de la factor\u00eda AOSignerFactory, debe utilizarse la constante es.gob.afirma.core.signers.AOSignConstants.SIGN_FORMAT_OOXML. Las opciones de configuraci\u00f3n espec\u00edficas para la generaci\u00f3n de firmas y multifirmas OOXML se detallan en el manual de integraci\u00f3n del Cliente @firma y el Javadoc de la clase es.gob.afirma.signers.ooxml.AOOOXMLExtraParams .","title":"M\u00f3dulo afirma-crypto-ooxml"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#firma-masiva","text":"Los procesos de firma masiva consisten en la realizaci\u00f3n de varias firmas/multifirmas electr\u00f3nicas por medio de una \u00fanica operaci\u00f3n de cara al usuario. Aunque este es un procedimiento que se puede programar directamente a partir de la repetici\u00f3n en bucle de las operaciones de firma, el Cliente @firma cuenta con 2 clases que gestionan buena parte de la l\u00f3gica deseable de este tipo de operaciones. Estas 2 clases se encuentran en el m\u00f3dulo afirma-core-massive y son: es.gob.afirma.massive.DirectorySignatureHelper : Para la gesti\u00f3n de firmas/multifirmas masivas de directorios. es.gob.afirma.massive.MassiveSignatureHelper : Para la gesti\u00f3n de firmas/multifirmas masivas de datos, fichero o hashes con una configuraci\u00f3n prefijada.","title":"Firma masiva"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-core-massive","text":"","title":"M\u00f3dulo afirma-core-massive"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmamassivedirectorysignaturehelper","text":"Es la clase que permite la firma masiva de ficheros en disco. Esta clase cuenta con un constructor con el que se puede establecer el algoritmo, el formato por defecto y el modo de firma que se debe utilizar una vez creado el objeto pueden utilizarse las distintas funciones con las que cuenta para establecer la configuraci\u00f3n de operaci\u00f3n y ejecutarla. Los m\u00e9todos m\u00e1s relevantes son: void setFileFilter(java.io.FileFilter fileFilter) Establece los filtros de fichero que deben pasar los ficheros de los directorios sobre los que se operan. void setOverwritePreviuosFileSigns(boolean overwrite) Establece si debe sobre escribirse cualquier fichero con el mismo nombre que una de las firmas generadas. void setActiveLog(boolean activeLog) Establece si debe generarse un fichero de log con el resultado. Por defecto, se genera. void setLogPath(String path) Establece la ruta del fichero de log. Por defecto, el fichero de salida de firmas. boolean massiveSign(MassiveType type, String startDir, boolean recurse, String outDir, boolean createOutDir, boolean originalFormat, PrivateKeyEntry keyEntry, Properties config) throws AOException Ejecuta la operaci\u00f3n determinada por type sobre el directorio startDir y sus subdirectorios (en caso de que recurse sea true) y genera las firmas resultantes en outDir (cre\u00e1ndolo si as\u00ed se indica en createOutDir). Si se especifica originalFormat las multifirmas se realizar\u00e1n con el formato de la firma original en lugar del establecido en el constructor. La clave de firma es keyEntry y config determina la configuraci\u00f3n de firma. Ejemplo de uso: ... // Creamos el gestor de firmas de directorios DirectorySignatureHelper massiveHelper = new DirectorySignatureHelper( AOSignConstants.SIGN_ALGORITHM_SHA1WITHRSA, AOSignConstants.SIGN_ALGORITHM_PADES, AOSignConstants.SIGN_MODE_IMPLICIT); // Restringimos la firma solo a ficheros PDF massiveHelper.setFileFilter( new FileFilter { public boolean accept(File file) { return file.getName().toLowerCase().endsWith(\".pdf\"); } }); // Desactivamos la generaci\u00f3n del fichero de log massiveHelper.setActiveLog( false ); // Establecemos una configuracion de firma Properties config = new Properties(); config.setProperty(\"signReason\", \"Prueba\"); config.setProperty(\"signatureProductionCity\", \"Madrid\"); config.setProperty(\"signerContact\", \"fulanito@mail.es\"); // Ejecutamos una operaci\u00f3n masiva de firma sobre todos // los ficheros del directorio indicado massiveHelper.massiveSign( MassiveType.SIGN, \"C:/pruebas\", true , \"C:/salida\", true , true , pke, config); ... boolean massiveSign(MassiveType type, String[] filenames, String outDir, boolean createOutDir, boolean originalFormat, PrivateKeyEntry keyEntry, Properties config) throws AOException Ejecuta la operaci\u00f3n determinada por type sobre los ficheros de los que se proporciona la ruta mediante filenames. Genera las firmas resultantes en outDir (cre\u00e1ndolo si as\u00ed se indica en createOutDir). Si se especifica originalFormat las multifirmas se realizar\u00e1n con el formato de la firma original en lugar del establecido en el constructor. La clave de firma es keyEntry y config determina la configuraci\u00f3n de firma.","title":"es.gob.afirma.massive.DirectorySignatureHelper"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmamassivemassivesignaturehelper","text":"Esta es la clase que contiene la l\u00f3gica para la realizaci\u00f3n de firmas masivas de modo program\u00e1tico. La clase se construye con una configuraci\u00f3n completa con todos los par\u00e1metros necesarios para la ejecuci\u00f3n de la operaci\u00f3n masiva. Para aquellos par\u00e1metros que no est\u00e9n establecidos se utilizar\u00e1 la configuraci\u00f3n por defecto. En ning\u00fan caso debe bloquearse la ejecuci\u00f3n mostrando un di\u00e1logo visual al usuario o solicit\u00e1ndole informaci\u00f3n. El constructor de la clase y los m\u00e9todos de mayor inter\u00e9s son: MassiveSignatureHelper(MassiveSignConfiguration configuration) throws AOException Construye el objeto para la ejecuci\u00f3n de la operaci\u00f3n masiva proporcion\u00e1ndole la configuraci\u00f3n completa de firma. Durante la construcci\u00f3n del objeto se establecen los valores para la operaci\u00f3n y se selecciona el manejador de firma a partir del formato configurado. Si no existe ning\u00fan manejador disponible para el formato indicado, se lanzar\u00e1 una excepci\u00f3n. void setMassiveOperation(MassiveType massiveOperation) Permite modificar, despu\u00e9s de la construcci\u00f3n del objeto e incluso iniciado el proceso masivo, la operaci\u00f3n que se debe ejecutar (firma, cofirma, contrafirma de nodos hoja o contrafirma completa). void setSignatureFormat(String signatureFormat) Permite modificar, despu\u00e9s de la construcci\u00f3n del objeto e incluso iniciado el proceso masivo, el formato de firma que ese debe utilizar. Este m\u00e9todo s\u00f3lo afecta a la operaci\u00f3n de firma masiva. A ninguno de los procesos de multifirma. byte[] signData(byte[] data) Firma/multifirma los datos indicados con la configuraci\u00f3n establecida por defecto. Si es una firma masiva y se configur\u00f3 un nuevo formato con setSignatureFormat(String) despu\u00e9s de la construcci\u00f3n del objeto, se utilizar\u00e1 este \u00faltimo. byte[] signFile(String fileUri) Firma/multifirma el contenido del fichero indicado con la configuraci\u00f3n establecida por defecto. byte[] signHash(byte[] hash) Firma el hash indicado con la configuraci\u00f3n establecida por defecto. Este m\u00e9todo s\u00f3lo puede utilizarse cuando la operaci\u00f3n masiva configurada sea la firma, ni cofirma ni contrafirma. String getCurrentLogEntry() Recupera un texto descriptivo con el resultado de la \u00faltima operaci\u00f3n ejecutado mediante los m\u00e9todos signData(byte[]), signFile(String) o signHash(byte[]). Ejemplo de uso ... // Establecemos la configuracion propia del formato Properties extraParams = new Properties(); extraParams.setProperty(\"includeOnlySignningCertificate\", \"true\"); // Establecemos la configuracion de la operaci\u00f3n MassiveSignConfig config = new MassiveSignConfig(pke); config.setMassiveOperation(MassiveType.COUNTERSIGN_LEAFS); config.setSignatureFormat(AOSignConstants.SIGN_FORMAT_CADES); config.setOriginalFormat( true ); config.setExtraParams(extraParams); MassiveSignatureHelper massiveHelper = new MassiveSignatureHelper(config); // Contrafirmamos los ficheros cuyas rutas se encuentran en // el array FILES. // Si es un PDF, lo cofirmamos en su lugar byte [] result = null ; for (String path : FILES) { if (path.toLowerCase().endsWith(\".pdf\")) { massiveHelper.setSignatureFormat( AOSignConstants.SIGN_FORMAT_PADES); result = massiveHelper.signFile(path); massiveHelper.setSignatureFormat( AOSignConstants.SIGN_FORMAT_CADES); } else { result = massiveHelper.signFile(path); } // Operamos como corresponda con el resultado procesar(result); } ...","title":"es.gob.afirma.massive.MassiveSignatureHelper"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulos-de-cifrado","text":"A diferencia de los m\u00f3dulos de firma, el Cliente @firma s\u00f3lo cuenta actualmente con un m\u00f3dulo de cifrado sim\u00e9trico de datos. Este m\u00f3dulo es el que se utiliza en los procesos de cifrado del applet Cliente. Un m\u00f3dulo de cifrado debe poseer al menos una clase que implemente la interfaz es.gob.afirma.core.ciphers.AOCipher , as\u00ed es posible utilizar de forma homog\u00e9nea todos los manejadores con las funciones de cifrado que se puedan crear para uso del Cliente. Actualmente no existe ninguna factor\u00eda que permita recuperar los distintos manejadores de funciones de cifrado por lo que se deber\u00e1n utilizar estos directamente a trav\u00e9s de su clase AOCipher.","title":"M\u00f3dulos de cifrado"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#modulo-afirma-crypto-cipher","text":"Este m\u00f3dulo de cifrado est\u00e1 basado en el proveedor de seguridad SunJCE de Java. El m\u00f3dulo mantiene internamente la lista de configuraciones soportadas, tomadas estas de las disponibles en Java 6, por lo que no ser\u00e1 posible utilizar otro tipo de configuraciones de cifrado. Los algoritmos soportados son: AES ARCFOUR Blowfish DES DESede RC2 PBEWithMD5AndDES PBEWithSHA1AndDESede PBEWithSHA1AndRC2_40 Cada uno de estos algoritmos soporta varias configuraciones de modo y padding , pero de no indicarse se utilizar\u00e1 la que por defecto define el proveedor. Este m\u00f3dulo s\u00f3lo tiene como dependencia al m\u00f3dulo con el n\u00facleo del proyecto ( afirma-core ). La clase del m\u00f3dulo que implementa la interfaz AOCipher es es.gob.afirma.ciphers.jce.AOSunJCECipher . Adem\u00e1s del propio manejador de funciones de cifrado, este m\u00f3dulo incorpora una clase para la creaci\u00f3n y gesti\u00f3n de una almac\u00e9n de claves de cifrado, AOCipherKeyStoreHelper.","title":"M\u00f3dulo afirma-crypto-cipher"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#esgobafirmaciphersaocipherkeystorehelper","text":"Esta clase permite la gesti\u00f3n de un \u00fanico almac\u00e9n de claves por usuario del sistema. Este almac\u00e9n se sit\u00faa inevitablemente en el fichero ciphkeys.jceks , situado en el directorio del usuario. Esta clase no utiliza ning\u00fan tipo de interfaz gr\u00e1fico, por lo que advertencias y cualquier otro tipo de acceso deber\u00e1n realizarse de forma externa. Los m\u00e9todos principales para la gesti\u00f3n de este almac\u00e9n son: static boolean storeExists() M\u00e9todo est\u00e1tico para comprobar la existencia del almac\u00e9n de claves del usuario actual. AOCipherKeyStoreHelper(char[] p) throws AOException, IOException, GeneralSecurityException Constructor para obtener acceso al almac\u00e9n de claves del usuario o para crearlo en caso de que no exista. String[] getAliases() Lista los alias de las claves del almac\u00e9n. Key getKey(String alias) throws AOException Recupera una clave de cifrado del almac\u00e9n, a partir de su alias. void storeKey(String alias, Key key) throws AOException Almacena una clave en el almac\u00e9n identific\u00e1ndola con el alias indicado. Ejemplo de uso ... char [] password = null ; // Si el almacen existe solicitamos la contrasena establecida, si no // existe solicitamos la contrasena para su creacion if (AOCipherKeyStoreHelper.storeExists()) { password = mostrarDialogoSolicitarContrasenaParaApertura(); } else { password = mostrarDialogoSolicitarContrasenaParaCreacion(); } AOCipherKeyStoreHelper cipherKs = AOCipherKeyStoreHelper(password); // Listamos los alias del almacen y recuperamos la clave del primero // de ellos Key key = null ; String[] aliases = cipherKs.getAliases(); if (aliases.length > 0) { key = cipherKs.getKey(aliases[0]); } return key; ...","title":"es.gob.afirma.ciphers.AOCipherKeyStoreHelper"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#ejemplos-generales","text":"","title":"Ejemplos generales"},{"location":"markdown_strict/CF_manual_integracion_modulos_ES/#seleccion-de-almacen-y-firma","text":"Secuencia: Selecciona un almac\u00e9n de certificados en base al sistema operativo en el que se ejecute, car Carga el almac\u00e9n de claves. Muestra un di\u00e1logo de selecci\u00f3n de certificados. Obtiene el alias del certificado seleccionado. Selecciona el manejador de firma del formato CAdES. Genera una firma de impl\u00edcita de los datos proporcionado. Devuelve el resultado. C\u00f3digo: public byte [] firma( byte [] datos, Component componentePadre) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableEntryException, AOKeystoreAlternativeException, IOException, AOCertificatesNotFoundException, AOException { // Selecci\u00f3n del almac\u00e9n de claves por defecto en base al // sistema operativo AOKeyStore ks; switch (Platform. getOS ()) { case WINDOWS : ks = AOKeyStore. WINDOWS ; // Almac\u00e9n de Windows break ; case MACOSX : ks = AOKeyStore. APPLE ; // Llavero de macOS break ; case LINUX : ks = AOKeyStore. MOZ_UNI ; // Almac\u00e9n de Mozilla break ; default : ks = AOKeyStore. PKCS12 ; // Almac\u00e9n en fichero P12/PFX } // Carga del almac\u00e9n de claves final AOKeyStoreManager ksm = AOKeyStoreManagerFactory. getAOKeyStoreManager ( ks, null , \"Almac\u00e9n de claves PKCS#12\", // Este texto s\u00f3lo se mostrar\u00e1 para PKCS#12 ks.getStorePasswordCallback(componentePadre), componentePadre); // Creamos el di\u00e1logo de selecci\u00f3n de certificados final AOKeyStoreDialog dialog = new AOKeyStoreDialog( ksm, componentePadre, true , // S\u00f3lo certificados con claves privadas true , // No mostrar los caducados false ); // Mostrar advertencia cuando se seleccionase alguno caducado // Mostramos el dialogo de selecci\u00f3n final String selectedAlias = dialog.show(); // Si no se selecciono un certificado, se aborta la operacion if (selectedAlias == null ) { throw new AOCancelledOperationException( \"Operacion cancelada por el usuario\"); } // Obtenci\u00f3n de la clave de firma final PrivateKeyEntry pke = ksm.getKeyEntry(selectedAlias); // Seleccion del manejador de firma final AOSigner signer = AOSignerFactory. getSigner (AOSignConstants. SIGN_FORMAT_CADES ); // Configuramos las propiedades que deseemos del formato final Properties extraParams = new Properties(); // Firma implicita (Attached) extraParams.setProperty(CAdESExtraParams. MODE , \"implicit\"); //$NON-NLS-1$ final byte [] firma = signer.sign( datos, // Datos que deseamos firmar AOSignConstants. SIGN_ALGORITHM_SHA256WITHRSA , // Algoritmo de firma pke.getPrivateKey(), // Referencia a la clave privada pke.getCertificateChain(), // Cadena de certificaci\u00f3n extraParams); // Par\u00e1metros extra de configuraci\u00f3n return firma; } M\u00f3dulos requeridos (adem\u00e1s de sus dependencias): afirma-core afirma-core-keystore afirma-keystores-mozilla afirma-crypto-cades afirma-ui-core-jse-keystores < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"Selecci\u00f3n de almac\u00e9n y firma"},{"location":"markdown_strict/CF_plan-pruebas/","text":"En el presente documento se pretende definir e informar las pruebas que se realizan sobre el Cliente @firma para comprobar su correcci\u00f3n. Definici\u00f3n del alcance de las pruebas Las pruebas son pr\u00e1cticas que se realizan en diversas fases de un proyecto con el fin de verificar: El correcto funcionamiento de los componentes del sistema. El funcionamiento correcto de las interacciones que se producen entre los subsistemas que componen el proyecto. Que el sistema cumple con el funcionamiento esperado. Que cambios en uno o m\u00e1s componentes no introducen comportamientos no deseados o errores evitables. El Cliente @firma es un applet y debe ser ejecutado dentro de un navegador Web e integrado en un flujo de trabajo. Esta particularidad dificulta la automatizaci\u00f3n de las pruebas y obliga a la prueba manual del aplicativo. Las funcionalidades de alto nivel objetivo de las pruebas ser\u00e1n: Firma electr\u00f3nica: Formatos: CAdES, XAdES, PAdES, CMS, XMLdSig, ODF y OOXML. Algoritmos: MD2withRSA, MD5withRSA, SHA1withRSA, SHA256withRSA, SHA384withRSA, SHA512withRSA. Modos: Impl\u00edcito y Expl\u00edcito. Multifirmas: Cofirmas. Contrafirmas: Todos los nodos hojas. Todos los nodos del \u00e1rbol. Nodos seleccionados. Nodos de firmantes seleccionados. Sobres electr\u00f3nicos: Cifrados. Envueltos. Firmados y envueltos. Autenticados y envueltos. Desenvoltura de sobres. Cifrado sim\u00e9trico: Con clave: AES, Alleged RC4, Blowfish, 3DES, DES y RC2. Con contrase\u00f1a: SHA1 con 3DES, SHA1 con RC2 y MD5 con DES. Descifrado sim\u00e9trico: Con clave: AES, Alleged RC4, Blowfish, 3DES, DES y RC2. Con contrase\u00f1a: SHA1 con 3DES, SHA1 con RC2 y MD5 con DES. Adicionalmente, existen m\u00faltiples funciones para la configuraci\u00f3n de cada una de las funcionalidades principales. As\u00ed mismo, el tipo de las entradas que reciban cada una de las funciones principales tambi\u00e9n determinar\u00e1n su comportamiento. Debido a la imposibilidad de realizar la prueba de todas estas funcionalidades sobre cada una de las combinaciones de entorno compatibles con el Cliente (distintas versiones y arquitecturas de sistema operativo, JVM y navegador web) se determinar\u00e1 un conjunto significativo de entornos, acotado por la compatibilidad entre ellos, sobre los que realizar las pruebas. Pruebas M\u00f3dulos Afirma-core Pruebas unitarias Comprobaci\u00f3n de versi\u00f3n de BouncyCastle Se busca una versi\u00f3n de BouncyCastle en el path del sistema del usuario. Si se encuentra, fallar\u00e1 el test ya que el cliente incorpora su propia versi\u00f3n y cualquier otra podr\u00eda interferir en su funcionamiento. Resultado esperado: Se obtendr\u00e1 null ya que no debe encontrarse ninguna versi\u00f3n de BouncyCastle la path del sistema. Prueba de la extracci\u00f3n del nombre com\u00fan en nombres X.500 Se extrae el nombre com\u00fan de m\u00faltiples cadenas con formato X.500 y similares. Resultado esperado: El nombre com\u00fan asociado al nombre X.500 asociado, la misma cadena de entrada o null si la entrada fue nula. Detecci\u00f3n de MimeType Se detecta el MimeType de los siguientes tipos de documento: Texto plano XML PDF DOC XSL PPT MPP VSD Resultado esperado: El MimeType correcto de cada documento. Toma de dato datos del registro de Windows Se extrae del registro de Windows el path del directorio ra\u00edz del sistema. Esta prueba s\u00f3lo se realiza en sistemas Microsoft Windows. Resultado esperado: La ruta del directorio ra\u00edz del sistema. Afirma-core-keystores Pruebas unitarias Extracci\u00f3n de los alias y los certificados de un almac\u00e9n PKCS#12 Se carga un almac\u00e9n de claves PKCS#12 y se extraen los alias y los certificados contenidos. Resultado esperado: Alias del almac\u00e9n y los certificados asociados a los mismos. Acceso al KeyChain del sistema en MacOS X En sistemas MacOS X se carga el listado de alias del almac\u00e9n del sistema y se extraen los datos de los certificados contenidos. Si falla el proceso se lanza el error. Resultado esperado: En Mac OS X, alias del almac\u00e9n y los certificados asociados a los mismos. En el resto de sistema, el test no genera resultado. Acceso a un KeyChain en fichero en MacOS X En sistemas MacOS X se carga el listado de alias de un almac\u00e9n KeyChain en fichero y se extraen los datos de los certificados contenidos. Si falla el proceso se lanza el error. Resultado esperado: En Mac OS X, alias del almac\u00e9n y los certificados asociados a los mismos. En el resto de sistemas, el test no genera resultado. Obtenci\u00f3n de nombres significativos de los certificados del almac\u00e9n de Microsoft Windows En sistemas Microsoft Windows se carga el listado de alias del almac\u00e9n del sistema y se extraen los datos de los certificados contenidos. Si falla el proceso se lanza el error. Resultado esperado: En Microsoft Windows, si el certificado no ten\u00eda alias o este se corresponde con un nombre X.500, se utilizar\u00e1 el CN del Subject o la OU si este no exist\u00eda. En otros casos, se devolver\u00e1 el propio alias. En el resto de sistemas, el test no genera resultado. Afirma-core-massive Pruebas unitarias Las pruebas del m\u00f3dulo de firma masiva se realizar\u00e1n sobre las funcionalidades de firma masiva de directorios y firma masiva program\u00e1tica. Debido a la naturaleza del proceso de firma masiva de directorios, las pruebas unitarias correspondientes a este proceso se ejecutar\u00e1n fuera del proceso de integraci\u00f3n continua. Firma masiva de directorios con formatos de firma gen\u00e9ricos Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos CMS CAdES XAdES Detached XAdES Enveloping XMLDSig Detached XMLDSig Enveloping Modos Impl\u00edcito Expl\u00edcito Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario XML PDF ODT DOCX Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros del directorio. El nombre de las firmas generadas incorporar\u00e1n la part\u00edcula \u201c.sign\u201d. Firma masiva de directorios con formatos de firma XML enveloped y datos XML Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos XAdES Enveloped XMLDSig Enveloped Modos Impl\u00edcito Los ficheros presentes en el directorio ser\u00e1n de tipo: XML Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros del directorio. El nombre de las firmas generadas incorporar\u00e1n la part\u00edcula \u201c.sign\u201d. Firma masiva de directorios con formatos de firma XML enveloped y datos no XML Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos XAdES Enveloped XMLDSig Enveloped Modos Impl\u00edcito Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario PDF ODT DOCX Resultado esperado: No se generar\u00e1 ninguna firma y los errores quedar\u00e1n indicados en el fichero de log generado durante el proceso de firma masiva. Firma masiva de directorios con formatos de firma XML enveloped y modo expl\u00edcito Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos XAdES Enveloped XMLDSig Enveloped Modos Expl\u00edcito Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario XML PDF ODT DOCX Resultado esperado: No se generar\u00e1 ninguna firma y los errores quedar\u00e1n indicados en el fichero de log generado durante el proceso de firma masiva. Firma masiva de directorios con formato de firma PAdES y documentos PDF Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos PAdES Los ficheros presentes en el directorio ser\u00e1n de tipo: PDF Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros del directorio. El nombre de las firmas generadas incorporar\u00e1n la part\u00edcula \u201c.sign\u201d. Firma masiva de directorios con formato de firma PAdES y ficheros no PDF Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos PAdES Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario XML ODT DOCX Resultado esperado: No se generar\u00e1 ninguna firma y los errores quedar\u00e1n indicados en el fichero de log generado durante el proceso de firma masiva. Firma masiva de directorios con formato de firma ODF y documentos ODF Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos ODF Los ficheros presentes en el directorio ser\u00e1n de tipo: ODF (ODT, ODS, ODP) Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros del directorio. El nombre de las firmas generadas incorporar\u00e1n la part\u00edcula \u201c.sign\u201d. Firma masiva de directorios con formato de firma ODF y ficheros no ODF Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos ODF Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario XML PDF DOCX Resultado esperado: No se generar\u00e1 ninguna firma y los errores quedar\u00e1n indicados en el fichero de log generado durante el proceso de firma masiva. Firma masiva de directorios con formato de firma OOXML y documentos OOXML Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos OOXML Los ficheros presentes en el directorio ser\u00e1n de tipo: OOXML (DOCX, XLSX, PPTX) Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros del directorio. El nombre de las firmas generadas incorporar\u00e1n la part\u00edcula \u201c.sign\u201d. Firma masiva de directorios con formato de firma OOXML y ficheros no OOXML Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos OOXML Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario XML PDF ODT Resultado esperado: No se generar\u00e1 ninguna firma y los errores quedar\u00e1n indicados en el fichero de log generado durante el proceso de firma masiva. Cofirma masiva de directorios sobre firmas con el indicador para conservar el formato original Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de cofirma y la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Los ficheros presentes en el directorio ser\u00e1n de tipo: Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML Resultado esperado: Cofirmas correctas para cada configuraci\u00f3n indicada. Siendo el resultado siempre una cofirma generada con el mismo algoritmo utilizado en la firma original. El nombre de las firmas generadas incorporar\u00e1n la part\u00edcula \u201c.cosign\u201d. Cofirma masiva de directorios sobre firmas sin el indicador para conservar el formato original Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de cofirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Los ficheros presentes en el directorio ser\u00e1n de tipo: Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML Resultado esperado: Se generar\u00e1 una cofirma correcta para cada configuraci\u00f3n indicada cuando el formato en cuesti\u00f3n permita la cofirma del tipo de documento especificado. En caso contrario, se generar\u00e1 un error en el log resultado de la operaci\u00f3n. El nombre de las cofirmas generadas incorporar\u00e1n la part\u00edcula \u201c.cosign\u201d. Cofirma masiva de directorios sobre datos sin el indicador para conservar el formato original Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de cofirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario XML PDF ODT DOCX Resultado esperado: Se generar\u00e1 una cofirma correcta para cada configuraci\u00f3n indicada cuando el formato en cuesti\u00f3n permita la cofirma del tipo de firma especificado. En caso contrario, se generar\u00e1 un error en el log resultado de la operaci\u00f3n. El nombre de las cofirmas generadas incorporar\u00e1n la part\u00edcula \u201c.cosign\u201d. Contrafirma masiva de directorios sobre firmas con el indicador para conservar el formato original Se ejecuta el proceso de firma masiva de directorios habiendo configurado la operaci\u00f3n de contrafirma y la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Nodos objetivo Nodos hijos de firma Todos los nodos de firma Los ficheros presentes en el directorio ser\u00e1n de tipo: Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML Resultado esperado: Se generar\u00e1 una contrafirma correcta sobre los nodos objetivo para cada configuraci\u00f3n. La contrafirma siempre se generar\u00e1 en el mismo formato que la firma original. El nombre de las contrafirmas generadas incorporar\u00e1n la part\u00edcula \u201c.countersign\u201d. Contrafirma masiva de directorios sobre firmas sin el indicador para conservar el formato original Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de contrafirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Nodos objetivo Nodos hijos de firma Todos los nodos de firma Los ficheros presentes en el directorio ser\u00e1n de tipo: Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML Resultado esperado: Se generar\u00e1 una contrafirma correcta sobre los nodos objetivo para cada configuraci\u00f3n indicada cuando el formato en cuesti\u00f3n permita la contrafirma del tipo de documento especificado. En caso contrario, se generar\u00e1 un error en el log resultado de la operaci\u00f3n. El nombre de las contrafirmas generadas incorporar\u00e1n la part\u00edcula \u201c.countersign\u201d. Contrafirma masiva de directorios sobre datos sin el indicador para conservar el formato original Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de contrafirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario XML PDF ODT DOCX Resultado esperado: No se generar\u00e1 ninguna contrafirma y los errores quedar\u00e1n indicados en el fichero de log generado durante el proceso de firma masiva. Firma masiva program\u00e1tica con formatos de firma gen\u00e9ricos Se ejecuta la operaci\u00f3n de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos CMS CAdES XAdES Detached XAdES Enveloping XMLDSig Detached XMLDSig Enveloping Modos Impl\u00edcito Expl\u00edcito Ficheros Binario XML PDF ODT DOCX A partir de: Ficheros Datos le\u00eddos de los ficheros Hash calculados de los ficheros Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros. Firma masiva program\u00e1tica con formatos de firma XML enveloped y datos XML Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos XAdES Enveloped XMLDSig Enveloped Modos Impl\u00edcito Ficheros XML A partir de: Ficheros Datos le\u00eddos de los ficheros Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros. Firma masiva program\u00e1tica con formatos de firma XML enveloped a partir de un hash Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos XAdES Enveloped XMLDSig Enveloped Modos Impl\u00edcito Ficheros Binario XML PDF ODT DOCX A partir de: Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva. Firma masiva program\u00e1tica con formatos de firma XML enveloped y datos no XML Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos XAdES Enveloped XMLDSig Enveloped Modos Impl\u00edcito Ficheros Binario PDF ODT DOCX A partir de: Ficheros Datos le\u00eddos de los ficheros Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva. Firma masiva program\u00e1tica con formatos de firma XML enveloped y modo expl\u00edcito Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos XAdES Enveloped XMLDSig Enveloped Modos Expl\u00edcito Ficheros Binario XML PDF ODT DOCX A partir de: Ficheros Datos le\u00eddos de los ficheros Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva. Firma masiva program\u00e1tica con formato de firma PAdES y documentos PDF Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos PAdES Ficheros PDF A partir de: Ficheros Datos le\u00eddos de los ficheros Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros. Firma masiva program\u00e1tica con formato de firma PAdES y la huella digital de documentos PDF Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos PAdES Ficheros PDF A partir de: Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva. Firma masiva program\u00e1tica con formato de firma PAdES y ficheros no PDF Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos PAdES Ficheros Binario XML ODT DOCX A partir de: Ficheros Datos le\u00eddos de los ficheros Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva. Firma masiva program\u00e1tica con formato de firma ODF y documentos ODF Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos ODF Ficheros ODF (ODT, ODS, ODP) A partir de: Ficheros Datos le\u00eddos de los ficheros Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros. Firma masiva program\u00e1tica con formato de firma ODF y la huella digital de documentos ODF Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos ODF Ficheros ODF A partir de: Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva. Firma masiva program\u00e1tica con formato de firma ODF y ficheros no ODF Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos ODF Ficheros Binario XML PDF DOCX A partir de: Ficheros Datos le\u00eddos de los ficheros Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva. Firma masiva program\u00e1tica con formato de firma OOXML y documentos OOXML Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos OOXML Ficheros OOXML A partir de: Ficheros Datos le\u00eddos de los ficheros Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros. Firma masiva program\u00e1tica con formato de firma OOXML y la huella digital de documentos OOXML Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos OOXML Ficheros OOXML (DOCX, XSLX, PPTX) A partir de: Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva. Firma masiva program\u00e1tica con formato de firma OOXML y ficheros no OOXML Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos OOXML Ficheros Binario XML PDF ODT A partir de: Ficheros Datos le\u00eddos de los ficheros Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva. Cofirma masiva program\u00e1tica sobre firmas con el indicador para conservar el formato original Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de cofirma y la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Ficheros Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML A partir de: Ficheros Datos le\u00eddos de los ficheros Resultado esperado: Cofirmas correctas para cada configuraci\u00f3n indicada. Siendo el resultado siempre una cofirma generada con el mismo algoritmo utilizado en la firma original. Cofirma masiva program\u00e1tica sobre firmas sin el indicador para conservar el formato original Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de cofirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Ficheros Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML A partir de: Ficheros Datos le\u00eddos de los ficheros Resultado esperado: Se generar\u00e1 una cofirma correcta para cada configuraci\u00f3n indicada cuando el formato en cuesti\u00f3n permita la cofirma del tipo de documento especificado. En caso contrario, se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva. Cofirma masiva program\u00e1tica sobre datos sin el indicador para conservar el formato original Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de cofirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Ficheros Binario XML PDF ODT DOCX A partir de: Ficheros Datos le\u00eddos de los ficheros Hash calculados de los ficheros Resultado esperado: Se generar\u00e1 una cofirma correcta para cada configuraci\u00f3n indicada cuando el formato en cuesti\u00f3n permita la cofirma del tipo de firma especificado. En caso contrario, se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva. Cofirma masiva program\u00e1tica a partir de huella digital Se ejecuta el proceso de firma masiva program\u00e1tica a partir de huellas digitales habiendo configurado la operaci\u00f3n de cofirma. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Ficheros Cualquiera A partir de: Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva. Contrafirma masiva program\u00e1tica sobre firmas con el indicador para conservar el formato original Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de contrafirma y la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Ficheros Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML A partir de: Ficheros Datos le\u00eddos de los ficheros Nodos objetivo Nodos hijos de firma Todos los nodos de firma Resultado esperado: Se generar\u00e1 una contrafirma correcta para cada configuraci\u00f3n indicada sobre los nodos indicados, generada siempre en el mismo formato que la firma original. Contrafirma masiva program\u00e1tica sobre firmas sin el indicador para conservar el formato original Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de contrafirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Ficheros Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML A partir de: Ficheros Datos le\u00eddos de los ficheros Nodos objetivo Nodos hijos de firma Todos los nodos de firma Resultado esperado: Se generar\u00e1 una contrafirma correcta sobre los nodos de firma indicados para cada configuraci\u00f3n cuando el formato en cuesti\u00f3n permita la contrafirma del tipo de documento especificado. En caso contrario, se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva. Contrafirma masiva program\u00e1tica a partir de huella digital Se ejecuta el proceso de firma masiva program\u00e1tica, habiendo configurado la operaci\u00f3n de contrafirma, a partir de huellas digitales. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Ficheros Cualquier A partir de: Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva. Contrafirma masiva program\u00e1tica sobre datos sin el indicador para conservar el formato original Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de contrafirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Ficheros Binario XML PDF ODT DOCX A partir de: Ficheros Datos le\u00eddos de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva. Afirma-crypto-cades Pruebas unitarias Firma CAdES-BES Se prueba la firma CAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos Texto plano XML Otro formato Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado. Si el modo configurado era impl\u00edcito, los datos estar\u00e1n contenidos en la firma y si el algoritmo de firma es SHA2 la firma tendr\u00e1 el atributo SigningCertificateV2. Firma CAdES-EPES Se prueba la firma CAdES con la pol\u00edtica de firma de a AGE en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos Texto plano XML Otro formato Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado y la pol\u00edtica de firma declarada. Si el modo configurado era impl\u00edcito, los datos estar\u00e1n contenidos en la firma y si el algoritmo de firma es SHA2 la firma tendr\u00e1 el atributo SigningCertificateV2. Cofirma CAdES con documento original Se prueba la cofirma de firmas CAdES, indicando el documento originalmente firmado, en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma CAdES-BES Firma CAdES-EPES Modos CAdES CAdES-BES CAdES-EPES Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas correctas en todos los casos generadas con el algoritmo indicado y el modo CAdES. El documento de firma final incluir\u00e1 o no el documento firmado seg\u00fan el modo indicado en la cofirma. Cofirma CAdES sin documento original sobre CAdES impl\u00edcita Se prueba la cofirma de firmas CAdES impl\u00edcitas sin indicar el documento originalmente firmado. Ya que no se indica el documento firmado, se generar\u00e1 la cofirma a partir de los datos contenidos en la firma original. Se probar\u00e1n todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma CAdES-BES impl\u00edcita Firma CAdES-EPES impl\u00edcita Modos CAdES CAdES-BES CAdES-EPES Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas correctas en todos los casos generadas con el algoritmo indicado y el modo CAdES. El documento de firma final incluir\u00e1 o no el documento firmado seg\u00fan el modo indicado en la cofirma. Cofirma CAdES sin documento original sobre CAdES expl\u00edcita (mismo algoritmo) Se prueba la cofirma de firmas CAdES expl\u00edcitas sin indicar el documento originalmente firmado. Ya que no se indica el documento firmado y este no est\u00e1 contenido en la firma, s\u00f3lo ser\u00e1 posible generar las firmas si ya disponemos del hash del documento firmado generado con el mismo algoritmo que queremos utiliza en la cofirma. Se probar\u00e1n todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma CAdES-BES expl\u00edcita Firma CAdES-EPES expl\u00edcita Modos CAdES CAdES-BES CAdES-EPES Modos Indiferente Algoritmos de firma El mismo que el de la firma Resultado esperado: Cofirmas CAdES expl\u00edcitas correctas generadas en todos los casos con el algoritmo utilizado en la firma. El documento de firma final incluir\u00e1 o no el documento firmado seg\u00fan el modo indicado en la cofirma. Cofirma CAdES sin documento original sobre CAdES expl\u00edcita (distinto algoritmo) Se prueba la cofirma de firmas CAdES expl\u00edcitas sin indicar el documento originalmente firmado. Ya que no se indica el documento firmado y este no est\u00e1 contenido en la firma, s\u00f3lo ser\u00e1 posible generar las firmas si ya disponemos del hash del documento firmado generado con el mismo algoritmo que queremos utiliza en la cofirma. Se probar\u00e1n todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma CAdES-BES expl\u00edcita Firma CAdES-EPES expl\u00edcita Modos CAdES CAdES-BES CAdES-EPES Modos Indiferente Algoritmos de firma Distinto al de la firma Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOException indicando que no se ha podido generar por no encontrar ni los datos ni una huella digital v\u00e1lida en la firma. Cofirma de ficheros Se prueba la cofirma de ficheros que no sean firma CAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Ficheros de datos Cualquier no CAdES Firma CMS Algoritmos de firma Indiferente Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOException informando que ocurri\u00f3 un error durante la operaci\u00f3n. Contrafirma de firma/cofirma CAdES Se prueba la contrafirma de firmas CAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma CAdES impl\u00edcita Firma CAdES expl\u00edcita Cofirma CAdES Modos CAdES CAdES-BES CAdES-EPES Nodos objetivo Todos los nodos hijos Todos los nodos Nodos determinados Nodos de firmantes determinados Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Contrafirmas correctas generadas con el algoritmo indicado, el modo CAdES y realizadas sobre los nodos especificado. El documento de firma final incluir\u00e1 o no el documento firmado si lo inclu\u00eda ya la firma contrafirmada. Contrafirma de ficheros Se prueba la contrafirma de ficheros que no sean firma CAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Ficheros de datos Fichero plano XML Fichero binario Firma CMS Algoritmos de firma Indiferente Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOException informando que ocurri\u00f3 un error durante la operaci\u00f3n. Comprobaci\u00f3n de documento v\u00e1lido para firma Se prueba si un fichero es v\u00e1lido para realizar una firma CAdES sobre \u00e9l. Se probar\u00e1 con: Ficheros de datos Fichero plano XML Fichero binario Firma CAdES Firma CMS Resultado esperado: Siempre se devolver\u00e1 \u201ctrue\u201d. Comprobaci\u00f3n de firmas CAdES Se prueba si un fichero es realmente una firma CAdES. Se probar\u00e1 con los siguientes ficheros: Firma CAdES-BES impl\u00edcita Firma CAdES-BES explicita Firma CAdES-EPES Cofirma CAdES-BES Cofirma CAdES-EPES Contrafirma CAdES-BES Contrafirma CAdES-EPES Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d. Comprobaci\u00f3n de firmas CAdES con ficheros no CAdES Se prueba si un fichero es realmente una firma CAdES. Se probar\u00e1 con los siguientes ficheros: Fichero plano XML Fichero binario Firma CMS Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d. Extracci\u00f3n de datos generales de firmas CAdES Se extrae la informaci\u00f3n general de una firma CAdES con los siguientes ficheros: Firma CAdES-BES impl\u00edcita Firma CAdES-BES explicita Firma CAdES-EPES Cofirma CAdES-BES Cofirma CAdES-EPES Contrafirma CAdES-BES Contrafirma CAdES-EPES Resultado esperado: Objeto AOSignInfo cuyo formato declarado es \u201cCAdES\". Extracci\u00f3n de datos generales con ficheros no CAdES Se extrae la informaci\u00f3n general de una firma CAdES con los siguientes ficheros: Fichero plano XML Fichero binario Firma CMS Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d. Extracci\u00f3n de datos firmados de firmas CAdES impl\u00edcita Se extraen los datos firmados de los siguientes ficheros CAdES firmados: Firma CAdES-BES impl\u00edcita Firma CAdES-EPES impl\u00edcita Cofirma CAdES-BES impl\u00edcita Cofirma CAdES-EPES impl\u00edcita Contrafirma CAdES-BES impl\u00edcita Contrafirma CAdES-EPES impl\u00edcita Resultado esperado: Se extraen los datos originalmente firmados. Extracci\u00f3n de datos firmados de firmas CAdES expl\u00edcita Se extraen los datos firmados de los siguientes ficheros CAdES firmados: Firma CAdES-BES expl\u00edcita Firma CAdES-EPES expl\u00edcita Cofirma CAdES-BES expl\u00edcita Cofirma CAdES-EPES expl\u00edcita Contrafirma CAdES-BES expl\u00edcita Contrafirma CAdES-EPES expl\u00edcita Resultado esperado: Se devuelve null. Extracci\u00f3n de datos firmados de ficheros no CAdES Se extraen los datos firmados de los siguientes ficheros: Fichero plano XML Fichero binario Firma CMS Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d. Obtenci\u00f3n de la estructura de firmantes de firmas CAdES Se extrae el \u00e1rbol de firmantes de ficheros del siguiente tipo: Firma CAdES-BES impl\u00edcita Firma CAdES-BES explicita Firma CAdES-EPES Cofirma CAdES-BES Cofirma CAdES-EPES Contrafirma CAdES-BES Contrafirma CAdES-EPES Resultado esperado: Se obtiene el \u00e1rbol de firmas correspondiente a cada documento. Obtenci\u00f3n de la estructura de firmantes de ficheros no CAdES Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: Fichero plano XML Fichero binario Firma CMS Resultado esperado: Se lanza una excepci\u00f3n de tipo \u201cAOInvalidFormatException\u201d. Afirma-crypto-cms Pruebas unitarias Firma CMS Se prueba la firma CMS en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos Texto plano XML Otro formato Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado. Si el modo configurado era impl\u00edcito, los datos estar\u00e1n contenidos en la firma. Cofirma CMS con documento original Se prueba la cofirma de firmas CMS, indicando el documento originalmente firmado, en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas correctas en todos los casos generadas con el algoritmo indicado. El documento de firma final incluir\u00e1 o no el documento firmado seg\u00fan el modo indicado en la cofirma. Cofirma CMS sin documento original sobre firma impl\u00edcita Se prueba la cofirma de firmas CMS y CAdES impl\u00edcitas sin indicar el documento originalmente firmado. Ya que no se indica el documento firmado, se generar\u00e1 la cofirma a partir de los datos contenidos en la firma original. Se probar\u00e1n todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Ficheros Firma CMS impl\u00edcita Firma CAdES-BES impl\u00edcita Firma CAdES-EPES impl\u00edcita Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas CMS correctas generadas con el algoritmo indicado. El documento de firma final incluir\u00e1 o no el documento firmado seg\u00fan el modo indicado en la cofirma. Cofirma CMS sin documento original sobre CMS expl\u00edcita (mismo algoritmo) Se prueba la cofirma de firmas CMS y CAdES expl\u00edcitas sin indicar el documento originalmente firmado. Ya que no se indica el documento firmado y este no est\u00e1 contenido en la firma, s\u00f3lo ser\u00e1 posible generar las firmas si ya disponemos del hash del documento firmado generado con el mismo algoritmo que queremos utiliza en la cofirma. Se probar\u00e1n todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Ficheros Firma CMS expl\u00edcita Firma CAdES-BES expl\u00edcita Firma CAdES-EPES expl\u00edcita Modos Indiferente Algoritmos de firma El mismo que el de la firma Resultado esperado: Cofirmas CMS expl\u00edcitas correctas generadas con el algoritmo utilizado en la firma. El documento de firma final incluir\u00e1 o no el documento firmado seg\u00fan el modo indicado en la cofirma. Cofirma CMS sin documento original sobre CMS expl\u00edcita (distinto algoritmo) Se prueba la cofirma de firmas CMS expl\u00edcitas sin indicar el documento originalmente firmado. Ya que no se indica el documento firmado y este no est\u00e1 contenido en la firma, s\u00f3lo ser\u00e1 posible generar las firmas si ya disponemos del hash del documento firmado generado con el mismo algoritmo que queremos utiliza en la cofirma. Se probar\u00e1n todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma CMS Firma CAdES-BES Modos Indiferente Algoritmos de firma Distinto al de la firma Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOException indicando que no se ha podido generar por no encontrar ni los datos ni una huella digital v\u00e1lida en la firma. Cofirma de ficheros Se prueba la cofirma de ficheros que no sean firma CMS ni CAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Ficheros de datos Fichero plano XML Fichero binario Algoritmos de firma Indiferente Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOException informando que ocurri\u00f3 un error durante la operaci\u00f3n. Contrafirma de firma/cofirma CMS Se prueba la contrafirma de firmas CMS en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma CMS impl\u00edcita Firma CMS expl\u00edcita Cofirma CMS Firma CAdES impl\u00edcita Firma CAdES expl\u00edcita Cofirma CAdES Nodos objetivo Todos los nodos hijos Todos los nodos Nodos determinados Nodos de firmantes determinados Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Contrafirmas CMS correctas generadas con el algoritmo indicado y realizadas sobre los nodos especificados. El documento de firma final incluir\u00e1 o no el documento firmado si lo inclu\u00eda ya la firma contrafirmada. Contrafirma de ficheros Se prueba la contrafirma de ficheros que no sean firma CMS en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Ficheros de datos Cualquier no CAdES Firma CMS Algoritmos de firma Indiferente Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOException informando que ocurri\u00f3 un error durante la operaci\u00f3n. Comprobaci\u00f3n de documento v\u00e1lido para firma Se prueba si un fichero es v\u00e1lido para realizar una firma CMS sobre \u00e9l. Se probar\u00e1 con: Ficheros de datos Fichero plano XML Fichero binario Firma CAdES Firma CMS Resultado esperado: Siempre se devolver\u00e1 \u201ctrue\u201d. Comprobaci\u00f3n de firmas CMS Se prueba si un fichero es realmente una firma CMS. Ya que las firmas CAdES son CMS con atributos adicionales, se considerar\u00e1n tambi\u00e9n firmas CMS. Se probar\u00e1 con los siguientes ficheros: Firma CMS impl\u00edcita Firma CMS explicita Cofirma CMS Contrafirma CMS Firma CAdES-BES impl\u00edcita Firma CAdES-BES explicita Firma CAdES-EPES Cofirma CAdES-BES Cofirma CAdES-EPES Contrafirma CAdES-BES Contrafirma CAdES-EPES Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d. Comprobaci\u00f3n de firmas CMS con ficheros no CMS Se prueba si un fichero es realmente una firma CMS. Se probar\u00e1 con los siguientes ficheros: Fichero plano XML Fichero binario Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d. Extracci\u00f3n de datos generales de firmas CMS Se extrae la informaci\u00f3n general de una firma CMS o CAdES (que se consideran CMS con datos adicionales) con los siguientes ficheros: Firma CMS impl\u00edcita Firma CMS explicita Cofirma CMS Contrafirma CMS Firma CAdES-BES impl\u00edcita Firma CAdES-BES explicita Firma CAdES-EPES Cofirma CAdES-BES Cofirma CAdES-EPES Contrafirma CAdES-BES Contrafirma CAdES-EPES Resultado esperado: Objeto AOSignInfo cuyo formato declarado es \u201cCMS\". Extracci\u00f3n de datos generales con ficheros no CMS Se extrae la informaci\u00f3n general de una firma CMS con los siguientes ficheros: Fichero plano XML Fichero binario Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d. Extracci\u00f3n de datos firmados de firmas CMS impl\u00edcita Se extraen los datos firmados de los siguientes ficheros CMS firmados: Firma CMS impl\u00edcita Cofirma CMS impl\u00edcita Contrafirma CMS impl\u00edcita Firma CAdES-BES impl\u00edcita Firma CAdES-EPES impl\u00edcita Cofirma CAdES-BES impl\u00edcita Cofirma CAdES-EPES impl\u00edcita Contrafirma CAdES-BES impl\u00edcita Contrafirma CAdES-EPES impl\u00edcita Resultado esperado: Se extraen los datos originalmente firmados. Extracci\u00f3n de datos firmados de firmas CMS expl\u00edcita Se extraen los datos firmados de los siguientes ficheros firmados: Firma CMS expl\u00edcita Cofirma CMS expl\u00edcita Contrafirma CMS expl\u00edcita Firma CAdES-BES expl\u00edcita Firma CAdES-EPES expl\u00edcita Cofirma CAdES-BES expl\u00edcita Cofirma CAdES-EPES expl\u00edcita Contrafirma CAdES-BES expl\u00edcita Contrafirma CAdES-EPES expl\u00edcita Resultado esperado: Se devuelve null. Extracci\u00f3n de datos firmados de ficheros no CMS Se extraen los datos firmados de los siguientes ficheros: Fichero plano XML Fichero binario Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d. Obtenci\u00f3n de la estructura de firmantes de firmas CMS Se extrae el \u00e1rbol de firmantes de ficheros del siguiente tipo: Firma CMS impl\u00edcita Firma CMS explicita Cofirma CMS Contrafirma CMS Firma CAdES-BES impl\u00edcita Firma CAdES-BES explicita Firma CAdES-EPES Cofirma CAdES-BES Cofirma CAdES-EPES Contrafirma CAdES-BES Contrafirma CAdES-EPES Resultado esperado: Se obtiene el \u00e1rbol de firmas correspondiente a cada documento. Obtenci\u00f3n de la estructura de firmantes de ficheros no CMS Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: Fichero plano XML Fichero binario Resultado esperado: Se lanza una excepci\u00f3n de tipo \u201cAOInvalidFormatException\u201d. Afirma-crypto-odf Pruebas unitarias Firma ODF Se prueba la firma ODF en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos ODT ODS ODP Modos CAdES OpenOffice.org 3.2 OpenOffice.org 3.1 Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas siempre con SHA1 (se ignora el algoritmo de firma). Es necesario abrir los ficheros con OpenOffice para comprobaci\u00f3n manual. Cofirma de firmas ODF Se prueba la cofirma de ficheros ODF firmados en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de firma ODT ODS ODP Modos CAdES OpenOffice.org 3.2 OpenOffice.org 3.1 Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas correctas en todos los casos generadas siempre con SHA1 (se ignora el algoritmo de firma). Es necesario abrir los ficheros con OpenOffice para comprobaci\u00f3n manual. Cofirma de ficheros ODF Se prueba la cofirma de ficheros ODF sin firmar en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos ODT ODS ODP Modos CAdES OpenOffice.org 3.2 OpenOffice.org 3.1 Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Firmas correctas en todos los casos generadas siempre con SHA1 (se ignora el algoritmo de firma). Es necesario abrir los ficheros con OpenOffice para comprobaci\u00f3n manual. Contrafirma de ficheros Se prueba la contrafirma de ficheros ODF en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos ODT ODS ODP ODT firmado ODS firmado ODP firmado Otro formato Modos CAdES OpenOffice.org 3.2 OpenOffice.org 3.1 Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cada intento de contrafirma lanzar\u00e1 una excepci\u00f3n de tipo \u201cUnsupportedOperationException\u201d. Firma y cofirma de un fichero en formato no ODF Se prueba la firma y cofirma de ficheros no ODF en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos No ODF Modos CAdES OpenOffice.org 3.2 OpenOffice.org 3.1 Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cada intento de firmar/cofirmar el fichero lanzar\u00e1 una excepci\u00f3n de tipo \u201cAOFormatFileException\u201d. Comprobaci\u00f3n de documento ODF Se prueba si un fichero es realmente un documento ODF con los siguientes ficheros: ODT ODS ODP ODT firmado ODS firmado ODP firmado Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d. Comprobaci\u00f3n de documento no ODF Se prueba si un fichero es realmente un documento ODF con los siguientes ficheros: Cualquier documento no ODF. Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d. Comprobaci\u00f3n de firmas ODF Se prueba si un fichero es realmente un documento ODF firmado con los siguientes ficheros: ODT firmado / cofirmado ODS firmado / cofirmado ODP firmado / cofirmado Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d. Comprobaci\u00f3n de firmas de documento distintos a ODF firmados Se prueba si un fichero es realmente un documento ODF firmado con los siguientes ficheros: ODT sin firmar ODS sin firmar ODP sin firmar Cualquier documento no ODF Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d. Extracci\u00f3n de datos generales de firmas ODF Se extrae la informaci\u00f3n general de una firma ODF con los siguientes ficheros: ODT firmado ODS firmado ODP firmado Resultado esperado: Objeto AOSignInfo cuyo formato declarado es \u201cODF (Open Document Format)\". Extracci\u00f3n de datos generales de documentos no ODF firmados Se extrae la informaci\u00f3n general de una firma ODF con los siguientes ficheros: ODT sin firmar ODS sin firmar ODP sin firmar Cualquier documento no ODF Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d. Extracci\u00f3n de datos firmados de firmas ODF Se extraen los datos firmados de los siguientes ficheros ODF firmados: ODT firmado ODS firmado ODP firmado Resultado esperado: Se extraen los datos originalmente firmados. Extracci\u00f3n de datos firmados de ficheros no ODF firmados Se extraen los datos firmados de los siguientes ficheros: ODT ODS ODP Cualquier documento no ODF Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d. Obtenci\u00f3n de la estructura de firmantes de ODF firmados Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: ODT firmado ODT cofirmado ODS firmado ODS cofirmado ODP firmado ODP cofirmado Resultado esperado: Se obtiene el \u00e1rbol de firmas correspondiente a cada documento. Obtenci\u00f3n de la estructura de firmantes de ficheros ODF sin firmar y no ODF Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: ODT ODS ODP Cualquier documento no ODF Resultado esperado: Se lanza una excepci\u00f3n de tipo \u201cAOInvalidFormatException\u201d. Afirma-crypto-ooxml Pruebas unitarias Firma OOXML Se prueba la firma OOXML en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos DOCX XMLS PPTX Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo de firma indicado. Es necesario abrir los ficheros con Microsoft Office para comprobaci\u00f3n manual. Cofirma de firmas OOXML Se prueba la cofirma de ficheros OOXML firmados en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de firma DOCX firmado XSLX firmado PPTX firmado Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas correctas en todos los casos generadas con el algoritmo de firma indicado. Es necesario abrir los ficheros con Microsoft Office para comprobaci\u00f3n manual. Cofirma de ficheros OOXML Se prueba la cofirma de ficheros OOXML sin firmar en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos DOCX XMLX PPTX Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Firmas correctas en todos los casos generadas con el algoritmo de firma indicado. Es necesario abrir los ficheros con Microsoft Office para comprobaci\u00f3n manual. Contrafirma de ficheros Se prueba la contrafirma de ficheros OOXML en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos DOCX XSLX PPTX DOCX firmado XMLX firmado PPTX firmado Otro formato Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cada intento de contrafirma lanzar\u00e1 una excepci\u00f3n de tipo \u201cUnsupportedOperationException\u201d. Firma y cofirma de un fichero en formato no OOXML Se prueba la firma y cofirma de ficheros no OOXML en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos No OOXML Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cada intento de firmar/cofirmar el fichero lanzar\u00e1 una excepci\u00f3n de tipo \u201cAOFormatFileException\u201d. Comprobaci\u00f3n de documento OOXML Se prueba si un fichero es realmente un documento OOXML con los siguientes ficheros: DOCX XSLX PPTX DOCX firmado XSLX firmado PPTX firmado Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d. Comprobaci\u00f3n de documento no OOXML Se prueba si un fichero es realmente un documento OOXML con los siguientes ficheros: Cualquier documento no OOXML. Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d. Comprobaci\u00f3n de firmas OOXML Se prueba si un fichero es realmente un documento OOXML firmado con los siguientes ficheros: DOCX firmado / cofirmado XSLX firmado / cofirmado PPTX firmado / cofirmado Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d. Comprobaci\u00f3n de firmas de documento distintos a OOXML firmados Se prueba si un fichero es realmente un documento OOXML firmado con los siguientes ficheros: DOCX sin firmar XSLX sin firmar DOCX sin firmar Cualquier documento no OOXML Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d. Extracci\u00f3n de datos generales de firmas OOXML Se extrae la informaci\u00f3n general de una firma OOXML con los siguientes ficheros: DOCX firmado XSLX firmado PPTX firmado Resultado esperado: Objeto AOSignInfo cuyo formato declarado es \u201cOOXML (Office Open XML)\". Extracci\u00f3n de datos generales de documentos no OOXML firmados Se extrae la informaci\u00f3n general de una firma OOXML con los siguientes ficheros: DOCX sin firmar XSLX sin firmar PPTX sin firmar Cualquier documento no OOXML Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d. Extracci\u00f3n de datos firmados de firmas OOXML Se extraen los datos firmados de los siguientes ficheros OOXML firmados: DOCX firmado XSLX firmado PPTX firmado Resultado esperado: Se extraen los datos originalmente firmados. Extracci\u00f3n de datos firmados de ficheros no OOXML firmados Se extraen los datos firmados de los siguientes ficheros: DOCX XSLX PPTX Cualquier documento no OOXML Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d. Obtenci\u00f3n de la estructura de firmantes de OOXML firmados Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: DOCX firmado DOCX cofirmado XLSX firmado XSLX cofirmado PPTX firmado PPTX cofirmado Resultado esperado: Se obtiene el \u00e1rbol de firmas correspondiente a cada documento. Obtenci\u00f3n de la estructura de firmantes de ficheros OOXML sin firmar y no OOXML Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: DOCX XLSX PPTX Cualquier documento no OOXML Resultado esperado: Se lanza una excepci\u00f3n de tipo \u201cAOInvalidFormatException\u201d. Afirma-crypto-pdf Pruebas unitarias Firma PAdES-BES Pruebas de firma con todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Algoritmos SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Ficheros PDF PDF con adjuntos y ficheros empotrados Resultado esperado: Se obtiene el PDF con una firma PAdES-BES. Firma PAdES-EPES Pruebas de firma con la pol\u00edtica de firma de la AGE con todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Algoritmos SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Ficheros PDF PDF con adjuntos y ficheros empotrados Resultado esperado: Se obtiene el PDF con una firma PAdES-EPES. Firma PAdES-T Pruebas de firma con sello de tiempo de CatCert y todas las combinaciones posibles de los siguientes elementos: Algoritmos SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Ficheros PDF PDF con adjuntos y ficheros empotrados Resultado esperado: Se obtiene el PDF con una firma PAdES-T con el sello de tiempo de CatCert. Firma PAdES de un PDF certificado con la propiedad \u201callowSigningCertifiedPdfs\u201d Pruebas de firma PAdES de un PDF certificado con la propiedad activa \u201callowSigningCertifiedPdfs\u201d, que se salta la restricci\u00f3n de no firmar PDFs certificados sin mostrar un di\u00e1logo de confirmaci\u00f3n, y con todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Modos: Indiferente Algoritmos Indiferente Resultado esperado: Se obtiene el PDF invalidado con la firma generada. Firma PAdES de un PDF certificado con la propiedad \u201cheadless\u201d Pruebas de firma PAdES de un PDF certificado con la propiedad \u201cheadless\u201d. Con la propiedad \u201callowSigningCertifiedPdfs\u201d el Cliente deber\u00eda mostrar un mensaje de confirmaci\u00f3n al usuario ya que el PDF resultado ser\u00eda inv\u00e1lido, pero al tener configurada la propiedad \u201cheadless\u201d no se puede mostrar este di\u00e1logo. Se realizar\u00e1 la prueba con las siguientes confinaciones: Certificados ANF Persona F\u00edsica CatCert Modos: Indiferente Algoritmos Indiferente Resultado esperado: Se lanza una excepci\u00f3n de tipo UnsupportedOperationException. Firma PAdES con contrase\u00f1a Pruebas de firma de un PDF protegido con contrase\u00f1a con todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Modos PAdES-BES PAdES-EPES PAdES-T (con sello de tiempo de CatCert) Algoritmos SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Se obtiene el PDF con una firma del tipo que fuese (BES, EPES, T) generada con el algoritmo de firma concreto. Firma PAdES con contrase\u00f1a incorrecta Pruebas de firma de un PDF protegido con contrase\u00f1a utilizando una contrase\u00f1a incorrecta y la propiedad \u201cheadless\u201d establecida a \u201ctrue\u201d. Al indicar program\u00e1ticamente una contrase\u00f1a incorrecta se le pregunta al usuario, mediante una ventana de di\u00e1logo, por la contrase\u00f1a del PDF. Sin embargo, al indicar la propiedad \u201cheadless\u201d no se puede mostrar ventanas por lo que directamente se lanza una excepci\u00f3n de tipo \u201cAOException\u201d al fallar la contrase\u00f1a indicada program\u00e1ticamente. Se realizar\u00e1 la prueba con las siguientes combinaciones: Certificados ANF Persona F\u00edsica CatCert Modos PAdES-BES PAdES-EPES PAdES-T (con sello de tiempo de CatCert) Algoritmos Indiferente Resultado esperado: Se lanzar\u00e1 una AOException. Cofirma de firmas PDF (Multifirma) Se prueba la cofirma de ficheros PDF firmados en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Modos PAdES-BES PAdES-EPES PAdES-T (con sello de tiempo de CatCert) Formatos de ficheros de firma PDF firmado PAdES-BES PDF firmado PAdES-EPES PDF firmado PAdES-T Algoritmos de firma SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas correctas en todos los casos generadas con el algoritmo de firma indicado. Es necesario abrir los ficheros con Adobe Reader para comprobaci\u00f3n manual. Cofirma de documentos PDF sin firmar Se prueba la cofirma de un documento PDF sin firmar en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Algoritmos de firma SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Firmas correctas en todos los casos generadas con el algoritmo de firma indicado. Es necesario abrir los ficheros con Adobe Reader para comprobaci\u00f3n manual. Contrafirma de ficheros Se prueba la contrafirma de ficheros PDF en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos PDF sin firmar PDF firmado PAdES-BES PDF firmado PAdES-EPES PDF firmado PAdES-T Cualquier documento no PDF Algoritmos de firma SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cada intento de contrafirma lanzar\u00e1 una excepci\u00f3n de tipo \u201cUnsupportedOperationException\u201d. Firma y cofirma de un fichero en formato no PDF Se prueba la firma y cofirma de ficheros no PDF en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos Cualquier documento no PDF Algoritmos de firma SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cada intento de firmar/cofirmar el fichero lanzar\u00e1 una excepci\u00f3n de tipo \u201cAOFormatFileException\u201d. Comprobaci\u00f3n de documento PDF Se prueba si un fichero es realmente un documento PDF con los siguientes ficheros: PDF PDF certificado PDF con contrase\u00f1a PDF firmado BES PDF firmado EPES PDF firmado T Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d. Comprobaci\u00f3n de documento no PDF Se prueba si un fichero es realmente un documento OOXML con los siguientes ficheros: Cualquier documento no PDF. Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d. Comprobaci\u00f3n de una firma PDF Prueba de reconocimiento de ficheros PDF firmados. Se probar\u00e1 con: Ficheros: PDF firmado PAdES-BES PDF firmado PAdES-EPES PDF firmado PAdES-T (con sello de tiempo CarCert) Algoritmos Indiferente Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d. Comprobaci\u00f3n de documentos distintos de PDF firmados Prueba de reconocimiento de ficheros PDF firmados. Se probar\u00e1 con: Ficheros: PDF sin firmar Cualquier documento no PDF Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d. Extracci\u00f3n de datos generales de firmas PDF Se extrae la informaci\u00f3n general de una firma OOXML con los siguientes ficheros: PDF firmado PAdES-BES PDF firmado PAdES-EPES PDF firmado PAdES-T Resultado esperado: Objeto AOSignInfo cuyo formato declarado es \u201cAdobe PDF\". Extracci\u00f3n de datos generales de documentos no PDF firmados Se extrae la informaci\u00f3n general de una firma PDF con los siguientes ficheros: PDF sin firmar Cualquier documento no PDF Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d. Extracci\u00f3n de datos firmados de firmas PDF Se extraen los datos firmados de los siguientes ficheros PDF firmados: PDF firmado PAdES-BES PDF firmado PAdES-EPES PDF firmado PAdES-T Resultado esperado: Se extraen los datos originalmente firmados. Extracci\u00f3n de datos firmados de ficheros no PDF firmados Se extraen los datos firmados de los siguientes ficheros: PDF no firmado Cualquier documento no PDF Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d. Obtenci\u00f3n de la estructura de firmantes de PDF firmados Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: PDF firmado PAdES-BES PDF cofirmado PAdES-BES PDF firmado PAdES-EPES PDF cofirmado PAdES-EPES PDF firmado PAdES-T PDF cofirmado PAdES-T Resultado esperado: Se obtiene el \u00e1rbol de firmas correspondiente a cada documento. Obtenci\u00f3n de la estructura de firmantes de ficheros PDF sin firmar y no PDF Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: PDF sin firmar Cualquier documento no PDF Resultado esperado: Se lanza una excepci\u00f3n de tipo \u201cAOInvalidFormatException\u201d. Prueba espec\u00edfica de firma seg\u00fan los casos de pruebas ETSI PAdES PlugTest Prueba de firma de documentos PDF seg\u00fan los casos de prueba ETSI PAdES del PlugTest con las siguientes configuraciones: Certificado espec\u00edfico ETSI Resultado esperado: Se obtiene el PDF firmado. Afirma-crypto-xades Pruebas unitarias Firma XAdES-BES Detached Se prueba la firma XAdES Detached en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos Texto plano XML Otro formato Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado. Si el modo configurado era impl\u00edcito, los datos estar\u00e1n contenidos en la firma. Firma XAdES-BES Enveloping Se prueba la firma XAdES Enveloping en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos Texto plano XML Otro formato Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado. Si el modo configurado era impl\u00edcito, los datos estar\u00e1n contenidos en la firma. Firma XAdES-BES Enveloped Se prueba la firma XAdES Enveloped en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos XML Modos Impl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado. Firma XAdES-BES Enveloped de documentos no XML Se prueba la firma XAdES Enveloped en todas las combinaciones posibles de los siguientes elementos: Formatos de ficheros de datos Fichero plano Fichero binario Modos Impl\u00edcito Algoritmos de firma Indiferente Resultado esperado: Se lanza la excepci\u00f3n \u201cAOFormatFileException\u201d. Firma XAdES-BES Enveloped expl\u00edcita Se prueba la firma XAdES Enveloped en todas las combinaciones posibles de los siguientes elementos: Formatos de ficheros de datos XML Modos Expl\u00edcito Algoritmos de firma Indiferente Resultado esperado: Se lanza la excepci\u00f3n \u201cUnsupportedOperationException\u201d. Firma XAdES-EPES Detached Se prueba la firma XAdES-EPES Detached con la pol\u00edtica de firma de a AGE en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos Texto plano XML Otro formato Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado y la pol\u00edtica de firma declarada. Si el modo configurado era impl\u00edcito, los datos estar\u00e1n contenidos en la firma. Firma XAdES-EPES Enveloping Se prueba la firma XAdES-EPES Enveloping con la pol\u00edtica de firma de a AGE en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos Texto plano XML Otro formato Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado y la pol\u00edtica de firma declarada. Si el modo configurado era impl\u00edcito, los datos estar\u00e1n contenidos en la firma. Firma XAdES-EPES Enveloped Se prueba la firma XAdES-EPES Enveloped con la pol\u00edtica de firma de a AGE en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos XML Modos Impl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado y la pol\u00edtica de firma declarada. Cofirma XAdES Se prueba la cofirma de firmas XAdES, indicando el documento originalmente firmado, en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma XAdES-BES Detached Firma XAdES-BES Enveloping Firma XAdES-BES Enveloped Firma XAdES-EPES Detached Firma XAdES-EPES Enveloping Firma XAdES-EPES Enveloped Modos XAdES XAdES-BES XAdES-EPES Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas correctas en todos los casos generadas con el algoritmo indicado y siempre con la misma estructura de firma que la firma original (detached, enveloping o enveloped). Cofirma de ficheros Se prueba la cofirma de ficheros que no sean firmas XAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Ficheros de datos Fichero plano XML Fichero binario Firma XMLdSig Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOInvalidFormatException. Contrafirma de firma/cofirma XAdES Se prueba la contrafirma de firmas XAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma XAdES-BES Detached impl\u00edcita Firma XAdES-BES Detached expl\u00edcita Firma XAdES-EPES Detached impl\u00edcita Firma XAdES-EPES Detached expl\u00edcita Firma XAdES-BES Enveloping impl\u00edcita Firma XAdES-BES Enveloping expl\u00edcita Firma XAdES-EPES Enveloping impl\u00edcita Firma XAdES-EPES Enveloping expl\u00edcita Firma XAdES-BES Enveloped Firma XAdES-EPES Enveloped Cofirma XAdES Detached Cofirma XAdES Enveloping Cofirma XAdES Enveloped Modos XAdES XAdES-BES XAdES-EPES Nodos objetivo Todos los nodos hijos Todos los nodos Nodos determinados Nodos de firmantes determinados Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Contrafirmas correctas generadas con el algoritmo indicado, el modo XAdES y realizadas sobre los nodos especificado. Contrafirma de ficheros Se prueba la contrafirma de ficheros que no sean firma XAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Ficheros de datos Fichero plano XML Fichero binario Firma XMLdSig Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOInvalidFormatException. Comprobaci\u00f3n de documento v\u00e1lido para firma Se prueba si un fichero es v\u00e1lido para realizar una firma XAdES sobre \u00e9l. Se probar\u00e1 con: Ficheros de datos Fichero plano XML Fichero binario Firma XAdES Firma XMLdSig Resultado esperado: Siempre se devolver\u00e1 \u201ctrue\u201d. Comprobaci\u00f3n de firmas XAdES Se prueba si un fichero es realmente una firma XAdES. Se probar\u00e1 con los siguientes ficheros: Firma XAdES-BES Detached impl\u00edcita Firma XAdES-BES Detached explicita Firma XAdES-BES Enveloping impl\u00edcita Firma XAdES-BES Enveloped explicita Firma XAdES-BES Enveloping Firma XAdES-EPES Detached impl\u00edcita Firma XAdES-EPES Detached explicita Firma XAdES-EPES Enveloping impl\u00edcita Firma XAdES-EPES Enveloped explicita Firma XAdES-EPES Enveloping Cofirma XAdES-BES Cofirma XAdES-EPES Contrafirma XAdES-BES Contrafirma XAdES-EPES Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d. Comprobaci\u00f3n de firmas XAdES con ficheros no XAdES Se prueba si un fichero es realmente una firma XAdES. Se probar\u00e1 con los siguientes ficheros: Fichero plano XML Fichero binario Firma XMLdSig Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d. Extracci\u00f3n de datos generales de firmas XAdES Se extrae la informaci\u00f3n general de una firma XAdES con los siguientes ficheros: Firma XAdES-BES Detached impl\u00edcita Firma XAdES-BES Detached explicita Firma XAdES-BES Enveloping impl\u00edcita Firma XAdES-BES Enveloped explicita Firma XAdES-BES Enveloping Firma XAdES-EPES Detached impl\u00edcita Firma XAdES-EPES Detached explicita Firma XAdES-EPES Enveloping impl\u00edcita Firma XAdES-EPES Enveloped explicita Firma XAdES-EPES Enveloping Cofirma XAdES-BES Cofirma XAdES-EPES Contrafirma XAdES-BES Contrafirma XAdES-EPES Resultado esperado: Objeto AOSignInfo cuyo formato declarado es \u201cXAdES\" y la variante la correspondiente al fichero (Detached, Enveloping o Enveloped). Extracci\u00f3n de datos generales con ficheros no XAdES Se extrae la informaci\u00f3n general de una firma XAdES con los siguientes ficheros: Fichero plano XML Fichero binario Firma XMLdSig Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d. Extracci\u00f3n de datos firmados de firmas XAdES impl\u00edcita sobre XML Se extraen el XML firmado de los siguientes ficheros XAdES firmados: Firma XAdES-Detached impl\u00edcita de datos XML Cofirma XAdES-Detached impl\u00edcita de datos XML Contrafirma XAdES-Detached impl\u00edcita de datos XML Firma XAdES- Enveloping impl\u00edcita de datos XML Cofirma XAdES- Enveloping impl\u00edcita de datos XML Contrafirma XAdES- Enveloping impl\u00edcita de datos XML Firma XAdES-Enveloped Cofirma XAdES- Enveloped Contrafirma XAdES- Enveloped Resultado esperado: Se extrae el XML originalmente firmado. Extracci\u00f3n de datos firmados de firmas XAdES impl\u00edcitas sobre datos binarios Se extraen los datos originalmente firmados de los siguientes ficheros XAdES firmados: Firma XAdES-Detached impl\u00edcita de datos binarios Cofirma XAdES-Detached impl\u00edcita de datos binarios Contrafirma XAdES-Detached impl\u00edcita de datos binarios Firma XAdES- Enveloping impl\u00edcita impl\u00edcita de datos binarios Cofirma XAdES- Enveloping impl\u00edcita de datos binarios Contrafirma XAdES- Enveloping impl\u00edcita de datos binarios Resultado esperado: Se extraen los datos binarios originalmente firmados. Extracci\u00f3n de datos firmados de firmas XAdES expl\u00edcitas Se extraen los datos originalmente firmados de los siguientes ficheros XAdES firmados: Firma XAdES-Detached expl\u00edcita Cofirma XAdES-Detached expl\u00edcita Contrafirma XAdES-Detached expl\u00edcita Firma XAdES- Enveloping expl\u00edcita Cofirma XAdES- Enveloping expl\u00edcita Contrafirma XAdES- Enveloping expl\u00edcita Resultado esperado: Se extrae la huella digital de los datos originalmente firmados. Extracci\u00f3n de datos firmados de ficheros no XAdES Se extraen los datos firmados de los siguientes ficheros: Fichero plano XML Fichero binario Firma XMLdSig Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d. Obtenci\u00f3n de la estructura de firmantes de firmas XAdES Se extrae el \u00e1rbol de firmantes de ficheros del siguiente tipo: Firma XAdES Detached impl\u00edcita Firma XAdES Detached explicita Firma XAdES Enveloping impl\u00edcita Firma XAdES Enveloped explicita Firma XAdES Enveloping Cofirma XAdES Contrafirma XAdES Resultado esperado: Se obtiene el \u00e1rbol de firmas correspondiente a cada documento. Obtenci\u00f3n de la estructura de firmantes de ficheros no XAdES Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: Fichero plano XML Fichero binario Firma XMLdSig Resultado esperado: Se lanza una excepci\u00f3n de tipo \u201cAOInvalidFormatException\u201d. Generaci\u00f3n de firmas XAdES sin la cadena de certificaci\u00f3n completa (Ticket 209544) Se generan firmas XAdES con la propiedad \u201cincludeOnlySignningCertificate\u201d configurada a \u201ctrue\u201d. Los tipos de firmas generados son: XAdES-BES Detached XAdES-BES Enveloping XAdES-BES Enveloped Resultado esperado: Se obtiene una firma s\u00f3lo con el certificado firmante. Generaci\u00f3n de cofirmas XAdES sin la cadena de certificaci\u00f3n completa (Ticket 209544) Se generan cofirmas XAdES con la propiedad \u201cincludeOnlySignningCertificate\u201d configurada a \u201ctrue\u201d. Los tipos de firmas generados son: XAdES-BES Detached XAdES-BES Enveloping XAdES-BES Enveloped Resultado esperado: Se obtiene una cofirma s\u00f3lo con el certificado firmante. Generaci\u00f3n de contrafirmas XAdES sin la cadena de certificaci\u00f3n completa (Ticket 209544) Se generan contrafirmas XAdES con la propiedad \u201cincludeOnlySignningCertificate\u201d configurada a \u201ctrue\u201d. Los tipos de firmas generados son: XAdES-BES Detached XAdES-BES Enveloping XAdES-BES Enveloped Los nodos objetivos son: Todos los nodos. Resultado esperado: Se obtiene una contrafirma s\u00f3lo con el certificado firmante. Applet Cliente @firma Pruebas funcionales de usuarios finales Entorno contemplados en las pruebas Las pruebas funcionales de usuario final se realizan en los siguientes entornos: Sistemas Operativos Windows 7 64 bits Windows 7 32 bits Windows XP 32 bits Mac OS X Lion (64 bits) Ubuntu 32 bits Navegadores Web Internet Explorer 9 (\u00fanicamente Windows 7) Internet Explorer 9 64 bits (\u00fanicamente Windows 7) Internet Explorer 8 (\u00fanicamente Windows XP) Mozilla Firefox 3.6 Mozilla Firefox 12 Apple Safari 5.1 (excepto Linux) Google Chrome 19 Opera 11 (excepto Mac OS X) Entorno de ejecuci\u00f3n de Java (Siempre en la misma arquitectura que el navegador) 6u32 32 bits 6u32 64 bits 7u4 32 bits (excepto Mac OS X) 7u4 64 bits (excepto Mac OS X) Operaciones probadas Carga del Applet Se comprueba la correcta carga del Applet mediante las funciones est\u00e1ndar de carga. Prueba de firma Se firma un fichero (sin establecerlo, usando di\u00e1logo gr\u00e1fico del Applet) usando todos los formatos de firma posibles (CAdES, XAdES, OOXML, ODF, PAdES, CMS, XMLDSig). La prueba se realiza primero con un certificado software y se repite con un DNIe. Esta prueba permite asegurar una correcta carga del almac\u00e9n de claves (incluyendo la agregaci\u00f3n de m\u00f3dulos PKCS#11 en Mozilla) y la correcta incorporaci\u00f3n de todas los m\u00f3dulos relacionados. Prueba de cofirma En base a ficheros de prueba (los mismos de las pruebas unitarias), se repiten las mismas pruebas que en la firma, solo que indicando una cofirma. La prueba se repite con contrafirma (cambiando el conjunto de ficheros de prueba). Prueba de firma masiva Prueba b\u00e1sica de firma de directorios. Usando un conjunto de ficheros y carpetas de prueba que replican las situaciones menos habituales. Prueba b\u00e1sica de firma masiva program\u00e1tica. Usando un conjunto de ficheros y carpetas de prueba que replican las situaciones menos habituales. Prueba de firma Web Prueba b\u00e1sica de firma Web. Prueba de cifrado Cifrado y descifrado de ficheros usando todos los algoritmos posibles, tanto basados en claves como basados en contrase\u00f1as. Pruebas de sobre digital Ensobrado y apertura de sobres usando todos los formatos soportados de sobre. Prueba espec\u00edfica de lectura de claves p\u00fablicas: Desde LDAP Desde certificado en disco (CER/BER/PEM) Desde la libreta de direcciones de Windows (\u00fanicamente en Windows) Pruebas de almacenes de claves y certificados Pruebas de establecimiento forzado de almac\u00e9n de claves (pasando del nativo a PKCS#12). La operaci\u00f3n de prueba concluye con una firma para comprobar la correcci\u00f3n del cambio.","title":"CF plan pruebas"},{"location":"markdown_strict/CF_plan-pruebas/#definicion-del-alcance-de-las-pruebas","text":"Las pruebas son pr\u00e1cticas que se realizan en diversas fases de un proyecto con el fin de verificar: El correcto funcionamiento de los componentes del sistema. El funcionamiento correcto de las interacciones que se producen entre los subsistemas que componen el proyecto. Que el sistema cumple con el funcionamiento esperado. Que cambios en uno o m\u00e1s componentes no introducen comportamientos no deseados o errores evitables. El Cliente @firma es un applet y debe ser ejecutado dentro de un navegador Web e integrado en un flujo de trabajo. Esta particularidad dificulta la automatizaci\u00f3n de las pruebas y obliga a la prueba manual del aplicativo. Las funcionalidades de alto nivel objetivo de las pruebas ser\u00e1n: Firma electr\u00f3nica: Formatos: CAdES, XAdES, PAdES, CMS, XMLdSig, ODF y OOXML. Algoritmos: MD2withRSA, MD5withRSA, SHA1withRSA, SHA256withRSA, SHA384withRSA, SHA512withRSA. Modos: Impl\u00edcito y Expl\u00edcito. Multifirmas: Cofirmas. Contrafirmas: Todos los nodos hojas. Todos los nodos del \u00e1rbol. Nodos seleccionados. Nodos de firmantes seleccionados. Sobres electr\u00f3nicos: Cifrados. Envueltos. Firmados y envueltos. Autenticados y envueltos. Desenvoltura de sobres. Cifrado sim\u00e9trico: Con clave: AES, Alleged RC4, Blowfish, 3DES, DES y RC2. Con contrase\u00f1a: SHA1 con 3DES, SHA1 con RC2 y MD5 con DES. Descifrado sim\u00e9trico: Con clave: AES, Alleged RC4, Blowfish, 3DES, DES y RC2. Con contrase\u00f1a: SHA1 con 3DES, SHA1 con RC2 y MD5 con DES. Adicionalmente, existen m\u00faltiples funciones para la configuraci\u00f3n de cada una de las funcionalidades principales. As\u00ed mismo, el tipo de las entradas que reciban cada una de las funciones principales tambi\u00e9n determinar\u00e1n su comportamiento. Debido a la imposibilidad de realizar la prueba de todas estas funcionalidades sobre cada una de las combinaciones de entorno compatibles con el Cliente (distintas versiones y arquitecturas de sistema operativo, JVM y navegador web) se determinar\u00e1 un conjunto significativo de entornos, acotado por la compatibilidad entre ellos, sobre los que realizar las pruebas.","title":"Definici\u00f3n del alcance de las pruebas"},{"location":"markdown_strict/CF_plan-pruebas/#pruebas","text":"","title":"Pruebas"},{"location":"markdown_strict/CF_plan-pruebas/#modulos","text":"","title":"M\u00f3dulos"},{"location":"markdown_strict/CF_plan-pruebas/#afirma-core","text":"","title":"Afirma-core"},{"location":"markdown_strict/CF_plan-pruebas/#pruebas-unitarias","text":"","title":"Pruebas unitarias"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-version-de-bouncycastle","text":"Se busca una versi\u00f3n de BouncyCastle en el path del sistema del usuario. Si se encuentra, fallar\u00e1 el test ya que el cliente incorpora su propia versi\u00f3n y cualquier otra podr\u00eda interferir en su funcionamiento. Resultado esperado: Se obtendr\u00e1 null ya que no debe encontrarse ninguna versi\u00f3n de BouncyCastle la path del sistema.","title":"Comprobaci\u00f3n de versi\u00f3n de BouncyCastle"},{"location":"markdown_strict/CF_plan-pruebas/#prueba-de-la-extraccion-del-nombre-comun-en-nombres-x500","text":"Se extrae el nombre com\u00fan de m\u00faltiples cadenas con formato X.500 y similares. Resultado esperado: El nombre com\u00fan asociado al nombre X.500 asociado, la misma cadena de entrada o null si la entrada fue nula.","title":"Prueba de la extracci\u00f3n del nombre com\u00fan en nombres X.500"},{"location":"markdown_strict/CF_plan-pruebas/#deteccion-de-mimetype","text":"Se detecta el MimeType de los siguientes tipos de documento: Texto plano XML PDF DOC XSL PPT MPP VSD Resultado esperado: El MimeType correcto de cada documento.","title":"Detecci\u00f3n de MimeType"},{"location":"markdown_strict/CF_plan-pruebas/#toma-de-dato-datos-del-registro-de-windows","text":"Se extrae del registro de Windows el path del directorio ra\u00edz del sistema. Esta prueba s\u00f3lo se realiza en sistemas Microsoft Windows. Resultado esperado: La ruta del directorio ra\u00edz del sistema.","title":"Toma de dato datos del registro de Windows"},{"location":"markdown_strict/CF_plan-pruebas/#afirma-core-keystores","text":"","title":"Afirma-core-keystores"},{"location":"markdown_strict/CF_plan-pruebas/#pruebas-unitarias_1","text":"","title":"Pruebas unitarias"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-los-alias-y-los-certificados-de-un-almacen-pkcs12","text":"Se carga un almac\u00e9n de claves PKCS#12 y se extraen los alias y los certificados contenidos. Resultado esperado: Alias del almac\u00e9n y los certificados asociados a los mismos.","title":"Extracci\u00f3n de los alias y los certificados de un almac\u00e9n PKCS#12"},{"location":"markdown_strict/CF_plan-pruebas/#acceso-al-keychain-del-sistema-en-macos-x","text":"En sistemas MacOS X se carga el listado de alias del almac\u00e9n del sistema y se extraen los datos de los certificados contenidos. Si falla el proceso se lanza el error. Resultado esperado: En Mac OS X, alias del almac\u00e9n y los certificados asociados a los mismos. En el resto de sistema, el test no genera resultado.","title":"Acceso al KeyChain del sistema en MacOS X"},{"location":"markdown_strict/CF_plan-pruebas/#acceso-a-un-keychain-en-fichero-en-macos-x","text":"En sistemas MacOS X se carga el listado de alias de un almac\u00e9n KeyChain en fichero y se extraen los datos de los certificados contenidos. Si falla el proceso se lanza el error. Resultado esperado: En Mac OS X, alias del almac\u00e9n y los certificados asociados a los mismos. En el resto de sistemas, el test no genera resultado.","title":"Acceso a un KeyChain en fichero en MacOS X"},{"location":"markdown_strict/CF_plan-pruebas/#obtencion-de-nombres-significativos-de-los-certificados-del-almacen-de-microsoft-windows","text":"En sistemas Microsoft Windows se carga el listado de alias del almac\u00e9n del sistema y se extraen los datos de los certificados contenidos. Si falla el proceso se lanza el error. Resultado esperado: En Microsoft Windows, si el certificado no ten\u00eda alias o este se corresponde con un nombre X.500, se utilizar\u00e1 el CN del Subject o la OU si este no exist\u00eda. En otros casos, se devolver\u00e1 el propio alias. En el resto de sistemas, el test no genera resultado.","title":"Obtenci\u00f3n de nombres significativos de los certificados del almac\u00e9n de Microsoft Windows"},{"location":"markdown_strict/CF_plan-pruebas/#afirma-core-massive","text":"","title":"Afirma-core-massive"},{"location":"markdown_strict/CF_plan-pruebas/#pruebas-unitarias_2","text":"Las pruebas del m\u00f3dulo de firma masiva se realizar\u00e1n sobre las funcionalidades de firma masiva de directorios y firma masiva program\u00e1tica. Debido a la naturaleza del proceso de firma masiva de directorios, las pruebas unitarias correspondientes a este proceso se ejecutar\u00e1n fuera del proceso de integraci\u00f3n continua.","title":"Pruebas unitarias"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-de-directorios-con-formatos-de-firma-genericos","text":"Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos CMS CAdES XAdES Detached XAdES Enveloping XMLDSig Detached XMLDSig Enveloping Modos Impl\u00edcito Expl\u00edcito Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario XML PDF ODT DOCX Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros del directorio. El nombre de las firmas generadas incorporar\u00e1n la part\u00edcula \u201c.sign\u201d.","title":"Firma masiva de directorios con formatos de firma gen\u00e9ricos"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-de-directorios-con-formatos-de-firma-xml-enveloped-y-datos-xml","text":"Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos XAdES Enveloped XMLDSig Enveloped Modos Impl\u00edcito Los ficheros presentes en el directorio ser\u00e1n de tipo: XML Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros del directorio. El nombre de las firmas generadas incorporar\u00e1n la part\u00edcula \u201c.sign\u201d.","title":"Firma masiva de directorios con formatos de firma XML enveloped y datos XML"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-de-directorios-con-formatos-de-firma-xml-enveloped-y-datos-no-xml","text":"Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos XAdES Enveloped XMLDSig Enveloped Modos Impl\u00edcito Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario PDF ODT DOCX Resultado esperado: No se generar\u00e1 ninguna firma y los errores quedar\u00e1n indicados en el fichero de log generado durante el proceso de firma masiva.","title":"Firma masiva de directorios con formatos de firma XML enveloped y datos no XML"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-de-directorios-con-formatos-de-firma-xml-enveloped-y-modo-explicito","text":"Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos XAdES Enveloped XMLDSig Enveloped Modos Expl\u00edcito Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario XML PDF ODT DOCX Resultado esperado: No se generar\u00e1 ninguna firma y los errores quedar\u00e1n indicados en el fichero de log generado durante el proceso de firma masiva.","title":"Firma masiva de directorios con formatos de firma XML enveloped y modo expl\u00edcito"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-de-directorios-con-formato-de-firma-pades-y-documentos-pdf","text":"Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos PAdES Los ficheros presentes en el directorio ser\u00e1n de tipo: PDF Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros del directorio. El nombre de las firmas generadas incorporar\u00e1n la part\u00edcula \u201c.sign\u201d.","title":"Firma masiva de directorios con formato de firma PAdES y documentos PDF"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-de-directorios-con-formato-de-firma-pades-y-ficheros-no-pdf","text":"Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos PAdES Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario XML ODT DOCX Resultado esperado: No se generar\u00e1 ninguna firma y los errores quedar\u00e1n indicados en el fichero de log generado durante el proceso de firma masiva.","title":"Firma masiva de directorios con formato de firma PAdES y ficheros no PDF"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-de-directorios-con-formato-de-firma-odf-y-documentos-odf","text":"Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos ODF Los ficheros presentes en el directorio ser\u00e1n de tipo: ODF (ODT, ODS, ODP) Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros del directorio. El nombre de las firmas generadas incorporar\u00e1n la part\u00edcula \u201c.sign\u201d.","title":"Firma masiva de directorios con formato de firma ODF y documentos ODF"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-de-directorios-con-formato-de-firma-odf-y-ficheros-no-odf","text":"Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos ODF Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario XML PDF DOCX Resultado esperado: No se generar\u00e1 ninguna firma y los errores quedar\u00e1n indicados en el fichero de log generado durante el proceso de firma masiva.","title":"Firma masiva de directorios con formato de firma ODF y ficheros no ODF"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-de-directorios-con-formato-de-firma-ooxml-y-documentos-ooxml","text":"Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos OOXML Los ficheros presentes en el directorio ser\u00e1n de tipo: OOXML (DOCX, XLSX, PPTX) Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros del directorio. El nombre de las firmas generadas incorporar\u00e1n la part\u00edcula \u201c.sign\u201d.","title":"Firma masiva de directorios con formato de firma OOXML y documentos OOXML"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-de-directorios-con-formato-de-firma-ooxml-y-ficheros-no-ooxml","text":"Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de firma, para todas las combinaciones posibles de los siguientes elementos: Formatos OOXML Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario XML PDF ODT Resultado esperado: No se generar\u00e1 ninguna firma y los errores quedar\u00e1n indicados en el fichero de log generado durante el proceso de firma masiva.","title":"Firma masiva de directorios con formato de firma OOXML y ficheros no OOXML"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-masiva-de-directorios-sobre-firmas-con-el-indicador-para-conservar-el-formato-original","text":"Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de cofirma y la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Los ficheros presentes en el directorio ser\u00e1n de tipo: Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML Resultado esperado: Cofirmas correctas para cada configuraci\u00f3n indicada. Siendo el resultado siempre una cofirma generada con el mismo algoritmo utilizado en la firma original. El nombre de las firmas generadas incorporar\u00e1n la part\u00edcula \u201c.cosign\u201d.","title":"Cofirma masiva de directorios sobre firmas con el indicador para conservar el formato original"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-masiva-de-directorios-sobre-firmas-sin-el-indicador-para-conservar-el-formato-original","text":"Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de cofirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Los ficheros presentes en el directorio ser\u00e1n de tipo: Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML Resultado esperado: Se generar\u00e1 una cofirma correcta para cada configuraci\u00f3n indicada cuando el formato en cuesti\u00f3n permita la cofirma del tipo de documento especificado. En caso contrario, se generar\u00e1 un error en el log resultado de la operaci\u00f3n. El nombre de las cofirmas generadas incorporar\u00e1n la part\u00edcula \u201c.cosign\u201d.","title":"Cofirma masiva de directorios sobre firmas sin el indicador para conservar el formato original"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-masiva-de-directorios-sobre-datos-sin-el-indicador-para-conservar-el-formato-original","text":"Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de cofirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario XML PDF ODT DOCX Resultado esperado: Se generar\u00e1 una cofirma correcta para cada configuraci\u00f3n indicada cuando el formato en cuesti\u00f3n permita la cofirma del tipo de firma especificado. En caso contrario, se generar\u00e1 un error en el log resultado de la operaci\u00f3n. El nombre de las cofirmas generadas incorporar\u00e1n la part\u00edcula \u201c.cosign\u201d.","title":"Cofirma masiva de directorios sobre datos sin el indicador para conservar el formato original"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-masiva-de-directorios-sobre-firmas-con-el-indicador-para-conservar-el-formato-original","text":"Se ejecuta el proceso de firma masiva de directorios habiendo configurado la operaci\u00f3n de contrafirma y la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Nodos objetivo Nodos hijos de firma Todos los nodos de firma Los ficheros presentes en el directorio ser\u00e1n de tipo: Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML Resultado esperado: Se generar\u00e1 una contrafirma correcta sobre los nodos objetivo para cada configuraci\u00f3n. La contrafirma siempre se generar\u00e1 en el mismo formato que la firma original. El nombre de las contrafirmas generadas incorporar\u00e1n la part\u00edcula \u201c.countersign\u201d.","title":"Contrafirma masiva de directorios sobre firmas con el indicador para conservar el formato original"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-masiva-de-directorios-sobre-firmas-sin-el-indicador-para-conservar-el-formato-original","text":"Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de contrafirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Nodos objetivo Nodos hijos de firma Todos los nodos de firma Los ficheros presentes en el directorio ser\u00e1n de tipo: Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML Resultado esperado: Se generar\u00e1 una contrafirma correcta sobre los nodos objetivo para cada configuraci\u00f3n indicada cuando el formato en cuesti\u00f3n permita la contrafirma del tipo de documento especificado. En caso contrario, se generar\u00e1 un error en el log resultado de la operaci\u00f3n. El nombre de las contrafirmas generadas incorporar\u00e1n la part\u00edcula \u201c.countersign\u201d.","title":"Contrafirma masiva de directorios sobre firmas sin el indicador para conservar el formato original"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-masiva-de-directorios-sobre-datos-sin-el-indicador-para-conservar-el-formato-original","text":"Se ejecuta el proceso de firma masiva de directorios, habiendo configurado la operaci\u00f3n de contrafirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Los ficheros presentes en el directorio ser\u00e1n de tipo: Binario XML PDF ODT DOCX Resultado esperado: No se generar\u00e1 ninguna contrafirma y los errores quedar\u00e1n indicados en el fichero de log generado durante el proceso de firma masiva.","title":"Contrafirma masiva de directorios sobre datos sin el indicador para conservar el formato original"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-programatica-con-formatos-de-firma-genericos","text":"Se ejecuta la operaci\u00f3n de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos CMS CAdES XAdES Detached XAdES Enveloping XMLDSig Detached XMLDSig Enveloping Modos Impl\u00edcito Expl\u00edcito Ficheros Binario XML PDF ODT DOCX A partir de: Ficheros Datos le\u00eddos de los ficheros Hash calculados de los ficheros Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros.","title":"Firma masiva program\u00e1tica con formatos de firma gen\u00e9ricos"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-programatica-con-formatos-de-firma-xml-enveloped-y-datos-xml","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos XAdES Enveloped XMLDSig Enveloped Modos Impl\u00edcito Ficheros XML A partir de: Ficheros Datos le\u00eddos de los ficheros Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros.","title":"Firma masiva program\u00e1tica con formatos de firma XML enveloped y datos XML"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-programatica-con-formatos-de-firma-xml-enveloped-a-partir-de-un-hash","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos XAdES Enveloped XMLDSig Enveloped Modos Impl\u00edcito Ficheros Binario XML PDF ODT DOCX A partir de: Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva.","title":"Firma masiva program\u00e1tica con formatos de firma XML enveloped a partir de un hash"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-programatica-con-formatos-de-firma-xml-enveloped-y-datos-no-xml","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos XAdES Enveloped XMLDSig Enveloped Modos Impl\u00edcito Ficheros Binario PDF ODT DOCX A partir de: Ficheros Datos le\u00eddos de los ficheros Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva.","title":"Firma masiva program\u00e1tica con formatos de firma XML enveloped y datos no XML"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-programatica-con-formatos-de-firma-xml-enveloped-y-modo-explicito","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos XAdES Enveloped XMLDSig Enveloped Modos Expl\u00edcito Ficheros Binario XML PDF ODT DOCX A partir de: Ficheros Datos le\u00eddos de los ficheros Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva.","title":"Firma masiva program\u00e1tica con formatos de firma XML enveloped y modo expl\u00edcito"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-programatica-con-formato-de-firma-pades-y-documentos-pdf","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos PAdES Ficheros PDF A partir de: Ficheros Datos le\u00eddos de los ficheros Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros.","title":"Firma masiva program\u00e1tica con formato de firma PAdES y documentos PDF"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-programatica-con-formato-de-firma-pades-y-la-huella-digital-de-documentos-pdf","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos PAdES Ficheros PDF A partir de: Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva.","title":"Firma masiva program\u00e1tica con formato de firma PAdES y la huella digital de documentos PDF"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-programatica-con-formato-de-firma-pades-y-ficheros-no-pdf","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos PAdES Ficheros Binario XML ODT DOCX A partir de: Ficheros Datos le\u00eddos de los ficheros Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva.","title":"Firma masiva program\u00e1tica con formato de firma PAdES y ficheros no PDF"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-programatica-con-formato-de-firma-odf-y-documentos-odf","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos ODF Ficheros ODF (ODT, ODS, ODP) A partir de: Ficheros Datos le\u00eddos de los ficheros Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros.","title":"Firma masiva program\u00e1tica con formato de firma ODF y documentos ODF"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-programatica-con-formato-de-firma-odf-y-la-huella-digital-de-documentos-odf","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos ODF Ficheros ODF A partir de: Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva.","title":"Firma masiva program\u00e1tica con formato de firma ODF y la huella digital de documentos ODF"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-programatica-con-formato-de-firma-odf-y-ficheros-no-odf","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos ODF Ficheros Binario XML PDF DOCX A partir de: Ficheros Datos le\u00eddos de los ficheros Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva.","title":"Firma masiva program\u00e1tica con formato de firma ODF y ficheros no ODF"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-programatica-con-formato-de-firma-ooxml-y-documentos-ooxml","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos OOXML Ficheros OOXML A partir de: Ficheros Datos le\u00eddos de los ficheros Resultado esperado: Firmas correctas para cada configuraci\u00f3n indicada por cada uno de los ficheros.","title":"Firma masiva program\u00e1tica con formato de firma OOXML y documentos OOXML"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-programatica-con-formato-de-firma-ooxml-y-la-huella-digital-de-documentos-ooxml","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos OOXML Ficheros OOXML (DOCX, XSLX, PPTX) A partir de: Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva.","title":"Firma masiva program\u00e1tica con formato de firma OOXML y la huella digital de documentos OOXML"},{"location":"markdown_strict/CF_plan-pruebas/#firma-masiva-programatica-con-formato-de-firma-ooxml-y-ficheros-no-ooxml","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de firma para todas las combinaciones posibles de los siguientes elementos: Formatos OOXML Ficheros Binario XML PDF ODT A partir de: Ficheros Datos le\u00eddos de los ficheros Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva.","title":"Firma masiva program\u00e1tica con formato de firma OOXML y ficheros no OOXML"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-masiva-programatica-sobre-firmas-con-el-indicador-para-conservar-el-formato-original","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de cofirma y la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Ficheros Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML A partir de: Ficheros Datos le\u00eddos de los ficheros Resultado esperado: Cofirmas correctas para cada configuraci\u00f3n indicada. Siendo el resultado siempre una cofirma generada con el mismo algoritmo utilizado en la firma original.","title":"Cofirma masiva program\u00e1tica sobre firmas con el indicador para conservar el formato original"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-masiva-programatica-sobre-firmas-sin-el-indicador-para-conservar-el-formato-original","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de cofirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Ficheros Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML A partir de: Ficheros Datos le\u00eddos de los ficheros Resultado esperado: Se generar\u00e1 una cofirma correcta para cada configuraci\u00f3n indicada cuando el formato en cuesti\u00f3n permita la cofirma del tipo de documento especificado. En caso contrario, se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva.","title":"Cofirma masiva program\u00e1tica sobre firmas sin el indicador para conservar el formato original"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-masiva-programatica-sobre-datos-sin-el-indicador-para-conservar-el-formato-original","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de cofirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Ficheros Binario XML PDF ODT DOCX A partir de: Ficheros Datos le\u00eddos de los ficheros Hash calculados de los ficheros Resultado esperado: Se generar\u00e1 una cofirma correcta para cada configuraci\u00f3n indicada cuando el formato en cuesti\u00f3n permita la cofirma del tipo de firma especificado. En caso contrario, se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva.","title":"Cofirma masiva program\u00e1tica sobre datos sin el indicador para conservar el formato original"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-masiva-programatica-a-partir-de-huella-digital","text":"Se ejecuta el proceso de firma masiva program\u00e1tica a partir de huellas digitales habiendo configurado la operaci\u00f3n de cofirma. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Ficheros Cualquiera A partir de: Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva.","title":"Cofirma masiva program\u00e1tica a partir de huella digital"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-masiva-programatica-sobre-firmas-con-el-indicador-para-conservar-el-formato-original","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de contrafirma y la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Ficheros Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML A partir de: Ficheros Datos le\u00eddos de los ficheros Nodos objetivo Nodos hijos de firma Todos los nodos de firma Resultado esperado: Se generar\u00e1 una contrafirma correcta para cada configuraci\u00f3n indicada sobre los nodos indicados, generada siempre en el mismo formato que la firma original.","title":"Contrafirma masiva program\u00e1tica sobre firmas con el indicador para conservar el formato original"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-masiva-programatica-sobre-firmas-sin-el-indicador-para-conservar-el-formato-original","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de contrafirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Modos Impl\u00edcito Expl\u00edcito Ficheros Firma CAdES Firma CMS Firma XAdES Detached Firma XAdES Enveloping Firma XAdES Enveloped Firma XMLdSig Detached Firma XMLdSig Enveloping Firma XMLdSig Enveloped Firma PAdES Firma ODF Firma OOXML A partir de: Ficheros Datos le\u00eddos de los ficheros Nodos objetivo Nodos hijos de firma Todos los nodos de firma Resultado esperado: Se generar\u00e1 una contrafirma correcta sobre los nodos de firma indicados para cada configuraci\u00f3n cuando el formato en cuesti\u00f3n permita la contrafirma del tipo de documento especificado. En caso contrario, se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva.","title":"Contrafirma masiva program\u00e1tica sobre firmas sin el indicador para conservar el formato original"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-masiva-programatica-a-partir-de-huella-digital","text":"Se ejecuta el proceso de firma masiva program\u00e1tica, habiendo configurado la operaci\u00f3n de contrafirma, a partir de huellas digitales. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Ficheros Cualquier A partir de: Hash calculados de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva.","title":"Contrafirma masiva program\u00e1tica a partir de huella digital"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-masiva-programatica-sobre-datos-sin-el-indicador-para-conservar-el-formato-original","text":"Se ejecuta el proceso de firma masiva program\u00e1tica habiendo configurado la operaci\u00f3n de contrafirma y no la propiedad para que se conserve el formato original que se utilizase en las firmas. Se realiza la prueba con todas las combinaciones posibles de los siguientes elementos: Formatos por defecto CMS CAdES XAdES Detached XAdES Enveloping XAdES Enveloped XMLDSig Detached XMLDSig Enveloping XMLDSig Enveloped PAdES ODF OOXML Ficheros Binario XML PDF ODT DOCX A partir de: Ficheros Datos le\u00eddos de los ficheros Resultado esperado: Se obtiene null y se registra el error de la operaci\u00f3n en el log del proceso de firma masiva.","title":"Contrafirma masiva program\u00e1tica sobre datos sin el indicador para conservar el formato original"},{"location":"markdown_strict/CF_plan-pruebas/#afirma-crypto-cades","text":"","title":"Afirma-crypto-cades"},{"location":"markdown_strict/CF_plan-pruebas/#pruebas-unitarias_3","text":"","title":"Pruebas unitarias"},{"location":"markdown_strict/CF_plan-pruebas/#firma-cades-bes","text":"Se prueba la firma CAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos Texto plano XML Otro formato Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado. Si el modo configurado era impl\u00edcito, los datos estar\u00e1n contenidos en la firma y si el algoritmo de firma es SHA2 la firma tendr\u00e1 el atributo SigningCertificateV2.","title":"Firma CAdES-BES"},{"location":"markdown_strict/CF_plan-pruebas/#firma-cades-epes","text":"Se prueba la firma CAdES con la pol\u00edtica de firma de a AGE en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos Texto plano XML Otro formato Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado y la pol\u00edtica de firma declarada. Si el modo configurado era impl\u00edcito, los datos estar\u00e1n contenidos en la firma y si el algoritmo de firma es SHA2 la firma tendr\u00e1 el atributo SigningCertificateV2.","title":"Firma CAdES-EPES"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-cades-con-documento-original","text":"Se prueba la cofirma de firmas CAdES, indicando el documento originalmente firmado, en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma CAdES-BES Firma CAdES-EPES Modos CAdES CAdES-BES CAdES-EPES Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas correctas en todos los casos generadas con el algoritmo indicado y el modo CAdES. El documento de firma final incluir\u00e1 o no el documento firmado seg\u00fan el modo indicado en la cofirma.","title":"Cofirma CAdES con documento original"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-cades-sin-documento-original-sobre-cades-implicita","text":"Se prueba la cofirma de firmas CAdES impl\u00edcitas sin indicar el documento originalmente firmado. Ya que no se indica el documento firmado, se generar\u00e1 la cofirma a partir de los datos contenidos en la firma original. Se probar\u00e1n todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma CAdES-BES impl\u00edcita Firma CAdES-EPES impl\u00edcita Modos CAdES CAdES-BES CAdES-EPES Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas correctas en todos los casos generadas con el algoritmo indicado y el modo CAdES. El documento de firma final incluir\u00e1 o no el documento firmado seg\u00fan el modo indicado en la cofirma.","title":"Cofirma CAdES sin documento original sobre CAdES impl\u00edcita"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-cades-sin-documento-original-sobre-cades-explicita-mismo-algoritmo","text":"Se prueba la cofirma de firmas CAdES expl\u00edcitas sin indicar el documento originalmente firmado. Ya que no se indica el documento firmado y este no est\u00e1 contenido en la firma, s\u00f3lo ser\u00e1 posible generar las firmas si ya disponemos del hash del documento firmado generado con el mismo algoritmo que queremos utiliza en la cofirma. Se probar\u00e1n todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma CAdES-BES expl\u00edcita Firma CAdES-EPES expl\u00edcita Modos CAdES CAdES-BES CAdES-EPES Modos Indiferente Algoritmos de firma El mismo que el de la firma Resultado esperado: Cofirmas CAdES expl\u00edcitas correctas generadas en todos los casos con el algoritmo utilizado en la firma. El documento de firma final incluir\u00e1 o no el documento firmado seg\u00fan el modo indicado en la cofirma.","title":"Cofirma CAdES sin documento original sobre CAdES expl\u00edcita (mismo algoritmo)"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-cades-sin-documento-original-sobre-cades-explicita-distinto-algoritmo","text":"Se prueba la cofirma de firmas CAdES expl\u00edcitas sin indicar el documento originalmente firmado. Ya que no se indica el documento firmado y este no est\u00e1 contenido en la firma, s\u00f3lo ser\u00e1 posible generar las firmas si ya disponemos del hash del documento firmado generado con el mismo algoritmo que queremos utiliza en la cofirma. Se probar\u00e1n todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma CAdES-BES expl\u00edcita Firma CAdES-EPES expl\u00edcita Modos CAdES CAdES-BES CAdES-EPES Modos Indiferente Algoritmos de firma Distinto al de la firma Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOException indicando que no se ha podido generar por no encontrar ni los datos ni una huella digital v\u00e1lida en la firma.","title":"Cofirma CAdES sin documento original sobre CAdES expl\u00edcita (distinto algoritmo)"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-de-ficheros","text":"Se prueba la cofirma de ficheros que no sean firma CAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Ficheros de datos Cualquier no CAdES Firma CMS Algoritmos de firma Indiferente Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOException informando que ocurri\u00f3 un error durante la operaci\u00f3n.","title":"Cofirma de ficheros"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-de-firmacofirma-cades","text":"Se prueba la contrafirma de firmas CAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma CAdES impl\u00edcita Firma CAdES expl\u00edcita Cofirma CAdES Modos CAdES CAdES-BES CAdES-EPES Nodos objetivo Todos los nodos hijos Todos los nodos Nodos determinados Nodos de firmantes determinados Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Contrafirmas correctas generadas con el algoritmo indicado, el modo CAdES y realizadas sobre los nodos especificado. El documento de firma final incluir\u00e1 o no el documento firmado si lo inclu\u00eda ya la firma contrafirmada.","title":"Contrafirma de firma/cofirma CAdES"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-de-ficheros","text":"Se prueba la contrafirma de ficheros que no sean firma CAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Ficheros de datos Fichero plano XML Fichero binario Firma CMS Algoritmos de firma Indiferente Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOException informando que ocurri\u00f3 un error durante la operaci\u00f3n.","title":"Contrafirma de ficheros"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-documento-valido-para-firma","text":"Se prueba si un fichero es v\u00e1lido para realizar una firma CAdES sobre \u00e9l. Se probar\u00e1 con: Ficheros de datos Fichero plano XML Fichero binario Firma CAdES Firma CMS Resultado esperado: Siempre se devolver\u00e1 \u201ctrue\u201d.","title":"Comprobaci\u00f3n de documento v\u00e1lido para firma"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-firmas-cades","text":"Se prueba si un fichero es realmente una firma CAdES. Se probar\u00e1 con los siguientes ficheros: Firma CAdES-BES impl\u00edcita Firma CAdES-BES explicita Firma CAdES-EPES Cofirma CAdES-BES Cofirma CAdES-EPES Contrafirma CAdES-BES Contrafirma CAdES-EPES Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d.","title":"Comprobaci\u00f3n de firmas CAdES"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-firmas-cades-con-ficheros-no-cades","text":"Se prueba si un fichero es realmente una firma CAdES. Se probar\u00e1 con los siguientes ficheros: Fichero plano XML Fichero binario Firma CMS Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d.","title":"Comprobaci\u00f3n de firmas CAdES con ficheros no CAdES"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-generales-de-firmas-cades","text":"Se extrae la informaci\u00f3n general de una firma CAdES con los siguientes ficheros: Firma CAdES-BES impl\u00edcita Firma CAdES-BES explicita Firma CAdES-EPES Cofirma CAdES-BES Cofirma CAdES-EPES Contrafirma CAdES-BES Contrafirma CAdES-EPES Resultado esperado: Objeto AOSignInfo cuyo formato declarado es \u201cCAdES\".","title":"Extracci\u00f3n de datos generales de firmas CAdES"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-generales-con-ficheros-no-cades","text":"Se extrae la informaci\u00f3n general de una firma CAdES con los siguientes ficheros: Fichero plano XML Fichero binario Firma CMS Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d.","title":"Extracci\u00f3n de datos generales con ficheros no CAdES"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-firmas-cades-implicita","text":"Se extraen los datos firmados de los siguientes ficheros CAdES firmados: Firma CAdES-BES impl\u00edcita Firma CAdES-EPES impl\u00edcita Cofirma CAdES-BES impl\u00edcita Cofirma CAdES-EPES impl\u00edcita Contrafirma CAdES-BES impl\u00edcita Contrafirma CAdES-EPES impl\u00edcita Resultado esperado: Se extraen los datos originalmente firmados.","title":"Extracci\u00f3n de datos firmados de firmas CAdES impl\u00edcita"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-firmas-cades-explicita","text":"Se extraen los datos firmados de los siguientes ficheros CAdES firmados: Firma CAdES-BES expl\u00edcita Firma CAdES-EPES expl\u00edcita Cofirma CAdES-BES expl\u00edcita Cofirma CAdES-EPES expl\u00edcita Contrafirma CAdES-BES expl\u00edcita Contrafirma CAdES-EPES expl\u00edcita Resultado esperado: Se devuelve null.","title":"Extracci\u00f3n de datos firmados de firmas CAdES expl\u00edcita"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-ficheros-no-cades","text":"Se extraen los datos firmados de los siguientes ficheros: Fichero plano XML Fichero binario Firma CMS Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d.","title":"Extracci\u00f3n de datos firmados de ficheros no CAdES"},{"location":"markdown_strict/CF_plan-pruebas/#obtencion-de-la-estructura-de-firmantes-de-firmas-cades","text":"Se extrae el \u00e1rbol de firmantes de ficheros del siguiente tipo: Firma CAdES-BES impl\u00edcita Firma CAdES-BES explicita Firma CAdES-EPES Cofirma CAdES-BES Cofirma CAdES-EPES Contrafirma CAdES-BES Contrafirma CAdES-EPES Resultado esperado: Se obtiene el \u00e1rbol de firmas correspondiente a cada documento.","title":"Obtenci\u00f3n de la estructura de firmantes de firmas CAdES"},{"location":"markdown_strict/CF_plan-pruebas/#obtencion-de-la-estructura-de-firmantes-de-ficheros-no-cades","text":"Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: Fichero plano XML Fichero binario Firma CMS Resultado esperado: Se lanza una excepci\u00f3n de tipo \u201cAOInvalidFormatException\u201d.","title":"Obtenci\u00f3n de la estructura de firmantes de ficheros no CAdES"},{"location":"markdown_strict/CF_plan-pruebas/#afirma-crypto-cms","text":"","title":"Afirma-crypto-cms"},{"location":"markdown_strict/CF_plan-pruebas/#pruebas-unitarias_4","text":"","title":"Pruebas unitarias"},{"location":"markdown_strict/CF_plan-pruebas/#firma-cms","text":"Se prueba la firma CMS en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos Texto plano XML Otro formato Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado. Si el modo configurado era impl\u00edcito, los datos estar\u00e1n contenidos en la firma.","title":"Firma CMS"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-cms-con-documento-original","text":"Se prueba la cofirma de firmas CMS, indicando el documento originalmente firmado, en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas correctas en todos los casos generadas con el algoritmo indicado. El documento de firma final incluir\u00e1 o no el documento firmado seg\u00fan el modo indicado en la cofirma.","title":"Cofirma CMS con documento original"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-cms-sin-documento-original-sobre-firma-implicita","text":"Se prueba la cofirma de firmas CMS y CAdES impl\u00edcitas sin indicar el documento originalmente firmado. Ya que no se indica el documento firmado, se generar\u00e1 la cofirma a partir de los datos contenidos en la firma original. Se probar\u00e1n todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Ficheros Firma CMS impl\u00edcita Firma CAdES-BES impl\u00edcita Firma CAdES-EPES impl\u00edcita Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas CMS correctas generadas con el algoritmo indicado. El documento de firma final incluir\u00e1 o no el documento firmado seg\u00fan el modo indicado en la cofirma.","title":"Cofirma CMS sin documento original sobre firma impl\u00edcita"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-cms-sin-documento-original-sobre-cms-explicita-mismo-algoritmo","text":"Se prueba la cofirma de firmas CMS y CAdES expl\u00edcitas sin indicar el documento originalmente firmado. Ya que no se indica el documento firmado y este no est\u00e1 contenido en la firma, s\u00f3lo ser\u00e1 posible generar las firmas si ya disponemos del hash del documento firmado generado con el mismo algoritmo que queremos utiliza en la cofirma. Se probar\u00e1n todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Ficheros Firma CMS expl\u00edcita Firma CAdES-BES expl\u00edcita Firma CAdES-EPES expl\u00edcita Modos Indiferente Algoritmos de firma El mismo que el de la firma Resultado esperado: Cofirmas CMS expl\u00edcitas correctas generadas con el algoritmo utilizado en la firma. El documento de firma final incluir\u00e1 o no el documento firmado seg\u00fan el modo indicado en la cofirma.","title":"Cofirma CMS sin documento original sobre CMS expl\u00edcita (mismo algoritmo)"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-cms-sin-documento-original-sobre-cms-explicita-distinto-algoritmo","text":"Se prueba la cofirma de firmas CMS expl\u00edcitas sin indicar el documento originalmente firmado. Ya que no se indica el documento firmado y este no est\u00e1 contenido en la firma, s\u00f3lo ser\u00e1 posible generar las firmas si ya disponemos del hash del documento firmado generado con el mismo algoritmo que queremos utiliza en la cofirma. Se probar\u00e1n todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma CMS Firma CAdES-BES Modos Indiferente Algoritmos de firma Distinto al de la firma Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOException indicando que no se ha podido generar por no encontrar ni los datos ni una huella digital v\u00e1lida en la firma.","title":"Cofirma CMS sin documento original sobre CMS expl\u00edcita (distinto algoritmo)"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-de-ficheros_1","text":"Se prueba la cofirma de ficheros que no sean firma CMS ni CAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Ficheros de datos Fichero plano XML Fichero binario Algoritmos de firma Indiferente Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOException informando que ocurri\u00f3 un error durante la operaci\u00f3n.","title":"Cofirma de ficheros"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-de-firmacofirma-cms","text":"Se prueba la contrafirma de firmas CMS en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma CMS impl\u00edcita Firma CMS expl\u00edcita Cofirma CMS Firma CAdES impl\u00edcita Firma CAdES expl\u00edcita Cofirma CAdES Nodos objetivo Todos los nodos hijos Todos los nodos Nodos determinados Nodos de firmantes determinados Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Contrafirmas CMS correctas generadas con el algoritmo indicado y realizadas sobre los nodos especificados. El documento de firma final incluir\u00e1 o no el documento firmado si lo inclu\u00eda ya la firma contrafirmada.","title":"Contrafirma de firma/cofirma CMS"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-de-ficheros_1","text":"Se prueba la contrafirma de ficheros que no sean firma CMS en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Ficheros de datos Cualquier no CAdES Firma CMS Algoritmos de firma Indiferente Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOException informando que ocurri\u00f3 un error durante la operaci\u00f3n.","title":"Contrafirma de ficheros"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-documento-valido-para-firma_1","text":"Se prueba si un fichero es v\u00e1lido para realizar una firma CMS sobre \u00e9l. Se probar\u00e1 con: Ficheros de datos Fichero plano XML Fichero binario Firma CAdES Firma CMS Resultado esperado: Siempre se devolver\u00e1 \u201ctrue\u201d.","title":"Comprobaci\u00f3n de documento v\u00e1lido para firma"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-firmas-cms","text":"Se prueba si un fichero es realmente una firma CMS. Ya que las firmas CAdES son CMS con atributos adicionales, se considerar\u00e1n tambi\u00e9n firmas CMS. Se probar\u00e1 con los siguientes ficheros: Firma CMS impl\u00edcita Firma CMS explicita Cofirma CMS Contrafirma CMS Firma CAdES-BES impl\u00edcita Firma CAdES-BES explicita Firma CAdES-EPES Cofirma CAdES-BES Cofirma CAdES-EPES Contrafirma CAdES-BES Contrafirma CAdES-EPES Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d.","title":"Comprobaci\u00f3n de firmas CMS"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-firmas-cms-con-ficheros-no-cms","text":"Se prueba si un fichero es realmente una firma CMS. Se probar\u00e1 con los siguientes ficheros: Fichero plano XML Fichero binario Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d.","title":"Comprobaci\u00f3n de firmas CMS con ficheros no CMS"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-generales-de-firmas-cms","text":"Se extrae la informaci\u00f3n general de una firma CMS o CAdES (que se consideran CMS con datos adicionales) con los siguientes ficheros: Firma CMS impl\u00edcita Firma CMS explicita Cofirma CMS Contrafirma CMS Firma CAdES-BES impl\u00edcita Firma CAdES-BES explicita Firma CAdES-EPES Cofirma CAdES-BES Cofirma CAdES-EPES Contrafirma CAdES-BES Contrafirma CAdES-EPES Resultado esperado: Objeto AOSignInfo cuyo formato declarado es \u201cCMS\".","title":"Extracci\u00f3n de datos generales de firmas CMS"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-generales-con-ficheros-no-cms","text":"Se extrae la informaci\u00f3n general de una firma CMS con los siguientes ficheros: Fichero plano XML Fichero binario Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d.","title":"Extracci\u00f3n de datos generales con ficheros no CMS"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-firmas-cms-implicita","text":"Se extraen los datos firmados de los siguientes ficheros CMS firmados: Firma CMS impl\u00edcita Cofirma CMS impl\u00edcita Contrafirma CMS impl\u00edcita Firma CAdES-BES impl\u00edcita Firma CAdES-EPES impl\u00edcita Cofirma CAdES-BES impl\u00edcita Cofirma CAdES-EPES impl\u00edcita Contrafirma CAdES-BES impl\u00edcita Contrafirma CAdES-EPES impl\u00edcita Resultado esperado: Se extraen los datos originalmente firmados.","title":"Extracci\u00f3n de datos firmados de firmas CMS impl\u00edcita"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-firmas-cms-explicita","text":"Se extraen los datos firmados de los siguientes ficheros firmados: Firma CMS expl\u00edcita Cofirma CMS expl\u00edcita Contrafirma CMS expl\u00edcita Firma CAdES-BES expl\u00edcita Firma CAdES-EPES expl\u00edcita Cofirma CAdES-BES expl\u00edcita Cofirma CAdES-EPES expl\u00edcita Contrafirma CAdES-BES expl\u00edcita Contrafirma CAdES-EPES expl\u00edcita Resultado esperado: Se devuelve null.","title":"Extracci\u00f3n de datos firmados de firmas CMS expl\u00edcita"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-ficheros-no-cms","text":"Se extraen los datos firmados de los siguientes ficheros: Fichero plano XML Fichero binario Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d.","title":"Extracci\u00f3n de datos firmados de ficheros no CMS"},{"location":"markdown_strict/CF_plan-pruebas/#obtencion-de-la-estructura-de-firmantes-de-firmas-cms","text":"Se extrae el \u00e1rbol de firmantes de ficheros del siguiente tipo: Firma CMS impl\u00edcita Firma CMS explicita Cofirma CMS Contrafirma CMS Firma CAdES-BES impl\u00edcita Firma CAdES-BES explicita Firma CAdES-EPES Cofirma CAdES-BES Cofirma CAdES-EPES Contrafirma CAdES-BES Contrafirma CAdES-EPES Resultado esperado: Se obtiene el \u00e1rbol de firmas correspondiente a cada documento.","title":"Obtenci\u00f3n de la estructura de firmantes de firmas CMS"},{"location":"markdown_strict/CF_plan-pruebas/#obtencion-de-la-estructura-de-firmantes-de-ficheros-no-cms","text":"Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: Fichero plano XML Fichero binario Resultado esperado: Se lanza una excepci\u00f3n de tipo \u201cAOInvalidFormatException\u201d.","title":"Obtenci\u00f3n de la estructura de firmantes de ficheros no CMS"},{"location":"markdown_strict/CF_plan-pruebas/#afirma-crypto-odf","text":"","title":"Afirma-crypto-odf"},{"location":"markdown_strict/CF_plan-pruebas/#pruebas-unitarias_5","text":"","title":"Pruebas unitarias"},{"location":"markdown_strict/CF_plan-pruebas/#firma-odf","text":"Se prueba la firma ODF en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos ODT ODS ODP Modos CAdES OpenOffice.org 3.2 OpenOffice.org 3.1 Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas siempre con SHA1 (se ignora el algoritmo de firma). Es necesario abrir los ficheros con OpenOffice para comprobaci\u00f3n manual.","title":"Firma ODF"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-de-firmas-odf","text":"Se prueba la cofirma de ficheros ODF firmados en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de firma ODT ODS ODP Modos CAdES OpenOffice.org 3.2 OpenOffice.org 3.1 Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas correctas en todos los casos generadas siempre con SHA1 (se ignora el algoritmo de firma). Es necesario abrir los ficheros con OpenOffice para comprobaci\u00f3n manual.","title":"Cofirma de firmas ODF"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-de-ficheros-odf","text":"Se prueba la cofirma de ficheros ODF sin firmar en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos ODT ODS ODP Modos CAdES OpenOffice.org 3.2 OpenOffice.org 3.1 Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Firmas correctas en todos los casos generadas siempre con SHA1 (se ignora el algoritmo de firma). Es necesario abrir los ficheros con OpenOffice para comprobaci\u00f3n manual.","title":"Cofirma de ficheros ODF"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-de-ficheros_2","text":"Se prueba la contrafirma de ficheros ODF en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos ODT ODS ODP ODT firmado ODS firmado ODP firmado Otro formato Modos CAdES OpenOffice.org 3.2 OpenOffice.org 3.1 Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cada intento de contrafirma lanzar\u00e1 una excepci\u00f3n de tipo \u201cUnsupportedOperationException\u201d.","title":"Contrafirma de ficheros"},{"location":"markdown_strict/CF_plan-pruebas/#firma-y-cofirma-de-un-fichero-en-formato-no-odf","text":"Se prueba la firma y cofirma de ficheros no ODF en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos No ODF Modos CAdES OpenOffice.org 3.2 OpenOffice.org 3.1 Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cada intento de firmar/cofirmar el fichero lanzar\u00e1 una excepci\u00f3n de tipo \u201cAOFormatFileException\u201d.","title":"Firma y cofirma de un fichero en formato no ODF"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-documento-odf","text":"Se prueba si un fichero es realmente un documento ODF con los siguientes ficheros: ODT ODS ODP ODT firmado ODS firmado ODP firmado Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d.","title":"Comprobaci\u00f3n de documento ODF"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-documento-no-odf","text":"Se prueba si un fichero es realmente un documento ODF con los siguientes ficheros: Cualquier documento no ODF. Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d.","title":"Comprobaci\u00f3n de documento no ODF"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-firmas-odf","text":"Se prueba si un fichero es realmente un documento ODF firmado con los siguientes ficheros: ODT firmado / cofirmado ODS firmado / cofirmado ODP firmado / cofirmado Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d.","title":"Comprobaci\u00f3n de firmas ODF"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-firmas-de-documento-distintos-a-odf-firmados","text":"Se prueba si un fichero es realmente un documento ODF firmado con los siguientes ficheros: ODT sin firmar ODS sin firmar ODP sin firmar Cualquier documento no ODF Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d.","title":"Comprobaci\u00f3n de firmas de documento distintos a ODF firmados"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-generales-de-firmas-odf","text":"Se extrae la informaci\u00f3n general de una firma ODF con los siguientes ficheros: ODT firmado ODS firmado ODP firmado Resultado esperado: Objeto AOSignInfo cuyo formato declarado es \u201cODF (Open Document Format)\".","title":"Extracci\u00f3n de datos generales de firmas ODF"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-generales-de-documentos-no-odf-firmados","text":"Se extrae la informaci\u00f3n general de una firma ODF con los siguientes ficheros: ODT sin firmar ODS sin firmar ODP sin firmar Cualquier documento no ODF Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d.","title":"Extracci\u00f3n de datos generales de documentos no ODF firmados"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-firmas-odf","text":"Se extraen los datos firmados de los siguientes ficheros ODF firmados: ODT firmado ODS firmado ODP firmado Resultado esperado: Se extraen los datos originalmente firmados.","title":"Extracci\u00f3n de datos firmados de firmas ODF"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-ficheros-no-odf-firmados","text":"Se extraen los datos firmados de los siguientes ficheros: ODT ODS ODP Cualquier documento no ODF Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d.","title":"Extracci\u00f3n de datos firmados de ficheros no ODF firmados"},{"location":"markdown_strict/CF_plan-pruebas/#obtencion-de-la-estructura-de-firmantes-de-odf-firmados","text":"Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: ODT firmado ODT cofirmado ODS firmado ODS cofirmado ODP firmado ODP cofirmado Resultado esperado: Se obtiene el \u00e1rbol de firmas correspondiente a cada documento.","title":"Obtenci\u00f3n de la estructura de firmantes de ODF firmados"},{"location":"markdown_strict/CF_plan-pruebas/#obtencion-de-la-estructura-de-firmantes-de-ficheros-odf-sin-firmar-y-no-odf","text":"Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: ODT ODS ODP Cualquier documento no ODF Resultado esperado: Se lanza una excepci\u00f3n de tipo \u201cAOInvalidFormatException\u201d.","title":"Obtenci\u00f3n de la estructura de firmantes de ficheros ODF sin firmar y no ODF"},{"location":"markdown_strict/CF_plan-pruebas/#afirma-crypto-ooxml","text":"","title":"Afirma-crypto-ooxml"},{"location":"markdown_strict/CF_plan-pruebas/#pruebas-unitarias_6","text":"","title":"Pruebas unitarias"},{"location":"markdown_strict/CF_plan-pruebas/#firma-ooxml","text":"Se prueba la firma OOXML en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos DOCX XMLS PPTX Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo de firma indicado. Es necesario abrir los ficheros con Microsoft Office para comprobaci\u00f3n manual.","title":"Firma OOXML"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-de-firmas-ooxml","text":"Se prueba la cofirma de ficheros OOXML firmados en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de firma DOCX firmado XSLX firmado PPTX firmado Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas correctas en todos los casos generadas con el algoritmo de firma indicado. Es necesario abrir los ficheros con Microsoft Office para comprobaci\u00f3n manual.","title":"Cofirma de firmas OOXML"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-de-ficheros-ooxml","text":"Se prueba la cofirma de ficheros OOXML sin firmar en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos DOCX XMLX PPTX Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Firmas correctas en todos los casos generadas con el algoritmo de firma indicado. Es necesario abrir los ficheros con Microsoft Office para comprobaci\u00f3n manual.","title":"Cofirma de ficheros OOXML"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-de-ficheros_3","text":"Se prueba la contrafirma de ficheros OOXML en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos DOCX XSLX PPTX DOCX firmado XMLX firmado PPTX firmado Otro formato Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cada intento de contrafirma lanzar\u00e1 una excepci\u00f3n de tipo \u201cUnsupportedOperationException\u201d.","title":"Contrafirma de ficheros"},{"location":"markdown_strict/CF_plan-pruebas/#firma-y-cofirma-de-un-fichero-en-formato-no-ooxml","text":"Se prueba la firma y cofirma de ficheros no OOXML en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos No OOXML Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cada intento de firmar/cofirmar el fichero lanzar\u00e1 una excepci\u00f3n de tipo \u201cAOFormatFileException\u201d.","title":"Firma y cofirma de un fichero en formato no OOXML"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-documento-ooxml","text":"Se prueba si un fichero es realmente un documento OOXML con los siguientes ficheros: DOCX XSLX PPTX DOCX firmado XSLX firmado PPTX firmado Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d.","title":"Comprobaci\u00f3n de documento OOXML"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-documento-no-ooxml","text":"Se prueba si un fichero es realmente un documento OOXML con los siguientes ficheros: Cualquier documento no OOXML. Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d.","title":"Comprobaci\u00f3n de documento no OOXML"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-firmas-ooxml","text":"Se prueba si un fichero es realmente un documento OOXML firmado con los siguientes ficheros: DOCX firmado / cofirmado XSLX firmado / cofirmado PPTX firmado / cofirmado Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d.","title":"Comprobaci\u00f3n de firmas OOXML"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-firmas-de-documento-distintos-a-ooxml-firmados","text":"Se prueba si un fichero es realmente un documento OOXML firmado con los siguientes ficheros: DOCX sin firmar XSLX sin firmar DOCX sin firmar Cualquier documento no OOXML Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d.","title":"Comprobaci\u00f3n de firmas de documento distintos a OOXML firmados"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-generales-de-firmas-ooxml","text":"Se extrae la informaci\u00f3n general de una firma OOXML con los siguientes ficheros: DOCX firmado XSLX firmado PPTX firmado Resultado esperado: Objeto AOSignInfo cuyo formato declarado es \u201cOOXML (Office Open XML)\".","title":"Extracci\u00f3n de datos generales de firmas OOXML"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-generales-de-documentos-no-ooxml-firmados","text":"Se extrae la informaci\u00f3n general de una firma OOXML con los siguientes ficheros: DOCX sin firmar XSLX sin firmar PPTX sin firmar Cualquier documento no OOXML Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d.","title":"Extracci\u00f3n de datos generales de documentos no OOXML firmados"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-firmas-ooxml","text":"Se extraen los datos firmados de los siguientes ficheros OOXML firmados: DOCX firmado XSLX firmado PPTX firmado Resultado esperado: Se extraen los datos originalmente firmados.","title":"Extracci\u00f3n de datos firmados de firmas OOXML"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-ficheros-no-ooxml-firmados","text":"Se extraen los datos firmados de los siguientes ficheros: DOCX XSLX PPTX Cualquier documento no OOXML Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d.","title":"Extracci\u00f3n de datos firmados de ficheros no OOXML firmados"},{"location":"markdown_strict/CF_plan-pruebas/#obtencion-de-la-estructura-de-firmantes-de-ooxml-firmados","text":"Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: DOCX firmado DOCX cofirmado XLSX firmado XSLX cofirmado PPTX firmado PPTX cofirmado Resultado esperado: Se obtiene el \u00e1rbol de firmas correspondiente a cada documento.","title":"Obtenci\u00f3n de la estructura de firmantes de OOXML firmados"},{"location":"markdown_strict/CF_plan-pruebas/#obtencion-de-la-estructura-de-firmantes-de-ficheros-ooxml-sin-firmar-y-no-ooxml","text":"Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: DOCX XLSX PPTX Cualquier documento no OOXML Resultado esperado: Se lanza una excepci\u00f3n de tipo \u201cAOInvalidFormatException\u201d.","title":"Obtenci\u00f3n de la estructura de firmantes de ficheros OOXML sin firmar y no OOXML"},{"location":"markdown_strict/CF_plan-pruebas/#afirma-crypto-pdf","text":"","title":"Afirma-crypto-pdf"},{"location":"markdown_strict/CF_plan-pruebas/#pruebas-unitarias_7","text":"","title":"Pruebas unitarias"},{"location":"markdown_strict/CF_plan-pruebas/#firma-pades-bes","text":"Pruebas de firma con todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Algoritmos SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Ficheros PDF PDF con adjuntos y ficheros empotrados Resultado esperado: Se obtiene el PDF con una firma PAdES-BES.","title":"Firma PAdES-BES"},{"location":"markdown_strict/CF_plan-pruebas/#firma-pades-epes","text":"Pruebas de firma con la pol\u00edtica de firma de la AGE con todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Algoritmos SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Ficheros PDF PDF con adjuntos y ficheros empotrados Resultado esperado: Se obtiene el PDF con una firma PAdES-EPES.","title":"Firma PAdES-EPES"},{"location":"markdown_strict/CF_plan-pruebas/#firma-pades-t","text":"Pruebas de firma con sello de tiempo de CatCert y todas las combinaciones posibles de los siguientes elementos: Algoritmos SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Ficheros PDF PDF con adjuntos y ficheros empotrados Resultado esperado: Se obtiene el PDF con una firma PAdES-T con el sello de tiempo de CatCert.","title":"Firma PAdES-T"},{"location":"markdown_strict/CF_plan-pruebas/#firma-pades-de-un-pdf-certificado-con-la-propiedad-allowsigningcertifiedpdfs","text":"Pruebas de firma PAdES de un PDF certificado con la propiedad activa \u201callowSigningCertifiedPdfs\u201d, que se salta la restricci\u00f3n de no firmar PDFs certificados sin mostrar un di\u00e1logo de confirmaci\u00f3n, y con todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Modos: Indiferente Algoritmos Indiferente Resultado esperado: Se obtiene el PDF invalidado con la firma generada.","title":"Firma PAdES de un PDF certificado con la propiedad \u201callowSigningCertifiedPdfs\u201d"},{"location":"markdown_strict/CF_plan-pruebas/#firma-pades-de-un-pdf-certificado-con-la-propiedad-headless","text":"Pruebas de firma PAdES de un PDF certificado con la propiedad \u201cheadless\u201d. Con la propiedad \u201callowSigningCertifiedPdfs\u201d el Cliente deber\u00eda mostrar un mensaje de confirmaci\u00f3n al usuario ya que el PDF resultado ser\u00eda inv\u00e1lido, pero al tener configurada la propiedad \u201cheadless\u201d no se puede mostrar este di\u00e1logo. Se realizar\u00e1 la prueba con las siguientes confinaciones: Certificados ANF Persona F\u00edsica CatCert Modos: Indiferente Algoritmos Indiferente Resultado esperado: Se lanza una excepci\u00f3n de tipo UnsupportedOperationException.","title":"Firma PAdES de un PDF certificado con la propiedad \u201cheadless\u201d"},{"location":"markdown_strict/CF_plan-pruebas/#firma-pades-con-contrasena","text":"Pruebas de firma de un PDF protegido con contrase\u00f1a con todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Modos PAdES-BES PAdES-EPES PAdES-T (con sello de tiempo de CatCert) Algoritmos SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Se obtiene el PDF con una firma del tipo que fuese (BES, EPES, T) generada con el algoritmo de firma concreto.","title":"Firma PAdES con contrase\u00f1a"},{"location":"markdown_strict/CF_plan-pruebas/#firma-pades-con-contrasena-incorrecta","text":"Pruebas de firma de un PDF protegido con contrase\u00f1a utilizando una contrase\u00f1a incorrecta y la propiedad \u201cheadless\u201d establecida a \u201ctrue\u201d. Al indicar program\u00e1ticamente una contrase\u00f1a incorrecta se le pregunta al usuario, mediante una ventana de di\u00e1logo, por la contrase\u00f1a del PDF. Sin embargo, al indicar la propiedad \u201cheadless\u201d no se puede mostrar ventanas por lo que directamente se lanza una excepci\u00f3n de tipo \u201cAOException\u201d al fallar la contrase\u00f1a indicada program\u00e1ticamente. Se realizar\u00e1 la prueba con las siguientes combinaciones: Certificados ANF Persona F\u00edsica CatCert Modos PAdES-BES PAdES-EPES PAdES-T (con sello de tiempo de CatCert) Algoritmos Indiferente Resultado esperado: Se lanzar\u00e1 una AOException.","title":"Firma PAdES con contrase\u00f1a incorrecta"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-de-firmas-pdf-multifirma","text":"Se prueba la cofirma de ficheros PDF firmados en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Modos PAdES-BES PAdES-EPES PAdES-T (con sello de tiempo de CatCert) Formatos de ficheros de firma PDF firmado PAdES-BES PDF firmado PAdES-EPES PDF firmado PAdES-T Algoritmos de firma SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas correctas en todos los casos generadas con el algoritmo de firma indicado. Es necesario abrir los ficheros con Adobe Reader para comprobaci\u00f3n manual.","title":"Cofirma de firmas PDF (Multifirma)"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-de-documentos-pdf-sin-firmar","text":"Se prueba la cofirma de un documento PDF sin firmar en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Algoritmos de firma SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Firmas correctas en todos los casos generadas con el algoritmo de firma indicado. Es necesario abrir los ficheros con Adobe Reader para comprobaci\u00f3n manual.","title":"Cofirma de documentos PDF sin firmar"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-de-ficheros_4","text":"Se prueba la contrafirma de ficheros PDF en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos PDF sin firmar PDF firmado PAdES-BES PDF firmado PAdES-EPES PDF firmado PAdES-T Cualquier documento no PDF Algoritmos de firma SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cada intento de contrafirma lanzar\u00e1 una excepci\u00f3n de tipo \u201cUnsupportedOperationException\u201d.","title":"Contrafirma de ficheros"},{"location":"markdown_strict/CF_plan-pruebas/#firma-y-cofirma-de-un-fichero-en-formato-no-pdf","text":"Se prueba la firma y cofirma de ficheros no PDF en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Formatos de ficheros de datos Cualquier documento no PDF Algoritmos de firma SHA1withRSA SHA-512withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cada intento de firmar/cofirmar el fichero lanzar\u00e1 una excepci\u00f3n de tipo \u201cAOFormatFileException\u201d.","title":"Firma y cofirma de un fichero en formato no PDF"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-documento-pdf","text":"Se prueba si un fichero es realmente un documento PDF con los siguientes ficheros: PDF PDF certificado PDF con contrase\u00f1a PDF firmado BES PDF firmado EPES PDF firmado T Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d.","title":"Comprobaci\u00f3n de documento PDF"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-documento-no-pdf","text":"Se prueba si un fichero es realmente un documento OOXML con los siguientes ficheros: Cualquier documento no PDF. Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d.","title":"Comprobaci\u00f3n de documento no PDF"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-una-firma-pdf","text":"Prueba de reconocimiento de ficheros PDF firmados. Se probar\u00e1 con: Ficheros: PDF firmado PAdES-BES PDF firmado PAdES-EPES PDF firmado PAdES-T (con sello de tiempo CarCert) Algoritmos Indiferente Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d.","title":"Comprobaci\u00f3n de una firma PDF"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-documentos-distintos-de-pdf-firmados","text":"Prueba de reconocimiento de ficheros PDF firmados. Se probar\u00e1 con: Ficheros: PDF sin firmar Cualquier documento no PDF Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d.","title":"Comprobaci\u00f3n de documentos distintos de PDF firmados"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-generales-de-firmas-pdf","text":"Se extrae la informaci\u00f3n general de una firma OOXML con los siguientes ficheros: PDF firmado PAdES-BES PDF firmado PAdES-EPES PDF firmado PAdES-T Resultado esperado: Objeto AOSignInfo cuyo formato declarado es \u201cAdobe PDF\".","title":"Extracci\u00f3n de datos generales de firmas PDF"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-generales-de-documentos-no-pdf-firmados","text":"Se extrae la informaci\u00f3n general de una firma PDF con los siguientes ficheros: PDF sin firmar Cualquier documento no PDF Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d.","title":"Extracci\u00f3n de datos generales de documentos no PDF firmados"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-firmas-pdf","text":"Se extraen los datos firmados de los siguientes ficheros PDF firmados: PDF firmado PAdES-BES PDF firmado PAdES-EPES PDF firmado PAdES-T Resultado esperado: Se extraen los datos originalmente firmados.","title":"Extracci\u00f3n de datos firmados de firmas PDF"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-ficheros-no-pdf-firmados","text":"Se extraen los datos firmados de los siguientes ficheros: PDF no firmado Cualquier documento no PDF Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d.","title":"Extracci\u00f3n de datos firmados de ficheros no PDF firmados"},{"location":"markdown_strict/CF_plan-pruebas/#obtencion-de-la-estructura-de-firmantes-de-pdf-firmados","text":"Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: PDF firmado PAdES-BES PDF cofirmado PAdES-BES PDF firmado PAdES-EPES PDF cofirmado PAdES-EPES PDF firmado PAdES-T PDF cofirmado PAdES-T Resultado esperado: Se obtiene el \u00e1rbol de firmas correspondiente a cada documento.","title":"Obtenci\u00f3n de la estructura de firmantes de PDF firmados"},{"location":"markdown_strict/CF_plan-pruebas/#obtencion-de-la-estructura-de-firmantes-de-ficheros-pdf-sin-firmar-y-no-pdf","text":"Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: PDF sin firmar Cualquier documento no PDF Resultado esperado: Se lanza una excepci\u00f3n de tipo \u201cAOInvalidFormatException\u201d.","title":"Obtenci\u00f3n de la estructura de firmantes de ficheros PDF sin firmar y no PDF"},{"location":"markdown_strict/CF_plan-pruebas/#prueba-especifica-de-firma-segun-los-casos-de-pruebas-etsi-pades-plugtest","text":"Prueba de firma de documentos PDF seg\u00fan los casos de prueba ETSI PAdES del PlugTest con las siguientes configuraciones: Certificado espec\u00edfico ETSI Resultado esperado: Se obtiene el PDF firmado.","title":"Prueba espec\u00edfica de firma seg\u00fan los casos de pruebas ETSI PAdES PlugTest"},{"location":"markdown_strict/CF_plan-pruebas/#afirma-crypto-xades","text":"","title":"Afirma-crypto-xades"},{"location":"markdown_strict/CF_plan-pruebas/#pruebas-unitarias_8","text":"","title":"Pruebas unitarias"},{"location":"markdown_strict/CF_plan-pruebas/#firma-xades-bes-detached","text":"Se prueba la firma XAdES Detached en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos Texto plano XML Otro formato Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado. Si el modo configurado era impl\u00edcito, los datos estar\u00e1n contenidos en la firma.","title":"Firma XAdES-BES Detached"},{"location":"markdown_strict/CF_plan-pruebas/#firma-xades-bes-enveloping","text":"Se prueba la firma XAdES Enveloping en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos Texto plano XML Otro formato Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado. Si el modo configurado era impl\u00edcito, los datos estar\u00e1n contenidos en la firma.","title":"Firma XAdES-BES Enveloping"},{"location":"markdown_strict/CF_plan-pruebas/#firma-xades-bes-enveloped","text":"Se prueba la firma XAdES Enveloped en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos XML Modos Impl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado.","title":"Firma XAdES-BES Enveloped"},{"location":"markdown_strict/CF_plan-pruebas/#firma-xades-bes-enveloped-de-documentos-no-xml","text":"Se prueba la firma XAdES Enveloped en todas las combinaciones posibles de los siguientes elementos: Formatos de ficheros de datos Fichero plano Fichero binario Modos Impl\u00edcito Algoritmos de firma Indiferente Resultado esperado: Se lanza la excepci\u00f3n \u201cAOFormatFileException\u201d.","title":"Firma XAdES-BES Enveloped de documentos no XML"},{"location":"markdown_strict/CF_plan-pruebas/#firma-xades-bes-enveloped-explicita","text":"Se prueba la firma XAdES Enveloped en todas las combinaciones posibles de los siguientes elementos: Formatos de ficheros de datos XML Modos Expl\u00edcito Algoritmos de firma Indiferente Resultado esperado: Se lanza la excepci\u00f3n \u201cUnsupportedOperationException\u201d.","title":"Firma XAdES-BES Enveloped expl\u00edcita"},{"location":"markdown_strict/CF_plan-pruebas/#firma-xades-epes-detached","text":"Se prueba la firma XAdES-EPES Detached con la pol\u00edtica de firma de a AGE en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos Texto plano XML Otro formato Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado y la pol\u00edtica de firma declarada. Si el modo configurado era impl\u00edcito, los datos estar\u00e1n contenidos en la firma.","title":"Firma XAdES-EPES Detached"},{"location":"markdown_strict/CF_plan-pruebas/#firma-xades-epes-enveloping","text":"Se prueba la firma XAdES-EPES Enveloping con la pol\u00edtica de firma de a AGE en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos Texto plano XML Otro formato Modos Impl\u00edcito Expl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado y la pol\u00edtica de firma declarada. Si el modo configurado era impl\u00edcito, los datos estar\u00e1n contenidos en la firma.","title":"Firma XAdES-EPES Enveloping"},{"location":"markdown_strict/CF_plan-pruebas/#firma-xades-epes-enveloped","text":"Se prueba la firma XAdES-EPES Enveloped con la pol\u00edtica de firma de a AGE en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de datos XML Modos Impl\u00edcito Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado : Firmas correctas en todos los casos generadas con el algoritmo indicado y la pol\u00edtica de firma declarada.","title":"Firma XAdES-EPES Enveloped"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-xades","text":"Se prueba la cofirma de firmas XAdES, indicando el documento originalmente firmado, en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma XAdES-BES Detached Firma XAdES-BES Enveloping Firma XAdES-BES Enveloped Firma XAdES-EPES Detached Firma XAdES-EPES Enveloping Firma XAdES-EPES Enveloped Modos XAdES XAdES-BES XAdES-EPES Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Cofirmas correctas en todos los casos generadas con el algoritmo indicado y siempre con la misma estructura de firma que la firma original (detached, enveloping o enveloped).","title":"Cofirma XAdES"},{"location":"markdown_strict/CF_plan-pruebas/#cofirma-de-ficheros_2","text":"Se prueba la cofirma de ficheros que no sean firmas XAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Ficheros de datos Fichero plano XML Fichero binario Firma XMLdSig Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOInvalidFormatException.","title":"Cofirma de ficheros"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-de-firmacofirma-xades","text":"Se prueba la contrafirma de firmas XAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Formatos de ficheros de firma Firma XAdES-BES Detached impl\u00edcita Firma XAdES-BES Detached expl\u00edcita Firma XAdES-EPES Detached impl\u00edcita Firma XAdES-EPES Detached expl\u00edcita Firma XAdES-BES Enveloping impl\u00edcita Firma XAdES-BES Enveloping expl\u00edcita Firma XAdES-EPES Enveloping impl\u00edcita Firma XAdES-EPES Enveloping expl\u00edcita Firma XAdES-BES Enveloped Firma XAdES-EPES Enveloped Cofirma XAdES Detached Cofirma XAdES Enveloping Cofirma XAdES Enveloped Modos XAdES XAdES-BES XAdES-EPES Nodos objetivo Todos los nodos hijos Todos los nodos Nodos determinados Nodos de firmantes determinados Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Contrafirmas correctas generadas con el algoritmo indicado, el modo XAdES y realizadas sobre los nodos especificado.","title":"Contrafirma de firma/cofirma XAdES"},{"location":"markdown_strict/CF_plan-pruebas/#contrafirma-de-ficheros_5","text":"Se prueba la contrafirma de ficheros que no sean firma XAdES en todas las combinaciones posibles de los siguientes elementos: Certificados ANF Persona F\u00edsica CatCert Camerfirma Ficheros de datos Fichero plano XML Fichero binario Firma XMLdSig Algoritmos de firma SHA1withRSA SHA-512withRSA MD2withRSA MD5withRSA SHA-256withRSA SHA-384withRSA Resultado esperado: Lanzar\u00e1 una excepci\u00f3n de tipo AOInvalidFormatException.","title":"Contrafirma de ficheros"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-documento-valido-para-firma_2","text":"Se prueba si un fichero es v\u00e1lido para realizar una firma XAdES sobre \u00e9l. Se probar\u00e1 con: Ficheros de datos Fichero plano XML Fichero binario Firma XAdES Firma XMLdSig Resultado esperado: Siempre se devolver\u00e1 \u201ctrue\u201d.","title":"Comprobaci\u00f3n de documento v\u00e1lido para firma"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-firmas-xades","text":"Se prueba si un fichero es realmente una firma XAdES. Se probar\u00e1 con los siguientes ficheros: Firma XAdES-BES Detached impl\u00edcita Firma XAdES-BES Detached explicita Firma XAdES-BES Enveloping impl\u00edcita Firma XAdES-BES Enveloped explicita Firma XAdES-BES Enveloping Firma XAdES-EPES Detached impl\u00edcita Firma XAdES-EPES Detached explicita Firma XAdES-EPES Enveloping impl\u00edcita Firma XAdES-EPES Enveloped explicita Firma XAdES-EPES Enveloping Cofirma XAdES-BES Cofirma XAdES-EPES Contrafirma XAdES-BES Contrafirma XAdES-EPES Resultado esperado: El m\u00e9todo devolver\u00e1 \u201ctrue\u201d.","title":"Comprobaci\u00f3n de firmas XAdES"},{"location":"markdown_strict/CF_plan-pruebas/#comprobacion-de-firmas-xades-con-ficheros-no-xades","text":"Se prueba si un fichero es realmente una firma XAdES. Se probar\u00e1 con los siguientes ficheros: Fichero plano XML Fichero binario Firma XMLdSig Resultado esperado: El m\u00e9todo devolver\u00e1 \u201cfalse\u201d.","title":"Comprobaci\u00f3n de firmas XAdES con ficheros no XAdES"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-generales-de-firmas-xades","text":"Se extrae la informaci\u00f3n general de una firma XAdES con los siguientes ficheros: Firma XAdES-BES Detached impl\u00edcita Firma XAdES-BES Detached explicita Firma XAdES-BES Enveloping impl\u00edcita Firma XAdES-BES Enveloped explicita Firma XAdES-BES Enveloping Firma XAdES-EPES Detached impl\u00edcita Firma XAdES-EPES Detached explicita Firma XAdES-EPES Enveloping impl\u00edcita Firma XAdES-EPES Enveloped explicita Firma XAdES-EPES Enveloping Cofirma XAdES-BES Cofirma XAdES-EPES Contrafirma XAdES-BES Contrafirma XAdES-EPES Resultado esperado: Objeto AOSignInfo cuyo formato declarado es \u201cXAdES\" y la variante la correspondiente al fichero (Detached, Enveloping o Enveloped).","title":"Extracci\u00f3n de datos generales de firmas XAdES"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-generales-con-ficheros-no-xades","text":"Se extrae la informaci\u00f3n general de una firma XAdES con los siguientes ficheros: Fichero plano XML Fichero binario Firma XMLdSig Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d.","title":"Extracci\u00f3n de datos generales con ficheros no XAdES"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-firmas-xades-implicita-sobre-xml","text":"Se extraen el XML firmado de los siguientes ficheros XAdES firmados: Firma XAdES-Detached impl\u00edcita de datos XML Cofirma XAdES-Detached impl\u00edcita de datos XML Contrafirma XAdES-Detached impl\u00edcita de datos XML Firma XAdES- Enveloping impl\u00edcita de datos XML Cofirma XAdES- Enveloping impl\u00edcita de datos XML Contrafirma XAdES- Enveloping impl\u00edcita de datos XML Firma XAdES-Enveloped Cofirma XAdES- Enveloped Contrafirma XAdES- Enveloped Resultado esperado: Se extrae el XML originalmente firmado.","title":"Extracci\u00f3n de datos firmados de firmas XAdES impl\u00edcita sobre XML"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-firmas-xades-implicitas-sobre-datos-binarios","text":"Se extraen los datos originalmente firmados de los siguientes ficheros XAdES firmados: Firma XAdES-Detached impl\u00edcita de datos binarios Cofirma XAdES-Detached impl\u00edcita de datos binarios Contrafirma XAdES-Detached impl\u00edcita de datos binarios Firma XAdES- Enveloping impl\u00edcita impl\u00edcita de datos binarios Cofirma XAdES- Enveloping impl\u00edcita de datos binarios Contrafirma XAdES- Enveloping impl\u00edcita de datos binarios Resultado esperado: Se extraen los datos binarios originalmente firmados.","title":"Extracci\u00f3n de datos firmados de firmas XAdES impl\u00edcitas sobre datos binarios"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-firmas-xades-explicitas","text":"Se extraen los datos originalmente firmados de los siguientes ficheros XAdES firmados: Firma XAdES-Detached expl\u00edcita Cofirma XAdES-Detached expl\u00edcita Contrafirma XAdES-Detached expl\u00edcita Firma XAdES- Enveloping expl\u00edcita Cofirma XAdES- Enveloping expl\u00edcita Contrafirma XAdES- Enveloping expl\u00edcita Resultado esperado: Se extrae la huella digital de los datos originalmente firmados.","title":"Extracci\u00f3n de datos firmados de firmas XAdES expl\u00edcitas"},{"location":"markdown_strict/CF_plan-pruebas/#extraccion-de-datos-firmados-de-ficheros-no-xades","text":"Se extraen los datos firmados de los siguientes ficheros: Fichero plano XML Fichero binario Firma XMLdSig Resultado esperado: Se lanza la excepci\u00f3n \u201cAOInvalidFormatException\u201d.","title":"Extracci\u00f3n de datos firmados de ficheros no XAdES"},{"location":"markdown_strict/CF_plan-pruebas/#obtencion-de-la-estructura-de-firmantes-de-firmas-xades","text":"Se extrae el \u00e1rbol de firmantes de ficheros del siguiente tipo: Firma XAdES Detached impl\u00edcita Firma XAdES Detached explicita Firma XAdES Enveloping impl\u00edcita Firma XAdES Enveloped explicita Firma XAdES Enveloping Cofirma XAdES Contrafirma XAdES Resultado esperado: Se obtiene el \u00e1rbol de firmas correspondiente a cada documento.","title":"Obtenci\u00f3n de la estructura de firmantes de firmas XAdES"},{"location":"markdown_strict/CF_plan-pruebas/#obtencion-de-la-estructura-de-firmantes-de-ficheros-no-xades","text":"Se extrae el \u00e1rbol de firmantes de documentos del siguiente tipo: Fichero plano XML Fichero binario Firma XMLdSig Resultado esperado: Se lanza una excepci\u00f3n de tipo \u201cAOInvalidFormatException\u201d.","title":"Obtenci\u00f3n de la estructura de firmantes de ficheros no XAdES"},{"location":"markdown_strict/CF_plan-pruebas/#generacion-de-firmas-xades-sin-la-cadena-de-certificacion-completa-ticket-209544","text":"Se generan firmas XAdES con la propiedad \u201cincludeOnlySignningCertificate\u201d configurada a \u201ctrue\u201d. Los tipos de firmas generados son: XAdES-BES Detached XAdES-BES Enveloping XAdES-BES Enveloped Resultado esperado: Se obtiene una firma s\u00f3lo con el certificado firmante.","title":"Generaci\u00f3n de firmas XAdES sin la cadena de certificaci\u00f3n completa (Ticket 209544)"},{"location":"markdown_strict/CF_plan-pruebas/#generacion-de-cofirmas-xades-sin-la-cadena-de-certificacion-completa-ticket-209544","text":"Se generan cofirmas XAdES con la propiedad \u201cincludeOnlySignningCertificate\u201d configurada a \u201ctrue\u201d. Los tipos de firmas generados son: XAdES-BES Detached XAdES-BES Enveloping XAdES-BES Enveloped Resultado esperado: Se obtiene una cofirma s\u00f3lo con el certificado firmante.","title":"Generaci\u00f3n de cofirmas XAdES sin la cadena de certificaci\u00f3n completa (Ticket 209544)"},{"location":"markdown_strict/CF_plan-pruebas/#generacion-de-contrafirmas-xades-sin-la-cadena-de-certificacion-completa-ticket-209544","text":"Se generan contrafirmas XAdES con la propiedad \u201cincludeOnlySignningCertificate\u201d configurada a \u201ctrue\u201d. Los tipos de firmas generados son: XAdES-BES Detached XAdES-BES Enveloping XAdES-BES Enveloped Los nodos objetivos son: Todos los nodos. Resultado esperado: Se obtiene una contrafirma s\u00f3lo con el certificado firmante.","title":"Generaci\u00f3n de contrafirmas XAdES sin la cadena de certificaci\u00f3n completa (Ticket 209544)"},{"location":"markdown_strict/CF_plan-pruebas/#applet-cliente-firma","text":"","title":"Applet Cliente @firma"},{"location":"markdown_strict/CF_plan-pruebas/#pruebas-funcionales-de-usuarios-finales","text":"","title":"Pruebas funcionales de usuarios finales"},{"location":"markdown_strict/CF_plan-pruebas/#entorno-contemplados-en-las-pruebas","text":"Las pruebas funcionales de usuario final se realizan en los siguientes entornos: Sistemas Operativos Windows 7 64 bits Windows 7 32 bits Windows XP 32 bits Mac OS X Lion (64 bits) Ubuntu 32 bits Navegadores Web Internet Explorer 9 (\u00fanicamente Windows 7) Internet Explorer 9 64 bits (\u00fanicamente Windows 7) Internet Explorer 8 (\u00fanicamente Windows XP) Mozilla Firefox 3.6 Mozilla Firefox 12 Apple Safari 5.1 (excepto Linux) Google Chrome 19 Opera 11 (excepto Mac OS X) Entorno de ejecuci\u00f3n de Java (Siempre en la misma arquitectura que el navegador) 6u32 32 bits 6u32 64 bits 7u4 32 bits (excepto Mac OS X) 7u4 64 bits (excepto Mac OS X)","title":"Entorno contemplados en las pruebas"},{"location":"markdown_strict/CF_plan-pruebas/#operaciones-probadas","text":"Carga del Applet Se comprueba la correcta carga del Applet mediante las funciones est\u00e1ndar de carga. Prueba de firma Se firma un fichero (sin establecerlo, usando di\u00e1logo gr\u00e1fico del Applet) usando todos los formatos de firma posibles (CAdES, XAdES, OOXML, ODF, PAdES, CMS, XMLDSig). La prueba se realiza primero con un certificado software y se repite con un DNIe. Esta prueba permite asegurar una correcta carga del almac\u00e9n de claves (incluyendo la agregaci\u00f3n de m\u00f3dulos PKCS#11 en Mozilla) y la correcta incorporaci\u00f3n de todas los m\u00f3dulos relacionados. Prueba de cofirma En base a ficheros de prueba (los mismos de las pruebas unitarias), se repiten las mismas pruebas que en la firma, solo que indicando una cofirma. La prueba se repite con contrafirma (cambiando el conjunto de ficheros de prueba). Prueba de firma masiva Prueba b\u00e1sica de firma de directorios. Usando un conjunto de ficheros y carpetas de prueba que replican las situaciones menos habituales. Prueba b\u00e1sica de firma masiva program\u00e1tica. Usando un conjunto de ficheros y carpetas de prueba que replican las situaciones menos habituales. Prueba de firma Web Prueba b\u00e1sica de firma Web. Prueba de cifrado Cifrado y descifrado de ficheros usando todos los algoritmos posibles, tanto basados en claves como basados en contrase\u00f1as. Pruebas de sobre digital Ensobrado y apertura de sobres usando todos los formatos soportados de sobre. Prueba espec\u00edfica de lectura de claves p\u00fablicas: Desde LDAP Desde certificado en disco (CER/BER/PEM) Desde la libreta de direcciones de Windows (\u00fanicamente en Windows) Pruebas de almacenes de claves y certificados Pruebas de establecimiento forzado de almac\u00e9n de claves (pasando del nativo a PKCS#12). La operaci\u00f3n de prueba concluye con una firma para comprobar la correcci\u00f3n del cambio.","title":"Operaciones probadas"},{"location":"markdown_strict/CF_roadmap_ES/","text":"Versi\u00f3n 2.1 Cambios en el establecimiento de pol\u00edtica de firma La mejora en el establecimiento de pol\u00edtica de firma propuesta para la versi\u00f3n 2.1 consistir\u00eda en la solicitud, v\u00eda di\u00e1logo de configuraci\u00f3n (opciones) de los distintos campos que pueden figurar en una pol\u00edtica AdES (identificador, huella digital del identificador, algoritmo utilizado para la huella y calificador al menos). La pol\u00edtica por defecto se guardar\u00e1 junto al resto de opciones de usuario. Adem\u00e1s, el usuario podr\u00e1 seleccionar una pol\u00edtica preconfigurada (AGE o FacturaE) de modo que no tenga que teclear manualmente los valores. Multifirmas de firmas impl\u00edcitas La mejora en la funcionalidad para las multifirmas de firmas impl\u00edcitas consiste en: Dar la posibilidad al usuario de, cuando se va a realizar una cofirma o contrafirma, extraer y visualizar los datos originalmente firmados. Cofirmar una firma sin necesidad de seleccionar los datos originalmente firmados cuando estos ya estuviesen incluidos dentro de la propia firma. Mejora de experiencia de usuario La mejora de experiencia de usuario propuesta para la versi\u00f3n 2.1 consistir\u00eda principalmente en una revisi\u00f3n de como se gestionan en el interfaz gr\u00e1fico las tareas de proceso de la aplicaci\u00f3n, introduciendo hilos de ejecuci\u00f3n para pasar a segundo plano ciertos procesos, usar di\u00e1logos de espera e introducir cursores de espera (reloj de arena). Tambi\u00e9n se automatizar\u00e1n o agilizar\u00e1n algunas tareas como, por ejemplo, la asignaci\u00f3n de extensiones por defecto a los ficheros descifrados. Mejora de la documentaci\u00f3n Se agregar\u00e1 a la documentaci\u00f3n del proyecto informaci\u00f3n adicional de utilidad para el usuario final. Esta mejora incluye: Proceso de instalaci\u00f3n del controlador del DNIe mediante el instalador accesible de Inteco, Proceso de instalaci\u00f3n del OpenDNIe. Soporte para la validaci\u00f3n de firmas expl\u00edcitas Se ampliar\u00e1 la funcionalidad del validador de la interfaz para el soporte de firmas expl\u00edcitas. Cuando se detecte una firma sin contenido impl\u00edcito, se pedir\u00e1 al usuario que seleccione el fichero de datos en base al que se gener\u00f3 la firma para poder validarla al completo. Cuando el usuario selecciona el fichero se validar\u00e1 con respecto a estos datos y se mostrar\u00e1 el resultado de la validaci\u00f3n. Si el usuario no selecciona el di\u00e1logo, se validar\u00e1 el resto de la estructura y, en caso de ser correcta, se mostrar\u00e1 una advertencia indicando que no se ha podido completar la validaci\u00f3n debido a que faltan los datos firmados. Decodificaci\u00f3n de datos base 64 extra\u00eddos de firmas impl\u00edcitas Existen aplicaciones de firma que codifican los datos a base 64 para firmarlos sin declarar la transformaci\u00f3n, con lo cual firman la versi\u00f3n codificada de estos datos en lugar de los datos originales. Aunque el comportamiento por defecto ser\u00eda extraer estos datos tal como se firmaron, esto plantear\u00eda un problema para el usuario final que desea recuperar los datos originales. Se agregar\u00e1 a la aplicaci\u00f3n la l\u00f3gica necesaria para que se detecte si los datos firmados son base 64 y, en esos casos, se descodifiquen al extraerlos de la firma. Versi\u00f3n 2.2 Soporte de factura electr\u00f3nica El soporte de factura electr\u00f3nica (Factura-e) planificado para la versi\u00f3n 2.2 consiste en la introducci\u00f3n de un nuevo formato de firma espec\u00edfico para facturas electr\u00f3nicas. Al seleccionar este formato se comprobar\u00e1 que los datos se ajustan a la estructura b\u00e1sica de una factura electr\u00f3nica y se preguntar\u00e1 al usuario qu\u00e9 pol\u00edtica de firma se desea utilizar para firmarla (por defecto, la versi\u00f3n 3.1 de la pol\u00edtica). Incorporaci\u00f3n soporte DNIe 100% Java Esta tarea consiste en la integraci\u00f3n en la herramienta de un controlador Java para DNIe. El soporte de este dispositivo se reflejar\u00e1 en la aparici\u00f3n de un nuevo almac\u00e9n de certificados, con la nomenclatura \u201cDNIe\u201d, disponible tanto desde la vista simple como avanzada de la interfaz de escritorio. Los usuarios podr\u00e1n seleccionar este almac\u00e9n de certificados para que se invoque a este controlador. El uso de este controlador permitir\u00e1 listar \u00fanicamente los certificados del DNIe y utilizarlos sin necesidad de que se haya instalado el controlador del DNIe en el sistema del usuario. Mejora del sistema de notificaci\u00f3n de errores Se estructurar\u00e1 el mecanismo de notificaci\u00f3n de errores para ofrecer al usuario mensajes m\u00e1s concretos que le ayuden a entender el motivo de cualquier error que pueda haberse producido durante la ejecuci\u00f3n de cualquier operaci\u00f3n criptogr\u00e1fica: Firma electr\u00f3nica, configuraci\u00f3n de par\u00e1metros de firma, acceso a un almac\u00e9n de certificados, cifrado sim\u00e9trico\u2026 Evoluci\u00f3n de la aplicaci\u00f3n de escritorio \u201cFirma F\u00e1cil con @firma\u201d Versi\u00f3n 1.1 Incorporaci\u00f3n soporte DNIe 100% Java Esta tarea consiste en la integraci\u00f3n en la herramienta de un controlador Java para DNIe. Este controlador se utilizar\u00e1 por defecto para el acceso al DNIe del usuario. En caso de no estar insertado este en un lector de tarjetas configurado, se cargar\u00e1 el almac\u00e9n de claves por defecto del sistema. El uso de este controlador permitir\u00e1 listar \u00fanicamente los certificados del DNIe y utilizarlos sin necesidad de que se haya instalado el controlador del DNIe en el sistema del usuario. Soporte configuraciones de usuario (men\u00fa opciones) El soporte de configuraciones de usuario propuesto para la versi\u00f3n 1.1 supondr\u00eda la adici\u00f3n de un men\u00fa de opciones con una serie de di\u00e1logos donde el usuario podr\u00e1 modificar ciertos par\u00e1metros de la ejecuci\u00f3n del programa (por ejemplo, configurar una pol\u00edtica de firma, indicar si las firmas CAdES deben o no incluir internamente una copia del contenido, etc.). Estas opciones se podr\u00e1n salvar (por usuario), y no introducir\u00e1n ning\u00fan cambio en la operativa de firma. Mejoras menores en accesibilidad Las mejoras menores en accesibilidad propuestas para la versi\u00f3n 1.1 consistir\u00edan en una adecuaci\u00f3n en el comportamiento de las barras de men\u00fa en sistemas Windows y Linux (nunca en Mac OS X) de modo que sigan la operativa normal de Windows posibilitando su uso con las teclas Alt, Enter y las flechas de cursor (aspecto que los men\u00fas de Java no soportan). Decodificaci\u00f3n de datos base 64 extra\u00eddos de firmas impl\u00edcitas Existen aplicaciones de firma que codifican los datos a base 64 para firmarlos sin declarar la transformaci\u00f3n, con lo cual firman la versi\u00f3n codificada de estos datos en lugar de los datos originales. Aunque el comportamiento por defecto ser\u00eda extraer estos datos tal como se firmaron, esto plantear\u00eda un problema para el usuario final que desea recuperar los datos originales. Se agregar\u00e1 a la aplicaci\u00f3n la l\u00f3gica necesaria para que se detecte si los datos firmados son base 64 y, en esos casos, se descodifiquen al extraerlos de la firma. Versi\u00f3n 1.11 SplashScreen animado Esta tarea consiste en el dise\u00f1o e integraci\u00f3n de una imagen animada que permita saber a los usuarios cuando la aplicaci\u00f3n est\u00e1 carg\u00e1ndose. La imagen de carga animada mejorar\u00e1 la experiencia de usuario eliminando tiempos en los que usuario puede percibir que la aplicaci\u00f3n no responde como deber\u00eda. Evoluci\u00f3n del MiniApplet @firma Versi\u00f3n 1.1 Soporte de firmas masivas v\u00eda JavaScript Se proporcionar\u00e1 al integrador las bibliotecas JavaScript necesarias para la automatizaci\u00f3n de firmas masivas. Para ello tambi\u00e9n ser\u00e1 necesario permitir que s\u00f3lo se deba seleccionar el certificado de usuario durante la primera operaci\u00f3n de firma. La configuraci\u00f3n de esta autoselecci\u00f3n del certificado de firma en sucesivas operaciones se realizar\u00e1 mediante un filtro de certificados especial para este fin. Autocomprobaciones de entorno por funci\u00f3n La versi\u00f3n 1.1 del MiniApplet integrar\u00e1 un sistema de comprobaci\u00f3n del sistema en todas aquellas funciones en las que existan riesgo de incompatibilidades. De esta forma, el MiniApplet se ejecutar\u00e1 normalmente en un sistema que presente incompatibilidades con una funci\u00f3n concreta y, s\u00f3lo si se requiere de esta funci\u00f3n se producir\u00e1 un error de incompatibilidad. Las incompatibilidades estar\u00e1n claramente definidas y, cuando falle la ejecuci\u00f3n de una funci\u00f3n debido a una incompatibilidad, se notificar\u00e1 expresamente cual es esta para permitir al integrador trasladar los mensajes oportunos al usuario. Ejemplos de incompatibilidad son: Versi\u00f3n inferior a la necesaria de BouncyCastle. Falta de extensi\u00f3n imprescindible en el JRE en ejecuci\u00f3n. Las \u201cautocomprobaciones de entorno por funci\u00f3n\u201d planteadas para la versi\u00f3n 1.1 implican una evoluci\u00f3n de los m\u00f3dulos subyacentes (pr\u00e1cticamente todos: desde el n\u00facleo hasta la gesti\u00f3n de almacenes, pasando por los de firma). Soporte avanzado de codificaciones de texto Se ampliar\u00e1 la funcionalidad de aquellos m\u00e9todos que permiten la configuraci\u00f3n de la codificaci\u00f3n de texto que se debe utilizar para que soporten par\u00e1metros especiales que permitan: La detecci\u00f3n de la codificaci\u00f3n a partir del texto de entrada. Esta detecci\u00f3n est\u00e1 sujeta a errores debido a la ambig\u00fcedad existente en muchas codificaciones cuando no aparecen caracteres en los que difieran. La codificaci\u00f3n del texto a partir de la codificaci\u00f3n por defecto del sistema. Filtro de certificados cualificados Se crear\u00e1 un nuevo filtro para la selecci\u00f3n de certificados de firma cualificados. A partir del n\u00famero de serie de un certificado, se buscar\u00e1 si este tiene un certificado asociado y cualificado para firma si es as\u00ed, se utilizar\u00e1 el certificado asociado. Si no se encuentra este certificado se utilizar\u00e1 el certificado al que pertenece el n\u00famero de serie. La detecci\u00f3n del certificado asociado se realizar\u00e1 siguiendo determinados criterios, muy especialmente: Autoridad de certificaci\u00f3n: Ambos certificados deben pertenecer a la misma autoridad de certificaci\u00f3n. N\u00famero de serie del Subject: Se buscar\u00e1 que el n\u00famero de serie del Subject de ambos certificados coincida. Nombre del Subject: Ser\u00e1 preferible que el nombre com\u00fan (CN) del Subject de ambos certificados sea el mismo. Es posible que esto no ocurra en certificados asociados. Por ejemplo, en el DNIe el nombre del Subject del certificado de firma incluye la cadena \u201c(FIRMA)\u201d mientras que en el de autenticaci\u00f3n aparece la cadena \u201c(AUTENTICACI\u00d3N)\u201d. Ejemplos avanzados de uso en documentaci\u00f3n Ejemplos avanzados de uso desarrollados a partir de los trabajos realizados por la AEAT para la integraci\u00f3n del MiniApplet en sus sistemas. Estos ejemplos se documentar\u00e1n y expondr\u00e1n como casos de uso avanzados. Versi\u00f3n 1.2 Soporte de facturas electr\u00f3nicas El soporte de facturas electr\u00f3nicas planteado para la versi\u00f3n 1.2 consistir\u00eda en una \u201cmacro\u201d que simplifique la configuraci\u00f3n para facturas (una \u00fanica orden seleccionar\u00eda el formato, comprobar\u00eda si es o no una factura lo que se firma, configurar\u00eda la pol\u00edtica, etc.). Incorporaci\u00f3n soporte DNIe 100% Java Esta tarea consiste en la integraci\u00f3n en la herramienta de un controlador Java para DNIe. Este controlador se utilizar\u00e1 por defecto para el acceso al DNIe del usuario. En caso de no estar insertado este en un lector de tarjetas configurado, se cargar\u00e1 el almac\u00e9n de claves por defecto del sistema. El uso de este controlador permitir\u00e1 listar \u00fanicamente los certificados del DNIe y utilizarlos sin necesidad de que se haya instalado el controlador del DNIe en el sistema del usuario. Evoluci\u00f3n del Applet @firma Versi\u00f3n 3.3.1 Mantenimiento general Esta tarea consistir\u00e1 en un conjunto de actividades de mantenimiento orientadas a la optimizaci\u00f3n del proyecto y cambios debidos, entre otros, a: Nuevos requisitos del proyecto. Aparici\u00f3n de nuevas versiones de Java, navegadores Web,\u2026 Actualizaci\u00f3n de pol\u00edticas de firma. Nuevas versiones de formatos de firma. Mejora en la gesti\u00f3n de almacenes PKCS#12 Esta mejora permitir\u00e1 el uso de almacenes de certificados PKCS#12 con una configuraci\u00f3n distinta a la por defecto. Actualmente el Cliente no soporta almacenes PKCS#12 en los que: Se ha cambiado la contrase\u00f1a inicial. Se ha importado m\u00e1s de un certificado. Esto es \u00fatil para el uso de un \u00fanico almac\u00e9n que podamos transportar en almacenamiento f\u00edsico y en el que se hayan importado nuestros certificados, normalmente, autenticaci\u00f3n y firma. La mejora permitir\u00e1 utilizar los certificados de los almacenes PKCS#12 aun cuando se cumpla alguno de los casos problem\u00e1ticos mencionados. Versi\u00f3n 3.3.2 Soporte de facturas electr\u00f3nicas El soporte de facturas electr\u00f3nicas planteado para la versi\u00f3n 1.2 consistir\u00eda en una \u201cmacro\u201d que simplifique la configuraci\u00f3n para facturas (una \u00fanica orden seleccionar\u00eda el formato, comprobar\u00eda si es o no una factura lo que se firma, configurar\u00eda la pol\u00edtica, etc.). Paso a Java 6 como versi\u00f3n m\u00ednima de JRE Se propone el abandono de Java 5 como versi\u00f3n m\u00ednima de JRE, pasando esta a ser Java 6, lo cual conlleva: Posibilidad de uso de funcionalidades y clases \u00fanicamente existentes en Java 6. Desaparici\u00f3n del componente \u201cBootLoader\u201d, cuya principal funci\u00f3n es la compatibilidad con Java 5. Simplifica el despliegue, evitando los problemas derivados del arranque de dos m\u00e1quinas virtuales en la misma p\u00e1gina Web. Simplifica el licenciado, eliminando los problemas de incluir componentes del JDK con licencia \u201cJava Research\u201d u otras incompatibles con GPLv2/EUPL. Incorporaci\u00f3n soporte DNIe 100% Java Esta tarea consiste en la integraci\u00f3n en la herramienta de un controlador Java para DNIe. El soporte de este dispositivo se reflejar\u00e1 en la aparici\u00f3n de un nuevo almac\u00e9n de certificados, con la nomenclatura \u201cDNIe\u201d, disponible para su configuraci\u00f3n por parte del integrador. El uso de este controlador permitir\u00e1 listar \u00fanicamente los certificados del DNIe y utilizarlos sin necesidad de que se haya instalado el controlador del DNIe en el sistema del usuario. Adaptaci\u00f3n a la nueva pol\u00edtica de firma de la AGE La nueva versi\u00f3n de la pol\u00edtica de la AGE introduce los criterios para el uso del formato de firma PAdES. Esta tarea deber\u00e1 compatibilidad el Cliente @firma para la generaci\u00f3n de firmas compatibles con los criterios establecidos por esta pol\u00edtica. As\u00ed mismo, se ampliar\u00e1 el comportamiento del Cliente @firma para su compatibilidad con los distintos atributos opcionales comprendidos por la pol\u00edtica. Se excluyen de estos atributos aquellos para los que se necesita conexi\u00f3n con servicios externos como, por ejemplo, los atributos que incluyen un sello de tiempo. Mejoras funcionales en los m\u00f3dulos del Cliente @firma Soporte de firmas en ficheros adjuntos o empotrados en ficheros PDF en concordancia con las secciones 4 y 5 de PAdES Actualmente, la firma PAdES de documentos PDF ignora los ficheros adjuntos o empotrados en los propios documentos, aunque la norma PAdES especifica que estos ficheros deben ser firmados de forma independiente, mediante CAdES o XAdES seg\u00fan su tipo (XML con XAdES y distinto a XML con CAdES). La tarea propuesta consistir\u00e1 en el a\u00f1adido a los actuales m\u00f3dulos de firma PAdES de estas funcionalidades, a\u00f1adiendo los mecanismos necesarios para que el integrador pueda desactivar la firma de ficheros adjuntos o empotrados si as\u00ed lo prefiere. Soporte para agregaci\u00f3n de almacenes de certificados software con el almac\u00e9n de DNIe basado en el controlador 100% Java Hay ciertas ocasiones en las que es necesario que los certificados del DNIe est\u00e9n disponibles dentro de un cierto almac\u00e9n (NSS en Firefox, Llavero en Mac OS X, CAPI en Windows, etc.) pero que no lo est\u00e1n debido a ciertas circunstancias: El controlador de DNIe no est\u00e1 correctamente instalado o directamente no est\u00e1 instalado. El controlador de DNIe no se puede cargar desde el Cliente @firma. El controlador de DNIe no es compatible con el almac\u00e9n cargado (CSP vs. Tokend vs. PKCS#11). Etc. Esta tarea propone el uso de controlador 100% Java para DNIe como fuente de los certificados y claves de DNIe y que sea posible integrar estos dentro de un segundo almac\u00e9n de forma transparente para el integrador y el usuario. Se propone una secuencia de operaci\u00f3n similar a la siguiente: Material de formaci\u00f3n Se reunir\u00e1 y redactar\u00e1 material formativo para agregarla a la documentaci\u00f3n del proyecto. Esta documentaci\u00f3n ir\u00e1 orientada a ayudar a las distintas oficinas que den soporte a integradores y usuarios del Cliente @firma y mostrar las nuevas caracter\u00edsticas y herramientas construidas en base a \u00e9l. Los aspectos en los que incidir\u00e1 principalmente este material son: Requisitos m\u00ednimos y problemas de entorno. Despliegue del Cliente y uso del Cliente. Mejoras en la funcionalidad. Herramientas que se han construido entorno al Cliente. MiniApplet @firma SimpleAfirma Interfaz de escritorio 2.0 Desarrollos nativos en C (Objetivo principal: Soporte de Apple iOS \u2013 iPhone / iPad / iPod) Motor de firma CAdES en C gen\u00e9rico Se prev\u00e9 la construcci\u00f3n de un motor de firma CAdES en lenguaje C completamente independiente de la plataforma. Un desarrollo en C codificado de forma cuidadosa (uso de macros para independencia de tipos, codificaci\u00f3n de funciones a medida para soporte tanto de Little Endian como de Big Endian , etc.) puede reutilizarse sin cambios en muchas plataformas distintas. En cualquier caso, ciertas funcionalidades, como la firma PKCS#1 o el acceso a los almacenes de certificados quedar\u00e1n siempre como parte dependiente de la plataforma. iOS iOS es la plataforma destino preferente para un motor de firma CAdES. Este motor permitir\u00e1 el desarrollo de una aplicaci\u00f3n iOS que permita ser usada tanto desde el navegador Web (Safari / WebKit) como por si misma (con su interfaz gr\u00e1fico). Desarrollos adicionales al motor: Generaci\u00f3n de firmas CAdES. Gesti\u00f3n de almacenes de claves y certificados. Incluyendo importaci\u00f3n. Gesti\u00f3n de comunicaci\u00f3n con navegador Web. Interfaz gr\u00e1fico iOS compatible tanto con iPhone/iPod como con iPad. Modo de operaci\u00f3n en dispositivo m\u00f3vil Cada plataforma m\u00f3vil es muy diferente a las otras, y sin embargo es posible dise\u00f1ar componentes software y de arquitectura que se reutilicen entre todas. Se propone la definici\u00f3n de un modo de operaci\u00f3n que pueda ser extensible a cualquier plataforma, incluyendo Apple iOS, RIM BlackBerry, Google Android y Microsoft Windows Phone, y que adem\u00e1s se pueda hacer extensiva a los sistemas operativos de escritorio, como MS-Windows, Linux o Mac OS X con extensiones nativas. Son dos las opciones principales a explorar: Definici\u00f3n de un protocolo propio basado en URL que permita la transferencia de control desde una p\u00e1gina Web a una aplicaci\u00f3n externa. Por ejemplo, una llamada a afirma:// podr\u00eda arrancar la aplicaci\u00f3n, que recoger\u00eda sus par\u00e1metros de operaci\u00f3n de la propia URL ( URL Encoding ). Definici\u00f3n de un tipo de fichero propio (con una extensi\u00f3n y un MIME-Type propios) que permitiese, por asociaci\u00f3n, arrancar la aplicaci\u00f3n de firma. El fichero contendr\u00eda los par\u00e1metros operativos de esta. Convendr\u00eda, tras la definici\u00f3n del mecanismo m\u00e1s adecuado, una evoluci\u00f3n del MiniApplet para soportarlo. @firma en Android / Apache Dalvik Aplicaci\u00f3n completa. Aplicaci\u00f3n con interfaz gr\u00e1fico para firmar ficheros, usando la tarjeta de memoria SD como medio de entrada/salida de ficheros a firmar. Motor PAdES Adaptaci\u00f3n de los m\u00f3dulos a Android 4. Gesti\u00f3n de almacenes de claves y certificados. Medios de sincronizaci\u00f3n de ficheros @firma en .NET Motor de firma CAdES. Aplicaci\u00f3n Windows de escritorio compatible Windows 8 MarketPlace Firma Trif\u00e1sica Ver documento adicional \u201cFirmas Electr\u00f3nicas en varias fases\u201d. Se debe plantear la posibilidad de soportar no solo CAdES y PAdES, sino tambi\u00e9n XAdES.","title":"CF roadmap ES"},{"location":"markdown_strict/CF_roadmap_ES/#version-21","text":"","title":"Versi\u00f3n 2.1"},{"location":"markdown_strict/CF_roadmap_ES/#cambios-en-el-establecimiento-de-politica-de-firma","text":"La mejora en el establecimiento de pol\u00edtica de firma propuesta para la versi\u00f3n 2.1 consistir\u00eda en la solicitud, v\u00eda di\u00e1logo de configuraci\u00f3n (opciones) de los distintos campos que pueden figurar en una pol\u00edtica AdES (identificador, huella digital del identificador, algoritmo utilizado para la huella y calificador al menos). La pol\u00edtica por defecto se guardar\u00e1 junto al resto de opciones de usuario. Adem\u00e1s, el usuario podr\u00e1 seleccionar una pol\u00edtica preconfigurada (AGE o FacturaE) de modo que no tenga que teclear manualmente los valores.","title":"Cambios en el establecimiento de pol\u00edtica de firma"},{"location":"markdown_strict/CF_roadmap_ES/#multifirmas-de-firmas-implicitas","text":"La mejora en la funcionalidad para las multifirmas de firmas impl\u00edcitas consiste en: Dar la posibilidad al usuario de, cuando se va a realizar una cofirma o contrafirma, extraer y visualizar los datos originalmente firmados. Cofirmar una firma sin necesidad de seleccionar los datos originalmente firmados cuando estos ya estuviesen incluidos dentro de la propia firma.","title":"Multifirmas de firmas impl\u00edcitas"},{"location":"markdown_strict/CF_roadmap_ES/#mejora-de-experiencia-de-usuario","text":"La mejora de experiencia de usuario propuesta para la versi\u00f3n 2.1 consistir\u00eda principalmente en una revisi\u00f3n de como se gestionan en el interfaz gr\u00e1fico las tareas de proceso de la aplicaci\u00f3n, introduciendo hilos de ejecuci\u00f3n para pasar a segundo plano ciertos procesos, usar di\u00e1logos de espera e introducir cursores de espera (reloj de arena). Tambi\u00e9n se automatizar\u00e1n o agilizar\u00e1n algunas tareas como, por ejemplo, la asignaci\u00f3n de extensiones por defecto a los ficheros descifrados.","title":"Mejora de experiencia de usuario"},{"location":"markdown_strict/CF_roadmap_ES/#mejora-de-la-documentacion","text":"Se agregar\u00e1 a la documentaci\u00f3n del proyecto informaci\u00f3n adicional de utilidad para el usuario final. Esta mejora incluye: Proceso de instalaci\u00f3n del controlador del DNIe mediante el instalador accesible de Inteco, Proceso de instalaci\u00f3n del OpenDNIe.","title":"Mejora de la documentaci\u00f3n"},{"location":"markdown_strict/CF_roadmap_ES/#soporte-para-la-validacion-de-firmas-explicitas","text":"Se ampliar\u00e1 la funcionalidad del validador de la interfaz para el soporte de firmas expl\u00edcitas. Cuando se detecte una firma sin contenido impl\u00edcito, se pedir\u00e1 al usuario que seleccione el fichero de datos en base al que se gener\u00f3 la firma para poder validarla al completo. Cuando el usuario selecciona el fichero se validar\u00e1 con respecto a estos datos y se mostrar\u00e1 el resultado de la validaci\u00f3n. Si el usuario no selecciona el di\u00e1logo, se validar\u00e1 el resto de la estructura y, en caso de ser correcta, se mostrar\u00e1 una advertencia indicando que no se ha podido completar la validaci\u00f3n debido a que faltan los datos firmados.","title":"Soporte para la validaci\u00f3n de firmas expl\u00edcitas"},{"location":"markdown_strict/CF_roadmap_ES/#decodificacion-de-datos-base-64-extraidos-de-firmas-implicitas","text":"Existen aplicaciones de firma que codifican los datos a base 64 para firmarlos sin declarar la transformaci\u00f3n, con lo cual firman la versi\u00f3n codificada de estos datos en lugar de los datos originales. Aunque el comportamiento por defecto ser\u00eda extraer estos datos tal como se firmaron, esto plantear\u00eda un problema para el usuario final que desea recuperar los datos originales. Se agregar\u00e1 a la aplicaci\u00f3n la l\u00f3gica necesaria para que se detecte si los datos firmados son base 64 y, en esos casos, se descodifiquen al extraerlos de la firma.","title":"Decodificaci\u00f3n de datos base 64 extra\u00eddos de firmas impl\u00edcitas"},{"location":"markdown_strict/CF_roadmap_ES/#version-22","text":"","title":"Versi\u00f3n 2.2"},{"location":"markdown_strict/CF_roadmap_ES/#soporte-de-factura-electronica","text":"El soporte de factura electr\u00f3nica (Factura-e) planificado para la versi\u00f3n 2.2 consiste en la introducci\u00f3n de un nuevo formato de firma espec\u00edfico para facturas electr\u00f3nicas. Al seleccionar este formato se comprobar\u00e1 que los datos se ajustan a la estructura b\u00e1sica de una factura electr\u00f3nica y se preguntar\u00e1 al usuario qu\u00e9 pol\u00edtica de firma se desea utilizar para firmarla (por defecto, la versi\u00f3n 3.1 de la pol\u00edtica).","title":"Soporte de factura electr\u00f3nica"},{"location":"markdown_strict/CF_roadmap_ES/#incorporacion-soporte-dnie-100-java","text":"Esta tarea consiste en la integraci\u00f3n en la herramienta de un controlador Java para DNIe. El soporte de este dispositivo se reflejar\u00e1 en la aparici\u00f3n de un nuevo almac\u00e9n de certificados, con la nomenclatura \u201cDNIe\u201d, disponible tanto desde la vista simple como avanzada de la interfaz de escritorio. Los usuarios podr\u00e1n seleccionar este almac\u00e9n de certificados para que se invoque a este controlador. El uso de este controlador permitir\u00e1 listar \u00fanicamente los certificados del DNIe y utilizarlos sin necesidad de que se haya instalado el controlador del DNIe en el sistema del usuario.","title":"Incorporaci\u00f3n soporte DNIe 100% Java"},{"location":"markdown_strict/CF_roadmap_ES/#mejora-del-sistema-de-notificacion-de-errores","text":"Se estructurar\u00e1 el mecanismo de notificaci\u00f3n de errores para ofrecer al usuario mensajes m\u00e1s concretos que le ayuden a entender el motivo de cualquier error que pueda haberse producido durante la ejecuci\u00f3n de cualquier operaci\u00f3n criptogr\u00e1fica: Firma electr\u00f3nica, configuraci\u00f3n de par\u00e1metros de firma, acceso a un almac\u00e9n de certificados, cifrado sim\u00e9trico\u2026","title":"Mejora del sistema de notificaci\u00f3n de errores"},{"location":"markdown_strict/CF_roadmap_ES/#evolucion-de-la-aplicacion-de-escritorio-firma-facil-con-firma","text":"","title":"Evoluci\u00f3n de la aplicaci\u00f3n de escritorio \u201cFirma F\u00e1cil con @firma\u201d"},{"location":"markdown_strict/CF_roadmap_ES/#version-11","text":"","title":"Versi\u00f3n 1.1"},{"location":"markdown_strict/CF_roadmap_ES/#incorporacion-soporte-dnie-100-java_1","text":"Esta tarea consiste en la integraci\u00f3n en la herramienta de un controlador Java para DNIe. Este controlador se utilizar\u00e1 por defecto para el acceso al DNIe del usuario. En caso de no estar insertado este en un lector de tarjetas configurado, se cargar\u00e1 el almac\u00e9n de claves por defecto del sistema. El uso de este controlador permitir\u00e1 listar \u00fanicamente los certificados del DNIe y utilizarlos sin necesidad de que se haya instalado el controlador del DNIe en el sistema del usuario.","title":"Incorporaci\u00f3n soporte DNIe 100% Java"},{"location":"markdown_strict/CF_roadmap_ES/#soporte-configuraciones-de-usuario-menu-opciones","text":"El soporte de configuraciones de usuario propuesto para la versi\u00f3n 1.1 supondr\u00eda la adici\u00f3n de un men\u00fa de opciones con una serie de di\u00e1logos donde el usuario podr\u00e1 modificar ciertos par\u00e1metros de la ejecuci\u00f3n del programa (por ejemplo, configurar una pol\u00edtica de firma, indicar si las firmas CAdES deben o no incluir internamente una copia del contenido, etc.). Estas opciones se podr\u00e1n salvar (por usuario), y no introducir\u00e1n ning\u00fan cambio en la operativa de firma.","title":"Soporte configuraciones de usuario (men\u00fa opciones)"},{"location":"markdown_strict/CF_roadmap_ES/#mejoras-menores-en-accesibilidad","text":"Las mejoras menores en accesibilidad propuestas para la versi\u00f3n 1.1 consistir\u00edan en una adecuaci\u00f3n en el comportamiento de las barras de men\u00fa en sistemas Windows y Linux (nunca en Mac OS X) de modo que sigan la operativa normal de Windows posibilitando su uso con las teclas Alt, Enter y las flechas de cursor (aspecto que los men\u00fas de Java no soportan).","title":"Mejoras menores en accesibilidad"},{"location":"markdown_strict/CF_roadmap_ES/#decodificacion-de-datos-base-64-extraidos-de-firmas-implicitas_1","text":"Existen aplicaciones de firma que codifican los datos a base 64 para firmarlos sin declarar la transformaci\u00f3n, con lo cual firman la versi\u00f3n codificada de estos datos en lugar de los datos originales. Aunque el comportamiento por defecto ser\u00eda extraer estos datos tal como se firmaron, esto plantear\u00eda un problema para el usuario final que desea recuperar los datos originales. Se agregar\u00e1 a la aplicaci\u00f3n la l\u00f3gica necesaria para que se detecte si los datos firmados son base 64 y, en esos casos, se descodifiquen al extraerlos de la firma.","title":"Decodificaci\u00f3n de datos base 64 extra\u00eddos de firmas impl\u00edcitas"},{"location":"markdown_strict/CF_roadmap_ES/#version-111","text":"","title":"Versi\u00f3n 1.11"},{"location":"markdown_strict/CF_roadmap_ES/#splashscreen-animado","text":"Esta tarea consiste en el dise\u00f1o e integraci\u00f3n de una imagen animada que permita saber a los usuarios cuando la aplicaci\u00f3n est\u00e1 carg\u00e1ndose. La imagen de carga animada mejorar\u00e1 la experiencia de usuario eliminando tiempos en los que usuario puede percibir que la aplicaci\u00f3n no responde como deber\u00eda.","title":"SplashScreen animado"},{"location":"markdown_strict/CF_roadmap_ES/#evolucion-del-miniapplet-firma","text":"","title":"Evoluci\u00f3n del MiniApplet @firma"},{"location":"markdown_strict/CF_roadmap_ES/#version-11_1","text":"","title":"Versi\u00f3n 1.1"},{"location":"markdown_strict/CF_roadmap_ES/#soporte-de-firmas-masivas-via-javascript","text":"Se proporcionar\u00e1 al integrador las bibliotecas JavaScript necesarias para la automatizaci\u00f3n de firmas masivas. Para ello tambi\u00e9n ser\u00e1 necesario permitir que s\u00f3lo se deba seleccionar el certificado de usuario durante la primera operaci\u00f3n de firma. La configuraci\u00f3n de esta autoselecci\u00f3n del certificado de firma en sucesivas operaciones se realizar\u00e1 mediante un filtro de certificados especial para este fin.","title":"Soporte de firmas masivas v\u00eda JavaScript"},{"location":"markdown_strict/CF_roadmap_ES/#autocomprobaciones-de-entorno-por-funcion","text":"La versi\u00f3n 1.1 del MiniApplet integrar\u00e1 un sistema de comprobaci\u00f3n del sistema en todas aquellas funciones en las que existan riesgo de incompatibilidades. De esta forma, el MiniApplet se ejecutar\u00e1 normalmente en un sistema que presente incompatibilidades con una funci\u00f3n concreta y, s\u00f3lo si se requiere de esta funci\u00f3n se producir\u00e1 un error de incompatibilidad. Las incompatibilidades estar\u00e1n claramente definidas y, cuando falle la ejecuci\u00f3n de una funci\u00f3n debido a una incompatibilidad, se notificar\u00e1 expresamente cual es esta para permitir al integrador trasladar los mensajes oportunos al usuario. Ejemplos de incompatibilidad son: Versi\u00f3n inferior a la necesaria de BouncyCastle. Falta de extensi\u00f3n imprescindible en el JRE en ejecuci\u00f3n. Las \u201cautocomprobaciones de entorno por funci\u00f3n\u201d planteadas para la versi\u00f3n 1.1 implican una evoluci\u00f3n de los m\u00f3dulos subyacentes (pr\u00e1cticamente todos: desde el n\u00facleo hasta la gesti\u00f3n de almacenes, pasando por los de firma).","title":"Autocomprobaciones de entorno por funci\u00f3n"},{"location":"markdown_strict/CF_roadmap_ES/#soporte-avanzado-de-codificaciones-de-texto","text":"Se ampliar\u00e1 la funcionalidad de aquellos m\u00e9todos que permiten la configuraci\u00f3n de la codificaci\u00f3n de texto que se debe utilizar para que soporten par\u00e1metros especiales que permitan: La detecci\u00f3n de la codificaci\u00f3n a partir del texto de entrada. Esta detecci\u00f3n est\u00e1 sujeta a errores debido a la ambig\u00fcedad existente en muchas codificaciones cuando no aparecen caracteres en los que difieran. La codificaci\u00f3n del texto a partir de la codificaci\u00f3n por defecto del sistema.","title":"Soporte avanzado de codificaciones de texto"},{"location":"markdown_strict/CF_roadmap_ES/#filtro-de-certificados-cualificados","text":"Se crear\u00e1 un nuevo filtro para la selecci\u00f3n de certificados de firma cualificados. A partir del n\u00famero de serie de un certificado, se buscar\u00e1 si este tiene un certificado asociado y cualificado para firma si es as\u00ed, se utilizar\u00e1 el certificado asociado. Si no se encuentra este certificado se utilizar\u00e1 el certificado al que pertenece el n\u00famero de serie. La detecci\u00f3n del certificado asociado se realizar\u00e1 siguiendo determinados criterios, muy especialmente: Autoridad de certificaci\u00f3n: Ambos certificados deben pertenecer a la misma autoridad de certificaci\u00f3n. N\u00famero de serie del Subject: Se buscar\u00e1 que el n\u00famero de serie del Subject de ambos certificados coincida. Nombre del Subject: Ser\u00e1 preferible que el nombre com\u00fan (CN) del Subject de ambos certificados sea el mismo. Es posible que esto no ocurra en certificados asociados. Por ejemplo, en el DNIe el nombre del Subject del certificado de firma incluye la cadena \u201c(FIRMA)\u201d mientras que en el de autenticaci\u00f3n aparece la cadena \u201c(AUTENTICACI\u00d3N)\u201d.","title":"Filtro de certificados cualificados"},{"location":"markdown_strict/CF_roadmap_ES/#ejemplos-avanzados-de-uso-en-documentacion","text":"Ejemplos avanzados de uso desarrollados a partir de los trabajos realizados por la AEAT para la integraci\u00f3n del MiniApplet en sus sistemas. Estos ejemplos se documentar\u00e1n y expondr\u00e1n como casos de uso avanzados.","title":"Ejemplos avanzados de uso en documentaci\u00f3n"},{"location":"markdown_strict/CF_roadmap_ES/#version-12","text":"","title":"Versi\u00f3n 1.2"},{"location":"markdown_strict/CF_roadmap_ES/#soporte-de-facturas-electronicas","text":"El soporte de facturas electr\u00f3nicas planteado para la versi\u00f3n 1.2 consistir\u00eda en una \u201cmacro\u201d que simplifique la configuraci\u00f3n para facturas (una \u00fanica orden seleccionar\u00eda el formato, comprobar\u00eda si es o no una factura lo que se firma, configurar\u00eda la pol\u00edtica, etc.).","title":"Soporte de facturas electr\u00f3nicas"},{"location":"markdown_strict/CF_roadmap_ES/#incorporacion-soporte-dnie-100-java_2","text":"Esta tarea consiste en la integraci\u00f3n en la herramienta de un controlador Java para DNIe. Este controlador se utilizar\u00e1 por defecto para el acceso al DNIe del usuario. En caso de no estar insertado este en un lector de tarjetas configurado, se cargar\u00e1 el almac\u00e9n de claves por defecto del sistema. El uso de este controlador permitir\u00e1 listar \u00fanicamente los certificados del DNIe y utilizarlos sin necesidad de que se haya instalado el controlador del DNIe en el sistema del usuario.","title":"Incorporaci\u00f3n soporte DNIe 100% Java"},{"location":"markdown_strict/CF_roadmap_ES/#evolucion-del-applet-firma","text":"","title":"Evoluci\u00f3n del Applet @firma"},{"location":"markdown_strict/CF_roadmap_ES/#version-331","text":"","title":"Versi\u00f3n 3.3.1"},{"location":"markdown_strict/CF_roadmap_ES/#mantenimiento-general","text":"Esta tarea consistir\u00e1 en un conjunto de actividades de mantenimiento orientadas a la optimizaci\u00f3n del proyecto y cambios debidos, entre otros, a: Nuevos requisitos del proyecto. Aparici\u00f3n de nuevas versiones de Java, navegadores Web,\u2026 Actualizaci\u00f3n de pol\u00edticas de firma. Nuevas versiones de formatos de firma.","title":"Mantenimiento general"},{"location":"markdown_strict/CF_roadmap_ES/#mejora-en-la-gestion-de-almacenes-pkcs12","text":"Esta mejora permitir\u00e1 el uso de almacenes de certificados PKCS#12 con una configuraci\u00f3n distinta a la por defecto. Actualmente el Cliente no soporta almacenes PKCS#12 en los que: Se ha cambiado la contrase\u00f1a inicial. Se ha importado m\u00e1s de un certificado. Esto es \u00fatil para el uso de un \u00fanico almac\u00e9n que podamos transportar en almacenamiento f\u00edsico y en el que se hayan importado nuestros certificados, normalmente, autenticaci\u00f3n y firma. La mejora permitir\u00e1 utilizar los certificados de los almacenes PKCS#12 aun cuando se cumpla alguno de los casos problem\u00e1ticos mencionados.","title":"Mejora en la gesti\u00f3n de almacenes PKCS#12"},{"location":"markdown_strict/CF_roadmap_ES/#version-332","text":"","title":"Versi\u00f3n 3.3.2"},{"location":"markdown_strict/CF_roadmap_ES/#soporte-de-facturas-electronicas_1","text":"El soporte de facturas electr\u00f3nicas planteado para la versi\u00f3n 1.2 consistir\u00eda en una \u201cmacro\u201d que simplifique la configuraci\u00f3n para facturas (una \u00fanica orden seleccionar\u00eda el formato, comprobar\u00eda si es o no una factura lo que se firma, configurar\u00eda la pol\u00edtica, etc.).","title":"Soporte de facturas electr\u00f3nicas"},{"location":"markdown_strict/CF_roadmap_ES/#paso-a-java-6-como-version-minima-de-jre","text":"Se propone el abandono de Java 5 como versi\u00f3n m\u00ednima de JRE, pasando esta a ser Java 6, lo cual conlleva: Posibilidad de uso de funcionalidades y clases \u00fanicamente existentes en Java 6. Desaparici\u00f3n del componente \u201cBootLoader\u201d, cuya principal funci\u00f3n es la compatibilidad con Java 5. Simplifica el despliegue, evitando los problemas derivados del arranque de dos m\u00e1quinas virtuales en la misma p\u00e1gina Web. Simplifica el licenciado, eliminando los problemas de incluir componentes del JDK con licencia \u201cJava Research\u201d u otras incompatibles con GPLv2/EUPL.","title":"Paso a Java 6 como versi\u00f3n m\u00ednima de JRE"},{"location":"markdown_strict/CF_roadmap_ES/#incorporacion-soporte-dnie-100-java_3","text":"Esta tarea consiste en la integraci\u00f3n en la herramienta de un controlador Java para DNIe. El soporte de este dispositivo se reflejar\u00e1 en la aparici\u00f3n de un nuevo almac\u00e9n de certificados, con la nomenclatura \u201cDNIe\u201d, disponible para su configuraci\u00f3n por parte del integrador. El uso de este controlador permitir\u00e1 listar \u00fanicamente los certificados del DNIe y utilizarlos sin necesidad de que se haya instalado el controlador del DNIe en el sistema del usuario.","title":"Incorporaci\u00f3n soporte DNIe 100% Java"},{"location":"markdown_strict/CF_roadmap_ES/#adaptacion-a-la-nueva-politica-de-firma-de-la-age","text":"La nueva versi\u00f3n de la pol\u00edtica de la AGE introduce los criterios para el uso del formato de firma PAdES. Esta tarea deber\u00e1 compatibilidad el Cliente @firma para la generaci\u00f3n de firmas compatibles con los criterios establecidos por esta pol\u00edtica. As\u00ed mismo, se ampliar\u00e1 el comportamiento del Cliente @firma para su compatibilidad con los distintos atributos opcionales comprendidos por la pol\u00edtica. Se excluyen de estos atributos aquellos para los que se necesita conexi\u00f3n con servicios externos como, por ejemplo, los atributos que incluyen un sello de tiempo.","title":"Adaptaci\u00f3n a la nueva pol\u00edtica de firma de la AGE"},{"location":"markdown_strict/CF_roadmap_ES/#mejoras-funcionales-en-los-modulos-del-cliente-firma","text":"","title":"Mejoras funcionales en los m\u00f3dulos del Cliente @firma"},{"location":"markdown_strict/CF_roadmap_ES/#soporte-de-firmas-en-ficheros-adjuntos-o-empotrados-en-ficheros-pdf-en-concordancia-con-las-secciones-4-y-5-de-pades","text":"Actualmente, la firma PAdES de documentos PDF ignora los ficheros adjuntos o empotrados en los propios documentos, aunque la norma PAdES especifica que estos ficheros deben ser firmados de forma independiente, mediante CAdES o XAdES seg\u00fan su tipo (XML con XAdES y distinto a XML con CAdES). La tarea propuesta consistir\u00e1 en el a\u00f1adido a los actuales m\u00f3dulos de firma PAdES de estas funcionalidades, a\u00f1adiendo los mecanismos necesarios para que el integrador pueda desactivar la firma de ficheros adjuntos o empotrados si as\u00ed lo prefiere.","title":"Soporte de firmas en ficheros adjuntos o empotrados en ficheros PDF en concordancia con las secciones 4 y 5 de PAdES"},{"location":"markdown_strict/CF_roadmap_ES/#soporte-para-agregacion-de-almacenes-de-certificados-software-con-el-almacen-de-dnie-basado-en-el-controlador-100-java","text":"Hay ciertas ocasiones en las que es necesario que los certificados del DNIe est\u00e9n disponibles dentro de un cierto almac\u00e9n (NSS en Firefox, Llavero en Mac OS X, CAPI en Windows, etc.) pero que no lo est\u00e1n debido a ciertas circunstancias: El controlador de DNIe no est\u00e1 correctamente instalado o directamente no est\u00e1 instalado. El controlador de DNIe no se puede cargar desde el Cliente @firma. El controlador de DNIe no es compatible con el almac\u00e9n cargado (CSP vs. Tokend vs. PKCS#11). Etc. Esta tarea propone el uso de controlador 100% Java para DNIe como fuente de los certificados y claves de DNIe y que sea posible integrar estos dentro de un segundo almac\u00e9n de forma transparente para el integrador y el usuario. Se propone una secuencia de operaci\u00f3n similar a la siguiente:","title":"Soporte para agregaci\u00f3n de almacenes de certificados software con el almac\u00e9n de DNIe basado en el controlador 100% Java"},{"location":"markdown_strict/CF_roadmap_ES/#material-de-formacion","text":"Se reunir\u00e1 y redactar\u00e1 material formativo para agregarla a la documentaci\u00f3n del proyecto. Esta documentaci\u00f3n ir\u00e1 orientada a ayudar a las distintas oficinas que den soporte a integradores y usuarios del Cliente @firma y mostrar las nuevas caracter\u00edsticas y herramientas construidas en base a \u00e9l. Los aspectos en los que incidir\u00e1 principalmente este material son: Requisitos m\u00ednimos y problemas de entorno. Despliegue del Cliente y uso del Cliente. Mejoras en la funcionalidad. Herramientas que se han construido entorno al Cliente. MiniApplet @firma SimpleAfirma Interfaz de escritorio 2.0","title":"Material de formaci\u00f3n"},{"location":"markdown_strict/CF_roadmap_ES/#desarrollos-nativos-en-c-objetivo-principal-soporte-de-apple-ios-iphone-ipad-ipod","text":"","title":"Desarrollos nativos en C (Objetivo principal: Soporte de Apple iOS \u2013 iPhone / iPad / iPod)"},{"location":"markdown_strict/CF_roadmap_ES/#motor-de-firma-cades-en-c-generico","text":"Se prev\u00e9 la construcci\u00f3n de un motor de firma CAdES en lenguaje C completamente independiente de la plataforma. Un desarrollo en C codificado de forma cuidadosa (uso de macros para independencia de tipos, codificaci\u00f3n de funciones a medida para soporte tanto de Little Endian como de Big Endian , etc.) puede reutilizarse sin cambios en muchas plataformas distintas. En cualquier caso, ciertas funcionalidades, como la firma PKCS#1 o el acceso a los almacenes de certificados quedar\u00e1n siempre como parte dependiente de la plataforma.","title":"Motor de firma CAdES en C gen\u00e9rico"},{"location":"markdown_strict/CF_roadmap_ES/#ios","text":"iOS es la plataforma destino preferente para un motor de firma CAdES. Este motor permitir\u00e1 el desarrollo de una aplicaci\u00f3n iOS que permita ser usada tanto desde el navegador Web (Safari / WebKit) como por si misma (con su interfaz gr\u00e1fico). Desarrollos adicionales al motor: Generaci\u00f3n de firmas CAdES. Gesti\u00f3n de almacenes de claves y certificados. Incluyendo importaci\u00f3n. Gesti\u00f3n de comunicaci\u00f3n con navegador Web. Interfaz gr\u00e1fico iOS compatible tanto con iPhone/iPod como con iPad.","title":"iOS"},{"location":"markdown_strict/CF_roadmap_ES/#modo-de-operacion-en-dispositivo-movil","text":"Cada plataforma m\u00f3vil es muy diferente a las otras, y sin embargo es posible dise\u00f1ar componentes software y de arquitectura que se reutilicen entre todas. Se propone la definici\u00f3n de un modo de operaci\u00f3n que pueda ser extensible a cualquier plataforma, incluyendo Apple iOS, RIM BlackBerry, Google Android y Microsoft Windows Phone, y que adem\u00e1s se pueda hacer extensiva a los sistemas operativos de escritorio, como MS-Windows, Linux o Mac OS X con extensiones nativas. Son dos las opciones principales a explorar: Definici\u00f3n de un protocolo propio basado en URL que permita la transferencia de control desde una p\u00e1gina Web a una aplicaci\u00f3n externa. Por ejemplo, una llamada a afirma:// podr\u00eda arrancar la aplicaci\u00f3n, que recoger\u00eda sus par\u00e1metros de operaci\u00f3n de la propia URL ( URL Encoding ). Definici\u00f3n de un tipo de fichero propio (con una extensi\u00f3n y un MIME-Type propios) que permitiese, por asociaci\u00f3n, arrancar la aplicaci\u00f3n de firma. El fichero contendr\u00eda los par\u00e1metros operativos de esta. Convendr\u00eda, tras la definici\u00f3n del mecanismo m\u00e1s adecuado, una evoluci\u00f3n del MiniApplet para soportarlo.","title":"Modo de operaci\u00f3n en dispositivo m\u00f3vil"},{"location":"markdown_strict/CF_roadmap_ES/#firma-en-android-apache-dalvik","text":"Aplicaci\u00f3n completa. Aplicaci\u00f3n con interfaz gr\u00e1fico para firmar ficheros, usando la tarjeta de memoria SD como medio de entrada/salida de ficheros a firmar. Motor PAdES Adaptaci\u00f3n de los m\u00f3dulos a Android 4. Gesti\u00f3n de almacenes de claves y certificados. Medios de sincronizaci\u00f3n de ficheros","title":"@firma en Android / Apache Dalvik"},{"location":"markdown_strict/CF_roadmap_ES/#firma-en-net","text":"Motor de firma CAdES. Aplicaci\u00f3n Windows de escritorio compatible Windows 8 MarketPlace","title":"@firma en .NET"},{"location":"markdown_strict/CF_roadmap_ES/#firma-trifasica","text":"Ver documento adicional \u201cFirmas Electr\u00f3nicas en varias fases\u201d. Se debe plantear la posibilidad de soportar no solo CAdES y PAdES, sino tambi\u00e9n XAdES.","title":"Firma Trif\u00e1sica"},{"location":"markdown_strict/Comunicacion_Navegador_y_App_en_Entorno_Movil/","text":"El camino de ida: Desde el navegador Web hacia la App En la mayor\u00eda de los sistemas operativos m\u00f3viles, se permiten un mecanismo relativamente normalizado para la transferencia de control entre un navegador Web y una App en un sistema operativo m\u00f3vil. Este modelo consiste en declarar el soporte de un esquema URL particular por parte de la App y la apertura de un enlace Web con este protocolo desde una p\u00e1gina en el navegador Web. Un ejemplo de este mecanismo en Apple iOS podr\u00eda ser el soporte del protocolo tel en forma de URN con el formato tel: 1-408-555-5555 , donde 1-408-555-5555 es un n\u00famero de tel\u00e9fono. As\u00ed una llamada desde una p\u00e1gina Web a esta URN con una sentencia HTML como la siguiente: <a href=\"tel:1-408-555-5555\">1-408-555-5555</a> Provoca que se active el tel\u00e9fono (en un iPhone) y realice una llamada a ese n\u00famero, ya que la aplicaci\u00f3n nativa de tel\u00e9fono de iOS tiene registrado ese esquema de protocolo. Siguiendo con el ejemplo de iOS, el propio sistema operativo contiene ya una serie de aplicaciones que registran los protocolos m\u00e1s comunes, que para iPhone ser\u00edan: http://developer.apple.com/library/ios/#featuredarticles/iPhoneURLScheme_Reference/Introduction/Introduction.html Si bien una llamada de tipo URN puede transferir el control desde el navegador Web hacia una App , no permite una forma avanzada de transferencia de informaci\u00f3n adicional, por lo que esta debe hacerse en la propia URN; as\u00ed, en el ejemplo anterior vemos que en la URN se informa a la aplicaci\u00f3n del n\u00famero de tel\u00e9fono al que queremos llamar. Otro ejemplo de llamadas tipo URN en las que se transfiere informaci\u00f3n adicional podr\u00eda ser, continuando con Apple iOS, el env\u00edo de SMS, donde la llamada mediante el enlace: <a href=\"http://maps.google.com/maps?q=cupertino\">Cupertino</a> Informa a la aplicaci\u00f3n nativa que deseamos buscar la localizaci\u00f3n \u201ccupertino\u201d dando valor al par\u00e1metro \u201cq\u201d en la propia URL. En este ejemplo, aunque el protocolo es HTTP est\u00e1ndar, el sistema operativo discierne que siendo una llamada a maps.google.com debe ser atendida por la aplicaci\u00f3n de mapas en vez de por el propio navegador. La principal limitaci\u00f3n en esta forma de transferencia de informaci\u00f3n es la cantidad de datos que podemos transferir. La informaci\u00f3n debe ser siempre textual y en caracteres soportados en URN ( URL Encoding ), lo cual obliga a que si queremos transferir un binario este deba ser antes convertido a Base64 (en una variante compatible con codificaci\u00f3n URL ). Si tenemos en cuenta que las cadenas de texto de las URL tienen una longitud limitada (que depende del sistema operativo y del navegador Web) y que un binario aumenta de tama\u00f1o al ser convertido a Base64 encontramos que hay una limitaci\u00f3n pr\u00e1ctica de unos pocos cientos de kilobytes. Una estimaci\u00f3n del tama\u00f1o m\u00e1ximo de caracteres que pueden ser transmitidos en una URL por Navegador Web es la siguiente: Internet Explorer: 2,083 caracteres Firefox: 65, 536 caracteres Safari: 80.000 caracteres Opera: 190.000 caracteres Adem\u00e1s, conviene tener siempre en cuenta que algunos sistemas operativos limitan esta transferencia de control entre navegadores Web y Apps por motivos de seguridad (supone un innegable riesgo), como ocurre por ejemplo en Windows Phone 7.5. En palabras de Isabel G\u00f3mez (Responsable de Aplicaciones y Juegos en Windows Phone, Divisi\u00f3n de Desarrollo y Plataforma. Microsoft Ib\u00e9rica): \u201c Ese modelo no es viable en Windows Phone 7.5. Internet Explorer se ejecuta con privilegios bajos y por tanto no puede lanzar ninguna aplicaci\u00f3n o ejecutable precisamente para evitar la entrada de virus o malware. La \u00fanica opci\u00f3n es bien desarrollar todo en una App nativa o bien desarrollar todo en una aplicaci\u00f3n web. No hay comunicaci\u00f3n entre el navegador y las aplicaciones por dise\u00f1o de la plataforma para evitar la introducci\u00f3n de virus/malware como ha ocurrido en el caso de Android. \u201d El camino de vuelta: Desde la App hacia el navegador Web Una vez la App tiene el control del flujo de trabajo y ha realizado las operaciones apropiadas (por ejemplo, la firma electr\u00f3nica, que no puede realizarse desde una p\u00e1gina Web), ser\u00eda deseable que el control fuese devuelto al navegador Web en el mismo punto donde lo cedi\u00f3, de modo que el usuario pueda seguir con el flujo de su aplicaci\u00f3n Web sin saltos ni necesidad de acciones adicionales. El problema de esta vuelta hacia el navegador Web es que debe hacerse de la misma manera que en el sentido opuesto, mediante una llamada de apertura de una URN/URL con un protocolo concreto, que en este caso ser\u00e1 el protocolo Web: HTTP o HTTPS, con una llamada de este estilo (ejemplo en Apple iOS): NSURL *url = [NSURL URLWithString:@\"http://www.afirma.gob.es/back?param=sign1;sessionid=001\"]; [[UIApplication sharedApplication] openURL:url]; Este mecanismo presenta ciertos problemas: \u00bfQu\u00e9 pasa cuando hay m\u00e1s de un navegador Web? \u00bfQui\u00e9n va a atender la petici\u00f3n? \u00bfPuedo garantizar que sea el mismo navegador que en un principio inici\u00f3 la transferencia de control? El protocolo HTTP/HTTPS se atiende siempre por el navegador Web por defecto, con lo que ser\u00e1 siempre este el que atienda la petici\u00f3n. Esto hace que si el usuario us\u00f3 para acceder a la Web un navegador distinto al por defecto, el retorno abrir\u00e1 un navegador distinto, causando una operativa confusa y molesta. La imposibilidad de saber de antemano que aplicaci\u00f3n va a atender un determinado protocolo queda claramente reflejada en el manual para programadores de Apple iOS: Note: If more than one third-party app registers to handle the same URL scheme, there is currently no process for determining which app will be given that scheme. http://developer.apple.com/library/ios/#documentation/iphone/conceptual/iphoneosprogrammingguide/AdvancedAppTricks/AdvancedAppTricks.html Adicionalmente algunos sistemas operativos no permiten variar el navegador Web por defecto, como ocurre en Apple iOS que ser\u00e1 siempre Safari quien responda a apertura de URL con protocolo HTTO o HTTPS. En el caso de que el usuario \u00fanicamente use el navegador por defecto (aspecto que ni mucho menos puede darse por supuesto) \u00bfPodemos estar seguros de continuar con la sesi\u00f3n que ten\u00edamos iniciada? De nuevo, la respuesta es negativa. En muchos sistemas operativos la petici\u00f3n se atender\u00e1 en una nueva pesta\u00f1a del navegador (por ejemplo, Apple iOS 5 y superiores), con la mala experiencia de usuario que eso conlleva. Si a este aspecto sumamos el hecho de que una App no tiene acceso a las Cookies del navegador, obliga a una gesti\u00f3n de sesiones mediante par\u00e1metros en URL, introduciendo incluso m\u00e1s limitaciones molestas. Seg\u00fan documentaci\u00f3n de Apple iOS: iOS Note: Cookies are not shared by applications in iOS. http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/URLLoadingSystem/Concepts/URLOverview.html Adicionalmente, seguimos contando con las limitaciones que encontr\u00e1bamos en el sentido inverso: La cantidad de informaci\u00f3n que se puede transferir es muy limitada. Algunos sistemas operativos (como Microsoft Windows Phone 7.5) no permiten esta operativa por motivos de seguridad. Conclusiones Las limitaciones actuales que se imponen para la comunicaci\u00f3n entre Apps en dispositivos m\u00f3viles (siendo el navegador Web una App m\u00e1s) no son casuales, son restricciones impuestas por motivos de seguridad. Aun estando la operativa limitada, se ha demostrado ser fuente de ataques maliciosos por parte de hackers y piratas, especialmente notables en Google Android. Es por lo tanto f\u00e1cil aventurar que estas limitaciones no pueden sino endurecerse en las versiones futuras de los sistemas operativos m\u00f3viles: La seguridad prima sobre la funcionalidad en este caso, y los fabricantes impondr\u00e1n las medidas que consideren necesarias para garantizar una m\u00ednima seguridad. Esto puede hacer que operativas que actualmente funcionan dejen de hacerlo en nuevas versiones. Adem\u00e1s, el mercado de los navegadores Web en plataformas m\u00f3viles est\u00e1n en plena expansi\u00f3n (Firefox m\u00f3vil, Google Chrome, Opera, Safari, Pocket Internet Explorer, etc.). Limitar al usuario la elecci\u00f3n del navegador sin duda es una decisi\u00f3n que puede causar rechazo en los usuarios, adem\u00e1s de problemas por desconocimiento. La soluci\u00f3n m\u00e1s adecuada pasa por reducir al m\u00e1ximo la interacci\u00f3n entre navegador Web y la App (@firma m\u00f3vil en este caso), usando una llamada \u201csin retorno\u201d que no corra el riesgo de intentar devolver el control al navegador. Las pruebas mediante de prototipos que han realizado, dentro del proyecto @firma, entidades como la Junta de Andaluc\u00eda y Atos han constatado que los problemas en el retorno de control de una App al navegador Web son reales y graves. Por supuesto, hay alternativas de operaci\u00f3n. La m\u00e1s inmediata es la anteriormente comentada limitaci\u00f3n al usuario para que use un \u00fanico navegador Web (que adem\u00e1s puede ser necesario que sea el \u201cpor defecto\u201d) para ejecutar las aplicaciones. Esta aproximaci\u00f3n, si bien puede ser \u00fatil en entornos muy controlados (por ejemplo, es la utilizada en las aplicaciones Google Android de las tabletas Samsung Galaxy del Senado), es demasiado intrusiva para los usuarios ciudadanos como finales (\u00bfPor qu\u00e9 tendr\u00eda una administraci\u00f3n p\u00fablica decirle al usuario de un Apple iPad que use Safari en vez de Opera? http://itunes.apple.com/es/app/opera-mini-web-browser/id363729560 ). Opciones de futuro La transferencia de control mediante registro de protocolos y apertura de URN/URL no es la \u00fanica forma de ejecutar c\u00f3digo nativo desde una p\u00e1gina Web. Si el dispositivo contase con un servidor Web propio con capacidad de ejecutar c\u00f3digo invocado mediante URL una aplicaci\u00f3n JavaScript dentro de una p\u00e1gina Web en un navegador podr\u00eda realizar esta comunicaci\u00f3n mediante JSON y servicios web tipo REST con llamadas a localhost e implementando medios de autenticaci\u00f3n para garantizar la seguridad. \u00bfEs este modelo viable? Tecnol\u00f3gicamente hay grandes variaciones entre sistemas operativos, mientras que Android permite el desarrollo e instalaci\u00f3n de servicios en segundo plano (el servidor Web propio en local ser\u00eda uno) Apple iOS y otros sistemas operativos (como Windows Phone 7.5) lo limitan por motivos de seguridad, debiendo hacer uso del sistema integrado de notificaciones, lo cual impide implantar este modelo con eficiencia (Apple iOS: http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Introduction/Introduction.html ). Otro problema adicional es que un servicio en segundo plano que quede escuchando a la espera de peticiones (de firma en este caso concreto), queda tambi\u00e9n consumiendo procesador, memoria y lo que es incluso m\u00e1s importante, bater\u00eda). Es por lo tanto que esta supone una opci\u00f3n a explorar, pero no se considera como opci\u00f3n prioritaria para una implementaci\u00f3n de @firma m\u00f3vil a corto plazo. Autor: Tom\u00e1s Garc\u00eda-Mer\u00e1s tomas.garciameras@atos.net","title":"El camino de ida: Desde el navegador Web hacia la App"},{"location":"markdown_strict/Comunicacion_Navegador_y_App_en_Entorno_Movil/#el-camino-de-ida-desde-el-navegador-web-hacia-la-app","text":"En la mayor\u00eda de los sistemas operativos m\u00f3viles, se permiten un mecanismo relativamente normalizado para la transferencia de control entre un navegador Web y una App en un sistema operativo m\u00f3vil. Este modelo consiste en declarar el soporte de un esquema URL particular por parte de la App y la apertura de un enlace Web con este protocolo desde una p\u00e1gina en el navegador Web. Un ejemplo de este mecanismo en Apple iOS podr\u00eda ser el soporte del protocolo tel en forma de URN con el formato tel: 1-408-555-5555 , donde 1-408-555-5555 es un n\u00famero de tel\u00e9fono. As\u00ed una llamada desde una p\u00e1gina Web a esta URN con una sentencia HTML como la siguiente: <a href=\"tel:1-408-555-5555\">1-408-555-5555</a> Provoca que se active el tel\u00e9fono (en un iPhone) y realice una llamada a ese n\u00famero, ya que la aplicaci\u00f3n nativa de tel\u00e9fono de iOS tiene registrado ese esquema de protocolo. Siguiendo con el ejemplo de iOS, el propio sistema operativo contiene ya una serie de aplicaciones que registran los protocolos m\u00e1s comunes, que para iPhone ser\u00edan: http://developer.apple.com/library/ios/#featuredarticles/iPhoneURLScheme_Reference/Introduction/Introduction.html Si bien una llamada de tipo URN puede transferir el control desde el navegador Web hacia una App , no permite una forma avanzada de transferencia de informaci\u00f3n adicional, por lo que esta debe hacerse en la propia URN; as\u00ed, en el ejemplo anterior vemos que en la URN se informa a la aplicaci\u00f3n del n\u00famero de tel\u00e9fono al que queremos llamar. Otro ejemplo de llamadas tipo URN en las que se transfiere informaci\u00f3n adicional podr\u00eda ser, continuando con Apple iOS, el env\u00edo de SMS, donde la llamada mediante el enlace: <a href=\"http://maps.google.com/maps?q=cupertino\">Cupertino</a> Informa a la aplicaci\u00f3n nativa que deseamos buscar la localizaci\u00f3n \u201ccupertino\u201d dando valor al par\u00e1metro \u201cq\u201d en la propia URL. En este ejemplo, aunque el protocolo es HTTP est\u00e1ndar, el sistema operativo discierne que siendo una llamada a maps.google.com debe ser atendida por la aplicaci\u00f3n de mapas en vez de por el propio navegador. La principal limitaci\u00f3n en esta forma de transferencia de informaci\u00f3n es la cantidad de datos que podemos transferir. La informaci\u00f3n debe ser siempre textual y en caracteres soportados en URN ( URL Encoding ), lo cual obliga a que si queremos transferir un binario este deba ser antes convertido a Base64 (en una variante compatible con codificaci\u00f3n URL ). Si tenemos en cuenta que las cadenas de texto de las URL tienen una longitud limitada (que depende del sistema operativo y del navegador Web) y que un binario aumenta de tama\u00f1o al ser convertido a Base64 encontramos que hay una limitaci\u00f3n pr\u00e1ctica de unos pocos cientos de kilobytes. Una estimaci\u00f3n del tama\u00f1o m\u00e1ximo de caracteres que pueden ser transmitidos en una URL por Navegador Web es la siguiente: Internet Explorer: 2,083 caracteres Firefox: 65, 536 caracteres Safari: 80.000 caracteres Opera: 190.000 caracteres Adem\u00e1s, conviene tener siempre en cuenta que algunos sistemas operativos limitan esta transferencia de control entre navegadores Web y Apps por motivos de seguridad (supone un innegable riesgo), como ocurre por ejemplo en Windows Phone 7.5. En palabras de Isabel G\u00f3mez (Responsable de Aplicaciones y Juegos en Windows Phone, Divisi\u00f3n de Desarrollo y Plataforma. Microsoft Ib\u00e9rica): \u201c Ese modelo no es viable en Windows Phone 7.5. Internet Explorer se ejecuta con privilegios bajos y por tanto no puede lanzar ninguna aplicaci\u00f3n o ejecutable precisamente para evitar la entrada de virus o malware. La \u00fanica opci\u00f3n es bien desarrollar todo en una App nativa o bien desarrollar todo en una aplicaci\u00f3n web. No hay comunicaci\u00f3n entre el navegador y las aplicaciones por dise\u00f1o de la plataforma para evitar la introducci\u00f3n de virus/malware como ha ocurrido en el caso de Android. \u201d","title":"El camino de ida: Desde el navegador Web hacia la App"},{"location":"markdown_strict/Comunicacion_Navegador_y_App_en_Entorno_Movil/#el-camino-de-vuelta-desde-la-app-hacia-el-navegador-web","text":"Una vez la App tiene el control del flujo de trabajo y ha realizado las operaciones apropiadas (por ejemplo, la firma electr\u00f3nica, que no puede realizarse desde una p\u00e1gina Web), ser\u00eda deseable que el control fuese devuelto al navegador Web en el mismo punto donde lo cedi\u00f3, de modo que el usuario pueda seguir con el flujo de su aplicaci\u00f3n Web sin saltos ni necesidad de acciones adicionales. El problema de esta vuelta hacia el navegador Web es que debe hacerse de la misma manera que en el sentido opuesto, mediante una llamada de apertura de una URN/URL con un protocolo concreto, que en este caso ser\u00e1 el protocolo Web: HTTP o HTTPS, con una llamada de este estilo (ejemplo en Apple iOS): NSURL *url = [NSURL URLWithString:@\"http://www.afirma.gob.es/back?param=sign1;sessionid=001\"]; [[UIApplication sharedApplication] openURL:url]; Este mecanismo presenta ciertos problemas: \u00bfQu\u00e9 pasa cuando hay m\u00e1s de un navegador Web? \u00bfQui\u00e9n va a atender la petici\u00f3n? \u00bfPuedo garantizar que sea el mismo navegador que en un principio inici\u00f3 la transferencia de control? El protocolo HTTP/HTTPS se atiende siempre por el navegador Web por defecto, con lo que ser\u00e1 siempre este el que atienda la petici\u00f3n. Esto hace que si el usuario us\u00f3 para acceder a la Web un navegador distinto al por defecto, el retorno abrir\u00e1 un navegador distinto, causando una operativa confusa y molesta. La imposibilidad de saber de antemano que aplicaci\u00f3n va a atender un determinado protocolo queda claramente reflejada en el manual para programadores de Apple iOS: Note: If more than one third-party app registers to handle the same URL scheme, there is currently no process for determining which app will be given that scheme. http://developer.apple.com/library/ios/#documentation/iphone/conceptual/iphoneosprogrammingguide/AdvancedAppTricks/AdvancedAppTricks.html Adicionalmente algunos sistemas operativos no permiten variar el navegador Web por defecto, como ocurre en Apple iOS que ser\u00e1 siempre Safari quien responda a apertura de URL con protocolo HTTO o HTTPS. En el caso de que el usuario \u00fanicamente use el navegador por defecto (aspecto que ni mucho menos puede darse por supuesto) \u00bfPodemos estar seguros de continuar con la sesi\u00f3n que ten\u00edamos iniciada? De nuevo, la respuesta es negativa. En muchos sistemas operativos la petici\u00f3n se atender\u00e1 en una nueva pesta\u00f1a del navegador (por ejemplo, Apple iOS 5 y superiores), con la mala experiencia de usuario que eso conlleva. Si a este aspecto sumamos el hecho de que una App no tiene acceso a las Cookies del navegador, obliga a una gesti\u00f3n de sesiones mediante par\u00e1metros en URL, introduciendo incluso m\u00e1s limitaciones molestas. Seg\u00fan documentaci\u00f3n de Apple iOS: iOS Note: Cookies are not shared by applications in iOS. http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/URLLoadingSystem/Concepts/URLOverview.html Adicionalmente, seguimos contando con las limitaciones que encontr\u00e1bamos en el sentido inverso: La cantidad de informaci\u00f3n que se puede transferir es muy limitada. Algunos sistemas operativos (como Microsoft Windows Phone 7.5) no permiten esta operativa por motivos de seguridad.","title":"El camino de vuelta: Desde la App hacia el navegador Web"},{"location":"markdown_strict/Comunicacion_Navegador_y_App_en_Entorno_Movil/#conclusiones","text":"Las limitaciones actuales que se imponen para la comunicaci\u00f3n entre Apps en dispositivos m\u00f3viles (siendo el navegador Web una App m\u00e1s) no son casuales, son restricciones impuestas por motivos de seguridad. Aun estando la operativa limitada, se ha demostrado ser fuente de ataques maliciosos por parte de hackers y piratas, especialmente notables en Google Android. Es por lo tanto f\u00e1cil aventurar que estas limitaciones no pueden sino endurecerse en las versiones futuras de los sistemas operativos m\u00f3viles: La seguridad prima sobre la funcionalidad en este caso, y los fabricantes impondr\u00e1n las medidas que consideren necesarias para garantizar una m\u00ednima seguridad. Esto puede hacer que operativas que actualmente funcionan dejen de hacerlo en nuevas versiones. Adem\u00e1s, el mercado de los navegadores Web en plataformas m\u00f3viles est\u00e1n en plena expansi\u00f3n (Firefox m\u00f3vil, Google Chrome, Opera, Safari, Pocket Internet Explorer, etc.). Limitar al usuario la elecci\u00f3n del navegador sin duda es una decisi\u00f3n que puede causar rechazo en los usuarios, adem\u00e1s de problemas por desconocimiento. La soluci\u00f3n m\u00e1s adecuada pasa por reducir al m\u00e1ximo la interacci\u00f3n entre navegador Web y la App (@firma m\u00f3vil en este caso), usando una llamada \u201csin retorno\u201d que no corra el riesgo de intentar devolver el control al navegador. Las pruebas mediante de prototipos que han realizado, dentro del proyecto @firma, entidades como la Junta de Andaluc\u00eda y Atos han constatado que los problemas en el retorno de control de una App al navegador Web son reales y graves. Por supuesto, hay alternativas de operaci\u00f3n. La m\u00e1s inmediata es la anteriormente comentada limitaci\u00f3n al usuario para que use un \u00fanico navegador Web (que adem\u00e1s puede ser necesario que sea el \u201cpor defecto\u201d) para ejecutar las aplicaciones. Esta aproximaci\u00f3n, si bien puede ser \u00fatil en entornos muy controlados (por ejemplo, es la utilizada en las aplicaciones Google Android de las tabletas Samsung Galaxy del Senado), es demasiado intrusiva para los usuarios ciudadanos como finales (\u00bfPor qu\u00e9 tendr\u00eda una administraci\u00f3n p\u00fablica decirle al usuario de un Apple iPad que use Safari en vez de Opera? http://itunes.apple.com/es/app/opera-mini-web-browser/id363729560 ).","title":"Conclusiones"},{"location":"markdown_strict/Comunicacion_Navegador_y_App_en_Entorno_Movil/#opciones-de-futuro","text":"La transferencia de control mediante registro de protocolos y apertura de URN/URL no es la \u00fanica forma de ejecutar c\u00f3digo nativo desde una p\u00e1gina Web. Si el dispositivo contase con un servidor Web propio con capacidad de ejecutar c\u00f3digo invocado mediante URL una aplicaci\u00f3n JavaScript dentro de una p\u00e1gina Web en un navegador podr\u00eda realizar esta comunicaci\u00f3n mediante JSON y servicios web tipo REST con llamadas a localhost e implementando medios de autenticaci\u00f3n para garantizar la seguridad. \u00bfEs este modelo viable? Tecnol\u00f3gicamente hay grandes variaciones entre sistemas operativos, mientras que Android permite el desarrollo e instalaci\u00f3n de servicios en segundo plano (el servidor Web propio en local ser\u00eda uno) Apple iOS y otros sistemas operativos (como Windows Phone 7.5) lo limitan por motivos de seguridad, debiendo hacer uso del sistema integrado de notificaciones, lo cual impide implantar este modelo con eficiencia (Apple iOS: http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Introduction/Introduction.html ). Otro problema adicional es que un servicio en segundo plano que quede escuchando a la espera de peticiones (de firma en este caso concreto), queda tambi\u00e9n consumiendo procesador, memoria y lo que es incluso m\u00e1s importante, bater\u00eda). Es por lo tanto que esta supone una opci\u00f3n a explorar, pero no se considera como opci\u00f3n prioritaria para una implementaci\u00f3n de @firma m\u00f3vil a corto plazo. Autor: Tom\u00e1s Garc\u00eda-Mer\u00e1s tomas.garciameras@atos.net","title":"Opciones de futuro"},{"location":"markdown_strict/DECLARACION_ACCESIBILIDAD/","text":"Declaraci\u00f3n de Accesibilidad El Ministerio de Asuntos Econ\u00f3micos y Transformaci\u00f3n Digital - Secretar\u00eda General de Administraci\u00f3n Digital se ha comprometido a hacer accesible su aplicaci\u00f3n para dispositivos m\u00f3viles de conformidad con el Real Decreto 1112/2018, de 7 de septiembre, sobre accesibilidad de los sitios web y aplicaciones para dispositivos m\u00f3viles del sector p\u00fablico.< La presente declaraci\u00f3n de accesibilidad se aplica a la aplicaci\u00f3n para dispositivo m\u00f3vil Cliente movil @firma para sistema operativo Android 11.0 o superior, desde la versi\u00f3n 1.6.2 . Situaci\u00f3n de cumplimiento Este sitio web es parcialmente conforme con el RD 1112/2018 debido a las excepciones y a la falta de conformidad de los aspectos que se indican a continuaci\u00f3n. Contenido no accesible El contenido que se recoge a continuaci\u00f3n no es accesible por lo siguiente: falta de conformidad con el RD 1112/2018 No se proporciona informaci\u00f3n sobre las caracter\u00edsticas de accesibilidad de la aplicaci\u00f3n [requisito n\u00famero 12.1.1 Caracter\u00edsticas de Accesibilidad y Compatibilidad, de UNE-EN 301549:2019]. Existe contenido no textual sin alternativa textual breve y precisa del contenido o que no identifica su prop\u00f3sito [requisito n\u00famero 11.1.1.1 Contenido no textual, de UNE-EN 301549:2019]. Existen encabezados no etiquetados como tal, lo que imposibilita identificar el contenido o saltar a otro bloque de contenido [requisitos n\u00famero 11.1.3.1 Informaci\u00f3n y relaciones y 11.2.4.6 Encabezados y etiquetas, de UNE-EN 301549:2019]. Existen elementos que no cumplen con el contraste m\u00ednimo exigido [requisito n\u00famero 11.1.4.3 Contraste, de UNE-EN 301549:2019]. Existen elementos textuales que quedan recortados al aumentar su tama\u00f1o [requisito n\u00famero 11.1.4.4 Cambio del tama\u00f1o del texto, de UNE-EN 301549:2019]. Existen elementos accionables no accesibles por teclado [requisitos n\u00famero 11.2.1.1 Teclado, n\u00famero 11.2.1.2 Sin trampas para el foco del teclado y n\u00famero 11.2.4.3 Orden del foco, de UNE-EN 301549:2019]. En la navegaci\u00f3n con teclado el foco no es visible [requisito n\u00famero 11.2.4.7 Foco visible, de UNE-EN 301549:2019]. Existen p\u00e1ginas que no quedan traducidas al cambiar el idioma del dispositivo [requisito n\u00famero 11.3.1.1 Idioma de la p\u00e1gina, de UNE-EN 301549:2019]. Se detecta un formulario que no informa al usuario del tipo de error producido [requisito n\u00famero 3.3.1 Identificaci\u00f3n de errores, de UNE-EN 301549:2019]. Se detecta un formulario sin el etiquetado adecuado en sus campos para conocer su descripci\u00f3n y prop\u00f3sito [requisito n\u00famero 11.2.5.3 Etiqueta en el nombre, de UNE-EN 301549:2019]. carga desproporcionada No aplica. el contenido no entra dentro del \u00e1mbito de la legislaci\u00f3n aplicable No aplica. Preparaci\u00f3n de la presente declaraci\u00f3n de accesibilidad La presente declaraci\u00f3n fue preparada el 07 de septiembre de 2022. El m\u00e9todo empleado para preparar la declaraci\u00f3n ha sido una autoevaluaci\u00f3n llevada a cabo por el propio organismo con recursos externos. \u00daltima revisi\u00f3n de la declaraci\u00f3n: 07 de septiembre de 2022. Observaciones y datos de contacto Puede realizar comunicaciones sobre requisitos de accesibilidad (art\u00edculo 10.2.a) del RD 1112/2018) como, por ejemplo: informar sobre cualquier posible incumplimiento por parte de esta aplicaci\u00f3n para dispositivos m\u00f3viles, transmitir otras dificultades de acceso al contenido, formular cualquier otra consulta o sugerencia de mejora relativa a la accesibilidad de la aplicaci\u00f3n para dispositivos m\u00f3viles, a trav\u00e9s del siguiente formulario Instancia Gen\u00e9rica v.1.0.36 (mineco.gob.es) o llamando al tel\u00e9fono 912732491, indicando que se trata de una consulta relativa a \u201c accesibilidad en Cliente m\u00f3vil @firma \u201d. Las comunicaciones ser\u00e1n recibidas y tratadas por la Secretar\u00eda General de Administraci\u00f3n Digital. Procedimiento de aplicaci\u00f3n Si una vez realizada una solicitud de informaci\u00f3n accesible o queja, \u00e9sta hubiera sido desestimada, no se estuviera de acuerdo con la decisi\u00f3n adoptada, o la respuesta no cumpliera los requisitos contemplados en el art\u00edculo 12.5 del Real Decreto 1112/2018, de 7 de septiembre, sobre accesibilidad de los sitios web y aplicaciones para dispositivos m\u00f3viles del sector p\u00fablico.< , la persona interesada podr\u00e1 iniciar una reclamaci\u00f3n. Igualmente se podr\u00e1 iniciar una reclamaci\u00f3n en el caso de que haya trascurrido el plazo de veinte d\u00edas h\u00e1biles sin haber obtenido respuesta. La reclamaci\u00f3n puede ser presentada trav\u00e9s del formulario Instancia Gen\u00e9rica v.1.0.36 (mineco.gob.es) , as\u00ed como en el resto de opciones recogidas en la Ley 39/ 2015, de 1 de octubre, del Procedimiento Administrativo Com\u00fan de las Administraciones P\u00fablicas. Las reclamaciones ser\u00e1n recibidas y tratadas por la Subdirecci\u00f3n General de Inspecci\u00f3n de Servicios del Ministerio de Asuntos Econ\u00f3micos y Transformaci\u00f3n Digital. Contenido opcional La \u00faltima revisi\u00f3n de la accesibilidad se ha realizado en septiembre de 2021.","title":"Declaraci\u00f3n de Accesibilidad"},{"location":"markdown_strict/DECLARACION_ACCESIBILIDAD/#declaracion-de-accesibilidad","text":"El Ministerio de Asuntos Econ\u00f3micos y Transformaci\u00f3n Digital - Secretar\u00eda General de Administraci\u00f3n Digital se ha comprometido a hacer accesible su aplicaci\u00f3n para dispositivos m\u00f3viles de conformidad con el Real Decreto 1112/2018, de 7 de septiembre, sobre accesibilidad de los sitios web y aplicaciones para dispositivos m\u00f3viles del sector p\u00fablico.< La presente declaraci\u00f3n de accesibilidad se aplica a la aplicaci\u00f3n para dispositivo m\u00f3vil Cliente movil @firma para sistema operativo Android 11.0 o superior, desde la versi\u00f3n 1.6.2 .","title":"Declaraci\u00f3n de Accesibilidad"},{"location":"markdown_strict/DECLARACION_ACCESIBILIDAD/#situacion-de-cumplimiento","text":"Este sitio web es parcialmente conforme con el RD 1112/2018 debido a las excepciones y a la falta de conformidad de los aspectos que se indican a continuaci\u00f3n.","title":"Situaci\u00f3n de cumplimiento"},{"location":"markdown_strict/DECLARACION_ACCESIBILIDAD/#contenido-no-accesible","text":"El contenido que se recoge a continuaci\u00f3n no es accesible por lo siguiente: falta de conformidad con el RD 1112/2018 No se proporciona informaci\u00f3n sobre las caracter\u00edsticas de accesibilidad de la aplicaci\u00f3n [requisito n\u00famero 12.1.1 Caracter\u00edsticas de Accesibilidad y Compatibilidad, de UNE-EN 301549:2019]. Existe contenido no textual sin alternativa textual breve y precisa del contenido o que no identifica su prop\u00f3sito [requisito n\u00famero 11.1.1.1 Contenido no textual, de UNE-EN 301549:2019]. Existen encabezados no etiquetados como tal, lo que imposibilita identificar el contenido o saltar a otro bloque de contenido [requisitos n\u00famero 11.1.3.1 Informaci\u00f3n y relaciones y 11.2.4.6 Encabezados y etiquetas, de UNE-EN 301549:2019]. Existen elementos que no cumplen con el contraste m\u00ednimo exigido [requisito n\u00famero 11.1.4.3 Contraste, de UNE-EN 301549:2019]. Existen elementos textuales que quedan recortados al aumentar su tama\u00f1o [requisito n\u00famero 11.1.4.4 Cambio del tama\u00f1o del texto, de UNE-EN 301549:2019]. Existen elementos accionables no accesibles por teclado [requisitos n\u00famero 11.2.1.1 Teclado, n\u00famero 11.2.1.2 Sin trampas para el foco del teclado y n\u00famero 11.2.4.3 Orden del foco, de UNE-EN 301549:2019]. En la navegaci\u00f3n con teclado el foco no es visible [requisito n\u00famero 11.2.4.7 Foco visible, de UNE-EN 301549:2019]. Existen p\u00e1ginas que no quedan traducidas al cambiar el idioma del dispositivo [requisito n\u00famero 11.3.1.1 Idioma de la p\u00e1gina, de UNE-EN 301549:2019]. Se detecta un formulario que no informa al usuario del tipo de error producido [requisito n\u00famero 3.3.1 Identificaci\u00f3n de errores, de UNE-EN 301549:2019]. Se detecta un formulario sin el etiquetado adecuado en sus campos para conocer su descripci\u00f3n y prop\u00f3sito [requisito n\u00famero 11.2.5.3 Etiqueta en el nombre, de UNE-EN 301549:2019]. carga desproporcionada No aplica. el contenido no entra dentro del \u00e1mbito de la legislaci\u00f3n aplicable No aplica.","title":"Contenido no accesible"},{"location":"markdown_strict/DECLARACION_ACCESIBILIDAD/#preparacion-de-la-presente-declaracion-de-accesibilidad","text":"La presente declaraci\u00f3n fue preparada el 07 de septiembre de 2022. El m\u00e9todo empleado para preparar la declaraci\u00f3n ha sido una autoevaluaci\u00f3n llevada a cabo por el propio organismo con recursos externos. \u00daltima revisi\u00f3n de la declaraci\u00f3n: 07 de septiembre de 2022.","title":"Preparaci\u00f3n de la presente declaraci\u00f3n de accesibilidad"},{"location":"markdown_strict/DECLARACION_ACCESIBILIDAD/#observaciones-y-datos-de-contacto","text":"Puede realizar comunicaciones sobre requisitos de accesibilidad (art\u00edculo 10.2.a) del RD 1112/2018) como, por ejemplo: informar sobre cualquier posible incumplimiento por parte de esta aplicaci\u00f3n para dispositivos m\u00f3viles, transmitir otras dificultades de acceso al contenido, formular cualquier otra consulta o sugerencia de mejora relativa a la accesibilidad de la aplicaci\u00f3n para dispositivos m\u00f3viles, a trav\u00e9s del siguiente formulario Instancia Gen\u00e9rica v.1.0.36 (mineco.gob.es) o llamando al tel\u00e9fono 912732491, indicando que se trata de una consulta relativa a \u201c accesibilidad en Cliente m\u00f3vil @firma \u201d. Las comunicaciones ser\u00e1n recibidas y tratadas por la Secretar\u00eda General de Administraci\u00f3n Digital.","title":"Observaciones y datos de contacto"},{"location":"markdown_strict/DECLARACION_ACCESIBILIDAD/#procedimiento-de-aplicacion","text":"Si una vez realizada una solicitud de informaci\u00f3n accesible o queja, \u00e9sta hubiera sido desestimada, no se estuviera de acuerdo con la decisi\u00f3n adoptada, o la respuesta no cumpliera los requisitos contemplados en el art\u00edculo 12.5 del Real Decreto 1112/2018, de 7 de septiembre, sobre accesibilidad de los sitios web y aplicaciones para dispositivos m\u00f3viles del sector p\u00fablico.< , la persona interesada podr\u00e1 iniciar una reclamaci\u00f3n. Igualmente se podr\u00e1 iniciar una reclamaci\u00f3n en el caso de que haya trascurrido el plazo de veinte d\u00edas h\u00e1biles sin haber obtenido respuesta. La reclamaci\u00f3n puede ser presentada trav\u00e9s del formulario Instancia Gen\u00e9rica v.1.0.36 (mineco.gob.es) , as\u00ed como en el resto de opciones recogidas en la Ley 39/ 2015, de 1 de octubre, del Procedimiento Administrativo Com\u00fan de las Administraciones P\u00fablicas. Las reclamaciones ser\u00e1n recibidas y tratadas por la Subdirecci\u00f3n General de Inspecci\u00f3n de Servicios del Ministerio de Asuntos Econ\u00f3micos y Transformaci\u00f3n Digital.","title":"Procedimiento de aplicaci\u00f3n"},{"location":"markdown_strict/DECLARACION_ACCESIBILIDAD/#contenido-opcional","text":"La \u00faltima revisi\u00f3n de la accesibilidad se ha realizado en septiembre de 2021.","title":"Contenido opcional"},{"location":"markdown_strict/Diagramas%20de%20secuencia%20de%20los%20procesos%20de%20firma%20m%C3%B3vil/","text":"Firma monof\u00e1sica (Windows 8 / Windows RT y Android) Descripci\u00f3n El usuario inicia un tr\u00e1mite desde su navegador, activando un flujo de trabajo JavaScript El flujo JavaScript arranca una App nativa de firma electr\u00f3nica mediante una invocaci\u00f3n por protocolo. La App nativa realiza la firma electr\u00f3nica. La App nativa deposita la firma electr\u00f3nica en un servidor intermedio. El flujo JavaScript recupera la firma electr\u00f3nica desde el servidor intermedio y termina el proceso de negocio. El usuario termina su tr\u00e1mite en el navegador Web. Firma trif\u00e1sica (Apple iOS) Descripci\u00f3n El usuario inicia un tr\u00e1mite desde su navegador, activando un flujo de trabajo JavaScript El flujo JavaScript arranca una App nativa de firma electr\u00f3nica mediante una invocaci\u00f3n por protocolo. La App nativa solicita la prefirma al servidor (1\u00aa fase). La App nativa realiza la firma electr\u00f3nica PKCS#1 (2\u00aa fase). La App nativa solicita la postfirma al servidor (3\u00aa fase). La App nativa deposita la firma electr\u00f3nica en un servidor intermedio. El flujo JavaScript recupera la firma electr\u00f3nica desde el servidor intermedio y termina el proceso de negocio. El usuario termina su tr\u00e1mite en el navegador Web. Firma trif\u00e1sica en portafirmas (Apple iOS y Android) Descripci\u00f3n El usuario inicia un tr\u00e1mite desde su App nativa, activando el flujo de trabajo. La App nativa solicita al servidor intermedio la firma de un fichero. El servidor intermedio solicita el fichero binario al servidor de portafirmas (que a su vez tiene acceso al servidor documental). El servidor intermedio solicita la prefirma al servidor de firma (1\u00aa fase), entreg\u00e1ndola de vuelta a la App nativa. La App nativa realiza la firma electr\u00f3nica PKCS#1 (2\u00aa fase), devolvi\u00e9ndola al servidor intermedio. El servidor intermedio solicita la postfirma al servidor (3\u00aa fase). El servidor intermedio deposita la firma electr\u00f3nica en el servidor de portafirmas y se propaga hacia la App nativa la confirmaci\u00f3n de la finalizaci\u00f3n correcta de la operaci\u00f3n.","title":"Firma monof\u00e1sica (Windows 8 / Windows RT y Android)"},{"location":"markdown_strict/Diagramas%20de%20secuencia%20de%20los%20procesos%20de%20firma%20m%C3%B3vil/#firma-monofasica-windows-8-windows-rt-y-android","text":"Descripci\u00f3n El usuario inicia un tr\u00e1mite desde su navegador, activando un flujo de trabajo JavaScript El flujo JavaScript arranca una App nativa de firma electr\u00f3nica mediante una invocaci\u00f3n por protocolo. La App nativa realiza la firma electr\u00f3nica. La App nativa deposita la firma electr\u00f3nica en un servidor intermedio. El flujo JavaScript recupera la firma electr\u00f3nica desde el servidor intermedio y termina el proceso de negocio. El usuario termina su tr\u00e1mite en el navegador Web.","title":"Firma monof\u00e1sica (Windows 8 / Windows RT y Android)"},{"location":"markdown_strict/Diagramas%20de%20secuencia%20de%20los%20procesos%20de%20firma%20m%C3%B3vil/#firma-trifasica-apple-ios","text":"Descripci\u00f3n El usuario inicia un tr\u00e1mite desde su navegador, activando un flujo de trabajo JavaScript El flujo JavaScript arranca una App nativa de firma electr\u00f3nica mediante una invocaci\u00f3n por protocolo. La App nativa solicita la prefirma al servidor (1\u00aa fase). La App nativa realiza la firma electr\u00f3nica PKCS#1 (2\u00aa fase). La App nativa solicita la postfirma al servidor (3\u00aa fase). La App nativa deposita la firma electr\u00f3nica en un servidor intermedio. El flujo JavaScript recupera la firma electr\u00f3nica desde el servidor intermedio y termina el proceso de negocio. El usuario termina su tr\u00e1mite en el navegador Web.","title":"Firma trif\u00e1sica (Apple iOS)"},{"location":"markdown_strict/Diagramas%20de%20secuencia%20de%20los%20procesos%20de%20firma%20m%C3%B3vil/#firma-trifasica-en-portafirmas-apple-ios-y-android","text":"Descripci\u00f3n El usuario inicia un tr\u00e1mite desde su App nativa, activando el flujo de trabajo. La App nativa solicita al servidor intermedio la firma de un fichero. El servidor intermedio solicita el fichero binario al servidor de portafirmas (que a su vez tiene acceso al servidor documental). El servidor intermedio solicita la prefirma al servidor de firma (1\u00aa fase), entreg\u00e1ndola de vuelta a la App nativa. La App nativa realiza la firma electr\u00f3nica PKCS#1 (2\u00aa fase), devolvi\u00e9ndola al servidor intermedio. El servidor intermedio solicita la postfirma al servidor (3\u00aa fase). El servidor intermedio deposita la firma electr\u00f3nica en el servidor de portafirmas y se propaga hacia la App nativa la confirmaci\u00f3n de la finalizaci\u00f3n correcta de la operaci\u00f3n.","title":"Firma trif\u00e1sica en portafirmas (Apple iOS y Android)"},{"location":"markdown_strict/Firma_por_lotes_predefinidos_con_el_MiniApplet_Cliente/","text":"Mediante la nueva funcionalidad (aun en periodo de pruebas) es posible definir externamente un lote de firma mediante un fichero XML, ejecut\u00e1ndose este de forma desatendida por el cliente, con la concurrencia de los m\u00f3dulos servidores, y devolvi\u00e9ndose el resultado global de la ejecuci\u00f3n del lote. Creaci\u00f3n de los lotes Los integradores que deseen usar esta funcionalidad deben crear (externamente, sin usar el MiniApplet) el XML de definici\u00f3n del lote de firma, que debe seguir este esquema: <xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"> <xs:element name=\"signbatch\"> <xs:complexType> <xs:sequence> <xs:element name=\"singlesign\" maxOccurs=\"unbounded\" minOccurs=\"1\"> <xs:complexType> <xs:sequence> <xs:element type=\"xs:string\" name=\"datasource\"/> <xs:element name=\"format\"> <xs:simpleType> <xs:restriction base=\"xs:string\"> <xs:enumeration value=\"XAdES\"/> <xs:enumeration value=\"CAdES\"/> <xs:enumeration value=\"PAdES\"/> </xs:restriction> </xs:simpleType> </xs:element> <xs:element name=\"suboperation\"> <xs:simpleType> <xs:restriction base=\"xs:string\"> <xs:enumeration value=\"sign\"/> <xs:enumeration value=\"cosign\"/> </xs:restriction> </xs:simpleType> </xs:element> <xs:element name=\"extraparams\"> <xs:simpleType> <xs:restriction base=\"xs:base64Binary\" /> </xs:simpleType> </xs:element> <xs:element name=\"signsaver\"> <xs:complexType> <xs:sequence> <xs:element type=\"xs:string\" name=\"class\"/> <xs:element name=\"config\"> <xs:simpleType> <xs:restriction base=\"xs:base64Binary\" /> </xs:simpleType> </xs:element> </xs:sequence> </xs:complexType> </xs:element> </xs:sequence> <xs:attribute type=\"xs:string\" name=\"Id\" use=\"required\"/> </xs:complexType> </xs:element> </xs:sequence> <xs:attribute type=\"xs:integer\" name=\"concurrenttimeout\" use=\"optional\"/> <xs:attribute name=\"stoponerror\" use=\"optional\"> <xs:simpleType> <xs:restriction base=\"xs:string\"> <xs:enumeration value=\"true\"/> <xs:enumeration value=\"false\"/> </xs:restriction> </xs:simpleType> </xs:attribute> <xs:attribute name=\"algorithm\" use=\"required\"> <xs:simpleType> <xs:restriction base=\"xs:string\"> <xs:enumeration value=\"SHA1withRSA\"/> <xs:enumeration value=\"SHA256withRSA\"/> <xs:enumeration value=\"SHA384withRSA\"/> <xs:enumeration value=\"SHA512withRSA\"/> </xs:restriction> </xs:simpleType> </xs:attribute> </xs:complexType> </xs:element> </xs:schema> Un posible ejemplo de XML creado siguiendo este esquema podr\u00eda ser el siguiente: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <signbatch stoponerror=\"false\" algorithm=\"SHA256withRSA\" concurrenttimeout=\"9223372036854775807\"> <singlesign Id=\"7725374e-728d-4a33-9db9-3a4efea4cead\"> <datasource>http://google.com</datasource> <format>XAdES</format> <suboperation>sign</suboperation> <extraparams> Iw0KI1N1biBBdWcgMjMgMTM6NDU6NDAgQ0VTVCAyMDE1DQpTaWduYXR1cmVJZD03NzI1Mzc0ZS03MjhkLTRhMzMtOWRiOS0zYTRlZmVhNGNlYWQNCg== </extraparams> <signsaver> <class>es.gob.afirma.signers.batch.SignSaverFile</class> <config> Iw0KI1N1biBBdWcgMjMgMTM6NDU6NDAgQ0VTVCAyMDE1DQpGaWxlTmFtZT1DXDpcXFVzZXJzXFx0b21hc1xcQXBwRGF0YVxcTG9jYWxcXFRlbXBcXEZJUk1BMS54bWwNCg== </config> </signsaver> </singlesign> <singlesign Id=\"93d1531c-cd32-4c8e-8cc8-1f1cfe66f64a\"> <datasource>SG9sYSBNdW5kbw==</datasource> <format>CAdES</format> <suboperation>sign</suboperation> <extraparams> Iw0KI1N1biBBdWcgMjMgMTM6NDU6NDAgQ0VTVCAyMDE1DQpTaWduYXR1cmVJZD05M2QxNTMxYy1jZDMyLTRjOGUtOGNjOC0xZjFjZmU2NmY2NGENCg== </extraparams> <signsaver> <class>es.gob.afirma.signers.batch.SignSaverFile</class> <config> Iw0KI1N1biBBdWcgMjMgMTM6NDU6NDAgQ0VTVCAyMDE1DQpGaWxlTmFtZT1DXDpcXFVzZXJzXFx0b21hc1xcQXBwRGF0YVxcTG9jYWxcXFRlbXBcXEZJUk1BMi54bWwNCg== </config> </signsaver> </singlesign> </signbatch> En este se distinguen los siguientes elementos: Tama\u00f1o m\u00e1ximo del XML de definici\u00f3n de lote El XML de definici\u00f3n de lote no puede exceder en tama\u00f1o de 1.024KB. Si necesitase componer trabajos mayores, estos deber\u00e1n fraccionarse en varios lotes. Cabecera de definici\u00f3n de lote En el ejemplo, es la l\u00ednea \u201c<signbatch stoponerror=\"false\" algorithm=\"SHA256withRSA\">\u201d. Contiene dos atributos configurables por el integrador: \u201cstoponerror\u201d Cuando se establece a \u201cfalse\u201d se indica que el proceso debe continuar incluso si alguna de las firmas del lote no puede completarse, y cuando se establece a \u201ctrue\u201d el proceso se para en el momento en el que se produce el primer error. \u201calgorithm\u201d Indica el algoritmo de firma a usar para todo el lote, y puede tener los siguientes valores: SHA1withRSA No recomendado por obsoleto. SHA256withRSA SHA384withRSA SHA512withRSA Definici\u00f3n de cada firma dentro del lote Dentro del elemento de definici\u00f3n de lote debemos incluir uno o varios elementos de tipo \u201csinglesign\u201d, que es obligatorio cuenten en origen con un identificados \u00fanico (en el ejemplo se observa la primera (el ejemplo contiene dos firmas dentro del lote) cabecera de definici\u00f3n de firma \u201c<singlesign id=\"7725374e-728d-4a33-9db9-3a4efea4cead\">\u201d, que indica que es una firma dentro del lote identificada por la cadena \u201c7725374e-728d-4a33-9db9-3a4efea4cead\u201d. Configuraci\u00f3n de cada firma dentro del lote Cada una de las firmas dentro del lote puede ser configurada individualmente con los siguientes par\u00e1metros: Origen de los datos a firmar El origen de los datos debe indicarse dentro del elemento \u201cdatasource\u201d del XML, por ejemplo: \u201c<datasource>http://google.com</datasource>\u201d El origen de los datos a firmar puede indicarse: Con una URL. En este caso el servidor (nunca el cliente) descargar\u00e1 directamente los datos a firmar. Se admite HTTP y HTTPS. Si se usa SSL con certificado cliente es necesario que el certificado cliente est\u00e9 instalado en el almac\u00e9n de certificados personales del Entorno de Ejecuci\u00f3n de Java (JRE). En este caso, la URL debe devolver los datos finales a firmar, sin ninguna codificaci\u00f3n intermedia (ni Base64 ni nada). As\u00ed, por ejemplo, para firmar un PDF que est\u00e9 disponible en una URL debemos indicar directamente la URL que apunte a ese PDF, como: https://atos.net/content/dam/global/documents/investor-presentations/atos-q1-2015-presentation.pdf Si la URL apunta a una huella digital (para los modos de firma que lo soporten), esta debe estar igualmente en binario, como: https://miweb.com/firmas/hash001.bin En el ejemplo, puede observarse que en la primera firma se indica que el origen de los datos es la URL \u201c http://google.com \u201d. Indicando directamente los datos a firmar codificados en Base64. En este caso el servidor descodificar\u00e1 el Base64 para obtener los datos a firmar. Puede usarse tambi\u00e9n para indicar directamente una huella (en los modos de firma que lo soporten), teni\u00e9ndose en este caso que indicar en Base64. En el ejemplo, puede observarse que en la primera firma se indica que el origen de los datos es el Base64 \u201c SG9sYSBNdW5kbw== \u201d, que descodificado equivale a la cadena de texto \u201cHola Mundo\u201d. Existe un caso adicional, y es que cuando se indica un texto que no puede interpretarse como una URL ni como Base64, se firma este directamente sin hacer ning\u00fan tipo de transformaci\u00f3n. En general, debe evitarse evitar este tercer modo, ya que, por una parte, puede ser dif\u00edcil diferenciar entre Base64 y texto normal, y por otra, pueden encontrarse errores de interpretaci\u00f3n por la codificaci\u00f3n del texto (ASCII, UTF-8, ANSI, etc.). Formato de firma El formato de firma a utilizar debe indicarse dentro del elemento \u201cformat\u201d del XML, por ejemplo \u201c<format>XAdES</format>\u201d. Se admiten los siguientes formatos: XAdES \u201cXAdES\u201d CAdES \u201c CAdES \u201d PAdES \u201cPAdES\u201d Con este formato solo se pueden firmar documentos PDF. Algoritmo de firma El algoritmo de firma a utilizar debe indicarse dentro del elemento \u201cformat\u201d del XML, por ejemplo \u201c<format>XAdES</format>\u201d. Se admiten los siguientes algoritmos: SHA1withRSA \u201c SHA1withRSA \u201d No se recomienda por obsoleto. SHA256withRSA \u201c SHA256withRSA \u201d SHA384withRSA \u201c SHA384withRSA \u201d SHA512withRSA \u201c SHA512withRSA \u201d Operaci\u00f3n de firma La operaci\u00f3n concreta de firma a realizar debe indicarse dentro del elemento \u201csuboperation\u201d del XML, por ejemplo <suboperation>sign</suboperation>\u201d. Se admiten las siguientes operaciones: Firma \u201csign\u201d Cofirma \u201ccosign\u201d Par\u00e1metros adicionales para la firma Los par\u00e1metros adicionales para el formato y la operaci\u00f3n concreta de firma (tal y como se describen en el manual del MiniApplet) deben indicarse dentro del elemento \u201cextraparams\u201d del XML, por ejemplo \u201c<extraparams>bW9kZT1pbXBsaWNpdA0Kc2lnbmF0dXJlUHJvZHVjdGlvbkNpdHk9TWFkcmlk</extraparams>\u201d. Estos par\u00e1metros adicionales deben indicarse codificando su representaci\u00f3n textual como Base64. As\u00ed, las siguientes propiedades (indicando cada par\u00e1metro en una l\u00ednea de texto con el formato nombre_par\u00e1metro=valor ): mode=implicit signatureProductionCity=Madrid Quedar\u00edan codificadas en Base64 como: bW9kZT1pbXBsaWNpdA0Kc2lnbmF0dXJlUHJvZHVjdGlvbkNpdHk9TWFkcmlk Si no se desea establecer par\u00e1metros adicionales debe dejarse el nodo vac\u00edo. Configuraci\u00f3n del guardado de la firma El guardado de la firma una vez esta se completa es una tarea que realiza igualmente el servidor, utilizando para ello clases especiales de guardado que el integrador debe codificar seg\u00fan sus necesidades. Las clases deben situarse en el CLASSPATH de Java de la aplicaci\u00f3n Web en el lado servidor (normalmente dentro de un fichero JAR). Consulte la documentaci\u00f3n de su servidor de aplicaciones para realizar esta tarea. Una forma muy c\u00f3moda de hacerlo es editando el WAR (es un fichero ZIP con la extensi\u00f3n cambiada) antes de desplegarlo, y a\u00f1adiendo el JAR con las nuevas clases en el directorio WEB-INF/lib. Hay que tener cuidado de no alterar el resto de contenidos ni la estructura de carpetas antes de volver a comprimir el WAR (como ZIP). Estas clases deben implementar el interfaz Java SignSaver , que tiene la siguiente forma: package es.gob.afirma.signers.batch; import java.io.IOException; import java.util.Properties; /** Interfaz para el guardado, almacenaje o env\u00edo de firmas una vez realizadas. * @author Tom\u00e1s Garc\u00eda-Mer\u00e1s. */ public interface SignSaver { /** Guarda una firma electr\u00f3nica. * @param sign Definici\u00f3n de la firma que se hizo. * @param dataToSave Datos a guardar, resultado de la firma electr\u00f3nica. * @throws IOException Si hay problemas durante el proceso. */ void saveSign( final SingleSign sign, final byte [] dataToSave) throws IOException; /** Deshace un guardado previo (para los modos transaccionales). * @param sign Identificador de la firma a deshacer. */ void rollback( final SingleSign sign); /** Configura c\u00f3mo ha de guardarse la firma electr\u00f3nica. * cada implementaci\u00f3n requerir\u00e1 unas propiedades distintas dentro del * objeto de propiedades. * @param config Propiedades de configuraci\u00f3n. */ void init( final Properties config); /** Obtiene las propiedades de configuraci\u00f3n. * @return Propiedades de configuraci\u00f3n. */ Properties getConfig(); } Como se puede observar, el objeto de guardado recibe sus par\u00e1metros de funcionamiento y configuraci\u00f3n en un fichero de propiedades de Java en el m\u00e9todo \u201cinit\u201d, que es invocado siempre inmediatamente despu\u00e9s de ser instanciado. La forma de indicar qu\u00e9 clase de guardado a usar y con qu\u00e9 configuraci\u00f3n es mediante el nodo \u201csignsaver\u201d, que contiene a su vez dos nodos: \u201cclass\u201d, con el nombre cualificado de la clase a usar. \u201cconfig\u201d, con las propiedades de configuraci\u00f3n codificadas en Base64. As\u00ed, en el ejemplo tenemos el siguiente nodo: <signsaver> <class>es.gob.afirma.signers.batch.SignSaverFile</class> <config> Iw0KI1RodSBBdWcgMjAgMTI6MTM6NDEgQ0VTVCAyMDE1DQpGaWxlTmFtZT1DXDpcXFVzZXJzXFx0b21hc1xcQXBwRGF0YVxcTG9jYWxcXFRlbXBcXEZJUk1BMi54bWwNCg== </config> </signsaver> Este indica que debe usarse la clase de guardado \u201ces.gob.afirma.signers.batch.SignSaverFile\u201d con la configuraci\u00f3n \u201cIw0KI1RodSBBdWcgMjAgMTI6MTM6NDEgQ0VTVCAyMDE1DQpGaWxlTmFtZT1DXDpcXFVzZXJzXFx0b21hc1xcQXBwRGF0YVxcTG9jYWxcXFRlbXBcXEZJUk1BMi54bWwNCg==\u201d, que si la descodificamos vemos que contiene: FileName=C\\\\Users\\tomas\\AppData\\Local\\Temp\\FIRMA2.xml Que es la configuraci\u00f3n que necesita para guardar la firma (esta clase simplemente guarda la firma en el fichero que se le indique en la configuraci\u00f3n. Se incluyen con la implementaci\u00f3n dos ejemplos de clases de guardado: Guardado a fichero: Clase: es.gob.afirma.signers.batch.SignSaverFile Par\u00e1metros de configuraci\u00f3n: FileName Indica el fichero donde debe guardarse la firma. Esta clase es un simple ejemplo, y no debe usarse directamente en producci\u00f3n, ya que presenta problemas de seguridad (podr\u00edan indicarse que se sobrescriba un fichero de sistema). Env\u00edo a una direcci\u00f3n HTTP POST: Clase: es.gob.afirma.signers.batch.SignSaverHttpPost Par\u00e1metros de configuraci\u00f3n: PostUrl Puede ser tanto HTTP como HTTPS PostParamName Indica la URL a la que hacer el HTTP POST Indica el par\u00e1metro de la petici\u00f3n POST donde deben adjuntarse los datos. Estos se adjuntar\u00e1n siempre en Base64 con alfabeto URL SAFE. Esta clase realiza una llamada HTTP POST a la direcci\u00f3n indicada, enviando como datos del POST un par\u00e1metro con el nombre indicado cuyo valor ser\u00e1 la codificaci\u00f3n Base64 del resultado de la firma. Es necesario entonces que el integrador provea este servicio HTTP POST para recibir y tratar la firma enviada (habitualmente un servicio Web). La URL indicada debe ser accesible desde el servidor (que es quien realiza el env\u00edo). Notas sobre el ejemplo SignSaverFile La clase es.gob.afirma.signers.batch.SignSaverFile, es, como se ha comentado anteriormente, \u00fanicamente un ejemplo de implementaci\u00f3n el del interfaz es.gob.afirma.signers.batch.SignSaver que puede resultar de utilidad para depuraci\u00f3n, pero que no debe ser utilizada nunca en entornos reales. Para evitar su exposici\u00f3n accidental, se distribuye con la escritura a disco deshabilitada mediante una variable final: /** El guardado real est\u00e1 deshabilitado por defecto, habilitar para usar esta clase * para depuraci\u00f3n. No debe usarse para entornos reales, ya que no hay comprobaciones de * qu\u00e9 ficheros pueden sobrescribirse. */ private static final boolean DISABLED = true ; Si desea usarla para pruebas con escrituras reales en disco, debe habilitarla cambiando el valor de dicha variable: private static final boolean DISABLED = false ; Respuesta a una ejecuci\u00f3n de un lote Cuando se termina de procesar un lote de firma, el cliente recibe como respuesta un XML que describe como ha resultado el proceso. Este XML es acorde al siguiente esquema: <xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"> <xs:element name=\"signs\"> <xs:complexType> <xs:sequence> <xs:element name=\"signresult\" maxOccurs=\"unbounded\" minOccurs=\"0\"> <xs:complexType> <xs:simpleContent> <xs:extension base=\"xs:string\"> <xs:attribute type=\"xs:string\" name=\"id\" use=\"required\"/> <xs:attribute type=\"xs:string\" name=\"result\" use=\"required\"/> <xs:attribute type=\"xs:string\" name=\"description\" use=\"optional\"/> </xs:extension> </xs:simpleContent> </xs:complexType> </xs:element> </xs:sequence> </xs:complexType> </xs:element> </xs:schema> Un ejemplo de XML devuelto podr\u00eda ser el siguiente: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <signs> <signresult id=\"001-XAdES\" result=\"DONE_AND_SAVED\" description=\"\"/> <signresult id=\"002-CAdES\" result=\"DONE_AND_SAVED\" description=\"\"/> <signresult id=\"003-CAdES\" result=\"DONE_AND_SAVED\" description=\"\"/> <signresult id=\"004-CAdES\" result=\"DONE_AND_SAVED\" description=\"\"/> </signs> En \u00e9l distinguimos un nodo \u201csignresult\u201d por cada una de las firmas del lote, con su correspondiente identificador. Este puede tener tres atributos: \u201cid\u201d Identificador de la firma. \u201cresult\u201d Resultado del proceso. \u201cdescription\u201d (opcional) Descripci\u00f3n del resultado del proceso. Descripci\u00f3n del modo transaccional de ejecuci\u00f3n de los lotes Cuando se indica que un lote debe pararse en caso de error (con el atributo \u201cstoponerror=\"true\"\u201d en la cabecera del XML de definici\u00f3n), se activa un modo transaccional, que sigue el siguiente proceso: Las firmas son generadas \u00edntegramente en servidor, pero no se guardan hasta que no se realizan todas las del lote. SI una generaci\u00f3n fallase se interrumpe todo el proceso y se da por perdido. Una vez est\u00e1n generadas, se comienza el proceso de guardado de firmas ( el orden del lote no es relevante , el programa puede guardarlas en un orden distinto). Si un guardado falla, se deshacen los guardados que s\u00ed se hubiesen completado adecuadamente, llamado para ello al m\u00e9todo \u201crollback( final SingleSign sign)\u201d de la clase de guardado ( SignSaver ) definida en el lote para cada firma. Es responsabilidad del integrador implementar adecuadamente este m\u00e9todo \u201crollback( final SingleSign sign)\u201d en su clase de guardado. En los ejemplos provistos de implementaciones de SignSaver , si se usa salvado en un archivo del sistema de ficheros, el \u201crollback\u201d simplemente borra el fichero creado, pero si se usa el ejemplo de HTTP POST, el \u201crollback\u201d no deshace la operaci\u00f3n (realmente no hace nada, ya que no hay forma de deshacer una llamada HTTP).","title":"Firma por lotes predefinidos con el MiniApplet Cliente"},{"location":"markdown_strict/Firma_por_lotes_predefinidos_con_el_MiniApplet_Cliente/#creacion-de-los-lotes","text":"Los integradores que deseen usar esta funcionalidad deben crear (externamente, sin usar el MiniApplet) el XML de definici\u00f3n del lote de firma, que debe seguir este esquema: <xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"> <xs:element name=\"signbatch\"> <xs:complexType> <xs:sequence> <xs:element name=\"singlesign\" maxOccurs=\"unbounded\" minOccurs=\"1\"> <xs:complexType> <xs:sequence> <xs:element type=\"xs:string\" name=\"datasource\"/> <xs:element name=\"format\"> <xs:simpleType> <xs:restriction base=\"xs:string\"> <xs:enumeration value=\"XAdES\"/> <xs:enumeration value=\"CAdES\"/> <xs:enumeration value=\"PAdES\"/> </xs:restriction> </xs:simpleType> </xs:element> <xs:element name=\"suboperation\"> <xs:simpleType> <xs:restriction base=\"xs:string\"> <xs:enumeration value=\"sign\"/> <xs:enumeration value=\"cosign\"/> </xs:restriction> </xs:simpleType> </xs:element> <xs:element name=\"extraparams\"> <xs:simpleType> <xs:restriction base=\"xs:base64Binary\" /> </xs:simpleType> </xs:element> <xs:element name=\"signsaver\"> <xs:complexType> <xs:sequence> <xs:element type=\"xs:string\" name=\"class\"/> <xs:element name=\"config\"> <xs:simpleType> <xs:restriction base=\"xs:base64Binary\" /> </xs:simpleType> </xs:element> </xs:sequence> </xs:complexType> </xs:element> </xs:sequence> <xs:attribute type=\"xs:string\" name=\"Id\" use=\"required\"/> </xs:complexType> </xs:element> </xs:sequence> <xs:attribute type=\"xs:integer\" name=\"concurrenttimeout\" use=\"optional\"/> <xs:attribute name=\"stoponerror\" use=\"optional\"> <xs:simpleType> <xs:restriction base=\"xs:string\"> <xs:enumeration value=\"true\"/> <xs:enumeration value=\"false\"/> </xs:restriction> </xs:simpleType> </xs:attribute> <xs:attribute name=\"algorithm\" use=\"required\"> <xs:simpleType> <xs:restriction base=\"xs:string\"> <xs:enumeration value=\"SHA1withRSA\"/> <xs:enumeration value=\"SHA256withRSA\"/> <xs:enumeration value=\"SHA384withRSA\"/> <xs:enumeration value=\"SHA512withRSA\"/> </xs:restriction> </xs:simpleType> </xs:attribute> </xs:complexType> </xs:element> </xs:schema> Un posible ejemplo de XML creado siguiendo este esquema podr\u00eda ser el siguiente: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <signbatch stoponerror=\"false\" algorithm=\"SHA256withRSA\" concurrenttimeout=\"9223372036854775807\"> <singlesign Id=\"7725374e-728d-4a33-9db9-3a4efea4cead\"> <datasource>http://google.com</datasource> <format>XAdES</format> <suboperation>sign</suboperation> <extraparams> Iw0KI1N1biBBdWcgMjMgMTM6NDU6NDAgQ0VTVCAyMDE1DQpTaWduYXR1cmVJZD03NzI1Mzc0ZS03MjhkLTRhMzMtOWRiOS0zYTRlZmVhNGNlYWQNCg== </extraparams> <signsaver> <class>es.gob.afirma.signers.batch.SignSaverFile</class> <config> Iw0KI1N1biBBdWcgMjMgMTM6NDU6NDAgQ0VTVCAyMDE1DQpGaWxlTmFtZT1DXDpcXFVzZXJzXFx0b21hc1xcQXBwRGF0YVxcTG9jYWxcXFRlbXBcXEZJUk1BMS54bWwNCg== </config> </signsaver> </singlesign> <singlesign Id=\"93d1531c-cd32-4c8e-8cc8-1f1cfe66f64a\"> <datasource>SG9sYSBNdW5kbw==</datasource> <format>CAdES</format> <suboperation>sign</suboperation> <extraparams> Iw0KI1N1biBBdWcgMjMgMTM6NDU6NDAgQ0VTVCAyMDE1DQpTaWduYXR1cmVJZD05M2QxNTMxYy1jZDMyLTRjOGUtOGNjOC0xZjFjZmU2NmY2NGENCg== </extraparams> <signsaver> <class>es.gob.afirma.signers.batch.SignSaverFile</class> <config> Iw0KI1N1biBBdWcgMjMgMTM6NDU6NDAgQ0VTVCAyMDE1DQpGaWxlTmFtZT1DXDpcXFVzZXJzXFx0b21hc1xcQXBwRGF0YVxcTG9jYWxcXFRlbXBcXEZJUk1BMi54bWwNCg== </config> </signsaver> </singlesign> </signbatch> En este se distinguen los siguientes elementos: Tama\u00f1o m\u00e1ximo del XML de definici\u00f3n de lote El XML de definici\u00f3n de lote no puede exceder en tama\u00f1o de 1.024KB. Si necesitase componer trabajos mayores, estos deber\u00e1n fraccionarse en varios lotes. Cabecera de definici\u00f3n de lote En el ejemplo, es la l\u00ednea \u201c<signbatch stoponerror=\"false\" algorithm=\"SHA256withRSA\">\u201d. Contiene dos atributos configurables por el integrador: \u201cstoponerror\u201d Cuando se establece a \u201cfalse\u201d se indica que el proceso debe continuar incluso si alguna de las firmas del lote no puede completarse, y cuando se establece a \u201ctrue\u201d el proceso se para en el momento en el que se produce el primer error. \u201calgorithm\u201d Indica el algoritmo de firma a usar para todo el lote, y puede tener los siguientes valores: SHA1withRSA No recomendado por obsoleto. SHA256withRSA SHA384withRSA SHA512withRSA Definici\u00f3n de cada firma dentro del lote Dentro del elemento de definici\u00f3n de lote debemos incluir uno o varios elementos de tipo \u201csinglesign\u201d, que es obligatorio cuenten en origen con un identificados \u00fanico (en el ejemplo se observa la primera (el ejemplo contiene dos firmas dentro del lote) cabecera de definici\u00f3n de firma \u201c<singlesign id=\"7725374e-728d-4a33-9db9-3a4efea4cead\">\u201d, que indica que es una firma dentro del lote identificada por la cadena \u201c7725374e-728d-4a33-9db9-3a4efea4cead\u201d. Configuraci\u00f3n de cada firma dentro del lote Cada una de las firmas dentro del lote puede ser configurada individualmente con los siguientes par\u00e1metros: Origen de los datos a firmar El origen de los datos debe indicarse dentro del elemento \u201cdatasource\u201d del XML, por ejemplo: \u201c<datasource>http://google.com</datasource>\u201d El origen de los datos a firmar puede indicarse: Con una URL. En este caso el servidor (nunca el cliente) descargar\u00e1 directamente los datos a firmar. Se admite HTTP y HTTPS. Si se usa SSL con certificado cliente es necesario que el certificado cliente est\u00e9 instalado en el almac\u00e9n de certificados personales del Entorno de Ejecuci\u00f3n de Java (JRE). En este caso, la URL debe devolver los datos finales a firmar, sin ninguna codificaci\u00f3n intermedia (ni Base64 ni nada). As\u00ed, por ejemplo, para firmar un PDF que est\u00e9 disponible en una URL debemos indicar directamente la URL que apunte a ese PDF, como: https://atos.net/content/dam/global/documents/investor-presentations/atos-q1-2015-presentation.pdf Si la URL apunta a una huella digital (para los modos de firma que lo soporten), esta debe estar igualmente en binario, como: https://miweb.com/firmas/hash001.bin En el ejemplo, puede observarse que en la primera firma se indica que el origen de los datos es la URL \u201c http://google.com \u201d. Indicando directamente los datos a firmar codificados en Base64. En este caso el servidor descodificar\u00e1 el Base64 para obtener los datos a firmar. Puede usarse tambi\u00e9n para indicar directamente una huella (en los modos de firma que lo soporten), teni\u00e9ndose en este caso que indicar en Base64. En el ejemplo, puede observarse que en la primera firma se indica que el origen de los datos es el Base64 \u201c SG9sYSBNdW5kbw== \u201d, que descodificado equivale a la cadena de texto \u201cHola Mundo\u201d. Existe un caso adicional, y es que cuando se indica un texto que no puede interpretarse como una URL ni como Base64, se firma este directamente sin hacer ning\u00fan tipo de transformaci\u00f3n. En general, debe evitarse evitar este tercer modo, ya que, por una parte, puede ser dif\u00edcil diferenciar entre Base64 y texto normal, y por otra, pueden encontrarse errores de interpretaci\u00f3n por la codificaci\u00f3n del texto (ASCII, UTF-8, ANSI, etc.). Formato de firma El formato de firma a utilizar debe indicarse dentro del elemento \u201cformat\u201d del XML, por ejemplo \u201c<format>XAdES</format>\u201d. Se admiten los siguientes formatos: XAdES \u201cXAdES\u201d CAdES \u201c CAdES \u201d PAdES \u201cPAdES\u201d Con este formato solo se pueden firmar documentos PDF. Algoritmo de firma El algoritmo de firma a utilizar debe indicarse dentro del elemento \u201cformat\u201d del XML, por ejemplo \u201c<format>XAdES</format>\u201d. Se admiten los siguientes algoritmos: SHA1withRSA \u201c SHA1withRSA \u201d No se recomienda por obsoleto. SHA256withRSA \u201c SHA256withRSA \u201d SHA384withRSA \u201c SHA384withRSA \u201d SHA512withRSA \u201c SHA512withRSA \u201d Operaci\u00f3n de firma La operaci\u00f3n concreta de firma a realizar debe indicarse dentro del elemento \u201csuboperation\u201d del XML, por ejemplo <suboperation>sign</suboperation>\u201d. Se admiten las siguientes operaciones: Firma \u201csign\u201d Cofirma \u201ccosign\u201d Par\u00e1metros adicionales para la firma Los par\u00e1metros adicionales para el formato y la operaci\u00f3n concreta de firma (tal y como se describen en el manual del MiniApplet) deben indicarse dentro del elemento \u201cextraparams\u201d del XML, por ejemplo \u201c<extraparams>bW9kZT1pbXBsaWNpdA0Kc2lnbmF0dXJlUHJvZHVjdGlvbkNpdHk9TWFkcmlk</extraparams>\u201d. Estos par\u00e1metros adicionales deben indicarse codificando su representaci\u00f3n textual como Base64. As\u00ed, las siguientes propiedades (indicando cada par\u00e1metro en una l\u00ednea de texto con el formato nombre_par\u00e1metro=valor ): mode=implicit signatureProductionCity=Madrid Quedar\u00edan codificadas en Base64 como: bW9kZT1pbXBsaWNpdA0Kc2lnbmF0dXJlUHJvZHVjdGlvbkNpdHk9TWFkcmlk Si no se desea establecer par\u00e1metros adicionales debe dejarse el nodo vac\u00edo. Configuraci\u00f3n del guardado de la firma El guardado de la firma una vez esta se completa es una tarea que realiza igualmente el servidor, utilizando para ello clases especiales de guardado que el integrador debe codificar seg\u00fan sus necesidades. Las clases deben situarse en el CLASSPATH de Java de la aplicaci\u00f3n Web en el lado servidor (normalmente dentro de un fichero JAR). Consulte la documentaci\u00f3n de su servidor de aplicaciones para realizar esta tarea. Una forma muy c\u00f3moda de hacerlo es editando el WAR (es un fichero ZIP con la extensi\u00f3n cambiada) antes de desplegarlo, y a\u00f1adiendo el JAR con las nuevas clases en el directorio WEB-INF/lib. Hay que tener cuidado de no alterar el resto de contenidos ni la estructura de carpetas antes de volver a comprimir el WAR (como ZIP). Estas clases deben implementar el interfaz Java SignSaver , que tiene la siguiente forma: package es.gob.afirma.signers.batch; import java.io.IOException; import java.util.Properties; /** Interfaz para el guardado, almacenaje o env\u00edo de firmas una vez realizadas. * @author Tom\u00e1s Garc\u00eda-Mer\u00e1s. */ public interface SignSaver { /** Guarda una firma electr\u00f3nica. * @param sign Definici\u00f3n de la firma que se hizo. * @param dataToSave Datos a guardar, resultado de la firma electr\u00f3nica. * @throws IOException Si hay problemas durante el proceso. */ void saveSign( final SingleSign sign, final byte [] dataToSave) throws IOException; /** Deshace un guardado previo (para los modos transaccionales). * @param sign Identificador de la firma a deshacer. */ void rollback( final SingleSign sign); /** Configura c\u00f3mo ha de guardarse la firma electr\u00f3nica. * cada implementaci\u00f3n requerir\u00e1 unas propiedades distintas dentro del * objeto de propiedades. * @param config Propiedades de configuraci\u00f3n. */ void init( final Properties config); /** Obtiene las propiedades de configuraci\u00f3n. * @return Propiedades de configuraci\u00f3n. */ Properties getConfig(); } Como se puede observar, el objeto de guardado recibe sus par\u00e1metros de funcionamiento y configuraci\u00f3n en un fichero de propiedades de Java en el m\u00e9todo \u201cinit\u201d, que es invocado siempre inmediatamente despu\u00e9s de ser instanciado. La forma de indicar qu\u00e9 clase de guardado a usar y con qu\u00e9 configuraci\u00f3n es mediante el nodo \u201csignsaver\u201d, que contiene a su vez dos nodos: \u201cclass\u201d, con el nombre cualificado de la clase a usar. \u201cconfig\u201d, con las propiedades de configuraci\u00f3n codificadas en Base64. As\u00ed, en el ejemplo tenemos el siguiente nodo: <signsaver> <class>es.gob.afirma.signers.batch.SignSaverFile</class> <config> Iw0KI1RodSBBdWcgMjAgMTI6MTM6NDEgQ0VTVCAyMDE1DQpGaWxlTmFtZT1DXDpcXFVzZXJzXFx0b21hc1xcQXBwRGF0YVxcTG9jYWxcXFRlbXBcXEZJUk1BMi54bWwNCg== </config> </signsaver> Este indica que debe usarse la clase de guardado \u201ces.gob.afirma.signers.batch.SignSaverFile\u201d con la configuraci\u00f3n \u201cIw0KI1RodSBBdWcgMjAgMTI6MTM6NDEgQ0VTVCAyMDE1DQpGaWxlTmFtZT1DXDpcXFVzZXJzXFx0b21hc1xcQXBwRGF0YVxcTG9jYWxcXFRlbXBcXEZJUk1BMi54bWwNCg==\u201d, que si la descodificamos vemos que contiene: FileName=C\\\\Users\\tomas\\AppData\\Local\\Temp\\FIRMA2.xml Que es la configuraci\u00f3n que necesita para guardar la firma (esta clase simplemente guarda la firma en el fichero que se le indique en la configuraci\u00f3n. Se incluyen con la implementaci\u00f3n dos ejemplos de clases de guardado: Guardado a fichero: Clase: es.gob.afirma.signers.batch.SignSaverFile Par\u00e1metros de configuraci\u00f3n: FileName Indica el fichero donde debe guardarse la firma. Esta clase es un simple ejemplo, y no debe usarse directamente en producci\u00f3n, ya que presenta problemas de seguridad (podr\u00edan indicarse que se sobrescriba un fichero de sistema). Env\u00edo a una direcci\u00f3n HTTP POST: Clase: es.gob.afirma.signers.batch.SignSaverHttpPost Par\u00e1metros de configuraci\u00f3n: PostUrl Puede ser tanto HTTP como HTTPS PostParamName Indica la URL a la que hacer el HTTP POST Indica el par\u00e1metro de la petici\u00f3n POST donde deben adjuntarse los datos. Estos se adjuntar\u00e1n siempre en Base64 con alfabeto URL SAFE. Esta clase realiza una llamada HTTP POST a la direcci\u00f3n indicada, enviando como datos del POST un par\u00e1metro con el nombre indicado cuyo valor ser\u00e1 la codificaci\u00f3n Base64 del resultado de la firma. Es necesario entonces que el integrador provea este servicio HTTP POST para recibir y tratar la firma enviada (habitualmente un servicio Web). La URL indicada debe ser accesible desde el servidor (que es quien realiza el env\u00edo).","title":"Creaci\u00f3n de los lotes"},{"location":"markdown_strict/Firma_por_lotes_predefinidos_con_el_MiniApplet_Cliente/#notas-sobre-el-ejemplo-signsaverfile","text":"La clase es.gob.afirma.signers.batch.SignSaverFile, es, como se ha comentado anteriormente, \u00fanicamente un ejemplo de implementaci\u00f3n el del interfaz es.gob.afirma.signers.batch.SignSaver que puede resultar de utilidad para depuraci\u00f3n, pero que no debe ser utilizada nunca en entornos reales. Para evitar su exposici\u00f3n accidental, se distribuye con la escritura a disco deshabilitada mediante una variable final: /** El guardado real est\u00e1 deshabilitado por defecto, habilitar para usar esta clase * para depuraci\u00f3n. No debe usarse para entornos reales, ya que no hay comprobaciones de * qu\u00e9 ficheros pueden sobrescribirse. */ private static final boolean DISABLED = true ; Si desea usarla para pruebas con escrituras reales en disco, debe habilitarla cambiando el valor de dicha variable: private static final boolean DISABLED = false ;","title":"Notas sobre el ejemplo SignSaverFile"},{"location":"markdown_strict/Firma_por_lotes_predefinidos_con_el_MiniApplet_Cliente/#respuesta-a-una-ejecucion-de-un-lote","text":"Cuando se termina de procesar un lote de firma, el cliente recibe como respuesta un XML que describe como ha resultado el proceso. Este XML es acorde al siguiente esquema: <xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"> <xs:element name=\"signs\"> <xs:complexType> <xs:sequence> <xs:element name=\"signresult\" maxOccurs=\"unbounded\" minOccurs=\"0\"> <xs:complexType> <xs:simpleContent> <xs:extension base=\"xs:string\"> <xs:attribute type=\"xs:string\" name=\"id\" use=\"required\"/> <xs:attribute type=\"xs:string\" name=\"result\" use=\"required\"/> <xs:attribute type=\"xs:string\" name=\"description\" use=\"optional\"/> </xs:extension> </xs:simpleContent> </xs:complexType> </xs:element> </xs:sequence> </xs:complexType> </xs:element> </xs:schema> Un ejemplo de XML devuelto podr\u00eda ser el siguiente: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <signs> <signresult id=\"001-XAdES\" result=\"DONE_AND_SAVED\" description=\"\"/> <signresult id=\"002-CAdES\" result=\"DONE_AND_SAVED\" description=\"\"/> <signresult id=\"003-CAdES\" result=\"DONE_AND_SAVED\" description=\"\"/> <signresult id=\"004-CAdES\" result=\"DONE_AND_SAVED\" description=\"\"/> </signs> En \u00e9l distinguimos un nodo \u201csignresult\u201d por cada una de las firmas del lote, con su correspondiente identificador. Este puede tener tres atributos: \u201cid\u201d Identificador de la firma. \u201cresult\u201d Resultado del proceso. \u201cdescription\u201d (opcional) Descripci\u00f3n del resultado del proceso.","title":"Respuesta a una ejecuci\u00f3n de un lote"},{"location":"markdown_strict/Firma_por_lotes_predefinidos_con_el_MiniApplet_Cliente/#descripcion-del-modo-transaccional-de-ejecucion-de-los-lotes","text":"Cuando se indica que un lote debe pararse en caso de error (con el atributo \u201cstoponerror=\"true\"\u201d en la cabecera del XML de definici\u00f3n), se activa un modo transaccional, que sigue el siguiente proceso: Las firmas son generadas \u00edntegramente en servidor, pero no se guardan hasta que no se realizan todas las del lote. SI una generaci\u00f3n fallase se interrumpe todo el proceso y se da por perdido. Una vez est\u00e1n generadas, se comienza el proceso de guardado de firmas ( el orden del lote no es relevante , el programa puede guardarlas en un orden distinto). Si un guardado falla, se deshacen los guardados que s\u00ed se hubiesen completado adecuadamente, llamado para ello al m\u00e9todo \u201crollback( final SingleSign sign)\u201d de la clase de guardado ( SignSaver ) definida en el lote para cada firma. Es responsabilidad del integrador implementar adecuadamente este m\u00e9todo \u201crollback( final SingleSign sign)\u201d en su clase de guardado. En los ejemplos provistos de implementaciones de SignSaver , si se usa salvado en un archivo del sistema de ficheros, el \u201crollback\u201d simplemente borra el fichero creado, pero si se usa el ejemplo de HTTP POST, el \u201crollback\u201d no deshace la operaci\u00f3n (realmente no hace nada, ya que no hay forma de deshacer una llamada HTTP).","title":"Descripci\u00f3n del modo transaccional de ejecuci\u00f3n de los lotes"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/","text":"< < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported . \u00cdndice 1. Introducci\u00f3n [5](#introducci\u00f3n) 2. Complementos para navegadores Web [6](#complementos-para-navegadores-web) 2.1. Arquitectura para la realizaci\u00f3n de firmas electr\u00f3nicas [6](#arquitectura-para-la-realizaci\u00f3n-de-firmas-electr\u00f3nicas) 2.1.1. El API JavaScript para realizar firmas electr\u00f3nicas [7](#el-api-javascript-para-realizar-firmas-electr\u00f3nicas) 2.2. El problema de la heterogeneidad de los complementos para navegadores Web [10](#el-problema-de-la-heterogeneidad-de-los-complementos-para-navegadores-web) 2.2.1. Cambios por cada navegador Web [10](#cambios-por-cada-navegador-web) 2.2.2. Cambios por sistema operativo [12](#cambios-por-sistema-operativo) 2.3. Desarrollos adicionales para realizar firmas AdES [13](#desarrollos-adicionales-para-realizar-firmas-ades) 2.3.1. Firma trif\u00e1sica [13](#firma-trif\u00e1sica) 2.3.2. Firma local [14](#firma-local) 2.4. Conclusiones [15](#conclusiones) 3. Invocaci\u00f3n por protocolo [16](#invocaci\u00f3n-por-protocolo) 3.1. Invocaci\u00f3n por protocolo en navegador Web [16](#invocaci\u00f3n-por-protocolo-en-navegador-web) 3.1.1. Advertencias de apertura [17](#advertencias-de-apertura) 3.1.2. Soporte a la invocaci\u00f3n por protocolo en navegadores Web [19](#soporte-a-la-invocaci\u00f3n-por-protocolo-en-navegadores-web) 3.2. La invocaci\u00f3n por protocolo como sustituto de los Applets de Java [19](#la-invocaci\u00f3n-por-protocolo-como-sustituto-de-los-applets-de-java) 3.2.1. Comunicaci\u00f3n entre aplicaci\u00f3n nativa y aplicaci\u00f3n JavaScript [19](#comunicaci\u00f3n-entre-aplicaci\u00f3n-nativa-y-aplicaci\u00f3n-javascript) 3.3. Implementaci\u00f3n de la aplicaci\u00f3n nativa susceptible de ser invocada por protocolo [22](#implementaci\u00f3n-de-la-aplicaci\u00f3n-nativa-susceptible-de-ser-invocada-por-protocolo) 3.3.1. Asociaci\u00f3n del protocolo [22](#asociaci\u00f3n-del-protocolo) 3.3.2. Actualizaci\u00f3n de las aplicaciones [23](#actualizaci\u00f3n-de-las-aplicaciones) 3.3.3. Dependencias con el JRE en el caso de aplicaciones desarrolladas en Java [23](#dependencias-con-el-jre-en-el-caso-de-aplicaciones-desarrolladas-en-java) 3.4. Consideraciones generales de la invocaci\u00f3n por protocolo [24](#consideraciones-generales-de-la-invocaci\u00f3n-por-protocolo) 3.4.1. Experiencia de usuario [24](#experiencia-de-usuario) 3.4.2. Complejidad en el despliegue [25](#complejidad-en-el-despliegue) 4. Conexi\u00f3n por servicio [26](#conexi\u00f3n-por-servicio) 4.1. Ventajas y desventajas de la comunicaci\u00f3n por servicio [27](#ventajas-y-desventajas-de-la-comunicaci\u00f3n-por-servicio) 4.1.1. Compatibilidad con distintos sistemas operativos [27](#compatibilidad-con-distintos-sistemas-operativos) 4.1.2. Experiencia de usuario [28](#experiencia-de-usuario-1) 4.1.3. Reutilizaci\u00f3n del desarrollo Java [28](#reutilizaci\u00f3n-del-desarrollo-java) 4.1.4. Sin tr\u00e1fico de red externo [29](#sin-tr\u00e1fico-de-red-externo) 4.1.5. Seguridad [29](#seguridad) 5. Combinaci\u00f3n de la invocaci\u00f3n por servicio y la invocaci\u00f3n por protocolo [31](#combinaci\u00f3n-de-la-invocaci\u00f3n-por-servicio-y-la-invocaci\u00f3n-por-protocolo) 5.1. Problemas resueltos mediante la combinaci\u00f3n de ambos [31](#problemas-resueltos-mediante-la-combinaci\u00f3n-de-ambos) 5.2. Descripci\u00f3n funcional de la secuencia [32](#descripci\u00f3n-funcional-de-la-secuencia) 5.3. Consideraciones de implementaci\u00f3n [33](#consideraciones-de-implementaci\u00f3n) 5.3.1. Compatibilidad con distintos entornos operativos [33](#compatibilidad-con-distintos-entornos-operativos) 5.4. Consideraciones de implementaci\u00f3n [34](#consideraciones-de-implementaci\u00f3n-1) 5.4.1. Mantenimiento de la funcionalidad de invocaci\u00f3n por protocolo [34](#mantenimiento-de-la-funcionalidad-de-invocaci\u00f3n-por-protocolo) 5.4.2. Uso de servicios de sistema operativo versus simples servicios TCP 34 5.4.3. Espera desde la invocaci\u00f3n por protocolo hasta la plena operatividad del servicio [36](#espera-desde-la-invocaci\u00f3n-por-protocolo-hasta-la-plena-operatividad-del-servicio) 5.5. Resumen y consideraciones finales [39](#resumen-y-consideraciones-finales) 6. API 100% JavaScript [40](#api-100-javascript) 6.1. Iniciativas WebCrypto de W3C [40](#iniciativas-webcrypto-de-w3c) 6.2. Alianza FIDO [41](#alianza-fido) 6.3. Consideraciones sobre la firma 100% JavaScript [41](#consideraciones-sobre-la-firma-100-javascript) 7. Resumen y recomendaciones finales [43](#resumen-y-recomendaciones-finales) \u00cdndice de ilustraciones Figure 1: Arquitectura gen\u00e9rica complemento navegador [6](#_Toc408253242) Figure 2: Propuesta de advertencia para acceso a certificados [8](#_Toc408253243) Figure 3: Propuesta de advertencia para acceso a claves privadas [8](#_Toc408253244) Figure 4: Propuesta de di\u00e1logo permiso extendido de acceso a certificados [9](#_Toc408253245) Figure 5: Propuesta de di\u00e1logo permiso extendido de acceso a claves privadas [9](#_Toc408253246) Figure 6: Advertencia de invocaci\u00f3n por protocolo en Mozilla Firefox [16](#_Toc408253247) Figure 7: Advertencia de invocaci\u00f3n por protocolo en Google Chrome [16](#_Toc408253248) Figure 8: Advertencia de invocaci\u00f3n por protocolo en Internet Explorer [17](#_Toc408253249) Figure 9: Comunicaci\u00f3n bidireccional en invocaci\u00f3n por protocolo [19](#_Toc408253250) Figure 10: Esquema simplificado de la comunicaci\u00f3n por servicio [24](#_Toc408253251) Figure 11: Secuencia de operaci\u00f3n en invocaci\u00f3n por protocolo y comunicaci\u00f3n por servicio [30](#_Toc408253252) Figure 12: Invocaci\u00f3n por protocolo m\u00e1s comunicaci\u00f3n por servicio en Android [33](#_Toc408253253) Figure 13: M\u00faltiples llamadas esperando la operatividad del servicio [34](#_Toc408253254) Figure 14: Llamada previa de comprobaci\u00f3n de disponibilidad [35](#_Toc408253255) Introducci\u00f3n Los Applets de Java se han convertido en una verdadera pesadilla para usuarios y proveedores de servicios de firma electr\u00f3nica en aplicaciones Web por muchos motivos: Continuos problemas de compatibilidad por las actualizaciones de seguridad de Java. Continuos problemas de seguridad del Java Plugin. Incompatibilidad con muchos sistemas operativos: Windows RT, Windows Phone. iOS Android Incompatibilidad con ciertos navegadores Web: Versiones futuras de Google Chrome. Internet Explorer en modo UI Moderno. M\u00faltiples advertencias de seguridad y molestas necesidades de configuraci\u00f3n para el usuario. Pero estos inconvenientes no hacen desaparecer la necesidad de firma electr\u00f3nica Web, por lo que se hace indispensable la b\u00fasqueda de alternativas, distingui\u00e9ndose distintas alternativas: Complemento para navegador Web. Invocaci\u00f3n por protocolo. Comunicaci\u00f3n por servicio. Invocaci\u00f3n por protocolo m\u00e1s comunicaci\u00f3n por servicio. Firma 100% JavaScript. A continuaci\u00f3n se realizar\u00e1 un recorrido por cada una de estas estrategias, destacando sus ventajas e inconvenientes, desde todos los puntos de vista: del desarrollador, del integrador y del usuario, no olvidando las nuevas plataformas m\u00f3viles en el an\u00e1lisis. Complementos para navegadores Web Arquitectura para la realizaci\u00f3n de firmas electr\u00f3nicas Un complemento de navegador para realizar firmas electr\u00f3nicas, realmente como cualquier otro complemento, consta de una arquitectura b\u00e1sica de cuatro capas: < Figure 1: Arquitectura gen\u00e9rica complemento navegador El API del sistema operativo que proporciona acceso al almac\u00e9n de claves y certificados del usuario. Un desarrollo para acceder al API superior, que debe ser nativo y privilegiado, ya que el acceso a las claves del usuario tiene implicaciones de seguridad. Un API JavaScript que se expone a las aplicaciones Web, de forma que puedan usar el complemento de forma program\u00e1tica. La aplicaci\u00f3n Web (JavaScript) que implementa el integrador para solicitar una firma electr\u00f3nica al usuario. El API JavaScript para realizar firmas electr\u00f3nicas Una hipot\u00e9tica aplicaci\u00f3n Web de firma electr\u00f3nica que se apoyase en un complemento de navegador difiere mucho de una basada en Applets de Java en t\u00e9rminos de arquitectura, ya que en las \u00faltimas pr\u00e1cticamente el 100% del proceso de firma se hace siguiendo el API JSE, mientras que en las primeras la l\u00f3gica debe distribuirse entre un programa JavaScript que se ejecuta en el navegador Web como cualquier otro y el c\u00f3digo nativo del complemento. L\u00f3gica en el lado del complemento Siendo la parte menos portable de los aplicativos y la m\u00e1s compleja de desplegar y actualizar (los usuarios no actualizan los complementos de sus navegadores con regularidad), lo deseable ser\u00eda limitar la funcionalidad por parte del complemento a una funcionalidad m\u00ednima y no sujeta a cambios por evoluci\u00f3n de las normativas. As\u00ed, una propuesta de funcionalidades ser\u00eda: Firma PKCS#1 v1.5. El soporte, si fuese necesario, de PKCS#1 2.0 podr\u00eda hacerse como una extensi\u00f3n de la versi\u00f3n 1.5 desde la propia aplicaci\u00f3n JavaScript. Deben soportarse al menos los siguientes algoritmos: SHA1withRSA SHA256withRSA SHA384withRSA SHA512withRSA En ning\u00fan caso debe permitirse una operaci\u00f3n RSA con clave privada no asociada \u201cat\u00f3micamente\u201d a una huella digital (NONEwithRSA). Los datos de entrada y de salida se tratar\u00e1n siempre en Base64. Obtenci\u00f3n de certificado (en formato Base64). Obtenci\u00f3n de referencia a clave privada. Dado que estas funcionalidades est\u00e1n parcialmente descritas en un est\u00e1ndar incipiente de la W3C (WebCrypto Key Discovery: http://www.w3.org/TR/2013/WD-webcrypto-key-discovery-20130108/ ), deber\u00eda implementarse este API como exposici\u00f3n JavaScript siempre que fuese posible. De igual forma, deber\u00eda intentarse una colaboraci\u00f3n con este organismo para la evoluci\u00f3n de la normativa justo con el desarrollo funcional del complemento. Aspectos de seguridad en el desarrollo Es justo esta parte del API de firma la que m\u00e1s cuidado debe tener en cuanto a la seguridad, puesto que es la que accede a las claves privadas del usuario y a la informaci\u00f3n personal contenida en los certificados. Tratamiento de sesiones Deben implementarse mecanismos que aseguren que las referencias obtenidas hacia las claves privadas (y preferiblemente tambi\u00e9n los identificadores de los certificados) sean de un solo uso limitado a la sesi\u00f3n y contexto JavaScript desde el cual se solicitaron, con independencia de que los distintos contextos provengan del mismo dominio Web. Confirmaciones por parte del usuario El usuario debe ser siempre consciente de cuando una aplicaci\u00f3n Web accede tanto a sus certificados como a sus claves privadas y cuando realiza operaciones con esas claves privadas, y para ello debe proporcionar confirmaciones en di\u00e1logos gr\u00e1ficos que deben ser controlados desde la parte nativa del complemento. < Figure 2: Propuesta de advertencia para acceso a certificados < Figure 3: Propuesta de advertencia para acceso a claves privadas No obstante, y para permitir los procesos de firmas por lotes, deben implementarse mecanismos para aplicar la confirmaci\u00f3n en m\u00e1s de una operaci\u00f3n, y para ello debe contemplarse: En las obtenciones de certificado y referencias a claves privadas: < Figure 4: Propuesta de di\u00e1logo permiso extendido de acceso a certificados \u201cNo volver a preguntar para esta sesi\u00f3n\u201d A partir de que el usuario confirme que no desea volver a ser preguntado, se podr\u00e1n realizar operaciones de acceso a certificados siempre dentro de la misma sesi\u00f3n y contexto JavaScript. \u201cNo volver a preguntar para este sitio Web\u201d Esta opci\u00f3n solo debe aparecer para sitios Web con SSL, y el permiso debe asociarse a la clave p\u00fablica del certificado. Deben rechazarse los certificados inadecuados (no mostrarse la opci\u00f3n en esos casos): Expedidos para otro dominio. Caducados o a\u00fan no v\u00e1lidos. Cuya CA (Autoridad de Certificaci\u00f3n) no sea de confianza. En las operaciones con la clave privada: < Figure 5: Propuesta de di\u00e1logo permiso extendido de acceso a claves privadas En las operaciones de clave privada nunca se ofrecer\u00e1 un permiso de forma permanente para el sitio Web, \u00fanicamente debe permitirse un permiso extendido para la sesi\u00f3n y contexto JavaScript actuales, y en este caso solo debe aparecer para sitios Web con SSL, y el permiso debe asociarse a la clave p\u00fablica del certificado. Deben rechazarse los certificados inadecuados (no mostrarse la opci\u00f3n en esos casos): Expedidos para otro dominio. Caducados o a\u00fan no v\u00e1lidos. Cuya CA no sea de confianza. # Concepto de sesi\u00f3n y contexto JavaScript Anteriormente se ha hecho referencia al contexto JavaScript. Se entiende en cualquier caso el contexto JavaScript como el objeto en el que est\u00e1 contenido el c\u00f3digo en ejecuci\u00f3n. Habitualmente el contexto global es objeto \u201cWindow\u201d de JavaScript, pero si las referencias a certificados y claves se solicitan desde un contexto inferior (por ejemplo, dentro de una funci\u00f3n), deben implementarse mecanismos para que esa referencia no sea reutilizable desde un contexto superior (como el global), aunque s\u00ed desde nuevos contextos de nivel inferior. El problema de la heterogeneidad de los complementos para navegadores Web Cambios por cada navegador Web Actualmente, los distintos navegadores Web implementan distintas tecnolog\u00edas de complementos, lo que obliga a implementar un posible complemento de firma electr\u00f3nica repitiendo el desarrollo por cada una de las tecnolog\u00edas. Tras el abandono de NPAPI (el API de complementos de Netscape) por parte de Google Chrome ( http://blog.chromium.org/2013/09/saying-goodbye-to-our-old-friend-npapi.html ), encontramos un escenario en el que Firefox y Safari utilizan NPAPI, Chrome su propio est\u00e1ndar \u201cPepperAPI\u201d (PPAPI) e Internet Explorer ha eliminado por completo el uso de complementos (ActiveX est\u00e1 en proceso de discontinuaci\u00f3n): Apple Safari NPAPI Google Chrome PPAPI Microsoft Internet Explorer -nd- Mozilla Firefox NPAPI Variaciones de navegador Web por sistema Incluso dentro de un mismo navegador Web, encontramos que el soporte de complementos no es uniforme seg\u00fan el sistema operativo, teniendo versiones en las que no se soportan estos complementos, pudi\u00e9ndose observar que los dispositivos m\u00f3viles son sin duda un escollo de importancia. Google Chrome Microsoft Windows OK Microsoft Windows Modern UI KO Apple OS X OK Google Android KO Apple iOS KO Linux OK Apple Safari Microsoft Windows OK Apple OS X OK Apple iOS KO Mozilla Firefox Microsoft Windows OK Apple OS X OK Google Android OK * Linux OK * Necesita desarrollo nativo dependiente de la arquitectura del dispositivo m\u00f3vil. Cambios por sistema operativo Otro problema grave a tener en cuenta a la hora de abordar un desarrollo de complemento de navegador Web es que, incluso dentro de la misma tecnolog\u00eda de complementos, cada sistema operativo tiene su API para el acceso a claves criptogr\u00e1ficas, y debe preverse una programaci\u00f3n espec\u00edfica para cada caso: Apple OS X Llavero de OS X Microsoft Windows Microsoft CAPI Google Android desde 4.0 a 4.2 Llavero de Android Google Android a partir de 4.3 Almac\u00e9n JCA/JCE Linux NSS Acceso a tarjetas inteligentes Y en un \u00faltimo nivel de complejidad, cada uno de esos API de acceso a claves criptogr\u00e1ficas puede necesitar desarrollos adicionales con API diferentes, que duplican en los casos necesarios el esfuerzo de programaci\u00f3n: Llavero de Apple OS X 10.9 y anteriores Tokend Llavero de Apple OS X 10.0 y superiores CryptoTokenKit Microsoft CAPI API Integrado NSS PKCS#11 Llavero de Android -nd- Almac\u00e9n JCA/JCE A medida v\u00eda API NFC, USB o PC/SC Solicitud del PIN o contrase\u00f1a de los almacenes Para finalizar, es importante rese\u00f1ar que la gesti\u00f3n del PIN o contrase\u00f1a de los almacenes de claves puede estar gestionado por el propio sistema operativo (en cuyo caso un posible complemento no necesita codificar ning\u00fan mecanismo de solicitud) o simplemente necesitar una gesti\u00f3n externa. En este \u00faltimo caso, ser\u00eda necesario codificar un di\u00e1logo de solicitud de contrase\u00f1a que siguiese los siguientes par\u00e1metros: Interfaz gr\u00e1fico acorde con el sistema operativo. Accesible para personas con discapacidad. Seguro: No debe persistir el PIN o contrase\u00f1a en memoria. La siguiente tabla muestra en qu\u00e9 casos ser\u00eda necesario este desarrollo y en cu\u00e1les no, necesitando en los casos de portabilidad la l\u00f3gica para discernir cuando mostrarlo: Almac\u00e9n de sistema NSS Necesita desarrollo CAPI Integrado Llavero de OS X Integrado Llavero de Android Integrado Almac\u00e9n JCA/JCE Necesita desarrollo Tarjeta inteligente Tokend Integrado CryptoTokenKit Integrado PKCS#11 Necesita desarrollo A medida v\u00eda API NFC, USB o PC/SC Necesita desarrollo Desarrollos adicionales para realizar firmas AdES Como se ha expuesto anteriormente, es preferible que un complemento de navegador se limite a la realizaci\u00f3n de firmas PKCS#1 y a la obtenci\u00f3n de los certificados de usuario. As\u00ed, ser\u00eda responsabilidad de una capa adicional desarrollada en JavaScript \u201cgen\u00e9rico\u201d la transformaci\u00f3n de esas firmas PKCS#1 en firmas AdES acordes a normativas europeas. Esta capa se ejecutar\u00eda como cualquier otra aplicaci\u00f3n Web JavaScript, mediante su publicaci\u00f3n en servidor Web y de un modo no privilegiado dentro del navegador y de la p\u00e1gina Web. De esta forma, esta capa JavaScript tendr\u00eda dos opciones muy diferentes, la realizaci\u00f3n local de las firmas electr\u00f3nicas o el uso de t\u00e9cnicas trif\u00e1sicas apoy\u00e1ndose en un servidor externo. Firma trif\u00e1sica En el caso de una operaci\u00f3n trif\u00e1sica la soluci\u00f3n al problema de la realizaci\u00f3n de firmas AdES est\u00e1 ya realmente resuelto, ya que es posible adaptar, con un esfuerzo limitado, el c\u00f3digo JavaScript actual del MiniApplet Cliente @firma para acceder al complemento en la fase central y delegar en servidor las pre-firmas y post-firmas. Firma local La realizaci\u00f3n local de firmas AdES tiene una dificultad muy elevada, ya que ser\u00eda necesaria una codificaci\u00f3n de toda la l\u00f3gica CAdES, XAdES y PAdES en JavaScript. XAdES La realizaci\u00f3n de firmas XAdES en JavaScript requerir\u00eda el uso de bibliotecas XML de terceros, que soportasen, entre otras, las siguientes funcionalidades: XPATH y XPATH2 De-referenciaci\u00f3n interna a XML. Realizaci\u00f3n de huellas digitales. Canonicalizaci\u00f3n de XML. Actualmente existen bibliotecas JavaScript con funcionalidades b\u00e1sicas de XMLDSig que podr\u00edan ser utilizadas como base para la realizaci\u00f3n de firmas XAdES, y que cuentas con la l\u00f3gica antes enumerada: https://github.com/yaronn/xml-crypto CAdES La realizaci\u00f3n de firmas CAdES 100% en JavaScript es realmente compleja, ya que requiere distintas tecnolog\u00edas que por su car\u00e1cter binario no son comunes en JavaScript: Trabajo en Base64 como si se tratase de datos binarios nativos. API ASN.1 https://github.com/GlobalSign/ASN1.js https://github.com/mcavage/node-asn1 API PKCS#7 https://github.com/digitalbazaar/forge Huellas digitales SHA https://code.google.com/p/crypto-js/ Etc. PAdES La firma PAdES 100% JavaScript es sin duda la opci\u00f3n m\u00e1s compleja, y requerir\u00eda la implementaci\u00f3n previa de CAdES m\u00e1s funcionalidades espec\u00edficas de tratamiento de PDF, tanto la extracci\u00f3n de su rango procesable como el tratamiento de sus campos internos (AcroFields), su diccionario, sus metadatos, etc. Estas funcionalidades no est\u00e1n presentes en ning\u00fan API PDF en JavaScript, por lo que habr\u00eda que ampliar uno para a\u00f1adir esta nueva l\u00f3gica, siendo el punto de partida m\u00e1s apropiado el proyecto PDFJS de Mozilla: http://mozilla.github.io/pdf.js/ Conclusiones El desarrollo de un complemento para navegador no es realmente un \u00fanico desarrollo, sino que son varios y distintos desarrollos dependiendo de sistema operativo y navegador Web, pero incluso con ese sobreesfuerzo hay plataformas en las que no es posible usar complementos: Navegadores: Internet Explorer, en cualquier plataforma. Google Chrome, en Windows 8 y superiores en modo \u201cUI moderno\u201d, iOS y Android. Safari en iOS. Sistemas operativos: iOS. Android. Pero adem\u00e1s del enorme esfuerzo y el soporte parcial de plataformas operativas, hay un factor adicional que desaconseja a\u00fan m\u00e1s el desarrollo de complementos para navegador: La seguridad. Tradicionalmente, los complementos de navegador han sido una fuente de problemas de seguridad, y es la raz\u00f3n que ha llevado a algunos de los m\u00e1s populares, como Adobe Flash o Oracle Java a marcarse como inseguros y considerarse como fuente com\u00fan de inseguridades. As\u00ed, un complemento, que abre una puerta al c\u00f3digo nativo privilegiado desde el c\u00f3digo JavaScript accesible por p\u00e1ginas de Internet, es una enorme responsabilidad en cuanto a la seguridad. Esta responsabilidad implica la necesidad de provisionar un esfuerzo constante de auditor\u00eda y actualizaci\u00f3n del c\u00f3digo, as\u00ed como a implementar formas que faciliten a los usuarios actualizar el complemento tan pronto como est\u00e9n listas nuevas versiones. Con independencia de las dificultades, la implementaci\u00f3n de este tipo de complementos deber\u00eda hacerse siempre de forma coordinada con los grupos W3C WebCrypto, de forma que se intercambien experiencias, compartan esfuerzos y, lo que es m\u00e1s importante, se facilite la futura migraci\u00f3n a los incipientes est\u00e1ndares Web. Invocaci\u00f3n por protocolo Los sistemas operativos actuales mantienen una serie de asociaciones entre tipos de fichero y las aplicaciones que son capaces de tratarlos. As\u00ed, si en un sistema operativo Windows se indica que se abra un documento de texto, este consultar\u00e1 en el Registro de Windows cual es la aplicaci\u00f3n por defecto asociada para su tratamiento (usualmente el Bloc de Notas), y proceder\u00e1 a abrir esta aplicaci\u00f3n pasando como par\u00e1metro la ruta completa del fichero en el esquema de argumentos definido en el propio Registro de Windows como parte de la asociaci\u00f3n. Esta asociaci\u00f3n se hace de distintas formas seg\u00fan el sistema operativo, en Windows es por su extensi\u00f3n (\u201ctxt\u201d en nuestro ejemplo), pero por ejemplo en Linux es por su MIME-Type ( text/plain en el ejemplo). Este mismo esquema se define igualmente en la mayor\u00eda de los sistemas operativos para los esquemas comunes de protocolos basados en URN/URI/URL. As\u00ed, por ejemplo, si en un sistema operativo Windows indicamos que queremos abrir http://www.atos.net (por ejemplo, desde la l\u00ednea de comandos con la sentencia \u201cstart http://www.atos.net\u201d) se iniciar\u00e1 el navegador Web por defecto, que es la aplicaci\u00f3n asociada para tratar el protocolo http, procediendo a abrir esa p\u00e1gina Web. Este modo de abrir aplicaciones se conoce como invocaci\u00f3n por protocolo , y de forma an\u00e1loga a la invocaci\u00f3n para abrir aplicaciones indicando un fichero, donde antes se recib\u00eda la ruta completa del archivo a abrir, ahora se recibe la URL/URI/URN completa que se indic\u00f3 abrir. Invocaci\u00f3n por protocolo en navegador Web Este mecanismo de invocaci\u00f3n por protocolo de los sistemas operativos es usualmente accesible desde los navegadores Web. Esto quiere decir que si en la barra de direcciones del navegador Web indicamos una URI, el navegador Web trasladar\u00e1 el control al sistema operativo para que este localice la aplicaci\u00f3n apropiada para tratar el protocolo asociado a la URI, y la abra pas\u00e1ndole dicha URI. Un ejemplo de este mecanismo en Apple iOS podr\u00eda ser el soporte del protocolo \u201ctel\u201d en forma de URN con el formato \u201ctel://1-408-555-5555\u201d, donde 1-408-555-5555 es un n\u00famero de tel\u00e9fono. As\u00ed una llamada desde una p\u00e1gina Web a esta URN con una sentencia HTML como la siguiente, \u201c<a href=\"tel://1-408-555-5555\">1-408-555-5555</a>\u201d,provoca que se active el tel\u00e9fono (en un iPhone) y realice una llamada a ese n\u00famero, ya que la aplicaci\u00f3n nativa de tel\u00e9fono de iOS tiene registrado ese esquema de protocolo. En este caso tenemos una salvedad evidente, y es que el navegador Web obviar\u00e1 esta transferencia de control al sistema operativo cuando el propio navegador sepa c\u00f3mo tratar el protocolo, por ejemplo, con http, https, ftp, etc. Advertencias de apertura Como la invocaci\u00f3n por protocolo no deja de ser una transferencia de datos desde una p\u00e1gina Web (que no tiene porqu\u00e9 ser de confianza) a una aplicaci\u00f3n nativa, los navegadores Web acostumbran a advertir de este cambio al usuario: < Figure 6: Advertencia de invocaci\u00f3n por protocolo en Mozilla Firefox < Figure 7: Advertencia de invocaci\u00f3n por protocolo en Google Chrome < Figure 8: Advertencia de invocaci\u00f3n por protocolo en Internet Explorer En general, todos los navegadores Web muestran alg\u00fan tipo de advertencia, excepto Apple Safari en Windows, OS X e iOS y WebKit (Android). En el caso de Internet Explorer se comprueba adem\u00e1s la firma electr\u00f3nica del ejecutable del programa nativo invocado. Firma electr\u00f3nica del ejecutable para invocaci\u00f3n por protocolo en Internet Explorer Dado que Internet Explorer comprueba las firmas electr\u00f3nicas de los programas invocados mediante protocolo, la firma de estos es un requisito indispensable. No obstante las firmas deben ser siempre de ejecutables en formato PE (Ejecutable portable) de Microsoft. Si la aplicaci\u00f3n invocada est\u00e1 desarrollada en Java, realmente la aplicaci\u00f3n que se invoca no ser\u00e1 la provista (un JAR de Java), sino el propio entorno de ejecuci\u00f3n de Java (JRE), cuya firma electr\u00f3nica no puede ser controlada (el JRE lo instala el usuario de un proveedor ajeno, como Oracle). Para sortear este problema se hace necesario el uso de un \u201clanzador\u201d en formato PE (EXE de Windows) que se pueda firmar electr\u00f3nicamente, sea el invocado por protocolo y se encargue de lanzar el JAR a trav\u00e9s del JRE. Como recomendaci\u00f3n, la aplicaci\u00f3n Launch4J ( http://launch4j.sourceforge.net/ ) es capaz de crear ejecutables de tipo PE a partir de un JAR de Java, sorteando el inconveniente mencionado. Es quiz\u00e1s importante mencionar que un ejecutable generado con Launch4J no puede ser firmado mediante el firmador PE de Microsoft (SignTool), siendo necesario usar otras herramientas, como Sign4J (https://github.com/fbergmann/launch4j/tree/master/sign4j). Soporte a la invocaci\u00f3n por protocolo en navegadores Web La inmensa mayor\u00eda de los navegadores Web soportan la invocaci\u00f3n por protocolo, con la \u00fanica excepci\u00f3n de Google Chrome en su versi\u00f3n \u201cWindows 8 UI Moderno\u201d: Chrome Windows 8 y superiores en UI Moderno NO Resto de sistemas (Android, iOS, Linux, Windows) S\u00cd Safari Todos los sistemas (iOS, OS X) S\u00cd Internet Explorer Todos los sistemas (Windows, Windows Phone, Windows RT) S\u00cd Firefox Todos los sistemas (Windows, Linux, OS X, Android) S\u00cd La invocaci\u00f3n por protocolo como sustituto de los Applets de Java La invocaci\u00f3n por protocolo puede, en ciertos casos, plantearse como un sustituto de los Applets de Java, si bien es necesario tener en cuenta siempre: En ciertos sistemas operativos, la invocaci\u00f3n de una aplicaci\u00f3n desde el navegador Web provoca un cambio de contexto gr\u00e1fico molesto para el usuario (desde el navegador a la aplicaci\u00f3n), y adem\u00e1s al cerrarse la aplicaci\u00f3n no siempre se vuelve de forma autom\u00e1tica al navegador. Sistemas operativos con cambios de contexto: Microsoft Windows 8 en modo UI Moderno. Apple iOS Sistemas operativos sin cambio de contexto: Apple OS X Microsoft Windows Google Android Linux Sistemas operativos con un \u201ccambio parcial\u201d de contexto (la experiencia de usuario es aceptable) Microsoft Windows 8.1 No es posible tener un UI integrado en la p\u00e1gina Web, como ocurre con los Applets de Java, Adobe Flash o los controles Active X. Una vez se invoca la aplicaci\u00f3n desde el navegador, no puede existir una comunicaci\u00f3n bidireccional directa entre ambos (aplicaci\u00f3n nativa y JavaScript de la p\u00e1gina Web), como s\u00ed ocurre en los Applets de Java. La aplicaci\u00f3n nativa, no obstante, puede recibir informaci\u00f3n en la propia URL de invocaci\u00f3n, aunque hay que tener en cuenta que la longitud de esta es limitada. Comunicaci\u00f3n entre aplicaci\u00f3n nativa y aplicaci\u00f3n JavaScript Como se ha comentado, una aplicaci\u00f3n JavaScript ejecut\u00e1ndose en un navegador Web puede invocar una aplicaci\u00f3n nativa siempre que esta est\u00e9 registrada como la aplicaci\u00f3n por defecto para tratar un protocolo que no trate el propio navegador (por ejemplo, el Cliente @firma usa el protocolo afirma en una URI del estilo \u201cafirma://\u201d), proporcionando ciertos datos como parte de la propia URI de invocaci\u00f3n, pero\u2026 \u00bfC\u00f3mo puede la aplicaci\u00f3n nativa devolver datos a la aplicaci\u00f3n JavaScript? El modo m\u00e1s directo y sencillo es usar un servidor (accesible por ambas partes) como intermediario en ese di\u00e1logo, en una secuencia acorde al siguiente esquema: < Figure 9: Comunicaci\u00f3n bidireccional en invocaci\u00f3n por protocolo El navegador Web invoca a una App nativa mediante una URI especial, indicando una serie de informaci\u00f3n (datos a firmar, formato, opciones, etc.). La App recibe los datos y realiza la firma electr\u00f3nica usando las funciones nativas de gesti\u00f3n de claves y certificados. La App nativa deposita el resultado de la firma en un servidor intermediario mediante una llamada a un servicio Web simple. El navegador Web recoge el resultado de la operaci\u00f3n de firma del servidor intermediario y contin\u00faa la ejecuci\u00f3n de la l\u00f3gica de negocio. Como resultado tenemos una comunicaci\u00f3n cuasi-bidireccional entre navegador Web (JavaScript) y App nativa, supliendo completamente a los complementos tradicionales. Este modelo no obstante, requiere de ciertas precauciones para resultar eficaz y seguro: El servidor intermediario y la aplicaci\u00f3n Web deben estar preferentemente en el mismo servidor (para evitar advertencias de cross site scripting ). Si se usa SSL cliente, este debe requerirse \u00fanicamente en el servidor que aloja la aplicaci\u00f3n Web, y no en el servidor intermediario (para evitar una solicitud de autenticaci\u00f3n a la aplicaci\u00f3n nativa), pero siempre estando ambos con HTTPS en el mismo nombre de servidor. El servidor intermediario debe implementar mecanismos para asegurarse de que los datos depositados por una aplicaci\u00f3n nativa sean recogidos \u00fanicamente por la aplicaci\u00f3n JavaScript que la invoc\u00f3: Para ello deben implementarse al menos todos estos mecanismos: Los datos deben cifrarse mediante una clave aleatoria de un solo uso generada al vuelo desde el programa JavaScript, que se pasa a la aplicaci\u00f3n nativa mediante la URI de invocaci\u00f3n. Los datos deben tener un identificador aleatorio de un solo uso generado al vuelo desde el programa JavaScript, que se pasa a la aplicaci\u00f3n nativa mediante la URI de invocaci\u00f3n. El servidor debe borrar cualquier dato que se deposite en \u00e9l y que no sea requerido en un tiempo determinado (unos pocos minutos, que es lo m\u00e1ximo que puede durar la operaci\u00f3n en la aplicaci\u00f3n nativa). No deben implementarse mecanismos derivados de la direcci\u00f3n IP, ya que las conexiones 3G pueden variar de IP en una misma sesi\u00f3n. Consideraciones de seguridad En el flujo anteriormente descrito se observa que JavaScript solicita los resultados de la operaci\u00f3n de firma a un servidor intermedio, pero \u00bfC\u00f3mo es posible garantizar que el servidor intermedio devuelve los resultados \u00fanicamente al cliente que origin\u00f3 la petici\u00f3n? Son varias las recomendaciones en cuanto a seguridad para garantizar que se cumpla esta premisa: El cliente debe generar un identificador \u00fanico \u201cal vuelo\u201d (por ejemplo, un UUID seg\u00fan RFC-4122, que pr\u00e1cticamente imposibilita encontrarlo por fuerza bruta o azar) al iniciar la transacci\u00f3n, y pedir los datos al servidor indicando este UUID. El cliente debe generar \u201cal vuelo\u201d una clave \u00fanica de cifrado sim\u00e9trico (por ejemplo 3DES) que se trasladar\u00e1 en la invocaci\u00f3n a la aplicaci\u00f3n nativa. Esta subir\u00e1 los datos al servidor ya cifrados, por lo que este servidor jam\u00e1s conocer\u00e1 la clave de cifrado (el descifrado se realizar\u00e1 en la aplicaci\u00f3n JavaScript mediante l\u00f3gica JavaScript). Cuando unos datos se suban al servidor intermedio, este establecer\u00e1 un \u201cperiodo de caducidad\u201d, y estos datos ser\u00e1n borrados tras cumplirse este periodo de caducidad. Esto limita la ventana temporal en la que los datos est\u00e1n accesibles desde Internet y limita los posibles ataques. Debe usarse SSL en todas las transacciones. Implementaci\u00f3n de la aplicaci\u00f3n nativa susceptible de ser invocada por protocolo Una de las ventajas de la invocaci\u00f3n por protocolo es que la aplicaci\u00f3n, siempre que est\u00e9 asociada adecuadamente al protocolo, no tiene que seguir un API espec\u00edfico ni una normativa concreta, puede ser cualquier tipo de aplicaci\u00f3n. As\u00ed, es posible realizar una implementaci\u00f3n en Java (para una aplicaci\u00f3n de firma, reutilizando los activos Java del Cliente @firma) que cubra una buena parte de los sistemas operativos. Concretamente, una aplicaci\u00f3n JSE funcionar\u00eda sin problemas en Windows, Linux y OS X, y partes de esta aplicaci\u00f3n podr\u00edan ser reutilizadas en Android. En general, se podr\u00eda abordar la implementaci\u00f3n siguiendo este cuadro de lenguajes de programaci\u00f3n: Windows Java JSE Linux OS X Android Java Dalvik Windows RT, Windows Phone, Windows UI Moderno .NET / C# iOS Objective C / Swift Asociaci\u00f3n del protocolo Un problema distinto por cada uno de los sistemas operativos es como se realiza la asociaci\u00f3n de la aplicaci\u00f3n con el protocolo espec\u00edfico por el que se le invoca: Microsoft Windows Asociaci\u00f3n en Registro de Windows. Debe hacerse mediante un programa espec\u00edfico de instalaci\u00f3n. Apple OS X Declarado en la aplicaci\u00f3n. Apple iOS Declarado en la aplicaci\u00f3n. Google Android Declarado en la aplicaci\u00f3n. Linux Asociaci\u00f3n dual en Firefox y en el gestor de ventanas del sistema operativo (Gnome, KDE, etc.). Debe hacerse mediante un programa espec\u00edfico de instalaci\u00f3n (por ejemplo, un paquete DEB). Actualizaci\u00f3n de las aplicaciones Mientras que en un Applet de Java el integrador controla f\u00e1cilmente la versi\u00f3n que se ejecuta (la que \u00e9l publica en su servidor Web), con una aplicaci\u00f3n instalada el escenario es completamente distinto, ya que es imposible conocer cu\u00e1l es la versi\u00f3n que el usuario tiene instalada en su ordenador. Este inconveniente obliga a integrador y usuario a usar siempre las \u00faltimas versiones disponibles, en la primera parte del JavaScript de integraci\u00f3n y en la segunda de la aplicaci\u00f3n instalada localmente. Para este segundo caso, siendo el ciudadano el responsable, es necesario implementar mecanismos de notificaci\u00f3n de disponibilidad de nuevas versiones que faciliten la actualizaci\u00f3n. Estos mecanismos difieren notablemente seg\u00fan el sistema operativo, en los sistemas m\u00e1s modernos ser\u00e1 un proceso completamente autom\u00e1tico gestionado por las tiendas de aplicaciones, mientras que en los tradicionales tendr\u00e1 que ser un proceso manual: Windows Proceso manual OS X Tienda: AppStore iOS Tienda: AppStore Android Tienda: Google Play Linux Tienda: Repositorio de paquetes Windows UI Moderno, Windows Phone, Windows RT Tienda: Windows Store Los entornos que requieran tienda necesitar\u00e1n una publicaci\u00f3n (que acostumbra a suponer costes recurrentes de mantenimiento de cuentas) y actualizaci\u00f3n en ellas y el cumplimiento de las normas de codificaci\u00f3n de estas. En un proceso manual, se necesitar\u00e1 de una combinaci\u00f3n de funcionalidades cliente (comprobaci\u00f3n peri\u00f3dica de disponibilidad de nueva versi\u00f3n), servidor (informar esta disponibilidad y publicaci\u00f3n de actualizaciones) y usuario (autorizar e iniciar la actualizaci\u00f3n). Dependencias con el JRE en el caso de aplicaciones desarrolladas en Java Evidentemente, cualquier aplicaci\u00f3n Java necesita un entorno de ejecuci\u00f3n de Java (JRE) para ejecutarse. Detr\u00e1s de esta obviedad encontramos un aspecto cr\u00edtico a tener en cuenta para implantar una estrategia de invocaci\u00f3n por protocolo, y es que el usuario no solo debe instalar y mantener la propia aplicaci\u00f3n Java, sino tambi\u00e9n el JRE. Este mantenimiento, adem\u00e1s de ser muy molesto para el usuario, introduce otros efectos no deseados, como que el usuario pueda actualizar a un JRE no compatible con la aplicaci\u00f3n, o que la aplicaci\u00f3n le inste a instalar un JRE no compatible con otras aplicaciones de su equipo. Adicionalmente, la dependencia externa con un JRE impide, por pol\u00edtica, la publicaci\u00f3n de una aplicaci\u00f3n en la AppStore de OS X, un nuevo problema que inhabilitar\u00eda las actualizaciones autom\u00e1ticas a trav\u00e9s de tienda de aplicaciones. Para solventar estos problemas es m\u00e1s que recomendable que la aplicaci\u00f3n incluya internamente un JRE para su uso exclusivo (preferentemente OpenJDK para evitar problemas de licenciamiento). Esta opci\u00f3n apenas incrementa el tama\u00f1o de descarga en menos de 30MB (no notable con las conexiones de banda ancha actuales) y evita por completo los inconvenientes antes enumerados. Al ser un JRE no registrado en el sistema operativo (uso excluso de nuestra aplicaci\u00f3n) no influir\u00eda en los JRE ya existentes ni en la configuraci\u00f3n del usuario, al no instalar ni necesitar un Java Plugin no introduce problemas de seguridad en el equipo y al ser un JRE preseleccionado y probado se garantiza la compatibilidad con la aplicaci\u00f3n. Existen diversas formas de integrar un JRE con una aplicaci\u00f3n Java de forma cohesionada, desde una combinaci\u00f3n de Launch4J y NSIS en Windows, el empaquetado espec\u00edfico de la \u201c.app\u201d en OS X o el empaquetado espec\u00edfico de un distribuible de Debian (\u201c.deb\u201d) en Linux. Consideraciones generales de la invocaci\u00f3n por protocolo Experiencia de usuario La experiencia de usuario en la invocaci\u00f3n por protocolo tiene un escollo importante cuando el usuario no cuenta con la aplicaci\u00f3n instalada. Las aplicaciones JavaScript no pueden (por motivos obvios de seguridad) saber que aplicaciones tiene o no instaladas un usuario, por lo que iniciar\u00e1n la invocaci\u00f3n por protocolo \u201ca ciegas\u201d, suponiendo que la aplicaci\u00f3n est\u00e1 adecuadamente instalada en el equipo, lo que derivar\u00e1 en un error en caso de que esto no sea as\u00ed. Deben buscarse mecanismos de enmascarar este error de una forma que no desconcierte al usuario, as\u00ed como debe advertirse al usuario de la necesidad de contar con la aplicaci\u00f3n instalada antes de iniciar el tr\u00e1mite. El otro problema de cara a la experiencia de usuario son los sistemas operativos en los que el tr\u00e1nsito desde el navegador a la aplicaci\u00f3n nativa y de vuelta desde \u00e9sta de nuevo al navegador provoca un \u201ccambio de contexto\u201d. Este cambio de contexto es molesto y hace que el usuario deba volver manualmente al navegador, lo que puede desconcertar al usuario. Esta situaci\u00f3n se da en los siguientes sistemas operativos: Microsoft Windows \u201cUI Moderno\u201d (incluyendo Windows RT y Windows en versiones 8, 8.1 y 10). Microsoft Windows Phone. Apple iOS. Complejidad en el despliegue La necesidad de un servidor intermedio dificulta en gran manera los despliegues, ya que hace necesario un peque\u00f1o servicio Web (JEE o equivalente) adem\u00e1s del servidor Web de publicaci\u00f3n del HTML + JavaScript. Este servidor intermedio hace adem\u00e1s que se multipliquen las conexiones de red y el tr\u00e1fico de datos, lo cual no solo ralentiza la operaci\u00f3n, sino que hace m\u00e1s dif\u00edcil el diagn\u00f3stico de los posibles fallos en el proceso de firma. Conexi\u00f3n por servicio Una de las deficiencias m\u00e1s grandes de la invocaci\u00f3n por protocolo es la necesidad de un servidor intermedio que gestione la comunicaci\u00f3n de vuelta al navegador Web. No obstante, si una aplicaci\u00f3n nativa puede actuar como servidor de \u201csockets\u201d TCP o de servidor HTTP y una aplicaci\u00f3n JavaScript en un navegador puede establecer conexiones HTTP o WebSocket\u2026 \u00bfPor qu\u00e9 no usar estas tecnolog\u00edas para establecer una comunicaci\u00f3n local? < Figure 10: Esquema simplificado de la comunicaci\u00f3n por servicio En este escenario, la aplicaci\u00f3n local se ejecutar\u00eda como servicio en la m\u00e1quina del usuario, escuchando a la espera de una solicitud en un puerto TCP fijo, mientras que ser\u00eda la aplicaci\u00f3n JavaScript de firma la que iniciar\u00eda el di\u00e1logo mediante una llamadas (WebSocket o HTTP) a \u201clocalhost\u201d. En este punto, ser\u00eda preferible el uso de llamadas HTTP (en detrimento de WebSockets), para ampliar la compatibilidad a navegadores Web antiguos, ya que la compatibilidad con WebSockets se limita a las versiones presentadas en esta tabla: Compatibilidad con WebSocket (RFC 6455) Apple Safari Google Chrome Mozilla Firefox MS Internet Explorer Versi\u00f3n 6 o superior Versi\u00f3n 16 o superior Versi\u00f3n 11 o superior Versi\u00f3n 10 o superior Ventajas y desventajas de la comunicaci\u00f3n por servicio Compatibilidad con distintos sistemas operativos Por desgracia, hay sistemas operativos donde no es posible usar una invocaci\u00f3n por servicio por distintas razones: Windows Windows RT OS X Linux iOS Android Compatible No compatible Compatible Compatible No compatible Desaconsejado En los casos de Apple iOS (iPad, iPhone, etc.) no es posible la apertura de servicios locales (el fabricante lo proh\u00edbe por motivos de seguridad), mientras que en el caso de Android, si bien es perfectamente posible desde un punto de vista t\u00e9cnico, desde una orientaci\u00f3n pr\u00e1ctica es desaconsejable, ya que un servicio de estas caracter\u00edsticas disminuir\u00eda notablemente la duraci\u00f3n de la bater\u00eda del dispositivo. Uso con servidores de terminales: Microsoft Terminal Server y Citrix Un caso muy particular de compatibilidad que se ve afectado para las comunicaciones por servicio es cuando el ordenador del usuario funciona en modo terminal con un producto Windows de servicio de terminales como RDP (Microsoft Terminal Server) o ICA (Citrix). En estos casos no es posible seguir esta estrategia, ya que los servicios locales no lo son a los propios terminales, sino al servidor de estos, por lo que el servicio, al ser servicio de servidor, no podr\u00eda determinar de forma segura quien es el originario de la petici\u00f3n sin realizar una serie de complejas l\u00f3gicas: El servicio debe proporcionarse de forma centralizada desde el servidor de terminales, para evitar que varios servicios intenten escuchar peticiones en el mismo puerto provocando conflictos. El servicio debe implementar mecanismos para determinar qu\u00e9 usuario realiz\u00f3 la petici\u00f3n de firma, y acceder al almac\u00e9n de claves y certificados correspondiente a ese usuario. Deben implementarse las medidas de seguridad adecuadas para evitar la impostaci\u00f3n de identidades y que un usuario de terminal acceda a las claves de otro usuario de terminal. Estas l\u00f3gicas deben implementarse como desarrollos de extensi\u00f3n a los servicios de terminal, usando para ello los kits de desarrollo de los distintos servidores (los SDK de Microsoft y los SDK de Citrix). Esta implementaci\u00f3n es compleja en s\u00ed misma, y no puede reutilizarse de un producto servidor a otro. Experiencia de usuario La primera ventaja del uso de servicios locales es la experiencia de usuario, ya que no hay tiempo de espera de arranque de aplicaciones (m\u00e1s r\u00e1pido que cualquier otro medio, ya que la aplicaci\u00f3n est\u00e1 siempre precargada en memoria) y no hay di\u00e1logos de advertencia (excepto los que se quieran a\u00f1adir por seguridad en el desarrollo). No obstante, en el caso de Windows 8 y superiores en modo \u201cUI Moderno\u201d, seguir\u00edamos teniendo los problemas de cambio de contexto que ya se describieron en el apartado \u201cLa invocaci\u00f3n por protocolo como sustituto de los Applets de Java\u201d. No es posible eliminar estos inconvenientes, ya que es necesaria una interacci\u00f3n directa con el usuario (interfaz gr\u00e1fica por parte de la aplicaci\u00f3n proveedora del servicio) como m\u00ednimo para control de seguridad (nunca permitir una ejecuci\u00f3n oculta) y para preservar la privacidad del usuario (la selecci\u00f3n de certificados debe hacerse con interfaz propio, para evitar que se expongan a las aplicaciones Web detalles de certificados que no est\u00e1n relacionados con la operaci\u00f3n en curso). Reutilizaci\u00f3n del desarrollo Java Otra ventaja es que podr\u00eda reutilizarse un desarrollo Java para la realizaci\u00f3n de las operaciones de firma electr\u00f3nica en buena parte de los sistemas, disminuyendo la duplicidad de esfuerzos en el desarrollo. No obstante, dado que se trata de un proveedor de servicios a nivel de sistema operativo, es pr\u00e1cticamente obligatorio desarrollar un interfaz nativo en cada sistema operativo siguiendo las especificaciones que el fabricante de este indique, obteniendo as\u00ed los beneficios de los que disfrutan los servicios comunes: Gesti\u00f3n a nivel de sistema operativo. Autoarranque en caso de ca\u00edda. Configuraci\u00f3n com\u00fan. Etc. En general, estas ser\u00edan las interfaces seg\u00fan cada sistema operativo: Windows Deben implementarse los requisitos definidos en la especificaci\u00f3n Services Control Manager de Microsoft . Adicionalmente, dado que el servicio tendr\u00e1 interfaz gr\u00e1fica propia, y debido a las restricciones de seguridad impuestas para los servicios en sistemas Windows a partir de Windows Vista, es necesario seguir las pautas conocidas como Windows Service Hardening . API disponible en C++ y .NET, pero no en Java. OS X Deben implementare las interfaces definidas por Apple . API disponible en Objective C. Android Deben implementarse las interfaces definidas por Google . API disponible en Java, pero v\u00e1lidos \u00fanicamente para Android. Linux Distintas opciones. En el caso m\u00e1s simple puede desarrollarse en Java y arrancarse mediante simples scripts de sistema (SH, BASH, etc.). As\u00ed, podemos observar que ser\u00edan necesarios ciertos desarrollos nativos por cada sistema operativo, que deben conectar con el c\u00f3digo Java (reutilizado del Cliente @firma) para realizar las firmas electr\u00f3nicas en s\u00ed. Este enlace Nativo <-> Java no es en absoluto desde\u00f1able, especialmente en el caso de Windows, ya que los requisitos de seguridad mencionados anteriormente (Windows Service Hardening) establecen numerosas restricciones de seguridad que dificultan este traspaso bidireccional desde C++ o .NET (C#, Visual Basic, etc.) hacia Java. Sin tr\u00e1fico de red externo Una ventaja m\u00e1s, en este caso con respecto a la alternativa de invocaci\u00f3n por protocolo, es que la sincronizaci\u00f3n del navegador y la aplicaci\u00f3n mediante un servicio no conlleva tr\u00e1fico de red externo. El tr\u00e1fico de red supondr\u00eda un coste en: Consumo de red, que puede ser cr\u00edtico en entornos m\u00f3viles con coste monetario por transmisi\u00f3n de datos. Tiempo de transmisi\u00f3n: Los datos se env\u00edan desde el navegador al servicio externo (tiempo de espera en el navegador web). Los datos se descargan desde el servicio a la aplicaci\u00f3n (tiempo de espera en la aplicaci\u00f3n). La firma se env\u00eda al servicio externo desde la aplicaci\u00f3n (tiempo de espera en la aplicaci\u00f3n). La firma se descarga desde el servicio externo al navegador (tiempo de espera en el navegador web). Estos costes se incrementar\u00edan de forma proporcional al tama\u00f1o de los datos. En la invocaci\u00f3n por servicio, estos costes no existen. Seguridad La seguridad es sin duda el punto m\u00e1s flojo de esta estrategia de sustituci\u00f3n de los Applets de Java, por varios motivos: Un servicio accesible desde TCP es un punto de entrada muy peligroso a nuestras claves privadas y certificados: La necesidad de usar siempre el mismo puerto hace que no sea necesario una exploraci\u00f3n previa de los puertos para iniciar un ataque. Aunque solo aceptemos conexiones locales, es muy f\u00e1cil impostar la IP de origen para que parezca local. Cualquier servicio TCP es susceptible a ataques, hasta el mejor programador puede dejar compromisos de seguridad en su c\u00f3digo: tratamiento de buffers en C++, inseguridades propias de los entornos de ejecuci\u00f3n (Visual C++, Java, .NET...), etc. En entonos de terminal, se introduce una nueva amenaza, que es la impostaci\u00f3n de identidad de usuario, que, como se ha comentado anteriormente, derivar\u00eda en el acceso a las claves y certificados de otro usuario dentro de la misma red de terminales. Cifrado de datos transmitidos Dado que se transmiten datos por conexiones comunes de red (puerto TCP y protocolo HTTP), si no se usa un adecuado sistema de cifrado de datos, un simple an\u00e1lisis de red revelar\u00eda informaci\u00f3n \u201csensible\u201d, dejando la aplicaci\u00f3n con una inseguridad inadmisible. Como no es posible usar claves asim\u00e9tricas (podr\u00edan extraerse trivialmente las claves privadas del mismo software), es necesario implementar complejos sistemas de intercambio de claves (como por ejemplo Diffie\u2013Hellman) para asegurar las transmisiones. Pr\u00e1cticamente todos los lenguajes de programaci\u00f3n disponen de bibliotecas que implementan estos sistemas, por lo que, para ahorrar esfuerzos, ser\u00eda conveniente su uso evitando implementaciones propias: Java JCA/JCE JavaScript NodeJS Crypto como base. OS X API de seguridad de Apple OS X Android JCA/JCE Aun as\u00ed, la imposibilidad de usar SSL en las transmisiones, supondr\u00e1 siempre cierta exposici\u00f3n a un ataque de tipo \u201chombre en el medio\u201d, si bien se trata de un riesgo bajo. Idealmente, estas caracter\u00edsticas deben implementarse en el frontal del servicio (que es la parte nativa dependiente del sistema de servicios del sistema operativo), lo que redundar\u00eda en duplicidad de desarrollos, si bien es aceptable delegarlo en capas interiores (Java, que se puede reutilizar). Desde el lado cliente, la implementaci\u00f3n debe ser siempre JavaScript. Combinaci\u00f3n de la invocaci\u00f3n por servicio y la invocaci\u00f3n por protocolo La comunicaci\u00f3n por servicio eliminaba el gran problema de la invocaci\u00f3n por protocolo, que es la necesidad de un servidor intermedio para la transmisi\u00f3n bidireccional contra la aplicaci\u00f3n Web, pero introduc\u00eda una serie de problemas que lo hac\u00edan pr\u00e1cticamente inviable. No obstante, es posible plantear una combinaci\u00f3n de ambas opciones para dar soluci\u00f3n a los problemas de ambas sin prescindir de las ventajas de cada una. B\u00e1sicamente, se podr\u00eda plantear un proveedor de servicio por puerto TCP que fuese iniciado (arrancado) mediante una invocaci\u00f3n por protocolo, pudiendo pasar ciertos par\u00e1metros sobre la prestaci\u00f3n del servicio en esa invocaci\u00f3n. Problemas resueltos mediante la combinaci\u00f3n de ambos La comunicaci\u00f3n por servicio usa un mismo puerto TCP siempre, lo que hace que se puedan planificar los ataques. La aplicaci\u00f3n JavaScript puede determinar de forma aleatoria (ah\u00ed la seguridad) una serie de puertos como candidatos (a partir de una lista de varios miles de n\u00fameros de puerto marcados como normalmente desasignados) a ser usados para el servicio. Esta lista se proporcionar\u00eda como par\u00e1metro en la invocaci\u00f3n por protocolo. De esta forma, el puerto a usar siempre es distinto, siendo muy dif\u00edcil (probabil\u00edsticamente imposible) saber de antemano cual se va a usar. La comunicaci\u00f3n por servicio deja siempre el puerto abierto, esperando a las invocaciones, lo que hace que la exposici\u00f3n a ataques sea permanente. El servicio podr\u00eda iniciarse solo tras una invocaci\u00f3n por protocolo, cerr\u00e1ndose justo despu\u00e9s de servir la petici\u00f3n. La \u201cpuerta hacia nuestras claves\u201d se abre solo el tiempo estrictamente necesario. La comunicaci\u00f3n por servicio podr\u00eda admitir peticiones de atacantes que hubiesen falseado su IP y/o su identidad. La invocaci\u00f3n por protocolo puede indicar un n\u00famero de petici\u00f3n (un UUID generado aleatoriamente), y el servicio admitir \u00fanicamente peticiones que conozcan este UUID. Como la invocaci\u00f3n por protocolo no es susceptible a escuchas (no va por red) ni a ataques de tipo \u201chombre en el medio\u201d, no ser\u00eda posible impostar el origen de las comunicaciones. La comunicaci\u00f3n por servicio, al usar un n\u00famero fijo de puerto TCP, causa conflictos en servidores de terminal, donde todas las sesiones comparten origen de red. Como el servicio recibe una lista (aleatoria) de puertos TCP a usar, se pueden ir probando en orden hasta que se encuentra un puerto libre de la lista. Al seleccionarse la lista desde un total de varios miles de puertos normalmente desasignados, una simple lista de 5 o 10 puertos hace probabil\u00edsticamente imposible la colisi\u00f3n, ya que el puerto de otra sesi\u00f3n solo estar\u00e1 ocupado durante el tiempo preciso que dure una operaci\u00f3n de firma, quedando libre al terminar. En Android, el mantenimiento continuo de un servicio activo provoca un inaceptable incremento en el consumo de bater\u00eda en dispositivos m\u00f3viles. Es posible que el servicio se mantenga por defecto inactivo (sin consumir bater\u00eda) y que sea la activaci\u00f3n la que lo inicie, deteni\u00e9ndose de forma autom\u00e1tica al terminar la tarea de firma encomendada. As\u00ed solo habr\u00eda el consumo justo de energ\u00eda. Descripci\u00f3n funcional de la secuencia Figure 11: Secuencia de operaci\u00f3n en invocaci\u00f3n por protocolo y comunicaci\u00f3n por servicio B\u00e1sicamente, el flujo var\u00eda respecto a una comunicaci\u00f3n por servicio en que el servicio est\u00e1 normalmente detenido, por lo que debe activarse antes de iniciar la solicitud con una invocaci\u00f3n por protocolo. Una vez servida la solicitud de firma, este se detiene por s\u00ed mismo, quedando de nuevo inactivo a la espera de que una nueva invocaci\u00f3n por protocolo lo arranque. Consideraciones de implementaci\u00f3n Compatibilidad con distintos entornos operativos La combinaci\u00f3n de invocaci\u00f3n por protocolo hereda de forma general la compatibilidad de la invocaci\u00f3n por protocolo con una salvedad muy importante, y es que, por distintos motivos, no es compatible con Apple iOS. Compatibilidad seg\u00fan sistema operativo Apple iOS NO Apple OS X S\u00ed Microsoft Windows S\u00cd Google Android S\u00cd Linux S\u00cd Windows UI Moderno, Windows RT S\u00cd Compatibilidad con Apple iOS Uno de los principales problemas de compatibilidad con Apple iOS reside en que el sistema operativo, en sus versiones de 32 bits (dispositivos anteriores al iPhone 6, que son pr\u00e1cticamente todos los actuales en uso por los ciudadanos) no permiten una multitarea real, y el sistema operativo no permite servicios de terceras partes (solo Apple puede hacer servicios en iOS). Esto deriva en una situaci\u00f3n un tanto peculiar, y es que aun pudi\u00e9ndose abrir un socket TCP servidor por parte de una App nativa cuando recibe una invocaci\u00f3n por protocolo, este nunca podr\u00e1 ser accedido desde el navegador Web del mismo dispositivo, ya que este \u00faltimo queda en modo de suspensi\u00f3n mientras la App nativa se est\u00e9 ejecutando. Es decir, no se pueden ejecutar simult\u00e1neamente las dos partes, aspecto indispensable para entablar un di\u00e1logo. Adicionalmente, aunque este problema se podr\u00eda subsanar en dispositivos ARM64 (iPhone 6 y dispositivos posteriores), las restricciones de la pol\u00edtica de Apps de Apple desaconsejan la apertura de puertos TCP y su atenci\u00f3n local por otras aplicaciones, por lo que probablemente una aplicaci\u00f3n de firma que usase estas caracter\u00edsticas ser\u00eda rechazada para publicaci\u00f3n. Compatibilidad seg\u00fan navegador Web Chrome Windows 8 y superiores en UI Moderno NO Resto de sistemas compatibles (Android, Linux, Windows) S\u00cd Safari Todos los sistemas (OS X) S\u00cd Internet Explorer Todos los sistemas (Windows, Windows Phone, Windows RT) S\u00cd Firefox Todos los sistemas (Windows, Linux, OS X, Android) S\u00cd Consideraciones de implementaci\u00f3n Mantenimiento de la funcionalidad de invocaci\u00f3n por protocolo Es interesante el que una aplicaci\u00f3n que implemente invocaci\u00f3n por protocolo m\u00e1s comunicaci\u00f3n por servicio mantenga tambi\u00e9n la posibilidad de funcionar \u00fanicamente con invocaci\u00f3n por protocolo, ya que esto facilitar\u00eda la transici\u00f3n de un sistema a otro simplemente desde JavaScript, sin necesidad de que el usuario tuviese que reinstalar o configurar nada. Un escenario hipot\u00e9tico en el que esta situaci\u00f3n podr\u00eda ser necesaria podr\u00eda ser en el caso en que un navegador Web no permitiese el lanzamiento de llamadas al servicio local por considerar que se trata de una inseguridad de tipo Cross Site Scripting (XSS), por ejemplo, debido a la omisi\u00f3n de HTTPS. As\u00ed, ser\u00eda posible desde JavaScript la detecci\u00f3n de estas condiciones para lanzar una invocaci\u00f3n simple por protocolo y de esta manera no dejar nunca al usuario sin servicio. Uso de servicios de sistema operativo versus simples servicios TCP Dado que la comunicaci\u00f3n en esta estrategia de implementaci\u00f3n se lanza cada vez en un puerto TCP distinto y solo est\u00e1 disponible unos instantes, no resulta apropiada el desarrollo de un servicio a nivel de sistema operativo, sino que lo adecuado ser\u00eda la simple apertura de un socket TCP servidor por parte de la aplicaci\u00f3n nativa. Este cambio trae una ventaja que no son en absoluto despreciable, y es que la implementaci\u00f3n de un socket servidor TCP (que da entrada a una implementaci\u00f3n simple del protocolo HTTP) no es realmente dependiente del sistema operativo, sino del lenguaje de programaci\u00f3n. Esto permite que una misma implementaci\u00f3n en Java pueda reutilizarse en Windows, Linux y OS X, con el consiguiente ahorro de esfuerzo. Google Android como caso espec\u00edfico Android es un caso particular en este sentido porque, aunque es perfectamente compatible una implementaci\u00f3n de socket TCP servidor con JSE, al igual que con Apple iOS no es posible garantizar una ejecuci\u00f3n simult\u00e1nea de aplicaci\u00f3n nativa y navegador Web, requisito indispensable para que se establezca el di\u00e1logo. Es decir, incluso si podemos escuchar un puerto desde nuestra aplicaci\u00f3n, si la aplicaci\u00f3n se encuentra en segundo plano en favor al navegador web que realiza las llamadas al socket, no podemos garantizar que se van a escuchar esas llamadas. Para sortear esta dificultad ser\u00eda necesario realizar un desarrollo adicional que pueda escuchar siempre las llamadas del navegador. Este consistir\u00eda en un servicio Android a nivel de sistema operativo. As\u00ed, la implementaci\u00f3n requerir\u00eda, como se ha comentado anteriormente, que se siguiese una secuencia similar a esta, teniendo como requisito que la aplicaci\u00f3n implementa y declara un servicio Android, que permanece por defecto parado e inactivo: La p\u00e1gina Web lanza la invocaci\u00f3n inicial por protocolo. La aplicaci\u00f3n nativa Android, arrancada mediante la invocaci\u00f3n por protocolo, arranca el servicio (que permanec\u00eda parado y queda a la escucha en el puerto TCP). El navegador Web, que no se ha bloqueado en ning\u00fan momento (se sigue ejecutando de forma paralela al servicio), accede al puerto y env\u00eda informaci\u00f3n sobre la operaci\u00f3n de firma a ejecutar. El servicio realiza la operaci\u00f3n de firma y devuelve los datos al JavaScript que se ejecutaba en el navegador Web. Una vez cerrada la comunicaci\u00f3n, el servicio se detiene (\u00e9l mismo) y el control vuelve al navegador. Siguiendo esta secuencia simple, es el servicio el que accede al almac\u00e9n de certificados, permite al usuario seleccionar el deseado y realiza la operaci\u00f3n de firma. Sin embargo, un servicio Android no deber\u00eda tener ning\u00fan tipo de interfaz gr\u00e1fico propio, as\u00ed que esta aproximaci\u00f3n s\u00f3lo ser\u00eda posible cuando se delegue la selecci\u00f3n de certificados en las funcionalidades del llavero de Android 4, que cuenta con sus propios di\u00e1logos. \u00bfQu\u00e9 pasa entonces si deseamos usar una implementaci\u00f3n del almac\u00e9n de Android al estilo JSE tal y como permite Android 4.3? (lo m\u00e1s indicado). En este caso, en el que s\u00ed tenemos que usar un di\u00e1logo de selecci\u00f3n de certificados propio, la secuencia se complica. Para hacerlo posible, de debe desarrollar un Intent de Android para la selecci\u00f3n de certificado, quedando entonces la secuencia como se describe a continuaci\u00f3n: Figure 12: Invocaci\u00f3n por protocolo m\u00e1s comunicaci\u00f3n por servicio en Android En este caso, tal y como se describe en la secuencia, la aplicaci\u00f3n nativa Android cuenta con tres Intents distintos: Uno que se activa por protocolo y que activa el servicio. Otro que es el propio servicio. Un tercero que realiza \u00fanicamente las operaciones que requieren interfaz gr\u00e1fico (di\u00e1logo de selecci\u00f3n de certificados, di\u00e1logo de guardado de fichero, etc.). Espera desde la invocaci\u00f3n por protocolo hasta la plena operatividad del servicio Uno de los principales problemas de la estrategia descrita se encuentra en que tras hacer la invocaci\u00f3n por protocolo por parte de la aplicaci\u00f3n JavaScript de firma, no es posible iniciar inmediatamente el di\u00e1logo por servicio, ya que este tarda un tiempo en estar operativo, y los tiempos de espera son cr\u00edticos para proporcionar una experiencia de usuario adecuada. \u00bfC\u00f3mo determinar entonces el tiempo a esperar? Dado que no es posible determinar este tiempo (depende de m\u00faltiples factores, como la versi\u00f3n del entorno de ejecuci\u00f3n de Java si se necesitase, la potencia de la m\u00e1quina, si ya existiese una instancia en ejecuci\u00f3n, el tipo de sistema operativo, etc.), se plantea la necesidad de realizar series de llamadas a intervalos de tiempo regulares (unos pocos segundos) hasta que una de ellas es atendida. Figure 13: M\u00faltiples llamadas esperando la operatividad del servicio Esta l\u00f3gica comporta no obstante ciertas restricciones: El servicio debe configurarse para atender una \u00fanica petici\u00f3n, y rechazar cualquier otra. Las llamadas desde JavaScript deben hacerse de forma no bloqueante (as\u00edncronamente), de forma que no haya que esperar al timeout de una petici\u00f3n para lanzar la siguiente. Una vez una petici\u00f3n es atendida, deben cancelarse el resto de peticiones pendientes. El tiempo de espera entre peticiones debe calcularse en base a un tiempo razonable en el que la petici\u00f3n es contestada. Una estrategia efectiva en este caso es hacer una primera llamada que sea contestada inmediatamente, que sea la que se cerciore de la plena disponibilidad del servicio y tras ella la solicitud de la firma, que puede llevar varios minutos (ya que incluye interacci\u00f3n con el usuario): Figure 14: Llamada previa de comprobaci\u00f3n de disponibilidad Resumen y consideraciones finales La mezcla de invocaci\u00f3n por protocolo con la comunicaci\u00f3n por servicio, tal y como ha quedado expuesto, trae interesantes ventajas, como un menor n\u00famero de comunicaciones de red, un proceso puramente local, sin exposici\u00f3n externa de los datos de firma y la posibilidad de operar sin servidores de aplicaciones (con un simple servidor Web para el HTML + JavaScript es suficiente), pero la falta de compatibilidad con Apple iOS obliga al mantenimiento del medio de invocaci\u00f3n simple por protocolo. Igualmente, en Android el proceso es sustancialmente m\u00e1s complejo de gestionar y desarrollar que en el resto de plataformas, por lo que la introducci\u00f3n es esta soluci\u00f3n implica un esfuerzo considerable de desarrollo inicial y de mantenimiento posterior del software, que quedar\u00eda de esta forma: Plataforma M\u00e9todo Implementaci\u00f3n Apple iOS Invocaci\u00f3n por protocolo Propia en Objective-C Google Android Protocolo y Servicio Java con m\u00faltiples Intents Apple OS X Java est\u00e1ndar MS Windows Linux Por supuesto, cada una de las plataformas requerir\u00eda su propio medio de distribuci\u00f3n de las aplicaciones: Apple OS X AppStore de OS X o Instalador a medida Apple iOS AppStore de iOS Microsoft Windows Instalador a medida Google Android Google Play Linux DEB en repositorio com\u00fan (Guadalinex, etc.) API 100% JavaScript Sin duda, en un proceso Web de cualquier tipo, la soluci\u00f3n deseable ser\u00eda siempre la disponibilidad de un API est\u00e1ndar JavaScript que estuviese disponible en todos los navegadores Web y en todas las plataformas y adem\u00e1s normalizado por un organismo internacional, como la W3C. Por desgracia, para el caso concreto de la firma electr\u00f3nica, no existe dicho API, si bien hay varias iniciativas en progreso que podr\u00edan, una vez finalizadas y adoptadas por la industria, podr\u00edan cubrir adecuadamente las necesidades de este tipo de aplicaciones. Iniciativas WebCrypto de W3C < El World Wide Web Consortium (W3C, http://www.w3.org/ ) trabaja actualmente en dos iniciativas para normalizar un API JavaScript de criptograf\u00eda para navegadores Web. Dentro de esta iniciativa hay dos grupos de trabajo bien diferenciados: WebCrypto Key Discovery: http://www.w3.org/TR/webcrypto-key-discovery/ Un API para el uso seguro de claves privadas desde navegador Web, el \u00faltimo borrador publicado data de agosto de 2013. Trabajos liderados por Netflix. Web Cryptography API: http://www.w3.org/TR/WebCryptoAPI/ API para la realizaci\u00f3n de operaciones criptogr\u00e1ficas (como cifrados RSA) desde JavaScript. Es una especificaci\u00f3n sobre la que se trabaja activamente, el \u00faltimo borrador publicado data de diciembre de 2014. Trabajos liderados por Google y Netflix (Mozilla se retir\u00f3 del grupo de trabajo). El segundo grupo de trabajo y especificaci\u00f3n, la Web Cryptography API, no supone en s\u00ed un medio que permita tener aplicaciones de firma 100% JavaScript, ya que sin el concurso de las claves privadas, no es posible realizar firmas. Por el contrario, el primer grupo y su especificaci\u00f3n, la WebCrypto Key Discovery s\u00ed es el punto cr\u00edtico que habilitar\u00eda aplicaciones de firma 100% JavaScript, incluso si Web Cryptography API no estuviese disponible (hay bibliotecas Software Libre de terceros para hacer esas operaciones). Desgraciadamente, WebCrypto Key Discovery es una especificaci\u00f3n sobre la que apenas se trabaja y cuyo principal patrocinador, Netflix, orienta claramente a la gesti\u00f3n de los derechos sobre activos digitales (DRM), lo que puede dificultar su adopci\u00f3n generalizada por la industria: Google (Chrome) basa su negocio en activos de acceso libre con publicidad, y ya se ha manifestado en contra de este uso del API. Mozilla (Firefox) rechaza cualquier iniciativa de control tipo DRM para la Web. As\u00ed, es improbable una disponibilidad a corto o medio plazo de un API normalizado por W3C y adoptado de forma generalizada por la industria que permita desarrollar aplicaciones de firma 100% en JavaScript. Alianza FIDO < De forma independiente a la W3C, un nutrido grupo de fabricantes trabaja en un nuevo API pensado para autenticaci\u00f3n fuerte en entornos Web mediante criptograf\u00eda de clave p\u00fablica, orientado principalmente a los pagos en l\u00ednea. Entre los patrocinadores y promotores de la alianza encontramos a Samsung, Microsoft, ARM, Google y RSA, not\u00e1ndose especialmente la ausencia de Apple, quien, al patrocinar sus propios sistemas de pagos m\u00f3viles, no implementar\u00e1 estos est\u00e1ndares en sus productos. Si bien las especificaciones (ya en estado final y en proceso de implantaci\u00f3n en ciertas plataformas m\u00f3viles) contemplan la realizaci\u00f3n de firmas electr\u00f3nicas, su orientaci\u00f3n a la autenticaci\u00f3n hace que no se exponga un API PKCS#1 de forma directa, por lo que su uso para realizar firmas electr\u00f3nicas (AdES), en su estado actual, no es posible. Adicionalmente, la ausencia de Apple en la alianza es tambi\u00e9n un condicionante grande, ya que iOS es una plataforma irrenunciable en movilidad, y OS X gana cuota de mercado cada a\u00f1o, por lo que cualquier soluci\u00f3n que implemente las especificaciones FIDO necesitar\u00eda una implementaci\u00f3n complementaria e independiente (usando algunas de las estrategias detalladas anteriormente) para llegar a los usuario de Apple. Consideraciones sobre la firma 100% JavaScript Actualmente no es posible una soluci\u00f3n de firma 100% JavaScript, y no lo ser\u00e1 a corto medio plazo como soluci\u00f3n general para todas las plataformas. Igualmente, dado la velocidad de avance de las tecnolog\u00edas, no es razonable esperar que los API aqu\u00ed descritos sean los finalmente adoptados dentro de cinco a\u00f1os o m\u00e1s, si es que se adoptase alguno. Se puede concluir que, si bien ser\u00eda la opci\u00f3n deseable, no habr\u00e1 aplicaciones de firma 100% JavaScript multiplataforma y multinavegador hasta dentro de cierto tiempo, que ser\u00e1n varios a\u00f1os hasta cubrir sistemas operativos de Google, Microsoft, Linux y Apple en m\u00f3viles y sobremesas. Resumen y recomendaciones finales Las consideraciones finales que cabe destacar de cada una de las soluciones presentadas son: Complementos para navegadores Web Su desarrollo es actualmente viable. M\u00faltiples entornos incompatibles (Android, iOS, navegadores en Windows 8 Modern UI,\u2026) Requiere desarrollos espec\u00edficos para pr\u00e1cticamente cada navegador en diversas tecnolog\u00edas. Requiere que el usuario instale previamente los complementos. Introduce un factor de inseguridad por permitir la ejecuci\u00f3n de c\u00f3digo privilegiado desde JavaScript. Invocaci\u00f3n por protocolo Su desarrollo es actualmente viable. Compatibilidad con pr\u00e1cticamente todos los entornos. Requiere desarrollos espec\u00edficos para 4 entornos: navegadores de escritorio, Android, iOS y Windows RT. Requiere que el usuario instale previamente la aplicaci\u00f3n. Introduce un factor de inseguridad por requerir el uso de un servidor externo para la sincronizaci\u00f3n de datos con el navegador. Conexi\u00f3n por servicio Su desarrollo es actualmente viable. Algunos entornos incompatibles (iOS y Windows RT) y desaconsejado en Android por el consumo de bater\u00eda adicional. Requiere desarrollos espec\u00edficos para 4 entornos: Windows, Linux, Mac OS X y Android. Requiere que el usuario instale previamente la aplicaci\u00f3n. Problemas de seguridad asociados a tener un servicio abierto permanentemente. Combinaci\u00f3n de la invocaci\u00f3n por protocolo/servicio Su desarrollo es actualmente viable. Compatibilidad con un gran n\u00famero de entornos, a falta de Apple iOS. Requiere desarrollos espec\u00edficos para 3 entornos: navegadores de escritorio, Android y Windows RT. Requiere que el usuario instale previamente la aplicaci\u00f3n. Sin problemas de seguridad f\u00e1cilmente explotables dado se elimina la necesidad de un servidor externo y el servicio s\u00f3lo est\u00e1 disponible durante un tiempo limitado y con una configuraci\u00f3n negociada por cada operaci\u00f3n. API 100% JavaScript Su desarrollo es actualmente inviable. Serias dudas acerca de la compatibilidad con los distintos entornos. Una \u00fanica implementaci\u00f3n para todos los entornos. No requiere que el usuario instale previamente la aplicaci\u00f3n. Sin problemas de seguridad f\u00e1cilmente explotables dada su ejecuci\u00f3n plenamente en local. Con soluciones actualmente imposibles como el uso \u00fanico de JavaScript o complejas, ineficientes e incompletas como el desarrollo de complementos, cualquier aproximaci\u00f3n actualmente viable para sustituir los Applets de Java en aplicaciones Web de firma electr\u00f3nica va a necesitar obligatoriamente que el usuario instale (y mantenga actualizada) una aplicaci\u00f3n local. Las alternativas viables que mayores beneficios reportan son las que se pueden invocar por protocolo, servicio o una mezcla de ambas, siendo esta \u00faltima la que menos problemas de seguridad reporta. Sin embargo, la limitaci\u00f3n de no poder hacer uso en Apple iOS de este modo de invocaci\u00f3n hace que no pueda ser este el \u00fanico mecanismo implementado si se quiere mantener la compatibilidad con este sistema. Si se piensa en un desarrollo dual que utilice un mecanismo alternativo para los sistemas no soportados, la alternativa compatible m\u00e1s viable es la invocaci\u00f3n por protocolo. Sin embargo, este tipo de soluci\u00f3n aumenta la complejidad m\u00e1s all\u00e1 de la intr\u00ednseca de la propia invocaci\u00f3n por protocolo/servicio, aumentando el coste de mantenimiento, y no reporta los beneficios propios de este mecanismo, la eliminaci\u00f3n del servicio externo de comunicaci\u00f3n. S\u00ed, por contra, reducir\u00e1 el tr\u00e1fico de red dado que desde m\u00faltiples entornos no se har\u00e1 uso de este servicio externo. En resumen, se considera que la soluci\u00f3n con mejor relaci\u00f3n calidad/coste de desarrollo y mantenimiento es la invocaci\u00f3n por protocolo por ser la soluci\u00f3n viable que mayor compatibilidad ofrece, introduciendo unos costes de mantenimiento reducidos por la propia simplicidad del modo de invocaci\u00f3n.","title":"Informe   Alternativas Applets para firma"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#indice","text":"1. Introducci\u00f3n [5](#introducci\u00f3n) 2. Complementos para navegadores Web [6](#complementos-para-navegadores-web) 2.1. Arquitectura para la realizaci\u00f3n de firmas electr\u00f3nicas [6](#arquitectura-para-la-realizaci\u00f3n-de-firmas-electr\u00f3nicas) 2.1.1. El API JavaScript para realizar firmas electr\u00f3nicas [7](#el-api-javascript-para-realizar-firmas-electr\u00f3nicas) 2.2. El problema de la heterogeneidad de los complementos para navegadores Web [10](#el-problema-de-la-heterogeneidad-de-los-complementos-para-navegadores-web) 2.2.1. Cambios por cada navegador Web [10](#cambios-por-cada-navegador-web) 2.2.2. Cambios por sistema operativo [12](#cambios-por-sistema-operativo) 2.3. Desarrollos adicionales para realizar firmas AdES [13](#desarrollos-adicionales-para-realizar-firmas-ades) 2.3.1. Firma trif\u00e1sica [13](#firma-trif\u00e1sica) 2.3.2. Firma local [14](#firma-local) 2.4. Conclusiones [15](#conclusiones) 3. Invocaci\u00f3n por protocolo [16](#invocaci\u00f3n-por-protocolo) 3.1. Invocaci\u00f3n por protocolo en navegador Web [16](#invocaci\u00f3n-por-protocolo-en-navegador-web) 3.1.1. Advertencias de apertura [17](#advertencias-de-apertura) 3.1.2. Soporte a la invocaci\u00f3n por protocolo en navegadores Web [19](#soporte-a-la-invocaci\u00f3n-por-protocolo-en-navegadores-web) 3.2. La invocaci\u00f3n por protocolo como sustituto de los Applets de Java [19](#la-invocaci\u00f3n-por-protocolo-como-sustituto-de-los-applets-de-java) 3.2.1. Comunicaci\u00f3n entre aplicaci\u00f3n nativa y aplicaci\u00f3n JavaScript [19](#comunicaci\u00f3n-entre-aplicaci\u00f3n-nativa-y-aplicaci\u00f3n-javascript) 3.3. Implementaci\u00f3n de la aplicaci\u00f3n nativa susceptible de ser invocada por protocolo [22](#implementaci\u00f3n-de-la-aplicaci\u00f3n-nativa-susceptible-de-ser-invocada-por-protocolo) 3.3.1. Asociaci\u00f3n del protocolo [22](#asociaci\u00f3n-del-protocolo) 3.3.2. Actualizaci\u00f3n de las aplicaciones [23](#actualizaci\u00f3n-de-las-aplicaciones) 3.3.3. Dependencias con el JRE en el caso de aplicaciones desarrolladas en Java [23](#dependencias-con-el-jre-en-el-caso-de-aplicaciones-desarrolladas-en-java) 3.4. Consideraciones generales de la invocaci\u00f3n por protocolo [24](#consideraciones-generales-de-la-invocaci\u00f3n-por-protocolo) 3.4.1. Experiencia de usuario [24](#experiencia-de-usuario) 3.4.2. Complejidad en el despliegue [25](#complejidad-en-el-despliegue) 4. Conexi\u00f3n por servicio [26](#conexi\u00f3n-por-servicio) 4.1. Ventajas y desventajas de la comunicaci\u00f3n por servicio [27](#ventajas-y-desventajas-de-la-comunicaci\u00f3n-por-servicio) 4.1.1. Compatibilidad con distintos sistemas operativos [27](#compatibilidad-con-distintos-sistemas-operativos) 4.1.2. Experiencia de usuario [28](#experiencia-de-usuario-1) 4.1.3. Reutilizaci\u00f3n del desarrollo Java [28](#reutilizaci\u00f3n-del-desarrollo-java) 4.1.4. Sin tr\u00e1fico de red externo [29](#sin-tr\u00e1fico-de-red-externo) 4.1.5. Seguridad [29](#seguridad) 5. Combinaci\u00f3n de la invocaci\u00f3n por servicio y la invocaci\u00f3n por protocolo [31](#combinaci\u00f3n-de-la-invocaci\u00f3n-por-servicio-y-la-invocaci\u00f3n-por-protocolo) 5.1. Problemas resueltos mediante la combinaci\u00f3n de ambos [31](#problemas-resueltos-mediante-la-combinaci\u00f3n-de-ambos) 5.2. Descripci\u00f3n funcional de la secuencia [32](#descripci\u00f3n-funcional-de-la-secuencia) 5.3. Consideraciones de implementaci\u00f3n [33](#consideraciones-de-implementaci\u00f3n) 5.3.1. Compatibilidad con distintos entornos operativos [33](#compatibilidad-con-distintos-entornos-operativos) 5.4. Consideraciones de implementaci\u00f3n [34](#consideraciones-de-implementaci\u00f3n-1) 5.4.1. Mantenimiento de la funcionalidad de invocaci\u00f3n por protocolo [34](#mantenimiento-de-la-funcionalidad-de-invocaci\u00f3n-por-protocolo) 5.4.2. Uso de servicios de sistema operativo versus simples servicios TCP 34 5.4.3. Espera desde la invocaci\u00f3n por protocolo hasta la plena operatividad del servicio [36](#espera-desde-la-invocaci\u00f3n-por-protocolo-hasta-la-plena-operatividad-del-servicio) 5.5. Resumen y consideraciones finales [39](#resumen-y-consideraciones-finales) 6. API 100% JavaScript [40](#api-100-javascript) 6.1. Iniciativas WebCrypto de W3C [40](#iniciativas-webcrypto-de-w3c) 6.2. Alianza FIDO [41](#alianza-fido) 6.3. Consideraciones sobre la firma 100% JavaScript [41](#consideraciones-sobre-la-firma-100-javascript) 7. Resumen y recomendaciones finales [43](#resumen-y-recomendaciones-finales) \u00cdndice de ilustraciones Figure 1: Arquitectura gen\u00e9rica complemento navegador [6](#_Toc408253242) Figure 2: Propuesta de advertencia para acceso a certificados [8](#_Toc408253243) Figure 3: Propuesta de advertencia para acceso a claves privadas [8](#_Toc408253244) Figure 4: Propuesta de di\u00e1logo permiso extendido de acceso a certificados [9](#_Toc408253245) Figure 5: Propuesta de di\u00e1logo permiso extendido de acceso a claves privadas [9](#_Toc408253246) Figure 6: Advertencia de invocaci\u00f3n por protocolo en Mozilla Firefox [16](#_Toc408253247) Figure 7: Advertencia de invocaci\u00f3n por protocolo en Google Chrome [16](#_Toc408253248) Figure 8: Advertencia de invocaci\u00f3n por protocolo en Internet Explorer [17](#_Toc408253249) Figure 9: Comunicaci\u00f3n bidireccional en invocaci\u00f3n por protocolo [19](#_Toc408253250) Figure 10: Esquema simplificado de la comunicaci\u00f3n por servicio [24](#_Toc408253251) Figure 11: Secuencia de operaci\u00f3n en invocaci\u00f3n por protocolo y comunicaci\u00f3n por servicio [30](#_Toc408253252) Figure 12: Invocaci\u00f3n por protocolo m\u00e1s comunicaci\u00f3n por servicio en Android [33](#_Toc408253253) Figure 13: M\u00faltiples llamadas esperando la operatividad del servicio [34](#_Toc408253254) Figure 14: Llamada previa de comprobaci\u00f3n de disponibilidad [35](#_Toc408253255)","title":"\u00cdndice"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#introduccion","text":"Los Applets de Java se han convertido en una verdadera pesadilla para usuarios y proveedores de servicios de firma electr\u00f3nica en aplicaciones Web por muchos motivos: Continuos problemas de compatibilidad por las actualizaciones de seguridad de Java. Continuos problemas de seguridad del Java Plugin. Incompatibilidad con muchos sistemas operativos: Windows RT, Windows Phone. iOS Android Incompatibilidad con ciertos navegadores Web: Versiones futuras de Google Chrome. Internet Explorer en modo UI Moderno. M\u00faltiples advertencias de seguridad y molestas necesidades de configuraci\u00f3n para el usuario. Pero estos inconvenientes no hacen desaparecer la necesidad de firma electr\u00f3nica Web, por lo que se hace indispensable la b\u00fasqueda de alternativas, distingui\u00e9ndose distintas alternativas: Complemento para navegador Web. Invocaci\u00f3n por protocolo. Comunicaci\u00f3n por servicio. Invocaci\u00f3n por protocolo m\u00e1s comunicaci\u00f3n por servicio. Firma 100% JavaScript. A continuaci\u00f3n se realizar\u00e1 un recorrido por cada una de estas estrategias, destacando sus ventajas e inconvenientes, desde todos los puntos de vista: del desarrollador, del integrador y del usuario, no olvidando las nuevas plataformas m\u00f3viles en el an\u00e1lisis.","title":"Introducci\u00f3n"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#complementos-para-navegadores-web","text":"","title":"Complementos para navegadores Web"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#arquitectura-para-la-realizacion-de-firmas-electronicas","text":"Un complemento de navegador para realizar firmas electr\u00f3nicas, realmente como cualquier otro complemento, consta de una arquitectura b\u00e1sica de cuatro capas: < Figure 1: Arquitectura gen\u00e9rica complemento navegador El API del sistema operativo que proporciona acceso al almac\u00e9n de claves y certificados del usuario. Un desarrollo para acceder al API superior, que debe ser nativo y privilegiado, ya que el acceso a las claves del usuario tiene implicaciones de seguridad. Un API JavaScript que se expone a las aplicaciones Web, de forma que puedan usar el complemento de forma program\u00e1tica. La aplicaci\u00f3n Web (JavaScript) que implementa el integrador para solicitar una firma electr\u00f3nica al usuario.","title":"Arquitectura para la realizaci\u00f3n de firmas electr\u00f3nicas"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#el-api-javascript-para-realizar-firmas-electronicas","text":"Una hipot\u00e9tica aplicaci\u00f3n Web de firma electr\u00f3nica que se apoyase en un complemento de navegador difiere mucho de una basada en Applets de Java en t\u00e9rminos de arquitectura, ya que en las \u00faltimas pr\u00e1cticamente el 100% del proceso de firma se hace siguiendo el API JSE, mientras que en las primeras la l\u00f3gica debe distribuirse entre un programa JavaScript que se ejecuta en el navegador Web como cualquier otro y el c\u00f3digo nativo del complemento.","title":"El API JavaScript para realizar firmas electr\u00f3nicas"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#logica-en-el-lado-del-complemento","text":"Siendo la parte menos portable de los aplicativos y la m\u00e1s compleja de desplegar y actualizar (los usuarios no actualizan los complementos de sus navegadores con regularidad), lo deseable ser\u00eda limitar la funcionalidad por parte del complemento a una funcionalidad m\u00ednima y no sujeta a cambios por evoluci\u00f3n de las normativas. As\u00ed, una propuesta de funcionalidades ser\u00eda: Firma PKCS#1 v1.5. El soporte, si fuese necesario, de PKCS#1 2.0 podr\u00eda hacerse como una extensi\u00f3n de la versi\u00f3n 1.5 desde la propia aplicaci\u00f3n JavaScript. Deben soportarse al menos los siguientes algoritmos: SHA1withRSA SHA256withRSA SHA384withRSA SHA512withRSA En ning\u00fan caso debe permitirse una operaci\u00f3n RSA con clave privada no asociada \u201cat\u00f3micamente\u201d a una huella digital (NONEwithRSA). Los datos de entrada y de salida se tratar\u00e1n siempre en Base64. Obtenci\u00f3n de certificado (en formato Base64). Obtenci\u00f3n de referencia a clave privada. Dado que estas funcionalidades est\u00e1n parcialmente descritas en un est\u00e1ndar incipiente de la W3C (WebCrypto Key Discovery: http://www.w3.org/TR/2013/WD-webcrypto-key-discovery-20130108/ ), deber\u00eda implementarse este API como exposici\u00f3n JavaScript siempre que fuese posible. De igual forma, deber\u00eda intentarse una colaboraci\u00f3n con este organismo para la evoluci\u00f3n de la normativa justo con el desarrollo funcional del complemento.","title":"L\u00f3gica en el lado del complemento"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#aspectos-de-seguridad-en-el-desarrollo","text":"Es justo esta parte del API de firma la que m\u00e1s cuidado debe tener en cuanto a la seguridad, puesto que es la que accede a las claves privadas del usuario y a la informaci\u00f3n personal contenida en los certificados.","title":"Aspectos de seguridad en el desarrollo"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#tratamiento-de-sesiones","text":"Deben implementarse mecanismos que aseguren que las referencias obtenidas hacia las claves privadas (y preferiblemente tambi\u00e9n los identificadores de los certificados) sean de un solo uso limitado a la sesi\u00f3n y contexto JavaScript desde el cual se solicitaron, con independencia de que los distintos contextos provengan del mismo dominio Web.","title":"Tratamiento de sesiones"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#confirmaciones-por-parte-del-usuario","text":"El usuario debe ser siempre consciente de cuando una aplicaci\u00f3n Web accede tanto a sus certificados como a sus claves privadas y cuando realiza operaciones con esas claves privadas, y para ello debe proporcionar confirmaciones en di\u00e1logos gr\u00e1ficos que deben ser controlados desde la parte nativa del complemento. < Figure 2: Propuesta de advertencia para acceso a certificados < Figure 3: Propuesta de advertencia para acceso a claves privadas No obstante, y para permitir los procesos de firmas por lotes, deben implementarse mecanismos para aplicar la confirmaci\u00f3n en m\u00e1s de una operaci\u00f3n, y para ello debe contemplarse: En las obtenciones de certificado y referencias a claves privadas: < Figure 4: Propuesta de di\u00e1logo permiso extendido de acceso a certificados \u201cNo volver a preguntar para esta sesi\u00f3n\u201d A partir de que el usuario confirme que no desea volver a ser preguntado, se podr\u00e1n realizar operaciones de acceso a certificados siempre dentro de la misma sesi\u00f3n y contexto JavaScript. \u201cNo volver a preguntar para este sitio Web\u201d Esta opci\u00f3n solo debe aparecer para sitios Web con SSL, y el permiso debe asociarse a la clave p\u00fablica del certificado. Deben rechazarse los certificados inadecuados (no mostrarse la opci\u00f3n en esos casos): Expedidos para otro dominio. Caducados o a\u00fan no v\u00e1lidos. Cuya CA (Autoridad de Certificaci\u00f3n) no sea de confianza. En las operaciones con la clave privada: < Figure 5: Propuesta de di\u00e1logo permiso extendido de acceso a claves privadas En las operaciones de clave privada nunca se ofrecer\u00e1 un permiso de forma permanente para el sitio Web, \u00fanicamente debe permitirse un permiso extendido para la sesi\u00f3n y contexto JavaScript actuales, y en este caso solo debe aparecer para sitios Web con SSL, y el permiso debe asociarse a la clave p\u00fablica del certificado. Deben rechazarse los certificados inadecuados (no mostrarse la opci\u00f3n en esos casos): Expedidos para otro dominio. Caducados o a\u00fan no v\u00e1lidos. Cuya CA no sea de confianza.","title":"Confirmaciones por parte del usuario"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#concepto-de-sesion-y-contexto-javascript","text":"Anteriormente se ha hecho referencia al contexto JavaScript. Se entiende en cualquier caso el contexto JavaScript como el objeto en el que est\u00e1 contenido el c\u00f3digo en ejecuci\u00f3n. Habitualmente el contexto global es objeto \u201cWindow\u201d de JavaScript, pero si las referencias a certificados y claves se solicitan desde un contexto inferior (por ejemplo, dentro de una funci\u00f3n), deben implementarse mecanismos para que esa referencia no sea reutilizable desde un contexto superior (como el global), aunque s\u00ed desde nuevos contextos de nivel inferior.","title":"# Concepto de sesi\u00f3n y contexto JavaScript"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#el-problema-de-la-heterogeneidad-de-los-complementos-para-navegadores-web","text":"","title":"El problema de la heterogeneidad de los complementos para navegadores Web"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#cambios-por-cada-navegador-web","text":"Actualmente, los distintos navegadores Web implementan distintas tecnolog\u00edas de complementos, lo que obliga a implementar un posible complemento de firma electr\u00f3nica repitiendo el desarrollo por cada una de las tecnolog\u00edas. Tras el abandono de NPAPI (el API de complementos de Netscape) por parte de Google Chrome ( http://blog.chromium.org/2013/09/saying-goodbye-to-our-old-friend-npapi.html ), encontramos un escenario en el que Firefox y Safari utilizan NPAPI, Chrome su propio est\u00e1ndar \u201cPepperAPI\u201d (PPAPI) e Internet Explorer ha eliminado por completo el uso de complementos (ActiveX est\u00e1 en proceso de discontinuaci\u00f3n): Apple Safari NPAPI Google Chrome PPAPI Microsoft Internet Explorer -nd- Mozilla Firefox NPAPI","title":"Cambios por cada navegador Web"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#_1","text":"","title":""},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#variaciones-de-navegador-web-por-sistema","text":"Incluso dentro de un mismo navegador Web, encontramos que el soporte de complementos no es uniforme seg\u00fan el sistema operativo, teniendo versiones en las que no se soportan estos complementos, pudi\u00e9ndose observar que los dispositivos m\u00f3viles son sin duda un escollo de importancia. Google Chrome Microsoft Windows OK Microsoft Windows Modern UI KO Apple OS X OK Google Android KO Apple iOS KO Linux OK Apple Safari Microsoft Windows OK Apple OS X OK Apple iOS KO Mozilla Firefox Microsoft Windows OK Apple OS X OK Google Android OK * Linux OK * Necesita desarrollo nativo dependiente de la arquitectura del dispositivo m\u00f3vil.","title":"Variaciones de navegador Web por sistema"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#cambios-por-sistema-operativo","text":"Otro problema grave a tener en cuenta a la hora de abordar un desarrollo de complemento de navegador Web es que, incluso dentro de la misma tecnolog\u00eda de complementos, cada sistema operativo tiene su API para el acceso a claves criptogr\u00e1ficas, y debe preverse una programaci\u00f3n espec\u00edfica para cada caso: Apple OS X Llavero de OS X Microsoft Windows Microsoft CAPI Google Android desde 4.0 a 4.2 Llavero de Android Google Android a partir de 4.3 Almac\u00e9n JCA/JCE Linux NSS","title":"Cambios por sistema operativo"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#acceso-a-tarjetas-inteligentes","text":"Y en un \u00faltimo nivel de complejidad, cada uno de esos API de acceso a claves criptogr\u00e1ficas puede necesitar desarrollos adicionales con API diferentes, que duplican en los casos necesarios el esfuerzo de programaci\u00f3n: Llavero de Apple OS X 10.9 y anteriores Tokend Llavero de Apple OS X 10.0 y superiores CryptoTokenKit Microsoft CAPI API Integrado NSS PKCS#11 Llavero de Android -nd- Almac\u00e9n JCA/JCE A medida v\u00eda API NFC, USB o PC/SC","title":"Acceso a tarjetas inteligentes"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#solicitud-del-pin-o-contrasena-de-los-almacenes","text":"Para finalizar, es importante rese\u00f1ar que la gesti\u00f3n del PIN o contrase\u00f1a de los almacenes de claves puede estar gestionado por el propio sistema operativo (en cuyo caso un posible complemento no necesita codificar ning\u00fan mecanismo de solicitud) o simplemente necesitar una gesti\u00f3n externa. En este \u00faltimo caso, ser\u00eda necesario codificar un di\u00e1logo de solicitud de contrase\u00f1a que siguiese los siguientes par\u00e1metros: Interfaz gr\u00e1fico acorde con el sistema operativo. Accesible para personas con discapacidad. Seguro: No debe persistir el PIN o contrase\u00f1a en memoria. La siguiente tabla muestra en qu\u00e9 casos ser\u00eda necesario este desarrollo y en cu\u00e1les no, necesitando en los casos de portabilidad la l\u00f3gica para discernir cuando mostrarlo: Almac\u00e9n de sistema NSS Necesita desarrollo CAPI Integrado Llavero de OS X Integrado Llavero de Android Integrado Almac\u00e9n JCA/JCE Necesita desarrollo Tarjeta inteligente Tokend Integrado CryptoTokenKit Integrado PKCS#11 Necesita desarrollo A medida v\u00eda API NFC, USB o PC/SC Necesita desarrollo","title":"Solicitud del PIN o contrase\u00f1a de los almacenes"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#desarrollos-adicionales-para-realizar-firmas-ades","text":"Como se ha expuesto anteriormente, es preferible que un complemento de navegador se limite a la realizaci\u00f3n de firmas PKCS#1 y a la obtenci\u00f3n de los certificados de usuario. As\u00ed, ser\u00eda responsabilidad de una capa adicional desarrollada en JavaScript \u201cgen\u00e9rico\u201d la transformaci\u00f3n de esas firmas PKCS#1 en firmas AdES acordes a normativas europeas. Esta capa se ejecutar\u00eda como cualquier otra aplicaci\u00f3n Web JavaScript, mediante su publicaci\u00f3n en servidor Web y de un modo no privilegiado dentro del navegador y de la p\u00e1gina Web. De esta forma, esta capa JavaScript tendr\u00eda dos opciones muy diferentes, la realizaci\u00f3n local de las firmas electr\u00f3nicas o el uso de t\u00e9cnicas trif\u00e1sicas apoy\u00e1ndose en un servidor externo.","title":"Desarrollos adicionales para realizar firmas AdES"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#firma-trifasica","text":"En el caso de una operaci\u00f3n trif\u00e1sica la soluci\u00f3n al problema de la realizaci\u00f3n de firmas AdES est\u00e1 ya realmente resuelto, ya que es posible adaptar, con un esfuerzo limitado, el c\u00f3digo JavaScript actual del MiniApplet Cliente @firma para acceder al complemento en la fase central y delegar en servidor las pre-firmas y post-firmas.","title":"Firma trif\u00e1sica"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#firma-local","text":"La realizaci\u00f3n local de firmas AdES tiene una dificultad muy elevada, ya que ser\u00eda necesaria una codificaci\u00f3n de toda la l\u00f3gica CAdES, XAdES y PAdES en JavaScript.","title":"Firma local"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#xades","text":"La realizaci\u00f3n de firmas XAdES en JavaScript requerir\u00eda el uso de bibliotecas XML de terceros, que soportasen, entre otras, las siguientes funcionalidades: XPATH y XPATH2 De-referenciaci\u00f3n interna a XML. Realizaci\u00f3n de huellas digitales. Canonicalizaci\u00f3n de XML. Actualmente existen bibliotecas JavaScript con funcionalidades b\u00e1sicas de XMLDSig que podr\u00edan ser utilizadas como base para la realizaci\u00f3n de firmas XAdES, y que cuentas con la l\u00f3gica antes enumerada: https://github.com/yaronn/xml-crypto","title":"XAdES"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#cades","text":"La realizaci\u00f3n de firmas CAdES 100% en JavaScript es realmente compleja, ya que requiere distintas tecnolog\u00edas que por su car\u00e1cter binario no son comunes en JavaScript: Trabajo en Base64 como si se tratase de datos binarios nativos. API ASN.1 https://github.com/GlobalSign/ASN1.js https://github.com/mcavage/node-asn1 API PKCS#7 https://github.com/digitalbazaar/forge Huellas digitales SHA https://code.google.com/p/crypto-js/ Etc.","title":"CAdES"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#pades","text":"La firma PAdES 100% JavaScript es sin duda la opci\u00f3n m\u00e1s compleja, y requerir\u00eda la implementaci\u00f3n previa de CAdES m\u00e1s funcionalidades espec\u00edficas de tratamiento de PDF, tanto la extracci\u00f3n de su rango procesable como el tratamiento de sus campos internos (AcroFields), su diccionario, sus metadatos, etc. Estas funcionalidades no est\u00e1n presentes en ning\u00fan API PDF en JavaScript, por lo que habr\u00eda que ampliar uno para a\u00f1adir esta nueva l\u00f3gica, siendo el punto de partida m\u00e1s apropiado el proyecto PDFJS de Mozilla: http://mozilla.github.io/pdf.js/","title":"PAdES"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#conclusiones","text":"El desarrollo de un complemento para navegador no es realmente un \u00fanico desarrollo, sino que son varios y distintos desarrollos dependiendo de sistema operativo y navegador Web, pero incluso con ese sobreesfuerzo hay plataformas en las que no es posible usar complementos: Navegadores: Internet Explorer, en cualquier plataforma. Google Chrome, en Windows 8 y superiores en modo \u201cUI moderno\u201d, iOS y Android. Safari en iOS. Sistemas operativos: iOS. Android. Pero adem\u00e1s del enorme esfuerzo y el soporte parcial de plataformas operativas, hay un factor adicional que desaconseja a\u00fan m\u00e1s el desarrollo de complementos para navegador: La seguridad. Tradicionalmente, los complementos de navegador han sido una fuente de problemas de seguridad, y es la raz\u00f3n que ha llevado a algunos de los m\u00e1s populares, como Adobe Flash o Oracle Java a marcarse como inseguros y considerarse como fuente com\u00fan de inseguridades. As\u00ed, un complemento, que abre una puerta al c\u00f3digo nativo privilegiado desde el c\u00f3digo JavaScript accesible por p\u00e1ginas de Internet, es una enorme responsabilidad en cuanto a la seguridad. Esta responsabilidad implica la necesidad de provisionar un esfuerzo constante de auditor\u00eda y actualizaci\u00f3n del c\u00f3digo, as\u00ed como a implementar formas que faciliten a los usuarios actualizar el complemento tan pronto como est\u00e9n listas nuevas versiones. Con independencia de las dificultades, la implementaci\u00f3n de este tipo de complementos deber\u00eda hacerse siempre de forma coordinada con los grupos W3C WebCrypto, de forma que se intercambien experiencias, compartan esfuerzos y, lo que es m\u00e1s importante, se facilite la futura migraci\u00f3n a los incipientes est\u00e1ndares Web.","title":"Conclusiones"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#invocacion-por-protocolo","text":"Los sistemas operativos actuales mantienen una serie de asociaciones entre tipos de fichero y las aplicaciones que son capaces de tratarlos. As\u00ed, si en un sistema operativo Windows se indica que se abra un documento de texto, este consultar\u00e1 en el Registro de Windows cual es la aplicaci\u00f3n por defecto asociada para su tratamiento (usualmente el Bloc de Notas), y proceder\u00e1 a abrir esta aplicaci\u00f3n pasando como par\u00e1metro la ruta completa del fichero en el esquema de argumentos definido en el propio Registro de Windows como parte de la asociaci\u00f3n. Esta asociaci\u00f3n se hace de distintas formas seg\u00fan el sistema operativo, en Windows es por su extensi\u00f3n (\u201ctxt\u201d en nuestro ejemplo), pero por ejemplo en Linux es por su MIME-Type ( text/plain en el ejemplo). Este mismo esquema se define igualmente en la mayor\u00eda de los sistemas operativos para los esquemas comunes de protocolos basados en URN/URI/URL. As\u00ed, por ejemplo, si en un sistema operativo Windows indicamos que queremos abrir http://www.atos.net (por ejemplo, desde la l\u00ednea de comandos con la sentencia \u201cstart http://www.atos.net\u201d) se iniciar\u00e1 el navegador Web por defecto, que es la aplicaci\u00f3n asociada para tratar el protocolo http, procediendo a abrir esa p\u00e1gina Web. Este modo de abrir aplicaciones se conoce como invocaci\u00f3n por protocolo , y de forma an\u00e1loga a la invocaci\u00f3n para abrir aplicaciones indicando un fichero, donde antes se recib\u00eda la ruta completa del archivo a abrir, ahora se recibe la URL/URI/URN completa que se indic\u00f3 abrir.","title":"Invocaci\u00f3n por protocolo"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#invocacion-por-protocolo-en-navegador-web","text":"Este mecanismo de invocaci\u00f3n por protocolo de los sistemas operativos es usualmente accesible desde los navegadores Web. Esto quiere decir que si en la barra de direcciones del navegador Web indicamos una URI, el navegador Web trasladar\u00e1 el control al sistema operativo para que este localice la aplicaci\u00f3n apropiada para tratar el protocolo asociado a la URI, y la abra pas\u00e1ndole dicha URI. Un ejemplo de este mecanismo en Apple iOS podr\u00eda ser el soporte del protocolo \u201ctel\u201d en forma de URN con el formato \u201ctel://1-408-555-5555\u201d, donde 1-408-555-5555 es un n\u00famero de tel\u00e9fono. As\u00ed una llamada desde una p\u00e1gina Web a esta URN con una sentencia HTML como la siguiente, \u201c<a href=\"tel://1-408-555-5555\">1-408-555-5555</a>\u201d,provoca que se active el tel\u00e9fono (en un iPhone) y realice una llamada a ese n\u00famero, ya que la aplicaci\u00f3n nativa de tel\u00e9fono de iOS tiene registrado ese esquema de protocolo. En este caso tenemos una salvedad evidente, y es que el navegador Web obviar\u00e1 esta transferencia de control al sistema operativo cuando el propio navegador sepa c\u00f3mo tratar el protocolo, por ejemplo, con http, https, ftp, etc.","title":"Invocaci\u00f3n por protocolo en navegador Web"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#advertencias-de-apertura","text":"Como la invocaci\u00f3n por protocolo no deja de ser una transferencia de datos desde una p\u00e1gina Web (que no tiene porqu\u00e9 ser de confianza) a una aplicaci\u00f3n nativa, los navegadores Web acostumbran a advertir de este cambio al usuario: < Figure 6: Advertencia de invocaci\u00f3n por protocolo en Mozilla Firefox < Figure 7: Advertencia de invocaci\u00f3n por protocolo en Google Chrome < Figure 8: Advertencia de invocaci\u00f3n por protocolo en Internet Explorer En general, todos los navegadores Web muestran alg\u00fan tipo de advertencia, excepto Apple Safari en Windows, OS X e iOS y WebKit (Android). En el caso de Internet Explorer se comprueba adem\u00e1s la firma electr\u00f3nica del ejecutable del programa nativo invocado.","title":"Advertencias de apertura"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#firma-electronica-del-ejecutable-para-invocacion-por-protocolo-en-internet-explorer","text":"Dado que Internet Explorer comprueba las firmas electr\u00f3nicas de los programas invocados mediante protocolo, la firma de estos es un requisito indispensable. No obstante las firmas deben ser siempre de ejecutables en formato PE (Ejecutable portable) de Microsoft. Si la aplicaci\u00f3n invocada est\u00e1 desarrollada en Java, realmente la aplicaci\u00f3n que se invoca no ser\u00e1 la provista (un JAR de Java), sino el propio entorno de ejecuci\u00f3n de Java (JRE), cuya firma electr\u00f3nica no puede ser controlada (el JRE lo instala el usuario de un proveedor ajeno, como Oracle). Para sortear este problema se hace necesario el uso de un \u201clanzador\u201d en formato PE (EXE de Windows) que se pueda firmar electr\u00f3nicamente, sea el invocado por protocolo y se encargue de lanzar el JAR a trav\u00e9s del JRE. Como recomendaci\u00f3n, la aplicaci\u00f3n Launch4J ( http://launch4j.sourceforge.net/ ) es capaz de crear ejecutables de tipo PE a partir de un JAR de Java, sorteando el inconveniente mencionado. Es quiz\u00e1s importante mencionar que un ejecutable generado con Launch4J no puede ser firmado mediante el firmador PE de Microsoft (SignTool), siendo necesario usar otras herramientas, como Sign4J (https://github.com/fbergmann/launch4j/tree/master/sign4j).","title":"Firma electr\u00f3nica del ejecutable para invocaci\u00f3n por protocolo en Internet Explorer"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#soporte-a-la-invocacion-por-protocolo-en-navegadores-web","text":"La inmensa mayor\u00eda de los navegadores Web soportan la invocaci\u00f3n por protocolo, con la \u00fanica excepci\u00f3n de Google Chrome en su versi\u00f3n \u201cWindows 8 UI Moderno\u201d: Chrome Windows 8 y superiores en UI Moderno NO Resto de sistemas (Android, iOS, Linux, Windows) S\u00cd Safari Todos los sistemas (iOS, OS X) S\u00cd Internet Explorer Todos los sistemas (Windows, Windows Phone, Windows RT) S\u00cd Firefox Todos los sistemas (Windows, Linux, OS X, Android) S\u00cd","title":"Soporte a la invocaci\u00f3n por protocolo en navegadores Web"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#la-invocacion-por-protocolo-como-sustituto-de-los-applets-de-java","text":"La invocaci\u00f3n por protocolo puede, en ciertos casos, plantearse como un sustituto de los Applets de Java, si bien es necesario tener en cuenta siempre: En ciertos sistemas operativos, la invocaci\u00f3n de una aplicaci\u00f3n desde el navegador Web provoca un cambio de contexto gr\u00e1fico molesto para el usuario (desde el navegador a la aplicaci\u00f3n), y adem\u00e1s al cerrarse la aplicaci\u00f3n no siempre se vuelve de forma autom\u00e1tica al navegador. Sistemas operativos con cambios de contexto: Microsoft Windows 8 en modo UI Moderno. Apple iOS Sistemas operativos sin cambio de contexto: Apple OS X Microsoft Windows Google Android Linux Sistemas operativos con un \u201ccambio parcial\u201d de contexto (la experiencia de usuario es aceptable) Microsoft Windows 8.1 No es posible tener un UI integrado en la p\u00e1gina Web, como ocurre con los Applets de Java, Adobe Flash o los controles Active X. Una vez se invoca la aplicaci\u00f3n desde el navegador, no puede existir una comunicaci\u00f3n bidireccional directa entre ambos (aplicaci\u00f3n nativa y JavaScript de la p\u00e1gina Web), como s\u00ed ocurre en los Applets de Java. La aplicaci\u00f3n nativa, no obstante, puede recibir informaci\u00f3n en la propia URL de invocaci\u00f3n, aunque hay que tener en cuenta que la longitud de esta es limitada.","title":"La invocaci\u00f3n por protocolo como sustituto de los Applets de Java"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#comunicacion-entre-aplicacion-nativa-y-aplicacion-javascript","text":"Como se ha comentado, una aplicaci\u00f3n JavaScript ejecut\u00e1ndose en un navegador Web puede invocar una aplicaci\u00f3n nativa siempre que esta est\u00e9 registrada como la aplicaci\u00f3n por defecto para tratar un protocolo que no trate el propio navegador (por ejemplo, el Cliente @firma usa el protocolo afirma en una URI del estilo \u201cafirma://\u201d), proporcionando ciertos datos como parte de la propia URI de invocaci\u00f3n, pero\u2026 \u00bfC\u00f3mo puede la aplicaci\u00f3n nativa devolver datos a la aplicaci\u00f3n JavaScript? El modo m\u00e1s directo y sencillo es usar un servidor (accesible por ambas partes) como intermediario en ese di\u00e1logo, en una secuencia acorde al siguiente esquema: < Figure 9: Comunicaci\u00f3n bidireccional en invocaci\u00f3n por protocolo El navegador Web invoca a una App nativa mediante una URI especial, indicando una serie de informaci\u00f3n (datos a firmar, formato, opciones, etc.). La App recibe los datos y realiza la firma electr\u00f3nica usando las funciones nativas de gesti\u00f3n de claves y certificados. La App nativa deposita el resultado de la firma en un servidor intermediario mediante una llamada a un servicio Web simple. El navegador Web recoge el resultado de la operaci\u00f3n de firma del servidor intermediario y contin\u00faa la ejecuci\u00f3n de la l\u00f3gica de negocio. Como resultado tenemos una comunicaci\u00f3n cuasi-bidireccional entre navegador Web (JavaScript) y App nativa, supliendo completamente a los complementos tradicionales. Este modelo no obstante, requiere de ciertas precauciones para resultar eficaz y seguro: El servidor intermediario y la aplicaci\u00f3n Web deben estar preferentemente en el mismo servidor (para evitar advertencias de cross site scripting ). Si se usa SSL cliente, este debe requerirse \u00fanicamente en el servidor que aloja la aplicaci\u00f3n Web, y no en el servidor intermediario (para evitar una solicitud de autenticaci\u00f3n a la aplicaci\u00f3n nativa), pero siempre estando ambos con HTTPS en el mismo nombre de servidor. El servidor intermediario debe implementar mecanismos para asegurarse de que los datos depositados por una aplicaci\u00f3n nativa sean recogidos \u00fanicamente por la aplicaci\u00f3n JavaScript que la invoc\u00f3: Para ello deben implementarse al menos todos estos mecanismos: Los datos deben cifrarse mediante una clave aleatoria de un solo uso generada al vuelo desde el programa JavaScript, que se pasa a la aplicaci\u00f3n nativa mediante la URI de invocaci\u00f3n. Los datos deben tener un identificador aleatorio de un solo uso generado al vuelo desde el programa JavaScript, que se pasa a la aplicaci\u00f3n nativa mediante la URI de invocaci\u00f3n. El servidor debe borrar cualquier dato que se deposite en \u00e9l y que no sea requerido en un tiempo determinado (unos pocos minutos, que es lo m\u00e1ximo que puede durar la operaci\u00f3n en la aplicaci\u00f3n nativa). No deben implementarse mecanismos derivados de la direcci\u00f3n IP, ya que las conexiones 3G pueden variar de IP en una misma sesi\u00f3n.","title":"Comunicaci\u00f3n entre aplicaci\u00f3n nativa y aplicaci\u00f3n JavaScript"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#consideraciones-de-seguridad","text":"En el flujo anteriormente descrito se observa que JavaScript solicita los resultados de la operaci\u00f3n de firma a un servidor intermedio, pero \u00bfC\u00f3mo es posible garantizar que el servidor intermedio devuelve los resultados \u00fanicamente al cliente que origin\u00f3 la petici\u00f3n? Son varias las recomendaciones en cuanto a seguridad para garantizar que se cumpla esta premisa: El cliente debe generar un identificador \u00fanico \u201cal vuelo\u201d (por ejemplo, un UUID seg\u00fan RFC-4122, que pr\u00e1cticamente imposibilita encontrarlo por fuerza bruta o azar) al iniciar la transacci\u00f3n, y pedir los datos al servidor indicando este UUID. El cliente debe generar \u201cal vuelo\u201d una clave \u00fanica de cifrado sim\u00e9trico (por ejemplo 3DES) que se trasladar\u00e1 en la invocaci\u00f3n a la aplicaci\u00f3n nativa. Esta subir\u00e1 los datos al servidor ya cifrados, por lo que este servidor jam\u00e1s conocer\u00e1 la clave de cifrado (el descifrado se realizar\u00e1 en la aplicaci\u00f3n JavaScript mediante l\u00f3gica JavaScript). Cuando unos datos se suban al servidor intermedio, este establecer\u00e1 un \u201cperiodo de caducidad\u201d, y estos datos ser\u00e1n borrados tras cumplirse este periodo de caducidad. Esto limita la ventana temporal en la que los datos est\u00e1n accesibles desde Internet y limita los posibles ataques. Debe usarse SSL en todas las transacciones.","title":"Consideraciones de seguridad"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#implementacion-de-la-aplicacion-nativa-susceptible-de-ser-invocada-por-protocolo","text":"Una de las ventajas de la invocaci\u00f3n por protocolo es que la aplicaci\u00f3n, siempre que est\u00e9 asociada adecuadamente al protocolo, no tiene que seguir un API espec\u00edfico ni una normativa concreta, puede ser cualquier tipo de aplicaci\u00f3n. As\u00ed, es posible realizar una implementaci\u00f3n en Java (para una aplicaci\u00f3n de firma, reutilizando los activos Java del Cliente @firma) que cubra una buena parte de los sistemas operativos. Concretamente, una aplicaci\u00f3n JSE funcionar\u00eda sin problemas en Windows, Linux y OS X, y partes de esta aplicaci\u00f3n podr\u00edan ser reutilizadas en Android. En general, se podr\u00eda abordar la implementaci\u00f3n siguiendo este cuadro de lenguajes de programaci\u00f3n: Windows Java JSE Linux OS X Android Java Dalvik Windows RT, Windows Phone, Windows UI Moderno .NET / C# iOS Objective C / Swift","title":"Implementaci\u00f3n de la aplicaci\u00f3n nativa susceptible de ser invocada por protocolo"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#asociacion-del-protocolo","text":"Un problema distinto por cada uno de los sistemas operativos es como se realiza la asociaci\u00f3n de la aplicaci\u00f3n con el protocolo espec\u00edfico por el que se le invoca: Microsoft Windows Asociaci\u00f3n en Registro de Windows. Debe hacerse mediante un programa espec\u00edfico de instalaci\u00f3n. Apple OS X Declarado en la aplicaci\u00f3n. Apple iOS Declarado en la aplicaci\u00f3n. Google Android Declarado en la aplicaci\u00f3n. Linux Asociaci\u00f3n dual en Firefox y en el gestor de ventanas del sistema operativo (Gnome, KDE, etc.). Debe hacerse mediante un programa espec\u00edfico de instalaci\u00f3n (por ejemplo, un paquete DEB).","title":"Asociaci\u00f3n del protocolo"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#actualizacion-de-las-aplicaciones","text":"Mientras que en un Applet de Java el integrador controla f\u00e1cilmente la versi\u00f3n que se ejecuta (la que \u00e9l publica en su servidor Web), con una aplicaci\u00f3n instalada el escenario es completamente distinto, ya que es imposible conocer cu\u00e1l es la versi\u00f3n que el usuario tiene instalada en su ordenador. Este inconveniente obliga a integrador y usuario a usar siempre las \u00faltimas versiones disponibles, en la primera parte del JavaScript de integraci\u00f3n y en la segunda de la aplicaci\u00f3n instalada localmente. Para este segundo caso, siendo el ciudadano el responsable, es necesario implementar mecanismos de notificaci\u00f3n de disponibilidad de nuevas versiones que faciliten la actualizaci\u00f3n. Estos mecanismos difieren notablemente seg\u00fan el sistema operativo, en los sistemas m\u00e1s modernos ser\u00e1 un proceso completamente autom\u00e1tico gestionado por las tiendas de aplicaciones, mientras que en los tradicionales tendr\u00e1 que ser un proceso manual: Windows Proceso manual OS X Tienda: AppStore iOS Tienda: AppStore Android Tienda: Google Play Linux Tienda: Repositorio de paquetes Windows UI Moderno, Windows Phone, Windows RT Tienda: Windows Store Los entornos que requieran tienda necesitar\u00e1n una publicaci\u00f3n (que acostumbra a suponer costes recurrentes de mantenimiento de cuentas) y actualizaci\u00f3n en ellas y el cumplimiento de las normas de codificaci\u00f3n de estas. En un proceso manual, se necesitar\u00e1 de una combinaci\u00f3n de funcionalidades cliente (comprobaci\u00f3n peri\u00f3dica de disponibilidad de nueva versi\u00f3n), servidor (informar esta disponibilidad y publicaci\u00f3n de actualizaciones) y usuario (autorizar e iniciar la actualizaci\u00f3n).","title":"Actualizaci\u00f3n de las aplicaciones"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#dependencias-con-el-jre-en-el-caso-de-aplicaciones-desarrolladas-en-java","text":"Evidentemente, cualquier aplicaci\u00f3n Java necesita un entorno de ejecuci\u00f3n de Java (JRE) para ejecutarse. Detr\u00e1s de esta obviedad encontramos un aspecto cr\u00edtico a tener en cuenta para implantar una estrategia de invocaci\u00f3n por protocolo, y es que el usuario no solo debe instalar y mantener la propia aplicaci\u00f3n Java, sino tambi\u00e9n el JRE. Este mantenimiento, adem\u00e1s de ser muy molesto para el usuario, introduce otros efectos no deseados, como que el usuario pueda actualizar a un JRE no compatible con la aplicaci\u00f3n, o que la aplicaci\u00f3n le inste a instalar un JRE no compatible con otras aplicaciones de su equipo. Adicionalmente, la dependencia externa con un JRE impide, por pol\u00edtica, la publicaci\u00f3n de una aplicaci\u00f3n en la AppStore de OS X, un nuevo problema que inhabilitar\u00eda las actualizaciones autom\u00e1ticas a trav\u00e9s de tienda de aplicaciones. Para solventar estos problemas es m\u00e1s que recomendable que la aplicaci\u00f3n incluya internamente un JRE para su uso exclusivo (preferentemente OpenJDK para evitar problemas de licenciamiento). Esta opci\u00f3n apenas incrementa el tama\u00f1o de descarga en menos de 30MB (no notable con las conexiones de banda ancha actuales) y evita por completo los inconvenientes antes enumerados. Al ser un JRE no registrado en el sistema operativo (uso excluso de nuestra aplicaci\u00f3n) no influir\u00eda en los JRE ya existentes ni en la configuraci\u00f3n del usuario, al no instalar ni necesitar un Java Plugin no introduce problemas de seguridad en el equipo y al ser un JRE preseleccionado y probado se garantiza la compatibilidad con la aplicaci\u00f3n. Existen diversas formas de integrar un JRE con una aplicaci\u00f3n Java de forma cohesionada, desde una combinaci\u00f3n de Launch4J y NSIS en Windows, el empaquetado espec\u00edfico de la \u201c.app\u201d en OS X o el empaquetado espec\u00edfico de un distribuible de Debian (\u201c.deb\u201d) en Linux.","title":"Dependencias con el JRE en el caso de aplicaciones desarrolladas en Java"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#consideraciones-generales-de-la-invocacion-por-protocolo","text":"","title":"Consideraciones generales de la invocaci\u00f3n por protocolo"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#experiencia-de-usuario","text":"La experiencia de usuario en la invocaci\u00f3n por protocolo tiene un escollo importante cuando el usuario no cuenta con la aplicaci\u00f3n instalada. Las aplicaciones JavaScript no pueden (por motivos obvios de seguridad) saber que aplicaciones tiene o no instaladas un usuario, por lo que iniciar\u00e1n la invocaci\u00f3n por protocolo \u201ca ciegas\u201d, suponiendo que la aplicaci\u00f3n est\u00e1 adecuadamente instalada en el equipo, lo que derivar\u00e1 en un error en caso de que esto no sea as\u00ed. Deben buscarse mecanismos de enmascarar este error de una forma que no desconcierte al usuario, as\u00ed como debe advertirse al usuario de la necesidad de contar con la aplicaci\u00f3n instalada antes de iniciar el tr\u00e1mite. El otro problema de cara a la experiencia de usuario son los sistemas operativos en los que el tr\u00e1nsito desde el navegador a la aplicaci\u00f3n nativa y de vuelta desde \u00e9sta de nuevo al navegador provoca un \u201ccambio de contexto\u201d. Este cambio de contexto es molesto y hace que el usuario deba volver manualmente al navegador, lo que puede desconcertar al usuario. Esta situaci\u00f3n se da en los siguientes sistemas operativos: Microsoft Windows \u201cUI Moderno\u201d (incluyendo Windows RT y Windows en versiones 8, 8.1 y 10). Microsoft Windows Phone. Apple iOS.","title":"Experiencia de usuario"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#complejidad-en-el-despliegue","text":"La necesidad de un servidor intermedio dificulta en gran manera los despliegues, ya que hace necesario un peque\u00f1o servicio Web (JEE o equivalente) adem\u00e1s del servidor Web de publicaci\u00f3n del HTML + JavaScript. Este servidor intermedio hace adem\u00e1s que se multipliquen las conexiones de red y el tr\u00e1fico de datos, lo cual no solo ralentiza la operaci\u00f3n, sino que hace m\u00e1s dif\u00edcil el diagn\u00f3stico de los posibles fallos en el proceso de firma.","title":"Complejidad en el despliegue"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#conexion-por-servicio","text":"Una de las deficiencias m\u00e1s grandes de la invocaci\u00f3n por protocolo es la necesidad de un servidor intermedio que gestione la comunicaci\u00f3n de vuelta al navegador Web. No obstante, si una aplicaci\u00f3n nativa puede actuar como servidor de \u201csockets\u201d TCP o de servidor HTTP y una aplicaci\u00f3n JavaScript en un navegador puede establecer conexiones HTTP o WebSocket\u2026 \u00bfPor qu\u00e9 no usar estas tecnolog\u00edas para establecer una comunicaci\u00f3n local? < Figure 10: Esquema simplificado de la comunicaci\u00f3n por servicio En este escenario, la aplicaci\u00f3n local se ejecutar\u00eda como servicio en la m\u00e1quina del usuario, escuchando a la espera de una solicitud en un puerto TCP fijo, mientras que ser\u00eda la aplicaci\u00f3n JavaScript de firma la que iniciar\u00eda el di\u00e1logo mediante una llamadas (WebSocket o HTTP) a \u201clocalhost\u201d. En este punto, ser\u00eda preferible el uso de llamadas HTTP (en detrimento de WebSockets), para ampliar la compatibilidad a navegadores Web antiguos, ya que la compatibilidad con WebSockets se limita a las versiones presentadas en esta tabla: Compatibilidad con WebSocket (RFC 6455) Apple Safari Google Chrome Mozilla Firefox MS Internet Explorer Versi\u00f3n 6 o superior Versi\u00f3n 16 o superior Versi\u00f3n 11 o superior Versi\u00f3n 10 o superior","title":"Conexi\u00f3n por servicio"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#ventajas-y-desventajas-de-la-comunicacion-por-servicio","text":"","title":"Ventajas y desventajas de la comunicaci\u00f3n por servicio"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#compatibilidad-con-distintos-sistemas-operativos","text":"Por desgracia, hay sistemas operativos donde no es posible usar una invocaci\u00f3n por servicio por distintas razones: Windows Windows RT OS X Linux iOS Android Compatible No compatible Compatible Compatible No compatible Desaconsejado En los casos de Apple iOS (iPad, iPhone, etc.) no es posible la apertura de servicios locales (el fabricante lo proh\u00edbe por motivos de seguridad), mientras que en el caso de Android, si bien es perfectamente posible desde un punto de vista t\u00e9cnico, desde una orientaci\u00f3n pr\u00e1ctica es desaconsejable, ya que un servicio de estas caracter\u00edsticas disminuir\u00eda notablemente la duraci\u00f3n de la bater\u00eda del dispositivo.","title":"Compatibilidad con distintos sistemas operativos"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#uso-con-servidores-de-terminales-microsoft-terminal-server-y-citrix","text":"Un caso muy particular de compatibilidad que se ve afectado para las comunicaciones por servicio es cuando el ordenador del usuario funciona en modo terminal con un producto Windows de servicio de terminales como RDP (Microsoft Terminal Server) o ICA (Citrix). En estos casos no es posible seguir esta estrategia, ya que los servicios locales no lo son a los propios terminales, sino al servidor de estos, por lo que el servicio, al ser servicio de servidor, no podr\u00eda determinar de forma segura quien es el originario de la petici\u00f3n sin realizar una serie de complejas l\u00f3gicas: El servicio debe proporcionarse de forma centralizada desde el servidor de terminales, para evitar que varios servicios intenten escuchar peticiones en el mismo puerto provocando conflictos. El servicio debe implementar mecanismos para determinar qu\u00e9 usuario realiz\u00f3 la petici\u00f3n de firma, y acceder al almac\u00e9n de claves y certificados correspondiente a ese usuario. Deben implementarse las medidas de seguridad adecuadas para evitar la impostaci\u00f3n de identidades y que un usuario de terminal acceda a las claves de otro usuario de terminal. Estas l\u00f3gicas deben implementarse como desarrollos de extensi\u00f3n a los servicios de terminal, usando para ello los kits de desarrollo de los distintos servidores (los SDK de Microsoft y los SDK de Citrix). Esta implementaci\u00f3n es compleja en s\u00ed misma, y no puede reutilizarse de un producto servidor a otro.","title":"Uso con servidores de terminales: Microsoft Terminal Server y Citrix"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#experiencia-de-usuario_1","text":"La primera ventaja del uso de servicios locales es la experiencia de usuario, ya que no hay tiempo de espera de arranque de aplicaciones (m\u00e1s r\u00e1pido que cualquier otro medio, ya que la aplicaci\u00f3n est\u00e1 siempre precargada en memoria) y no hay di\u00e1logos de advertencia (excepto los que se quieran a\u00f1adir por seguridad en el desarrollo). No obstante, en el caso de Windows 8 y superiores en modo \u201cUI Moderno\u201d, seguir\u00edamos teniendo los problemas de cambio de contexto que ya se describieron en el apartado \u201cLa invocaci\u00f3n por protocolo como sustituto de los Applets de Java\u201d. No es posible eliminar estos inconvenientes, ya que es necesaria una interacci\u00f3n directa con el usuario (interfaz gr\u00e1fica por parte de la aplicaci\u00f3n proveedora del servicio) como m\u00ednimo para control de seguridad (nunca permitir una ejecuci\u00f3n oculta) y para preservar la privacidad del usuario (la selecci\u00f3n de certificados debe hacerse con interfaz propio, para evitar que se expongan a las aplicaciones Web detalles de certificados que no est\u00e1n relacionados con la operaci\u00f3n en curso).","title":"Experiencia de usuario"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#reutilizacion-del-desarrollo-java","text":"Otra ventaja es que podr\u00eda reutilizarse un desarrollo Java para la realizaci\u00f3n de las operaciones de firma electr\u00f3nica en buena parte de los sistemas, disminuyendo la duplicidad de esfuerzos en el desarrollo. No obstante, dado que se trata de un proveedor de servicios a nivel de sistema operativo, es pr\u00e1cticamente obligatorio desarrollar un interfaz nativo en cada sistema operativo siguiendo las especificaciones que el fabricante de este indique, obteniendo as\u00ed los beneficios de los que disfrutan los servicios comunes: Gesti\u00f3n a nivel de sistema operativo. Autoarranque en caso de ca\u00edda. Configuraci\u00f3n com\u00fan. Etc. En general, estas ser\u00edan las interfaces seg\u00fan cada sistema operativo: Windows Deben implementarse los requisitos definidos en la especificaci\u00f3n Services Control Manager de Microsoft . Adicionalmente, dado que el servicio tendr\u00e1 interfaz gr\u00e1fica propia, y debido a las restricciones de seguridad impuestas para los servicios en sistemas Windows a partir de Windows Vista, es necesario seguir las pautas conocidas como Windows Service Hardening . API disponible en C++ y .NET, pero no en Java. OS X Deben implementare las interfaces definidas por Apple . API disponible en Objective C. Android Deben implementarse las interfaces definidas por Google . API disponible en Java, pero v\u00e1lidos \u00fanicamente para Android. Linux Distintas opciones. En el caso m\u00e1s simple puede desarrollarse en Java y arrancarse mediante simples scripts de sistema (SH, BASH, etc.). As\u00ed, podemos observar que ser\u00edan necesarios ciertos desarrollos nativos por cada sistema operativo, que deben conectar con el c\u00f3digo Java (reutilizado del Cliente @firma) para realizar las firmas electr\u00f3nicas en s\u00ed. Este enlace Nativo <-> Java no es en absoluto desde\u00f1able, especialmente en el caso de Windows, ya que los requisitos de seguridad mencionados anteriormente (Windows Service Hardening) establecen numerosas restricciones de seguridad que dificultan este traspaso bidireccional desde C++ o .NET (C#, Visual Basic, etc.) hacia Java.","title":"Reutilizaci\u00f3n del desarrollo Java"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#sin-trafico-de-red-externo","text":"Una ventaja m\u00e1s, en este caso con respecto a la alternativa de invocaci\u00f3n por protocolo, es que la sincronizaci\u00f3n del navegador y la aplicaci\u00f3n mediante un servicio no conlleva tr\u00e1fico de red externo. El tr\u00e1fico de red supondr\u00eda un coste en: Consumo de red, que puede ser cr\u00edtico en entornos m\u00f3viles con coste monetario por transmisi\u00f3n de datos. Tiempo de transmisi\u00f3n: Los datos se env\u00edan desde el navegador al servicio externo (tiempo de espera en el navegador web). Los datos se descargan desde el servicio a la aplicaci\u00f3n (tiempo de espera en la aplicaci\u00f3n). La firma se env\u00eda al servicio externo desde la aplicaci\u00f3n (tiempo de espera en la aplicaci\u00f3n). La firma se descarga desde el servicio externo al navegador (tiempo de espera en el navegador web). Estos costes se incrementar\u00edan de forma proporcional al tama\u00f1o de los datos. En la invocaci\u00f3n por servicio, estos costes no existen.","title":"Sin tr\u00e1fico de red externo"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#seguridad","text":"La seguridad es sin duda el punto m\u00e1s flojo de esta estrategia de sustituci\u00f3n de los Applets de Java, por varios motivos: Un servicio accesible desde TCP es un punto de entrada muy peligroso a nuestras claves privadas y certificados: La necesidad de usar siempre el mismo puerto hace que no sea necesario una exploraci\u00f3n previa de los puertos para iniciar un ataque. Aunque solo aceptemos conexiones locales, es muy f\u00e1cil impostar la IP de origen para que parezca local. Cualquier servicio TCP es susceptible a ataques, hasta el mejor programador puede dejar compromisos de seguridad en su c\u00f3digo: tratamiento de buffers en C++, inseguridades propias de los entornos de ejecuci\u00f3n (Visual C++, Java, .NET...), etc. En entonos de terminal, se introduce una nueva amenaza, que es la impostaci\u00f3n de identidad de usuario, que, como se ha comentado anteriormente, derivar\u00eda en el acceso a las claves y certificados de otro usuario dentro de la misma red de terminales.","title":"Seguridad"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#cifrado-de-datos-transmitidos","text":"Dado que se transmiten datos por conexiones comunes de red (puerto TCP y protocolo HTTP), si no se usa un adecuado sistema de cifrado de datos, un simple an\u00e1lisis de red revelar\u00eda informaci\u00f3n \u201csensible\u201d, dejando la aplicaci\u00f3n con una inseguridad inadmisible. Como no es posible usar claves asim\u00e9tricas (podr\u00edan extraerse trivialmente las claves privadas del mismo software), es necesario implementar complejos sistemas de intercambio de claves (como por ejemplo Diffie\u2013Hellman) para asegurar las transmisiones. Pr\u00e1cticamente todos los lenguajes de programaci\u00f3n disponen de bibliotecas que implementan estos sistemas, por lo que, para ahorrar esfuerzos, ser\u00eda conveniente su uso evitando implementaciones propias: Java JCA/JCE JavaScript NodeJS Crypto como base. OS X API de seguridad de Apple OS X Android JCA/JCE Aun as\u00ed, la imposibilidad de usar SSL en las transmisiones, supondr\u00e1 siempre cierta exposici\u00f3n a un ataque de tipo \u201chombre en el medio\u201d, si bien se trata de un riesgo bajo. Idealmente, estas caracter\u00edsticas deben implementarse en el frontal del servicio (que es la parte nativa dependiente del sistema de servicios del sistema operativo), lo que redundar\u00eda en duplicidad de desarrollos, si bien es aceptable delegarlo en capas interiores (Java, que se puede reutilizar). Desde el lado cliente, la implementaci\u00f3n debe ser siempre JavaScript.","title":"Cifrado de datos transmitidos"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#combinacion-de-la-invocacion-por-servicio-y-la-invocacion-por-protocolo","text":"La comunicaci\u00f3n por servicio eliminaba el gran problema de la invocaci\u00f3n por protocolo, que es la necesidad de un servidor intermedio para la transmisi\u00f3n bidireccional contra la aplicaci\u00f3n Web, pero introduc\u00eda una serie de problemas que lo hac\u00edan pr\u00e1cticamente inviable. No obstante, es posible plantear una combinaci\u00f3n de ambas opciones para dar soluci\u00f3n a los problemas de ambas sin prescindir de las ventajas de cada una. B\u00e1sicamente, se podr\u00eda plantear un proveedor de servicio por puerto TCP que fuese iniciado (arrancado) mediante una invocaci\u00f3n por protocolo, pudiendo pasar ciertos par\u00e1metros sobre la prestaci\u00f3n del servicio en esa invocaci\u00f3n.","title":"Combinaci\u00f3n de la invocaci\u00f3n por servicio y la invocaci\u00f3n por protocolo"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#problemas-resueltos-mediante-la-combinacion-de-ambos","text":"La comunicaci\u00f3n por servicio usa un mismo puerto TCP siempre, lo que hace que se puedan planificar los ataques. La aplicaci\u00f3n JavaScript puede determinar de forma aleatoria (ah\u00ed la seguridad) una serie de puertos como candidatos (a partir de una lista de varios miles de n\u00fameros de puerto marcados como normalmente desasignados) a ser usados para el servicio. Esta lista se proporcionar\u00eda como par\u00e1metro en la invocaci\u00f3n por protocolo. De esta forma, el puerto a usar siempre es distinto, siendo muy dif\u00edcil (probabil\u00edsticamente imposible) saber de antemano cual se va a usar. La comunicaci\u00f3n por servicio deja siempre el puerto abierto, esperando a las invocaciones, lo que hace que la exposici\u00f3n a ataques sea permanente. El servicio podr\u00eda iniciarse solo tras una invocaci\u00f3n por protocolo, cerr\u00e1ndose justo despu\u00e9s de servir la petici\u00f3n. La \u201cpuerta hacia nuestras claves\u201d se abre solo el tiempo estrictamente necesario. La comunicaci\u00f3n por servicio podr\u00eda admitir peticiones de atacantes que hubiesen falseado su IP y/o su identidad. La invocaci\u00f3n por protocolo puede indicar un n\u00famero de petici\u00f3n (un UUID generado aleatoriamente), y el servicio admitir \u00fanicamente peticiones que conozcan este UUID. Como la invocaci\u00f3n por protocolo no es susceptible a escuchas (no va por red) ni a ataques de tipo \u201chombre en el medio\u201d, no ser\u00eda posible impostar el origen de las comunicaciones. La comunicaci\u00f3n por servicio, al usar un n\u00famero fijo de puerto TCP, causa conflictos en servidores de terminal, donde todas las sesiones comparten origen de red. Como el servicio recibe una lista (aleatoria) de puertos TCP a usar, se pueden ir probando en orden hasta que se encuentra un puerto libre de la lista. Al seleccionarse la lista desde un total de varios miles de puertos normalmente desasignados, una simple lista de 5 o 10 puertos hace probabil\u00edsticamente imposible la colisi\u00f3n, ya que el puerto de otra sesi\u00f3n solo estar\u00e1 ocupado durante el tiempo preciso que dure una operaci\u00f3n de firma, quedando libre al terminar. En Android, el mantenimiento continuo de un servicio activo provoca un inaceptable incremento en el consumo de bater\u00eda en dispositivos m\u00f3viles. Es posible que el servicio se mantenga por defecto inactivo (sin consumir bater\u00eda) y que sea la activaci\u00f3n la que lo inicie, deteni\u00e9ndose de forma autom\u00e1tica al terminar la tarea de firma encomendada. As\u00ed solo habr\u00eda el consumo justo de energ\u00eda.","title":"Problemas resueltos mediante la combinaci\u00f3n de ambos"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#descripcion-funcional-de-la-secuencia","text":"Figure 11: Secuencia de operaci\u00f3n en invocaci\u00f3n por protocolo y comunicaci\u00f3n por servicio B\u00e1sicamente, el flujo var\u00eda respecto a una comunicaci\u00f3n por servicio en que el servicio est\u00e1 normalmente detenido, por lo que debe activarse antes de iniciar la solicitud con una invocaci\u00f3n por protocolo. Una vez servida la solicitud de firma, este se detiene por s\u00ed mismo, quedando de nuevo inactivo a la espera de que una nueva invocaci\u00f3n por protocolo lo arranque.","title":"Descripci\u00f3n funcional de la secuencia"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#consideraciones-de-implementacion","text":"","title":"Consideraciones de implementaci\u00f3n"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#compatibilidad-con-distintos-entornos-operativos","text":"La combinaci\u00f3n de invocaci\u00f3n por protocolo hereda de forma general la compatibilidad de la invocaci\u00f3n por protocolo con una salvedad muy importante, y es que, por distintos motivos, no es compatible con Apple iOS.","title":"Compatibilidad con distintos entornos operativos"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#compatibilidad-segun-sistema-operativo","text":"Apple iOS NO Apple OS X S\u00ed Microsoft Windows S\u00cd Google Android S\u00cd Linux S\u00cd Windows UI Moderno, Windows RT S\u00cd","title":"Compatibilidad seg\u00fan sistema operativo"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#compatibilidad-con-apple-ios","text":"Uno de los principales problemas de compatibilidad con Apple iOS reside en que el sistema operativo, en sus versiones de 32 bits (dispositivos anteriores al iPhone 6, que son pr\u00e1cticamente todos los actuales en uso por los ciudadanos) no permiten una multitarea real, y el sistema operativo no permite servicios de terceras partes (solo Apple puede hacer servicios en iOS). Esto deriva en una situaci\u00f3n un tanto peculiar, y es que aun pudi\u00e9ndose abrir un socket TCP servidor por parte de una App nativa cuando recibe una invocaci\u00f3n por protocolo, este nunca podr\u00e1 ser accedido desde el navegador Web del mismo dispositivo, ya que este \u00faltimo queda en modo de suspensi\u00f3n mientras la App nativa se est\u00e9 ejecutando. Es decir, no se pueden ejecutar simult\u00e1neamente las dos partes, aspecto indispensable para entablar un di\u00e1logo. Adicionalmente, aunque este problema se podr\u00eda subsanar en dispositivos ARM64 (iPhone 6 y dispositivos posteriores), las restricciones de la pol\u00edtica de Apps de Apple desaconsejan la apertura de puertos TCP y su atenci\u00f3n local por otras aplicaciones, por lo que probablemente una aplicaci\u00f3n de firma que usase estas caracter\u00edsticas ser\u00eda rechazada para publicaci\u00f3n.","title":"Compatibilidad con Apple iOS"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#compatibilidad-segun-navegador-web","text":"Chrome Windows 8 y superiores en UI Moderno NO Resto de sistemas compatibles (Android, Linux, Windows) S\u00cd Safari Todos los sistemas (OS X) S\u00cd Internet Explorer Todos los sistemas (Windows, Windows Phone, Windows RT) S\u00cd Firefox Todos los sistemas (Windows, Linux, OS X, Android) S\u00cd","title":"Compatibilidad seg\u00fan navegador Web"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#consideraciones-de-implementacion_1","text":"","title":"Consideraciones de implementaci\u00f3n"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#mantenimiento-de-la-funcionalidad-de-invocacion-por-protocolo","text":"Es interesante el que una aplicaci\u00f3n que implemente invocaci\u00f3n por protocolo m\u00e1s comunicaci\u00f3n por servicio mantenga tambi\u00e9n la posibilidad de funcionar \u00fanicamente con invocaci\u00f3n por protocolo, ya que esto facilitar\u00eda la transici\u00f3n de un sistema a otro simplemente desde JavaScript, sin necesidad de que el usuario tuviese que reinstalar o configurar nada. Un escenario hipot\u00e9tico en el que esta situaci\u00f3n podr\u00eda ser necesaria podr\u00eda ser en el caso en que un navegador Web no permitiese el lanzamiento de llamadas al servicio local por considerar que se trata de una inseguridad de tipo Cross Site Scripting (XSS), por ejemplo, debido a la omisi\u00f3n de HTTPS. As\u00ed, ser\u00eda posible desde JavaScript la detecci\u00f3n de estas condiciones para lanzar una invocaci\u00f3n simple por protocolo y de esta manera no dejar nunca al usuario sin servicio.","title":"Mantenimiento de la funcionalidad de invocaci\u00f3n por protocolo"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#uso-de-servicios-de-sistema-operativo-versus-simples-servicios-tcp","text":"Dado que la comunicaci\u00f3n en esta estrategia de implementaci\u00f3n se lanza cada vez en un puerto TCP distinto y solo est\u00e1 disponible unos instantes, no resulta apropiada el desarrollo de un servicio a nivel de sistema operativo, sino que lo adecuado ser\u00eda la simple apertura de un socket TCP servidor por parte de la aplicaci\u00f3n nativa. Este cambio trae una ventaja que no son en absoluto despreciable, y es que la implementaci\u00f3n de un socket servidor TCP (que da entrada a una implementaci\u00f3n simple del protocolo HTTP) no es realmente dependiente del sistema operativo, sino del lenguaje de programaci\u00f3n. Esto permite que una misma implementaci\u00f3n en Java pueda reutilizarse en Windows, Linux y OS X, con el consiguiente ahorro de esfuerzo.","title":"Uso de servicios de sistema operativo versus simples servicios TCP"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#google-android-como-caso-especifico","text":"Android es un caso particular en este sentido porque, aunque es perfectamente compatible una implementaci\u00f3n de socket TCP servidor con JSE, al igual que con Apple iOS no es posible garantizar una ejecuci\u00f3n simult\u00e1nea de aplicaci\u00f3n nativa y navegador Web, requisito indispensable para que se establezca el di\u00e1logo. Es decir, incluso si podemos escuchar un puerto desde nuestra aplicaci\u00f3n, si la aplicaci\u00f3n se encuentra en segundo plano en favor al navegador web que realiza las llamadas al socket, no podemos garantizar que se van a escuchar esas llamadas. Para sortear esta dificultad ser\u00eda necesario realizar un desarrollo adicional que pueda escuchar siempre las llamadas del navegador. Este consistir\u00eda en un servicio Android a nivel de sistema operativo. As\u00ed, la implementaci\u00f3n requerir\u00eda, como se ha comentado anteriormente, que se siguiese una secuencia similar a esta, teniendo como requisito que la aplicaci\u00f3n implementa y declara un servicio Android, que permanece por defecto parado e inactivo: La p\u00e1gina Web lanza la invocaci\u00f3n inicial por protocolo. La aplicaci\u00f3n nativa Android, arrancada mediante la invocaci\u00f3n por protocolo, arranca el servicio (que permanec\u00eda parado y queda a la escucha en el puerto TCP). El navegador Web, que no se ha bloqueado en ning\u00fan momento (se sigue ejecutando de forma paralela al servicio), accede al puerto y env\u00eda informaci\u00f3n sobre la operaci\u00f3n de firma a ejecutar. El servicio realiza la operaci\u00f3n de firma y devuelve los datos al JavaScript que se ejecutaba en el navegador Web. Una vez cerrada la comunicaci\u00f3n, el servicio se detiene (\u00e9l mismo) y el control vuelve al navegador. Siguiendo esta secuencia simple, es el servicio el que accede al almac\u00e9n de certificados, permite al usuario seleccionar el deseado y realiza la operaci\u00f3n de firma. Sin embargo, un servicio Android no deber\u00eda tener ning\u00fan tipo de interfaz gr\u00e1fico propio, as\u00ed que esta aproximaci\u00f3n s\u00f3lo ser\u00eda posible cuando se delegue la selecci\u00f3n de certificados en las funcionalidades del llavero de Android 4, que cuenta con sus propios di\u00e1logos. \u00bfQu\u00e9 pasa entonces si deseamos usar una implementaci\u00f3n del almac\u00e9n de Android al estilo JSE tal y como permite Android 4.3? (lo m\u00e1s indicado). En este caso, en el que s\u00ed tenemos que usar un di\u00e1logo de selecci\u00f3n de certificados propio, la secuencia se complica. Para hacerlo posible, de debe desarrollar un Intent de Android para la selecci\u00f3n de certificado, quedando entonces la secuencia como se describe a continuaci\u00f3n: Figure 12: Invocaci\u00f3n por protocolo m\u00e1s comunicaci\u00f3n por servicio en Android En este caso, tal y como se describe en la secuencia, la aplicaci\u00f3n nativa Android cuenta con tres Intents distintos: Uno que se activa por protocolo y que activa el servicio. Otro que es el propio servicio. Un tercero que realiza \u00fanicamente las operaciones que requieren interfaz gr\u00e1fico (di\u00e1logo de selecci\u00f3n de certificados, di\u00e1logo de guardado de fichero, etc.).","title":"Google Android como caso espec\u00edfico"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#espera-desde-la-invocacion-por-protocolo-hasta-la-plena-operatividad-del-servicio","text":"Uno de los principales problemas de la estrategia descrita se encuentra en que tras hacer la invocaci\u00f3n por protocolo por parte de la aplicaci\u00f3n JavaScript de firma, no es posible iniciar inmediatamente el di\u00e1logo por servicio, ya que este tarda un tiempo en estar operativo, y los tiempos de espera son cr\u00edticos para proporcionar una experiencia de usuario adecuada. \u00bfC\u00f3mo determinar entonces el tiempo a esperar? Dado que no es posible determinar este tiempo (depende de m\u00faltiples factores, como la versi\u00f3n del entorno de ejecuci\u00f3n de Java si se necesitase, la potencia de la m\u00e1quina, si ya existiese una instancia en ejecuci\u00f3n, el tipo de sistema operativo, etc.), se plantea la necesidad de realizar series de llamadas a intervalos de tiempo regulares (unos pocos segundos) hasta que una de ellas es atendida. Figure 13: M\u00faltiples llamadas esperando la operatividad del servicio Esta l\u00f3gica comporta no obstante ciertas restricciones: El servicio debe configurarse para atender una \u00fanica petici\u00f3n, y rechazar cualquier otra. Las llamadas desde JavaScript deben hacerse de forma no bloqueante (as\u00edncronamente), de forma que no haya que esperar al timeout de una petici\u00f3n para lanzar la siguiente. Una vez una petici\u00f3n es atendida, deben cancelarse el resto de peticiones pendientes. El tiempo de espera entre peticiones debe calcularse en base a un tiempo razonable en el que la petici\u00f3n es contestada. Una estrategia efectiva en este caso es hacer una primera llamada que sea contestada inmediatamente, que sea la que se cerciore de la plena disponibilidad del servicio y tras ella la solicitud de la firma, que puede llevar varios minutos (ya que incluye interacci\u00f3n con el usuario): Figure 14: Llamada previa de comprobaci\u00f3n de disponibilidad","title":"Espera desde la invocaci\u00f3n por protocolo hasta la plena operatividad del servicio"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#resumen-y-consideraciones-finales","text":"La mezcla de invocaci\u00f3n por protocolo con la comunicaci\u00f3n por servicio, tal y como ha quedado expuesto, trae interesantes ventajas, como un menor n\u00famero de comunicaciones de red, un proceso puramente local, sin exposici\u00f3n externa de los datos de firma y la posibilidad de operar sin servidores de aplicaciones (con un simple servidor Web para el HTML + JavaScript es suficiente), pero la falta de compatibilidad con Apple iOS obliga al mantenimiento del medio de invocaci\u00f3n simple por protocolo. Igualmente, en Android el proceso es sustancialmente m\u00e1s complejo de gestionar y desarrollar que en el resto de plataformas, por lo que la introducci\u00f3n es esta soluci\u00f3n implica un esfuerzo considerable de desarrollo inicial y de mantenimiento posterior del software, que quedar\u00eda de esta forma: Plataforma M\u00e9todo Implementaci\u00f3n Apple iOS Invocaci\u00f3n por protocolo Propia en Objective-C Google Android Protocolo y Servicio Java con m\u00faltiples Intents Apple OS X Java est\u00e1ndar MS Windows Linux Por supuesto, cada una de las plataformas requerir\u00eda su propio medio de distribuci\u00f3n de las aplicaciones: Apple OS X AppStore de OS X o Instalador a medida Apple iOS AppStore de iOS Microsoft Windows Instalador a medida Google Android Google Play Linux DEB en repositorio com\u00fan (Guadalinex, etc.)","title":"Resumen y consideraciones finales"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#api-100-javascript","text":"Sin duda, en un proceso Web de cualquier tipo, la soluci\u00f3n deseable ser\u00eda siempre la disponibilidad de un API est\u00e1ndar JavaScript que estuviese disponible en todos los navegadores Web y en todas las plataformas y adem\u00e1s normalizado por un organismo internacional, como la W3C. Por desgracia, para el caso concreto de la firma electr\u00f3nica, no existe dicho API, si bien hay varias iniciativas en progreso que podr\u00edan, una vez finalizadas y adoptadas por la industria, podr\u00edan cubrir adecuadamente las necesidades de este tipo de aplicaciones.","title":"API 100% JavaScript"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#iniciativas-webcrypto-de-w3c","text":"< El World Wide Web Consortium (W3C, http://www.w3.org/ ) trabaja actualmente en dos iniciativas para normalizar un API JavaScript de criptograf\u00eda para navegadores Web. Dentro de esta iniciativa hay dos grupos de trabajo bien diferenciados: WebCrypto Key Discovery: http://www.w3.org/TR/webcrypto-key-discovery/ Un API para el uso seguro de claves privadas desde navegador Web, el \u00faltimo borrador publicado data de agosto de 2013. Trabajos liderados por Netflix. Web Cryptography API: http://www.w3.org/TR/WebCryptoAPI/ API para la realizaci\u00f3n de operaciones criptogr\u00e1ficas (como cifrados RSA) desde JavaScript. Es una especificaci\u00f3n sobre la que se trabaja activamente, el \u00faltimo borrador publicado data de diciembre de 2014. Trabajos liderados por Google y Netflix (Mozilla se retir\u00f3 del grupo de trabajo). El segundo grupo de trabajo y especificaci\u00f3n, la Web Cryptography API, no supone en s\u00ed un medio que permita tener aplicaciones de firma 100% JavaScript, ya que sin el concurso de las claves privadas, no es posible realizar firmas. Por el contrario, el primer grupo y su especificaci\u00f3n, la WebCrypto Key Discovery s\u00ed es el punto cr\u00edtico que habilitar\u00eda aplicaciones de firma 100% JavaScript, incluso si Web Cryptography API no estuviese disponible (hay bibliotecas Software Libre de terceros para hacer esas operaciones). Desgraciadamente, WebCrypto Key Discovery es una especificaci\u00f3n sobre la que apenas se trabaja y cuyo principal patrocinador, Netflix, orienta claramente a la gesti\u00f3n de los derechos sobre activos digitales (DRM), lo que puede dificultar su adopci\u00f3n generalizada por la industria: Google (Chrome) basa su negocio en activos de acceso libre con publicidad, y ya se ha manifestado en contra de este uso del API. Mozilla (Firefox) rechaza cualquier iniciativa de control tipo DRM para la Web. As\u00ed, es improbable una disponibilidad a corto o medio plazo de un API normalizado por W3C y adoptado de forma generalizada por la industria que permita desarrollar aplicaciones de firma 100% en JavaScript.","title":"Iniciativas WebCrypto de W3C"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#alianza-fido","text":"< De forma independiente a la W3C, un nutrido grupo de fabricantes trabaja en un nuevo API pensado para autenticaci\u00f3n fuerte en entornos Web mediante criptograf\u00eda de clave p\u00fablica, orientado principalmente a los pagos en l\u00ednea. Entre los patrocinadores y promotores de la alianza encontramos a Samsung, Microsoft, ARM, Google y RSA, not\u00e1ndose especialmente la ausencia de Apple, quien, al patrocinar sus propios sistemas de pagos m\u00f3viles, no implementar\u00e1 estos est\u00e1ndares en sus productos. Si bien las especificaciones (ya en estado final y en proceso de implantaci\u00f3n en ciertas plataformas m\u00f3viles) contemplan la realizaci\u00f3n de firmas electr\u00f3nicas, su orientaci\u00f3n a la autenticaci\u00f3n hace que no se exponga un API PKCS#1 de forma directa, por lo que su uso para realizar firmas electr\u00f3nicas (AdES), en su estado actual, no es posible. Adicionalmente, la ausencia de Apple en la alianza es tambi\u00e9n un condicionante grande, ya que iOS es una plataforma irrenunciable en movilidad, y OS X gana cuota de mercado cada a\u00f1o, por lo que cualquier soluci\u00f3n que implemente las especificaciones FIDO necesitar\u00eda una implementaci\u00f3n complementaria e independiente (usando algunas de las estrategias detalladas anteriormente) para llegar a los usuario de Apple.","title":"Alianza FIDO"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#consideraciones-sobre-la-firma-100-javascript","text":"Actualmente no es posible una soluci\u00f3n de firma 100% JavaScript, y no lo ser\u00e1 a corto medio plazo como soluci\u00f3n general para todas las plataformas. Igualmente, dado la velocidad de avance de las tecnolog\u00edas, no es razonable esperar que los API aqu\u00ed descritos sean los finalmente adoptados dentro de cinco a\u00f1os o m\u00e1s, si es que se adoptase alguno. Se puede concluir que, si bien ser\u00eda la opci\u00f3n deseable, no habr\u00e1 aplicaciones de firma 100% JavaScript multiplataforma y multinavegador hasta dentro de cierto tiempo, que ser\u00e1n varios a\u00f1os hasta cubrir sistemas operativos de Google, Microsoft, Linux y Apple en m\u00f3viles y sobremesas.","title":"Consideraciones sobre la firma 100% JavaScript"},{"location":"markdown_strict/Informe%20-%20Alternativas_Applets_para_firma/#resumen-y-recomendaciones-finales","text":"Las consideraciones finales que cabe destacar de cada una de las soluciones presentadas son: Complementos para navegadores Web Su desarrollo es actualmente viable. M\u00faltiples entornos incompatibles (Android, iOS, navegadores en Windows 8 Modern UI,\u2026) Requiere desarrollos espec\u00edficos para pr\u00e1cticamente cada navegador en diversas tecnolog\u00edas. Requiere que el usuario instale previamente los complementos. Introduce un factor de inseguridad por permitir la ejecuci\u00f3n de c\u00f3digo privilegiado desde JavaScript. Invocaci\u00f3n por protocolo Su desarrollo es actualmente viable. Compatibilidad con pr\u00e1cticamente todos los entornos. Requiere desarrollos espec\u00edficos para 4 entornos: navegadores de escritorio, Android, iOS y Windows RT. Requiere que el usuario instale previamente la aplicaci\u00f3n. Introduce un factor de inseguridad por requerir el uso de un servidor externo para la sincronizaci\u00f3n de datos con el navegador. Conexi\u00f3n por servicio Su desarrollo es actualmente viable. Algunos entornos incompatibles (iOS y Windows RT) y desaconsejado en Android por el consumo de bater\u00eda adicional. Requiere desarrollos espec\u00edficos para 4 entornos: Windows, Linux, Mac OS X y Android. Requiere que el usuario instale previamente la aplicaci\u00f3n. Problemas de seguridad asociados a tener un servicio abierto permanentemente. Combinaci\u00f3n de la invocaci\u00f3n por protocolo/servicio Su desarrollo es actualmente viable. Compatibilidad con un gran n\u00famero de entornos, a falta de Apple iOS. Requiere desarrollos espec\u00edficos para 3 entornos: navegadores de escritorio, Android y Windows RT. Requiere que el usuario instale previamente la aplicaci\u00f3n. Sin problemas de seguridad f\u00e1cilmente explotables dado se elimina la necesidad de un servidor externo y el servicio s\u00f3lo est\u00e1 disponible durante un tiempo limitado y con una configuraci\u00f3n negociada por cada operaci\u00f3n. API 100% JavaScript Su desarrollo es actualmente inviable. Serias dudas acerca de la compatibilidad con los distintos entornos. Una \u00fanica implementaci\u00f3n para todos los entornos. No requiere que el usuario instale previamente la aplicaci\u00f3n. Sin problemas de seguridad f\u00e1cilmente explotables dada su ejecuci\u00f3n plenamente en local. Con soluciones actualmente imposibles como el uso \u00fanico de JavaScript o complejas, ineficientes e incompletas como el desarrollo de complementos, cualquier aproximaci\u00f3n actualmente viable para sustituir los Applets de Java en aplicaciones Web de firma electr\u00f3nica va a necesitar obligatoriamente que el usuario instale (y mantenga actualizada) una aplicaci\u00f3n local. Las alternativas viables que mayores beneficios reportan son las que se pueden invocar por protocolo, servicio o una mezcla de ambas, siendo esta \u00faltima la que menos problemas de seguridad reporta. Sin embargo, la limitaci\u00f3n de no poder hacer uso en Apple iOS de este modo de invocaci\u00f3n hace que no pueda ser este el \u00fanico mecanismo implementado si se quiere mantener la compatibilidad con este sistema. Si se piensa en un desarrollo dual que utilice un mecanismo alternativo para los sistemas no soportados, la alternativa compatible m\u00e1s viable es la invocaci\u00f3n por protocolo. Sin embargo, este tipo de soluci\u00f3n aumenta la complejidad m\u00e1s all\u00e1 de la intr\u00ednseca de la propia invocaci\u00f3n por protocolo/servicio, aumentando el coste de mantenimiento, y no reporta los beneficios propios de este mecanismo, la eliminaci\u00f3n del servicio externo de comunicaci\u00f3n. S\u00ed, por contra, reducir\u00e1 el tr\u00e1fico de red dado que desde m\u00faltiples entornos no se har\u00e1 uso de este servicio externo. En resumen, se considera que la soluci\u00f3n con mejor relaci\u00f3n calidad/coste de desarrollo y mantenimiento es la invocaci\u00f3n por protocolo por ser la soluci\u00f3n viable que mayor compatibilidad ofrece, introduciendo unos costes de mantenimiento reducidos por la propia simplicidad del modo de invocaci\u00f3n.","title":"Resumen y recomendaciones finales"},{"location":"markdown_strict/Invocaci%C3%B3n%20por%20protocolo%20de%20aplicaciones%20nativas%20desde%20p%C3%A1ginas%20Web/","text":"\u00bfQu\u00e9 es la invocaci\u00f3n por protocolo? Es un funcionamiento universal que los sistemas operativos mantengan una serie de asociaciones entre tipos de fichero y las aplicaciones que son capaces de tratarlos. As\u00ed, si en un sistema operativo Windows se indica que se abra un documento de texto, este consultar\u00e1 en el Registro de Windows cual es la aplicaci\u00f3n por defecto asociada para su tratamiento (usualmente el Bloc de Notas), y proceder\u00e1 a abrir esta aplicaci\u00f3n pasando como par\u00e1metro la ruta completa del fichero en el esquema de argumentos definido en el propio Registro de Windows como parte de la asociaci\u00f3n. Esta asociaci\u00f3n se hace de distintas formas seg\u00fan el sistema operativo, en Windows es por su extensi\u00f3n (\u201c.txt\u201d en nuestro ejemplo), pero por ejemplo en Linux es por su MIME-Type (text/plain en el ejemplo). Este mismo esquema se define igualmente en la mayor\u00eda de los sistemas operativos tambi\u00e9n para los esquemas comunes de protocolos basados en URN/URI/URL. As\u00ed, si por ejemplo en un sistema operativo Windows indicamos que queremos abrir http://www.atos.net (por ejemplo, desde la l\u00ednea de comandos con la sentencia \u201cstart http://www.atos.net \u201d) se iniciar\u00e1 el navegador Web por defecto, que es la aplicaci\u00f3n asociada para tratar el protocolo http, procediendo a abrir esa p\u00e1gina Web. Este modo de abrir aplicaciones se conoce como invocaci\u00f3n por protocolo, y de forma an\u00e1loga a la invocaci\u00f3n de aplicaciones indicando abrir un fichero, donde antes se recib\u00eda la ruta completa del fichero a abrir, ahora se recibe la URL/URI/URN completa que se indic\u00f3 abrir. Invocaci\u00f3n por protocolo desde navegador Web Este mecanismo de invocaci\u00f3n por protocolo de los sistemas operativos es usualmente accesible desde los navegadores Web. Esto quiere decir que si en la barra de direcciones del navegador Web indicamos una URI, el navegador Web trasladar\u00e1 el control al sistema operativo para que este localice la aplicaci\u00f3n apropiada para tratar el protocolo asociado a la URI, y la abra pas\u00e1ndole dicha URI. Un ejemplo de este mecanismo en Apple iOS podr\u00eda ser el soporte del protocolo tel en forma de URN con el formato tel: //1-408-555-5555, donde 1-408-555-5555 es un n\u00famero de tel\u00e9fono. As\u00ed una llamada desde una p\u00e1gina Web a esta URN con una sentencia HTML como la siguiente, <a href=\"tel://1-408-555-5555\">1-408-555-5555</a>,provoca que se active el tel\u00e9fono (en un iPhone) y realice una llamada a ese n\u00famero, ya que la aplicaci\u00f3n nativa de tel\u00e9fono de iOS tiene registrado ese esquema de protocolo. En este caso tenemos una salvedad evidente, y es que el navegador Web obviar\u00e1 esta transferencia de control al sistema operativo cuando el propio navegador sepa tratar el protocolo, por ejemplo, con http , https , ftp , etc. Advertencias de apertura Como la invocaci\u00f3n por protocolo no deja de ser una transferencia de datos desde una p\u00e1gina Web (que no tiene porqu\u00e9 ser de confianza) a una aplicaci\u00f3n nativa, los navegadores Web acostumbran a advertir de este cambio al usuario: Ilustraci\u00f3n 1: Advertencia en Firefox sobre Windows 7 Ilustraci\u00f3n 2: Advertencia en Google Chrome sobre Windows 7 Ilustraci\u00f3n 3: Advertencia en Internet Explorer 9 sobre Windows 7 En general, todos los navegadores Web muestran alg\u00fan tipo de advertencia, excepto Apple Safari en Windows, OS X e iOS y WebKit (Android). En el caso de Internet Explorer se comprueba adem\u00e1s la firma electr\u00f3nica del ejecutable del programa nativo invocado. Soporte de la invocaci\u00f3n por protocolo en los distintos navegadores En general, \u00fanicamente Internet Explorer sobre Windows Phone 7.x presenta incompatibilidades con la invocaci\u00f3n por protocolo (que no funciona cuando se pide abrir un protocolo desde JavaScript, pero s\u00ed cuando se hace una redirecci\u00f3n mediante un META HTML). La invocaci\u00f3n por protocolo funciona adecuadamente en Windows Phone 8.x. Las pruebas de compatibilidad positiva se han realizado en Windows (XP, Vista, 7, 8, 8.1), Windows RT (8, 8.1), Windows Phone (8), Android (4.x), iOS (5, 6, 7), OS X (10.7, 10.8, 10.9) y Linux (varias distribuciones y versiones). La invocaci\u00f3n por protocolo como sustituto de los Applets de Java La invocaci\u00f3n por protocolo puede, en ciertos casos, plantearse como un sustituto de los Applets de Java, si bien es necesario tener en cuenta siempre: En ciertos sistemas operativos, la invocaci\u00f3n de una aplicaci\u00f3n desde el navegador Web provoca un cambio de contexto gr\u00e1fico molesto para el usuario (desde el navegador a la aplicaci\u00f3n), y adem\u00e1s al cerrarse la aplicaci\u00f3n no siempre se vuelve de forma autom\u00e1tica al navegador. Sistemas operativos con cambios de contexto: Microsoft Windows 8 en modo UI Moderno. Apple iOS Sistemas operativos sin cambio de contexto: Apple OS X Microsoft Windows Google Android Linux Sistemas operativos con un \u201ccambio parcial\u201d de contexto (la experiencia de usuario es aceptable) Microsoft Windows 8.1 No es posible tener un UI integrado en la p\u00e1gina Web, como ocurre con los Applets de Java, Adobe Flash o los controles Active X. Una vez se invoca la aplicaci\u00f3n desde el navegador, no puede existir una comunicaci\u00f3n bidireccional directa entre ambos (aplicaci\u00f3n nativa y JavaScript de la p\u00e1gina Web), como s\u00ed ocurre en los Applets de Java. La aplicaci\u00f3n nativa, no obstante, puede recibir informaci\u00f3n en la propia URL de invocaci\u00f3n, aunque hay que tener en cuenta que la longitud de esta es limitada. Comunicaci\u00f3n entre aplicaci\u00f3n nativa y aplicaci\u00f3n JavaScript en el navegador que la invoc\u00f3 Como hemos comentado, una aplicaci\u00f3n JavaScript ejecut\u00e1ndose en un navegador Web puede invocar una aplicaci\u00f3n nativa siempre que esta est\u00e9 registrada como la aplicaci\u00f3n por defecto para tratar un protocolo que no trate el propio navegador (por ejemplo, el Cliente @firma usa el protocolo afirma en una URI del estilo afirma:// ), proporcionando ciertos datos como parte de la propia URI de invocaci\u00f3n, pero\u2026 \u00bfC\u00f3mo puede la aplicaci\u00f3n nativa devolver datos a la aplicaci\u00f3n JavaScript? El modo m\u00e1s directo y sencillo es usar un servidor (accesible por ambas partes) como intermediario en ese di\u00e1logo, en una secuencia acorde al siguiente esquema: El navegador Web invoca a una App nativa mediante una URI especial, indicando una serie de informaci\u00f3n (datos a firmar, formato, opciones, etc.). La App recibe los datos y realiza la firma electr\u00f3nica usando las funciones nativas de gesti\u00f3n de claves y certificados. La App nativa deposita el resultado de la firma en un servidor intermediario mediante una llamada a un servicio Web simple. El navegador Web recoge el resultado de la operaci\u00f3n de firma del servidor intermediario y contin\u00faa la ejecuci\u00f3n de la l\u00f3gica de negocio. Como resultado tenemos una comunicaci\u00f3n cuasi-bidireccional entre navegador Web (JavaScript) y App nativa, supliendo completamente a los complementos tradicionales. Este modelo no obstante, requiere de ciertas precauciones para resultar eficaz y seguro: El servidor intermediario y la aplicaci\u00f3n Web deben estar en el mismo servidor (para evitar advertencias de cross site scripting ). Si se usa SSL cliente, este debe requerirse \u00fanicamente en el servidor que aloja la aplicaci\u00f3n Web, y no en el servidor intermediario (para evitar una solicitud de autenticaci\u00f3n a la aplicaci\u00f3n nativa), pero siempre estando ambos con HTTPS en el mismo nombre de servidor. El servidor intermediario debe implementar mecanismos para asegurarse de que los datos depositados por una aplicaci\u00f3n nativa sean recogidos \u00fanicamente por la aplicaci\u00f3n JavaScript que la invoc\u00f3: Para ello deben implementarse al menos todos estos mecanismos: Los datos deben cifrarse mediante una clave aleatoria de un solo uso generada al vuelo desde el programa JavaScript, que se pasa a la aplicaci\u00f3n nativa mediante la URI de invocaci\u00f3n. Los datos deben tener un identificador aleatorio de un solo uso generado al vuelo desde el programa JavaScript, que se pasa a la aplicaci\u00f3n nativa mediante la URI de invocaci\u00f3n. El servidor debe borrar cualquier dato que se deposite en \u00e9l y que no sea requerido en un tiempo determinado (unos pocos minutos, que es lo m\u00e1ximo que puede durar la operaci\u00f3n en la aplicaci\u00f3n nativa). No deben implementarse mecanismos derivados de la direcci\u00f3n IP, ya que las conexiones 3G pueden variar de IP en una misma sesi\u00f3n. El Cliente @firma y la invocaci\u00f3n por protocolo El Cliente @firma est\u00e1 actualmente adoptando la estrategia de la invocaci\u00f3n por protocolo como sustituci\u00f3n de los Applets de Java (por los constante problemas de seguridad y compatibilidad) mediante: Windows, Linux, OS X. Distribuci\u00f3n de la aplicaci\u00f3n \u201cFirma F\u00e1cil con @firma\u201d, una aplicaci\u00f3n Java de escritorio cuyo instalador registra como aplicaci\u00f3n por defecto para el protocolo \u201cafirma\u201d. Windows RT Aplicaci\u00f3n nativa espec\u00edfica. Se usa el protocolo \u201cafirmametro\u201d para no interferir en los casos de Windows 8 y 8.1 que puedan tener Java y \u201cFirma F\u00e1cil con @firma\u201d instalado. iOS Aplicaci\u00f3n nativa espec\u00edfica. Android Aplicaci\u00f3n nativa espec\u00edfica Se plantean para el futuro aplicaciones nativas para otros entornos que no soporten Java, como Windows Phone o BlackBerry 10.","title":"\u00bfQu\u00e9 es la invocaci\u00f3n por protocolo?"},{"location":"markdown_strict/Invocaci%C3%B3n%20por%20protocolo%20de%20aplicaciones%20nativas%20desde%20p%C3%A1ginas%20Web/#que-es-la-invocacion-por-protocolo","text":"Es un funcionamiento universal que los sistemas operativos mantengan una serie de asociaciones entre tipos de fichero y las aplicaciones que son capaces de tratarlos. As\u00ed, si en un sistema operativo Windows se indica que se abra un documento de texto, este consultar\u00e1 en el Registro de Windows cual es la aplicaci\u00f3n por defecto asociada para su tratamiento (usualmente el Bloc de Notas), y proceder\u00e1 a abrir esta aplicaci\u00f3n pasando como par\u00e1metro la ruta completa del fichero en el esquema de argumentos definido en el propio Registro de Windows como parte de la asociaci\u00f3n. Esta asociaci\u00f3n se hace de distintas formas seg\u00fan el sistema operativo, en Windows es por su extensi\u00f3n (\u201c.txt\u201d en nuestro ejemplo), pero por ejemplo en Linux es por su MIME-Type (text/plain en el ejemplo). Este mismo esquema se define igualmente en la mayor\u00eda de los sistemas operativos tambi\u00e9n para los esquemas comunes de protocolos basados en URN/URI/URL. As\u00ed, si por ejemplo en un sistema operativo Windows indicamos que queremos abrir http://www.atos.net (por ejemplo, desde la l\u00ednea de comandos con la sentencia \u201cstart http://www.atos.net \u201d) se iniciar\u00e1 el navegador Web por defecto, que es la aplicaci\u00f3n asociada para tratar el protocolo http, procediendo a abrir esa p\u00e1gina Web. Este modo de abrir aplicaciones se conoce como invocaci\u00f3n por protocolo, y de forma an\u00e1loga a la invocaci\u00f3n de aplicaciones indicando abrir un fichero, donde antes se recib\u00eda la ruta completa del fichero a abrir, ahora se recibe la URL/URI/URN completa que se indic\u00f3 abrir.","title":"\u00bfQu\u00e9 es la invocaci\u00f3n por protocolo?"},{"location":"markdown_strict/Invocaci%C3%B3n%20por%20protocolo%20de%20aplicaciones%20nativas%20desde%20p%C3%A1ginas%20Web/#invocacion-por-protocolo-desde-navegador-web","text":"Este mecanismo de invocaci\u00f3n por protocolo de los sistemas operativos es usualmente accesible desde los navegadores Web. Esto quiere decir que si en la barra de direcciones del navegador Web indicamos una URI, el navegador Web trasladar\u00e1 el control al sistema operativo para que este localice la aplicaci\u00f3n apropiada para tratar el protocolo asociado a la URI, y la abra pas\u00e1ndole dicha URI. Un ejemplo de este mecanismo en Apple iOS podr\u00eda ser el soporte del protocolo tel en forma de URN con el formato tel: //1-408-555-5555, donde 1-408-555-5555 es un n\u00famero de tel\u00e9fono. As\u00ed una llamada desde una p\u00e1gina Web a esta URN con una sentencia HTML como la siguiente, <a href=\"tel://1-408-555-5555\">1-408-555-5555</a>,provoca que se active el tel\u00e9fono (en un iPhone) y realice una llamada a ese n\u00famero, ya que la aplicaci\u00f3n nativa de tel\u00e9fono de iOS tiene registrado ese esquema de protocolo. En este caso tenemos una salvedad evidente, y es que el navegador Web obviar\u00e1 esta transferencia de control al sistema operativo cuando el propio navegador sepa tratar el protocolo, por ejemplo, con http , https , ftp , etc.","title":"Invocaci\u00f3n por protocolo desde navegador Web"},{"location":"markdown_strict/Invocaci%C3%B3n%20por%20protocolo%20de%20aplicaciones%20nativas%20desde%20p%C3%A1ginas%20Web/#advertencias-de-apertura","text":"Como la invocaci\u00f3n por protocolo no deja de ser una transferencia de datos desde una p\u00e1gina Web (que no tiene porqu\u00e9 ser de confianza) a una aplicaci\u00f3n nativa, los navegadores Web acostumbran a advertir de este cambio al usuario: Ilustraci\u00f3n 1: Advertencia en Firefox sobre Windows 7 Ilustraci\u00f3n 2: Advertencia en Google Chrome sobre Windows 7 Ilustraci\u00f3n 3: Advertencia en Internet Explorer 9 sobre Windows 7 En general, todos los navegadores Web muestran alg\u00fan tipo de advertencia, excepto Apple Safari en Windows, OS X e iOS y WebKit (Android). En el caso de Internet Explorer se comprueba adem\u00e1s la firma electr\u00f3nica del ejecutable del programa nativo invocado.","title":"Advertencias de apertura"},{"location":"markdown_strict/Invocaci%C3%B3n%20por%20protocolo%20de%20aplicaciones%20nativas%20desde%20p%C3%A1ginas%20Web/#soporte-de-la-invocacion-por-protocolo-en-los-distintos-navegadores","text":"En general, \u00fanicamente Internet Explorer sobre Windows Phone 7.x presenta incompatibilidades con la invocaci\u00f3n por protocolo (que no funciona cuando se pide abrir un protocolo desde JavaScript, pero s\u00ed cuando se hace una redirecci\u00f3n mediante un META HTML). La invocaci\u00f3n por protocolo funciona adecuadamente en Windows Phone 8.x. Las pruebas de compatibilidad positiva se han realizado en Windows (XP, Vista, 7, 8, 8.1), Windows RT (8, 8.1), Windows Phone (8), Android (4.x), iOS (5, 6, 7), OS X (10.7, 10.8, 10.9) y Linux (varias distribuciones y versiones).","title":"Soporte de la invocaci\u00f3n por protocolo en los distintos navegadores"},{"location":"markdown_strict/Invocaci%C3%B3n%20por%20protocolo%20de%20aplicaciones%20nativas%20desde%20p%C3%A1ginas%20Web/#la-invocacion-por-protocolo-como-sustituto-de-los-applets-de-java","text":"La invocaci\u00f3n por protocolo puede, en ciertos casos, plantearse como un sustituto de los Applets de Java, si bien es necesario tener en cuenta siempre: En ciertos sistemas operativos, la invocaci\u00f3n de una aplicaci\u00f3n desde el navegador Web provoca un cambio de contexto gr\u00e1fico molesto para el usuario (desde el navegador a la aplicaci\u00f3n), y adem\u00e1s al cerrarse la aplicaci\u00f3n no siempre se vuelve de forma autom\u00e1tica al navegador. Sistemas operativos con cambios de contexto: Microsoft Windows 8 en modo UI Moderno. Apple iOS Sistemas operativos sin cambio de contexto: Apple OS X Microsoft Windows Google Android Linux Sistemas operativos con un \u201ccambio parcial\u201d de contexto (la experiencia de usuario es aceptable) Microsoft Windows 8.1 No es posible tener un UI integrado en la p\u00e1gina Web, como ocurre con los Applets de Java, Adobe Flash o los controles Active X. Una vez se invoca la aplicaci\u00f3n desde el navegador, no puede existir una comunicaci\u00f3n bidireccional directa entre ambos (aplicaci\u00f3n nativa y JavaScript de la p\u00e1gina Web), como s\u00ed ocurre en los Applets de Java. La aplicaci\u00f3n nativa, no obstante, puede recibir informaci\u00f3n en la propia URL de invocaci\u00f3n, aunque hay que tener en cuenta que la longitud de esta es limitada.","title":"La invocaci\u00f3n por protocolo como sustituto de los Applets de Java"},{"location":"markdown_strict/Invocaci%C3%B3n%20por%20protocolo%20de%20aplicaciones%20nativas%20desde%20p%C3%A1ginas%20Web/#comunicacion-entre-aplicacion-nativa-y-aplicacion-javascript-en-el-navegador-que-la-invoco","text":"Como hemos comentado, una aplicaci\u00f3n JavaScript ejecut\u00e1ndose en un navegador Web puede invocar una aplicaci\u00f3n nativa siempre que esta est\u00e9 registrada como la aplicaci\u00f3n por defecto para tratar un protocolo que no trate el propio navegador (por ejemplo, el Cliente @firma usa el protocolo afirma en una URI del estilo afirma:// ), proporcionando ciertos datos como parte de la propia URI de invocaci\u00f3n, pero\u2026 \u00bfC\u00f3mo puede la aplicaci\u00f3n nativa devolver datos a la aplicaci\u00f3n JavaScript? El modo m\u00e1s directo y sencillo es usar un servidor (accesible por ambas partes) como intermediario en ese di\u00e1logo, en una secuencia acorde al siguiente esquema: El navegador Web invoca a una App nativa mediante una URI especial, indicando una serie de informaci\u00f3n (datos a firmar, formato, opciones, etc.). La App recibe los datos y realiza la firma electr\u00f3nica usando las funciones nativas de gesti\u00f3n de claves y certificados. La App nativa deposita el resultado de la firma en un servidor intermediario mediante una llamada a un servicio Web simple. El navegador Web recoge el resultado de la operaci\u00f3n de firma del servidor intermediario y contin\u00faa la ejecuci\u00f3n de la l\u00f3gica de negocio. Como resultado tenemos una comunicaci\u00f3n cuasi-bidireccional entre navegador Web (JavaScript) y App nativa, supliendo completamente a los complementos tradicionales. Este modelo no obstante, requiere de ciertas precauciones para resultar eficaz y seguro: El servidor intermediario y la aplicaci\u00f3n Web deben estar en el mismo servidor (para evitar advertencias de cross site scripting ). Si se usa SSL cliente, este debe requerirse \u00fanicamente en el servidor que aloja la aplicaci\u00f3n Web, y no en el servidor intermediario (para evitar una solicitud de autenticaci\u00f3n a la aplicaci\u00f3n nativa), pero siempre estando ambos con HTTPS en el mismo nombre de servidor. El servidor intermediario debe implementar mecanismos para asegurarse de que los datos depositados por una aplicaci\u00f3n nativa sean recogidos \u00fanicamente por la aplicaci\u00f3n JavaScript que la invoc\u00f3: Para ello deben implementarse al menos todos estos mecanismos: Los datos deben cifrarse mediante una clave aleatoria de un solo uso generada al vuelo desde el programa JavaScript, que se pasa a la aplicaci\u00f3n nativa mediante la URI de invocaci\u00f3n. Los datos deben tener un identificador aleatorio de un solo uso generado al vuelo desde el programa JavaScript, que se pasa a la aplicaci\u00f3n nativa mediante la URI de invocaci\u00f3n. El servidor debe borrar cualquier dato que se deposite en \u00e9l y que no sea requerido en un tiempo determinado (unos pocos minutos, que es lo m\u00e1ximo que puede durar la operaci\u00f3n en la aplicaci\u00f3n nativa). No deben implementarse mecanismos derivados de la direcci\u00f3n IP, ya que las conexiones 3G pueden variar de IP en una misma sesi\u00f3n.","title":"Comunicaci\u00f3n entre aplicaci\u00f3n nativa y aplicaci\u00f3n JavaScript en el navegador que la invoc\u00f3"},{"location":"markdown_strict/Invocaci%C3%B3n%20por%20protocolo%20de%20aplicaciones%20nativas%20desde%20p%C3%A1ginas%20Web/#el-cliente-firma-y-la-invocacion-por-protocolo","text":"El Cliente @firma est\u00e1 actualmente adoptando la estrategia de la invocaci\u00f3n por protocolo como sustituci\u00f3n de los Applets de Java (por los constante problemas de seguridad y compatibilidad) mediante: Windows, Linux, OS X. Distribuci\u00f3n de la aplicaci\u00f3n \u201cFirma F\u00e1cil con @firma\u201d, una aplicaci\u00f3n Java de escritorio cuyo instalador registra como aplicaci\u00f3n por defecto para el protocolo \u201cafirma\u201d. Windows RT Aplicaci\u00f3n nativa espec\u00edfica. Se usa el protocolo \u201cafirmametro\u201d para no interferir en los casos de Windows 8 y 8.1 que puedan tener Java y \u201cFirma F\u00e1cil con @firma\u201d instalado. iOS Aplicaci\u00f3n nativa espec\u00edfica. Android Aplicaci\u00f3n nativa espec\u00edfica Se plantean para el futuro aplicaciones nativas para otros entornos que no soporten Java, como Windows Phone o BlackBerry 10.","title":"El Cliente @firma y la invocaci\u00f3n por protocolo"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/","text":"Tabla de contenido Introducci\u00f3n [3](#introducci\u00f3n) Aplicaci\u00f3n AutoFirma [3](#aplicaci\u00f3n-autofirma) El siguiente diagrama ilustra un flujo de operaci\u00f3n de firma b\u00e1sico: [3](#_Toc433741886) Invocaci\u00f3n por protocolo [3](#invocaci\u00f3n-por-protocolo) \u00bfQu\u00e9 es la invocaci\u00f3n por protocolo? [3](#qu\u00e9-es-la-invocaci\u00f3n-por-protocolo) Invocaci\u00f3n por protocolo desde navegador Web [4](#invocaci\u00f3n-por-protocolo-desde-navegador-web) Comunicaci\u00f3n entre aplicaci\u00f3n nativa y aplicaci\u00f3n JavaScript en el navegador que inici\u00f3 la invocaci\u00f3n por protocolo [6](#comunicaci\u00f3n-entre-aplicaci\u00f3n-nativa-y-aplicaci\u00f3n-javascript-en-el-navegador-que-inici\u00f3-la-invocaci\u00f3n-por-protocolo) Funcionamiento del di\u00e1logo entre aplicaci\u00f3n AutoFirma y aplicaci\u00f3n JavaScript en navegador Web [6](#funcionamiento-del-di\u00e1logo-entre-aplicaci\u00f3n-autofirma-y-aplicaci\u00f3n-javascript-en-navegador-web) Aplicaci\u00f3n AutoFirma con interfaz gr\u00e1fico para firmas locales [7](#aplicaci\u00f3n-autofirma-con-interfaz-gr\u00e1fico-para-firmas-locales) Seguridad de la aplicaci\u00f3n AutoFirma [7](#seguridad-de-la-aplicaci\u00f3n-autofirma) Seguridad en el propio instalador [7](#seguridad-en-el-propio-instalador) Microsoft Windows [7](#microsoft-windows) Apple OS X [7](#apple-os-x) Linux [7](#linux) Cambios realizados en el sistema durante el proceso de instalaci\u00f3n [7](#cambios-realizados-en-el-sistema-durante-el-proceso-de-instalaci\u00f3n) Registro del protocolo \u201cafirma\u201d [7](#registro-del-protocolo-afirma) Instalaci\u00f3n de un certificado SSL auto firmado como de confianza para el sistema [8](#instalaci\u00f3n-de-un-certificado-ssl-auto-firmado-como-de-confianza-para-el-sistema) Otros cambios [8](#otros-cambios) Seguridad en el propio binario ejecutable de AutoFirma [9](#seguridad-en-el-propio-binario-ejecutable-de-autofirma) Seguridad en el propio proceso de firma [9](#seguridad-en-el-propio-proceso-de-firma) Introducci\u00f3n Aplicaci\u00f3n AutoFirma La aplicaci\u00f3n AutoFirma es un programa que permite la realizaci\u00f3n de firmas electr\u00f3nicas integradas en flujos de trabajo Web accesibles por parte de los usuarios firmantes mediante un simple navegador Web. Las firmas electr\u00f3nicas se realizan siempre en el equipo local del firmante, accediendo de forma segura a las claves privadas y certificados de firma almacenados en sus repositorios locales (del navegador, del sistema operativo, en tarjetas inteligentes, etc.). Al contrario que las aplicaciones comunes de firma electr\u00f3nica Web, AutoFirma no necesita que el navegador Web soporte Applets de Java, si bien es necesario que esta aplicaci\u00f3n est\u00e9 instalada en el ordenador local del usuario firmante antes de iniciar el tr\u00e1mite de firma electr\u00f3nica. Para suplir la necesidad de soporte de Applets de Java, la aplicaci\u00f3n AutoFirma y la l\u00f3gica JavaScript del flujo Web del tr\u00e1mite de firma electr\u00f3nica integran un JavaScript distribuido junto AutoFirma (miniapplet.js). Mediante este JavaScript se ejecutan las distintas operaciones de firma, para lo cual se arrancar\u00e1 la aplicaci\u00f3n usando un mecanismo denominado Invocaci\u00f3n por Protocolo. Una vez arrancada la aplicaci\u00f3n se iniciar\u00e1 un di\u00e1logo bidireccional a trav\u00e9s de un socket entre el JavaScript de despliegue y AutoFirma. Por medio de este socket se trasladar\u00e1n a AutoFirma la orden de firma correspondiente y los datos sobre los que operar. <img src=\"La_seguridad_en_el_Servicio_de_firma_del_Cliente/media/image1.png\" style=\"width:0.81092in;height:0.81057in\" /> El siguiente diagrama ilustra un flujo de operaci\u00f3n de firma b\u00e1sico: Invocaci\u00f3n por protocolo \u00bfQu\u00e9 es la invocaci\u00f3n por protocolo? Es un funcionamiento universal que los sistemas operativos mantengan una serie de asociaciones entre tipos de fichero y las aplicaciones que son capaces de tratarlos. As\u00ed, si en un sistema operativo Windows se indica que se abra un documento de texto, este consultar\u00e1 en el Registro de Windows cual es la aplicaci\u00f3n por defecto asociada para su tratamiento (usualmente el Bloc de Notas), y proceder\u00e1 a abrir esta aplicaci\u00f3n pasando como par\u00e1metro la ruta completa del fichero en el esquema de argumentos definido en el propio Registro de Windows como parte de la asociaci\u00f3n. Esta asociaci\u00f3n se hace de distintas formas seg\u00fan el sistema operativo, en Windows es por su extensi\u00f3n (\u201c.txt\u201d en nuestro ejemplo), pero por ejemplo en Linux es por su MIME-Type (text/plain en el ejemplo). Este mismo esquema se define igualmente en la mayor\u00eda de los sistemas operativos tambi\u00e9n para los esquemas comunes de protocolos basados en URN/URI/URL. As\u00ed, si por ejemplo en un sistema operativo Windows indicamos que queremos abrir http://www.google.com (por ejemplo, desde la l\u00ednea de comandos con la sentencia \u201cstart http://www.google.com\u201d) se iniciar\u00e1 el navegador Web por defecto, que es la aplicaci\u00f3n asociada para tratar el protocolo http, procediendo a abrir esa p\u00e1gina Web. Este modo de abrir aplicaciones se conoce como invocaci\u00f3n por protocolo, y de forma an\u00e1loga a la invocaci\u00f3n de aplicaciones indicando abrir un fichero, donde antes se recib\u00eda la ruta completa del fichero a abrir, ahora se recibe la URL/URI/URN completa que se indic\u00f3 abrir. La invocaci\u00f3n por protocolo permite enviar par\u00e1metros a la aplicaci\u00f3n de destino como parte de la URL de invocaci\u00f3n. Sin embargo, no es posible transmitir datos desde la aplicaci\u00f3n invocada a la aplicaci\u00f3n que la llam\u00f3, por lo que no puede devolverse ning\u00fan resultado. Invocaci\u00f3n por protocolo desde navegador Web Este mecanismo de invocaci\u00f3n por protocolo de los sistemas operativos es usualmente accesible desde los navegadores Web. Esto quiere decir que si en la barra de direcciones del navegador Web indicamos una URI, el navegador Web trasladar\u00e1 el control al sistema operativo para que este localice la aplicaci\u00f3n apropiada para tratar el protocolo asociado a la URI, y la abra pas\u00e1ndole dicha URI. Un ejemplo de este mecanismo en Apple iOS podr\u00eda ser el soporte del protocolo tel en forma de URN con el formato tel://1-408-555-5555, donde 1-408-555-5555 es un n\u00famero de tel\u00e9fono. As\u00ed una llamada desde una p\u00e1gina Web a esta URN con una sentencia HTML como la siguiente, <a href=\"tel://1-408-555-5555\">1-408-555-5555</a>,provoca que se active el tel\u00e9fono (en un iPhone) y realice una llamada a ese n\u00famero, ya que la aplicaci\u00f3n nativa de tel\u00e9fono de iOS tiene registrado ese esquema de protocolo. En este caso tenemos una salvedad evidente, y es que el navegador Web obviar\u00e1 esta transferencia de control al sistema operativo cuando el propio navegador sepa tratar el protocolo, por ejemplo, con http, https, ftp, etc. Advertencias de apertura Como la invocaci\u00f3n por protocolo no deja de ser una transferencia de datos desde una p\u00e1gina Web (que no tiene porqu\u00e9 ser de confianza) a una aplicaci\u00f3n nativa, los navegadores Web acostumbran a advertir de este cambio al usuario con un di\u00e1logo gr\u00e1fico: Ilustraci\u00f3n 1: Advertencia en Firefox sobre Windows 7 Ilustraci\u00f3n 2: Advertencia en Google Chrome sobre Windows 7 Ilustraci\u00f3n 3: Advertencia en Internet Explorer 9 sobre Windows 7 En general, todos los navegadores Web muestran alg\u00fan tipo de advertencia, excepto Apple Safari en Windows y OS X. En el caso de Internet Explorer se comprueba adem\u00e1s la firma electr\u00f3nica del ejecutable del programa nativo invocado. Soporte de la invocaci\u00f3n por protocolo en distintos navegadores Web Las pruebas de compatibilidad positiva se han realizado en los siguientes entornos de escritorio compatibles con AutoFirma: Windows (XP, Vista, 7, 8, 8.1) OS X (10.7, 10.8, 10.9) Linux (varias distribuciones y versiones). Comunicaci\u00f3n entre aplicaci\u00f3n nativa y aplicaci\u00f3n JavaScript en el navegador que inici\u00f3 la invocaci\u00f3n por protocolo Como hemos comentado, una aplicaci\u00f3n JavaScript ejecut\u00e1ndose en un navegador Web puede invocar una aplicaci\u00f3n nativa siempre que esta est\u00e9 registrada como la aplicaci\u00f3n por defecto para tratar un protocolo que no trate el propio navegador (por ejemplo, el Cliente @firma usa el protocolo afirma en una URI del estilo afirma://), proporcionando ciertos datos como parte de la propia URI de invocaci\u00f3n, pero no hay mecanismos predefinidos para, tras esta invocaci\u00f3n, establecer un di\u00e1logo bidireccional. Funcionamiento del di\u00e1logo entre aplicaci\u00f3n AutoFirma y aplicaci\u00f3n JavaScript en navegador Web Dado que, como se ha comentado anteriormente, no hay un mecanismo predefinido para la comunicaci\u00f3n entre una aplicaci\u00f3n nativa ajena al navegador Web y este \u00faltimo, en AutoFirma se ha implementado un procedimiento de comunicaci\u00f3n mediante HTTPS, donde la aplicaci\u00f3n AutoFirma act\u00faa como servidor (mediante un ServerSocket SSL de Java) y la aplicaci\u00f3n JavaScript realiza llamadas HTTPS normales, dirigidas siempre hacia la direcci\u00f3n 127.0.0.1, que siempre corresponde a la m\u00e1quina local del firmante. El puerto del socket a trav\u00e9s del cual se realiza la comunicaci\u00f3n se genera aleatoriamente en el JavaScript de integraci\u00f3n y se env\u00eda a AutoFirma mediante una invocaci\u00f3n por protocolo. A partir de este momento se inicia un di\u00e1logo bidireccional a trav\u00e9s del socket SSL. Aplicaci\u00f3n AutoFirma con interfaz gr\u00e1fico para firmas locales La aplicaci\u00f3n AutoFirma permite su ejecuci\u00f3n directa en local por parte del usuario para la generaci\u00f3n de firmas electr\u00f3nicas sin necesidad de su integraci\u00f3n en un flujo Web. Sin embargo, este modo de ejecuci\u00f3n est\u00e1 fuera del alcance de este documento. Seguridad de la aplicaci\u00f3n AutoFirma Seguridad en el propio instalador Microsoft Windows El instalador (.exe) va firmado electr\u00f3nicamente, y MS-Windows es capaz de comprobar la validez de la firma. Apple OS X El instalador (.pkg) va firmado electr\u00f3nicamente seg\u00fan los requisitos de Apple para la generaci\u00f3n de instaladores firmados. Linux No hay firma electr\u00f3nica, al no soportarse esta en los instaladores DEB de Debian. Cambios realizados en el sistema durante el proceso de instalaci\u00f3n Registro del protocolo \u201cafirma\u201d Una de las tareas realizadas por el instalador es el registro del protocolo \u201cafirma\u201d asociado a la aplicaci\u00f3n AutoFirma, de modo que una invocaci\u00f3n al sistema operativo para la apertura de una URL del tipo \u201cafirma://\u201d conllevar\u00e1 el arranque de la aplicaci\u00f3n AutoFirma, recibiendo esta la URL completa con la que fue instanciada. Este registro se realiza de distinta manera seg\u00fan el sistema operativo: Microsoft Windows El registro del protocolo se realiza mediante el propio programa de instalaci\u00f3n (NSIS, Nullsoft Scriptable Install System), que ejecut\u00e1ndose con privilegios de administrador, a\u00f1ade los siguientes valores en el registro de Windows (sintaxis seg\u00fan NSIS, donde $INSTDIR es el directorio de instalaci\u00f3n de AutoFirma): ;Protocolo afirma WriteRegStr HKEY_CLASSES_ROOT \"afirma\" \"\" \"URL:Afirma Protocol\" WriteRegStr HKEY_CLASSES_ROOT \"afirma\\DefaultIcon\" \"\" \"$INSTDIR\\AutoFirma\\ic_firmar.ico\" WriteRegStr HKEY_CLASSES_ROOT \"afirma\" \"URL Protocol\" \"\" WriteRegStr HKEY_CLASSES_ROOT \"afirma\\shell\\open\\command\" \"\" \"$INSTDIR\\AutoFirma\\AutoFirma.exe %1\" Estos valores son eliminados durante la desinstalaci\u00f3n, igualmente por el desinstalador de NSIS ejecut\u00e1ndose con permisos de administrador. Apple OS X En Apple OS X el registro de protocolo se realiza en el info.plist de la aplicaci\u00f3n, con las siguientes l\u00edneas: <array> <dict> <key>CFBundleURLSchemes</key> <array> <string>afirma</string> </array> <key>CFBundleURLName</key> <string>Protocolo de invocaci\u00f3n del Cliente @firma</string> </dict> </array> Dado que en Apple OS X el info.plist es interno a cada aplicaci\u00f3n, se elimina con esta (deshaci\u00e9ndose el registro de protocolo). El proceso no necesita permisos de administrador. Linux En Linux se realiza una asociaci\u00f3n del protocolo mediante una doble declaraci\u00f3n en el paquete DEB de instalaci\u00f3n: Declaraci\u00f3n del x-scheme-handler en el desktop de Gnome [Desktop Entry] Encoding=UTF-8 Name=AutoFirma Cliente @firma Comment=Cliente @firma Exec=java -jar /usr/lib/autofirma/autofirma.jar Icon=/usr/share/autofirma/autofirma.svg MimeType=x-scheme-handler/afirma; Terminal=false Type=Application Categories=GNOME;Application;Office StartupNotify=true StartupWMClass=autofirma Declaraci\u00f3n como preferencia de Mozilla Firefox en /etc/Firefox/pref pref(\"network.protocol-handler.app.afirma\",\"/usr/bin/simpleafirma\"); pref(\"network.protocol-handler.warn-external.afirma\",false); pref(\"network.protocol-handler.external.afirma\",true); Instalaci\u00f3n de un certificado SSL auto firmado como de confianza para el sistema El instalador, durante el proceso de instalaci\u00f3n, genera un certificado para comunicaciones SSL asociado al host \u201c127.0.0.1\u201d (la direcci\u00f3n local). Este certificado tiene las siguientes caracter\u00edsticas: Se genera al vuelo durante el proceso de instalaci\u00f3n. El c\u00e1lculo de claves usa el generador de n\u00fameros aleatorios por defecto de Java 8. El tama\u00f1o de la clave es de 2048 bits. Este certificado, una vez generado: Se instala en el sistema como de confianza para servidores SSL. En Mozilla Firefox usando la herramienta \u201cCertUtil\u201d de Mozilla. En MS-Windows usando las funciones de Java 8 de acceso a CAPI. En OS X usando las funciones de Java 8 de acceso al llavero de OS X. Se guarda como PKCS#12 en el directorio de activos del programa AutoFirma ($HOME/.afirma, donde $HOME es el directorio del usuario) con una contrase\u00f1a prefijada (en el propio c\u00f3digo del aplicativo). Otros cambios El programa de instalaci\u00f3n puede crear iconos en el men\u00fa inicio o el escritorio del usuario, as\u00ed como dar de alta el desinstalador (por ejemplo, en el caso de Windows, para poder desinstalar la aplicaci\u00f3n desde la secci\u00f3n \u201cProgramas y Caracter\u00edsticas\u201d del Panel de Control), pero ning\u00fan cambio que modifique o afecte a la seguridad del equipo del usuario firmante. Seguridad en el propio binario ejecutable de AutoFirma Los binarios de AutoFirma est\u00e1n firmados digitalmente en el caso de Microsoft Windows. Internet Explorer sobre Microsoft Windows es el \u00fanico navegador Web que comprueba las firmas electr\u00f3nicas de los programas que se han arrancado mediante una invocaci\u00f3n por protocolo, y es la raz\u00f3n por la que es el binario de Microsoft Windows el \u00fanico firmado. No se firman ni los binarios de OS X o Linux ni los JAR de Java internos a la aplicaci\u00f3n AutoFirma debido a que esta firma nunca se advierte de su comprobaci\u00f3n al usuario por protocolo (por lo que carece de utilidad), pero si puede ocasionar retardos considerables en la carga de la aplicaci\u00f3n, puesto que internamente el sistema operativo si calcula las huellas digitales e incluso consulta a los sistemas OCSP. Seguridad en el propio proceso de firma El proceso de firma implementa distintas medidas de seguridad, que van impl\u00edcitas en la secuencia de uso: El navegador Web invoca por protocolo (afirma://\u2026) a la aplicaci\u00f3n AutoFirma. La invocaci\u00f3n por protocolo no puede ser interceptada por un programa esp\u00eda de conexiones de red, ya que no se realiza mediante TCP/IP ni UDP. En la URL de invocaci\u00f3n se indica (entre otras cosas): Una lista acotada de puertos aleatorios TCP de conexi\u00f3n, generados dentro del rango de puertos para uso din\u00e1mico (desde el 49152 al 65535). De esta forma, el servicio se inicia cada vez en un puerto distinto y aleatorio, dificultando ataques previamente planificados a puertos concretos. Un identificador de sesi\u00f3n aleatorio generado localmente al vuelo desde JavaScript. El identificador se generar\u00e1 usando las funciones de aleatorios de la \u201c Web Cryptography API \u201d si el motor JavaScript lo implementa o un algoritmo basado en la generaci\u00f3n de aleatorios corriente y marcas de tiempo en caso de no hacerlo. El programa AutoFirma se inicia y abre un servicio servidor de tipo socket TCP SSL en uno de los puertos posibles de la lista recibida, respondiendo a un subconjunto del protocolo HTTPS. El servicio no es concurrente, una vez una instancia de AutoFirma acepta una conexi\u00f3n entrante en su puerto, ignora cualquier otra petici\u00f3n de conexi\u00f3n. El programa AutoFirma acepta la conexi\u00f3n SSL desde el JavaScript que ejecuta localmente el navegador Web. Solo se aceptan conexiones que provengan desde el mismo equipo local (localhost / 127.0.0.1). Cualquier conexi\u00f3n externa es rechazada. Solo se aceptan conexiones que indiquen como par\u00e1metro en el di\u00e1logo el ID de sesi\u00f3n, que al haber sido generado al vuelo localmente y de forma aleatoria por el JavaScript nadie m\u00e1s puede conocer. El programa realiza la firma electr\u00f3nica, para lo cual siempre habr\u00e1 alg\u00fan tipo de confirmaci\u00f3n visual de cara al usuario firmante (usualmente, el mismo di\u00e1logo de selecci\u00f3n de certificados). Una vez termina el proceso (o pasa cierto tiempo sin intercambiarse mensajes), el programa se cierra, cerr\u00e1ndose a la vez el servicio SSL. El hecho de tener el servicio abierto \u00fanicamente el tiempo necesario reduce la ventana de tiempo en la que este puede recibir ataques. Si se volvi\u00e9ndose a requerir la aplicaci\u00f3n, se invocar\u00e1 nuevamente por protocolo proporcion\u00e1ndole nuevos puertos de conexi\u00f3n para el socket y un nuevo ID de sesi\u00f3n.","title":"Tabla de contenido"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#tabla-de-contenido","text":"Introducci\u00f3n [3](#introducci\u00f3n) Aplicaci\u00f3n AutoFirma [3](#aplicaci\u00f3n-autofirma) El siguiente diagrama ilustra un flujo de operaci\u00f3n de firma b\u00e1sico: [3](#_Toc433741886) Invocaci\u00f3n por protocolo [3](#invocaci\u00f3n-por-protocolo) \u00bfQu\u00e9 es la invocaci\u00f3n por protocolo? [3](#qu\u00e9-es-la-invocaci\u00f3n-por-protocolo) Invocaci\u00f3n por protocolo desde navegador Web [4](#invocaci\u00f3n-por-protocolo-desde-navegador-web) Comunicaci\u00f3n entre aplicaci\u00f3n nativa y aplicaci\u00f3n JavaScript en el navegador que inici\u00f3 la invocaci\u00f3n por protocolo [6](#comunicaci\u00f3n-entre-aplicaci\u00f3n-nativa-y-aplicaci\u00f3n-javascript-en-el-navegador-que-inici\u00f3-la-invocaci\u00f3n-por-protocolo) Funcionamiento del di\u00e1logo entre aplicaci\u00f3n AutoFirma y aplicaci\u00f3n JavaScript en navegador Web [6](#funcionamiento-del-di\u00e1logo-entre-aplicaci\u00f3n-autofirma-y-aplicaci\u00f3n-javascript-en-navegador-web) Aplicaci\u00f3n AutoFirma con interfaz gr\u00e1fico para firmas locales [7](#aplicaci\u00f3n-autofirma-con-interfaz-gr\u00e1fico-para-firmas-locales) Seguridad de la aplicaci\u00f3n AutoFirma [7](#seguridad-de-la-aplicaci\u00f3n-autofirma) Seguridad en el propio instalador [7](#seguridad-en-el-propio-instalador) Microsoft Windows [7](#microsoft-windows) Apple OS X [7](#apple-os-x) Linux [7](#linux) Cambios realizados en el sistema durante el proceso de instalaci\u00f3n [7](#cambios-realizados-en-el-sistema-durante-el-proceso-de-instalaci\u00f3n) Registro del protocolo \u201cafirma\u201d [7](#registro-del-protocolo-afirma) Instalaci\u00f3n de un certificado SSL auto firmado como de confianza para el sistema [8](#instalaci\u00f3n-de-un-certificado-ssl-auto-firmado-como-de-confianza-para-el-sistema) Otros cambios [8](#otros-cambios) Seguridad en el propio binario ejecutable de AutoFirma [9](#seguridad-en-el-propio-binario-ejecutable-de-autofirma) Seguridad en el propio proceso de firma [9](#seguridad-en-el-propio-proceso-de-firma)","title":"Tabla de contenido"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#aplicacion-autofirma","text":"La aplicaci\u00f3n AutoFirma es un programa que permite la realizaci\u00f3n de firmas electr\u00f3nicas integradas en flujos de trabajo Web accesibles por parte de los usuarios firmantes mediante un simple navegador Web. Las firmas electr\u00f3nicas se realizan siempre en el equipo local del firmante, accediendo de forma segura a las claves privadas y certificados de firma almacenados en sus repositorios locales (del navegador, del sistema operativo, en tarjetas inteligentes, etc.). Al contrario que las aplicaciones comunes de firma electr\u00f3nica Web, AutoFirma no necesita que el navegador Web soporte Applets de Java, si bien es necesario que esta aplicaci\u00f3n est\u00e9 instalada en el ordenador local del usuario firmante antes de iniciar el tr\u00e1mite de firma electr\u00f3nica. Para suplir la necesidad de soporte de Applets de Java, la aplicaci\u00f3n AutoFirma y la l\u00f3gica JavaScript del flujo Web del tr\u00e1mite de firma electr\u00f3nica integran un JavaScript distribuido junto AutoFirma (miniapplet.js). Mediante este JavaScript se ejecutan las distintas operaciones de firma, para lo cual se arrancar\u00e1 la aplicaci\u00f3n usando un mecanismo denominado Invocaci\u00f3n por Protocolo. Una vez arrancada la aplicaci\u00f3n se iniciar\u00e1 un di\u00e1logo bidireccional a trav\u00e9s de un socket entre el JavaScript de despliegue y AutoFirma. Por medio de este socket se trasladar\u00e1n a AutoFirma la orden de firma correspondiente y los datos sobre los que operar.","title":"Aplicaci\u00f3n AutoFirma"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#img","text":"src=\"La_seguridad_en_el_Servicio_de_firma_del_Cliente/media/image1.png\" style=\"width:0.81092in;height:0.81057in\" /> El siguiente diagrama ilustra un flujo de operaci\u00f3n de firma b\u00e1sico:","title":"&lt;img"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#invocacion-por-protocolo","text":"","title":"Invocaci\u00f3n por protocolo"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#que-es-la-invocacion-por-protocolo","text":"Es un funcionamiento universal que los sistemas operativos mantengan una serie de asociaciones entre tipos de fichero y las aplicaciones que son capaces de tratarlos. As\u00ed, si en un sistema operativo Windows se indica que se abra un documento de texto, este consultar\u00e1 en el Registro de Windows cual es la aplicaci\u00f3n por defecto asociada para su tratamiento (usualmente el Bloc de Notas), y proceder\u00e1 a abrir esta aplicaci\u00f3n pasando como par\u00e1metro la ruta completa del fichero en el esquema de argumentos definido en el propio Registro de Windows como parte de la asociaci\u00f3n. Esta asociaci\u00f3n se hace de distintas formas seg\u00fan el sistema operativo, en Windows es por su extensi\u00f3n (\u201c.txt\u201d en nuestro ejemplo), pero por ejemplo en Linux es por su MIME-Type (text/plain en el ejemplo). Este mismo esquema se define igualmente en la mayor\u00eda de los sistemas operativos tambi\u00e9n para los esquemas comunes de protocolos basados en URN/URI/URL. As\u00ed, si por ejemplo en un sistema operativo Windows indicamos que queremos abrir http://www.google.com (por ejemplo, desde la l\u00ednea de comandos con la sentencia \u201cstart http://www.google.com\u201d) se iniciar\u00e1 el navegador Web por defecto, que es la aplicaci\u00f3n asociada para tratar el protocolo http, procediendo a abrir esa p\u00e1gina Web. Este modo de abrir aplicaciones se conoce como invocaci\u00f3n por protocolo, y de forma an\u00e1loga a la invocaci\u00f3n de aplicaciones indicando abrir un fichero, donde antes se recib\u00eda la ruta completa del fichero a abrir, ahora se recibe la URL/URI/URN completa que se indic\u00f3 abrir. La invocaci\u00f3n por protocolo permite enviar par\u00e1metros a la aplicaci\u00f3n de destino como parte de la URL de invocaci\u00f3n. Sin embargo, no es posible transmitir datos desde la aplicaci\u00f3n invocada a la aplicaci\u00f3n que la llam\u00f3, por lo que no puede devolverse ning\u00fan resultado.","title":"\u00bfQu\u00e9 es la invocaci\u00f3n por protocolo?"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#invocacion-por-protocolo-desde-navegador-web","text":"Este mecanismo de invocaci\u00f3n por protocolo de los sistemas operativos es usualmente accesible desde los navegadores Web. Esto quiere decir que si en la barra de direcciones del navegador Web indicamos una URI, el navegador Web trasladar\u00e1 el control al sistema operativo para que este localice la aplicaci\u00f3n apropiada para tratar el protocolo asociado a la URI, y la abra pas\u00e1ndole dicha URI. Un ejemplo de este mecanismo en Apple iOS podr\u00eda ser el soporte del protocolo tel en forma de URN con el formato tel://1-408-555-5555, donde 1-408-555-5555 es un n\u00famero de tel\u00e9fono. As\u00ed una llamada desde una p\u00e1gina Web a esta URN con una sentencia HTML como la siguiente, <a href=\"tel://1-408-555-5555\">1-408-555-5555</a>,provoca que se active el tel\u00e9fono (en un iPhone) y realice una llamada a ese n\u00famero, ya que la aplicaci\u00f3n nativa de tel\u00e9fono de iOS tiene registrado ese esquema de protocolo. En este caso tenemos una salvedad evidente, y es que el navegador Web obviar\u00e1 esta transferencia de control al sistema operativo cuando el propio navegador sepa tratar el protocolo, por ejemplo, con http, https, ftp, etc.","title":"Invocaci\u00f3n por protocolo desde navegador Web"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#advertencias-de-apertura","text":"Como la invocaci\u00f3n por protocolo no deja de ser una transferencia de datos desde una p\u00e1gina Web (que no tiene porqu\u00e9 ser de confianza) a una aplicaci\u00f3n nativa, los navegadores Web acostumbran a advertir de este cambio al usuario con un di\u00e1logo gr\u00e1fico: Ilustraci\u00f3n 1: Advertencia en Firefox sobre Windows 7 Ilustraci\u00f3n 2: Advertencia en Google Chrome sobre Windows 7 Ilustraci\u00f3n 3: Advertencia en Internet Explorer 9 sobre Windows 7 En general, todos los navegadores Web muestran alg\u00fan tipo de advertencia, excepto Apple Safari en Windows y OS X. En el caso de Internet Explorer se comprueba adem\u00e1s la firma electr\u00f3nica del ejecutable del programa nativo invocado.","title":"Advertencias de apertura"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#soporte-de-la-invocacion-por-protocolo-en-distintos-navegadores-web","text":"Las pruebas de compatibilidad positiva se han realizado en los siguientes entornos de escritorio compatibles con AutoFirma: Windows (XP, Vista, 7, 8, 8.1) OS X (10.7, 10.8, 10.9) Linux (varias distribuciones y versiones).","title":"Soporte de la invocaci\u00f3n por protocolo en distintos navegadores Web"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#comunicacion-entre-aplicacion-nativa-y-aplicacion-javascript-en-el-navegador-que-inicio-la-invocacion-por-protocolo","text":"Como hemos comentado, una aplicaci\u00f3n JavaScript ejecut\u00e1ndose en un navegador Web puede invocar una aplicaci\u00f3n nativa siempre que esta est\u00e9 registrada como la aplicaci\u00f3n por defecto para tratar un protocolo que no trate el propio navegador (por ejemplo, el Cliente @firma usa el protocolo afirma en una URI del estilo afirma://), proporcionando ciertos datos como parte de la propia URI de invocaci\u00f3n, pero no hay mecanismos predefinidos para, tras esta invocaci\u00f3n, establecer un di\u00e1logo bidireccional.","title":"Comunicaci\u00f3n entre aplicaci\u00f3n nativa y aplicaci\u00f3n JavaScript en el navegador que inici\u00f3 la invocaci\u00f3n por protocolo"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#funcionamiento-del-dialogo-entre-aplicacion-autofirma-y-aplicacion-javascript-en-navegador-web","text":"Dado que, como se ha comentado anteriormente, no hay un mecanismo predefinido para la comunicaci\u00f3n entre una aplicaci\u00f3n nativa ajena al navegador Web y este \u00faltimo, en AutoFirma se ha implementado un procedimiento de comunicaci\u00f3n mediante HTTPS, donde la aplicaci\u00f3n AutoFirma act\u00faa como servidor (mediante un ServerSocket SSL de Java) y la aplicaci\u00f3n JavaScript realiza llamadas HTTPS normales, dirigidas siempre hacia la direcci\u00f3n 127.0.0.1, que siempre corresponde a la m\u00e1quina local del firmante. El puerto del socket a trav\u00e9s del cual se realiza la comunicaci\u00f3n se genera aleatoriamente en el JavaScript de integraci\u00f3n y se env\u00eda a AutoFirma mediante una invocaci\u00f3n por protocolo. A partir de este momento se inicia un di\u00e1logo bidireccional a trav\u00e9s del socket SSL.","title":"Funcionamiento del di\u00e1logo entre aplicaci\u00f3n AutoFirma y aplicaci\u00f3n JavaScript en navegador Web"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#_1","text":"","title":""},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#aplicacion-autofirma-con-interfaz-grafico-para-firmas-locales","text":"La aplicaci\u00f3n AutoFirma permite su ejecuci\u00f3n directa en local por parte del usuario para la generaci\u00f3n de firmas electr\u00f3nicas sin necesidad de su integraci\u00f3n en un flujo Web. Sin embargo, este modo de ejecuci\u00f3n est\u00e1 fuera del alcance de este documento.","title":"Aplicaci\u00f3n AutoFirma con interfaz gr\u00e1fico para firmas locales"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#seguridad-de-la-aplicacion-autofirma","text":"","title":"Seguridad de la aplicaci\u00f3n AutoFirma"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#seguridad-en-el-propio-instalador","text":"","title":"Seguridad en el propio instalador"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#microsoft-windows","text":"El instalador (.exe) va firmado electr\u00f3nicamente, y MS-Windows es capaz de comprobar la validez de la firma.","title":"Microsoft Windows"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#apple-os-x","text":"El instalador (.pkg) va firmado electr\u00f3nicamente seg\u00fan los requisitos de Apple para la generaci\u00f3n de instaladores firmados.","title":"Apple OS X"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#linux","text":"No hay firma electr\u00f3nica, al no soportarse esta en los instaladores DEB de Debian.","title":"Linux"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#_2","text":"","title":""},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#cambios-realizados-en-el-sistema-durante-el-proceso-de-instalacion","text":"","title":"Cambios realizados en el sistema durante el proceso de instalaci\u00f3n"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#registro-del-protocolo-afirma","text":"Una de las tareas realizadas por el instalador es el registro del protocolo \u201cafirma\u201d asociado a la aplicaci\u00f3n AutoFirma, de modo que una invocaci\u00f3n al sistema operativo para la apertura de una URL del tipo \u201cafirma://\u201d conllevar\u00e1 el arranque de la aplicaci\u00f3n AutoFirma, recibiendo esta la URL completa con la que fue instanciada. Este registro se realiza de distinta manera seg\u00fan el sistema operativo:","title":"Registro del protocolo \u201cafirma\u201d"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#microsoft-windows_1","text":"El registro del protocolo se realiza mediante el propio programa de instalaci\u00f3n (NSIS, Nullsoft Scriptable Install System), que ejecut\u00e1ndose con privilegios de administrador, a\u00f1ade los siguientes valores en el registro de Windows (sintaxis seg\u00fan NSIS, donde $INSTDIR es el directorio de instalaci\u00f3n de AutoFirma): ;Protocolo afirma WriteRegStr HKEY_CLASSES_ROOT \"afirma\" \"\" \"URL:Afirma Protocol\" WriteRegStr HKEY_CLASSES_ROOT \"afirma\\DefaultIcon\" \"\" \"$INSTDIR\\AutoFirma\\ic_firmar.ico\" WriteRegStr HKEY_CLASSES_ROOT \"afirma\" \"URL Protocol\" \"\" WriteRegStr HKEY_CLASSES_ROOT \"afirma\\shell\\open\\command\" \"\" \"$INSTDIR\\AutoFirma\\AutoFirma.exe %1\" Estos valores son eliminados durante la desinstalaci\u00f3n, igualmente por el desinstalador de NSIS ejecut\u00e1ndose con permisos de administrador.","title":"Microsoft Windows"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#apple-os-x_1","text":"En Apple OS X el registro de protocolo se realiza en el info.plist de la aplicaci\u00f3n, con las siguientes l\u00edneas: <array> <dict> <key>CFBundleURLSchemes</key> <array> <string>afirma</string> </array> <key>CFBundleURLName</key> <string>Protocolo de invocaci\u00f3n del Cliente @firma</string> </dict> </array> Dado que en Apple OS X el info.plist es interno a cada aplicaci\u00f3n, se elimina con esta (deshaci\u00e9ndose el registro de protocolo). El proceso no necesita permisos de administrador.","title":"Apple OS X"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#linux_1","text":"En Linux se realiza una asociaci\u00f3n del protocolo mediante una doble declaraci\u00f3n en el paquete DEB de instalaci\u00f3n:","title":"Linux"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#declaracion-del-x-scheme-handler-en-el-desktop-de-gnome","text":"[Desktop Entry] Encoding=UTF-8 Name=AutoFirma Cliente @firma Comment=Cliente @firma Exec=java -jar /usr/lib/autofirma/autofirma.jar Icon=/usr/share/autofirma/autofirma.svg MimeType=x-scheme-handler/afirma; Terminal=false Type=Application Categories=GNOME;Application;Office StartupNotify=true StartupWMClass=autofirma","title":"Declaraci\u00f3n del x-scheme-handler en el desktop de Gnome"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#declaracion-como-preferencia-de-mozilla-firefox-en-etcfirefoxpref","text":"pref(\"network.protocol-handler.app.afirma\",\"/usr/bin/simpleafirma\"); pref(\"network.protocol-handler.warn-external.afirma\",false); pref(\"network.protocol-handler.external.afirma\",true);","title":"Declaraci\u00f3n como preferencia de Mozilla Firefox en /etc/Firefox/pref"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#instalacion-de-un-certificado-ssl-auto-firmado-como-de-confianza-para-el-sistema","text":"El instalador, durante el proceso de instalaci\u00f3n, genera un certificado para comunicaciones SSL asociado al host \u201c127.0.0.1\u201d (la direcci\u00f3n local). Este certificado tiene las siguientes caracter\u00edsticas: Se genera al vuelo durante el proceso de instalaci\u00f3n. El c\u00e1lculo de claves usa el generador de n\u00fameros aleatorios por defecto de Java 8. El tama\u00f1o de la clave es de 2048 bits. Este certificado, una vez generado: Se instala en el sistema como de confianza para servidores SSL. En Mozilla Firefox usando la herramienta \u201cCertUtil\u201d de Mozilla. En MS-Windows usando las funciones de Java 8 de acceso a CAPI. En OS X usando las funciones de Java 8 de acceso al llavero de OS X. Se guarda como PKCS#12 en el directorio de activos del programa AutoFirma ($HOME/.afirma, donde $HOME es el directorio del usuario) con una contrase\u00f1a prefijada (en el propio c\u00f3digo del aplicativo).","title":"Instalaci\u00f3n de un certificado SSL auto firmado como de confianza para el sistema"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#otros-cambios","text":"El programa de instalaci\u00f3n puede crear iconos en el men\u00fa inicio o el escritorio del usuario, as\u00ed como dar de alta el desinstalador (por ejemplo, en el caso de Windows, para poder desinstalar la aplicaci\u00f3n desde la secci\u00f3n \u201cProgramas y Caracter\u00edsticas\u201d del Panel de Control), pero ning\u00fan cambio que modifique o afecte a la seguridad del equipo del usuario firmante.","title":"Otros cambios"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#seguridad-en-el-propio-binario-ejecutable-de-autofirma","text":"Los binarios de AutoFirma est\u00e1n firmados digitalmente en el caso de Microsoft Windows. Internet Explorer sobre Microsoft Windows es el \u00fanico navegador Web que comprueba las firmas electr\u00f3nicas de los programas que se han arrancado mediante una invocaci\u00f3n por protocolo, y es la raz\u00f3n por la que es el binario de Microsoft Windows el \u00fanico firmado. No se firman ni los binarios de OS X o Linux ni los JAR de Java internos a la aplicaci\u00f3n AutoFirma debido a que esta firma nunca se advierte de su comprobaci\u00f3n al usuario por protocolo (por lo que carece de utilidad), pero si puede ocasionar retardos considerables en la carga de la aplicaci\u00f3n, puesto que internamente el sistema operativo si calcula las huellas digitales e incluso consulta a los sistemas OCSP.","title":"Seguridad en el propio binario ejecutable de AutoFirma"},{"location":"markdown_strict/La_seguridad_en_el_Servicio_de_firma_del_Cliente/#seguridad-en-el-propio-proceso-de-firma","text":"El proceso de firma implementa distintas medidas de seguridad, que van impl\u00edcitas en la secuencia de uso: El navegador Web invoca por protocolo (afirma://\u2026) a la aplicaci\u00f3n AutoFirma. La invocaci\u00f3n por protocolo no puede ser interceptada por un programa esp\u00eda de conexiones de red, ya que no se realiza mediante TCP/IP ni UDP. En la URL de invocaci\u00f3n se indica (entre otras cosas): Una lista acotada de puertos aleatorios TCP de conexi\u00f3n, generados dentro del rango de puertos para uso din\u00e1mico (desde el 49152 al 65535). De esta forma, el servicio se inicia cada vez en un puerto distinto y aleatorio, dificultando ataques previamente planificados a puertos concretos. Un identificador de sesi\u00f3n aleatorio generado localmente al vuelo desde JavaScript. El identificador se generar\u00e1 usando las funciones de aleatorios de la \u201c Web Cryptography API \u201d si el motor JavaScript lo implementa o un algoritmo basado en la generaci\u00f3n de aleatorios corriente y marcas de tiempo en caso de no hacerlo. El programa AutoFirma se inicia y abre un servicio servidor de tipo socket TCP SSL en uno de los puertos posibles de la lista recibida, respondiendo a un subconjunto del protocolo HTTPS. El servicio no es concurrente, una vez una instancia de AutoFirma acepta una conexi\u00f3n entrante en su puerto, ignora cualquier otra petici\u00f3n de conexi\u00f3n. El programa AutoFirma acepta la conexi\u00f3n SSL desde el JavaScript que ejecuta localmente el navegador Web. Solo se aceptan conexiones que provengan desde el mismo equipo local (localhost / 127.0.0.1). Cualquier conexi\u00f3n externa es rechazada. Solo se aceptan conexiones que indiquen como par\u00e1metro en el di\u00e1logo el ID de sesi\u00f3n, que al haber sido generado al vuelo localmente y de forma aleatoria por el JavaScript nadie m\u00e1s puede conocer. El programa realiza la firma electr\u00f3nica, para lo cual siempre habr\u00e1 alg\u00fan tipo de confirmaci\u00f3n visual de cara al usuario firmante (usualmente, el mismo di\u00e1logo de selecci\u00f3n de certificados). Una vez termina el proceso (o pasa cierto tiempo sin intercambiarse mensajes), el programa se cierra, cerr\u00e1ndose a la vez el servicio SSL. El hecho de tener el servicio abierto \u00fanicamente el tiempo necesario reduce la ventana de tiempo en la que este puede recibir ataques. Si se volvi\u00e9ndose a requerir la aplicaci\u00f3n, se invocar\u00e1 nuevamente por protocolo proporcion\u00e1ndole nuevos puertos de conexi\u00f3n para el socket y un nuevo ID de sesi\u00f3n.","title":"Seguridad en el propio proceso de firma"},{"location":"markdown_strict/MCF_manual-integrador_ES/","text":"En el presente documento se detalla el proceso de integraci\u00f3n y configuraci\u00f3n del Cliente @firma para la generaci\u00f3n de firmas de usuario en tr\u00e1mites web. Introducci\u00f3n El Cliente @firma es una soluci\u00f3n de firma electr\u00f3nica que permite a sus usuarios generar firmas con sus certificados locales. El Cliente est\u00e1 especialmente orientado a ser integrado dentro de tr\u00e1mites web de tal forma que una aplicaci\u00f3n web pueda solicitar al usuario la firma de unos datos a trav\u00e9s del Cliente y obtener como respuesta la firma de esos datos. El Cliente @firma est\u00e1 formado principalmente por dos componentes: Una aplicaci\u00f3n nativa (AutoFirma, para equipos es de sobremesa; el Cliente m\u00f3vil Android, para dispositivos Android; o el Cliente m\u00f3vil iOS, para dispositivos iOS). Esta aplicaci\u00f3n debe estar instalada en el dispositivo del usuario antes de iniciar el proceso de firma. Un JavaScript de despliegue para la integraci\u00f3n del proceso de firma dentro del tr\u00e1mite web. Adem\u00e1s de los componentes mencionados, el uso de determinadas funciones del Cliente @firma o su compatibilidad con determinados entornos puede requerir el despliegue de diversos servicios auxiliares a los que deber\u00e1 conectar la aplicaci\u00f3n cliente. El Cliente @firma hace uso de los certificados digitales X.509v3 y de las claves privadas asociadas a estos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados ( KeyStore ) del sistema operativo o del navegador Web (Internet Explorer, Mozilla Firefox, etc.) del usuario. Tambi\u00e9n se permite el uso de certificados en dispositivos criptogr\u00e1ficos (tarjetas inteligentes, dispositivos USB) instalados en el sistema y con controlador CSP/PKCS#11 compatible (como, por ejemplo, el DNI Electr\u00f3nico o DNIe) y certificados en almacenes software (PKCS#12/PFX). La clave privada del usuario no abandona en ning\u00fan caso el almac\u00e9n de claves ni sale del equipo del usuario. El Cliente @firma no almacena ning\u00fan tipo de informaci\u00f3n personal del usuario, ni hace uso de cookies ni ning\u00fan otro mecanismo para la gesti\u00f3n de datos de sesi\u00f3n. AutoFirma s\u00ed almacena el log de su \u00faltima ejecuci\u00f3n a efectos de ofrecer soporte al usuario si se encontrase alg\u00fan error durante su ejecuci\u00f3n. El Cliente @firma forma parte de la suite de productos de @firma, pero no interacciona con ninguno de los servicios del resto de productos. El Cliente @firma s\u00f3lo generar firmas electr\u00f3nicas con los certificados de usuario. La validaci\u00f3n de estas firmas y su promoci\u00f3n a firmas longevas, por ejemplo, son operaciones que deber\u00e1n realizarse de forma independiente con otros productos de la suite (@firma, VALIDe, Integr@...) Licencia El Cliente @firma es software libre y puede usarse, seg\u00fan se desee, bajo licencia GNU General Public License versi\u00f3n 2 (GPLv2) o bajo licencia European Software License 1.1 (EUPL 1.1) o superior. El Cliente @firma incluye, entre otros, los siguientes productos de terceros con licencias compatibles: JXAdES ( https://github.com/universitatjaumei/jxades ) SpongyCastle ( https://rtyley.github.io/spongycastle/ ) C\u00f3digo derivado de iText v2.1.7 ( http://itextpdf.com/ ) C\u00f3digo derivado de Java Mime Magic Library ( http://jmimemagic.sourceforge.net/ ) Apache Santuario ( https://santuario.apache.org/ ) Proxy Vole ( https://github.com/MarkusBernhardt/proxy-vole ) Java WebSocket ( https://github.com/TooTallNate/Java-WebSocket ) Licencias Java AutoFirma, en sus versiones para Windows y macOS, incluye una m\u00e1quina virtual de Java (JVM) para la ejecuci\u00f3n de la aplicaci\u00f3n. Microsoft Windows (64bits): OpenJDK JRE 17.0.2 (licencia GPL v2) macOS OpenJDK JRE 17.0.2 (licencia GPL v2) Las licencias de las JVM incluidas en AutoFirma permiten su uso sin coste de licencia. En caso de utilizar el antiguo MiniApplet (disponible hasta el Cliente @firma 1.6.5), la entidad encargada de la implantaci\u00f3n de la soluci\u00f3n ser\u00e1 la responsable de la proporcionar la JVM necesaria a sus empleados y las licencias que esta pueda requerir. En el caso de los ciudadanos o usuarios que no lo utilicen en el desempe\u00f1o de su actividad laboral, no se requerir\u00e1 el pago de licencias independientemente de que se utilice OpenJDK u Oracle Java. Los Clientes m\u00f3viles para Android e iOS utilizan \u00fanicamente el entorno de ejecuci\u00f3n proporcionado por el del sistema y no requieren licencia. Recursos Puede consultar la informaci\u00f3n relativa al proyecto Cliente @firma y descargar el c\u00f3digo fuente y los binarios de la aplicaci\u00f3n en la siguiente direcci\u00f3n Web: http://administracionelectronica.gob.es/ctt/clienteafirma As\u00ed mismo, el c\u00f3digo del Cliente se encuentra disponible en GitHub y sus distintos m\u00f3dulos se encuentran disponibles en el repositorio central de Maven: Fuentes: https://github.com/ctt-gob-es/clienteafirma Binarios: https://search.maven.org/search?q=es.gob.afirma Adecuaci\u00f3n al Esquema Nacional de Seguridad Los productos de la Suite @firma pueden permitir el uso de algoritmos no recomendados por la Gu\u00eda 807 del Esquema Nacional de Seguridad (ENS; editada por el Centro Criptol\u00f3gico Nacional, CCN) vigente en el momento de publicaci\u00f3n de este documento. Queda bajo la responsabilidad de las aplicaciones que hacen uso de estos productos el configurar adecuadamente las llamadas a los mismos para generar el resultado esperado, v\u00e1lido y adecuado para ese momento y el nivel de seguridad deseado, utilizando para ello algoritmos de la familia SHA-2 tal y como especifica dicha norma para la generaci\u00f3n de firmas electr\u00f3nicas. Puede consultar la norma vigente desde el siguiente enlace: https://www.ccn-cert.cni.es/series-ccn-stic/800-guia-esquema-nacional-de-seguridad/513-ccn-stic-807-criptologia-de-empleo-en-el-ens/file.html Requisitos m\u00ednimos Entorno Cliente Los requisitos m\u00ednimos del entorno cliente depender\u00e1 de la aplicaci\u00f3n nativa utilizada para firmar. Debido a la amplia variedad de navegadores del mercado, s\u00f3lo se citar\u00e1n para cada aplicaci\u00f3n cliente aquellos navegadores para los que se han realizado pruebas espec\u00edficas. No excluye esto que pueda funcionar correctamente con otros entornos. AutoFirma El uso de AutoFirma como herramienta de firma integrada dentro del proceso de firma de tr\u00e1mites web tiene los siguientes requerimientos en cuanto a entorno operativo: Sistema Operativo Microsoft Windows 7 o superior. Soportado directamente en 7, 8, 8.1, 10 y 11. En 32 o 64 bits. Linux. Soportado directamente en Ubuntu 20.04 LTS, Fedora 35 y OpenSUSE 15.3. macOS Catalina o superior. Soportado directamente en Catalina, Big Sur y Monterrey. Navegadores Web (Cuando es invocada desde una aplicaci\u00f3n web) Microsoft Windows Google Chrome 46 o superior. Mozilla Firefox 41.0.1 o superior. Microsoft Internet Explorer 8 o superior. Microsoft Edge Legacy v20 o superior (EdgeHTML). Microsoft Edge (Edge Chromium). Linux Mozilla Firefox 41.0.1 o superior. macOS Apple Safari 9.0 o superior. Google Chrome 46 o superior. Mozilla Firefox 41.0.1 o superior. En entornos macOS y Windows no es necesario que el usuario tenga instalado un entorno de ejecuci\u00f3n de Java, ya que viene incluido en la propia aplicaci\u00f3n. En Linux se necesita un entorno de ejecuci\u00f3n de Java OpenJDK (marcado como recomendac\u00edon en el instalador de AutoFirma para permitir el uso de la compilaci\u00f3n preferida del usuario de la JRE (versi\u00f3n 8 o superior). Para el acceso al almac\u00e9n de Firefox en algunas versiones de Windows puede ser necesario instalar los entornos de ejecuci\u00f3n redistribuibles de Microsoft Visual C++ 2015. Si AutoFirma no puede cargar los certificados de su almac\u00e9n de claves, siga las instrucciones descritas en el apartado de errores conocidos No se puede acceder al almac\u00e9n de claves de Firefox 49.0 y superiores . Cliente m\u00f3vil Android El uso de Cliente m\u00f3vil Android como herramienta de firma integrada dentro del proceso de firma de tr\u00e1mites web tiene los siguientes requerimientos en cuanto a entorno operativo: Sistema Operativo Android 4.3 o superior. Navegadores Web (para la invocaci\u00f3n por protocolo) Google Chrome. Navegador webkit. Cliente m\u00f3vil iOS El uso de Cliente m\u00f3vil iOS como herramienta de firma integrada dentro del proceso de firma de tr\u00e1mites web tiene los siguientes requerimientos en cuanto a entorno operativo: Sistema Operativo iOS 13 o superior. Navegadores Web (para la invocaci\u00f3n por protocolo) Apple Safari. Entorno Servidor El Cliente @firma requiere de una serie de servicios auxiliares para el uso de ciertas funcionalidades y la compatibilidad con determinados entornos. Los requisitos de estos servicios son los siguientes: Servidor de aplicaciones JEE compatible con Servlets de Java. Apache Tomcat, WildFly, RedHat JBoss, IBM WebSphere, Oracle GlassFish, Oracle Application Server, etc. JRE 1.7 o superior. Puede saber m\u00e1s acerca de los servicios auxiliares del Cliente @firma, consulte el apartado 5.3 Servicios del Cliente @firma . Operaciones soportadas El Cliente @firma proporciona funcionalidades de firma electr\u00f3nica (incluyendo firmas m\u00faltiples) con certificados locales, pero no otras operaciones de firma o criptograf\u00eda como validaci\u00f3n de firmas, promoci\u00f3n a formatos longevos, sellado de tiempo, creaci\u00f3n de sobres digitales o cifrado. Adicionalmente, el Cliente @firma proporciona un conjunto de m\u00e9todos de utilidad y opciones de operaci\u00f3n. Las operaciones soportadas por el Cliente @firma son: Firma electr\u00f3nica. Firmas electr\u00f3nicas m\u00faltiples (m\u00e1s de un firmante por documento). Cofirma. Contrafirma. Firma de lotes de documentos. Selecci\u00f3n de certificado. Funciones de utilidad: Conversi\u00f3n de una cadena Base64 a texto. Conversi\u00f3n de un texto a una cadena Base64. Guardado de datos en disco. Carga de fichero local. Carga de multiples ficheros. Si su aplicaci\u00f3n requiere una funcionalidad de firma no soportada por el Cliente @firma, consulte el cat\u00e1logo de aplicaciones de @firma para determinar cu\u00e1l es la m\u00e1s apropiada para sus necesidades. Despliegue del Cliente @firma Para integrar el Cliente @firma en su aplicaci\u00f3n web se debe publicar junto a la misma el fichero \u201cautoscript.js\u201d. En este fichero se encuentra el objeto JavaScript que deberemos utilizar para invocar a las distintas operaciones del Cliente y obtener su resultado. Adicionalmente y seg\u00fan el entorno de ejecuci\u00f3n del usuario, es posible que para la comunicaci\u00f3n entre el JavaScript de despliegue y el Cliente @firma sea necesario el uso de dos servicios de comunicaci\u00f3n. Estos dos servicios, se distribuyen junto al JavaScript de despliegue en forma de archivos WAR (\u201cafirma-signature-retriever.war\u201d y \u201cafirma-signature-storage.war\u201d) y deber\u00edan desplegarse en el mismo dominio que la p\u00e1gina web desde la que se use el Cliente. Las funcionalidades de firma trif\u00e1sica y firma de lotes tambi\u00e9n requieren el despliegue de un servicio adicional (\u201cafirma-server-triphase-signer.war\u201d). Consulte en el apartado 5.3 Servicios del Cliente @firma en qu\u00e9 casos son necesarios estos servicios y as\u00ed determinar si debe realizar su despliegue. Informaci\u00f3n preliminar En este apartado se presentan distintos aspectos que el integrador del Cliente @firma debe tener en cuenta antes del despliegue del Cliente @firma: Como medida de seguridad, AutoFirma no permite el despliegue en p\u00e1ginas a las que se acceda mediante \u201c127.0.0.1\u201d o \u201clocalhost\u201d. Si va a realizar pruebas en su equipo local, deber\u00e1 tomar alguna de las siguientes alternativas: Acceda a su p\u00e1gina y a los servicios del cliente a trav\u00e9s de la IP de red que tenga asignada su equipo. Configure en el fichero hosts de su equipo un alias para \u201c127.0.0.1\u201d y util\u00edcelo como nombre de dominio. La localizaci\u00f3n del fichero hosts seg\u00fan el sistema operativo es: En Windows: UNIDAD:\\Windows\\System32\\drivers\\etc\\ En Linux y macOS: /etc/hosts La p\u00e1gina web, el JavaScript de despliegue y los servicios del Cliente @firma deben ser accesibles desde el mismo dominio. De esta forma se evitar\u00e1n errores debido a los mecanismos de seguridad del navegador para bloquear ataques de Cross-Site Scripting (XSS). Esto es especialmente importante cuando se hace uso de los servicos auxiliares de comunicaci\u00f3n (StorageService y RetrieveService). Despliegue una instancia de los servicios auxiliares de comunicaci\u00f3n por cada aplicaci\u00f3n en la que integre el cliente o, al menos, por cada dominio. Siempre que se utilice el Cliente @firma ha de tenerse en cuenta que la aplicaci\u00f3n nativa debe poder confiar en los certificos SSL utilizados por cualquier servicio externo al que se deda conectar. En caso contrario, fallar\u00eda la conexi\u00f3n. Esto es cr\u00edtico cuando se hace uso de la comunicaci\u00f3n por servidor intermedio o se utiliza la operaci\u00f3n de firma trif\u00e1sica. En el caso de usar AutoFirma, puede evitar problemas durante el desarrollo y pruebas desactivando la comprobaci\u00f3n de los certificados SSL o agregando su dominio a la lista de dominios seguros. Puede hacer esto desde el panel de preferencias, en la pesta\u00f1a \u201cGeneral\u201d, desactivando la casilla de verificaci\u00f3n \u201cAceptar s\u00f3lo conexiones con sitios seguros (Recomendado)\u201d o accediento al apartado \u201cDominios seguros\u201d. En el caso de aplicaciones de firma m\u00f3vil Android, puede desactivar la validaci\u00f3n de certicados o agregar el dominio a la lista de dominios seguros desde el men\u00fa \u201cConfiguraci\u00f3n\u201d. Codificaci\u00f3n UTF-8 de las p\u00e1ginas cuando se proporcionen o recojan textos del cliente. El Cliente @firma interpreta todos los textos, tanto los recibidos como los devueltos en las respuestas, usando el juego de caracteres UTF-8. Para poder transmitirlos y mostrarlos correctamente desde una p\u00e1gina web es necesario que esta se encuentre codificada en UTF-8 y lo declare como tal. En caso de no ser posible, se recomienda: Que el Base64 de los textos a proporcionar al Cliente se hayan obtenido desde un entorno en el que se pueda gantizar que originalmente estaban codificados en UTF-8. Por ejemplo, que el texto ya estuviese previamente codificado o que se codifique a trav\u00e9s de un servicio. No mostrar directamente al usuario los mensajes devueltos por el propio Cliente. Importaci\u00f3n del JavaScript de despliegue Para integrar el Cliente @firma en su p\u00e1gina Web debe importar en ella la biblioteca JavaScript \u201cautoscript.js\u201d. Puede hacer referencia a la misma mediante una URL absoluta o mediante una URL relativa a partir de la direcci\u00f3n de publicaci\u00f3n de su p\u00e1gina Web. Por ejemplo, se puede introducir la carga de la biblioteca en la secci\u00f3n head del HTML, tal y como se muestra en el siguiente ejemplo: \u2026 <head> <script src= \"https://miweb.com/afirma/js/autoscript.js\" ></script> \u2026 Si la p\u00e1gina Web en la que deseamos cargar el Cliente @firma estuviese tambi\u00e9n en la ruta \u201c https://miweb.com/afirma \u201d se podr\u00eda hacer referencia a la biblioteca \u201cautoscript.js\u201d de forma relativa indicando: \u2026 <head> <script src= \"js/autoscript.js\" ></script> \u2026 Cualquier p\u00e1gina Web con esta biblioteca JavaScript importada est\u00e1 lista para utilizar el Cliente @firma. Importaci\u00f3n en p\u00e1ginas Web generadas din\u00e1micamente En un sistema Web actual, lo habitual es que las p\u00e1ginas Web no residan pre-construidas en directorios Web, sino que estas se generen din\u00e1micamente mediante alguna de las muchas tecnolog\u00edas disponibles de aplicaciones Web (JSP, ASP, PHP, etc.). En estos casos es necesario tener en cuenta que la direcci\u00f3n de la biblioteca JavaScript deber\u00eda establecerse en base a la URL de despliegue de la p\u00e1gina si se hace de forma relativa. En caso de duda, utilice la URL absoluta. Servicios del Cliente @firma La compatibilidad del Cliente @firma con determinados entornos y funciones puede requerir el despliegue de una serie de servicios auxiliares. Estos servicios se distribuyen en forma de archivos WAR junto al JavaScript de espliegue del Cliente @firma y deber\u00edan desplegarse por cada aplicaci\u00f3n o sistema que desee utilizarlos. Los archivos WAR en los que se distribuyen estos servicios no requieren el uso de un software servidor de aplicaciones concreto. Consulte el apartado 3.2 Entorno Servidor para saber m\u00e1s de los requisitos de despliegue y la documentaci\u00f3n de su servidor de aplicaciones para saber c\u00f3mo desplegarlos. En caso de que su aplicaci\u00f3n no tenga que ser compatible con los entornos o las funcionalidades listadas a continuaci\u00f3n, no ser\u00e1 necesario el despliegue de ning\u00fan servicio. Esto es, que no tendr\u00e1 que desplegarlos en los siguientes casos: Si no se requiere compatibilidad con Internet Explorer 10 ni con Safari 10 ni versiones anteriores de ambas aplicaciones. Si no se requiere compatibilidad con dispositivos m\u00f3viles. Si no se utilizan operaciones de firma trif\u00e1sica o firma de lotes. Cada uno de estos servicios requiere un fichero de configuraci\u00f3n, pero la l\u00f3gica para definir la ubicaci\u00f3n de estos ficheros es la misma para todos ellos. Este aspecto de la configuraci\u00f3n se detalla en el apartado 5.3.3 Configuraci\u00f3n de los servicios . Servicios auxiliares de comunicaci\u00f3n Para la comunicaci\u00f3n entre el JavaScript de despliegue del Cliente @firma y la propia aplicaci\u00f3n de firma se utilizan diversos mecanismos. Uno de estos requiere del uso de dos servicos auxiliares de comunicaci\u00f3n. Deber\u00e1 utilizar estos servicios cuando: Desee que su despliegue sea compatible con entornos m\u00f3viles. Desee que su despliegue sea compatible con Internet Explorer 10 y anteriores (o una versi\u00f3n superior en modo compatibilidad con estas versiones). Cuando la aplicaci\u00f3n fuerce intencionadamente la comunicaci\u00f3n a trav\u00e9s de estos servicios. Estos servicios se distribuyen junto con el JavaScript de despliegue del Cliente @firma y son los siguientes: StorageService Este Servlet permite almacenar datos en un directorio temporal del servidor. Este servicio se despliega por medio del WAR \u201cafirma-signature-storage.war\u201d. RetrieveService Este Servlet permite recuperar datos de un servidor. Los datos devueltos deben estar almacenados en un directorio temporal predefinido y, tras devolver los datos, el servicio borrar\u00e1 el fichero temporal en donde se almacenaban. Este servicio nunca devolver\u00e1 datos que se guardasen hace m\u00e1s de un tiempo m\u00e1ximo configurado, devolviendo error tal como si no hubiese encontrado el fichero de datos. Igualmente, borrar\u00e1 todos aquellos ficheros del directorio temporal que hayan sobrepasado este tiempo m\u00e1ximo desde su creaci\u00f3n. Este servicio se despliega por medio del WAR \u201cafirma-signature- retriever.war\u201d. En cualquier el resto de los casos, el JavaScript de despliegue y AutoFirma se comunicar\u00e1n a trav\u00e9s de Sockets. Consulte el apartado ANEXO I Comunicaci\u00f3n JavaScript de despliegue \u2013 Cliente @firma para saber m\u00e1s sobre los mecanismos de comunicaci\u00f3n entre el JavaScript de despliegue y el Cliente @firma. Importante: Los servicios de almacenamiento y guardado en servidor deben ser accesibles desde el mismo dominio en el que se encuentre la p\u00e1gina de firma. Si no se hiciese as\u00ed, el navegador web puede bloquear la conexi\u00f3n con ellos interpretando que se trata de un ataque de cross-site scripting (XSS) . Configuraci\u00f3n de los servicios de almacenaje y recuperaci\u00f3n Los servicios de almacenaje y recuperaci\u00f3n sirven para comunicar el JavaScript de despliegue y el Cliente @firma mediante el guardado temporal de los datos en un directorio concreto del servidor. Este directorio temporal debe ser visible y accesible por todas las instancias en ejecuci\u00f3n de los servicios. Este aspecto es especialmente importante en configuraciones de servidores de aplicaciones en alta disponibilidad, donde puede haber varios nodos que presten el servicio, cada uno de ellos en un sistema de ficheros diferente. El que todos los nodos accedan al mismo directorio referenciado en la configuraci\u00f3n se puede lograr f\u00e1cilmente usando un almacenamiento compartido entre todos ellos (con el mismo punto de montaje), mediante enlaces simb\u00f3licos, etc. Es importante tambi\u00e9n asegurarse de que todos los nodos tienen los permisos adecuados sobre los directorios configurados. Los servicios de almacenaje y recuperaci\u00f3n de datos para la comunicaci\u00f3n entre el JavaScript de despliegue y el Cliente @firma (StorageService y RetrieveService, respectivamente), utilizan el mismo fichero de configuraci\u00f3n. Este fichero es \u201cintermediate_config.properties\u201d, que debe encontrarse en un directorio indetificado por la ruta absoluta transmitida a trav\u00e9s de un par\u00e1metro \u201c-Dclienteafirma.config.path\u201d. Las propiedades disponibles en este fichero de configuraci\u00f3n son las siguientes: tmpDir : Es el directorio del servidor en donde se almacenar\u00e1n los datos temporales. Debe contener el mismo valor en los servicios de guardado y recogida de datos si estos se desplegasen por separado. A este directorio s\u00f3lo necesitan acceder los servicios de guardado y recuperaci\u00f3n de datos, por lo que el administrador del sistema puede determinar que s\u00f3lo estos servicios pueden acceder a dicho directorio. En caso de realizarse un despliegue en m\u00faltiples nodos, el directorio deber\u00eda encontrarse en una unidad compartida por todos ellos. Si no se configura esta propiedad, se usar\u00e1 el directorio temporal del servidor. expTime : Es el tiempo de caducidad en milisegundos de los ficheros del directorio. Una vez superado ese tiempo desde la creaci\u00f3n del fichero, el servicio de recuperaci\u00f3n se negar\u00e1 a devolverlo y lo eliminar\u00e1. Si no se configura esta propiedad, se usar\u00e1 por defecto el valor \u201c60000\u201d (1 minuto) maxFileSize : Es el tama\u00f1o m\u00e1ximo de fichero permitido expresado en bytes. Su utilidad responde principalmente a motivos de seguridad, para evitar que el directorio del servidor se quede sin espacio si comienzan a subirse datos de gran tama\u00f1o. Si no se configura esta propiedad, se usar\u00e1 por defecto el valor \u201c0\u201d, que indica que no hay l\u00edmite de tama\u00f1o de fichero. debug : Habilita el modo debug cuando se configura el valor \u201ctrue\u201d. El modo debug s\u00f3lo deber\u00eda habilitarse durante la fase de integraci\u00f3n y nunca en entornos productivos. En este modo: Se muestran traza de log adicionales. No se eliminan los ficheros recuperados del servicior intermedio. No se eliminan los ficheros caducados del directorio temporal del servidor intermedio. No se limita el tama\u00f1o m\u00e1ximo de los ficheros a guardar. Un ejemplo de fichero de configuraci\u00f3n podr\u00eda ser: # Directorio para el guardado de los ficheros. Por defecto: Directorio temporal tmpdir=C:/clienteafirma/temp # Tiempo de caducidad de los mensajes. Por defecto: 60000 (1 minuto) expTime=60000 # Tamano maximo de fichero en bytes. Por defecto: 0 (Sin limite) maxFileSize=1048576 Consideraciones de seguridad Un posible ataque de denegaci\u00f3n de servicio sobre este sistema de almacenaje temporal es simplemente hacer muchas peticiones de almacenaje hasta que se alcance la capacidad total del sistema de ficheros. Los servicios proporcionados no incorporan ninguna medida contra estos ataques m\u00e1s que la limitaci\u00f3n del tama\u00f1o de fichero, por lo que debe ser el integrador el que las implemente. Algunas de estas medidas podr\u00edan ser: Establecer cuotas de disco para el directorio configurado en tmpDir . Detectar (y prevenir) m\u00faltiples llamadas al servicio de almacenamiento desde una misma direcci\u00f3n sin estar acompa\u00f1adas de las respectivas llamadas de recuperaci\u00f3n. Detectar (y prevenir) m\u00faltiples llamadas al servicio de almacenamiento en una frecuencia inusualmente alta. Servicios de firma trif\u00e1sica y firma de lotes Estos servicios se distribuyen en el archivo desplegable \u201cafirma-server-triphase-signer.war\u201d y deber\u00e1n desplegarse cuando: Desee que su despliegue sea compatible con entornos m\u00f3viles. Para m\u00e1s informaci\u00f3n, consulte el apartado 9 Compatibilidad con dispositivos m\u00f3viles y AutoFirma . Desee utilizar las funciones de firma trif\u00e1sica del cliente @firma. Para m\u00e1s informaci\u00f3n, consulte el apartado 6.2.2 Firma trif\u00e1sica . Desee utilizar las funciones de firma de lotes. Para m\u00e1s informaci\u00f3n, consulte el apartado 6.5 Firma de lotes predefinidos . Los servicios en cuesti\u00f3n son los siguientes: SignatureService Servicio para la ejecuci\u00f3n de operaciones de firma trif\u00e1sica. Requerido cuando deseamos utilizar este tipo de operaci\u00f3n y cuando se realizan firmas desde las aplicaciones cliente m\u00f3vil. presign Servicio para la carga de documentos y prefirma en los procesos de firma de lotes. postsign Servicio para la postfirma en los procesos de firma de lotes y guardado de las firmas. Advertencia: AutoFirma 1.7 y anteriores hac\u00edan uso de un mecanismo de firma de lotes distinto al actual, que usaba sus propios servicios y se configuraban de forma separada. Estos servicios siguen incluy\u00e9ndose en el \u201cafirma-server-triphase-signer.war\u201d, pero se consideran obsoletos y s\u00f3lo deber\u00edan seguir us\u00e1ndose para dar soporte a los antiguos despliegues de firma trif\u00e1sica, tambi\u00e9n soportados por AutoFirma 1.8 y superiores. Si desea utilizar el antiguo sistema de firma de lotes, consulte la documentaci\u00f3n de AutoFirma 1.7. Configuraci\u00f3n del servicio trif\u00e1sico Los servicios de firma trif\u00e1sica y de lotes se configuran a trav\u00e9s del fichero \u201ctps_config.properties\u201d, que debe encontrarse en un directorio identificado por la ruta absoluta transmitida al servidor de aplicaciones a trav\u00e9s de un par\u00e1metro \u201c-Dclienteafirma.config.path\u201d. Se puede proporcionar este par\u00e1metro en el arranque del servidor de aplicaciones. Las propiedades que pueden establecerse en este fichero son: Access-Control-Allow-Origin Permite establecer el origen permitido de las peticiones. Los servicios agregar\u00e1n el valor de esta propiedad en las respuestas del servicio. Si se establece como valor un asterisco (\u2018*\u2019), se indica que se pueden realizar peticiones desde cualquier dominio. Valor por defecto: * xml.provider.apache Permite forzar el proveedor de firma XML que se debe utilizar. Si se indica false, se forzar\u00e1 el proveedor de Sun. Cualquier otro valor, har\u00e1 que se utilice el proveedor de Apache. Esto puede ser \u00fatil para evitar problemas de compatibilidad con bibliotecas de procesado de XML (como XERCES y XALAN) que puedan encontrarse en el classpath del servidor de aplicaciones. Este tipo de bibliotecas pueden interferir con las que incluye el propio Oracle Java e impedir realizar firmas XAdES. Valor por defecto: true document.manager Clase que se encargar\u00e1 de gestionar los documentos que se deben firmar y las firmas generadas en los procesos de firma trif\u00e1sica y de lote. Valor por defecto: es.gob.afirma.triphase.server.document.SelfishDocumentManager El gestor de documentos ( Document Manager) por defecto imita un proceso de firma monof\u00e1sica, lo cual quiere decir que se deber\u00e1n proporcionar los datos a firmar en las llamadas a las operaciones de firma y de lote. Para saber m\u00e1s de la firma trif\u00e1sica y las ventajas que ofrece consulte el apartado ANEXO II Firma trif\u00e1sica . verification.key Clave utilizada para generar el c\u00f3digo de verificaci\u00f3n de las firmas. Si se configura aqu\u00ed un valor (puede ser cualquiera), se utilizar\u00e1 este para generar un c\u00f3digo de verificaci\u00f3n de los datos enviados a firmar. Este c\u00f3digo se genera en la prefirma en base a los datos y se comprueba en la postfirma para garantizar que la firma generada se realiz\u00f3 sobre los datos originalmente prefirmados. Por defecto, no se configura ning\u00fan valor y no se realizar\u00e1 est\u00e1 validaci\u00f3n. cacheEnabled Establece si se deben guardar en cach\u00e9 los documentos durante la firma. Se habilita con el valor \u201ctrue\u201d y se mantiene deshabilitada con cualquier otro valor. Por regla general, el documento a firmar es necesario tanto en la prefirma como en la postfirma. Esto quiere decir que se deber\u00e1 recuperar en dos ocasiones mediante el gestor de documentos configurado. Si recuperarlo del entorno en el que se encuentre es un proceso pesado, se puede configurar que guard\u00e9 en cach\u00e9 el documento durante la prefirma para no tener que volverlo a recuperar durante la posfirma. Valor por defecto: false La implementaci\u00f3n de la cach\u00e9 se determina mediante la propiedad \u201cdocument.cache.manager\u201d de este mismo fichero. T\u00e9ngase en cuenta que seg\u00fan el gestor de documentos y la implementaci\u00f3n de cach\u00e9 puede o no ser conveniente habilitar el uso de la cach\u00e9. Por regla general, s\u00f3lo se deber\u00eda habilitar la cach\u00e9 cuando se implemente un gestor de documentos personalizado, no los incluidos por defecto en el servicio de firma trif\u00e1sica, y cuando la recuperaci\u00f3n de este documento del gestor de documentos sea m\u00e1s costosa que la recuperaci\u00f3n de los datos de la cach\u00e9, lo cual depender\u00e1 de la implementaci\u00f3n de cach\u00e9 utilizada. document.cache.manager Clase que se encargar\u00e1 de guardar y recuperar datos de la cach\u00e9. La implementaci\u00f3n por defecto usa el disco c\u00f3mo cach\u00e9, ya que el guardado en memoria puede sobrepasar los l\u00edmites establecidos para el servicio cuando se procesen varias peticiones simult\u00e1neamente. Valor por defecto: es.gob.afirma.triphase.server.cache.FileSystemCacheManager Este propiedad solo se tendr\u00e1 en cuenta si se activase la cach\u00e9 mediante la propiedad \u201ccacheEnabled\u201d. maxPagesToCheckShadowAttack N\u00famero m\u00e1ximo de p\u00e1ginas sobre las que comprobar el PDF Shadow Attack. Se puede omitir la comprobaci\u00f3n indicando \"0\" paginas o permitir que se haga sobre todo el documento indicando el valor \"all\". Por defecto, 10. Se puede consultar m\u00e1s informaci\u00f3n sobre la validaci\u00f3n de PDF Shadow Attack en el apartado 8.3.7 Comprobaci\u00f3n de PDF Shadow Attack . tmpdir Directorio para el guardado de los ficheros temporales. Si no se indica, se usar\u00e1 el del usuario, aunque es recomendable el uso de un directorio espec\u00edfico para este fin. concurrent.enable Determina como procesar las firmas en las operaciones de firma de lotes. Puede tener dos valores: true Indica que se permite el proceso en paralelo de las entradas del lote. false Las firmas del lote se procesar\u00e1n secuencialmente. Este es el valor por defecto. concurrent.timeout Numero de segundos que debera durar como maximo cada fase de una operacion de firma en modo concurrente. Si se excediese este tiempo, se detendria y se consideraria que se produjo un error. Valor por defecto: 30 concurrent.maxsigns N\u00famero m\u00e1ximo de firmas que se procesaran concurrentemente en caso de estar activo el modo concurrente. Valor por defecto: 10 batch.maxDocuments Indica el numero m\u00e1ximo de documentos que se pueden enviar en una petici\u00f3n. Valor por defecto: 15 batch.maxSize Indica el tama\u00f1o m\u00e1ximo global en bytes que puede tener la petici\u00f3n en bytes. Valor por defecto: 100000 batch.maxReferenceSize Indica el tama\u00f1o m\u00e1ximo en bytes que puede tener la referencia a los ficheros dentro de la petici\u00f3. Valor por defecto: 50000 batch.maxDocSize Indica el tama\u00f1o m\u00e1ximo en bytes que puede tener un fichero que se est\u00e9 procesando a trav\u00e9s del mecanismo antiguo de firma por lotes. Valor por defecto: 100000 El fichero de configuraci\u00f3n b\u00e1sico por defecto ser\u00e1: # Or\u00edgenes permitidos Access-Control-Allow-Origin=* # Permite indicar si se debe usar el proveedor de firma XML de Apache. xml.provider.apache=true # Clase del gestor de documentos a utilizar (debe implementar DocumentManager) document.manager=es.gob.afirma.triphase.server.document.SelfishDocumentManager # Clave de verificacion verification.key= # Habilitar cach\u00e9 cacheEnabled=false # Clase de implementacion de cache a utilizar (debe implementar DocumentCacheManager) document.cache.manager=es.gob.afirma.triphase.server.cache.FileSystemCacheManager # Numero maximo de paginas sobre las que comprobar el PDF Shadow Attack. maxPagesToCheckShadowAttack=10 # Directorio para el guardado de temporales tmpdir= # Operacion concurrente (true) o en serie (false) concurrent.enable=false # Numero de segundos maximos para cada operacion de firma concurrent.timeout=30 # Numero maximo de firmas procesadas concurrentemente concurrent.maxsigns=10 # Limite del tamano del documento en bytes en antiguo mecanismo de firma de lotes batch.maxDocSize=50000 Adicionalmente, en este fichero se podr\u00e1n configurar todas aquellas propiedades que se deseen establecer para el gestor de documentos y la implementaci\u00f3n de cach\u00e9 configurados. As\u00ed, por ejemplo, en el gestor de documentos a trav\u00e9s de sistema de ficheros (\u201cFileSystemDocumentManager\u201d) que se proporciona junto al servicio como muestra, se puede configurar un directorio de entrada de los datos y uno de salida para las firmas, as\u00ed como si se desean sobreescribir los datos en el directorio de salida. Tambi\u00e9n se incluye junto al servicio el gestor \u201cLegacyBatchDocumentManager\u201d, orientado a proporcionar al sistema de firma de lotes actual la misma funcionalidad que proporcionaba el sistema de firma de lotes de AutoFirma 1.7 y anteriores. Consulte el apartado II.1.1 Gestor de documentos del servicio para saber m\u00e1s acerca de los gestores de documentos y sobre el gestor de documentos a trav\u00e9s de sistema de ficheros. Si se activase el uso de la cach\u00e9 y se configurase la implementaci\u00f3n por defecto (es.gob.afirma.triphase.server.cache.FileSystemCacheManager), se usar\u00edan las siguientes propiedades adicionales del fichero de configuraci\u00f3n: cache.tmpDir: Ruta absoluta del directorio del servidor donde se almacenar\u00e1n temporalmente los documentos guardados en cach\u00e9. cache.expTime: Tiempo de caducidad en milisegundos de los archivos cacheados. Debe ser un n\u00famero entero y positivo. Valor por defecto: 60000. cache.maxUseToCleaning: Configura cada cu\u00e1ntos usos se limpiar\u00e1 la cach\u00e9. Durante el proceso de limpieza, se eliminar\u00e1 un fichero de la cach\u00e9 si ha excedido el tiempo de caducidad. Valor por defecto: 300. Un desarrollador Java podr\u00eda crear nuevos sistemas de cach\u00e9 e integrarlos en el servicio. Esto le permitir\u00eda a crear procesos optimos que redujesen las transferencias de datos por red. Para implementar un sistema de cach\u00e9, se deber\u00e1 implementar la interfaz es.gob.afirma.triphase.server.cache.DocumentCacheManager, disponible en el m\u00f3dulo \u201cafirma-server-triphase-signer-document\u201d del proyecto. Puede importar este m\u00f3dulo a su proyecto Maven mediante la referencia: <dependency> <groupId>es.gob.afirma</groupId> <artifactId>afirma-server-triphase-signer-document</artifactId> <version>1.8</version> </dependency> Configuraci\u00f3n de los servicios Independientemente de su funci\u00f3n, todos los servicios que acompa\u00f1an al Cliente @firma siguen la misma l\u00f3gica para localizar su fichero de configuraci\u00f3n y el uso de variables de entorno. En este apartado se explica c\u00f3mo configurar estos aspectos comunes a todos ellos. Los servicios del Cliente utilizan uno o varios ficheros de propiedades para su configuraci\u00f3n. Estos ficheros tienen nombres prefijados, pero el integrador puede definir su ubicaci\u00f3n mediante la variable de entorno \u201cclienteafirma.config.path\u201d. El valor asignado a esta variable debe ser la ruta del directorio en el que se encontrar\u00e1n esos ficheros. La variable puede establecerse, por ejemplo, por medio de la variable $JAVA_OPTS al levantar el servidor de aplicaciones. Por ejemplo: JAVA_OPTS=\u201c%JAVA_OPTS% -Dclienteafirma.config.path=/opt/usuarios/cliente/conf\u201d Tambi\u00e9n se puede hacer uso de otras variables declaradas por uno mismo o por el propio servidor de aplicaciones. Por ejemplo: JAVA_OPTS=\u201c%JAVA_OPTS% -Dclienteafirma.config.path=%CATALINA_HOME%/conf/afirma\u201d En caso de no declararse la variable de entorno, se buscar\u00e1n los ficheros en el classpath de la aplicaci\u00f3n, por lo que podr\u00eda introducirse el fichero de configuraci\u00f3n dentro de los WAR de los servicios. Cada uno de los ficheros de configuraci\u00f3n de los servicios del Cliente @firma est\u00e1 compuesto por una serie de propiedades con valores asignados. El valor establecido en esas propiedades ser\u00e1 el utilizado por los servicios, pero tambi\u00e9n es posible heredar parte de la configuraci\u00f3n mediante variables de entorno. Para utilizar el valor de una variable de entorno como parte o todo el valor de una de las propiedades de configuraci\u00f3n, estableceremos en el fichero el nombre de la variable en cuesti\u00f3n delimitado por las part\u00edculas \u201c${\u201d y \u201c}\u201d. Por ejemplo: Se podr\u00eda establecer una propiedad en el arranque del servidor de aplicaciones: JAVA_OPTS=\u201c%JAVA_OPTS% -Dclienteafirma.config.path=%CATALINA_HOME%/conf/afirma \u2013DtempDir=%CATALINA_HOME%/temp/afirma\u201d Mientras, en nuestro fichero de configuraci\u00f3n podr\u00edamos establecer el valor de una propiedad vali\u00e9ndonos de esa propiedad del sistema que hemos establecido: # Se usar\u00e1 como directorio temporal, el subdirectorio \"temp\", localizado # en el directorio configurado por medio de la propiedad de sistema \"tempDir\". tmpdir=${tempDir}/temp Los ficheros de configuraci\u00f3n se leen una \u00fanica vez durante la carga de los servicios por lo que, tras realizar un cambio en ellos, ser\u00e1 necesario reiniciar el servidor de aplicaciones para que los servicios los apliquen. Configuraci\u00f3n del Content Security Policy AutoFirma y los clientes m\u00f3viles atienden las peticiones realizadas desde el JavaScript de despliegue por medio del protocolo \u201cafirma\u201d. Si su servidor web utiliza cabeceras CSP (Content Security Policy) para limitar las fuentes de las que cargar los recursos de sus p\u00e1ginas web, es probable que algunos navegadores Web (se ha identificado el caso concreto de Mozilla Firefox) rechacen la llamada a estas URL externas. En caso de que el servidor no utilice cabeceras CSP, no ser\u00e1 necesario hacer nada para el funcionamiento del Cliente @firma. Si, en cambio, s\u00ed se utilizan, ser\u00e1 necesario agregar a esta cabecera el esquema \u201cafirma://\u201d para garantizar que el navegador permite el acceso a este tipo de URL. Para hacer esto, se agregar\u00e1 la part\u00edcula \u201cafirma://*\u201d en la fuente por defecto de la pol\u00edtica de seguridad. Por ejemplo, si la cabecera con la pol\u00edtica de seguridad fuese: Content-Security-Policy: default-src 'self' *.site.com; img-src * Se modificar\u00eda para convertirlo en: Content-Security-Policy: default-src 'self' *.site.com afirma://*; img-src * Integraci\u00f3n del Cliente @firma en un tr\u00e1mite web El API del Cliente @firma se expone autom\u00e1ticamente al entorno JavaScript al importar en la p\u00e1gina web la biblioteca \u201cautoscript.js\u201d. En esta biblioteca est\u00e1 definido el objeto \u201cAutoScript\u201d y a partir de \u00e9l se podr\u00e1 invocar a todas las operaciones del Cliente. Por ejemplo, para inicializar el Cliente: AutoScript.cargarAppAfirma(); O, para firmar: AutoScript.sign(\u2026); La operaci\u00f3n de inicializaci\u00f3n del cliente no implica una llamada al Cliente @firma, \u00fanicamente inicializa el objeto JavaScript, por lo que puede realizarse durante la carga de la p\u00e1gina. El resto de las llamadas, sin embargo, pueden implicar la invocaci\u00f3n a una aplicaci\u00f3n externa como es el Cliente @firma. La comunicaci\u00f3n con el Cliente @firma se realiza de forma as\u00edncrona. Para poder gestionar esto, todas las funciones que implican llamar al Cliente permiten que se les proporcione una funci\u00f3n callback a trav\u00e9s de la cual obtener el resultado. Para el correcto uso del Cliente @firma deben seguirse siempre las siguientes normas: No lanzar operaciones de forma autom\u00e1tica. Todas las operaciones deber\u00edan desencadenarse a ra\u00edz de una acci\u00f3n del usuario. Por ejemplo, no se debe llamar al m\u00e9todo de firma durante la carga de la p\u00e1gina web. En su lugar, por ejemplo, se deber\u00eda mostrar un bot\u00f3n \u201cFirmar\u201d y, cuando el usuario pulse dicho bot\u00f3n, llamar a la operaci\u00f3n de firma. No se deben lanzar simult\u00e1neamente varias operaciones del Cliente. Hasta que no se obtenga el resultado de una operaci\u00f3n a trav\u00e9s de su funci\u00f3n callback , no se deber\u00eda llamar a la siguiente. As\u00ed, por ejemplo, no se permitir\u00eda hacer lo siguiente: AutoScript.sign(\u2026); // ERROR: La segunda funci\u00f3n se llamar\u00e1 antes de AutoScript.sign(\u2026); // terminar la anterior En su lugar, se deber\u00eda usar: // Funcion callback ejecutada al procesar el resultado de la Firma 1 function callbackFirma1(\u2026) { AutoScript.sign(\u2026); // Firma 2 } \u2026 AutoScript.sign(\u2026, callbackFirma1, \u2026); // Firma 1 Carga de la aplicaci\u00f3n Una vez importado el JavaScript en la p\u00e1gina Web, deberemos inicializar el objeto de comunicaci\u00f3n con el cliente mediante el m\u00e9todo: cargarAppAfirma() Es necesario haber llamado al m\u00e9todo de carga del Cliente antes de realizar cualquier otra de las operaciones soportadas por la aplicaci\u00f3n. A continuaci\u00f3n, se muestran diferentes ejemplos de carga del Cliente: Carga directa desde el c\u00f3digo HTML: \u2026 <body> <script type= \"text/javascript\" > AutoScript.cargarAppAfirma(); </script> \u2026 Carga desde una funci\u00f3n invocada en el momento de firmar: function firmar() { AutoScript.cargarAppAfirma(); AutoScript.sign( dataB64, \" SHA512withRSA \" , \" PAdES \" , null , firmaCorrectaCallback, firmaErrorCallback); } La funci\u00f3n de carga del Cliente s\u00f3lo se deber\u00eda invocar una \u00fanica vez por p\u00e1gina web. As\u00ed, no se debe utilizar este \u00faltimo ejemplo si se va a llamar varias veces al m\u00e9todo de firma. Configuraci\u00f3n de los puertos de comunicaci\u00f3n El tr\u00e1mite web y AutoFirma se comunicar\u00e1n com\u00fanmente a trav\u00e9s de un socket abierto en el equipo. Por defecto, es el propio JavaScript de despliegue el que gestiona qu\u00e9 n\u00famero de puerto debe usar para la apertura del socket, pero el propio tr\u00e1mite web puede establecer una configuraci\u00f3n espec\u00edfica si conoce el entorno de sus usuarios y lo considera conveniente. La aplicaci\u00f3n puede configurar los puertos a utilizar mediante el m\u00e9todo: setPortRange (port1, port2) La llamada a este m\u00e9todo configura que para la comunicaci\u00f3n debe seleccionarse un puerto aleatorio de entre los determinados por el rango port1-port2, ambos inclusive. Si s\u00f3lo se indicase un par\u00e1metro en el m\u00e9todo o si ambos fuesen el mismo n\u00famero de puerto, se utilizar\u00eda siempre ese puerto para la comunicaci\u00f3n. Por defecto, el javascript escoger\u00e1 un puerto en el rango 49152-65535. Sin embargo, al utilizar este m\u00e9todo, se puede establecer cualquier subrango de entre los puertos 2014 y 65535. Este m\u00e9todo puede ser llamado antes o despu\u00e9s del m\u00e9todo de carga, pero debe llamarse antes de invocar a la primera operaci\u00f3n que requiera la apertura de la aplicaci\u00f3n. Una vez invocada una operaci\u00f3n el puerto no se puede establecer ni cambiar. Ejemplos de uso de este m\u00e9todo ser\u00edan: Configuraci\u00f3n de un rango de puertos espec\u00edfico: \u2026 <body> <script type= \"text/javascript\" > AutoScript.setPortRange(61000, 62000); AutoScript.cargarAppAfirma(); </script> \u2026 Configuraci\u00f3n de un puerto concreto: \u2026 <body> <script type= \"text/javascript\" > AutoScript.setPortRange(63117); AutoScript.cargarAppAfirma(); </script> \u2026 Configuraci\u00f3n de los servicios auxiliares de comunicaci\u00f3n La comunicaci\u00f3n entre la p\u00e1gina del tr\u00e1mite web y los clientes de firma m\u00f3viles se realizar\u00e1 a trav\u00e9s de los servicios auxiliares de almacenamiento y recuperaci\u00f3n que habr\u00e1 que desplegar junto a la p\u00e1gina de firma. Tambi\u00e9n se utilizan estos con AutoFirma cuando la aplicaci\u00f3n lo indica expresamente. Por regla general, es buena pr\u00e1ctica desplegar siempre estos servicios y configurarlos en nuestra aplicaci\u00f3n, ya que posibilitan que el tr\u00e1mite de firma sea compatible con diversos entornos de usuario, como con dispositivos m\u00f3viles y versiones antiguas de Internet Explorer y Microsoft Edge Legacy. Para la configuraci\u00f3n de los servicios de comunicaci\u00f3n se usar\u00e1 el m\u00e9todo: setServlets (storageServiceUrl, retrieveServiceUrl) Un ejemplo de configuraci\u00f3n de los servicios auxiliares es: \u2026 <body> <script type= \"text/javascript\" > AutoScript.setServlets( \" https://gobierno.es/afirma-signature-storage/StorageService \", \" https://gobierno.es/afirma-signature-retriever/RetrieveService \" ); AutoScript.cargarAppAfirma(); </script> \u2026 Recuerde que, para evitar que se produzcan errores de cross-site scripting (XSS), los servicios auxiliares de comunicaci\u00f3n deben estar disponibles desde el mismo dominio que la p\u00e1gina web desde la que se realiza la firma. Consulte el apartado 5.3.1 Servicios auxiliares de comunicaci\u00f3n para saber m\u00e1s acerca de los servicios auxiliares de comunicaci\u00f3n y los entornos de usuario para los que son necesarios. Forzado de la comunicaci\u00f3n a trav\u00e9s de los servicios auxiliares Una aplicaci\u00f3n puede forzar a que siempre se utilice la comunicaci\u00f3n a trav\u00e9s de los servicios auxiliares, ya sea para mantener un comportamiento homog\u00e9neo en todos los entornos, para evitar problemas espec\u00edficos con alg\u00fan entorno o para optimizar alg\u00fan proceso de firma concreto. Esto, sin embargo, deber\u00eda evitarse en la medida de lo posible. Se puede forzar la comunicaci\u00f3n a trav\u00e9s de los servicios auxiliares invocando al m\u00e9todo: setForceWSMode(force) Al invocar a este m\u00e9todo con el par\u00e1metro true antes de invocar al m\u00e9todo de carga , el mecanismo de comunicaci\u00f3n quedar\u00e1 prefijado al de servicios auxiliares. Sin embargo, no se recomienda usar este m\u00e9todo salvo en casos muy espec\u00edficos, como cuando se utilizan operaciones de firma trif\u00e1sica con un gestor de documentos a medida. Advertencia: Diversas caracter\u00edsticas y medidas de seguridad de los navegadores Firefox, Chrome y Edge afectan al uso de AutoFirma cuando se comunican a trav\u00e9s de los servicios auxiliares. Si se forzarse al uso de estos servicios, debe evitarse realizar dos o m\u00e1s llamadas a las funciones que invoquen al Cliente a ra\u00edz de una \u00fanica interacci\u00f3n del usuario. Por ejemplo, no se podr\u00eda invocar una llamada a una operaci\u00f3n del Cliente desde la funci\u00f3n callback de una operaci\u00f3n anterior. Google Chrome y Microsoft Edge imponen restricciones adicionales que tambi\u00e9n afectan a la compatibilidad del despliegue con dispositivos m\u00f3viles. Para saber m\u00e1s acerca de estas restricciones y la comunicaci\u00f3n con servidor intermedio, consulte el apartado \u00a1Error! No se encuentra el origen de la referencia. \u00a1Error! No se encuentra el origen de la referencia. . Un ejemplo de forzado de la comunicaci\u00f3n a trav\u00e9s de los servicios auxiliares es: \u2026 <body> <script type= \"text/javascript\" > AutoScript.setForceWSMode( true ); AutoScript.setServlets( \" https://gobierno.es/afirma-signature-storage/StorageService \", \" https://gobierno.es/afirma-signature-retriever/RetrieveService \" ); AutoScript.cargarAppAfirma(); </script> \u2026 Restricci\u00f3n seg\u00fan desfase horario con el servidor Al realizar una firma en el equipo del usuario, se registra en la propia firma la hora del propio equipo (esto no aplica a las operaciones de firma trif\u00e1sicas). En caso de que la hora y/o fecha del equipo se encuentren mal configuradas, es posible que una validaci\u00f3n posterior de la firma provoque errores, sobre todo si se trabaja tambi\u00e9n con sellos de tiempo. Por norma general, esto s\u00f3lo ocurre en casos extremos y no suele ser necesario aplicar ninguna medida para evitar esto. El JavaScript de despliegue del Cliente @firma incluye una funci\u00f3n que compara la hora del equipo del usuario con la del servidor web para as\u00ed detectar el desfase horario que hay entre ambos. En caso de detectar un desfase se puede advertir al usuario o incluso bloquear la operaci\u00f3n de firma. Para hacer la comprobaci\u00f3n de desfase horario puede utilizar el m\u00e9todo JavaScript: checkTime(checkType, maxMillis, checkURL) Este m\u00e9todo debe invocarse antes del m\u00e9todo de carga del Cliente y puede recibir como par\u00e1metros: checkType Tipo de verificaci\u00f3n que se desea realizar. Admite los valores: AutoScript.CHECKTIME_NO: No realiza ning\u00fan tipo de comprobaci\u00f3n. Este es el valor por defecto. AutoScript.CHECKTIME_RECOMMENDED: Realiza la comprobaci\u00f3n horaria y, en caso de encontrar un desfase, pedir\u00e1 al usuario que lo corrija antes de continuar. AutoScript.CHECKTIME_OBLIGATORY: Realiza la comprobaci\u00f3n horaria y, en caso de encontrar un desfase, pedir\u00e1 al usuario que lo corrija y evitar\u00e1 que el Cliente se ejecute en cualquier llamada posterior. maxMillis Milisegundos m\u00e1ximos que se permiten de desfase. Se recomienda que se indique un periodo m\u00ednimo de 1 minuto (60.000 milisegundos) para facilitar la correcci\u00f3n de la hora en el equipo del usuario. El valor por defecto son 5 minutos (300.000 milisegundos). checkURL URL contra la que se realizara la petici\u00f3n para obtener la hora del servidor. Por defecto, se usar\u00e1 la URL de la p\u00e1gina cargada en el navegador. Si cree que es posible que esto ocasione un mal funcionamiento por parte de su aplicaci\u00f3n, indique otra URL dentro de su dominio. Un ejemplo de uso ser\u00eda: \u2026 <body> <script type= \"text/javascript\" > AutoScript.checkTime(AutoScript.CHECKTIME_RECOMMENDED, 300000); AutoScript.cargarAppAfirma(); </script> \u2026 Debe notarse que, seg\u00fan la configuraci\u00f3n del servidor web, es posible que no se pueda determinar la hora a trav\u00e9s de la informaci\u00f3n que este proporciona. De ser as\u00ed, no se mostrar\u00e1 ninguna advertencia al usuario para no perjudicar la realizaci\u00f3n del tr\u00e1mite. Tambi\u00e9n es posible que un servidor s\u00f3lo transmita la hora en la primera carga de la p\u00e1gina y no cuando esta se refresca. Si ese fuese el caso, s\u00f3lo se advertir\u00eda de la diferencia horaria en la primera carga de la p\u00e1gina y no si el usuario refrescase la p\u00e1gina desde su navegador. T\u00e9ngase en cuenta tambi\u00e9n que el desfase horario se calcula en el momento de invocar al m\u00e9todo checkTime. As\u00ed pues, si el usuario modificase la hora de su sistema despu\u00e9s de la comprobaci\u00f3n, podr\u00eda realizar operaciones de firma sin que se le mostrasen advertencias. En caso de que desee bloquear de forma completa la firma de datos cuando se detecte una hora incorrecta en el sistema, aseg\u00farese de que el servidor de la p\u00e1gina web de comprobaci\u00f3n de hora siempre env\u00eda la hora en las respuestas de sus peticiones y llame al m\u00e9todo checkTime antes de cada operaci\u00f3n de firma. Selecci\u00f3n del almac\u00e9n de claves El Cliente @firma accede al almac\u00e9n de claves del navegador web o el sistema operativo del usuario para ofrecer sus certificados en las operaciones de firma. Los almacenes utilizados por defecto por cada una de las aplicaciones son: AutoFirma : Si se utiliza Firefox, se acceder\u00e1 al almac\u00e9n de claves interno del navegador y se buscar\u00e1n las tarjetas inteligentes configuradas como dispositivos de seguridad en este. En cualquier otro caso, se usar\u00e1 el del sistema operativo. Windows: CAPI ( Cryptography Application Programming Interface ) macOS: Llavero de macOS Linux: Almac\u00e9n compartido NSS Cuando se detecte un DNIe o una tarjeta CERES conectada al equipo, AutoFirma acceder\u00e1 a ella y dar\u00e1 la posibilidad de firmar con sus certificados, independendientemente de que tambi\u00e9n se muestren los certificados del navegador o del sistema operativo. Cliente m\u00f3vil Android : Utiliza el almac\u00e9n de claves de Android. Cliente m\u00f3vil iOS : Utiliza el almac\u00e9n de la propia aplicaci\u00f3n. Aunque se recomienda no seleccionar el uso de un almac\u00e9n de claves distinto al por defecto , AutoFirma permite que se configure otro de los almacenes soportados. Los Cliente m\u00f3viles, en cambio, s\u00f3lo admiten el almac\u00e9n por defecto. Para establecer el almac\u00e9n de claves al que debe acceder AutoFirma, se deber\u00e1 utilizar el siguiente m\u00e9todo antes de invocar a cualquier operaci\u00f3n de firma o selecci\u00f3n de certificado: setKeyStore (keystore); En esta funci\u00f3n: keystore Tipo de almac\u00e9n al que se debe URL de acceso a los datos a descargar. En el objeto AutoScript se han definido las siguientes claves para configurar almacenes de claves: KEYSTORE_WINDOWS Almac\u00e9n de certificados CAPI. Compatible \u00fanicamente con sistemas Microsoft Windows. KEYSTORE_APPLE Llavero de macOS. Compatible \u00fanicamente con sistemas Apple macOS. KEYSTORE_SHARED_NSS Almac\u00e9n NSS del sistema. Compatible \u00fanicamente con sistemas Linux. KEYSTORE_MOZILLA Almac\u00e9n NSS de Mozilla (Mozilla Firefox, Mozilla Thunderbird, etc.). KEYSTORE_PKCS12 Almac\u00e9n en fichero PKCS#12 / PFX (Personal File Exchange). KEYSTORE_JAVA Almac\u00e9n en fichero JKS (Java KeyStore). KEYSTORE_JCEKS Almac\u00e9n en fichero JCEKS (Java Cryptography Extension KeyStore). KEYSTORE_JAVACE Almac\u00e9n en fichero de tipo CaseExactJKS (Case Exact Java KeyStore). KEYSTORE_PKCS11 Almac\u00e9n de claves compatible PKCS#11 (tarjetas inteligentes, aceleradora criptogr\u00e1fica\u2026). Si se selecciona un almac\u00e9n no disponible en el entorno del usuario, AutoFirma dar\u00e1 error al intentar acceder al almac\u00e9n de claves. Los clientes m\u00f3viles \u00fanicamente ignorar\u00e1n esta opci\u00f3n de la configuraci\u00f3n. Determinados tipos de almac\u00e9n permiten indicar el fichero o biblioteca en disco asociado al almac\u00e9n. Este fichero o biblioteca debe indicarse mediante su ruta absoluta en el sistema del usuario, como parte del mismo par\u00e1metro, a continuaci\u00f3n del tipo de almac\u00e9n y separados por signo dos puntos (\u2018:\u2019), siguiendo el patr\u00f3n: TIPO_ALMACEN:RUTA_ALMACEN Los almacenes que permiten indicar el fichero o biblioteca que se debe utilizar son: KEYSTORE_APPLE Permite indicar un fichero de tipo llavero en el que se encuentran los certificados de firma. Si no se indica ning\u00fan fichero se usa el llavero general del sistema. KEYSTORE_PKCS12 Permite indicar el almac\u00e9n en fichero de tipo PKCS#12/PFX (normalmente con extensiones \u201cp12\u201d o \u201cpfx\u201d) en el que se encuentran los certificados de firma. Si no se indica ning\u00fan fichero AutoFirma solicitar\u00e1 al usuario que seleccione uno mediante un di\u00e1logo gr\u00e1fico. KEYSTORE_PKCS11 Permite indicar la biblioteca que se debe utilizar para acceder al dispositivo que almacena los certificados de firma. Si no se indica ning\u00fan fichero, el Cliente @firma solicitar\u00e1 al usuario que seleccione uno mediante un di\u00e1logo gr\u00e1fico. Es importante rese\u00f1ar que la biblioteca PKCS#11 es dependiente del sistema operativo y de su arquitectura, por lo que, si se indica, por ejemplo, una biblioteca PKCS#11 como una DLL (Dynamic Link Library) de 32 bits, no funcionar\u00e1 ni en Linux ni en macOS, pero tampoco en Windows si se utiliza AutoFirma 64 bits. Advertencia : Los almacenes que hacen uso de un fichero o biblioteca requieren una contrase\u00f1a de acceso. Esta contrase\u00f1a se preguntar\u00e1 directamente al usuario cuando se requiera el acceso al almac\u00e9n. A continuaci\u00f3n, se muestran ejemplos de selecci\u00f3n del almac\u00e9n de claves: Configuraci\u00f3n del almac\u00e9n de Windows: AutoScript.cargarAppAfirma(); AutoScript.setKeyStore(AutoScript.KEYSTORE_WINDOWS); \u2026 AutoFirma.sign (dataB64, \"SHA512withRSA\", \"CAdES\", null , successCallback, errorCallback); Configuraci\u00f3n de un almac\u00e9n PKCS#12 en una ruta conocida: AutoScript.cargarAppAfirma(); AutoScript.setKeyStore(AutoScript.KEYSTORE_PKCS12 + \":/usr/home/usuario/almacen.p12\"); \u2026 AutoFirma.sign (dataB64, \"SHA512withRSA\", \"CAdES\", null, successCallback, errorCallback); Configuraci\u00f3n de un controlador PKCS#11 para el acceso de dispositivo critprogr\u00e1fico: AutoScript.cargarAppAfirma(); AutoScript.setKeyStore(AutoScript.KEYSTORE_PKCS11 + \":C:\\\\Windows\\\\System32\\\\PkcsV2GK.dll\"); \u2026 AutoFirma.sign (dataB64, \"SHA512withRSA\", \"CAdES\", null, successCallback, errorCallback); En sistemas Windows, puede darse el caso de que el usuario utilice un perfil temporal, con lo que el usuario no contar\u00e1 con certificados ni tarjetas instaladas en el almac\u00e9n de Windows. Cuando el Cliente @firma detecte este caso, har\u00e1 uso del controlador de tarjetas integrado en la aplicaci\u00f3n (JMulticard) para acceder a un DNIe o tarjeta CERES insertada en un lector del equipo. Adem\u00e1s, buscar\u00e1 en el sistema una serie predeterminada de bibliotecas PKCS#11 y tratar\u00e1 de utilizar las tarjetas inteligentes insertadas y asociadas a estas bibliotecas. Uso de tarjetas inteligentes AutoFirma tiene acceso a las claves de las tarjetas inteligentes a partir de sus controladores cuando est\u00e1n instalados en el sistema. Para utilizar los certificados en tarjeta en las operaciones de firma, se puede acceder a ellos desde un almac\u00e9n PKCS#11 configurado o desde cualquiera de los almacenes de sistema disponibles: KEYSTORE_WINDOWS: El almac\u00e9n de Windows carga autom\u00e1ticamente todas las tarjetas insertadas para las que se haya instalado su controlador CSP o el MiniDriver correspondiente de Windows Update. En caso de detectarse un DNIe insertado o una tarjeta CERES, se har\u00e1 uso de los mismos a partir de un controlador interno de la aplicaci\u00f3n para corregir problemas detectados con Java en los controladores oficiales. KEYSTORE_MOZILLA/ KEYSTORE_SHARED_NSS: Los almacenes de Mozilla se componen de un almac\u00e9n interno y el conjunto de controladores PKCS#11 de las tarjetas instaladas en el sistema. AutoFirma cargar\u00e1 autom\u00e1ticamente el almac\u00e9n interno y todos los dispositivos detectados. Debido a problemas de incompatibilidad detectados entre Java y los controladores oficiales de DNIe y tarjetas CERES, en caso de detectarse insertada cualquiera de estas tarjetas se utilizar\u00e1 un controlador interno de la aplicaci\u00f3n, ignor\u00e1ndose los PKCS#11 configurados en el almac\u00e9n de Mozilla. En caso de detectar alguna de estas tarjetas tambi\u00e9n se ignorar\u00e1n el resto de los dispositivos insertados para evitar problemas entre los distintos controladores. KEYSTORE_APPLE: El llavero de macOS se compone de un almac\u00e9n internos y el conjunto de controladores de las tarjetas insertadas. Debido a problemas detectados con Java y los controladores oficiales de DNIe y tarjetas CERES, en caso de detectarse insertada cualquiera de estas tarjetas se utilizar\u00e1 un controlador interno de la aplicaci\u00f3n. Por regla general, se considera que s\u00f3lo deber\u00eda haber una tarjeta inteligente insertada en el momento de firmar. En caso de encontrarse varias, se dar\u00e1 prioridad al DNIe y las tarjetas CERES. En dichos casos, es posible que los certificados del resto de tarjetas no aparezcan disponibles para firmar o den error durante la firma. El uso de las tarjetas CERES de la FNMT y del DNIe se realiza a trav\u00e9s de las bibliotecas de JMulticard, por lo que no es necesario tener instalados sus controladores en el equipo para poder firmar con ellas. Advertencia : Existen controladores de tarjetas inteligentes que, tras la inserci\u00f3n de la tarjeta, registran en el almac\u00e9n de Windows los certificados que contiene. A partir de entonces, los certificados se muestran en el almac\u00e9n incluso sin tener la tarjeta insertada. Se ha encontrado que en Windows 10 21H1 y superiores este comportamiento produce problemas con Java y AutoFirma, ya que al intentar cargar el almac\u00e9n de claves se intentan cargar esos certificados que en realidad no se encuentran en el almac\u00e9n. El resultado es que el proceso de carga puede llevar varios minutos, lo que se traduce en que se tarda ese tiempo en mostrarse el di\u00e1logo de selecci\u00f3n de certificados o realizar la firma si el certificado se seleccionaba directamente. Subsiguientes firmas no conllevan esperar este tiempo, ya que para entonces el almac\u00e9n ya est\u00e1 cargado, pero volver\u00e1 a suceder si se recarga el almac\u00e9n. Para solventar esta situaci\u00f3n es necesario eliminar esos certificados del almac\u00e9n de Windows cuando la tarjeta no se encuentra insertada. Advertencia: A partir de cierta versi\u00f3n del controlador de la tarjeta CERES se ha apreciado que, si se tiene en el almac\u00e9n de Windows instalado un certificado que tambi\u00e9n se encuentra en el almac\u00e9n de la tarjeta inteligente, el certificado local se elimina tras el uso de la tarjeta. Este comportamiento no est\u00e1 relacionado con el uso de AutoFirma. Uso del DNIe AutoFirma utiliza la biblioteca JMulticard para permitir firmar con DNIe sin necesidad de que los usuarios tengan instalados los controladores de la tarjeta. Esta biblioteca se utilizar\u00e1 siempre que se encuentre un DNIe insertado en un lector del equipo y se inserte su PIN en el di\u00e1logo de JMulticard. La aplicaci\u00f3n solicita el PIN del DNIe antes de listar los certificados del almac\u00e9n y de que el usuario indique qu\u00e9 certificado desea utilizarla para firmar. Este comportamiento emula el de los controladores PKCS#11 de las tarjetas en donde el PIN es necesario para listar los certificados contenidos por la tarjeta y sigue la l\u00f3gica de que si un usuario ha insertado el DNIe en el lector es porque lo desea utilizar. Cuando el usuario inserta el PIN, se listan sus certificados y se abre el canal seguro con la tarjeta y, en el momento de firmar, se utiliza este canal seguro para realizar la operaci\u00f3n de firma. A continuaci\u00f3n, se cierra el canal seguro. Las operaciones de firma realizadas posteriormente desde la misma instancia del AutoFirma, solicitar\u00e1n el PIN de la tarjeta s\u00f3lo en el momento de realizar la firma, momento en el cual se volver\u00e1 a abrir el canal seguro con la tarjeta. Si se recargase el almac\u00e9n por medio de la opci\u00f3n correspondiente del di\u00e1logo de selecci\u00f3n de certificados, el controlador se reiniciar\u00eda y volver\u00eda a pedir el PIN de la tarjeta para listar los certificados. El di\u00e1logo de solicitud de PIN de JMulticard mostrar\u00e1 una casilla para indicar que se desea recordar la contrase\u00f1a de la tarjeta durante el resto de la sesi\u00f3n. Esta casilla funciona cuando las firmas se realizan dentro de la misma operaci\u00f3n (firma de lotes, contrafirmas de varios nodos\u2026). Para que se recuerde la contrase\u00f1a a lo largo de distintas operaciones es necesario que se utilice simult\u00e1neamente la funci\u00f3n \u201csetStickySignatory()\u201d, descrita en el apartado 6.2.1 Firma de m\u00faltiples documentos (firma masiva) . En el momento en el que se cierra la instancia de AutoFirma (se cambia de p\u00e1gina, se utiliza comunicaci\u00f3n por servidor intermedio, se cumple el tiempo m\u00e1ximo de inactividad en la comunicaci\u00f3n por sockets, etc.), dejar\u00e1 de surtir efecto la configuraci\u00f3n de \u201csetStickySignatory()\u201d y se volver\u00e1 a pedir el PIN de la tarjeta. En el caso de ejecutar Autofirma usando el almac\u00e9n de Windows y cancelar el di\u00e1logo de PIN del DNIe de JMulticard, se cargar\u00e1 el almac\u00e9n del sistema normalmente. Si se tiene instalado el controlador oficial del DNIe en el equipo esto puede implicar que los certificados del DNIe se listen tambi\u00e9n en el di\u00e1logo de selecci\u00f3n de certificados ya que ser\u00e1 el controlador oficial el que los cargue. En estos casos, tambi\u00e9n se usar\u00e1 el controlador oficial para realizar la firma. Firma electr\u00f3nica La operaci\u00f3n de firma electr\u00f3nica nos permite generar la firma electr\u00f3nica de unos datos, que pueden haber sido proporcionados por la aplicaci\u00f3n o seleccionados por el usuario. Para ejecutar la operaci\u00f3n de firma se utiliza la funci\u00f3n JavaScript: sign(dataB64, algorithm, format, params, successCb, errorCb); En esta funci\u00f3n: dataB64 Datos que se desean firmar codificados en Base64. Si los datos que necesita firmar son un texto (texto plano, XML, JSON, etc), puede convertirlos a Base64 por medio de las funciones de utilidad proporcionadas en el JavaScript de despliegue, descritas en el apartado 6.9.2 Conversi\u00f3n de un texto a cadena Base64 . Si no se proporciona este par\u00e1metro (se usa null) o si se pasa una cadena vac\u00eda, el Cliente @firma mostrar\u00e1 al usuario un di\u00e1logo de selecci\u00f3n de fichero para que seleccione el documento que desea firmar. Salvo en casos concretos, no se recomienda dejar en manos del usuario la selecci\u00f3n del fichero a firmar. Incluso si es necesario hacerlo, se recomienda hacer que el usuario cargue los datos previamente en servidor mediante un componente HTML y seguidamente se realice una operaci\u00f3n de firma trif\u00e1sica. Para la compatibilidad con dispositivos m\u00f3viles, nunca se deben proporcionar nulos o cadena vac\u00eda. algorithm Algoritmo de firma. Consulte el apartado dedicado a los algorirmos de firma soportados para el formato de firma que desee utilizar. format Formato de firma. Consulte el apartado 8 Formatos de firma para consultar aquellos disponibles. params Par\u00e1metros adicionales para la configuraci\u00f3n de la operaci\u00f3n de firma y caracter\u00edsticas particulares del formato de firma seleccionado. Si se introduce un nulo, se usar\u00e1 la configuraci\u00f3n por defecto para el formato de firma establecido. Consulte el apartado 7.1 Paso de par\u00e1metros adicionales para saber c\u00f3mo realizar el paso de par\u00e1metros y el apartado de informaci\u00f3n espec\u00edfica del formato de firma que desee realizar para saber los par\u00e1metros soportados por el formato en cuesti\u00f3n. successCb Funci\u00f3n callback JavaScript que se ejecutar\u00e1 una vez se obtenga el resultado de la operaci\u00f3n de firma. Esta funci\u00f3n recibir\u00e1 hasta tres par\u00e1metros: En el primer par\u00e1mero se recibe la firma resultante codificada en Base64. En el segundo par\u00e1metro se recibe el certificado usado para firmar codificado en Base64. En el tercer par\u00e1metro, opcionalmente, se recibir\u00e1 un objeto JSON con el nombre del fichero firmado (en caso de que lo haya seleccionado el usuario). errorCb Funci\u00f3n callback JavaScript que se ejecutar\u00e1 cuando ocurra un error durante la operaci\u00f3n de firma. Esta funci\u00f3n recibir\u00e1 hasta dos par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. A continuaci\u00f3n, se muestran distintos ejemplos de firma electr\u00f3nica: Firma electr\u00f3nica de datos: \u2026 var dataB64 = \"SG9sYSBNdW5kbyE=\"; // Datos a firmar AutoScript.sign (dataB64, \"SHA512withRSA\", \"CAdES\", \"mode=implicit\\nexpPolicy=FirmaAGE\", successCallback, errorCallback); \u2026 Firma electr\u00f3nica de un texto: \u2026 var dataB64 = AutoScript.getBase64FromText(\"Hola Mundo!!\"); AutoScript.sign (dataB64, \"SHA512withRSA\", \"XAdES\", null , successCallback, errorCallback); \u2026 Firma electr\u00f3nica cargando datos desde un fichero: \u2026 // Funci\u00f3n que se ejecutar\u00e1 cuando la firma termine correctamente. // Almacenara la firma, el certificado y el nombre del fichero firmado en // campos de un formulario y lo enviar\u00e1 a servidor function sendSignatureCallback (signatureB64, certificateB64, extraData) { // Obtenemos el nombre del fichero cargado para var filename = !!extraData ? extraData.filename : null ; document.getElementByName(\"signatureField\").value = signatureB64; document.getElementByName(\"certificateField\").value = certificadteB64; if (filename) { document.getElementByName(\"filenameField\").value = filename; } document.getElementByName(\"formulario\").submit(); } // Funcion que se ejecutara cuando el proceso de firma falle function showErrorCallback (type, message) { showError(message); // Funcion de la aplicaci\u00f3n para mostrar errores } \u2026 // Llamamos a la operacion de firma AutoScript.sign ( null , \"SHA512withRSA\", \"CAdES\", null , sendSignatureCallback, showErrorCallback); \u2026 Es importante recalcar que la aplicaci\u00f3n que solicita la firma no sabr\u00e1 del resultado de la operaci\u00f3n hasta que el JavaScript de despliegue invoque a la funci\u00f3n callback de \u00e9xito o de error. Es probable que no se desee que el usuario interaccione de ninguna manera con la aplicaci\u00f3n hasta haber finalizado la firma, por lo que se recomienda que se le muestre un mensaje de espera justo antes de llamar a la operaci\u00f3n de firma (pudiendo incluso bloquear la posibilidad de interaccionar con la interfaz de la aplicaci\u00f3n). Este mensaje no deber\u00eda retirarse hasta recibir una respuesta de la aplicaci\u00f3n, por lo que se eliminar\u00eda en las funciones callback de \u00e9xito y de error. A partir de entonces, el usuario podr\u00eda navegar de nuevo libremente. La espera de la aplicaci\u00f3n a la respuesta del cliente de firma deber\u00eda aplicarse a cualquier operaci\u00f3n de firma, cofirma, contrafirma o firma de lote y es especialmente importante cuando se fueza el modo de comunicaci\u00f3n entre la aplicaci\u00f3n y el cliente sea a trav\u00e9s de servidor intermedio o cuando se desea que nuestra aplicaci\u00f3n sea compatible con los Clientes m\u00f3viles. Firma de m\u00faltiples documentos (firma masiva) Cuando se deseen firmar multiples datos a trav\u00e9s del Cliente @firma debe tenerse en cuenta un aspecto importante: el env\u00edo de datos a firmar debe realizarse siempre secuencialmente, nunca en paralelo. Es decir, no enviaremos a firmar un dato hasta no haber recibido el resultado de una operaci\u00f3n anterior. El modo com\u00fan y recomendado de realizar la firma secuencial de m\u00faltiples documentos es solicitar la firma de un documento en la funci\u00f3n callback en la que se recibe el resultado de la operaci\u00f3n anterior. Un ejemplo de uso es: // Posicion del elemento que se esta procesando var idx = 0; // Array con los valores a firmar var dataArray = [ \"UHJpbWVyIGRhdG8gZGUgcHJ1ZWJh\", \"U2VndW5kbyBkYXRvIGRlIHBydWViYQ==\", \"VGVyY2VyIGRhdG8gZGUgcHJ1ZWJh\", \"Q3VhcnRvIGRhdG8gZGUgcHJ1ZWJh\" ]; // Iniciamos la firma del primer dato a firmar AutoScript.setStickySignatory( true ); AutoScript.sign( dataArray[idx], \"SHA512withRSA\", \"CAdES\", paramsParam, successCallback, showErrorCallback); \u2026 // Funci\u00f3n callback a ejecutar cuando termine correctamente una firma function successCallback (signatureB64) { // Procesamos la firma \u2026 // Mandamos a firmar el siguiente dato (si quedase alguno) ++idx; if (idx < dataArray.length) { AutoScript.sign( dataArray[idx], \"SHA512withRSA\", \"CAdES\", paramsParam, successCallback, showErrorCallback); } else { // Ya se han generado todas las firmas \u2026 } } // Funci\u00f3n callback a ejecutar cuando falle la firma function showErrorCallback (errorType, errorMsg) { // Mostramos el error alert(\u201cError durante la firma de un documento. Se interrumpir\u00e1 el proceso de firma.\u201d); } Para posibilitar que el usuario s\u00f3lo deba seleccionar el certificado de firma en una ocasi\u00f3n y no para operaci\u00f3n individual, se deber\u00e1 dejar prefijado este certificado mediante el m\u00e9todo: setStickySignatory (sticky); En esta funci\u00f3n: sticky Indica si se debe fijar el siguiente certificado que se utilice. Si se indica el valor \u201ctrue\u201d, el pr\u00f3ximo certificado que seleccione mediante un filtro o que seleccione directamente el usuario (en una operaci\u00f3n de firma o selecci\u00f3n de certificado) quedar\u00e1 fijado y se utilizar\u00e1 para todas las operaciones posteriores. Si se indica el valor false, se libera el certificado y se volver\u00e1 a solicitar al usuario en cada una de las siguientes operaciones. Esta funci\u00f3n no devuelve nada y s\u00f3lo es compatible con AutoFirma. En una operaci\u00f3n de firma con los clientes m\u00f3viles, el usuario deber\u00e1 seleccionar el certificado por cada operaci\u00f3n de firma individual. Al realizar m\u00faltiples firmas con tarjetas inteligentes, es posible que se pida el PIN de la tarjeta por cada operaci\u00f3n individual, seg\u00fan sea el comportamiento definido por el controlador de la propia tarjeta. En caso de usarse una tarjeta CERES o el DNIe, el controlador ser\u00e1 JMulticard y este mostrar\u00e1 en el di\u00e1logo de selecci\u00f3n de PIN una casilla que podr\u00e1 seleccionarse para que la aplicaci\u00f3n recuerde el PIN y no lo vuelva a solicitar si se ha llamado a la funci\u00f3n \u201csetStickySignatory()\u201d con el valor \u201ctrue\u201d. Adicionalmente, para la generaci\u00f3n de multifirmas dentro de un procedimiento masivo es interesante indicar el valor \u201cAUTO\u201d como formato de firma. Al hacerlo, las cofirmas y contrafirmas se realizar\u00e1n en el mismo formato que la firma sobre la que se opera. El valor \u201cAUTO\u201d no es v\u00e1lido para firmas simples. Puede saber m\u00e1s sobre esta opci\u00f3n en el apartado 8 Formatos de firma . Otra alternativa para firmar m\u00faltiples documentos es la operaci\u00f3n de 6.5 Firma de lotes predefinidos . Firma trif\u00e1sica Una operaci\u00f3n de firma requiere preparar la estructura de la firma conforme el formato de firma seleccionado, cifrar con la clave privada del certificado del usuario parte de esa estructura e introducir esos datos cifrados dentro de la misma estructura. Habitualmente, estos tres pasos se ejecutan de forma conjunta en el cliente y por eso decimos que la firma se ha ejecutado en una \u00fanica fase (monof\u00e1sica). Una alternativa a lo anterior ser\u00eda separar estos tres pasos y delegar en un servidor aquello que no requiera datos del usuario. As\u00ed, preparar la estructura e introducir los datos cifrados en ella (fases 1 y 3) se puede realizar en servidor, mientras que el cifrado de los datos con la clave privada del certificado del usuario se realizar\u00eda en local (la clave del certificado nunca sale del equipo del usuario). Este mecanismo en tres pasos es lo que se denomina firma trif\u00e1sica. Las firmas realizadas por AutoFirma se realizan, por defecto, de forma monof\u00e1sica. Sin embargo, el AutoFirma tambi\u00e9n permite realizar las firmas de forma trif\u00e1sica y los clientes m\u00f3viles las realizar\u00e1n casi en todos los casos de este modo. Las operaciones de firma trif\u00e1sicas ayudan a reducir el env\u00edo de informaci\u00f3n entre el Cliente y el servidor cuando los datos a firmar se encuentran en servidor y/o cuando la firma generada por el usuario va a enviarse a ese servidor. Sin embargo, ya que parte de la operaci\u00f3n trif\u00e1sica se realiza en servidor, puede suponer un problema si se recibe un volumen de peticiones mayor al que puede procesar, ya que aumentan sus necesidades de memor\u00eda y procesador. La realizaci\u00f3n de firmas trif\u00e1sicas requiere el despliegue del servicio de firma trif\u00e1sica descrito en el apartado 5.3.2 Servicios de firma trif\u00e1sica y firma de lotes . As\u00ed mismo, se deber\u00e1n cumplir las siguientes condiciones en la operaci\u00f3n de firma: Se podr\u00e1 proporcionar una referencia a los datos a firmar en lugar de los propios datos. El tipo de referencia variar\u00e1 seg\u00fan la clase gestora de documentos configurada en el servicio de firma trif\u00e1sica. Con la clase gestora por defecto se seguir\u00e1n requiriendo los propios datos. Se usar\u00e1 el nombre del formato de firma trif\u00e1sica en lugar del nombre de formato tradicional: Para firmas CAdES: CAdEStri Para firmas XAdES: XAdEStri Para firmas PAdES: PAdEStri Para firmas de factura electr\u00f3nica: FacturaEtri NOTA: En los clientes m\u00f3viles se realizar\u00e1 firma trif\u00e1sica indepedencientemente de que se use el nombre monof\u00e1sico del formato cuando la aplicaci\u00f3n cliente no soporte su generaci\u00f3n monof\u00e1sica. Se configurar\u00e1 el par\u00e1metro adicional \u201cserverUrl\u201d con la URL del servicio de firma trif\u00e1sica. Para saber m\u00e1s de los par\u00e1metros adicionales de configuraci\u00f3n consulte el apartado 7.1 Paso de par\u00e1metros adicionales . Un ejemplo de operaci\u00f3n de firma trif\u00e1sica ser\u00eda: \u2026 // Configuramos una firma CAdES trif\u00e1sica implicita var params = \"mode=implicit\\nserverUrl=https://servidor.com/afirma/afirma-server-triphase-signer/SignatureService\"; AutoScript.sign (dataRefB64, \"SHA512withRSA\", \"CAdEStri\", params, showSignResultCallback, showErrorCallback); \u2026 El proceso trif\u00e1sico de firma se encuentra disponible para las operaciones de firma, cofirma y contrafirma. Consulte m\u00e1s informaci\u00f3n sobre la operativa interna del proceso de firma trif\u00e1sica en el apartado ANEXO II Firma trif\u00e1sica . Cofirma electr\u00f3nica La cofirma es la operaci\u00f3n mediante la cual se agrega una nueva firma a una firma previa. La firma generada est\u00e1 al mismo nivel que la firma original. Esta ser\u00eda la operaci\u00f3n mediante la cual dos o m\u00e1s firmantes muestran su acuerdo con un documento. La cofirma consiste en agregar la informaci\u00f3n de firma de un firmante a una firma ya existente. As\u00ed, ser\u00e1 necesario que una persona firme el documento generando as\u00ed la informaci\u00f3n de firma. El segundo firmante deber\u00e1 cofirmar la firma generada por el primer firmante, el tercero cofirmar\u00e1 la firma generada por el segundo y as\u00ed sucesivamente. Esta operaci\u00f3n se puede realizar por entero en el lado cliente o a trav\u00e9s del proceso de firma trif\u00e1sica descrito en el ANEXO II Firma trif\u00e1sica . La funci\u00f3n JavaScript mediante la cual se realizan las cofirmas es: cosign(signB64, algorithm, format, params, successCb, errorCb); En esta funci\u00f3n: signB64 Firma electr\u00f3nica que se desea cofirmar codificada en Base64. Una firma en Base64 puede ser el resultado obtenido por cualquier operaci\u00f3n de firma, cofirma o contrafirma previa. Si no se proporciona este par\u00e1metro (se usa null) o si se pasa una cadena vac\u00eda, el Cliente @firma mostrar\u00e1 al usuario un di\u00e1logo de selecci\u00f3n de fichero para que seleccione el fichero de firma que desea cofirmar. Salvo en casos concretos, no se recomienda dejar en manos del usuario la selecci\u00f3n del fichero de firma. Incluso si es necesario hacerlo, se recomienda hacer que el usuario cargue la firma previamente en servidor mediante un componente HTML y seguidamente se realice una operaci\u00f3n de cofirma trif\u00e1sica. Para la compatibilidad con dispositivos m\u00f3viles, nunca se deben proporcionar nulos o cadena vac\u00eda. algorithm Algoritmo de firma. Consulte el apartado dedicado a los algorirmos de firma soportados para el formato de firma que desee utilizar. format Formato de firma. Consulte el apartado 8 Formatos de firma para consultar aquellos disponibles. Si no conoce el formato de firma utilizado en la firma original, indique el valor \u201cAUTO\u201d para especificar que se utilice el mismo formato que la firma original. Por norma general, no se puede cofirmar una firma en un formato distinto al que se us\u00f3 para generar dicha firma. params Par\u00e1metros adicionales para la configuraci\u00f3n de la operaci\u00f3n de cofirma y caracter\u00edsticas particulares del formato de firma seleccionado. Si se introduce un nulo, se usar\u00e1 la configuraci\u00f3n por defecto para el formato de firma establecido. Consulte el apartado 7.1 Paso de par\u00e1metros adicionales para saber c\u00f3mo realizar el paso de par\u00e1metros y el apartado de informaci\u00f3n espec\u00edfica del formato de firma que desee realizar para saber los par\u00e1metros soportados por el formato en cuesti\u00f3n. successCb Funci\u00f3n callback JavaScript que se ejecutar\u00e1 una vez se obtenga el resultado de la operaci\u00f3n de cofirma. Esta funci\u00f3n recibir\u00e1 hasta tres par\u00e1metros: En el primer par\u00e1mero se recibe la firma resultante codificada en Base64. En el segundo par\u00e1metro se recibe el certificado usado para cofirmar codificado en Base64. En el tercer par\u00e1metro, opcionalmente, se recibir\u00e1 un objeto JSON con el nombre del fichero de firma cofirmado en caso de que lo haya seleccionado el usuario. errorCb Funci\u00f3n callback JavaScript que se ejecutar\u00e1 cuando ocurra un error durante la operaci\u00f3n de firma. Esta funci\u00f3n recibir\u00e1 hasta dos par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. A continuaci\u00f3n, se muestran distintos ejemplos de operaciones de cofirma: Cofirma electr\u00f3nica de una firma ya cargada: \u2026 var signatureB64 = \u2026 // Firma electr\u00f3nica a cofirmar AutoScript.cosign(signatureB64, \u201cSHA512withRSA\u201d, \u201cAUTO\u201d, null , successCallback, errorCallback); \u2026 Cofirma electr\u00f3nica cargando una firma desde un fichero: \u2026 AutoScript.cosign( null , \u201cSHA512withRSA\u201d, \u201cXAdES\u201d, null , successCallback, errorCallback); \u2026 Cofirma electr\u00f3nica del resultado de una firma: \u2026 // Funcion que realiza la cofirma a partir de los datos de firma function cosignCallback (signatureB64) { AutoScript.cosign( signatureB64, \u201cSHA512withRSA\u201d, \u201cXAdES\u201d, null , sendDataCallback, showErrorCallback ); } \u2026 // Funci\u00f3n que almacena los datos generados por la cofirma en el campo // \u201cresultId\u201d de un formulario y lo envia function sendDataCallback (cosignB64, certificateB64) { document.getElementById(\u201cresultId\u201d).value = cosignB64; document.getElementById(\u201cfirmante\u201d).value = certificateB64; document.getElementById(\u201cformulario\u201d).submmit(); } \u2026 // Funci\u00f3n para firmar datos. Si termina correctamente la operaci\u00f3n de firma // se llama a la funci\u00f3n \u201ccosignFunction\u201d con el resultado de la operaci\u00f3n y, // si \u00e9sta tambi\u00e9n termina correctamente, se llama a la funci\u00f3n // \u201csaveDataFunction\u201d con el resultado de la cofirma. Si falla alguna de // estas funciones se llama al m\u00e9todo \u201cshowError\u201d function firmar(dataB64) { AutoScript.sign(dataB64, \u201cSHA512withRSA\u201d, \u201cXAdES\u201d, \u201cformat=XAdES Detached\u201d, cosignCallback, showErrorCallback); } \u2026 Contrafirma electr\u00f3nica La contrafirma es la operaci\u00f3n mediante la cual se refrenda una firma electr\u00f3nica previa. En t\u00e9rminos generales, es el firmar una firma electr\u00f3nica. Este es el tipo de operaci\u00f3n que realizar\u00eda un organismo, por ejemplo, como prueba de registro de una firma electr\u00f3nica en su sistema. La contrafirma no es una operaci\u00f3n que soporten todos los formatos de firma. Consulte el apartado dedicado a los algorirmos de firma soportados para el formato de firma que desee utilizar. La contrafirma se puede realizar por entero en el lado cliente o a trav\u00e9s del proceso de firma trif\u00e1sica descrito en el ANEXO II Firma trif\u00e1sica . La funci\u00f3n JavaScript mediante la cual se realizan las contrafirmas es: countersign(signB64, algorithm, format, params, successCb, errorCb); En esta funci\u00f3n: signB64 Firma electr\u00f3nica que se desea contrafirmar codificada en Base64. Una firma en Base64 puede ser el resultado obtenido por cualquier operaci\u00f3n de firma, cofirma o contrafirma previa. Si no se proporciona este par\u00e1metro (se usa null) o si se pasa una cadena vac\u00eda, el Cliente @firma mostrar\u00e1 al usuario un di\u00e1logo de selecci\u00f3n de fichero para que seleccione el fichero de firma que desea contrafirmar. Salvo en casos concretos, no se recomienda dejar en manos del usuario la selecci\u00f3n del fichero de firma. Incluso si es necesario hacerlo, se recomienda hacer que el usuario cargue la firma previamente en servidor mediante un componente HTML y seguidamente se realice una operaci\u00f3n de cofirma trif\u00e1sica. Para la compatibilidad con dispositivos m\u00f3viles, nunca se deben proporcionar nulos o cadena vac\u00eda. algorithm Algoritmo de firma. Consulte el apartado dedicado a los algorirmos de firma soportados para el formato de firma que desee utilizar. format Formato de firma. Consulte el apartado 8 Formatos de firma para consultar aquellos disponibles. Si no conoce el formato de firma utilizado en la firma original, indique el valor \u201cAUTO\u201d para especificar que se utilice el mismo formato que la firma original. Por norma general, no se puede contrafirmar una firma en un formato distinto al que se us\u00f3 para generar dicha firma. params Par\u00e1metros adicionales para la configuraci\u00f3n de la operaci\u00f3n de contrafirma y caracter\u00edsticas particulares del formato de firma seleccionado. Si se introduce un nulo, se usar\u00e1 la configuraci\u00f3n por defecto para el formato de firma establecido. La operaci\u00f3n de contrafirma admite un par\u00e1metro adicional concreto para configurar qu\u00e9 firmas dentro del fichero de firma se quieren contrafirmar. Consulte el apartado 6.4.1 Selecci\u00f3n de nodos para m\u00e1s detalle. Consulte el apartado 7.1 Paso de par\u00e1metros adicionales para saber c\u00f3mo realizar el paso de par\u00e1metros y el apartado de informaci\u00f3n espec\u00edfica del formato de firma que desee realizar para saber los par\u00e1metros soportados por el formato en cuesti\u00f3n. successCb Funci\u00f3n callback JavaScript que se ejecutar\u00e1 una vez se obtenga el resultado de la operaci\u00f3n de cofirma. Esta funci\u00f3n recibir\u00e1 hasta tres par\u00e1metros: En el primer par\u00e1mero se recibe la firma resultante codificada en Base64. En el segundo par\u00e1metro se recibe el certificado usado para cofirmar codificado en Base64. En el tercer par\u00e1metro, opcionalmente, se recibir\u00e1 un objeto JSON con el nombre del fichero de firma cofirmado en caso de que lo haya seleccionado el usuario. errorCb Funci\u00f3n callback JavaScript que se ejecutar\u00e1 cuando ocurra un error durante la operaci\u00f3n de firma. Esta funci\u00f3n recibir\u00e1 hasta dos par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. A continuaci\u00f3n, se muestran distintos ejemplos de contrafirma: Contrafirma electr\u00f3nica de una firma \u2026 var signatureB64 = \u2026 // Firma electr\u00f3nica a cofirmar AutoScript.countersign(signatureB64, \u201cSHA512withRSA\u201d, \u201cAUTO\u201d, \u201ctarget=true\u201d, successCallback, errorCallback); \u2026 Contrafirma electr\u00f3nica del resultado de una firma \u2026 // Funcion callback que desencadena la operaci\u00f3n de contrafirma function counterSignCallback (signatureB64) { AutoScript.countersign( signatureB64, \u201cSHA512withRSA\u201d, \u201cXAdES\u201d, null , successCallback, errorCallback ); } \u2026 // Iniciamos la operacion de firma que despu\u00e9s se contrafirmar\u00e1 AutoScript.sign( dataB64, \u201cSHA512withRSA\u201d, \u201cXAdES\u201d, null , counterSignCallback, errorCallback); \u2026 Selecci\u00f3n de nodos La operaci\u00f3n de contrafirma se realiza sobre una firma. Esta puede ser una firma simple, una cofirma u otra contrafirma. Estas operaciones de firma, cofirma y contrafirma van agregando firmas a un documento y, ya que las contrafirmas se realizan sobre firmas previas, se forma lo que se ha dado en llamar \u201c\u00e1rbol de firmas\u201d. As\u00ed, por ejemplo, despu\u00e9s de realizar varias cofirmas y contrafirmas sobre una firma se podr\u00eda obtener una estructura como la siguiente: < En esta estructura se refleja que se han firmado los datos dos veces (firma y cofirma) y que una de esas firmas tiene una contrafirma. Debe tenerse en cuenta que las firmas y las cofirmas son equivalentes (ambas firman los datos) y por tanto ambas se pueden considerar cofirmas entre s\u00ed. En relaci\u00f3n a esto, el Cliente @firma permite configurar que las contrafirmas se realicen seg\u00fan una de las siguientes pol\u00edticas de firma: Firma de nodos hoja del \u00e1rbol (LEAFS): Se firmar\u00e1n s\u00f3lo las firmas del \u00e1rbol que no tienen ninguna contrafirma. Firma de todo el \u00e1rbol de firma (TREE): Se firman todas las firmas del \u00e1rbol. La configuraci\u00f3n de qu\u00e9 nodos se desean firmar se realiza a trav\u00e9s del par\u00e1metro params de la funci\u00f3n de contrafirma, al que, adem\u00e1s de toda la configuraci\u00f3n espec\u00edfica del formato de firma, se le puede agregar la propiedad target con la pol\u00edtica de selecci\u00f3n de nodos. Los valores que admite esta propiedad son: leafs Contrafirma todas las firmas que sean nodos hoja del \u00e1rbol. Este es el valor por defecto. tree Contrafirma todas las firmas del \u00e1rbol. Por ejemplo, si tomamos como base la estructura de firma anterior, as\u00ed quedar\u00eda al contrafirmarla con cada uno de los par\u00e1metros adminitidos: target=leafs < target=tree < Firma de lotes predefinidos AutoFirma incorpora una funcionalidad de firma de lotes de documentos, lo que permite a las aplicaciones enviar a firmar un grupo de datos en una \u00fanica llamada. Esta operaci\u00f3n permite que se pueda ordenar la firma de todos los documentos en una sola llamada al cliente de firma y que el usuario pueda seleccionar el certificado de firma una \u00fanica vez. Las firmas de un lote de firma se realizan de forma trif\u00e1sica, lo cual se traduce en que buena parte del proceso de firma se realiza en servidor y es necesario utilizar los servicios del WAR \u201cafirma-server-triphase-signer.war\u201d. Consulte el apartado 5.3.2 Servicios de firma trif\u00e1sica y firma de lotes para saber m\u00e1s sobre el despliegue y configuraci\u00f3n de este servicio. Al igual que ocurre con las firmas trif\u00e1sicas, el sistema de firma de lotes permite que tanto el origen de los datos como el destino de la firma est\u00e9n en servidor. Este origen y destino se determina por medio de un gestor de documentos configurado en el servicio de firma trif\u00e1sica. En los lotes de firma no tienen porqu\u00e9 agregarse el contenido de los documentos a firmar, se puede (y se deber\u00eda) agregar la referencia a esos documentos y que sea el servidor el encargado de acceder a ellos para firmarlos y despu\u00e9s guardar la firma. Esto lo hace el servicio de firma trif\u00e1sica a trav\u00e9s de la clase a la que llamamos \u201cgestor de documentos\u201d. Estos gestores de documentos son los mismos utilizados para las operaciones de firma trif\u00e1sica. El servicio de firma trif\u00e1sica incluye varios gestores de documentos gen\u00e9ricos y permite que se le agreguen otros desarrollados expresamente para cualquier entorno (la opci\u00f3n recomendada). Consulte el ANEXO II Firma trif\u00e1sica para saber m\u00e1s sobre los gestores de documentos disponibles y c\u00f3mo desarrollar el suyo propio. Es importante entender que la aplicaci\u00f3n que solicita la firma de un lote recibe como resultado el listado de resultados de las firmas generadas, es decir, si terminaron bien o mal, pero no las propias firmas. Las firmas se deben procesar o almacenar en servidor y esto se har\u00e1 mediante el gestor de documentos configurado. Tenga en cuenta que el valor de retorno del gestor de documentos despu\u00e9s de procesar la firma no se utiliza en la firma de lotes, por lo que el gestor de documentos configurado por defecto (SelfishDocumentManager) no devuelve las firmas (ni hace nada con ellas, as\u00ed que este nunca se debe usar con la firma de lotes) y el gestor de muestra que guarda en disco (FileSystemDocumentManager) no proporciona el nombre del fichero de salida. Es necesario configurar un gestor acorde a nuestra l\u00f3gica de negocio, preferiblemente creado para tal fin tal como se describe en el apartado II.1.2 Gestores de documentos personalizados . Generar una firma de lote con el Cliente @firma requiere de tres pasos: Crear un lote de firma con la configuraci\u00f3n de firma que deber\u00e1 aplicarse sobre cada uno de los documentos a firmar. Agregar los documentos (referencias a los datos) al lote. Si un documento del lote tuviese que firmarse con una configuraci\u00f3n distinto a la del resto, se podr\u00eda proporcionar una configuraci\u00f3n espec\u00edfica para \u00e9l. Enviar a firmar el lote. Esto conlleva la llamada al Cliente de firma y definir los m\u00e9todos callback que se deber\u00e1n ejecutar en caso de que se complete la firma del lote o si se produce un error bloqueante durante su procesado. Creaci\u00f3n del lote Para la creaci\u00f3n del lote de firma se llamar\u00e1 al m\u00e9todo JavaScript: createBatch (algorithm, format, suboperation, extraparams) Este m\u00e9todo creaa el lote y establece la configuraci\u00f3n de firma que se aplicar\u00e1 por defecto a cada uno de los documentos que se agregue al mismo. Al agregar documentos al lote se podr\u00e1 establecer una configuraci\u00f3n espec\u00edfica para su firma, salvo para el algoritmo de firma. El algoritmo indicado en el m\u00e9todo de creaci\u00f3n del lote ser\u00e1 el utilizado para firmar todos los documentos del lote. Los par\u00e1metros utilizados en este m\u00e9todo son los siguientes: algorithm Indica el algoritmo de firma a usar para todo el lote. Los valores permitidos son: SHA256withRSA SHA384withRSA SHA512withRSA SHA1withRSA ( No se recomienda su uso por obsoleto ) format Indicar el formato de firma que se usar\u00e1 por defecto para los documentos del lote. Los valores permitidos son: CAdES XAdES PAdES FacturaE NONE A pesar del nombre del formato, todas las firmas se realizar\u00e1n de forma trif\u00e1sica. suboperation Indica la operaci\u00f3n de firma a realizar por defecto. Los valores permitidos son: sign Firma. cosign Cofirma. countersign Contrafirma. extraparams Cadena con el listado de propiedades que configurar\u00e1n las firmas por defecto. Se compondr\u00e1 de una serie de tuplas \u201cCLAVE=VALOR\u201d separadas por \u201c\\n\u201d, en donde la CLAVE ser\u00e1 la propiedad a configurar y VALOR el valor asignado. Por ejemplo: \u201cmode=implicit\\nsignerClaimedRoles=Adjudicatario|Responsable\\nsignatureProductionCity=Madrid\u201d Las propiedades admitidas por cada uno de los formatos de firma se indican en los siguientes apartados: 8.1.3 Par\u00e1metros adicionales para las firmas CAdES. 8.2.7 Par\u00e1metros adicionales para las firmas XAdES. 8.3.8 Par\u00e1metros adicionales para las firmas PAdES. 8.4.3 Par\u00e1metros adicionales para las firmas FacturaE. Agregar documentos al lote Para agregar documentos al lote se utilizar\u00e1 el m\u00e9todo: addDocumentToBatch (id, datareference, format, suboperation, extraparams) Este m\u00e9todo agrega al lote un documento a firmar, pudiendo definir una configuraci\u00f3n espec\u00edfica para firmar con \u00e9l u omitir esta configuraci\u00f3n para utilizar la configuraci\u00f3n por defecto establecida durante la creaci\u00f3n del lote. El algoritmo de firma siempre ser\u00e1 el establecido durante la creaci\u00f3n del lote. Los par\u00e1metros utilizados en este m\u00e9todo son los siguientes: id Identificador con el que referenciar el documento. Cuando se devuelva el resultado de la firma del lote, se podr\u00e1 saber cual ha sido el resultado de la firma de este documento porque vendr\u00e1 referenciado con este mismo identificador. Esta propiedad es obligatoria y no puede ser el mismo para dos documentos del lote. datareference Referencia a los datos a firmar. El tipo de referencia depende del gestor de documentos configurado en el servicio de firma trif\u00e1sica. Por ejemplo: Con el gestor DefaultDocumentManager, la referencia debe ser el propio documento codificado en Base 64. Con el gestor FileSystemDocumentManager, la referencia indicada en este par\u00e1metro ser\u00eda un nombre de fichero y el servicio de firma se encargar\u00eda de cargar ese fichero del directorio configurado en el servidor. Con el gestor LegacyBatchDocumentManager, la referencia podr\u00eda ser el propio documento en Base 64 o una URL. Si fuese el documento en Base 64, el servicio s\u00f3lo tendr\u00eda que decodificarlo, y si fuese una URL, el servicio acceder\u00eda a la misma para descargar los datos. Un desarrollador puede (y deber\u00eda) agregar nuevos gestores de documentos al servicio de firma trif\u00e1sica para optimizar la integraci\u00f3n con sus sistemas. Por ejemplo, si los documentos se guardan en un repositorio de documentos, se podr\u00eda crear un gestor de documentos que recibiese el identificador con el que se referencia al documento en el gestor y obtenerlo del mismo. Consulte el anexo II.1.2 Gestores de documentos personalizados para conocer como crear y configurar su propio gestor de documentos. format Formato de firma a utilizar para este documento particular. Si no se indica ninguno, se usar\u00e1 el que se indic\u00f3 en el m\u00e9todo createBatch. Los formatos permitidos son: CAdES XAdES PAdES FacturaE NONE A pesar del nombre del formato, todas las firmas se realizar\u00e1n de forma trif\u00e1sica. suboperation Indica la operaci\u00f3n de firma a aplicar sobre este documento. Si no se indica ninguna, se usar\u00e1 la que se indic\u00f3 en el m\u00e9todo createBatch. Los valores permitidos son: sign Firma. cosign Cofirma. countersign Contrafirma. extraparams Cadena con el listado de propiedades que configurar\u00e1n esta firma particular. Si no se indica ninguna, se usar\u00e1 la que se indic\u00f3 en el m\u00e9todo createBatch. Se compondr\u00e1 de una serie de tuplas \u201cCLAVE=VALOR\u201d separadas por \u201c\\n\u201d, en donde la CLAVE ser\u00e1 la propiedad a configurar y VALOR el valor asignado. Por ejemplo: \u201cmode=implicit\\nsignerClaimedRoles=Adjudicatario|Responsable\\nsignatureProductionCity=Madrid\u201d. Las propiedades admitidas por cada uno de los formatos de firma se indican en los siguientes apartados: 8.1.3 Par\u00e1metros adicionales para las firmas CAdES. 8.2.7 Par\u00e1metros adicionales para las firmas XAdES. 8.3.8 Par\u00e1metros adicionales para las firmas PAdES. 8.4.3 Par\u00e1metros adicionales para las firmas FacturaE. Firma del lote Para iniciar el proceso de firma del lote se usar\u00e1 el m\u00e9todo: signBatchProcess (stopOnError, batchPreSignerUrl, batchPostSignerUrl, certFilters, successCallback, errorCallback) Este m\u00e9todo inicia el proceso de firma del lote y establece una serie de par\u00e1metros necesarios para su funcionamiento. Los par\u00e1metros utilizados en este m\u00e9todo son los siguientes: stopOnError Indica si la firma del lote deber\u00eda detenerse en el momento en el que se encuentre que una firma no es v\u00e1lida. Esto es \u00fatil cuando se d\u00e9 el caso en el que se deseen firmar todos los documentos o ninguno. Cuando se establece a \u201cfalse\u201d se indica que el proceso debe continuar incluso si alguna de las firmas del lote no puede completarse, y cuando se establece a \u201ctrue\u201d el proceso se para en el momento en el que se produce el primer error. Cuando se establece a \u201ctrue\u201d, no se guardar\u00e1 ninguna firma generada hasta que no se hayan generado todas. En caso de error no se guardar\u00e1 ninguna. Si fallase el guardado de una firma, se ejecutar\u00eda el m\u00e9todo rollback() del gestor de documentos sobre cada una de las firmas ya guardadas para deshacer este guardado. batchPreSignerUrl URL del servicio de prefirma de lotes. Este servicio se despliega junto con el servicio de firma trif\u00e1sica y, por defecto, tendr\u00e1 el nombre presign. Por ejemplo: https://servidor.gob.es/aplicacion/afirma-server-triphase-signer/presign batchPostSignerUrl URL del servicio de postfirma de lotes. Este servicio se despliega junto con el servicio de firma trif\u00e1sica y, por defecto, tendr\u00e1 el nombre postsign. Por ejemplo: https://servidor.gob.es/aplicacion/afirma-server-triphase-signer/postsign certFilters Permite definir los filtros para determinar qu\u00e9 certificados se pueden utilizar para firmar. Esta propiedad es opcional. Se compondr\u00e1 de una serie de tuplas \u201cCLAVE=VALOR\u201d separadas por \u201c\\n\u201d, en donde la CLAVE ser\u00e1 la propiedad a configurar y VALOR el valor asignado. Por ejemplo: \u201cfilters= subject.contains:Juan;nonexpired:true\\nheadless=true\u201d. Las propiedades admitidas son las propiedades de filtros descritas en el apartado 7.2 Configuraci\u00f3n de los filtros de certificados y la propiedad headless del apartado 7.3 Selecci\u00f3n autom\u00e1tica de certificados . successCallback M\u00e9todo callback JavaScript que se debe ejecutar en caso de que se complete la firma del lote. Si no se configura que se detenga el proceso en caso de error mediante el par\u00e1metro stopOnError, este m\u00e9todo se llamar\u00e1 incluso si falla alguna de las firmas del lote. En ese caso, \u00fanicamente se devolver\u00e1 en el listado de resultados que esa firma produjo un error. Esta funci\u00f3n recibir\u00e1 como par\u00e1metros: Una estructura JSON con el resultado de cada firma del lote. En el caso de que fallase una firma, se indica una descripci\u00f3n del error que se produjo. No se reciben las firmas generadas, el destino de estas es determinado por el gestor de documentos configurado en servidor. El certificado utilizado para firmar codificado en Base64. errorCallback M\u00e9todo callback JavaScript que se debe ejecutar en caso de que no se pueda procesar la firma del lote o si falla alguna de las firmas cuando se indica que debe deternerse el proceso de firma en caso de error. Esta funci\u00f3n recibir\u00e1 dos par\u00e1metros: El tipo de error producido. Un texto descriptivo del error. Resultado de la firma del lote Cuando se termina de procesa correctamente un lote de firma, el cliente recibe como respuesta en el m\u00e9todo callback de \u00e9xito una estructura JSON que describe como ha resultado el proceso. Esta estructura JSON es acorde al siguiente esquema: { \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"type\": \"object\", \"properties\": { \"signs\": { \"type\": \"array\", \"items\": [ { \"type\": \"object\", \"properties\": { \"id\": { \"type\": \"string\" }, \"result\": { \"type\": \"string\" }, \"description\": { \"type\": \"string\" } }, \"required\": [ \"id\", \"result\" ] } ] } }, \"required\": [ \"signs\" ] } Un ejemplo de JSON devuelto podr\u00eda ser el siguiente: { \"signs\":[ {\"id\":\"7725374e-728d-4a33-9db9-3a4efea4cead\", \"result\":\"DONE_AND_SAVED\" } , {\"id\":\"93d1531c-cd32-4c8e-8cc8-1f1cfe66f64a\", \"result\":\"DONE_BUT_ERROR_SAVING\", \"description\":\"java.io.IOException: No se pudo guardar el fichero\" } ] } En \u00e9l distinguimos un elemento \u201csigns\u201d con el listado de firmas del lote. Cada uno de estos elementos tiene los siguientes atributos: id Identificador del documento al cual corresponde el resultado. Los identificadores ser\u00e1n los mismos utilizados al agregar los documentos al lote. Debe tenerse en cuenta que los resultados pueden no estar listados en el el mismo orden en el que se agregaron los documentos al lote. Por eso es importante usar este ID para asociar cada documento firmado a su resultado. result Resultado de realizar la firma. Esta propiedad puede adoptar uno de entre los siguientes estados: Estado de \u00e9xito DONE_AND_SAVED La firma se gener\u00f3 y proces\u00f3 correctamente. Estados de error DONE_BUT_ERROR_SAVING Error al guardar la firma. ERROR_PRE Error en la primera fase del proceso de firma trif\u00e1sica. ERROR_POST Error en la tercera fase del proceso de firma trif\u00e1sica. Estados intermedios NOT_STARTED La firma no se ha iniciado. DONE_BUT_NOT_SAVED_YET La firma se ha generado, pero a\u00fan no se ha guardado. DONE_BUT_SAVED_SKIPPED La firma se gener\u00f3 correctamente pero no se guardar\u00e1. SKIPPED No se realizar\u00e1 la firma. SAVE_ROLLBACKED La firma se guard\u00f3, pero se volvi\u00f3 a eliminar. En el caso de que no se indique que el proceso se interrumpa al detectar un error en una firma, todas las firmas aparecer\u00e1n con el estado de \u00e9xito como resultado o con alguno de los resultados de error. En el caso de que s\u00ed se indique que el proceso se interrumpa, cuando se detecte un error las firmas pueden quedar en alguno de los estados intermedios. description Descripci\u00f3n del resultado del proceso (opcional). Se utiliza para ampliar informaci\u00f3n cuando se devuelve un estado de error. Cuando se obtiene el resultado DONE_AND_SAVED en una firma de un lote, se sabe que la firma se ha generado y se ha procesado correctamente seg\u00fan lo establece el gestor de documentos configurado en el servicio de firma trif\u00e1sica. Ejemplo de operaci\u00f3n de firma de lote Aqu\u00ed se incluye un ejemplo de c\u00f3digo JavaScript que ejecuta una operaci\u00f3n de firma de lote: // M\u00e9todo callback para procesar el resultado del lote function exitoCallback(result, certB64) { // Mostramos por consola el resultado de cada firma for ( var i = 0; i < result.signs.length; i++) { console.log(\"Id: \" + result.signs[i].id + \". Result: \" + result.signs[i].result + \". Description: \" + result.signs[i].description); } } // M\u00e9todo callback para tratar los errores function errorCallback(errorType, errorMessage) { // Mostramos por consola el error producido console.log(\"Tipo: \" + errorType + \"\\nMensaje: \" + errorMessage); } // M\u00e9todo de firma function firmarLote() { // Creamos lote con el algoritmo de firma y una configuraci\u00f3n de firma // por defecto AutoScript.createBatch(\"SHA512withRSA\", \"CAdES\", \"sign\", \"mode=implicit\"); // Definimos las referencias a los datos. En este caso, usaremos nombres de // ficheros codificados en Base64, ya que en el servicio de firma trif\u00e1sica // tendr\u00edamos configurado el gestor de documentos FileSystemDocumentManager var ref1 = Base64.encode(\"Entrada.txt\"); var ref2 = Base64.encode(\"Firma_cades.csig\"); var ref3 = Base64.encode(\"Entrada.pdf\"); var ref4 = Base64.encode(\"Entrada.jpg\"); // Agregamos los documentos al lote, estableciendo par\u00e1metros de // configuraci\u00f3n particulares para los documentos que queramos AutoScript.addDocumentToBatch(\"1\", ref1); AutoScript.addDocumentToBatch(\"2\", ref2, \"CAdES\", \"cosign\", \"mode=explicit\"); AutoScript.addDocumentToBatch(\"3\", ref3, \"PAdES\"); AutoScript.addDocumentToBatch(\"4\", ref4, \"XAdES\", \"sign\", \"format=XAdES Detached\\nsignatureProductionCountry=Espa\u00f1a\\nsignatureProductionCity=Madrid\"); // Enviamos a firmar el lote var baseUrl = \"https://servidor.gob.es/afirma-server-triphase-signer/\" AutoScript.signBatchProcess( false , baseUrl + \"presign\", baseUrl + \"postsign\", \"filters=nonexpired:true\\nheadless=true\", exitoCallback, errorCallback); } Firma de lotes sin servidor (monof\u00e1sica) A pesar de que el funcionamiento normal de la firma de lotes es trif\u00e1sico (los datos y las firmas se procesan en servidor), es posible configurar el despliegue para que AutoFirma haga la firma de los datos en local y devuelva directamente las firmas generadas. Este modo de funcionamiento est\u00e1 orientado a aquellas operaciones que firmen unos pocos datos de peque\u00f1o tama\u00f1o ya residentes en cliente y por tanto no obtengan beneficio en evitar la descarga de los datos del servidor y subida de las firmas. Para activar el modo de firma se deber\u00e1 llamar al siguiente m\u00e9todo de configuraci\u00f3n antes de la llamada al m\u00e9todo de firma del lote: AutoScript.setLocalBatchProcess(true) Al realizarse por completo en local, la firma monof\u00e1sica de lotes NO requiere: Desplegar el servicio de firma trif\u00e1sica y de lotes. Configurar las URL de los servicios en la llamada al m\u00e9todo signBatchProcess. Ha de tenerse en cuenta que esta operaci\u00f3n NO es compatible con los clientes de firma m\u00f3vil. Si desea que su despliegue sea compatible con dispositivos m\u00f3viles, no utilice este modo. Si se hiciese y se ejecutase la operaci\u00f3n desde un m\u00f3vil, se ignorar\u00eda el uso del m\u00e9todo setLocalBatchProcess y se requerir\u00eda despliegue y configuraci\u00f3n del servicio de firma trif\u00e1sica. Una vez activado este modo, hay que tener en cuenta los siguientes aspectos: Los datos indicados en el par\u00e1metro datareference de las llamadas para agregar documentos al lote deber\u00e1n ser los propios datos que se van a firmar. En la llamada al m\u00e9todo de firma del lote, los par\u00e1metros batchPreSignerUrl y batchPostSignerUrl deber\u00e1n ser nulos. El JSON de respuesta de la operaci\u00f3n incluir\u00e1 un atributo \u201csignature\u201d por cada operaci\u00f3n completada correctamente. Este atributo contendr\u00e1 el Base 64 de la firma generada. Los c\u00f3digos de resultado de las operaciones son un subconjunto de los de la operaci\u00f3n de firma de lotes trif\u00e1sica, a pesar de que conceptualmente puedan no sean exactos. De esta forma la \u00fanica diferencia que hay que tener en cuenta en el procesado de la respuesta de una operaci\u00f3n u otra es de d\u00f3nde se obtiene la firma. Los c\u00f3digos de resultado devueltos podr\u00e1n ser: DONE_AND_SAVED La firma se gener\u00f3 correctamente y se devuelve el resultado en el atributo \u201csignature\u201d. ERROR_PRE Error durante la firma. SKIPPED No se realizar\u00e1 la firma o se ignor\u00f3 el resultado por haber encontrado un error en otra firma. Advertencia: La generaci\u00f3n de firma de lotes monof\u00e1sica obliga a que el JavaScript de la p\u00e1gina del tr\u00e1mite cargue en memoria los documentos y las firmas generadas. Esto supone un problema para el navegador, que puede no ser capaz de manejar estos datos debido a limitaciones de memoria. No se recomienda usar este sistema si se trabaja con m\u00faltiples documentos o tama\u00f1os de documentos de m\u00e1s de unos pocos megabytes. Ejemplo de operaci\u00f3n de firma monof\u00e1sica de lote Aqu\u00ed se incluye un ejemplo de c\u00f3digo JavaScript que ejecuta una operaci\u00f3n de firma monof\u00e1sica de lote: // M\u00e9todo callback para procesar el resultado del lote function exitoCallback(result, certB64) { // Comprobamos que todas las firmas han terminado correctamente var allSignaturesOk = true ; for ( var i = 0; i < result.signs.length && allSignaturesOk; i++) { if (\"DONE_AND_SAVED\" != result.signs[i].result) { allSignaturesOk = false ; } } // Si todas las firmas son correctas, las enviamos a trav\u00e9s de un formulario if (allSignaturesOk) { for ( var i = 0; i < result.signs.length; i++) { addToForm(result.signs[i].id, result.signs[i].signature); } getForm().submit(); } // Si alguna de las firmas fallo, mostramos un error else { alert(\"Ocurri\u00f3 un error al procesar algunas de las firmas\"); } } // M\u00e9todo callback para tratar los errores function errorCallback(errorType, errorMessage) { // Alertamos al usuario del error alert(\"Error durante la firma del lote: \" + errorMessage); } // M\u00e9todo de firma function firmarLote() { // Creamos lote con el algoritmo de firma y una configuraci\u00f3n de firma // por defecto AutoScript.createBatch(\"SHA512withRSA\", \"CAdES\", \"sign\", \"mode=explicit\"); // Activamos el modo de firma de lote monof\u00e1sica AutoScript. setLocalBatchProcess( true ); // Agregamos al lote los datos AutoScript.addDocumentToBatch(\"1\", base64Dato1); AutoScript.addDocumentToBatch(\"2\", base64Dato2, \"CAdES\", \"sign\", \"mode=implicit\"); AutoScript.addDocumentToBatch(\"3\", base64Dato3); AutoScript.addDocumentToBatch(\"4\", base64Dato4); // Enviamos a firmar el lote AutoScript.signBatchProcess( true , null , null , \"filters=nonexpired:true\", exitoCallback, errorCallback); } Resultado de la firma monof\u00e1sica del lote El resultado de la firma monof\u00e1sica del lote es igual al de su firma trif\u00e1sica, salvo porque se agrega un elemento signatura con el resultado de la operaci\u00f3n. Esta estructura JSON es acorde al siguiente esquema: { \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"type\": \"object\", \"properties\": { \"signs\": { \"type\": \"array\", \"items\": [ { \"type\": \"object\", \"properties\": { \"id\": { \"type\": \"string\" }, \"result\": { \"type\": \"string\" }, \"signature\": { \"type\": \"string\" }, \"description\": { \"type\": \"string\" } }, \"required\": [ \"id\", \"result\" ] } ] } }, \"required\": [ \"signs\" ] } Un ejemplo de JSON de resultado (con parte de las cadenas base 64 omitidas) podr\u00eda ser el siguiente: { \"signs\":[ {\"id\":\"7725374e-728d-4a33-9db9-3a4efea4cead\", \"result\":\"DONE_AND_SAVED\", \"signature\":\"MII\u2026JAN4saJN=\" } , {\"id\":\"93d1531c-cd32-4c8e-8cc8-1f1cfe66f64a\", \"result\":\" ERROR_PRE\", \"description\":\"java.io.IOException: No se pudo guardar el fichero\" } ] } Antiguo mecanismo de firma de lotes AutoFirma 1.7 y anteriores no dispon\u00edan del mecanismo de firma de lotes que se ha descrito. En su lugar, dispon\u00edan de un mecanismo que constaba de un \u00fanico m\u00e9todo que recib\u00eda un XML con todos los par\u00e1metros de configuraci\u00f3n del lote. Este mecanismo de firma de lotes sigue existiendo en AutoFirma 1.8 y superiores, pero se considera obsoleto y no se documenta para alentar a que los nuevos despliegues utilicen el mecanismo de firma de lotes aqu\u00ed descrito, m\u00e1s eficiente y sencillo de usar. Si su aplicaci\u00f3n usaba el antiguo mecanismo y no desea migrar, no tiene que hacer ning\u00fan cambio. Su aplicaci\u00f3n seguir\u00e1 funcionando con AutoFirma 1.8 y superiores. Aquellos despliegues que usasen el antiguo mecanismo de firma de lotes y quieran migrar al nuevo, tienen la opci\u00f3n de adaptar tanto el despliegue como la l\u00f3gica en servidor para optimizarla a sus fines. Para quien desee evitar desarrollar de nuevo la l\u00f3gica en servidor o reutilizar uno de los mecanismos que ya exist\u00edan, se ha incluido en el nuevo servicio de firma trif\u00e1sica un gestor de documentos que permitir\u00e1 seguir utilizando los antiguos mecanismos de carga de datos (Base 64 o a trav\u00e9s de URL) y los SignSavers para el guardado de las firmas (ya fuese alguno de los incluidos por defecto para el guardado en fichero o env\u00edo a un servicio, o uno creado a medida). Consulte el apartado II.2.2 Gestor de documentos \u201cLegacyBatchDocumentManager\u201d para m\u00e1s informaci\u00f3n sobre el nuevo gestor de documentos que permite la compatibilidad con los antiguos SignSavers. Advertencia: Las aplicaciones m\u00f3viles de firma Android y iOS son compatibles con el nuevo mecanismo de firma de lotes, mientras que no lo son con el mecanismo antiguo. Selecci\u00f3n de certificado El Cliente @firma permite a las aplicaciones solicitar un certificado a los usuarios sin necesidad de realizar una operaci\u00f3n de firma. Esta operaci\u00f3n puede ser \u00fatil para construir filtros de certificados para operaciones posteriores, realizar validaciones previas sobre el certificado y/o mostrar informaci\u00f3n de este en su aplicaci\u00f3n web. Sin embargo, esta operaci\u00f3n nunca debe usarse para autenticar a los usuarios , ya que lo que se obtiene es \u00fanicamente la parte p\u00fablica de los certificados y un mecanismo de autenticaci\u00f3n que usase s\u00f3lo eso podr\u00eda ser f\u00e1cilmente sorteado mediante un ataque simple de inyecci\u00f3n de c\u00f3digo. La funci\u00f3n JavaScript para permitir seleccionar un certificado de usuario es: function selectCertificate(params, successCallback, errorCallback); En esta funci\u00f3n: params Par\u00e1metros de configuraci\u00f3n de la operaci\u00f3n que afecten a la selecci\u00f3n de certificados. Se pueden configurar filtros de certificados, como se indica en el apartado 7.2 Configuraci\u00f3n de los filtros de certificados, y la selecci\u00f3n autom\u00e1tica de certificado, como se describe en el apartado 7.3 Selecci\u00f3n autom\u00e1tica de certificados . successCallback Funci\u00f3n callback JavaScript que se ejecutar\u00e1 cuando se seleccione un certificado. Esta funci\u00f3n recibir\u00e1 los siguientes par\u00e1metros: El certificado seleccionado codificado en Base64. errorCallback Funci\u00f3n callback JavaScript que se ejecutar\u00e1 cuando ocurra un error al seleccionar el certificado. Esta funci\u00f3n recibir\u00e1 hasta dos par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. El m\u00e9todo de selecci\u00f3n de certificado solicitar\u00e1 la contrase\u00f1a de los almacenes utilizados si es necesario para poder listar los certificados que contienen, pero nunca utilizar\u00e1 las claves privadas de los certificados, as\u00ed que en ning\u00fan caso pedir\u00e1 las contrase\u00f1as para ello. Este m\u00e9todo tambi\u00e9n es compatible con la funci\u00f3n setStickySignatory(boolean) (v\u00e9ase el apartado 6.2.1 Firma de m\u00faltiples documentos (firma masiva) ) con la cual es posible fijar el certificado seleccionado por el usuario. De esta forma se utilizar\u00e1 el mismo certificado durante las siguientes operaciones de firma o selecci\u00f3n, siempre y cuando no se utilice la misma instancia de AutoFirma. A continuaci\u00f3n, se muestran distintos ejemplos de la operaci\u00f3n de selecci\u00f3n de certificado: Selecci\u00f3n de certificado y env\u00edo a servidor para su an\u00e1lisis: \u2026 var mostrarError = function (errorType, errorMessage) { alert(\u201cError en la descarga de los datos: \u201d + errorMessage); } var enviarCertificado = function (certB64) { document.getElementById(\u201ccert\u201d).value = certB64; document.getElementById(\u201cformulario\u201d).submit(); } var extraParams = \u201cfilters.0=issuer.contains:FNMT\\n\u201d + \u201cfilters.1=issuer.contains:Policia\u201d; AutoScript.selectCertificate (extraParams, enviarCertificado, mostrarError); \u2026 Recuperaci\u00f3n de log AutoFirma permite obtener las trazas de su propia ejecuci\u00f3n para despu\u00e9s para ayudar a las aplicaciones a identificar los problemas que sufran sus usuarios. Para poder obtener sus trazas de ejecuci\u00f3n es necesario que se haya establecido la comunicaci\u00f3n entre AutoFirma y el navegador web, por lo que este mecanismo no ayuda a identificar errores en el propio proceso de comunicaci\u00f3n. Este m\u00e9todo deber\u00eda utilizarse s\u00f3lo de modo excepcional para identificar errores que se den AutoFirma al ejecutarse en el equipo del usuario y que sean susceptibles de ser atendidos por el equipo de soporte de su aplicaci\u00f3n o por el propio equipo de soporte de AutoFirma. Advertencia : La operaci\u00f3n recuperaci\u00f3n de logs no es compatible con los clientes de firma de Android e iOS, ni con AutoFirma cuando se comunica con el navegador a trav\u00e9s de los servicios auxiliares. La funci\u00f3n JavaScript para recuperar las trazas de ejecuci\u00f3n es: getCurrentLog (successCallback, errorCallback); En esta funci\u00f3n: successCallback Nombre de la funci\u00f3n callback que se invocar\u00e1 en caso de recuperar correctamente la traza de ejecuci\u00f3n. Esta funci\u00f3n recibir\u00e1 los siguientes par\u00e1metros: Texto plano la traza de ejecuci\u00f3n. errorCallback Nombre de la funci\u00f3n callback que se invocar\u00e1 en caso de finalizar con errores la carga de la traza de ejecuci\u00f3n. Esta funci\u00f3n recibir\u00e1 como par\u00e1metros: El tipo de error que se produjo. El mensaje de error asociado. A continuaci\u00f3n, se un ejemplo de la operaci\u00f3n recuperaci\u00f3n de la traza de error: Envio de la traza de error tras un error en la firma \u2026 // Funci\u00f3n que se ejecutar\u00e1 cuando el proceso de firma falle function signErrorCallback (errorType, errorMessage) { // Llamamos a la funci\u00f3n de la aplicaci\u00f3n para mostrar errores showError(errorMessage); // Recuperamos y enviamos las trazas si no es un error de cancelaci\u00f3n if (errorType == \"es.gob.afirma.core.AOCancelledOperationException\") { // No hacemos nada si falla la recuperaci\u00f3n de las trazas AutoScript.getCurrentLog(enviarTrazasCallback); } } // Funci\u00f3n callback que se ejecutara cuando se recuperen las trazas de error function enviarTrazasCallback (trace) { document.getElementById(\"trz\").value = AutoScript.getBase64FromText(trace); document.getElementById(\"formulario\").submit(); } \u2026 // Llamamos a la operaci\u00f3n de firma AutoScript.sign( null , \"SHA512withRSA\", \"CAdES\", null , successCallback, signErrorCallback); \u2026 Operaciones de gesti\u00f3n de ficheros Advertencia : Las operaciones de gesti\u00f3n de ficheros no son compatibles con los clientes de firma de Android e iOS. En cada uno de los siguientes subapartados se describen casos de uso alternativos para suplir el uso de los m\u00e9todos aqu\u00ed descritos y as\u00ed mantener la compatibilidad con dispositivos m\u00f3viles. AutoFirma permite hacer uso de varias operaciones de carga y guardado de ficheros en disco. Estas operaciones est\u00e1n orientadas a facilitar a las aplicaciones la integraci\u00f3n de las operaciones del cliente, sobre todo cuando se desea firmar un fichero que el usuario tenga en su posesi\u00f3n o cuando se desee permitir al usuario, justo despu\u00e9s de firmar, guardar copia de la firma que haya generado. El uso de estas operaciones se puede evitar mediante JavaScript y desarrollos en servidor, lo que por regla general dar\u00edan lugar a aplicaciones m\u00e1s estables y una mejor experiencia de usuario. Tambi\u00e9n es probable que su aplicaci\u00f3n sea candidata a obtener beneficiosos del uso de la firma trif\u00e1sica. Consulte el apartado ANEXO II Firma trif\u00e1sica para obtener m\u00e1s informaci\u00f3n sobre este tipo de operaciones. En los siguientes apartados se plantean tambi\u00e9n alternativas para el uso de las distintas operaciones, lo cual tambi\u00e9n har\u00e1 la soluci\u00f3n compatible con aplicaciones m\u00f3viles. Guardado de datos en disco La funci\u00f3n de guardado permite proporcionar a AutoFirma unos datos codificados en Base64 para que este ofrezca al usuario almacenarlo en disco mediante un di\u00e1logo de guardado. Un uso com\u00fan de este m\u00e9todo es guardar las firmas generadasalmacene el binario correspondiente en disco. El integrador puede seleccionar los datos que desea almacenar, la propuesta de nombre para el fichero y otros par\u00e1metros para el di\u00e1logo de guardado. Sin embargo, ser\u00e1 el usuario el \u00fanico que podr\u00e1 decidir donde desea almacenar los datos y qu\u00e9 nombre tendr\u00e1 el fichero. Los datos guardados son los datos indicados en Base64 ya descodificados. Es decir, si deseamos almacenar el texto \u201cSOY UN TEXTO A FIRMAR\u201d, convertiremos este texto a Base64 con lo que obtendr\u00edamos la cadena \u201cU09ZIFVOIFRFWFRPIEEgRklSTUFS\u201d y se la pasar\u00edamos al m\u00e9todo de guardado. Si abrimos el fichero resultante encontraremos que este contiene la cadena \u201cSOY UN TEXTO A FIRMAR\u201d. Si lo que deseamos guardar es una firma o un certificado obtenido en una de las funciones callback de las operaciones del Cliente, proporcionaremos al m\u00e9todo de carga tal como se recibe en la funci\u00f3n. La funci\u00f3n JavaScript para el guardado de datos en disco es: saveDataToFile (dataB64, title, fileName, extension, description, successCb, errorCb); En esta funci\u00f3n: dataB64 Datos que deseamos almacenar codificados como cadena Base64. Com\u00fanmente, esto ser\u00e1 el resultado de una operaci\u00f3n de firma o unos datos que se habr\u00e1n procesado previamente para codificarlos a este formato. title T\u00edtulo del di\u00e1logo de guardado. Algunos sistemas operativos podr\u00edan no mostrar el t\u00edtulo del di\u00e1logo. fileName Nombre de fichero que aparecer\u00e1 por defecto en el di\u00e1logo de guardado. extension Extensi\u00f3n de fichero que se propone para el guardado. Los ficheros visibles del di\u00e1logo se filtrar\u00e1n para s\u00f3lo visualizar los que tienen esta extensi\u00f3n mientras est\u00e9 seleccionada en el di\u00e1logo. Un ejemplo de extensi\u00f3n es: pdf description Descripci\u00f3n del tipo de fichero que se va a almacenar. Esta descripci\u00f3n aparecer\u00e1 asociada a la extensi\u00f3n indicada. sucessCb Nombre de la funci\u00f3n callback JavaScript que se ejecutar\u00e1 en caso de que el guardado de datos finalice correctamente. Si se omite este par\u00e1metro, o se establece a null, no se ejecutar\u00e1 ninguna funci\u00f3n al terminar la operaci\u00f3n. Esta funci\u00f3n no recibe par\u00e1metros. errorCb Nombre de la funci\u00f3n callback JavaScript que se ejecutar\u00e1 en caso de que el guardado de datos finalice con errores o cuando el usuario cancele el di\u00e1logo de guardado. Si se omite este par\u00e1metro, o se establece a null, no se ejecutar\u00e1 ninguna funci\u00f3n al terminar la operaci\u00f3n. Esta funci\u00f3n recibe los siguientes par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. A continuaci\u00f3n, se muestran distintos ejemplos de operaciones de guardado de fichero: Guardado de una firma electr\u00f3nica: \u2026 function saveDataCb (dataB64, certB64) { AutoScript.saveDataToFile (dataB64, \u201cGuardar firma electr\u00f3nica\u201d, \u201cfirma.csig\u201d, \u201ccsig\u201d, \u201cFirma binaria\u201d); } \u2026 AutoScript.cosign (dataB64, \u201cSHA512withRSA\u201d, \u201cCAdES\u201d, null , saveDataCb, errorCb); \u2026 Guardado de datos insertados por el usuario: \u2026 var text = document.getElementById(\u201cuserText\u201d).value; var dataB64 = AutoScript.getBase64FromText(text); AutoScript.saveDataToFile (dataB64, \u201cGuardar\u201d, \u201cfichero.txt\u201d, \u201ctxt\u201d, \u201cTexto plano\u201d); \u2026 <!-- Formulario HTML con el texto que desea guardar --> <form> <textarea name=\"userText\" cols=\"50\" rows=\"5\">Texto</textarea> </form> \u2026 La funci\u00f3n de guardado permite \u00fanicamente almacenar en disco un dato que ya tenemos cargado en la p\u00e1gina web y que, probablemente, ya est\u00e9 en servidor o se desee enviar al mismo (como en el caso de las firmas electr\u00f3nicas). Seg\u00fan el caso, se pueden implementar alternativas en la aplicaci\u00f3n que eviten el uso de la funci\u00f3n de guardado del Cliente @firma. Por ejemplo: Si tenemos que deseamos guardar en servidor, en lugar de cargarlos en la p\u00e1gina y luego usar esta funci\u00f3n, se podr\u00eda habilitar un servicio para descargarlos directamente desde el navegador. Si tenemos los datos cargados en la p\u00e1gina, como una firma reci\u00e9n generada, podemos enviarla primeramente al servidor para procesarla y guardarla. A continuaci\u00f3n, podr\u00edamos informar al usuario del resultado de la operaci\u00f3n y ofrecerle el descargar una copia utilizando el mismo m\u00e9todo que en el punto anterior. Si tenemos los datos en la p\u00e1gina p\u00e1gina y no deseamos enviarla a servidor, podemos utilizar JavaScript para permitir al usuario descargar estos datos mediante un objeto Blob y un enlace creado al vuelo. Selecci\u00f3n y recuperaci\u00f3n de un fichero por parte del usuario AutoFirma permite que un usuario cargue un fichero de su sistema local y recuperar su nombre y contenido. Este m\u00e9todo nos permite cargar ficheros para firmarlos, multifirmarlos u operar con ellos de cualquier otro modo. La funci\u00f3n JavaScript para la carga de ficheros en disco es: getFileNameContentBase64 (title, extensions, description, filePath, successCb, errorCb); En esta funci\u00f3n: title T\u00edtulo del di\u00e1logo de selecci\u00f3n. extensions Listado de extensiones de fichero permitidas. Estas aparecer\u00e1n separadas por una coma (\u2018,\u2019) y sin espacios entre ellas. Por ejemplo: pdf,jpg,txt. El di\u00e1logo s\u00f3lo mostrar\u00e1 los ficheros con estas extensiones, salvo que el usuario establezca lo contrario manualmente en el di\u00e1logo. description Descripci\u00f3n del tipo de fichero que se espera cargar. Esta descripci\u00f3n aparecer\u00e1 asociada a las extensiones indicadas. filePath Ruta absoluta del fichero que se deber\u00eda seleccionar por defecto o s\u00f3lo el nombre de fichero sugerido. successCb Funci\u00f3n callback JavaScript que se invocar\u00e1 cuando se cargue correctamente un fichero. Esta funci\u00f3n recibe los siguientes par\u00e1metros: En el primer par\u00e1metro se recibe el nombre del fichero seleccionado. En el segundo par\u00e1metro se recibe el contenido del fichero codificado en Base64. errorCb Funci\u00f3n callback JavaScript de error que se invocar\u00e1 cuando ocurra un error al cargar un fichero o cuando el usuario cancele el di\u00e1logo de selecci\u00f3n. Esta funci\u00f3n recibe los siguientes par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. A continuaci\u00f3n, se muestra un ejemplo de carga de fichero: Carga de un fichero y recogida de su nombre: \u2026 var fileName; var fileContentB64; AutoScript.getFileNameContentBase64( \u201cSeleccionar fichero\u201d, \u201cjpg,gif,png\u201d, \u201cImagen\u201d, null , loadDataSuccessCallback, loadDataErrorCallback ..); \u2026 function loadDataSuccessCallback(name, contentB64) { filename = name; fileContentB64 = contentB64; } function loadDataErrorCallback(errorType, errorMsg) { alert(\u201cError: \u201d + errorMsg); } \u2026 La funci\u00f3n de carga de fichero permite cargar un fichero del disco del usuario y obtener su contenido y nombre en la p\u00e1gina web. Sin embargo, este fichero no deber\u00eda ser tramitado directamente sin haberse realizado las comprobaciones necesarias para saber que es v\u00e1lido para el objetivo que se desee, salvo que no tengamos ning\u00fan tipo de restricci\u00f3n sobre el tipo de fichero. Tambi\u00e9n hay que tener en cuenta que, cuando cargamos datos para firmar, lo com\u00fan suele ser enviar posteriormente a servidor esos datos junto con la firma generada. Seg\u00fan el caso, el uso del m\u00e9todo de carga de ficheros se podr\u00eda sustituir por alguna de las siguientes l\u00f3gicas de negocio: Si queremos firmar un fichero y no tenemos ning\u00fan tipo de restricci\u00f3n sobre el tipo de datos que debe cargarse, podr\u00eda omitirse la carga independiente de los datos y llamar al m\u00e9todo de firma en cuesti\u00f3n sin pasarle datos. En ese caso, ser\u00e1 la propia aplicaci\u00f3n de firma la que ofrecer\u00e1 al usuario cargar un fichero para firmarlo. Advertencia : Este caso de uso no es compatible con el Cliente iOS. Si queremos cargar un fichero para firmarlo, pero antes queremos comprobar que sea un fichero v\u00e1lido, podr\u00edamos permitir que el usuario cargue los datos en la aplicaci\u00f3n primeramente mediante un componente HTML de carga de fichero. Una vez cargado el documento en servidor podemos realizar las comprobaciones necesarias sobre \u00e9l y cargar su contenido en el HTML de la p\u00e1gina en Base64 para firmarlo. Despu\u00e9s s\u00f3lo deber\u00edamos enviar al servidor la firma generada, ya que los datos ya estar\u00edan cargados. Una versi\u00f3n mejorada de esto ser\u00eda generar la firma de forma trif\u00e1sica de tal forma que la aplicaci\u00f3n no tenga que cargar el contenido del fichero en la p\u00e1gina, se pueda firmar el documento mediante un identificador (haciendo uso de un DocumentManager a medida) y la firma se genere directamente en servidor, con lo cual tampoco ser\u00eda necesario enviarla a posteriori. Consulte el apartado ANEXO II Firma trif\u00e1sica para saber m\u00e1s sobre este tipo de firmas. Selecci\u00f3n y recuperaci\u00f3n de m\u00faltiples ficheros por parte del usuario Adem\u00e1s de la operaci\u00f3n de carga de un fichero, AutoFirma incorpora una funci\u00f3n para la carga de m\u00faltiples ficheros que funciona de forma an\u00e1loga a la anterior. La funci\u00f3n JavaScript para la carga de m\u00faltiples ficheros en disco es: getMultiFileNameContentBase64 (title, extensions, description, filePath, successCb, errorCb); En esta funci\u00f3n: title T\u00edtulo del di\u00e1logo de selecci\u00f3n. extensions Listado de extensiones de fichero permitidas. Estas aparecer\u00e1n separadas por una coma (\u2018,\u2019) y sin espacios entre ellas. Por ejemplo: pdf,jpg,txt. El di\u00e1logo s\u00f3lo mostrar\u00e1 los ficheros con estas extensiones, salvo que el usuario establezca lo contrario manualmente en el di\u00e1logo. description Descripci\u00f3n del tipo de fichero que se espera cargar. Esta descripci\u00f3n aparecer\u00e1 asociada a las extensiones indicadas. filePath Ruta absoluta de uno de los ficheros que se deber\u00eda seleccionar por defecto o s\u00f3lo el nombre sugerido de uno de los ficheros. successCb Funci\u00f3n callback JavaScript de \u00e9xito que se invocar\u00e1 cuando se cargue al menos un fichero. Esta funci\u00f3n recibe los siguientes par\u00e1metros: En el primer par\u00e1metro se recibe un array con los nombres de los ficheros seleccionados. En el segundo par\u00e1metro se recibe un array con el contenido en Base64 de los ficheros seleccionados. El contenido de los par\u00e1metros recibidos ser\u00e1 tal que el nombre del primer elemento del array de nombres se corresponder\u00e1 con el contenido del primer elemento del array de contenidos, y as\u00ed para cada uno de los elementos de ambos arrays . errorCb Funci\u00f3n callback JavaScript de error que se invocar\u00e1 cuando no se seleccionen ficheros o cuando se produzca un error durante su carga. Esta funci\u00f3n recibe los siguientes par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. A continuaci\u00f3n, se muestra un ejemplo de carga de fichero: Carga de ficheros y recogida de sus nombres: \u2026 var fileNames; var fileContentB64s; AutoScript.getMultiFileNameContentBase64( \u201cSeleccionar fichero\u201d, \u201cjpg,gif,png\u201d, \u201cImagen\u201d, null , loadDataSuccessCallback, loadDataErrorCallback ); \u2026 function loadDataSuccessCallback(namesArray, contentB64sArray) { fileNames = namesArray; fileContentB64s = contentB64sArray; } function loadDataErrorCallback(type, msg) { /* Mostramos todos los errores menos el de cancelaci\u00f3n del di\u00e1logo. */ if (!\u201ces.gob.afirma.core.AOCancelledOperationException\u201d.equals(type)) { /* M\u00e9todo del integrador para mostrar logs */ showLog(msg); } } \u2026 M\u00e9todos de utilidad JavaScript Las siguientes secciones muestran diversas funciones de utilidad que incorpora el JavaScript de despliegue de Cliente @firma. Estas funciones no se comunican con la aplicaci\u00f3n nativa de firma y pueden ser implementadas por su propia aplicaci\u00f3n. Se suministran \u00fanicamente para facilitar la integraci\u00f3n del Cliente. Entre estas funciones est\u00e1n: Conversi\u00f3n de texto a Base64 y viceversa. Descarga de datos. Conversi\u00f3n de una cadena Base64 a texto El JavaScript de despliegue del Cliente @firma proporciona un m\u00e9todo para la conversi\u00f3n de una cadena Base64 a un texto plano. Este m\u00e9todo permite mostrar al usuario en texto plano informaci\u00f3n que se posea Base64. Casos en los que puede ser necesario esto son cuando se carga el contenido de un fichero de texto plano desde disco por medio de alguno de los m\u00e9todos de carga o cuando los datos son el resultado de una firma XML, por ejemplo. El juego de caracteres que se usar\u00e1 para interpretar el texto siempre ser\u00e1 UTF-8. La funci\u00f3n JavaScript para recuperar el texto plano correspondiente a la cadena en Base64 es: getTextFromBase64(dataB64); En esta funci\u00f3n: dataB64 Son los datos Base64 que se quieren mostrar como texto plano. Este m\u00e9todo devuelve una cadena con el texto plano correspondiente. A continuaci\u00f3n, se muestra un ejemplo de decodificaci\u00f3n de un texto Base64: Decodificaci\u00f3n de una firma XML generada previamente \u2026 function showTextCallback (xmlSignB64) { var text = AutoScript.getTextFromBase64(xmlSignB64); alert(text); } \u2026 AutoScript.sign(dataB64, \u201cSHA1withRSA\u201d, \u201cXAdES\u201d, \u201cformat=XAdES Enveloped\u201d, showTextCallback, errorCallback); \u2026 Conversi\u00f3n de un texto a cadena Base64 El JavaScript de despliegue del Cliente @firma proporciona un m\u00e9todo para la conversi\u00f3n de un texto plano a una cadena Base64. Este m\u00e9todo permite pasar al m\u00e9todo de firma un texto insertado por el usuario, por ejemplo. Se interpretar\u00e1 que el texto proporcionado es UTF-8. La funci\u00f3n JavaScript para convertir de texto plano a Base64 es: getBase64FromText(plaintText); En esta funci\u00f3n: plainText Es el texto plano que se desea convertir a Base64. Este m\u00e9todo devuelve una cadena Base64 que es la codificaci\u00f3n del texto plano indicado. A continuaci\u00f3n, se muestra un ejemplo de decodificaci\u00f3n de un texto Base64: Firma de un texto insertado por el usuario \u2026 var text = \"Hola Mundo!!\"; var dataB64 = AutoScript.getBase64FromText(text); AutoScript.sign (dataB64, \"SHA512withRSA\", \"CAdES\", null , successCallback, errorCallback); \u2026 Descarga de datos remotos El JavaScript de despliegue proporciona un m\u00e9todo para la descarga de datos remotos. Este m\u00e9todo accede a una URL establecida por el integrador, descarga el contenido que en ella se encuentra e invoca a un m\u00e9todo callback al que le proporciona los datos descargados en Base64. La descarga de los datos se realiza desde JavaScript y sufre las limitaciones que aplican los navegadores a este tipo de descargar. Por norma, s\u00f3lo podr\u00e1n descargarse datos accesibles desde una URL con el mismo dominio y esquema (HTTP o HTTPS) que la web que integra el JavaScript de despliegue. La descarga de los datos se realiza por medio del m\u00e9todo GET de HTTP y se realiza de forma as\u00edncrona. Es decir, se descargan los datos en un hilo de ejecuci\u00f3n distinto al proceso principal. Una vez termina el proceso de descarga, se invoca a un m\u00e9todo callback establecido por el integrador, de tal forma que se pueda recuperar el resultado de la operaci\u00f3n. La funci\u00f3n JavaScript para descarga de datos remotos es: downloadRemoteData (url, successCallback, errorCallback); En esta funci\u00f3n: url URL de acceso a los datos a descargar. successCallback Nombre de la funci\u00f3n callback que se invocar\u00e1 cuando se terminen de descargar los datos. Esta funci\u00f3n recibir\u00e1 como \u00fanico par\u00e1metro los datos descargados en Base64. errorCallback Nombre de la funci\u00f3n callback que se invocar\u00e1 cuando se produczca un error al descargar los datos. Esta funci\u00f3n recibir\u00e1 como par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. Este m\u00e9todo devuelve no devuelve nada y su ejecuci\u00f3n es as\u00edncrona. A continuaci\u00f3n, se muestra un ejemplo de descarga de datos: Descarga de datos y posterior firma \u2026 var mostrarError = function (e) { alert(\u201cError en la descarga de los datos: \u201d + e); } var iniciarFirma = function (datosB64) { AutoScript.sign (datosB64, algorithm, format, null , successCallback, errorCallback); } var url = \u201chttp://midominio.com/informe.pdf\u201d; AutoScript.downloadRemoteData (url, iniciarFirma, mostrarError); \u2026 Configuraci\u00f3n de las operaciones Paso de par\u00e1metros adicionales Los m\u00e9todos del API JavaScript para el uso del Cliente @firma trasladan los datos a la aplicaci\u00f3n de firma en forma de cadenas de texto. Algunas de estas cadenas son datos binarios codificados en Base64 (como el par\u00e1metro de datos a firmar), mientras que otras son textos planos (como los nombres del formato y el algoritmo de firma). En muchas de las operaciones del API existe un par\u00e1metro concreto, usualmente denominado params o estraParams, que se utiliza para establecer una serie de propiedades de configuraci\u00f3n opcionales. Estos par\u00e1metros se expresan en texto plano en forma de tuplas de claves y valores, emulando el formato de los objetos de propiedades de Java (Properties). Los mencionados objetos de propiedades tienen un formato como el que sigue: nombreParam1=valorParam1 nombreParam2=valorParam2 \u2026 Para expresar cadenas en este formato desde JavaScript, se concatenar\u00e1n cada una de las l\u00edneas usando el car\u00e1cter especial de nueva l\u00ednea (\\n) como separador: var params=\u2019nombreParam1=valorParam1\\nnombreParam2=valorParam2\u2019; Es importante especificar el nombre de las propiedades exactamente como se indique, ya que puede existir diferenciaci\u00f3n entre may\u00fasculas y min\u00fasculas. Cualquier par\u00e1metro no soportado por la operaci\u00f3n invocada, simplemente, se ignorar\u00e1. Nota: El Cliente @firma interpreta todos los textos, tanto los recibidos como los devueltos en las respuestas, usando el juego de caracteres UTF-8. Para poder transmitirlos y mostrarlos correctamente desde una p\u00e1gina web es necesario que esta se encuentre codificada en UTF-8 y lo declare como tal. En caso de no ser posible, se recomienda: Que el Base64 de los textos a proporcionar al Cliente se hayan obtenido desde un entorno en el que se pueda gantizar que originalmente estaban codificados en UTF-8. Por ejemplo, que el texto ya estuviese previamente codificado o que se codifique a trav\u00e9s de un servicio. No mostrar directamente al usuario los mensajes devueltos por el propio Cliente. Ejemplo de uso: \u2026 AutoScript.cargarAppAfirma(); // Configuramos 3 par\u00e1metros adicionales: // - expPolicy: Pol\u00edtica de firma // - filters: Filtros de certificados vigentes // - signerClaimedRoles: Roles del firmante var extraParams = \"expPolicy=FirmaAGE\\nfilters=nonRepudiation:\\n\" + \"signerClaimedRoles=Apoderado\"; // Ejecutamos la operaci\u00f3n de firma AutoScript.sign (dataB64, \"CAdES\", \"SHA512withRSA\", extraParams, successCallback, errorCallback); \u2026 Configuraci\u00f3n de los filtros de certificados El Cliente @firma dispone de filtros de certificados que se pueden aplicar para restringir los certificados que podr\u00e1 seleccionar el usuario para realizar una operaci\u00f3n de firma o multifirma. Los filtros de certificados se pueden establecer como par\u00e1metros adicionales en las distintas operaciones de firma y selecci\u00f3n de certificados. Por defecto, AutoFirma no mostrar\u00e1 al usuario los certificados caducados. Sin embargo, si se establecen filtros de certificados, se mostrar\u00e1n todos aquellos certificados disponibles que cumplan con las condiciones dadas, incluidos los certificados caducados. Para omitir expresamente estos certificados se puede utilizar el filtro \u201cnonexpired:\u201d, explicado m\u00e1s adelante en este apartado. Advertencia: El uso de filtros de certificados no esta soportado por los clientes de firma m\u00f3vil. Las propiedades de configuraci\u00f3n de filtros ser\u00e1n ignoradas por las aplicaciones m\u00f3viles. Las claves que nos permiten establecer filtros de certificados son: filters : Esta clave permite establecer uno o m\u00e1s de los filtros de certificados que se listan m\u00e1s adelante en este apartado. Los certificados deber\u00e1n cumplir las condiciones establecidas en todos los filtros listados, o de lo contrario no se mostrar\u00e1n. Los distintos filtros se deben separar mediante el car\u00e1cter punto y coma (\u2018;\u2019). Ejemplos: filters=nonexpired:false Motrar todos los certificados, incluso los caducados. filters=issuer.rfc2254: (O=DIRECCION GENERAL DE LA POLICIA);keyusage.nonrepudiation:true Mostrar s\u00f3lo certificados de firma del DNIe. filters=issuer.rfc2254: (O=DIRECCION GENERAL DE LA POLICIA);keyusage.nonrepudiation:true;nonexpired: Mostrar s\u00f3lo certificados de firma del DNIe no caducados. filters.X : En esta clave \u2018X\u2019 ser\u00e1 un entero igual o mayor que 1. El Cliente @firma leer\u00e1 la clave filters.1 , a continuaci\u00f3n, filters.2 y as\u00ed hasta que no encuentre una de las claves de la secuencia. Al contrario que con la clave filters , basta con que el certificado cumpla uno de estos filtros para que se muestre. No es necesario cumplirlos todos. Cada una de estas claves puede declarar varios filtros separados por punto y coma (\u2018;\u2019) de tal forma que s\u00ed se deber\u00e1n cumplir todos ellos para satisfacer ese sub-filtro concreto. Ejemplos: Mostrar los certificados no caducados del ciudadano con NIF 11111111H: filters.1=subject.rfc2254:(SERIALNUMBER=*11111111H);nonexpired: filters.2=subject.rfc2254:(CN=*11111111H*);nonexpired: IMPORTANTE: Las autoridades certificadoras pueden agregar el DNI del ciudadano en distintos campos del certificado y AutoFirma no dispone de un modo de localizarlo. Sin embargo, la mayor de ellas ya agrega el DNI como parte del RDN \u201cSERIALNUMBER\u201d del subject del certificado. Algunas tambi\u00e9n lo agregan como parte del CN. As\u00ed, este ejemplo, englobar\u00eda funcionaria con buena parte de los certificados personales emitidos por autoridades espa\u00f1olas, pero puede que no con todas. Mostrar los certificados CERES y el certificado de firma del DNIe: filters.1=nonexpired:;issuer.rfc2254:(O=DIRECCION GENERAL DE LA POLICIA);keyusage.nonrepudiation:true filters.2=nonexpired:;issuer.rfc2254:(O=FNMT-RCM) Estas claves de definici\u00f3n de filtros son excluyentes y tienen prioridad seg\u00fan el orden en el que se han listado ( filters y filters.X ). Es decir, si se establece la propiedad filters, no se procesar\u00e1n las propiedades del tipo filters.1 , por ejemplo. Los filtros disponibles en AutoFirma son: Filtro de certificados caducados: Filtra los certificados para que no se muestren aquellos que se encuentren fuera de su periodo de validez, que son los \u00fanicos que pueden generar una firma v\u00e1lida. El filtro determina si un certificado est\u00e1 vigente en base a la fecha/hora del equipo del usuario. Para establecer este filtro se usar\u00e1 el valor \u201c nonexpired: \u201d. Ejemplo: filters=nonexpired: Un integrador tambi\u00e9n puede habilitar o deshabilitar expresamente este filtro sigui\u00e9ndolo de las palabras \u201c true \u201d o \u201c false \u201d, respectivamente. Por defecto, si no se indica ning\u00fan filtro de certificados, AutoFirma omitir\u00e1 los certificados que est\u00e9n fuera de su periodo de validez. Si se desea que se muestren los certificados caducados sin indicar ning\u00fan otro filtro, se puede configurar la propiedad de filtrado de la siguiente manera: filters=nonexpired:false Filtro por n\u00famero de serie de certificados cualificados de firma: Filtra los certificados del almac\u00e9n para que s\u00f3lo se muestre aquellos con un n\u00famero de serie concreto, lo que com\u00fanmente har\u00e1 que se muestre un \u00fanico certificado. En el caso de que el certificado identificado por el filtro no sea un certificado cualificado para firma, se buscar\u00e1 en el almac\u00e9n un certificado parejo que s\u00ed lo est\u00e9. Si se encontrase se seleccionar\u00eda este nuevo certificado y, si no, se seleccionar\u00e1 el certificado al que corresponde el n\u00famero de serie. Para establecer este filtro se usar\u00e1 el valor \u201c qualified: \u201d seguido por el n\u00famero de serie del certificado en hexadecimal. Ejemplos: filters=qualified:45553a61 filters=qualified:03ea Filtro en base a certificado codificado: Filtra los certificados para seleccionar uno concreto proporcionado a trav\u00e9s del filtro. Esto es de utilidad cuando, despu\u00e9s de una operaci\u00f3n realizada con un certificado, se quiere restringir futuras operaciones para que se realicen con el mismo certificado. Para establecer este filtro se usar\u00e1 el valor \u201c encodedcert: \u201d seguido del certificado codificado en Base64. Esto es, tal como se devuelve a trav\u00e9s del callback en los m\u00e9todos de firma y selecci\u00f3n de certificado. Ejemplo: filters=encodedcert:MIIIcjCCBlqgAwIB\u2026\u2026\u2026\u2026\u2026radvEjJ= Este filtro mostrar\u00e1 s\u00f3lo aquel certificado que hemos proporcionado en el filtro, en caso de que exista en el almac\u00e9n. Filtro por huella digital ( Thumbprint ): Filtra los certificados de tal forma que s\u00f3lo se mostrar\u00e1 aquel que tenga la huella digital indicada. Hay que tener en cuenta que esta huella digital no debe calcularse en base a un fichero (por ejemplo, un \u201c.cer\u201d), sino que es la huella digital de la codificaci\u00f3n del certificado. Para establecer este filtro se usar\u00e1 el valor \u201c thumbprint: \u201d seguido del algoritmo de huella digital utilizado y, separado por el car\u00e1cter dos puntos (\u2018:\u2019) la huella digital que se busque en hexadecimal. Ejemplo: filters=thumbprint:SHA1:30 3a bb 15 44 3a fd d7 c5 a2 52 dc a5 54 f4 c5 ee 8a a5 4d Este filtro s\u00f3lo mostrar\u00e1 el certificado cuya huella digital en SHA1 sea la indicada. Filtro DNIe: Filtra los certificados del almac\u00e9n para que s\u00f3lo se muestren los certificados de firma de los DNIe disponibles desde ese almac\u00e9n. Para establecer este filtro se usar\u00e1 el valor \u201c dnie: \u201d. Ejemplo: filters=dnie: Filtro de certificados SSCD: Filtra los certificados del almac\u00e9n para que se muestren s\u00f3lo aquellos generados en un dispositivo SSCD (dispositivo seguro de creaci\u00f3n de firma), como es el caso de los certificados del DNIe. Hay que tener en cuenta que el filtrado se realiza a partir de un atributo QCStatement declarado en el propio certificado. Si la autoridad de certificaci\u00f3n no incluye este atributo, no ser\u00e1 posible realizar la distinci\u00f3n. Para establecer este filtro se usar\u00e1 el valor \u201c sscd: \u201d . Ejemplo: filters=sscd: Filtro de certificados de firma: Filtra los certificados del almac\u00e9n para que se muestren todos los certificados salvo el certificado de autenticaci\u00f3n del DNIe. Este filtro se crea para evitar excluir algunos tipos de certificados con los KeyUsage mal declarados. Para establecer este filtro se usar\u00e1 el valor \u201csigningCert:\u201d. Ejemplo: filters=signingCert: Para un filtrado m\u00e1s correcto de los certificados de firma, utilice el filtro \u201c keyusage.nonrepudiation: \u201d. Filtro de certificados de autenticaci\u00f3n: Filtra los certificados del almac\u00e9n para que se muestren todos los certificados salvo el certificado de firma del DNIe. Este filtro se crea para evitar excluir algunos tipos de certificados con los KeyUsage mal declarados. Para establecer este filtro se usar\u00e1 el valor \u201c authCert: \u201d . Ejemplo: filters=authCert: Para un filtrado m\u00e1s correcto de los certificados de autenticaci\u00f3n, utilice el filtro \u201c keyusage.digitalsignature: \u201d. Filtro RFC2254 en base al Subject del certificado: Filtra los certificados a partir de una expresi\u00f3n regular creada seg\u00fan la RFC2254 que se aplica sobre el Subject del certificado. Para establecer este filtro se usar\u00e1 el valor \u201c subject.rfc2254: \u201c seguido de la expresi\u00f3n RFC2254. Puede revisarse la normativa RFC 2254 en http://www.faqs.org/rfcs/rfc2254.html Ejemplo: filters=subject.rfc2254:(CN=*12345678z*) Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados en los que aparezca la cadena \u201c12345678z\u201d en el CommonName de su Subject . Filtro RFC2254 en base al Issuer del certificado: Filtra los certificados a partir de una expresi\u00f3n regular creada seg\u00fan la RFC2254 que se aplica sobre el Issuer del certificado. Para establecer este filtro se usar\u00e1 el valor \u201c issuer.rfc2254: \u201d seguido de la expresi\u00f3n RFC2254. Puede revisarse la normativa RFC 2254 en http://www.faqs.org/rfcs/rfc2254.html Ejemplo: filters=issuer.rfc2254:(|(O=FNMT-RCM)(O=DIRECCION GENERAL DE LA POLICIA)) Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados cuyo Issuer tenga establecido como organizaci\u00f3n \u201cFNMT\u201d o \u201cDIRECCION GENERAL DE LA POLICIA\u201d, es decir, s\u00f3lo mostrar\u00e1 los certificados del DNIe y los de la FNMT. Este filtro puede aplicarse de forma recursiva, de tal forma que permitir\u00e1 el uso del certificado si cualquier de los certificados de la cadena de certificaci\u00f3n por encima de \u00e9l mismo cumple con la expresi\u00f3n indicada. Para utilizar recursivamente este filtro se usar\u00e1 el valor issuer.rfc2254.recurse: seguido de la expresi\u00f3n RFC2254. Ejemplo: filters=issuer.rfc2254.recurse:(CN=*FNMT*) Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados en los que alguno de los certificados de su cadena de certificaci\u00f3n tenga la part\u00edcula \u201cFNMT\u201d en el nombre com\u00fan Filtro de texto en base al Subject del certificado: Filtra los certificados seg\u00fan si contienen o no una cadena de texto en el Principal de su Subject . Para establecer este filtro se usar\u00e1 el valor \u201c subject.contains: \u201d seguido de la cadena de texto que debe contener. Ejemplo: filters=subject.contains:JUAN ESPA\u00d1OL ESPA\u00d1OL Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados en los que aparezca la cadena \u201cJUAN ESPA\u00d1OL ESPA\u00d1OL\u201d en el Subject . Filtro de texto en base al Issuer del certificado: Filtra los certificados seg\u00fan si contienen o no una cadena de texto en el Principal de su Issuer . Para establecer este filtro se usar\u00e1 el valor \u201c issuer.contains: \u201d seguido de la cadena de texto que debe contener. Ejemplo: filters=issuer.contains:O=EMPRESA Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados en los que el Principal del Issuer muestre el texto \u201cO=EMPRESA\u201d. Filtros por uso declarado de los certificados ( KeyUsage ): Colecci\u00f3n de filtros que permiten filtrar seg\u00fan el uso declarado de los certificados. Para establecer estos filtros usaremos las siguientes claves seg\u00fan los usos que se quieran comprobar. Las claves ir\u00e1n seguidas de los valores \u201ctrue\u201d o \u201cfalse\u201d, seg\u00fan se desee que el uso est\u00e9 habilitado o no lo est\u00e9, respectivamente: keyusage.digitalsignature: keyusage.nonrepudiation: keyusage.keyencipherment: keyusage.dataencipherment: keyusage.keyagreement: keyusage.keycertsign: keyusage.crlsign: keyusage.encipheronly: keyusage.decipheronly: Los KeyUsages que no se declaren en el filtro no se tendr\u00e1n en cuenta. Ejemplos: filters=keyusage.digitalsignature:true;keyusage. keyencipherment:true Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados que tengan establecidos a true los KeyUsage digitalsignature (autenticaci\u00f3n) y keyencipherment (sobres electr\u00f3nicos), ignorando el valor del resto de KeyUsages . filters=keyusage.nonrepudiation:false Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados que no declaren el KeyUsage de firma avanzada. Filtro por identificador de directiva: Filtra los certificados por aquellos que poseen un identificador de directiva concreto. Esto es \u00fatil para mostrar s\u00f3lo determinado tipo de certificados de una autoridad de certificaci\u00f3n. Para establecer este filtro se usar\u00e1 el valor \u201c policyid: \u201d seguido por el listado de OIDs, separados por comas (\u2018,\u2019), por los que se quieran filtrar. Ejemplo: filters=policyid:1.3.6.1.4.1.18332.3.4.1.2.11 Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados con el identificador de directiva \u201c1.3.6.1.4.1.18332.3.4.1.2.11\u201d. Filtro de seud\u00f3nimo: Permite filtrar los certificados permitiendo que el usuario se centre en los certificados de pseud\u00f3nimo, lo que permite que su nombre real del usuario quede excluido de la firma. Para establecer este filtro se usar\u00e1 uno de los siguientes valores: pseudonym:only Establece que s\u00f3lo se muestren los certificados de pseud\u00f3nimo. pseudonym:andothers Establece que se muestren los certificados de pseud\u00f3nimo y aquellos que no tienen un certificado de seud\u00f3nimo asociado. As\u00ed, quedan ocultos los certificados que tienen un certificado equivalente de seud\u00f3nimo. Es es el valor por defecto y se utilizar\u00e1 incluso si se escribe \u201c pseudonym: \u201d a secas o seguido de cualquier valor que no coincida con otro de los valores permitidos. Ejemplo: filters=pseudonym: Filtro de almacenes externos: Permite deshabilitar el bot\u00f3n de carga de almacenes PKCS#12 en el di\u00e1logo de selecci\u00f3n de certificados. De esta forma s\u00f3lo podr\u00e1n usarse los certificados del almac\u00e9n seleccionado por el integrador o los por defecto del navegador en caso de que el integrador ni especificase ning\u00fan almac\u00e9n. Para establecer este filtro se usar\u00e1 el valor \u201c disableopeningexternalstores \u201c. Ejemplo: filters=disableopeningexternalstores Se ignorar\u00e1 cualquier valor establecido como filtro de certificados distinto a los que se han listado. Si ning\u00fan certificado cumple los criterios de filtrado, se ejecutar\u00e1 la operaci\u00f3n de error indicando que no se ha encontrado ning\u00fan certificado que cumpla con los criterios indicados. Si m\u00e1s de un certificado cumple los criterios de filtrado, se mostrar\u00e1n todos ellos en el di\u00e1logo de selecci\u00f3n de certificados. Si tan s\u00f3lo un certificado cumple con las condiciones de los filtros establecidos y se ha configurado la opci\u00f3n \u201c headless \u201d en las propiedades adicionales de la operaci\u00f3n, se seleccionar\u00e1 autom\u00e1ticamente ese certificado sin mostrar el di\u00e1logo de selecci\u00f3n al usuario. Consulte el apartado 7.3 Selecci\u00f3n autom\u00e1tica de certificados para conocer c\u00f3mo configurar la propiedad \u201c headless \u201d. Selecci\u00f3n autom\u00e1tica de certificados Para aquellos casos en los que s\u00f3lo exista un certificado en el almac\u00e9n de certificados o cuando se descarten certificados mediante filtros y s\u00f3lo haya uno que es posible seleccionar, es posible indicar a AutoFirma que lo seleccione autom\u00e1ticamente en lugar de mostrar al usuario el di\u00e1logo de selecci\u00f3n con este \u00fanico certificado. Esto podemos configurarlo mediante la propiedad headless . headless=true Por defecto, si no se establece la propiedad headless o se indica un valor distinto de true , se mostrar\u00e1 el di\u00e1logo de selecci\u00f3n de certificados aun cuando s\u00f3lo haya un certificado para seleccionar. Los clientes de firma m\u00f3vil ignoran la propiedad headless por las restricciones de seguridad de los propios sistemas. Configuraci\u00f3n de la pol\u00edtica de firma La pol\u00edtica de firma de una firma electr\u00f3nica identifica diversos criterios que se han cumplido durante la construcci\u00f3n de esta firma o requisitos que cumple la propia firma. Los formatos de firma CAdES, PAdES y XAdES permiten declarar la pol\u00edtica de firma que se ha seguido para su generaci\u00f3n. Tenga en cuenta que el que una firma incluya los atributos correspondientes a una pol\u00edtica de firma concreta no significa que cumpla los criterios de la pol\u00edtica. Si desea que sus firmas se ajusten a una pol\u00edtica de firma lea las restricciones impuestas por esa pol\u00edtica y genere firmas acordes a ella antes de configurarla. De esta forma, podr\u00e1 asegurarse de que sus firmas son compatibles con otros sistemas y entornos en los que se utilicen firmas acordes a la pol\u00edtica en cuesti\u00f3n. Pol\u00edtica de firma de la AGE v1.9 En el Cliente @firma se ha incluido un mecanismo para la configuraci\u00f3n r\u00e1pida y sencilla de la pol\u00edtica de firma de la Administraci\u00f3n General del Estado (AGE) v1.9. Para configurar esta pol\u00edtica concreta basta con indicar la siguiente propiedad propiedad adicional en la operaci\u00f3n de firma deseada. expPolicy=FirmaAGE Esta propiedad se expandir\u00e1 a las necesarias para el cumplimiento de la pol\u00edtica de firma de la AGE, lo que equivale a introducir las propiedades manualmente. Los par\u00e1metros de esta pol\u00edtica para cada uno de los formatos comprendidos en la misma los siguientes: CAdES policyIdentifier=2.16.724.1.3.1.1.2.1.9 policyIdentifierHash=G7roucf600+f03r/o0bAOQ6WAs0= policyIdentifierHashAlgorithm=http://www.w3.org/2000/09/xmldsig#sha1 policyQualifier=https://sede.administracion.gob.es/politica_de_firma_anexo_1.pdf mode=implicit XAdES policyIdentifier=urn:oid:2.16.724.1.3.1.1.2.1.9 policyIdentifierHash=G7roucf600+f03r/o0bAOQ6WAs0= policyIdentifierHashAlgorithm=http://www.w3.org/2000/09/xmldsig#sha1 policyQualifier=https://sede.administracion.gob.es/politica_de_firma_anexo_1.pdf format=XAdES Detached PAdES policyIdentifier=2.16.724.1.3.1.1.2.1.9 policyIdentifierHash=G7roucf600+f03r/o0bAOQ6WAs0= policyIdentifierHashAlgorithm=http://www.w3.org/2000/09/xmldsig#sha1 policyQualifier=https://sede.administracion.gob.es/politica_de_firma_anexo_1.pdf La propiedad format, s\u00f3lo se aplicar\u00e1 cuando el formato de firma sea XAdES. La propiedad mode, s\u00f3lo se aplicar\u00e1 cuando el formato de firma sea CAdES y los datos ocupen menos de 1 MB. Los datos no se incluir\u00e1n en la firma cuando su tama\u00f1o sea mayor, siguiendo, de forma general, la especificaci\u00f3n establecida por la pol\u00edtica de firma de la AGE: En el caso de que, debido al tama\u00f1o de los datos a firmar, no resulte t\u00e9cnicamente posible o aconsejable realizar las firmas con el formato anteriormente descrito (que la firma contenga los datos firmados) , se generar\u00e1 la estructura de firma detached, que incluye el hash del documento original en la firma. Debido a la generalidad de la especificaci\u00f3n, se permite al integrador definir qu\u00e9 tama\u00f1os de datos pueden incluirse dentro de la firma y cu\u00e1les no para su aplicaci\u00f3n, por lo que, en caso de haberse indicado expresamente un modo de firma (par\u00e1metro mode), se utilizar\u00e1 el valor establecido por el integrador. Si se configura para la operaci\u00f3n alguna propiedad individual que entre en conflicto con la pol\u00edtica indicada (por ejemplo, indicando un formato prohibido por esta), se ignorar\u00e1 esa propiedad individual y prevalecer\u00e1 el valor impuesto por la pol\u00edtica. Por ejemplo, si se configurasen las propiedades expPolicy=FirmaAGE y format=XAdES Enveloping, para una operaci\u00f3n de firma con formato XAdES, se generar\u00eda una firma XAdES Detached con la pol\u00edtica de firma de la AGE establecida. Es decir, se ignorar\u00eda que se estableci\u00f3 la propiedad format=XAdES Enveloping. Para m\u00e1s informaci\u00f3n sobre la pol\u00edtica de firma de la AGE puede consultar la gu\u00eda de implementaci\u00f3n de la pol\u00edtica: https://administracionelectronica.gob.es/ctt/politicafirma#.YBEdyzr0mbg . Para saber c\u00f3mo configurar propiedades en las operaciones de firma, consulte el apartado 7.1 Paso de par\u00e1metros adicionales . Pol\u00edtica de firma de Factura electr\u00f3nica (Facturae) Para la firma de facturas electr\u00f3nicas se deber\u00e1 utilizar siempre el formato de firma FacturaE. Configurar este formato establecer\u00e1 autom\u00e1ticamente las propiedades necesarias para la firma de facturas electr\u00f3nicas, incluida la pol\u00edtica de firma. Las firmas generadas con este formato siempre son seg\u00fan la especificaci\u00f3n 3.1 de factura electr\u00f3nica. Validaci\u00f3n de firmas previas Las operaciones de cofirma y contrafirma se realizan sobre firmas generadas anteriormente. Salvo en casos concretos, el Cliente @Firma permite agregar nuevas firmas a cualquier firma compatible sin restricci\u00f3n. Esto implica que, por ejemplo, se podr\u00eda contrafirmar una firma que no sea v\u00e1lida por haberse caducado su certificado. Es posible que desde su aplicaci\u00f3n quiera restringirse, en la medida de lo posible, el que se cofirmen y contrafirmen firmas inv\u00e1lidas, para lo cual puede usarse la opci\u00f3n checkSignatures . checkSignatures=true Esta propiedad realiza una verificaci\u00f3n criptogr\u00e1fica de la firma y comprueba la caducidad de los certificados utilizados en ella. Esto no es una validaci\u00f3n completa de firma , ya que para considerar que la firma es v\u00e1lida deben realizarse otras operaciones no soportadas por el Cliente @firma, como la comprobaci\u00f3n del estado de revocaci\u00f3n de los certificados o la adhesi\u00f3n de la firma a la pol\u00edtica de firma que declare. Esta propiedad debe usarse para reducir la posibilidad de procesar firmas inv\u00e1lidas, pero es responsabilidad de la aplicaci\u00f3n saber si son v\u00e1lidas antes de enviarse a procesar o, si es el usuario el que selecciona expresamente estas firmas, el realizar una validaci\u00f3n posterior. Si durante el proceso de cofirma o contrafirma se detecta que la firma de entrada no es v\u00e1lida, el nuevo proceso de firma fallar\u00e1 y se notificar\u00e1 el error a trav\u00e9s del m\u00e9todo callback configurado. Si se pude completar este proceso de validaci\u00f3n, la multifirma continuar\u00e1 normalmente. La verificaci\u00f3n de las firmas previas es una operaci\u00f3n compatible con los siguientes formatos de firma: CAdES XAdES PAdES La verficaci\u00f3n se realiza tanto en la generaci\u00f3n de firmas monof\u00e1sicas en AutoFirma como trif\u00e1sicas con cualquiera de las aplicaciones de firma. En el caso de las firmas monof\u00e1sicas, la validaci\u00f3n se realiza al inicio del proceso de firma, mientras que en las firmas trif\u00e1sicas el proceso se realiza en servidor. Por este motivo, al realizar firmas trif\u00e1sicas se le pedir\u00e1 el certificado al usuario incluso si la firma no es v\u00e1lida, ya que esto es algo que no se identificar\u00e1 hasta m\u00e1s adelante en el proceso de firma. Si su despliegue es compatible con aplicaciones m\u00f3viles y desea que estas tambi\u00e9n validen la firma previa antes de agregar otra nueva, aseg\u00farese de que en estos entornos m\u00f3viles se configura el nombre de formato de firma que obliga a la generaci\u00f3n de la firma de forma trif\u00e1sica (CAdEStri, XAdEStri o PAdEStri). Formatos de firma El Cliente @firma permite la generaci\u00f3n de firmas en diversos formatos con diversos perfiles b\u00e1sicos. Las firmas en estos formatos pueden ser mejoradas a posteriori con otros productos para incluir la informaci\u00f3n longeva de firma. Los formatos avanzados soportados son: CAdES Formato avanzado de firma binaria. XAdES Formato avanzado de firma XML. PAdES Formato avanzado de firma de documentos PDF. FacturaE Formato para la firma de facturas electr\u00f3nicas. Se trata de una firma XAdES especialmente adaptada para cumplir los requisitos de firma de las facturas electr\u00f3nicas. El Cliente @firma soporta por retrocompatibilidad otros formatos de firma, pero ninguno de estos formatos se recoge en la pol\u00edtica de firma de la AGE, su uso est\u00e1 desaconsejado y no se proporciona soporte sobre los mismos: CMS Formato de firma binaria no avanzado. Se recomienda sustituir por el formato CAdES, con el que es compatible. XMLdSig Formato de firma XML no avanzado. Se recomienda sustituir por el formato XAdES, con el que es compatible. ODF Formato de firma basado en XMLdSig y utilizado por OpenOffice/LibreOffice. Se recomienda sustituirlo por firmas PAdES sobre documentos PDF para seguir gestion\u00e1ndolas junto al documento firmado o por firmas CAdES o XAdES si su sistema puede gestionar por separado el documento y la firma electronica. OOXML Formato de firma basado en XAdES y utilizado por Microsoft Office. Se recomienda sustituirlo por firmas PAdES sobre documentos PDF para seguir gestion\u00e1ndolas junto al documento firmado o por firmas CAdES o XAdES si su sistema puede gestionar por separado el documento y la firma electronica. Adicionalmente, se soporta el nombre de formato \u201cNONE\u201d para permitir realizar una firma sin formato (PKCS#1). La utilidad de esto es permitir generar el formato de firma externa y utilizar el Cliente @firma \u00fanicamente para generar el cifrado con el certificado del usuario. En los siguientes apartados, se proporciona informaci\u00f3n adicional de los principales formatos de firma soportados, junto con el listado de opciones del Cliente @firma para configurarlos. Configuraci\u00f3n de firmas CAdES Las firmas CAdES generadas por el Cliente @firma son, por defecto, acordes a todas las siguientes versiones del formato de firma: v1.7.3 (ETSI TS 101 733 v1.7.3) v1.7.4 (ETSI TS 101 733 v1.7.4) v1.8.1 (ETSI TS 101 733 v1.8.1) v1.8.3 (ETSI TS 101 733 v1.8.3) v2.1.1 (ETSI TS 101 733 v2.1.1) v2.2.1 (ETSI TS 101 733 v2.2.1) Las firmas CAdES no declaran cu\u00e1l es su versi\u00f3n de formato de firma, por lo que puede considerarse que una misma firma se ajusta a todas las versiones anteriormente listadas. El Cliente @firma permite generar firmas CAdES acordes a los siguientes perfiles de firma: CAdES-BES Todas las firmas CAdES generadas por el Cliente @firma sin pol\u00edtica de firma son consideradas CAdES-BES. CAdES-EPES Todas las firmas CAdES generadas por el Cliente @firma con pol\u00edtica de firma son consideradas CAdES-EPES. Hay que tener en cuenta que algunas de las firmas CAdES generadas por el Cliente @firma tambi\u00e9n pueden considerarse de tipo B-Level. Sin embargo, el Cliente @firma no incluye un modo de operaci\u00f3n que permita asegurar que las firmas generadas sean acordes a este perfil. Algunas de las propiedades de configuraci\u00f3n listadas en el apartado 8.1.3 Par\u00e1metros adicionales pueden afectar a la compatibilidad de las firmas generadas con algunas versiones o perfiles del formato. Consulte el apartado espec\u00edfico de cada propiedad para saber si esta afecta o no a la compatibilidad. Las firmas CAdES que el Cliente @firma genera por defecto no incluyen ni los datos firmados (firma expl\u00edcita) ni pol\u00edtica de firma y se ajusta al perfil CAdES-BES. Algoritmos de firma Las firmas CAdES generadas por el Cliente @firma aceptan los siguientes algoritmos de firma: SHA512withRSA SHA384withRSA SHA256withRSA SHA1withRSA (No recomendado) No es recomendable usar el algoritmo SHA1withRSA por estar obsoleto y ser vulnerable. El algoritmo m\u00e1s seguro y, por lo tanto, el recomendado para su uso es SHA512withRSA. Si los certificados del usuario se encuentran en tarjeta inteligente, aseg\u00farese de disponer de la \u00faltima versi\u00f3n de su controlador para garantizar la compatibilidad con estos algoritmos de firma. En caso de que, a\u00fan as\u00ed, no pueda utilizar este algoritmo con su tarjeta inteligente, consulte la informaci\u00f3n de compatibilidad de su tarjeta y/o pruebe con otro algoritmo. Firmas CAdES impl\u00edcitas o expl\u00edcitas Las firmas CAdES pueden incluir internamente una copia de los datos firmados (firmas impl\u00edcitas o \u201c attached \u201d) o no incluirlos (firmas expl\u00edcitas o \u201c detached \u201d). El Cliente @firma por defecto genera firmas expl\u00edcitas, m\u00e1s peque\u00f1as en tama\u00f1o, pero es posible que desee generar firmas impl\u00edcitas para disponer en un s\u00f3lo fichero de los datos y la firma electr\u00f3nica, as\u00ed como tener toda la informaci\u00f3n necesaria para la validaci\u00f3n completa de la firma. Para generar firmas impl\u00edcitas, debe indicar el siguiente par\u00e1metro adicional: mode=implicit Par\u00e1metros adicionales A continuaci\u00f3n, se detallan los par\u00e1metros adicionales que aceptan cada una de las operaciones de firma. Es posible que el uso de par\u00e1metros no contemplados en las siguientes tablas provoque otros cambios de funcionamiento del Cliente o en la informaci\u00f3n contenida en las firmas CAdES. No obstante, no se dar\u00e1 soporte al aplicativo si se usan par\u00e1metros no documentados, asumiendo el integrador todo el riesgo y responsabilidad derivados del uso de par\u00e1metros o valores distintos de los aqu\u00ed descritos. Firma y cofirma Nombre del par\u00e1metro Valores posibles Descripci\u00f3n mode explicit La firma resultante no incluir\u00e1 los datos firmados. Si no se indica el par\u00e1metro mode se configura autom\u00e1ticamente este comportamiento. implicit La firma resultante incluir\u00e1 internamente una copia de los datos firmados. El uso de este valor podr\u00eda generar firmas de gran tama\u00f1o. En las cofirmas, este par\u00e1metro se ignorar\u00e1 si los datos ya estaban contenidos en la firma original o si no se proporcionan los datos. contentTypeOid OID Identificador del tipo de dato firmado. contentDescription [Texto] Descripci\u00f3n textual del tipo de datos firmado. includeMimeTypeAttribute true Incluye en la firma el atributo id-aa-ets-mimeType definido en CAdES v2.1.1 y superiores (v\u00e1lido en firmas baseline). El valor de mimetype se tomar\u00e1 de la propiedad mimetype o, si no se incluyo, se extrapolar\u00e1 de la propiedad contentTypeOid. Si tampoco fuese posible, se tratar\u00e1n de obtener estos valores de alguna de las firmas previas (en caso de cofirmas). Si tampoco fuese posible, se obtendr\u00e1 el tipo del an\u00e1lisis de los datos (que podr\u00eda no ser correcto o concreto). En caso de que no se pueda obtener el tipo de ninguna manera, se usar\u00e1 el mimetype application/octet-stream. false No incluye el atributo id-aa-ets-mimeType en la firma. Valor por defecto. mimeType [Texto en formato MIME-Type] MIME-Type de los datos a firmar. S\u00f3lo se incluye cuando se indica la propiedad includeMimeTypeAttribute. policyIdentifier [OID o URN de tipo OID] Identificador de la pol\u00edtica de firma, necesario para generar firmas CAdES-EPES. policyIdentifierHash [Valor en Base64] Huella digital de la pol\u00edtica de firma. Es obligatorio indicar este par\u00e1metro si de indic\u00f3 tambi\u00e9n policyIdentifier, al igual que es obligatorio tambi\u00e9n dar valor al par\u00e1metro policyIdentifierHashAlgorithm. policyIdentifierHashAlgorithm SHA1 Indica que la huella digital indicada en la propiedad policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA1. SHA-256 Indica que la huella digital indicada en la propiedad policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-256. SHA-384 Indica que la huella digital indicada en la propiedad policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-284. SHA-512 Indica que la huella digital indicada en la propiedad policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-512. policyQualifier [URL hacia documento] URL (universalmente accesible) hacia el documento (normalmente PDF) que contiene una descripci\u00f3n textual de la pol\u00edtica de firma. Esta propiedad es opcional incluso si se desea generar firmas CAdES-EPES. includeOnlySignningCertificate true Indica que debe incluirse en la firma \u00fanicamente el certificado del firmante. false Indica que debe incluirse en la firma toda la cadena de certificaci\u00f3n del certificado firmante. Valor por defecto. signatureProductionCity [Texto] Agrega a la firma un campo con la ciudad en la que se realiza la firma. La codificaci\u00f3n debe ser UTF-8. signatureProductionPostalCode [Texto] Agrega a la firma un campo con el c\u00f3digo postal en donde se realiza la firma. La codificaci\u00f3n debe ser UTF-8. signatureProductionCountry [Texto] Agrega a la firma un campo con el pa\u00eds en la que se realiza la firma. La codificaci\u00f3n debe ser UTF-8. signerClaimedRoles [Texto] Agrega a la firma campos con los cargos atribuidos al firmante. Deben separarse los cargos con el car\u00e1cter \u201c|\u201d (y este no puede estar en el propio texto de ning\u00fan cargo). commitmentTypeIndications [Entero] Indica el n\u00famero de CommitmentTypeIndications que se van a declarar. Estos son los motivos que se declaran para la firma. Los valores concretos se especifican con commitmentTypeIndication n Identifier y commitmentTypeIndication n Description, donde \u2018 n \u2019 va desde 0 hasta el valor indicado en esta propiedad menos 1. commitmentTypeIndication n Identifier 1 Establece que el CommitmentTypeIndications n\u00famero n (contando desde cero) es \u201c Prueba de origen \u201d. 2 Establece que el CommitmentTypeIndications n\u00famero n (contando desde cero) es \u201c Prueba de recepci\u00f3n \u201d. 3 Establece que el CommitmentTypeIndications n\u00famero n (contando desde cero) es \u201c Prueba de entrega \u201d. 4 Establece que el CommitmentTypeIndications n\u00famero n (contando desde cero) es \u201c Prueba de env\u00edo \u201d. 5 Establece que el CommitmentTypeIndications n\u00famero n (contando desde cero) es \u201c Prueba de aprobaci\u00f3n \u201d. 6 Establece que el CommitmentTypeIndications n\u00famero n (contando desde cero) es \u201c Prueba de creaci\u00f3n \u201d. commitmentTypeIndication n CommitmentTypeQualifiers [Texto] Lista de indicadores textuales separados por el car\u00e1cter '|' que se aportan como calificadores adicionales del CommitmentTypeIndication n\u00famero n (atributo opcional). Normalmente son OID. Los elementos de la lista no pueden contener el car\u00e1cter '|' (ya que este se usa como separador). signingCertificateV2 true Se incluir\u00e1 el atributo SigningCertificateV2 en la firma. false (U otro valor) Se incluir\u00e1 el atributo SigningCertificate en la firma Sin especificar Se incluir\u00e1 SigningCertificate si la firma utiliza un algoritmo de firma SHA1 y SigningCertificateV2 para el resto de los algoritmos. includeSigningTimeAttribute true Se incluye en la firma la marca de tiempo con la hora del equipo. Valor por defecto. false No se incluye la marca de tiempo en la firma. Esta opci\u00f3n s\u00f3lo se deber\u00eda usar para generar una firma apta para componer una firma PAdES. includeContentHintAttribute true Se incluye el atributo content-hints en la firma con la informaci\u00f3n de los datos firmados. Este valor se ignorar\u00e1 cuando se configure expresamente un tipo de firma que no permite este atributo. Valor por defecto. false No se incluye el atributo content-hints en la firma. Esta opci\u00f3n s\u00f3lo se deber\u00eda usar para generar una firma apta para componer una firma PAdES. allowSignLTSignature true Se permite la cofirma/contrafirma de firmas de archivo longevo, a pesar de que estas no ser\u00e1n v\u00e1lidas posteriormente. false (U otro valor) No se permite la cofirma/contrafirma de firmas de archivo longevo. Sin especificar Se consultar\u00e1 al usuario en caso de intentar confirmarse/contrafirmarse una firma de archivo longevo. Contrafirma Nombre del par\u00e1metro Valores posibles Descripci\u00f3n policyIdentifier [OID o URN de tipo OID] Identificador de la pol\u00edtica de firma, necesario para generar firmas CAdES-EPES. policyIdentifierHash [Valor en Base64] Huella digital de la pol\u00edtica de firma. Es obligatorio indicar esta propiedad si de indic\u00f3 tambi\u00e9n policyIdentifier, al igual que es obligatorio tambi\u00e9n dar valor al par\u00e1metro policyIdentifierHashAlgorithm. policyIdentifierHashAlgorithm SHA1 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA1. SHA-256 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-256. SHA-384 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-284. SHA-512 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-512. policyQualifier [URL hacia documento] URL (universalmente accesible) hacia el documento (normalmente PDF) que contiene una descripci\u00f3n textual de la pol\u00edtica de firma. Esta propiedad es opcional incluso si se desea generar firmas CAdES-EPES. includeOnlySignningCertificate true Indica que debe incluirse en la firma \u00fanicamente el certificado del firmante. false Indica que debe incluirse en la firma toda la cadena de certificaci\u00f3n del certificado firmante. Valor por defecto. signerClaimedRoles [Texto] Agrega a la firma campos con los cargos atribuidos al firmante. Deben separarse los cargos con el car\u00e1cter \u201c|\u201d (y este no puede estar en el propio texto de ning\u00fan cargo). signatureProductionCity [Texto] Agrega a la firma un campo con la ciudad en la que se realiza la firma. La codificaci\u00f3n debe ser UTF-8. signatureProductionPostalCode [Texto] Agrega a la firma un campo con el c\u00f3digo postal en donde se realiza la firma. La codificaci\u00f3n debe ser UTF-8. signatureProductionCountry [Texto] Agrega a la firma un campo con el pa\u00eds en la que se realiza la firma. La codificaci\u00f3n debe ser UTF-8. commitmentTypeIndications [Entero] Indica el n\u00famero de CommitmentTypeIndications que se van a declarar. Estos son los motivos que se declaran para la firma. Los valores concretos se especifican con commitmentTypeIndication n Identifier y commitmentTypeIndication n Description, donde \u2018 n \u2019 va desde 0 hasta el valor menos 1 indicado en esta propiedad. commitmentTypeIndication n Identifier 1 Establece que el CommitmentTypeIndication n\u00famero n es \u201c Prueba de origen \u201d. 2 Establece que el CommitmentTypeIndication n\u00famero n es \u201c Prueba de recepci\u00f3n \u201d. 3 Establece que el CommitmentTypeIndication n\u00famero n es \u201c Prueba de entrega \u201d. 4 Establece que el CommitmentTypeIndication n\u00famero n es \u201c Prueba de env\u00edo \u201d. 5 Establece que el CommitmentTypeIndication n\u00famero n es \u201c Prueba de aprobaci\u00f3n \u201d. 6 Establece que el CommitmentTypeIndication n\u00famero n es \u201c Prueba de creaci\u00f3n \u201d. commitmentTypeIndication n CommitmentTypeQualifiers [OID] Lista de OID separados por el caracter '|' que se aportan como calificadores adicionales del CommitmentTypeIndication n\u00famero n (atributo opcional). allowSignLTSignature true Se permite la cofirma/contrafirma de firmas de archivo longevo, a pesar de que estas no ser\u00e1n v\u00e1lidas posteriormente. false (U otro valor) No se permite la cofirma/contrafirma de firmas de archivo longevo. Sin especificar Se consultar\u00e1 al usuario en caso de intentar confirmarse/contrafirmarse una firma de archivo longevo. Configuraci\u00f3n de firmas XAdES Las firmas XAdES generadas por defecto con el Cliente @firma son acordes a la versi\u00f3n 1.3.2 del formato de firma (ETSI TS 101 903 v1.3.2). Es posible configurar las operaciones de firma para que se generen conforme a la versi\u00f3n 1.4.1 del formato (ETSI TS 101 903 v1.4.1). Para ello, ser\u00e1 necesario configurar los par\u00e1metros adicionales xadesNamespace y signedPropertiesTypeUrl. El Cliente @firma permite generar firmas acordes a los siguientes perfiles: XAdES-BES Todas las firmas XAdES generadas por el Cliente @firma sin pol\u00edtica de firma son consideradas XAdES-BES. XAdES-EPES Todas las firmas XAdES generadas por el Cliente @firma con pol\u00edtica de firma son consideradas XAdES-EPES. Hay que tener en cuenta que algunas de las firmas XAdES generadas por el Cliente @firma tambi\u00e9n pueden considerarse de tipo B-Level. Sin embargo, El Cliente @firma versi\u00f3n 1.7 no incluye un modo de operaci\u00f3n que permita asegurar que las firmas generadas sean acordes a este perfil. Con independencia del perfil de firma, es posible realizar las firmas XAdES en cuatro modos diferentes: Enveloping (Por defecto) Enveloped Internally Detached (tambi\u00e9n referida en este documento como Detached ) Externally Detached Algunas de las propiedades de configuraci\u00f3n listadas en el apartado 8.2.7 Par\u00e1metros adicionales pueden afectar a la compatibilidad de las firmas generadas con algunas versiones del formato o perfiles de firma. Consulte el apartado espec\u00edfico de cada propiedad para saber si esta afecta o no a la compatibilidad. Algoritmos de firma Las firmas XAdES aceptan los siguientes algoritmos de firma (deben escribirse exactamente como aqu\u00ed se muestran): SHA512withRSA SHA384withRSA SHA256withRSA SHA1withRSA (No recomendado) No es recomendable usar el algoritmo SHA1withRSA por estar obsoleto y ser vulnerable. El algoritmo m\u00e1s seguro y, por lo tanto, el recomendado para su uso es SHA512withRSA. Si los certificados del usuario se encuentran en tarjeta inteligente, aseg\u00farese de disponer de la \u00faltima versi\u00f3n de su controlador para garantizar la compatibilidad con estos algoritmos de firma. En caso de que, a\u00fan as\u00ed, no pueda utilizar este algoritmo con su tarjeta inteligente, consulte la informaci\u00f3n de compatibilidad de su tarjeta y/o pruebe con otro algoritmo. Algoritmos de huella digital para las referencias XAdES hace c\u00e1lculos de huella digital ( hash ) para cada una de las referencias firmadas. El algoritmo por defecto para estas huellas es SHA-512. Este puede cambiarse mediante el par\u00e1metro adicional referencesDigestMethod. En el caso de las referencias de las firmas con manifest, el algoritmo de huella se toma del par\u00e1metro adicional precalculatedHashAlgorithm. En caso de que esta propiedad no se indique, se utilizar\u00eda el algoritmo del par\u00e1metro referencesDigestMethod o, de no estar configurado, el algoritmo SHA-512. Consulte el apartado 8.2.7 Par\u00e1metros adicionales para conocer los valores que pueden adoptar estos par\u00e1metros. Situaci\u00f3n del nodo de firma en XAdES Enveloped Cliente @firma sit\u00faa por defecto la firma electr\u00f3nica en las firmas XAdES Enveloped en un nodo \u201cSignature\u201d directamente como hijo de la ra\u00edz del XML. No obstante, hay situaciones en las que puede interesar situar este nodo de firma en otra posici\u00f3n del XML. Para ello, puede usarse el par\u00e1metro adicional insertEnvelopedSignatureOnNodeByXPath, en el que, mediante una expresi\u00f3n XPath v1, podemos indicar el nodo en el que queremos se inserte la firma (el nodo \u201cSignature\u201d pasar\u00e1 a ser el primer hijo de este). Si la expresi\u00f3n XPath resolviese varios nodos, se usar\u00e1 el primero de ellos. Por ejemplo, en el siguiente XML: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <bookstore> <book category= \"COOKING\" > <title lang= \"en\" >Everyday Italian</title> <author>Giada De Laurentiis</author> <year>2005</year> <price>30.00</price> </book> <book category= \"CHILDREN\" > <title lang= \"en\" >Harry Potter</title> <author>J K. Rowling</author> <year>2005</year> <price>29.99</price> </book> </bookstore> Si indicamos el par\u00e1metro con este valor: insertEnvelopedSignatureOnNodeByXPath = /bookstore/book[1]/title La firma se insertar\u00e1 como nodo hijo del t\u00edtulo del primer libro: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <bookstore> <book category= \"COOKING\" > <title lang= \"en\" > Everyday Italian <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"S1\"> \u2026 </ds:Signature> </title> <author>Giada De Laurentiis</author> <year>2005</year> <price>30.00</price> </book> <book category= \"CHILDREN\" > <title lang= \"en\" >Harry Potter</title> <author>J K. Rowling</author> <year>2005</year> <price>29.99</price> </book> </bookstore> Si en la expresi\u00f3n XPath desea referenciar nodos dentro de un espacio de nombres, debe usar funciones XPath como namespace-uri() o local-name(). Por ejemplo, para seleccionar el primer nodo dentro del espacio de nombres de factura electr\u00f3nica podr\u00edamos usar la expresi\u00f3n: //*[namespace-uri()='http://www.facturae.es/Facturae/2007/v3.1/Facturae'] Transformaciones sobre el contenido a firmar Es posible declarar transformaciones adicionales sobre el contenido a firmar. Esto se realizar\u00e1 mediante las siguientes propiedades: xmlTransform n Type Tipo de transformaci\u00f3n. xmlTransform n Subtype Subtipo de transformaci\u00f3n. xmlTransformnBody: Transformaci\u00f3n espec\u00edfica. Las combinaciones de valores que pueden adoptar estas propiedades son: Transformaci\u00f3n XPATH Tipo: http://www.w3.org/TR/1999/REC-xpath-19991116 Subtipos: No tiene subtipos. Cuerpo: Especificado mediante sentencias de tipo XPATH. Transformaci\u00f3n XPATH2 Tipo: http://www.w3.org/2002/06/xmldsig-filter2 Subtipos: subtract: Resta. intersect: Intersecci\u00f3n union: Uni\u00f3n Cuerpo: Especificado mediante sentencias de tipo XPATH2. Transformaci\u00f3n BASE64. La transformaci\u00f3n es inversa, es decir, los datos se decodifican desde Base64 antes de firmarse, por lo que estos deben estar previamente codificados en Base64 e indicarse mediante el par\u00e1metro adicional \u201cencodign=base64\u201c. Tipo: http://www.w3.org/2000/09/xmldsig#base64 Subtipos: No tiene subtipos. Cuerpo: No tiene cuerpo. No es posible especificar transformaciones complejas que incluyan varias sentencias. En su lugar, puede declararse una sucesi\u00f3n de transformaciones simples que produzcan el mismo resultado. Cada una de las transformaciones se aplicar\u00e1 de forma ordenada sobre el resultado de la anterior. El listado de transformaciones se inicia con aquella declarada con el \u00edndice 0. Por ejemplo, si se desean insertar 2 transformaciones adicionales, se deber\u00e1n establecer los par\u00e1metros: xmlTransforms=2 xmlTransform0Type=\u2026 xmlTransform0Subtype=\u2026 (Opcional) xmlTransform0Body=\u2026 xmlTransform1Type=\u2026 xmlTransform1Subtype=\u2026 (Opcional) xmlTransform1Body=\u2026 Uso de estructuras Manifest en firmas XAdES Es posible crear firmas XAdES en las que, siguiendo el punto 2.3 de la especificaci\u00f3n XMLDSig ( http://www.w3.org/TR/2000/WD-xmldsig-core-20000510/#sec-o-Manifest ), las referencias XML no se firmen directamente, sino que se firme una estructura de tipo Manifest que a su vez contenga las referencias a firmar. De esta forma, tal y como indica la normativa, la resoluci\u00f3n de las referencias incluidas dentro de una estructura Manifest no es responsabilidad del sistema validador, sino de la aplicaci\u00f3n que gener\u00f3 la firma o una delegada por la misma. Al unir esto con el uso de referencias a datos externos a la firma, obtenemos la ventaja de que la firma no contendr\u00e1 los datos firmados (muy recomendable para trabajar con datos grandes) y que la plataforma validadora no tiene que acceder a los datos para comprobar la validez de la propia firma. Consulte la especificaci\u00f3n XMLDSig para m\u00e1s informaci\u00f3n. De igual manera que el sistema validador no tiene que acceder a los datos referenciados desde el manifest , no ser\u00e1 responsabilidad del Cliente @firma acceder a estos datos para su an\u00e1lisis y el c\u00e1lculo de su huella digital. La propia aplicaci\u00f3n que ordena la firma ser\u00e1 la encargada de proporcionar al Cliente @firma las referencias a los datos y la huella digital de los mismos. Las referencias a los datos firmados en un Manifest se expresan mediante direcciones URI. Estas URI no tiene necesariamente que ser una URL, as\u00ed puede estructurarse de la manera necesaria para ayudar a determinar inequ\u00edvocamente cuales son los datos que se firman. Por ejemplo, podr\u00edamos construir una URI en forma de URN, en la que referenci\u00e1semos a un recurso concreto dentro de uno de nuestros gestores de contenido, para lo que podr\u00edamos crear una URN a medida que tuviese los datos necesarios para identificar el repositorio de datos y el recurso en cuesti\u00f3n: urn:rp:mirp:asset:CDC8D258 Un sistema de validaci\u00f3n externo no resolver\u00e1 la URI que referencia a los datos desde un Manifest , ya que puede que esta s\u00f3lo sea accesible y/o comprensible desde el entorno en el que se gener\u00f3 la firma. Por ende, la propia aplicaci\u00f3n que firma los datos mediante Manifest o una aplicaci\u00f3n delegada por la misma debe poder asegurar que los datos referenciados mediante la URI no cambiaran y ser capaz de comprobarlos calculando su huella digital ( hash ). Para aprovechar todas las ventajas de las firmas Manifest , todas las firmas Manifest generadas por el Cliente @firma ser\u00e1n externally detached , independientemente de la configuraci\u00f3n establecida. Un ejemplo muy simplificado de la estructura de una firma con Manifest ser\u00eda: <ds:Signature Id= \"Signature-02553\" > <ds:SignedInfo> <ds:Reference Id= \"Reference-894bfd39\" Type= http://www.w3.org/2000/09/xmldsig#Manifest URI= \"#Manifest-36e2de7b\" > \u2026 </ds:Reference> </ds:SignedInfo> \u2026 <ds:Object Id= \"ManifestObject-ffd54e53\" > <ds:Manifest Id= \"Manifest-36e2de7b\" > <ds:Reference Id= \"Reference-894bfd39\" URI= \"myscheme://path/file\" > <ds:DigestMethod Algorithm= \"http://www.w3.org/2001/04/xmlenc#sha512\" /> <ds:DigestValue>\u2026</ds:DigestValue> </ds:Reference> </ds:Manifest> </ds:Object> \u2026 </ds:Signature> En este ejemplo, el contenido firmado es \u201c myscheme://path/file \u201d, pero al firmar no se ha intentado acceder a ese fichero, y se ha asignado la huella digital proporcionada como la correspondiente a los datos. Generar firma manifest con el Cliente @firma Para crear firmas XAdES con estructuras manifest desde el Cliente @firma debe especificarse el par\u00e1metro adicional useManifest con el valor \u201ctrue\u201d. Adicionalmente, se deber\u00e1 indicar la URI y la huella digital ( hash ) de los datos firmados. El Cliente @firma permite firmar m\u00e1s de un dato simult\u00e1neamente mediante manifest as\u00ed que ser\u00e1 posible indicar m\u00e1s de una URI y huella digital al configurar una firma manifest . Como resultado, se obtendr\u00e1 una \u00fanica firma que engloba todas las referencias. Para que esta firma tuviese validez completa, todos los datos referenciarlos deber\u00edan mantenerse sin cambios a lo largo del tiempo. Para generar firmas manifest deber\u00e1n indicarse a trav\u00e9s de los par\u00e1metros adicionales de la aplicaci\u00f3n las propiedades que se listan a continuaci\u00f3n por cada referencia a firmar. Para ello, se sustituir\u00e1 la \u2018X\u2019 del nombre del par\u00e1metro por el n\u00famero de referencia en cuesti\u00f3n (empezando en 1): uriX Obligatorio. URI que referencia a los datos. mdX Obligatorio. Huella digital ( hash ) en Base64 de los datos. El algoritmo de huella digital se indicar\u00e1 mediante el par\u00e1metro \u201cprecalculatedHashAlgorithm\u201d. mimeTypeX Opcional. MimeType correspondiente a los datos referenciados. Si no se indica, se usar\u00e1 \u201capplication/octet-stream\u201d. contentTypeOidX Opcional. OID correspondiente al tipo de dato referenciado. Si no se indica, se intentar\u00e1 extrapolar a partir del MimeType. En caso de no conseguirlo, no se usar\u00e1 ninguno. encodingX Opcional. URI identificadora de la codificaci\u00f3n de los datos si estuviesen codificados. Por defecto, no se usa ninguna. precalculatedHashAlgorithm Algoritmo de huella digital que se ha utilizado para calcular la huella de los datos. Esta propiedad aplica a todas las referencias insertadas. Si no se indica, se hereda la configuraci\u00f3n del par\u00e1metro \u201creferencesDigestMethod\u201d. Si este otro par\u00e1metro tampoco se indicase se interpretar\u00e1 que las huellas digitales se han calculado con el algoritmo SHA-512. Al realizar firmas manifest no ser\u00e1 necesario indicar datos en el par\u00e1metro de datos del m\u00e9todo de firma del Cliente. El propio Cliente detectar\u00e1 que se va a realizar una firma manifest y no solicitar\u00e1 estos datos al usuario. Por ejemplo, podr\u00edamos hacer una firma manifest de unos datos usando los siguientes par\u00e1metros adicionales ( extraParams ): useManifest=true uri1=urn:id:3086 md1=4hrn/3Y9c/fn/uyq12w+D9A2aKc= mimeType1=plain/xml precalculatedHashAlgorithm=SHA-1 En la llamada al m\u00e9todo de firma, adem\u00e1s de estos extraParams , indicar\u00edamos null como el par\u00e1metro de datos a firmar: AutoScript.sign ( null , \"SHA512withRSA\", \"XAdES\", extraParams, successCallback, errorCallback); Como resultado, obtendremos una firma XAdES Detached con un manifest , en el que aparecer\u00e1 la referencia indicada a los datos y su huella digital. Tratamiento de las hojas de estilo XSL de los XML a firmar Cuando se firma o cofirma (no aplica a la contrafirma) un XML que contiene hojas de estilo, estas se firman igualmente a menos que se indique lo contrario con el par\u00e1metro ignoreStyleSheets. Las reglas que se siguen para procesar las hojas de estilo son las siguientes: Referencia / Formato XAdES Enveloped XAdES Enveloping XAdES Internally Detached XAdES Externally Detached Ruta relativa a la hoja de estilo No se firma No se firma No se firma No se firma Ruta absoluta a la hoja de estilo Se incluye la declaraci\u00f3n a la hoja de estilo y se firma una referencia canonizada a la hoja de estilo. Se firma una referencia canonizada a la hoja de estilo. Se firma una referencia canonizada a la hoja de estilo. No se firma Hoja de estilo empotrada Se incluye la declaraci\u00f3n a la hoja de estilo No es necesaria ninguna acci\u00f3n No es necesaria ninguna acci\u00f3n No se firma Par\u00e1metros adicionales A continuaci\u00f3n, se detallan los par\u00e1metros adicionales que aceptan cada una de las operaciones de firma. Es posible que el uso de par\u00e1metros no contemplados en las siguientes tablas provoque otros cambios de funcionamiento. No obstante, no se dar\u00e1 soporte al aplicativo si se usan par\u00e1metros no documentados, asumiendo el integrador todo el riesgo y responsabilidad derivados del uso de par\u00e1metros o valores distintos de los aqu\u00ed descritos. Firma y cofirma Nombre del par\u00e1metro Valores posibles Descripci\u00f3n insertEnvelopedSignatureOnNodeByXPath [Texto (expresi\u00f3n XPath v1)] Indica, mediante una expresi\u00f3n XPath (v1), el nodo bajo el cual debe insertarse el nodo de firma en el caso de una firma Enveloped . Si la expresi\u00f3n devuelve m\u00e1s de un nodo, se usa solo el primero. Si la expresi\u00f3n no devuelve nodos o est\u00e1 mal construida se lanzar\u00e1 una excepci\u00f3n. Esta propiedad solo tiene efecto en firmas Enveloped . useManifest true Usa un Manifest de XMLDSig con las referencias de firma en vez de firmar directamente estas referencias. Se ignora en la operaci\u00f3n de cofirma. Esto permite que sea opcional la comprobaci\u00f3n del destino y huellas digitales de las referencias. false Genera las firmas normalmente, sin Manifest (comportamiento por defecto) uri [URI] URI que referencia a los datos que se desean firmar en una firma Externally Detached . La huella de los datos se proporcionar\u00e1 en el propio par\u00e1metro de datos y el algoritmo de huella a trav\u00e9s de \u201cprecalculatedHashAlgorithm\u201d. uri n [URI] URI que referencia a los datos que se desean firmar dentro de una firma manifest . \u2018 n \u2019 indica el n\u00famero de referencia de entre las que se quieren firmar, empezando en \u20181\u2019. md n [Texto Base64] Huella digital de los datos asociados a la referencia \u2018 n \u2019 en una firma manifest . mimeType n [Texto en formato MIME-Type] MIME-Type de los datos asociados a la referencia \u2018 n \u2019 en una firma manifest . Si no se indica esta propiedad, se utilizar\u00e1 el tipo \u2018application/octet-stream\u2019. contentTypeOid n [OID o URN de tipo OID] Identificador del tipo de dato firmado para la referencia n\u00famero \u2018 n \u2019 en una firma manifest . Esta propiedad es complementaria (que no excluyente) al par\u00e1metro mimeTypeX. encoding n [URI] Codificaci\u00f3n de los datos asociados a la referencia n\u00famero \u2018 n \u2019 en una firma manifest. Un uso incorrecto de esta propiedad puede provocar la generaci\u00f3n de una firma inv\u00e1lida. precalculatedHashAlgorithm SHA1 Indica que las huellas digitales de los datos referenciados en el manifest se calcularon mediante el algoritmo SHA1. SHA-256 Indica que las huellas digitales de los datos referenciados en el manifest se calcularon mediante el algoritmo SHA-256. SHA-384 Indica que las huellas digitales de los datos referenciados en el manifest se calcularon mediante el algoritmo SHA-384. SHA-512 Indica que las huellas digitales de los datos referenciados en el manifest se calcularon mediante el algoritmo SHA-512. addKeyInfoKeyValue true Incluye el nodo KeyValue dentro de KeyInfo de XAdES (comportamiento por defecto). false No incluye el nodo KeyValue dentro de KeyInfo de XAdES. addKeyInfoKeyName true Incluye el nodo KeyName dentro de KeyInfo de XAdES. false No incluye el nodo KeyName dentro de KeyInfo de XAdES (comportamiento por defecto). avoidXpathExtraTransformsOnEnveloped true Evita la inclusi\u00f3n de la transformaci\u00f3n XPATH2 que normalmente se a\u00f1ade para posibilitar las cofirmas y que elimina todas las firmas del documento para dejar \u00fanicamente el contenido. ADVERTENCIA: La cofirma de un documento en el que al menos una de las firmas no incluye la transformaci\u00f3n XPATH, dar\u00e1 lugar a un documento de firma que potencialmente ser\u00e1 validado incorrectamente por los validadores de firma. Por este motivo, s\u00f3lo se permite el uso de esta propiedad en la operaci\u00f3n de firma (no en la de cofirma). false Incluye la transformaci\u00f3n XPATH2 posibilita las cofirmas eliminando todas las firmas del documento para dejar \u00fanicamente el contenido (comportamiento por defecto). format XAdES Enveloping Genera firmas en formato Enveloping . Este es el formato que se utiliza por defecto cuando no se indica ninguno. XAdES Enveloped Genera firmas en formato Enveloped . XAdES Detached Genera firmas en formato Internally Detached . XAdES Externally Detached Genera firmas en formato Externally Detached . includeOnlySignningCertificate true Indica que debe incluirse en la firma \u00fanicamente el certificado del firmante. false Indica que debe incluirse en la firma toda la cadena de certificaci\u00f3n del certificado firmante. Valor por defecto. policyIdentifier [URL] Identificador de la pol\u00edtica de firma (normalmente una URL hacia la pol\u00edtica en formato XML procesable), necesario para generar firmas XAdES-EPES. policyIdentifierHash [Valor en Base64] Huella digital de la pol\u00edtica de firma. Es obligatorio indicar esta propiedad si el valor indicado en policyIdentifier no es universalmente accesible. Si se da valor a esta propiedad es obligatorio tambi\u00e9n dar valor al par\u00e1metro policyIdentifierHashAlgorithm. policyIdentifierHashAlgorithm SHA1 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA1. SHA-256 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-256. SHA-384 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-384. SHA-512 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-512. policyQualifier [URL hacia documento] URL (universalmente accesible) hacia el documento (normalmente PDF) que contiene una descripci\u00f3n textual de la pol\u00edtica de firma. Esta propiedad es opcional incluso si se desea generar firmas XAdES-EPES. policyDescription [Texto] Descripci\u00f3n textual de la pol\u00edtica de firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. Esta propiedad es opcional incluso si se desea generar firmas XAdES-EPES. signerClaimedRoles [Texto] Agrega a la firma campos con los cargos atribuidos al firmante. Deben separarse los cargos con el car\u00e1cter \u201c|\u201d (y este no puede estar en el propio texto de ning\u00fan cargo). En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionCity [Texto] Agrega a la firma un campo con la ciudad en la que se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionProvince [Texto] Agrega a la firma un campo con la provincia en la que se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionPostalCode [Texto] Agrega a la firma un campo con el c\u00f3digo postal en donde se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionCountry [Texto] Agrega a la firma un campo con el pa\u00eds en el que se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. referencesDigestMethod http://www.w3.org/2000/09/xmldsig#sha1 Usa el algoritmo SHA1 para el c\u00e1lculo de las huellas digitales de las referencias XML firmadas. http://www.w3.org/2001/04/xmlenc#sha256 Usa el algoritmo SHA-256 para el c\u00e1lculo de las huellas digitales de las referencias XML firmadas. http://www.w3.org/2001/04/xmlenc#sha512 Usa el algoritmo SHA-512 para el c\u00e1lculo de las huellas digitales de las referencias XML firmadas. Este es el comportamiento por defecto. mimeType [Texto en formato MIME-Type] MIME-Type de los datos a firmar. Si no se indica esta propiedad el sistema intenta auto-detectar el tipo, estableciendo el m\u00e1s aproximado (que puede no ser el estrictamente correcto). encoding [URI] Codificaci\u00f3n de los datos a firmar (vease la documentaci\u00f3n del elemento Object de XMLDSig para m\u00e1s informaci\u00f3n). Un uso incorrecto de esta propiedad puede provocar la generaci\u00f3n de una firma inv\u00e1lida. Si se proporcionan datos a firmar previamente codificados en Base 64 pero se desea sean considerados como su forma descodificada, debe establecerse este valor a http://www.w3.org/2000/09/xmldsig#base64 y especificarse el tipo real en el par\u00e1metro mimeType. Por ejemplo, para firmar una imagen PNG haciendo que la firma se refiera a su forma binaria directa, puede proporcionarse la imagen directamente codificada en Base64 indicando el encoding como http://www.w3.org/2000/09/xmldsig#base64 y el mimeType como image/png. El valor debe ser siempre una URI. outputXmlEncoding [Texto] Codificaci\u00f3n del XML de salida. Si no se indica este valor se intenta auto-detectar a partir del XML de entrada (si los datos a firmar son un XML). contentTypeOid [OID o URN de tipo OID] Identificador del tipo de dato firmado. Esta propiedad es complementaria (que no excluyente) al par\u00e1metro mimeType. canonicalizationAlgorithm http://www.w3.org/TR/2001/REC-xml-c14n-20010315 Se firma el XML con canonizado XML 1.0 inclusivo (valor por defecto). http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments Se firma el XML con canonizado XML 1.0 inclusivo con comentarios. http://www.w3.org/2001/10/xml-exc-c14n# Se firma el XML con canonizado XML 1.0 exclusivo. http://www.w3.org/2001/10/xml-exc-c14n#WithComments Se firma el XML con canonizado XML 1.0 exclusivo con comentarios. xadesNamespace http://uri.etsi.org/01903/v1.3.2# Establece el espacio de nombres correspondiente a la versi\u00f3n 1.3.2 de XAdES. Este es el valor por defecto. http://uri.etsi.org/01903/v1.2.2# Establece el espacio de nombres correspondiente a la versi\u00f3n 1.2.2 de XAdES. Si se establece esta propiedad es posible que se necesite establecer tambi\u00e9n el par\u00e1metro signedPropertiesTypeUrl para evitar incoherencias en la versi\u00f3n de XAdES. El uso de estas propiedades no garantiza que la firma generada sea acorde a esta versi\u00f3n de XAdES. signedPropertiesTypeUrl http://uri.etsi.org/01903#SignedProperties Establece la URL de definici\u00f3n del tipo de las propiedades firmadas ( Signed Properties ) de XAdES. Este es el valor por defecto. http://uri.etsi.org/01903/1.3.2#SignedProperties Establece la URL de definici\u00f3n del tipo de las propiedades firmadas ( Signed Properties ) de XAdES v1.3.2. http://uri.etsi.org/01903/1.2.2#SignedProperties Establece la URL de definici\u00f3n del tipo de las propiedades firmadas ( Signed Properties ) de XAdES v1.2.2. Si se establece esta propiedad es posible que se necesite establecer tambi\u00e9n el par\u00e1metro xadesNamespace para evitar incoherencias en la versi\u00f3n de XAdES. El uso de estas propiedades no garantiza que la firma generada sea acorde a esta versi\u00f3n de XAdES. ignoreStyleSheets true Si se firma un XML con hojas de estilo, ignora \u00e9stas dej\u00e1ndolas sin firmar. false Si se firma un XML con hojas de estilo, firma tambi\u00e9n las hojas de estilo (valor por defecto, consultar notas adicionales sobre firma de hojas de estilo). avoidBase64Transforms true No declara transformaciones Base64 incluso si son necesarias. false Declara las transformaciones Base64 cuando se han codificado internamente los datos a firmar en Base64 (valor por defecto). headless true Evita que se muestren di\u00e1logos gr\u00e1ficos adicionales al usuario (como, por ejemplo, para la dereferenciaci\u00f3n de hojas de estilo enlazadas con rutas relativas). false Permite que se muestren di\u00e1logos gr\u00e1ficos adicionales al usuario. xmlTransforms [N\u00famero] N\u00famero de transformaciones a aplicar al contenido firmado. Debe indicarse posteriormente igual n\u00famero de par\u00e1metros xmlTransformnType, sustituyendo n por un ordinal consecutivo, comenzando en 0 (ver notas adicionales sobre indicaci\u00f3n de transformaciones adicionales). xmlTransform n Type http://www.w3.org/2000/09/xmldsig#base64 Indica que los datos que se proporcionan para firmar ya est\u00e1n codificados en Base64 y se debe declarar esta transformaci\u00f3n adicional para que se decodifiquen antes de firmarlos. Esta transformaci\u00f3n Base64 es adicional a la transformaci\u00f3n necesaria para pasar los datos a trav\u00e9s de los m\u00e9todos de firma del cliente. http://www.w3.org/TR/1999/REC-xpath-19991116 El contenido se debe procesar mediante esta transformaci\u00f3n XPATH antes de ser firmado. \u00danicamente es aplicable cuando se firma contenido XML. http://www.w3.org/2002/06/xmldsig-filter2 El contenido se debe procesar mediante esta transformaci\u00f3n XPATH2 antes de ser firmado. \u00danicamente es aplicable cuando se firma contenido XML. xmlTransform n Subtype [Texto] Subtipo de la transformaci\u00f3n n . Los valores aceptados y sus funcionalidades dependen del valor indicado en xmlTransformnType. xmlTransform n Body [Texto] Cuerpo de la transformaci\u00f3n n . Los valores aceptados y sus funcionalidades dependen de los valores indicados en xmlTransform n Type y en xmlTransform n Subtype. nodeToSign [Texto] Identificador del nodo (establecido mediante el atributo \u201cId\u201d) que se desea firmar dentro de un XML. commitmentTypeIndications [Entero] Indica el n\u00famero de CommitmentTypeIndications que se van a declarar. Estos son los motivos que se declaran para la firma. Los valores concretos se especifican con commitmentTypeIndication n Identifier y commitmentTypeIndication n Description, donde \u2018 n \u2019 va desde 0 hasta el valor menos 1 indicado en esta propiedad. commitmentTypeIndication n Identifier 1 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de origen \u201d. 2 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de recepci\u00f3n \u201d. 3 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de entrega \u201d. 4 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de env\u00edo \u201d. 5 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de aprobaci\u00f3n \u201d. 6 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de creaci\u00f3n \u201d. commitmentTypeIndication n Description [Texto] Establece la descripci\u00f3n del CommitmentTypeIndications n\u00famero n .. Este atributo es opcional. commitmentTypeIndication n DocumentationReferences [Texto] Lista de URL separadas por el car\u00e1cter '|' que se aportan como referencias documentales del CommitmentTypeIndication n\u00famero n (atributo opcional). Las URL de la lista no pueden contener el car\u00e1cter '|' (ya que este se usa como separador). commitmentTypeIndication n CommitmentTypeQualifiers [Texto] Lista de indicadores textuales separados por el car\u00e1cter '|' que se aportan como calificadores adicionales del CommitmentTypeIndication n\u00famero n (atributo opcional). Normalmente son OID. Los elementos de la lista no pueden contener el car\u00e1cter '|' (ya que este se usa como separador). allowSignLTSignature true Se permite la cofirma/contrafirma de firmas de archivo longevo, a pesar de que estas pueden no ser v\u00e1lidas posteriormente. false (o cualquier otro valor) No se permite la cofirma/contrafirma de firmas de archivo longevo. Sin indicar Se consultar\u00e1 al usuario en caso de intentar confirmarse/contrafirmarse una firma de archivo longevo. Contrafirma Nombre del par\u00e1metro Valores posibles Descripci\u00f3n addKeyInfoKeyValue true Incluye el nodo KeyValue dentro de KeyInfo de XAdES (comportamiento por defecto). false No incluye el nodo KeyValue dentro de KeyInfo de XAdES. addKeyInfoKeyName true Incluye el nodo KeyName dentro de KeyInfo de XAdES. false No incluye el nodo KeyName dentro de KeyInfo de XAdES (comportamiento por defecto). policyIdentifier [URL] Identificador de la pol\u00edtica de firma (normalmente una URL hacia la pol\u00edtica en formato XML procesable), necesario para generar firmas XAdES-EPES. policyIdentifierHash [Texto Base64] Huella digital de la pol\u00edtica de firma. Es obligatorio indicar esta propiedad si el valor indicado en policyIdentifier no es universalmente accesible. Si se da valor a esta propiedad es obligatorio tambi\u00e9n dar valor al par\u00e1metro policyIdentifierHashAlgorithm. policyIdentifierHashAlgorithm SHA1 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA1. SHA-256 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-256. SHA-384 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-384. SHA-512 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-512. policyQualifier [URL hacia documento] URL (universalmente accesible) hacia el documento (normalmente PDF) que contiene una descripci\u00f3n textual de la pol\u00edtica de firma. Esta propiedad es opcional incluso si se desea generar firmas XAdES-EPES. policyDescription [Texto] Descripci\u00f3n textual de la pol\u00edtica de firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. Esta propiedad es opcional incluso si se desea generar firmas XAdES-EPES. signerClaimedRoles [Texto] Agrega a la firma campos con los cargos atribuidos al firmante. Deben separarse los cargos con el car\u00e1cter \u201c|\u201d (y este no puede estar en el propio texto de ning\u00fan cargo). En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionCity [Texto] Agrega a la firma un campo con la ciudad en la que se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionProvince [Texto] Agrega a la firma un campo con la provincia en la que se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionPostalCode [Texto] Agrega a la firma un campo con el c\u00f3digo postal en donde se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionCountry [Texto] Agrega a la firma un campo con el pa\u00eds en el que se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML contrafirmado. encoding [Texto] Fuerza una codificaci\u00f3n para la firma resultante. Un uso incorrecto de esta propiedad puede provocar la generaci\u00f3n de una firma inv\u00e1lida. commitmentTypeIndications [Entero] Indica el n\u00famero de CommitmentTypeIndications que se van a declarar. Estos son los motivos que se declaran para la firma. Los valores concretos se especifican con commitmentTypeIndicationnIdentifier y commitmentTypeIndicationnDescription, donde \u2018n\u2019 va desde 0 hasta el valor menos 1 indicado en esta propiedad. commitmentTypeIndication n Identifier 1 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de origen \u201d. 2 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de recepci\u00f3n \u201d. 3 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de entrega \u201d. 4 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de env\u00edo \u201d. 5 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de aprobaci\u00f3n \u201d. 6 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de creaci\u00f3n \u201d. commitmentTypeIndication n Description [Texto] Establece la descripci\u00f3n del CommitmentTypeIndications n\u00famero n . Este atributo es opcional. commitmentTypeIndication n DocumentationReferences [Texto] Lista de URL separadas por el car\u00e1cter '|' que se aportan como referencias documentales del CommitmentTypeIndication n\u00famero n (atributo opcional). Las URL de la lista no pueden contener el car\u00e1cter '|' (ya que este se usa como separador). commitmentTypeIndication n CommitmentTypeQualifiers [Texto] Lista de indicadores textuales separados por el car\u00e1cter '|' que se aportan como calificadores adicionales del CommitmentTypeIndication n\u00famero n (atributo opcional). Normalmente son OID. Los elementos de la lista no pueden contener el car\u00e1cter '|' (ya que este se usa como separador). allowSignLTSignature true Se permite la cofirma/contrafirma de firmas de archivo longevo, a pesar de que estas no ser\u00e1n v\u00e1lidas posteriormente. false (o cualquier otro valor) No se permite la cofirma/contrafirma de firmas de archivo longevo. Sin indicar Se consultar\u00e1 al usuario en caso de intentar confirmarse/contrafirmarse una firma de archivo longevo. Configuraci\u00f3n de firmas PAdES El Cliente @firma permite generar firmas PAdES acordes a las partes 2 y 3 del est\u00e1ndar ETSI TS 102 778 V1.2.1. Los perfiles de firma soportados son los descritos en el mencionado est\u00e1ndar: PAdES-B\u00e1sico Las firmas PAdES en las que se declara el subfiltro \u201cadbe.pkcs7.detached\u201d. PAdES-BES Las firmas PAdES en las que se declara el subfiltro \u201cETSI.CAdES.detached\u201d son PAdES-BES. Estas son las firmas por defecto. PAdES-EPES Las firmas PAdES en las que se configura pol\u00edtica de firma son PAdES-EPES. Hay que tener en cuenta que algunas de las firmas PAdES generadas por el Cliente @firma tambi\u00e9n pueden considerarse de tipo B-Level. Sin embargo, no se incluye un modo de operaci\u00f3n que permita asegurar que las firmas generadas sean acordes a este perfil. Una salvedad en la realizaci\u00f3n de firmas PAdES con respecto al est\u00e1ndar, es que no se soporta la firma de ficheros adjuntos o empotrados en los documentos PDF. Algoritmos de firma Las firmas PAdES aceptan los siguientes algoritmos de firma: SHA512withRSA SHA384withRSA SHA256withRSA SHA1withRSA (No recomendado) El est\u00e1ndar PAdES recomienda no usar el algoritmo SHA1withRSA por no ser el m\u00e1s seguro. Si los certificados del usuario se encuentran en tarjeta inteligente, aseg\u00farese de disponer de la \u00faltima versi\u00f3n de su controlador para garantizar la compatibilidad con estos algoritmos de firma. En caso de que, a\u00fan as\u00ed, no pueda utilizar este algoritmo con su tarjeta inteligente, consulte la informaci\u00f3n de compatibilidad de su tarjeta y/o pruebe con otro algoritmo. Operaciones no soportadas y notas de inter\u00e9s Las firmas PAdES no admiten contrafirmas. Una cofirma PAdES consiste en la adici\u00f3n de una firma adicional al documento PDF, sin que se establezca ninguna relaci\u00f3n de interdependencia con las firmas existentes. Cofirmar un documento PDF es completamente equivalente a firmar un documento PDF ya firmado. Versiones antiguas de Adobe Acrobat/Reader no soportan m\u00faltiples firmas cuando hay firmas PAdES-BES. El formato PAdES s\u00f3lo puede utilizarse sobre documentos PDF. No se firman los posibles adjuntos o empotrados que pudiese contener el documento PDF. Creaci\u00f3n de una firma visible El Cliente @firma permite la creaci\u00f3n de firmas visibles dentro de un documento PDF, que lo son tanto en pantalla (por ejemplo, usando Adobe Reader) como en papel una vez impreso el documento. < Para ello debemos indicar mediante par\u00e1metros adicionales la p\u00e1gina o las p\u00e1ginas del documento en donde situar la visualizaci\u00f3n de la firma y las coordenadas con la posici\u00f3n en la que debe mostrarse. S\u00f3lo es posible establecer una posici\u00f3n para la firma visible, por lo que la posici\u00f3n ser\u00e1 la misma en todas las p\u00e1ginas en las que se muestre la firma. Las coordenadas de la visualizaci\u00f3n se indican partiendo de la esquina inferior izquierda, seg\u00fan el siguiente diagrama: < Las coordenadas del campo de firma y la p\u00e1gina en la que se desea insertar se establecen usando los par\u00e1metros adicionales, por ejemplo: signaturePositionOnPageLowerLeftX = 100 signaturePositionOnPageLowerLeftY = 100 signaturePositionOnPageUpperRightX = 200 signaturePositionOnPageUpperRightY = 200 signaturePages = 1,5,10--1 Los documentos PDF comienzan su numeraci\u00f3n de p\u00e1ginas desde uno (1). Si se indica un valor de p\u00e1gina negativo, se empezar\u00e1 a contar desde la \u00faltima p\u00e1gina del documento hacia atr\u00e1s. Por ejemplo, si se configura en el n\u00famero de p\u00e1gina el valor -1, la firma se insertar\u00e1 en la \u00faltima p\u00e1gina del documento. Si se configura el valor -2, se insertar\u00e1 en la pen\u00faltima p\u00e1gina. Una firma se puede mostrar en m\u00e1s de una p\u00e1gina de un documento. Para ello se permite indicar un listado de p\u00e1ginas y/o rangos de p\u00e1ginas en las que debe mostrarse. Tambi\u00e9n se puede indicar directamente que se muestre en todas las p\u00e1ginas del documento o en una nueva p\u00e1gina al final de este. La forma de indicar la p\u00e1gina o p\u00e1ginas donde firmar ser\u00e1 posible indicarla a trav\u00e9s del par\u00e1metro signaturePages. Tal y como se explica en el p\u00e1rrafo anterior, est\u00e9 par\u00e1metro se puede configurar para indicar la firma visible en una o varias p\u00e1ginas: all: Para indicar que la firma visible aparezca en todas las p\u00e1ginas del documento, se le deber\u00e1 de dar este valor al par\u00e1metro signaturePages. append: Si la firma visible debe de aparecer en una nueva p\u00e1gina en blanco a\u00f1adida al final del documento, se le deber\u00e1 de dar este valor al par\u00e1metro signaturePages. P\u00e1gina o listado de p\u00e1ginas: Si se desea indicar una p\u00e1gina o varias p\u00e1ginas donde estampar la firma visible, es posible indicando p\u00e1gina a p\u00e1gina con una separaci\u00f3n de comas (1,4,7: Se estampa en las p\u00e1ginas 1, 4 y 7) o indicando un rango de p\u00e1ginas a trav\u00e9s de un gui\u00f3n (1-8: Se estampa en las p\u00e1ginas desde la 1 hasta la 8). Tal y como se explica en el p\u00e1rrafo anterior, se permite indicar las p\u00e1ginas con un valor negativo, donde se comenzar\u00e1 desde el final (1,-1: Se estampar\u00e1 en la primera y \u00faltima p\u00e1gina). Tambi\u00e9n es posible combinar p\u00e1ginas individuales con rangos de p\u00e1ginas, como, por ejemplo: 3-6, 8, 10: Indica que se estampar\u00e1 en las p\u00e1ginas desde la 3 a la 6 y tambi\u00e9n en la 8 y 10. Dentro del recuadro marcado por las coordenadas indicadas, es posible mostrar distintos elementos: < Una imagen: En este caso debe indicarse qu\u00e9 imagen usar aportando el binario en formato JPEG codificado en Base64. La imagen de firma se configura a trav\u00e9s del par\u00e1metro adicional signatureRubricImage. La imagen se adapta al recuadro marcado por las coordenadas para ocupar el mayor espacio posible sin deformarse, por lo que se deber\u00eda configurarse un tama\u00f1o de firma adecuado para que la imagen se ajuste al mismo sin dejar espacio vac\u00edo. NOTA : No se soportan im\u00e1genes con transparencias. Incluso si la imagen no incluye transparencias, internamente se convertir\u00e1 a JPEG si no lo era, por lo que se recomienda que se proporcione directamente la image en JPEG para garantizar que la visualizaci\u00f3n ser\u00e1 la deseada. < Texto (que puede combinarse con una imagen) Es necesario indicar no solo el texto a sobreimprimir en el cuadro visible, sino tambi\u00e9n indicaciones sobre su formato (tipo de letra, tama\u00f1o, color, etc.). El texto introduce de forma autom\u00e1tica los retornos de carro necesarios para adaptarse al recuadro. El texto aparece siempre sobre la imagen indicada, si se indic\u00f3 alguna. El texto puede incluir una serie de patrones que ser\u00e1n sustituidos en el momento de la firma: $$SUBJECTCN$$ Nombre com\u00fan (CN, Common Name) dentro del X.500 Principal del titular del certificado de firma. Salvo que se indique lo contrario, los identificadores de usuario encontrados en esta propiedad se procesar\u00e1n para ocultar parte de sus caracteres. $$ISSUERCN$$ Nombre com\u00fan (CN, Common Name) dentro del X.500 Principal del emisor del certificado de firma. $$CERTSERIAL$$ N\u00famero de serie del certificado de firma. $$SIGNDATE= PATR\u00d3N $$ Fecha de la firma, donde PATR\u00d3N debe indicar el formato en el que debe mostrarse la fecha, siguiendo el esquema definido por Oracle para la clase SimpleDateFormat. As\u00ed, por ejemplo, el texto \" Firmado por $$SUBJECTCN$$ el d\u00eda $$SIGNDATE=dd/MM/yyyy$$. \" resultar\u00e1 finalmente en el PDF como \" Firmado por Tom\u00e1s Garc\u00eda-Mer\u00e1s el d\u00eda 04/01/2016. \" suponiendo que el CN del titular del certificado de firma es Tom\u00e1s Garc\u00eda-Mer\u00e1s y que la firma se realiza el 04/01/2016 . $$GIVENNAME$$ Nombre declarado del titular del certificado. Este valor podr\u00eda no aparecer en el certificado, en cuyo caso, el patr\u00f3n se sustituir\u00e1 por cadena vac\u00eda. $$SURNAME$$ Apellidos declarados del titular del certificado. Este valor podr\u00eda no aparecer en el certificado, en cuyo caso, el patr\u00f3n se sustituir\u00e1 por cadena vac\u00eda. $$ORGANIZATION$$ Organizaci\u00f3n declarada del titular en el certificado. Este valor podr\u00eda no aparecer en el certificado, en cuyo caso, el patr\u00f3n se sustituir\u00e1 por cadena vac\u00eda. $$REASON$$ Raz\u00f3n por la que se firma el PDF. Este valor podr\u00eda no aparecer en el certificado, en cuyo caso, el patr\u00f3n se sustituir\u00e1 por cadena vac\u00eda. $$LOCATION$$ Ciudad en la que se firma el PDF. Este valor podr\u00eda no aparecer en el certificado, en cuyo caso, el patr\u00f3n se sustituir\u00e1 por cadena vac\u00eda. $$CONTACT$$ Informaci\u00f3n de contacto del firmante del PDF. Este valor podr\u00eda no aparecer en el certificado, en cuyo caso, el patr\u00f3n se sustituir\u00e1 por cadena vac\u00eda. Las propiedades para configurar la visualizaci\u00f3n de un texto de la firma se listan a continuaci\u00f3n: layer2Text Texto que mostrar en la firma visible. layer2FontFamily Tipo de letra a usar en el texto de la firma visible. layer2FontSize Tama\u00f1o de letra a usar en el texto de la firma visible. layer2FontStyle Estilo del tipo de letra a usar en el texto de la firma visible. Cada estilo se identifica mediante un valor num\u00e9rico y es posible combinar estilos aplicando la operaci\u00f3n l\u00f3gica o sobre los valores num\u00e9ricos de cada uno de ellos. layer2FontColor Color del texto de la firma visible. obfuscateCertText Indica si deben ofuscarse o no los identificadores de usuario (como el DNI o NIE) localizados autom\u00e1ticamente en el texto visible del PDF. Por defecto, se ofuscar\u00e1n. signatureRotation N\u00famero de grados que rotar el texto y la imagen del campo de firma en sentido horario. includeQuestionMark Indica si debe permitirse al lector de PDF mostrar junto a la firma una marca que \u00edndique el resultado obtenido al validarla. La apariencia de esta marca depende completamente del lector de PDF utilizado y es este el que decide si se muestra. Por ejemplo, la marca podr\u00eda no mostrarse cuando se definiese una imagen de fondo en la firma. < Consulte el apartado 8.3.8 Par\u00e1metros adicionales para saber m\u00e1s sobre los valores que se pueden asignar a las propiedades anteriores. Configuraci\u00f3n de la firma visible por usuario Existe la posibilidad de que la configuraci\u00f3n de la firma visible sea realizada por el usuario, y no por la aplicaci\u00f3n integradora. De este modo, es el usuario quien decide el \u00e1rea donde mostrar la firma y su aspecto. La aplicaci\u00f3n podr\u00e1 configurar que sea el usuario el que seleccione el \u00e1rea del documento en el que desea insertar la firma visible PDF y si es obligatorio o no que seleccione un \u00e1rea. Tambi\u00e9n podr\u00e1 configurar si quiere que el usuario seleccione el aspecto de la firma (texto, imagen, fuente, rotaci\u00f3n, etc.) o que se use el aspecto por defecto. Para la configuraci\u00f3n de la visible por parte del usuario se podr\u00e1n utilizar los siguientes par\u00e1metros adicionales: visibleSignature Permite configurar si se desea que el usuario seleccione el \u00e1rea de una firma visible PDF y si es obligatorio o no el realizar una firma visible. visibleAppearance Permite configurar que sea el usuario el que seleccione el aspecto de una firma visible PDF. Esta propiedad s\u00f3lo tiene efecto cuando tambi\u00e9n se indica el par\u00e1metro visibleSignature y siempre que el usuario termine seleccionado el \u00e1rea de firma. Consulte el apartado 8.3.8 Par\u00e1metros adicionales para saber m\u00e1s sobre estos par\u00e1metros de configuraci\u00f3n. Esta funcionalidad \u00fanicamente est\u00e1 disponible en AutoFirma. Los clientes m\u00f3viles siempre usar\u00e1n la configuraci\u00f3n de firma visible proporcionada por la aplicaci\u00f3n y no dar\u00e1n la posibilidad de configurarla al usuario. Inserci\u00f3n de una imagen en un documento PDF antes de ser firmado El Cliente @firma permite, principalmente como ayuda para la inserci\u00f3n de C\u00f3digos Seguros de Verificaci\u00f3n (CSV), insertar una imagen en un documento PDF justo antes de firmarlo. Para agregar una imagen debemos configurar una p\u00e1gina y una zona dentro de esta para insertarla, usando para ello el mismo sistema de coordenadas descrito en el apartado 8.3.3 Creaci\u00f3n de una firma visible , es decir, a partir de la esquina inferior izquierda. La imagen debe proporcionarse en formato JPEG codificado en Base64. Para indicar la p\u00e1gina, podemos usar su n\u00famero (empezando a contar desde uno como primera p\u00e1gina), usar -1 para referirnos a la \u00faltima p\u00e1gina del documento o 0 (cero) para insertar la imagen en todas las p\u00e1ginas. Debe tenerse en cuenta que el agregar im\u00e1genes al PDF puede invalidar firmas previas que tuviese el documento. Aseg\u00farese de no utilizar esta funcionalidad cuando el documento ya contenga firmas. Es importante recalcar tambi\u00e9n que la imagen se deforma para adaptarse al recuadro marcado por las coordenadas, siendo \u00fatil para evitar este efecto que ambos tengan la misma relaci\u00f3n de aspecto. Igualmente, no se proporcionan funcionalidades de rotado, por lo que si se quiere insertar una imagen de lado (por ejemplo, en el margen de la p\u00e1gina, esta debe venir rotada en origen. Los par\u00e1metros adicionales para la inserci\u00f3n de im\u00e1genes son: image Imagen que se desea insertar en el PDF. imagePage P\u00e1gina donde desea insertarse la imagen. imagePositionOnPageLowerLeftX Coordenada horizontal inferior izquierda de la posici\u00f3n de la imagen. imagePositionOnPageLowerLeftY Coordenada vertical inferior izquierda de la posici\u00f3n de la imagen. imagePositionOnPageUpperRightX Coordenada horizontal superior derecha de la posici\u00f3n de la imagen. imagePositionOnPageUpperRightY Coordenada vertical superior derecha de la posici\u00f3n de la imagen. Consulte el apartado 8.3.8 Par\u00e1metros adicionales para obtener m\u00e1s informaci\u00f3n sobre los posibles valores que pueden adoptar estos par\u00e1metros. Firma de documentos PDF cifrados o protegidos con contrase\u00f1a Si bien es posible firmar documentos PDF cifrados o protegidos con contrase\u00f1a, deben tenerse en cuenta las siguientes limitaciones: No se pueden firmar como parte de un proceso de firma masiva documentos PDF cifrados. No se soporta la firma de PDF cifrados con certificados o con algoritmo AES256. Puede que no sea posible, en todos los casos, validar u obtener justificantes de validaci\u00f3n de documentos PDF cifrados o protegidos por contrase\u00f1a usando la plataforma de validaci\u00f3n VALIDE del Gobierno de Espa\u00f1a. https://valide.redsara.es/valide/ Documentos certificados Las firmas de un PDF pueden ser catalogadas como firmas de aprobaci\u00f3n (por defecto) o firmas certificadas. Una firma de aprobaci\u00f3n o de formulario se realiza sobre un campo de firma de formulario del documento (preexistente o creado autom\u00e1ticamente en el momento de la firma). Un documento puede contener tantas firmas de aprobaci\u00f3n como necesite. Esta es la opci\u00f3n com\u00fan de firma. Una firma certificada o de documento se aplica sobre un campo de firma identificado como de documento (preexistente o creado autom\u00e1ticamente en el momento de la firma). Un documento puede contener un \u00fanico campo de este tipo y por tanto una \u00fanica firma certificada. En caso de agregarse una firma certificada al documento, esta debe ser la primera que se agregue. Si hubiese alguna firma previa el resultado no ser\u00eda v\u00e1lido. Independientemente de sus nombres, ambos tipos de firma aplican al conjunto de datos de todo el documento, nunca s\u00f3lo a los datos de un formulario. S\u00f3lo cambia la designaci\u00f3n del campo en el que se almacenan. Una firma certificada restringe modificaciones posteriores sobre el documento. Las modificaciones permitidas vendr\u00e1n determinadas por el nivel de certificaci\u00f3n aplicado a la firma. El Cliente @firma permite configurar el nivel de certificaci\u00f3n de una firma por medio del par\u00e1metro certificationLevel. Los tipos de firma que puede crear son: Firma sin certificar. Esta ser\u00eda una firma de aprobaci\u00f3n. Este es el tipo de firma generada por defecto por el Cliente y se configura con el valor: 0 Firma certificada de autor. Tras este tipo de firma certificada, no se permite ning\u00fan cambio posterior en el documento (no se pueden agregar firmas, ni rellenar formularios). Se configura con el valor: 1 Firma certificada de autor para formularios. Tras este tipo de firma certificada, s\u00f3lo se permite el relleno de los campos de formulario (no se pueden agregar firmas). Se configura con el valor: 2 Firma certificada com\u00fan. Tras este tipo de firma certificada, se permite el relleno de los campos de formulario y la creaci\u00f3n de firmas de aprobaci\u00f3n. Se configura con el valor: 3 Comprobaci\u00f3n de PDF Shadow Attack Existe una vulnerabilidad en el formato PDF que hace posible que una revisi\u00f3n de un documento altere la presentaci\u00f3n de un elemento de una revisi\u00f3n anterior, incluso si est\u00e1 firmada. Esto quiere decir que se podr\u00eda modificar un PDF firmado de tal forma que parezca a simple vista que se firm\u00f3 algo distinto a lo que realmente se firm\u00f3. Alterar de esta forma el documento firmado es lo que se conoce como PDF Shadow Attack y, aunque el propio formato proporciona los medios para comprobar cu\u00e1l es el contenido que realmente se firm\u00f3, un firmante posterior deber\u00e1 tener cuidado de no firmar un documento alterado creyendo que alguien firm\u00f3 anteriormente ese mismo contenido. AutoFirma 1.8 y superiores incorpora la comprobaci\u00f3n de PDF Shadow Attack en su operativa de validaci\u00f3n de firmas. Primeramente, para que se validen las firmas que se van a multifirmar se debe habilitar la validaci\u00f3n de firmas previas mediante el par\u00e1metro adicional checkSignatures, tal como se describe en el apartado 7.5 Validaci\u00f3n de firmas previas . Para configurar la comprobaci\u00f3n de PDF Shadow Attack se proporciona la propiedad allowShadowAttack, de tal forma que al validar una firma PDF pueden ocurrir los siguientes casos seg\u00fan su valor: Si se establece a true, se omite la validaci\u00f3n del PDF Shadow Attack durante la validaci\u00f3n de las firmas previas. Si se establece a false (o cualquier otro valor) y si se sospecha que el PDF puede haber sido modificado, se bloquea la firma dando por hecho que el PDF ha sido modificado. Si no se establece ning\u00fan valor y se sospecha que el PDF puede haber sido modificado, se muestra al usuario un di\u00e1logo solicit\u00e1ndole que compruebe el PDF y confirme que desea firmarlo a pesar de la sospecha de que haya sido modificado. Ya que la comprobaci\u00f3n del PDF Shadow Attack es computacionalmente costosa y no garantiza que se haya una modificado maliciosamente el documento, s\u00f3lo se aplicar\u00e1 la comprobaci\u00f3n sobre n n\u00famero de p\u00e1ginas determinado. El n\u00famero de p\u00e1ginas por defecto es de 10, pero la aplicaci\u00f3n puede configurar este n\u00famero mediante la propiedad pagesToCheckShadowAttack, que puede adoptar los siguientes valores: Entero positivo: N\u00famero de p\u00e1ginas que se comprobar\u00e1n. Entero negativo o 0: No se comprobar\u00e1n modificaciones de tipo PDF Shadow Attack. all: Todas las p\u00e1ginas. En el caso de la firma trif\u00e1sica, la carga de la comprobaci\u00f3n del PDF recae en el propio servidor, as\u00ed que el servicio puede limitar a trav\u00e9s de su configuraci\u00f3n el n\u00famero de p\u00e1ginas m\u00e1ximo que se deber\u00e1n comprobar. Consulte el apartado 5.3.2.1 Configuraci\u00f3n del servicio trif\u00e1sico para saber m\u00e1s de la configuraci\u00f3n del servicio. La comprobaci\u00f3n del PDF Shadow Attack tambi\u00e9n detectar\u00eda sin diferenciarlo cualquier cambio en los valores de un formulario realizados despu\u00e9s de firmar. Si el integrador o el usuario aceptasen que se permiten cambios en los valores de los formularios despu\u00e9s de firmar, estar\u00e1 aceptando que el documento puede cambiar, por lo que se desactivar\u00e1 la comprobaci\u00f3n de PDF Shadow Attack . Par\u00e1metros adicionales A continuaci\u00f3n, se listan las propiedades adicionales que pueden configurarse en las firmas en formato PAdES con el Cliente @firma. Es posible que el uso de par\u00e1metros no contemplados en las siguientes tablas provoque otros cambios de funcionamiento. No obstante, no se dar\u00e1 soporte al aplicativo si se usan par\u00e1metros no documentados, asumiendo el integrador todo el riesgo y responsabilidad derivados del uso de par\u00e1metros o valores distintos de los aqu\u00ed descritos. Nombre del par\u00e1metro Valores posibles Descripci\u00f3n includeOnlySignningCertificate true Indica que debe incluirse en la firma \u00fanicamente el certificado del firmante. false Indica que debe incluirse en la firma toda la cadena de certificaci\u00f3n del certificado firmante. Valor por defecto. alwaysCreateRevision true Siempre crear\u00e1 una revisi\u00f3n al firmar. Requiere que el documento cumpla la especificaci\u00f3n PDF 1.7 (ISO 32000-1:2008) false No crear\u00e1 revisi\u00f3n en la primera firma y s\u00ed en las siguientes. image [Texto Base64] Imagen JPEG que insertar en el PDF. Esta opci\u00f3n s\u00f3lo se puede usar en la primera firma del documento. imagePage [Entero positivo] Insertar imagen en el n\u00famero de p\u00e1gina indicado. 0 Insertar en todas las p\u00e1ginas. -1 Insertar imagen en la \u00faltima p\u00e1gina. imagePositionOnPageLowerLeftX [Entero positivo] Coordenada horizontal desde la esquina inferior izquierda de la p\u00e1gina a la esquina inferior izquierda de la imagen. imagePositionOnPageLowerLeftY [Entero positivo] Coordenada vertical desde la esquina inferior izquierda de la p\u00e1gina a la esquina inferior izquierda de la imagen. imagePositionOnPageUpperRightX [Entero positivo] Coordenada horizontal desde la esquina inferior izquierda de la p\u00e1gina a la esquina superior derecha de la imagen. imagePositionOnPageUpperRightY [Entero positivo] Coordenada vertical desde la esquina inferior izquierda de la p\u00e1gina a la esquina superior derecha de la imagen. attach [Texto Base64] Contenido a a\u00f1adir como adjunto al PDF. Requiere establecer attachFileName. attachFileName [Texto] Nombre del que asignar al fichero adjunto. attachDescription [Texto] Descripci\u00f3n del documento adjunto. certificationLevel 0 Firma sin certificar. Esta ser\u00eda una firma de aprobaci\u00f3n. Es el valor por defecto. 1 Firma certificada de autor. Tras este tipo de firma certificada, no se permite ning\u00fan cambio posterior en el documento (no se pueden agregar firmas, ni rellenar formularios). 2 Firma certificada de autor para formularios. Tras este tipo de firma certificada, s\u00f3lo se permite el relleno de los campos de formulario (no se pueden agregar firmas). 3 Firma certificada com\u00fan. Tras este tipo de firma certificada, se permite el relleno de los campos de formulario y la creaci\u00f3n de firmas de aprobaci\u00f3n. compressPdf true Comprime el PDF firmado para que ocupe menos tama\u00f1o. S\u00f3lo se aplica si se trata de un PDF v4 o superior. Este es el valor por defecto. false Nunca se comprime el PDF firmado. pdfVersion 2 Se declara que la versi\u00f3n del PDF de salida es 1.2. 3 Se declara que la versi\u00f3n del PDF de salida es 1.3. 4 Se declara que la versi\u00f3n del PDF de salida es 1.4. 5 Se declara que la versi\u00f3n del PDF de salida es 1.5. 6 Se declara que la versi\u00f3n del PDF de salida es 1.6. 7 Se declara que la versi\u00f3n del PDF de salida es 1.7. signatureSubFilter [Texto] Subfiltro declarado. Por defecto se utiliza el de las firmas BES (\u201cETSI.CAdES.detached\u201d). Puede usarse la cadena \u201cadbe.pkcs7.detached\u201d para crear firmas basicas. signatureField [Texto] Nombre del campo de firma preexistente en el que insertar la firma. signaturePages [Cadena] P\u00e1gina o rango de p\u00e1ginas donde estampar la firma visible. Para m\u00e1s detalles consultar el apartado \u201c 8.3.3 Creaci\u00f3n de una firma visible \u201d. signaturePositionOnPageLowerLeftX [Entero positivo] Coordenada horizontal desde la esquina inferior izquierda de la p\u00e1gina a la esquina inferior izquierda del campo de firma visible. signaturePositionOnPageLowerLeftY [Entero positivo] Coordenada vertical desde la esquina inferior izquierda de la p\u00e1gina a la esquina inferior izquierda del campo de firma visible. signaturePositionOnPageUpperRightX [Entero positivo] Coordenada horizontal desde la esquina inferior izquierda de la p\u00e1gina a la esquina superior derecha del campo de firma visible. signaturePositionOnPageUpperRightY [Entero positivo] Coordenada vertical desde la esquina inferior izquierda de la p\u00e1gina a la esquina superior derecha del campo de firma visible. signatureRubricImage [Texto Base64] Imagen JPEG que mostrar en el campo de firma visible. layer2Text [Texto] Texto que mostrar en el campo de firma visible. layer2FontFamily 0 El texto de la firma visible se mostrar\u00e1 con fuente Courier. Este es el valor por defecto. 1 El texto de la firma visible se mostrar\u00e1 con fuente Helv\u00e9tica. 2 El texto de la firma visible se mostrar\u00e1 con fuente Times Roman. 3 El texto de la firma visible se mostrar\u00e1 con fuente Symbol. layer2FontSize [Entero positivo] Tama\u00f1o de fuente del texto de la firma visible. layer2FontStyle 0 Texto de la firma visible sin estilo. Valor por defecto. 1 Texto de la firma visible en negrita. 2 Texto de la firma visible en cursiva. 4 Texto de la firma visible subrayado. 8 Texto de la firma visible tachado. layer2FontColor black El texto de la firma visible ser\u00e1 de color negro. Este es el valor por defecto. white El texto de la firma visible ser\u00e1 de color blanco. gray El texto de la firma visible ser\u00e1 de color gris. lightGray El texto de la firma visible ser\u00e1 de color gris claro. darkGray El texto de la firma visible ser\u00e1 de color gris oscuro. red El texto de la firma visible ser\u00e1 de color rojo. pink El texto de la firma visible ser\u00e1 de color rosa. obfuscateCertText true Se ofuscan los identificadores de usuario extraidos del CN o DN del certificado y mostrados en la firma visible PDF. No se ofuscan los datos de los certificados de seud\u00f3nimo. Este es el valor por defecto. false No se ofusca la informaci\u00f3n de los certificados. obfuscationMask [Texto] Criterios de ofuscaci\u00f3n de los identificadores de usuario en las firmas visibles PDF. Debe mostrar el siguiente patr\u00f3n: caracter;longitudDigitos;posiciones;desplazamiento En este patr\u00f3n: caracter: Es el car\u00e1cter que usar para ofuscar caracteres. longitudDigitos: N\u00famero m\u00ednimo de d\u00edgitos que debe tener una cadena de texto para que se considere que debe ofuscarse. posiciones: Listado de posiciones que indica qu\u00e9 caracteres deben mostrarse. El listado se expresa con una sucesi\u00f3n de true/false separados por comas (','), en donde true indica que el car\u00e1cter debe mostrarse y false que no. desplazamiento: Indica si se admite el desplazamiento de posiciones de la m\u00e1scara para mostrar todos los caracteres indicados (true) o si esta debe respetarse (false). visibleSignature default Se realizar\u00e1 firma visible PDF si se han proporcionado los par\u00e1metros con el \u00e1rea y la p\u00e1gina de firma. Este es el valor por defecto. want El usuario debe seleccionar el \u00e1rea de firma visible. En caso de cancelar el proceso: Si la petici\u00f3n tambi\u00e9n incluye los par\u00e1metros de \u00e1rea de firma visible (posici\u00f3n y p\u00e1gina), se usar\u00e1n dichos par\u00e1metros y se continuar\u00e1 con el proceso de firma. Si la petici\u00f3n no incluye los par\u00e1metros de \u00e1rea de firma visible, se cancelar\u00e1 el proceso de firma. optional El usuario podr\u00e1 elegir si desea incluir o no el \u00e1rea de firma visible. En caso de cancelar el proceso: Si la petici\u00f3n tambi\u00e9n incluye los par\u00e1metros de \u00e1rea de firma visible (posici\u00f3n y p\u00e1gina), se usar\u00e1n dichos par\u00e1metros y se continuar\u00e1 con el proceso de firma. Si la petici\u00f3n no incluye los par\u00e1metros de \u00e1rea de firma visible, se realizar\u00e1 una firma no visible. visibleAppearance default Se aplicar\u00e1 el aspecto por defecto para la firma visible PDF o, si se proporcionaron los par\u00e1metros de aspecto, el aspecto configurado. Este es el valor por defecto. custom El usuario puede elegir el aspecto de la firma visible. En caso de cancelar el proceso, se usar\u00e1 el aspecto por defecto. signatureRotation 0 No rota el campo de firma. Este es el valor por defecto. 90 Rota 90 grados en sentido horario el campo de firma. 180 Rota 180 grados en sentido horario el campo de firma. 270 Rota 270 grados en sentido horario el campo de firma. includeQuestionMark true Permitirse al lector de PDF mostrar junto a la firma visible una marca que \u00edndique el resultado obtenido al validarla. La apariencia de esta marca depende completamente del lector de PDF utilizado y es este el que decide si se muestra. Por ejemplo, la marca podr\u00eda no mostrarse cuando se definiese una imagen de fondo en la firma. false No permite mostrar la marca con el resultado de la validaci\u00f3n. Este es el valor por defecto. signReason [Texto] Raz\u00f3n por la que se realiza la firma. signatureProductionCity [Texto] Ciudad en la que se realiza la firma. signerContact [Texto] Informaci\u00f3n de contacto del firmante. signerClaimedRoles [Texto] Listado de roles declarados por el firmante (separados por \u201c|\u201d) policyIdentifier [URL] Identificador de la pol\u00edtica de firma (normalmente una URL hacia la pol\u00edtica en formato XML procesable), necesario para generar firmas XAdES-EPES. policyIdentifierHash [Texto Base64] Huella digital de la pol\u00edtica de firma. Es obligatorio indicar esta propiedad si el valor indicado en policyIdentifier no es universalmente accesible. Si se da valor a esta propiedad es obligatorio tambi\u00e9n dar valor al par\u00e1metro policyIdentifierHashAlgorithm. policyIdentifierHashAlgorithm SHA1 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA1. SHA-256 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-256. SHA-384 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-384. SHA-512 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-512. policyQualifier [URL hacia documento] URL hacia el documento que contiene una descripci\u00f3n textual de la pol\u00edtica de firma. ownerPassword [Texto] Contrase\u00f1a de apertura del PDF. No se soporta la firma de documentos PDF cifrados con certificados o algoritmo AES-256. headless true No interrumpe el proceso de firma solicitando interacci\u00f3n del usuario. false Muestra di\u00e1logos al usuario si requiere de su autorizaci\u00f3n o alg\u00fan dato adicional para firmar. Este es el valor por defecto. allowSigningCertifiedPdfs true Permite la firma de documentos PDF certificados. El resultado podr\u00eda invalidar firmas anteriores del PDF. false Produce un error al firmar documentos PDF certificados. Se omite En caso de detectar que el documento PDF de entrada est\u00e1 certificado, se aplicar\u00e1 uno de los siguientes comportamientos: Si la firma es monof\u00e1sica (formato \u201cPAdES\u201d), se advertir\u00e1 al usuario de que la firma podr\u00eda invalidar firmas anteriores y se le permitir\u00e1 elegir si firmar o cancelar la operaci\u00f3n. Si la firma es trif\u00e1sica (formato \u201cPAdEStri\u201d), fallar\u00e1 la operaci\u00f3n de firma. Tenga en cuenta que, en los clientes m\u00f3viles, las firmas podr\u00edan ser trif\u00e1sicas independientemente del nombre de formato indicado. allowCosigningUnregisteredSignatures true Permite firmar documentos PDF con firmas previas no registradas. false No permite firmar documentos PDF con firmas previas no registradas. signingCertificateV2 true Se utiliza el atributo signingCertificateV2 en las firmas. false Se utiliza el atributo signingCertificateV1 en las firmas. Se omite Se utiliza el atributo signingCertificateV1 en las firmas SHA1withRSA y signingCertificateV2 en el resto. signReservedSize [Entero positivo] Tama\u00f1o m\u00e1ximo en bytes de la firma que se incorporar\u00e1 al PDF. Por defecto, 27000. allowShadowAttack true No se realizar\u00e1 la comprobaci\u00f3n de PDF Shadow Attack durante la validaci\u00f3n de las firmas previas (checkSignatures=true). false Se realizar\u00e1 la comprobaci\u00f3n de PDF Shadow Attack durante la validaci\u00f3n de las firmas previas (checkSignatures=true) y, en caso de detectarse, se dar\u00e1 la firma por inv\u00e1lida. Este valor bloquear\u00e1 tambi\u00e9n la operaci\u00f3n si se detecta cualquier modificaci\u00f3n de un campo de formulario posterior a la \u00faltima firma. Se omite Se realizar\u00e1 la comprobaci\u00f3n de PDF Shadow Attack durante la validaci\u00f3n de las firmas previas (checkSignatures=true) y, en caso de detectarse, se consultar\u00e1 al usuario si se debe continuar con la operaci\u00f3n. allowModifiedForm true No se realizar\u00e1 la comprobaci\u00f3n de cambios en los formularios durante la validaci\u00f3n de las firmas previas (checkSignatures=true). Este valor desactiva tambi\u00e9n la validaci\u00f3n de PDF Shadow Attack , ya que se estar\u00e1n permitiendo cambios en el documento posteriores a la firma. false Se realizar\u00e1 la comprobaci\u00f3n de cambios en los formularios del documento durante la validaci\u00f3n de las firmas previas (checkSignatures=true) y, en caso de detectarse, se dar\u00e1 la firma por inv\u00e1lida. Se omite Se realizar\u00e1 la comprobaci\u00f3n de cambios en los formularios del documento durante la validaci\u00f3n de las firmas previas (checkSignatures=true) y, en caso de detectarse, se consultar\u00e1 al usuario si se debe continuar con la operaci\u00f3n. Si el usuario acepta la operaci\u00f3n, estar\u00e1 aceptando cambios en documento posteriores a la firma, por lo que no se realizar\u00e1 la comprobaci\u00f3n de PDF Shadow Attack . Configuraci\u00f3n de firmas de factura electr\u00f3nica El formato de factura electr\u00f3nica configura todas las propiedades imprescindibles para generar una firma v\u00e1lida de factura, como la pol\u00edtica de firma o las referencias a los nodos, por lo que no deber\u00e1n establecerse manualmente. Este formato s\u00f3lo puede utilizarse sobre facturas electr\u00f3nicas y \u00e9stas s\u00f3lo admiten la operaci\u00f3n de firma. No permiten cofirmarlas ni contrafirmarlas. La pol\u00edtica de firma utilizada por defecto para firmar es la 3.1, aunque puede configurarse para el uso de la pol\u00edtica 3.0 mediante los par\u00e1metros adicionales \u201cpolicyIdentifier\u201d y \u201cpolicyIdentifierHash\u201d. Operaciones no soportadas y notas de inter\u00e9s Las facturas electr\u00f3nicas se firman con el formato XAdES Enveloped, pero con unas particularidades concretas que no es posible replicar configurando directamente el formato XAdES en el Cliente @firma. Es necesario utilizar el formato FacturaE para la firma de facturas. El formato FacturaE s\u00f3lo puede utilizarse sobre facturas electr\u00f3nicas acordes al est\u00e1ndar. Las facturas electr\u00f3nicas no soportan las operaciones de cofirma ni contrafirma. Si se intenta hacer una operaci\u00f3n de cofirma o contrafirma sobre una factura electr\u00f3nicas se notificar\u00e1 que no es posible porque \u00e9sta ya cuenta con una firma. Algoritmos de firma Las firmas de FacturaE aceptan los siguientes algoritmos de firma (deben escribirse exactamente como aqu\u00ed se muestran): SHA512withRSA SHA384withRSA SHA256withRSA SHA1withRSA (No recomendado) El algoritmo m\u00e1s seguro, y por lo tanto el recomendado para su uso es SHA512withRSA. Par\u00e1metros adicionales Aqu\u00ed se listan los par\u00e1metros adicionales que acepta el formato FacturaE para la configuraci\u00f3n de la operaci\u00f3n y de la firma electr\u00f3nica generada. Es posible que el uso de par\u00e1metros no contemplados en las siguientes tablas provoque otros cambios de funcionamiento. No obstante, no se dar\u00e1 soporte al aplicativo si se usan par\u00e1metros no documentados, asumiendo el integrador todo el riesgo y responsabilidad derivados del uso de par\u00e1metros o valores distintos de los aqu\u00ed descritos. Nombre del par\u00e1metro Valores posibles Descripci\u00f3n signatureProductionCity [Texto] Agrega a la firma un campo con la ciudad en la que se realiza la firma. signatureProductionProvince [Texto] Agrega a la firma un campo con la provincia en la que se realiza la firma. signatureProductionPostalCode [Texto] Agrega a la firma un campo con el c\u00f3digo postal en donde se realiza la firma. signatureProductionCountry [Texto] Agrega a la firma un campo con el pa\u00eds en el que se realiza la firma. xadesNamespace [URL] URL de definici\u00f3n del espacio de nombres de XAdES (el uso de esta propiedad puede condicionar la declaraci\u00f3n de versi\u00f3n de XAdES). Si se establece esta propiedad es posible que se necesite establecer tambi\u00e9n el par\u00e1metro signedPropertiesTypeUrl para evitar incoherencias en la versi\u00f3n de XAdES. signedPropertiesTypeUrl [URL] URL de definici\u00f3n del tipo de las propiedades firmadas ( Signed Properties ) de XAdES. Si se establece esta propiedad es posible que se necesite establecer tambi\u00e9n el par\u00e1metro xadesNamespace para evitar incoherencias en la versi\u00f3n de XAdES. Si no se establece se usa el valor por defecto: http://uri.etsi.org/01903#SignedProperties. signerClaimedRoles emisor Declara que el firmante es el emisor de la factura. Este es el valor por defecto. receptor Declara que el firmante es el receptor de la factura. tercero Declara que el firmante es un tercero con respecto a la factura. supplier Declara que el firmante es el emisor de la factura. Este es el valor por defecto. customer Declara que el firmante es el receptor de la factura. third party Declara que el firmante es un tercero con respecto a la factura. policyIdentifier http://www.facturae.es/politica_de_firma_formato_facturae/politica_de_firma_formato_facturae_v3_1.pdf Identificador de la pol\u00edtica de firma 3.1. Este es el valor por defecto. http://www.facturae.es/politica de firma formato facturae/politica de firma formato facturae v3_0.pdf Identificador de la pol\u00edtica de firma 3.0. policyIdentifierHash Ohixl6upD6av8N7pEvDABhEL6hM= Huella digital para configurar la pol\u00edtica de firma 3.1. Este es el valor por defecto. xmfh8D/Ec/hHeE1IB4zPd61zHIY= Huella digital para configurar la pol\u00edtica de firma 3.0. policyIdentifierHashAlgorithm SHA1 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA1. Compatibilidad con dispositivos m\u00f3viles y AutoFirma Una aplicaci\u00f3n web puede utilizar el JavaScript de despliegue para llamar al Cliente @firma y que este realice las operaciones de firma que se soliciten. Para que estas operaciones puedan ejecutarse, es necesario que se haya instalado previamente en el equipo la aplicaci\u00f3n del Cliente correspondiente a ese entorno. La aplicaci\u00f3n de firma puede ser: AutoFirma. En equipos de sobremesa (Windows, Linux o macOS). Cliente de firma Android. En disposivos Android. Cliente de firma iOS. En dispositivos iOS (iPhone y iPad). No todas estas aplicaciones funcionan de igual modo y las aplicaciones m\u00f3viles no soportan todas las operaciones del Cliente. Por este motivo, un desarrollador que desee que su despliegue funcione en entornos m\u00f3viles deber\u00e1 tener en cuenta una serie de restricciones a la hora de intregar las funciones en la aplicaci\u00f3n. Requisitos de despliegue Para que nuestro despliegue del Cliente @firma sea compatible con los clientes m\u00f3viles, deben desplegarse tambi\u00e9n los servicios auxiliares de comunicaci\u00f3n y de firma trif\u00e1sica. Para ello se desplegarse los archivos: afirma-signature-storage.war afirma-signature-retriever.war afirma-server-triphase-signer.war La descripci\u00f3n de estos servicios puede encontrarse en el apartado 5.3 Servicios . Adem\u00e1s de su despliegue y configuraci\u00f3n, es necesario indicar al Cliente donde se encuentran los servicios desplegados: Para establecer la ubicaci\u00f3n de los servicios de comunicaci\u00f3n se utilizar\u00e1 el m\u00e9todo setServlets. La descripci\u00f3n del uso de este m\u00e9todo se realiza en el apartado 6.1.2 Configuraci\u00f3n de los servicios auxiliares de comunicaci\u00f3n . Para establecer la ubicaci\u00f3n del servicio de firma trif\u00e1sica se utilizar\u00e1 el par\u00e1metro adicional serverUrl, descrito en el apartado ANEXO II Firma trif\u00e1sica . Limitaciones Debe tenerse en cuenta que las versiones actuales de los distintos clientes m\u00f3viles no implementan toda la funcionalidad del Cliente @firma, y que los clientes m\u00f3viles de Android e iOS cuentan con distinta funcionalidad entre s\u00ed. Las limitaciones existentes, ya sea porque a\u00fan no se han desarrollado o por la imposibilidad de hacerlo para ese sistema concreto, son las siguientes: Limitaciones de formato Los clientes m\u00f3viles de Android y iOS son capaces de realizar firmas en todos los formatos avanzados soportados por AutoFirma: CAdES. XAdES. PAdES. FacturaE. Sin embargo, salvo en casos concretos, las firmas en los dispositivos m\u00f3viles siempre se realizar\u00e1n a trav\u00e9s del servicio de firma trif\u00e1sica, por lo cual la firma en dispositivo m\u00f3vil siempre requerir\u00e1: El despliegue de este servicio tal como se describe en el apartado 5.3.2 Servicios de firma trif\u00e1sica y firma de lotes . Configurar en los par\u00e1metros adicionales de las operaciones de firma la URL del servicio anterior a trav\u00e9s de la propiedad \u201cserverUrl\u201d. Los Clientes de firma m\u00f3vil realizar\u00e1n siempre la operaci\u00f3n de firma trif\u00e1sica, independientemente de que se configure el nombre de formato com\u00fan (XAdES, PAdES\u2026) o el trif\u00e1sico (XAdEStri, PAdEStri). Las \u00fanicas excepciones son los formatos de firma CAdES y PAdES con el Cliente de firma Android, que s\u00ed realizar\u00e1 la firma sin depender del servidor trif\u00e1sico cuando se use el nombre monof\u00e1sico de los formatos. Limitaciones funcionales Los clientes de firma m\u00f3vil no permiten la configuraci\u00f3n del almac\u00e9n de claves que deben utilizar ni su comportamiento: El cliente de firma Android siempre usar\u00e1 el almac\u00e9n del sistema o un DNIe por NFC (si se encuentra habilitada esta opci\u00f3n en la aplicaci\u00f3n). El Cliente de firma iOS siempre usar\u00e1 el almac\u00e9n de la propia aplicaci\u00f3n. Este comportamiento hace que ambas aplicaciones ignoren las llamadas a los siguientes m\u00e9todos de configuraci\u00f3n: setKeyStore(keystore) setStickySignatory(sticky) Tambi\u00e9n se ignorar\u00e1n las propiedades para la configuraci\u00f3n de filtros de certificados ( filters ) y la selecci\u00f3n autom\u00e1tica de certificados cuando s\u00f3lo haya uno en el almac\u00e9n ( headless ). Por otra parte, las aplicaciones m\u00f3viles no implementan las operaciones auxiliares para la carga de ficheros y la aplicaci\u00f3n iOS tampoco soporta la funci\u00f3n de guardado: getFileNameContentBase64(title, extension, description, filePath, successCallback, errorCallback) getMultiFileNameContentBase64(title, extension, description, filePath, successCallback, errorCallback) function saveDataToFile(dataB64, title, fileName, extension, description, successCallback, errorCallback) En el apartado 6.8 Operaciones de gesti\u00f3n de ficheros , se plantean casos de uso alternativos para evitar el uso de estos m\u00e9todos. Las aplicaciones m\u00f3viles tampoco son compatibles con la opci\u00f3n de llamar al m\u00e9todo de firma sin proporcionarle los datos a firmar para que sea la propia aplicaci\u00f3n la que se los solicite al usuario. Los datos deben proporcion\u00e1rselos siempre la aplicaci\u00f3n. Por \u00faltimo, las aplicaciones m\u00f3viles no son compatibles con el m\u00e9todo de recuperaci\u00f3n del log de la aplicaci\u00f3n: getCurrentLog (successCallback, errorCallback) Limitaciones de entono Las aplicaciones m\u00f3viles s\u00f3lo permiten las conexiones sin cifrado SSL a los dominios indicados de antemano. Sin embargo, el cliente m\u00f3vil puede conectarse con cualquier dominio, as\u00ed que no establece estas excepciones. Para que nuestro despliegue sea compatible con el cliente m\u00f3vil, deber\u00e1 accederse a nuestra web siempre a trav\u00e9s de HTTPS. Recomendaciones de despliegue M\u00e1s all\u00e1 de lo anteriormente expuesto, existen una serie de limitaciones en los entornos m\u00f3viles que hacen que un despliegue que funcione correctamente en un equipo con AutoFirma pueda presentar problemas con un dispositivo y el cliente de firma m\u00f3vil. Buena parte de estas limitaciones viene por la necesidad de utilizar la comunicaci\u00f3n por servidor intermedio, el que se detengan los JavaScripts cuando el navegador est\u00e1 en segundo plano y varias restricciones de seguridad impuestas por algunos navegadores, como Google Chrome (no permite varias llamadas a una aplicaci\u00f3n externa sin interacci\u00f3n del usuario entre ellas y no permite que se haga esa llamada pasados unos segundos desde la interacci\u00f3n del usuario). Por este motivo, se recogen aqu\u00ed una serie de recomendaciones para garantizar el correcto funcionamiento de las aplicaciones: Forzar siempre el uso de firma trif\u00e1sica: Esto se consigue utilizando los nombres de formato de firma trif\u00e1sica (CAdEStri, PAdEStri, etc.) e indicando la URL del servidor trif\u00e1sico a trav\u00e9s de la propiedad \u201cserverUrl\u201d. De esta forma se garantiza que las firmas generadas por todas las aplicaciones sean siempre iguales, ya que la firma se ejecuta en servidor (que ser\u00e1 el mismo para todas las aplicaciones), mientras que en la firma monof\u00e1sica la ejecuta cada aplicaci\u00f3n y podr\u00eda haber diferencias en las implementaciones de los formatos de firma entre distintas versiones de las aplicaciones cliente. Configurar un gestor de documentos apropiado y utilizar referencias a los datos: Cuando se proporciona en la llamada de firma los datos a firmar y estos no pueden ser transferidos directamente a la aplicaci\u00f3n de firma, se subern al servidor intermedio y la aplicaci\u00f3n de firma los descarga de este. Sin embargo, en los dispositivos m\u00f3viles la subida de los datos puede quedar detenida en el momento de llamar a la aplicaci\u00f3n de firmam cuando el navegador web queda en segundo plano. Por otro lado, si se suben los datos antes de la llamada a la aplicaci\u00f3n, es probable que a partir de cierto tama\u00f1o la subida requiera cantidad de tiempo suficiente como para que la llamada a la aplicaci\u00f3n de firma se retrase, lo que har\u00e1 que las medidas de seguridad de algunos navegadores, como Google Chrome, bloqueen la apertura de la aplicaci\u00f3n. Para evitar estos problemas, en lugar de proporcionar al cliente los datos a firmar, se deber\u00eda proporcionar \u00fanicamente la referencia a los datos y configurar a trav\u00e9s de la propiedad \u201cdocument.manager\u201d del servicio de firma trif\u00e1sica un gestor de documentos capaz de obtener los datos a partir de estas referencias. Idealmente, se deber\u00eda programar un gestor de documentos optimizado para su aplicaci\u00f3n, pero se podr\u00eda utilizar alguno de los ya disponibles, como el es.gob.afirma.triphase.server.document.FileSystemDocumentManager, que carga los datos de un fichero en un directorio configurado en servidor y almacena la firma en un directorio distinto. El uso de es.gob.afirma.triphase.server.document.SelfishDocumentManager no ser\u00eda v\u00e1lido ya que este no obtiene los datos a partir de una referencia, sino que requiere que se le env\u00eden los datos completos. Si nuestra aplicaci\u00f3n requiere que sea el usuario el que proporcione los datos, se podr\u00eda organizar el tr\u00e1mite de firma para que primeramente se suban esos datos al servidor a trav\u00e9s de un formulario web y, una vez cargados, se le presente al usuario el bot\u00f3n para iniciar el proceso de firma, en donde se indicar\u00e1 la referencia a esos datos ya cargados. Evitar m\u00faltiples peticiones de firma: En dispositivos m\u00f3viles cada nueva operaci\u00f3n de firma implica una nueva llamada al cliente de firma. Sin embargo, algunos navegadores, como Google Chrome en dispositivos m\u00f3viles, bloquean el que se puedan hacer llamadas consecutivas a una aplicaci\u00f3n externa. Esto significa que, si tratamos de encadenar varias operaciones de firma consecutivas, por ejemplo, agregando la llamada a la operaci\u00f3n de firma en la funci\u00f3n callback que se ejecuta al finalizar una operaci\u00f3n anterior, s\u00f3lo se ejecutar\u00e1 la primera operaci\u00f3n. Para evitar este problema, si necesita ejecutar m\u00faltiples operaciones de firma, utilice la funcionalidad de firma de lotes. Notificaciones al usuario Es obligatorio que el usuario tenga instalado el Cliente de firma Android o iOS, seg\u00fan corresponda, antes de realizar una operaci\u00f3n de firma desde su dispositivo m\u00f3vil. Se recomienda por ello que se advierta al usuario antes de alcanzar la operaci\u00f3n de la firma de la necesidad de instalar esta aplicaci\u00f3n. El javascript de despliegue del Cliente facilita a las aplicaciones la labor de detectar el entorno del usuario mediante las siguientes funciones: function isAndroid() Detecta si el usuario accede a la p\u00e1gina web desde un dispositivo Android. function isIOS() Detecta si el usuario accede a la p\u00e1gina web desde un iPod, iPhone o iPad. Al detectar que el usuario accede a la aplicaci\u00f3n desde Android o iOS, la aplicaci\u00f3n puede, por ejemplo, mostrarle al usuario el enlace para la instalaci\u00f3n de la aplicaci\u00f3n desde la tienda de aplicaciones correspondiente Un ejemplo del uso de estas funciones ser\u00eda: // Si es Android, mostramos el mensaje de advertencia para Android if (AutoScript.isAndroid()) { document.getElementById(\u201candroidWarning\u201d).style.display = \"block\"; } // Si es iOS, mostramos el mensaje de advertencia para iOS else if (AutoScript.isIOS()) { document.getElementById(\u201ciOSWarning\u201d).style.display = \"block\"; } El integrador ser\u00eda el responsable de preparar esos mensajes de advertencia. Tambi\u00e9n se puede agregar a la p\u00e1gina web los enlaces para la descarga de las aplicaciones: Enlace a Google Play: <a href=\"https://play.google.com/store/apps/details?id=es.gob.afirma\"><img alt=\"Get it on Google Play\" src=\"https://play.google.com/intl/en_us/badges/images/generic/es-play-badge-border.png\" style=\"width: 140px;\"/></a> Enlace a la App Store: <a href=\"https://itunes.apple.com/us/app/cliente-firma-movil/id627410001?mt=8&uo=4\" target=\"itunes_store\" style=\"display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/assets/shared/badges/es-es/appstore-lrg.svg) no-repeat;width:135px;height:40px;background-size:contain;\"></a> Problemas conocidos Se han detectado una serie de situaciones problem\u00e1ticas asociadas al uso del Cliente @firma y sus servicios. Un usuario o aplicaci\u00f3n puede verse afectado por estas situaciones si obtiene los siguientes errores al utilizar el Cliente @firma: No se puede acceder al almac\u00e9n de claves de Firefox 49.0 y superiores No se puede acceder al almac\u00e9n de claves de Firefox 58 No se detecta la inserci\u00f3n/extracci\u00f3n del DNIe en el lector (u otra tarjeta inteligente) Falla la operaci\u00f3n de firma con DNIe o una tarjeta de la FNMT No se permite la firma de PDF con ciertos certificados El servicio de firma trif\u00e1sica genera un error al realizar firmas XAdES en servidores JBoss Las firmas con DNIe requieren que se introduzca el PIN del DNIe por cada operaci\u00f3n de firma Error al cargar el listado de certificados despu\u00e9s del cambio en caliente del almac\u00e9n por defecto AutoFirma no puede comunicarse con el navegador en macOS S\u00f3lo se realiza la firma del primer documento de una serie cuando se realizan las firmas desde Google Chrome No se abre la aplicaci\u00f3n de firma al realizar la firma desde Google Chrome No se abre la aplicaci\u00f3n de firma con Edge Legacy (EdgeHTML) No se abre la aplicaci\u00f3n de firma con Firefox cuando el servidor declara una pol\u00edtica de seguridad (CSP) A continuaci\u00f3n, se describen los problemas asociados a estos casos de error. No se puede acceder al almac\u00e9n de claves de Firefox 49.0 y superiores Para el acceso al almac\u00e9n de claves y certificados de Firefox 49 y superiores en Windows necesita se que se tenga instalado el entorno de ejecuci\u00f3n redistribuible de Microsoft Visual C++ 2015. Si no consigue acceder a sus certificados y claves privadas desde AutoFirma, necesitar\u00e1 descargar este software e instalarlo manualmente. El entorno de ejecuci\u00f3n redistribuible de Microsoft Visual C++ 2015 puede descargarse desde: https://www.microsoft.com/en-us/download/details.aspx?id=53840 Una vez en el enlace, seleccione el idioma y la arquitectura adecuada para su sistema operativo. El proceso de instalaci\u00f3n puede requerir permisos de administrador. No se puede acceder al almac\u00e9n de claves de Firefox 58 El navegador web Firefox basa su almac\u00e9n de claves y certificados en NSS y, concretamente, en Firefox 58 se hace uso de NSS 3.34. Se han encontrado problemas de compatibilidad entre esta versi\u00f3n de NSS y Java que impiden que AutoFirma pueda acceder al almac\u00e9n de certificados internos del navegador. Este problema est\u00e1 relacionado con la forma en la que Firefox 58 genera los almacenes de claves. Un usuario que desee utilizar Firefox 58 puede, como soluci\u00f3n parcial, instalarse una versi\u00f3n previa de Firefox, por ejemplo, Firefox 56, instalar sus certificados en el almac\u00e9n y, a continuaci\u00f3n, actualizar el navegador. Por defecto, el propio navegador se actualizar\u00e1 al reiniciarlo, as\u00ed que los certificados deben instalarse en el momento de abrirlo la primera vez. Pueden descargarse versiones anteriores de Firefox desde: https://ftp.mozilla.org/pub/firefox/releases/ No se detecta la inserci\u00f3n/extracci\u00f3n del DNIe en el lector (u otra tarjeta inteligente) A veces puede ocurrir que el navegador no detecta la extracci\u00f3n o introducci\u00f3n del DNIe (u otra tarjeta inteligente) en el lector, por lo que, si no hemos introducido la tarjeta previamente a que se arranque el cliente de firma, no se encontrar\u00e1 el certificado. Otro posible caso es que una vez cargado el cliente, se extraiga la tarjeta y, al realizar una operaci\u00f3n de firma, el navegador muestre los certificados de la tarjeta (aunque ya no est\u00e9 presente) fallando al intentar utilizarlo. Puede forzar a la recarga del almac\u00e9n mediante el bot\u00f3n de actualizar del di\u00e1logo de selecci\u00f3n de certificados (< ). Si el cliente sigue sin detectar la tarjeta, pruebe a insertar la tarjeta antes de iniciar la operaci\u00f3n de firma. Falla la operaci\u00f3n de firma con DNIe o una tarjeta de la FNMT Se conoce de cierta incompatibilidad de AutoFirma con los controladores de DNIe y las tarjetas de la FNMT. Esta incompatibilidad puede llevar a que no se pueda firmar con estas tarjetas o que s\u00f3lo se pueda realizar una firma y falle el proceso cuando se intente hacer alguna m\u00e1s. Para solventar este problema, AutoFirma incorpora la biblioteca JMulticard, un controlador Java para DNIe y algunas tarjetas de la FNMT. Si se produce alg\u00fan error al generar firmas con DNIe o tarjetas de la FNMT, abra AutoFirma, acceda al panel de \u201cPreferencias\u201d, pesta\u00f1a \u201cGeneral\u201d y verifique que en el panel \u201cOpciones generales\u201d se encuentra activada la opci\u00f3n \u201cHabilitar JMulticard para el uso de tarjetas de la FNMT y DNIe (requiere reiniciar AutoFirma)\u201d. Si sigue sin funcionar la operaci\u00f3n de firma, es posible que AutoFirma no sea compatible con su tarjeta inteligente. En ese caso, aseg\u00farese de que dispone de la \u00faltima versi\u00f3n de los controladores de la tarjeta. No se permite la firma de PDF con ciertos certificados Las firmas de documentos PDF realizadas externamente (que es el m\u00e9todo utilizado por el Cliente @firma) tienen un tama\u00f1o m\u00e1ximo de octetos que pueden ocupar dentro del PDF. Como la firma incluye la cadena de certificaci\u00f3n completa, si esta es muy extensa puede llegar a agotarse este espacio y resultar en una firma inv\u00e1lida o corrupta. El servicio de firma trif\u00e1sica genera un error al realizar firmas XAdES en servidores JBoss A partir de determinada versi\u00f3n del servidor de aplicaciones JBoss (7 / EAP 6), este incorpora de serie diversas bibliotecas Java que entran en conflicto con la versi\u00f3n de estas mismas bibliotecas incorporadas en el JRE/JDK de Oracle. A saber, las bibliotecas Xalan y Xerces de Apache. Esto deriva en que durante el proceso de firma se produce un error de casting o similar, seg\u00fan sea la operaci\u00f3n y versi\u00f3n de JBoss. El error se produce a que la JVM da preferencia a las bibliotecas proporcionadas por el servidor de aplicaciones frente a las suyas propias. Frente a esto, se propone una sucesi\u00f3n de posibles soluciones de tal forma que si la primera de ellas no es viable se intente la siguiente soluci\u00f3n y as\u00ed sucesivamente: Soluci\u00f3n 1: Revisar la documentaci\u00f3n del servidor de aplicaciones en cuesti\u00f3n para comprobar si existe un mecanismo documentado para dar preferencias a las bibliotecas de Java frente a las bibliotecas importadas por el propio servidor de aplicaciones. Soluci\u00f3n 2: Otra opci\u00f3n, no tan eficiente como la anterior, aunque puede que m\u00e1s sencilla, viene a ser identificar el fichero \u201crt.jar\u201d de la JVM de nuestro servidor e introducirlo en el directorio de bibliotecas del WAR del servicio de firma trif\u00e1sico (directorio WEB-INF/lib). Al igual que en el caso anterior, as\u00ed conseguiremos que la JVM d\u00e9 prioridad a la versi\u00f3n de Xalan/Xerces que incorpora este JAR, los por defecto de Java, en lugar de a las bibliotecas del servidor de aplicaciones. Soluci\u00f3n 3: Si todo lo anterior fracasase, pero supi\u00e9semos que ninguna otra aplicaci\u00f3n hace uso de estas bibliotecas del servidor de aplicaciones, podr\u00edamos sustituirlas por la versi\u00f3n 1.4.6 de Xerces y sus dependencias. De esta forma, se podr\u00eda ejecutar la operaci\u00f3n de firma, aunque varias funcionalidades de JBoss relacionadas con los despliegues seguros conforme a la arquitectura definida por RedHat podr\u00edan verse afectados. Las firmas con DNIe requieren que se introduzca el PIN del DNIe por cada operaci\u00f3n de firma El DNIe y los controladores que le dan soporte est\u00e1n desarrollados conforme a diversas normativas de seguridad, entre ellas, la norma europea EN14890. Esta norma define la necesidad de que el PIN del DNIe se presente ante cada una de las operaciones de firma. AutoFirma incorpora la biblioteca JMulticard, un controlador Java que le permite utilizar el DNIe sin necesidad de que se encuentre instalado el controlador oficial. As\u00ed mismo, permite activar o desactivar este controlador que, por defecto, se encuentra activado. Cuando se se utiliza JMulticard, el di\u00e1logo de inserci\u00f3n de PIN permitir\u00e1 seleccionar la opci\u00f3n de recordar la contrase\u00f1a, pero esta s\u00f3lo se recordar\u00e1 mientras AutoFirma se encuentre cargado y no se vuelva a pedir la selecci\u00f3n de certificado. Si desea que la contrase\u00f1a se recuerde durante varias operaciones, utilice el m\u00e9todo setStickySignatory() del JavaScript de despliegue para dejar preseleccionado el certificado despu\u00e9s de seleccionarlo. Cuando no se utilice JMulticard, la necesidad de volver a requerir el PIN de la tarjeta recaer\u00e1 sobre el propio controlador de DNIe, que podr\u00e1 o no recordarlo entre operaciones. Tenga en cuenta que la contrafirma de un documento con m\u00faltiples firmas puede implicar firmar varias veces, aunque s\u00f3lo se genere una \u00fanica firma electr\u00f3nica. As\u00ed pues, este tipo de firmas pueden requerir que el usuario inserte varias veces el PIN de su DNIe. Pueden consultar m\u00e1s informaci\u00f3n acerca del DNIe en el siguiente enlace: http://www.dnielectronico.es/PortalDNIe/ Error al cargar el listado de certificados despu\u00e9s del cambio en caliente del almac\u00e9n por defecto Se ha detectado que despu\u00e9s de haber cargado el almac\u00e9n del sistema en Windows (realizando una operaci\u00f3n de firma, por ejemplo) puede producirse un error al cargar el almac\u00e9n de Mozilla Firefox despu\u00e9s de usar el m\u00e9todo setKeyStore para cambiar entre ellos. Este error se debe a que al realizar el cambio en caliente no se han cargado correctamente las dependencias necesarias del almac\u00e9n de Mozilla. Este problema no tiene soluci\u00f3n actualmente. AutoFirma no puede comunicarse con el navegador en macOS En algunos casos la instalaci\u00f3n de AutoFirma en macOS finaliza sin errores, pero no se instala el perfil de seguridad que permiten que AutoFirma se comunique de forma segura con el navegador web. En estos casos, al realizar una operaci\u00f3n de firma se arrancar\u00e1 correctamente AutoFirma pero este no ser\u00e1 capaz de transmitir el resultado de la firma al navegador web. Esto puede generar un error del navegador con el texto \u201cNo se ha podido conectar con AutoFirma.\u201d. Para solventar este problema ser\u00e1 necesario configurar manualmente la confianza en los certificados de AutoFirma. Para ello: Acceda a la aplicaci\u00f3n \u201cAcceso a llavero\u201d. Acceda al llavero \u201cSISTEMA\u201d y a la opci\u00f3n \u201cCertificados\u201d. En el listado de certificados mostrados deben aparecer los certificados \u201c127.0.0.1\u201d y \u201cAutoFirma ROOT\u201d. Si el icono que aparece junto a estos muestra el signo \u2018+\u2019, se conf\u00eda en los certificados y la comunicaci\u00f3n con AutoFirma deber\u00eda funcionar correctamente. Si no, continue con el proceso. Haga clic sobre el certificado \u201c127.0.0.1\u201d y pulse en la opci\u00f3n \u201cConfiar\u201d. En el di\u00e1logo que debe haber aparecido, despliegue el listado \u201cAl utilizar este certificado\u201d y seleccione la opci\u00f3n \u201cConfiar siempre\u201d. Repita los pasos 4 y 5 para el certificado \u201cAutoFirma ROOT\u201d. Compruebe que en ambos certificados aparece ahora el s\u00edmbolo \u2018+\u2019 junto a su icono. Cierre la ventana de los llaveros. Introduzca la contrase\u00f1a de su usuario en el di\u00e1logo para confirmar el cambio en la configuraci\u00f3n de seguridad. S\u00f3lo se realiza la firma del primer documento de una serie cuando se realizan las firmas desde Google Chrome El navegador Google Chrome dispone de un mecanismo de seguridad en base al cual no permite realizar m\u00e1s de una llamada a una URL externa ante una \u00fanica interacci\u00f3n del usuario, como la pulsaci\u00f3n de un bot\u00f3n, por ejemplo. Esta limitaci\u00f3n aplica a la llamada al Cliente @firma, tanto a AutoFirma en entornos de escritorio como a Cliente de firma m\u00f3vil en entornos Android, por lo que s\u00f3lo se podr\u00e1 abrir la aplicaci\u00f3n una s\u00f3la vez ante una \u00fanica operaci\u00f3n del usuario. La realizaci\u00f3n de firmas en serie con el cliente se debe realizar siempre invocando una operaci\u00f3n de firma una vez ha terminado la anterior (com\u00fanmente desde las funciones callback que notifican el final de una firma). En el caso por defecto de AutoFirma esta limitaci\u00f3n no afecta al usuario, ya que s\u00f3lo se invoca la aplicaci\u00f3n la primera vez y se le solicitan firmar los distintos documentos a trav\u00e9s de un socket. Sin embargo, la limitaci\u00f3n impuesta por Google Chrome s\u00ed afecta a AutoFirma cuando se fuerza que la comunicaci\u00f3n entre AutoFirma y el navegador se realice mediante servidor intermedio (mediante el uso de la sentencia \u201cAutoScript.setForceWSMode(true)\u201d) y afectar\u00e1 siempre al uso del Cliente de Firma Android. En estos casos, la aplicaci\u00f3n se abrir\u00e1 para procesar la primera firma de la serie, pero se ignorar\u00e1n las llamadas para procesar los siguientes documentos. Cuando se deba realizar la firma de m\u00faltiples documentos simult\u00e1neamente, se recomienda aplicar alguna de las siguientes directrices: Utilizar el modelo de firma de lotes de documentos. Nunca forzar la comunicaci\u00f3n por servidor intermedio. Recomendar a los usuarios de Android el uso de un navegador distinto a Google Chrome. Esta limitaci\u00f3n est\u00e1 relacionada con la descrita en el problema 10.11 No se abre la aplicaci\u00f3n de firma al realizar la firma desde Google Chrome . No se abre la aplicaci\u00f3n de firma al realizar la firma desde Google Chrome El navegador Google Chrome dispone de un mecanismo de seguridad en base al cual no permite realizar una llamada a una URL externa pasados unos pocos segundos entre la interacci\u00f3n del usuario con la p\u00e1gina, como la pulsaci\u00f3n de un bot\u00f3n, y la propia llamada. Esta limitaci\u00f3n aplica a la llamada al Cliente @firma, tanto a AutoFirma en entornos de escritorio como a Cliente de firma m\u00f3vil en entornos Android, por lo que la aplicaci\u00f3n no se abrir\u00e1 si transcurre demasiado tiempo entre la solicitud de firma del usuario y la llamada a la aplicaci\u00f3n. Esto no debe afectar al uso de AutoFirma desde Chrome ya que, por defecto, la llamada a la aplicaci\u00f3n se realiza de forma inmediata y los datos se transmiten a trav\u00e9s de un socket. Sin embargo, la limitaci\u00f3n impuesta por Google Chrome s\u00ed puede afectar AutoFirma cuando se fuerza que la comunicaci\u00f3n entre AutoFirma y navegador se realice mediante servidor intermedio (mediante el uso de la sentencia \u201cAutoScript.setForceWSMode(true)\u201d) y en cualquier caso al uso del Cliente de Firma Android. En estos casos, si los datos no pueden enviarse a trav\u00e9s de la URL de invocaci\u00f3n a la aplicaci\u00f3n, deber\u00e1n subirse primeramente al servidor intermedio para que despu\u00e9s la aplicaci\u00f3n de firma los descague. Cuando esta subida de los datos dure m\u00e1s de unos pocos segundos, la aplicaci\u00f3n de firma no se abrir\u00e1. Por regla general, para evitar los problemas derivados de esta restricci\u00f3n de navegador Chrome, se deber\u00edan seguir las siguientes sugerencias: Utilizar el modelo de firma trif\u00e1sica con un DocumentManager a medida (no con el por defecto), para que los datos a transmitir entre el navegador y la aplicaci\u00f3n sean siempre peque\u00f1os. Nunca forzar la comunicaci\u00f3n por servidor intermedio. Recomendar a los usuarios de Android el uso de un navegador distinto a Google Chrome. Esta limitaci\u00f3n est\u00e1 relacionada con la descrita en el apartado 10.10 S\u00f3lo se realiza la firma del primer documento de una serie cuando se realizan las firmas desde Google Chrome . No se abre la aplicaci\u00f3n de firma con Edge Legacy (EdgeHTML) Existen determinada configuraci\u00f3n de Microsoft Edge Legacy que impide el uso de sockets, lo que lleva a que la aplicaci\u00f3n no se pueda comunicar con el JavaScript de despliegue y este termine dando un error pasado un tiempo de espera. Este error se puede identificar cuando al inciar la operaci\u00f3n se muestra la imagen de inicio de AutoFirma ( splash) pero nunca se llega a mostrar la aplicaci\u00f3n. Adem\u00e1s, en la consola de Edge aparece recurrentemente un error con el mensaje: SCRIPT12029: SCRIPT12029: WebSocket Error: Network Error 12029, No se pudo establecer una conexi\u00f3n con el servidor Este problema se debe a que el navegador est\u00e1 aplicando ciertas restricciones a la aplicaci\u00f3n considerando que se trata de un servidor externo. Esto se produce cuando se encuentra en Windows habilitada la opci\u00f3n de considerar parte de la intranet los sitios a los que no se acceda a trav\u00e9s de un servidor proxy. Puede ver esta opci\u00f3n a trav\u00e9s del panel \u201cOpciones de Internet\u201d del sistema operativo, pesta\u00f1a \u201cSeguridad\u201d, al pulsar en la zona \u201cIntranet\u201d y seguidamente en el bot\u00f3n \u201cSitios\u201d. < Es probable que esta opci\u00f3n se encuentre habilitada como parte de una configuraci\u00f3n de maqueta corporativa. Si es as\u00ed, NO deshabilite esta opci\u00f3n, ya que podr\u00eda afectar negativamente a la seguridad de su equipo o el funcionamiento de aplicaciones coorporativas. Con esta opci\u00f3n habilitada no podr\u00e1 utilizar AutoFirma con Edge Legacy. Si es posible, actualice a Edge Chromium o utilice otro navegador web. No se abre la aplicaci\u00f3n de firma con Firefox cuando el servidor declara una pol\u00edtica de seguridad (CSP) Mozilla Firefox no abre por defecto las URL con esquemas personalizados cuando el servidor web declara una pol\u00edtica de seguridad. Para permitir las llamadas con protocolo \u201cafirma\u201d utilizadas por el Cliente @firma, ser\u00e1 necesario agregar a la pol\u00edtica de seguridad el esquema correspondiente. Consulte el apartado 5.4 Configuraci\u00f3n del Content Security Policy para m\u00e1s informaci\u00f3n. Comunicaci\u00f3n JavaScript de despliegue \u2013 Cliente @firma El JavaScript de despliegue del Cliente @firma es el que incluye la l\u00f3gica de comunicaci\u00f3n entre el navegador Web y el cliente de firma. Algunas de las operaciones solicitadas a trav\u00e9s del JavaScript de despliegue ser\u00e1n procesadas directamente por el propio JavaScript, mientras que otras s\u00ed requerir\u00e1n que traslade la solicitud al Cliente de firma. A pesar de que es el JavaScript de despliegue el que gestiona la delegaci\u00f3n de tareas en la aplicaci\u00f3n nativa correspondiente a cada entorno, deben cumplirse una serie de requisitos para que esto sea posible. AutoFirma es una herramienta nativa que puede instalarse en Windows, Linux y macOS como herramienta independiente de firma de datos locales. Sin embargo, al instalarse en el sistema tambi\u00e9n registran el protocolo \u201cafirma\u201c, mediante lo cual atienden a las llamadas realizadas a este protocolo. La llamada por protocolo es un mecanismo de invocaci\u00f3n de aplicaciones (si acaso la propia aplicaci\u00f3n que realiza la llamada no puede atender a este protocolo) mediante el que puede pasarse una cantidad limitada de informaci\u00f3n a modo de par\u00e1metros. Sin embargo, este protocolo s\u00f3lo permite la comunicaci\u00f3n en un sentido ya que la aplicaci\u00f3n invocada no puede hacer referencia a la instancia de aquella que la invoc\u00f3. Es por esto que, para permitir la comunicaci\u00f3n bidireccional, Autofirma establece 2 mecanismos distintos: La comunicaci\u00f3n mediante socket . Este sistema se utiliza cuando se ejecuta la operaci\u00f3n en un equipo sobremesa y navegador Chrome, Firefox, Safari, Internet Explorer 11 y Edge. La comunicaci\u00f3n mediante un servidor intermedio. Este sistema requiere el despliegue de los dos servicios auxiliares de comunicaci\u00f3n y puede utilizarse potencialmente en cualquier navegador. Consulte el apartado Servicios para m\u00e1s informaci\u00f3n. Dado que este sistema ofrece un peor rendimiento, por defecto s\u00f3lo se utiliza en entornos de usuario que no soportan la comunicaci\u00f3n por sockets o en los que puede dar problemas: dispositivos m\u00f3viles, Internet Explorer 10 e inferiores, Safari 10\u2026. Por regla general, siempre se deber\u00edan desplegar los servicios auxiliares para la comunicaci\u00f3n por servidor intermedio , ya que hay entornos que dependen de esos servicios, incluso si no son los m\u00e1s utilizados. Comunicaci\u00f3n por sockets En la comunicaci\u00f3n por socket , AutoFirma abre un socket local SSL y el JavaScript de despliegue traslada las peticiones de la aplicaci\u00f3n a trav\u00e9s del \u00e9l. Las respuestas se obtienen a trav\u00e9s del propio socket . < < < La arquitectura de comunicaci\u00f3n seguida en este proceso se describe a continuaci\u00f3n: Primeramente, el tr\u00e1mite ordena la operaci\u00f3n en cuesti\u00f3n por medio del JavaScript de despliegue del Cliente @firma, por ejemplo, una operaci\u00f3n de firma. A continuaci\u00f3n, el JavaScript detectar\u00e1 que el entorno del usuario soporta la comunicaci\u00f3n por sockets y lanzar\u00e1 AutoFirma mediante una invocaci\u00f3n por protocolo junto con las instrucciones para abrirlo. AutoFirma abrir\u00e1 este socket cifrando el canal mediante un certificado SSL y el JavaScript podr\u00e1 enviar la orden de firma a trav\u00e9s del este. Una vez abierta la aplicaci\u00f3n, cualquier petici\u00f3n posterior se realizar\u00e1 a trav\u00e9s del mismo socket, sin necesidad de relanzarla. AutoFirma se cerrar\u00e1 al detectar que el puerto se ha cerrado o, si no es posible detectarlo, cuando pase un tiempo sin haber recibido m\u00e1s peticiones desde el JavaScript. La comunicaci\u00f3n a trav\u00e9s del socket se cifra mediante el protocolo TLS v1.1/v1.2. Es necesario tener habilitados estos protocolos en el navegador para poder establecer la comunicaci\u00f3n con AutoFirma. Comunicaci\u00f3n por servidor intermedio Este modo de comunicaci\u00f3n se basa en dos servicios disponibles en el mismo dominio que el tr\u00e1mite Web en el que se va a firmar. Cuando el JavaScript de despliegue y la aplicaci\u00f3n de firma necesiten comunicarse, subir\u00e1n la informaci\u00f3n de la operaci\u00f3n a realizar a un servidor, de donde tendr\u00e1 que descarg\u00e1rselo el destinatario de dichos datos. La comunicaci\u00f3n por servidor intermedio es la utilizada por defecto cuando se accede a la p\u00e1gina desde un dispositivo m\u00f3vil (en el que no podemos abrir un socket local) y cuando se accede desde otro entorno con un navegador no compatible con la comunicaci\u00f3n por sockets o en el que se han encontrado problemas. La arquitectura de comunicaci\u00f3n seguida en este proceso se describe a continuaci\u00f3n: < < < < Cuando el JavaScript de despliegue deba enviar a la aplicaci\u00f3n de firma la ejecuci\u00f3n de una operaci\u00f3n, subir\u00e1 los datos que deba enviarle al servidor intermedio por medio del servicio de guardado, invocar\u00e1 a la aplicaci\u00f3n de firma mediante una llamada por protocolo y \u00e9sta se descargar\u00e1 los datos por medio del servicio de recuperaci\u00f3n. Una vez procesados los datos, la aplicaci\u00f3n almacenar\u00e1 el resultado en el servidor intermedio y el JavaScript de despliegue descargar\u00e1 estos datos del servidor para obtener el resultado final. En este modo de comunicaci\u00f3n, el JavaScript de despliegue abre la aplicaci\u00f3n de firma por cada operaci\u00f3n. Despu\u00e9s de finalizar una operaci\u00f3n, la aplicaci\u00f3n se cierra o queda en segundo plano. Consulte el apartado 5.3.1 Servicios auxiliares de comunicaci\u00f3n para saber m\u00e1s de estos servicios del Cliente @firma y c\u00f3mo desplegarlos. Firma trif\u00e1sica Una firma electr\u00f3nica se compone de los siguientes pasos: Construir la estructura que el usuario debe firmar seg\u00fan el formato de firma y la configuraci\u00f3n seleccionada. Realizar la firma digital de esos datos con el certificado del usuario. Introducir la firma digital en la estructura de firma. En el comportamiento por defecto, AutoFirma realizar\u00eda todos estos pasos consecutivamente. Sin embargo, el proceso puede realizarse en tres fases separadas, en donde la primera y la tercera fase, que son las que no requieren la clave privada de firma, se realicen en un servidor remoto, mientras que la segunda seguir\u00eda realiz\u00e1ndose en el equipo cliente. Este proceso de firma dividido en 3 fases es lo que se denomina firma trif\u00e1sica. Esta operativa resulta de mucho inter\u00e9s en determinados casos: El origen y/o el destino de la informaci\u00f3n es un servidor , de tal forma que se pueden pre-procesar los datos en servidor (Fase I) y mandar al usuario s\u00f3lo la informaci\u00f3n m\u00ednima necesaria; el usuario la firmar\u00eda en su sistema (Fase II) y el resultado se enviar\u00eda de vuelva a servidor; en donde se compondr\u00eda la firma (Fase III) y podr\u00eda postprocesarse y almacenarse. Se necesita firmar documentos muy grandes . La firma trif\u00e1sica interesa en este caso porque la mayor carga de proceso recaer\u00eda sobre el servidor y no sobre el sistema del usuario que presuntamente tendr\u00e1 menos recursos. El uso de la firma trif\u00e1sica en estos casos conlleva una serie de ventajas y desventajas: Ventajas El documento no viaja a trav\u00e9s de la red. Mayor facilidad para desarrollos sobre dispositivos m\u00f3viles y similares, ya que no es necesario programar la l\u00f3gica del formato para el dispositivo, s\u00f3lo es necesaria la fase del cifrado de los datos con la clave del usuario. Menos propenso a errores debido a que la parte cliente no se ver\u00eda expuesta a las muchas variables del entorno que pueden afectar a los distintos formatos de firma (versiones preinstaladas de bibliotecas, cambios en Java, \u2026). Las operaciones m\u00e1s complejas se realizan en servidor, un entorno mucho m\u00e1s controlado. Desventajas: Implica un mayor n\u00famero de conexiones de red, aunque el tr\u00e1fico de red, seg\u00fan el caso, podr\u00eda sea menor. Requiere el despliegue de un servicio en el servidor que se encargue de realizar las fases 1 y 3. Debe recalcarse que el procedimiento de firma trif\u00e1sica es \u00fatil cuando los datos a firmar residen en servidor y la firma generada se necesita tambi\u00e9n en servidor. En estos casos, se podr\u00eda indicar al servidor de donde obtener los datos a firmar y qu\u00e9 hacer con la firma generada. Si los datos y/o la firma deben estar en cliente, no solo se produce un innecesario tr\u00e1fico de red, sino que se aumenta la posibilidad de fallo y se incrementan las necesidades de memoria del cliente de firma. El proceso de firma de lotes del Cliente @firma realiza siempre firmas trif\u00e1sicas, ya que en un escenario en el que se deben cargar m\u00faltiples datos y se generan m\u00faltiples firmas se puede volver inviable el conservar en memoria toda la informaci\u00f3n, adem\u00e1s del hecho de que probablemente haya que descargarla y luego subirla de nuevo al servidor. Cuando se hable de un proceso de firma de lotes se debe entender que se usar\u00e1n firmas trif\u00e1sicas, s\u00f3lo que se har\u00e1 uso de los servicios de prefirma y postfirma de lotes en lugar del servicio de firma trif\u00e1sica tradicional. Por lo dem\u00e1s, todas las consideraciones de firma trif\u00e1sica afectan de igual manera al proceso de firma de lotes. Servicios de firma trif\u00e1sica y de lotes Los servicios de firma trif\u00e1sica y de lotes realizan en servidor la primera y tercera fase del proceso de firma. Junto al Cliente @firma se distribuye el archivo WAR \u201cafirma-server-triphase-signer.war\u201d que despliega los servicios con las funcionalidades de firma trif\u00e1sica. Estoa servicios no es dependientes de ning\u00fan servidor de aplicaciones concreto. Consulte el manual de su servidor de aplicaciones para saber c\u00f3mo desplegar este fichero WAR y el apartado 5.3.2 Servicios de firma trif\u00e1sica y firma de lotes para saber como configurar los servicios. Estos servicios soportan la generaci\u00f3n de firmas en formato CAdES, XAdES, PAdES y FacturaE y admiten las mismas opciones de configuraci\u00f3n que las firmas monof\u00e1sicas de estos formatos. Desplegar y configurar estos servicios es necesario para la generaci\u00f3n expresa de firmas trif\u00e1sicas, el uso de la operativa de firma de lotes, en la que todas las firmas se generan de forma trif\u00e1sica. Tambi\u00e9n puede ser necesario para el uso del Cliente de firma m\u00f3vil, ya que este delega en el servicio trif\u00e1sico la generaci\u00f3n de las firmas en los formatos que no soportan nativamente. Para saber m\u00e1s acerca del Cliente @firma m\u00f3vil, consulte el apartado 9 Compatibilidad con dispositivos m\u00f3viles y AutoFirma . Gestor de documentos del servicio La principal ventaja del proceso de firma trif\u00e1sica es que no es necesario descargar a la p\u00e1gina web los datos a firmar para luego pas\u00e1rselos al m\u00e9todo de firma, ni ser\u00e1 necesario recoger la firma en un m\u00e9todo callback para luego enviarla al servidor. Los datos pueden cargarse directamente en servidor, no es necesario que viajen al equipo del usuario, y la firma puede guardarse directamente, sin necesidad de que la recoja nuestra aplicaci\u00f3n. Esta l\u00f3gica de cargar los datos y guardar la firma la gestiona el servicio de firma trif\u00e1sica por medio de lo que llamaremos \u201cgestor de documentos\u201d ( Document Manager ). Nuestro servicio de firma trif\u00e1sica tendr\u00e1 configurado un gestor de documentos que le dir\u00e1 c\u00f3mo obtener los datos y guardar las firmas. Este gestor de documentos se configura a trav\u00e9s de la propiedad \u201cdocument.manager\u201d del fichero de configuraci\u00f3n del servicio. Este gestor se utilizar\u00e1 tanto para las operaciones de firma trif\u00e1sica individuales como para las operaciones de firma de lotes. Un desarrollador puede crear un gestor de documentos optimizado para el proceso en el que se va a utilizar, pero el servicio de firma trif\u00e1sica se distribuye con varios gestores de documento ya integrados: es.gob.afirma.triphase.server.document.SelfishDocumentManager Es el Document Manager por defecto y emula el comportamiento de la firma monof\u00e1sica del cliente. Si no tenemos inter\u00e9s en la firma trif\u00e1sica, pero s\u00ed queremos que nuestra aplicaci\u00f3n sea compatible con la operaci\u00f3n de firma de los clientes m\u00f3viles de firma, deberemos desplegar el servicio de firma trif\u00e1sica con este gestor de documentos configurado. Este servicio permitir\u00e1 completar la firma cuando se utilice un formato no soportado por la aplicaci\u00f3n m\u00f3vil en cuesti\u00f3n: Cliente @firma Android: XAdES y FacturaE. Cliente @firma iOS: XAdES, FacturaE y PAdES. Nota : Este gestor de documentos carece de valor en las operaciones de firma de lotes, ya que no hace nada con las firmas y estas se pierden. Recibe: Los datos a firmar. Devuelve: La firma generada. es.gob.afirma.triphase.server.document.FileSystemDocumentManager Permite cargar los datos a firmar desde un directorio de entrada y guarda las firmas resultantes en un directorio de salida. Recibe: El nombre del fichero de datos a firmar. Devuelve: El nombre con el que se ha guardado el fichero de firma. Si se configura este Document Manager , se pueden configurar otras cuatro propiedades en el fichero de configuraci\u00f3n del servicio: docmanager.filesystem.indir: Directorio del servidor en donde se encuentran los documentos de datos. docmanager.filesystem.outdir: Directorio del servidor en donde se almacenan las firmas generadas. docmanager.filesystem.overwrite: Configura si se deben sobrescribir los ficheros de firma si ya existe una con el mismo nombre (true) o no (false). docmanager.filesystem.maxDocSize: Permite limitar a un tama\u00f1o m\u00e1ximo los ficheros que se quieren firmar. El tama\u00f1o se indicar\u00e1 en bytes. Si el fichero supera este tama\u00f1o, no se firmar\u00e1. Advertencia: La inclusi\u00f3n del FileSystemDocumentManager busca servir como ejemplo de gestor de documentos. Este gestor no deber\u00eda usarse salvo que se ajuste muy concretamente a sus necesidades. Si no es as\u00ed, lo correcto es que implemente su propio gestor de documentos optimizado para la carga y el guardado de documentos en sus sistemas. Consulte el apartado II.2.1 Gestor de documentos \u201cFileSystemDocumentManager\u201d para obtener informaci\u00f3n sobre c\u00f3mo integrar el uso de este gestor de documentos en su aplicaci\u00f3n. es.gob.afirma.triphase.server.document.LegacyBatchDocumentManager Permite mantener la compatibilidad con los SaveSigner del antiguo mecanismo de lotes. Este gestor no se deber\u00eda utilizar m\u00e1s que para esta finalidad. Permite los dos mecanismos de entrada que permit\u00eda el antiguo sistema de firmas (datos en Base64 o URL), y es compatible con los SignSaver que exist\u00edan por defecto y cualquier otro agregado a posteriori. Recibe: Los datos coficiados en Base 64 o una URL a los mismos. Devuelve: La cadena \u201cOK\u201d. Si se configura este Document Manager , tambi\u00e9n se puede configurar las siguientes propiedades en el fichero de configuraci\u00f3n del servicio: docmanager.legacybatch.allowedsources: Fuentes de datos de entrada admitidos. Deber\u00e1 indicar las distintas fuentes de datos separadas por punto y coma (\u2018;\u2019). Los valores admitidos son: base64: Datos de entrada en Base 64. file:/: URL de un fichero de datos en servidor. Se puede completar con la parte de la ruta que se desee y terminar con asterisco (\u2018*\u2019) para determinar cualquier fichero en esa ruta. (No se recomienda el uso de este esquema) http://: URL con esquema HTTP para el acceso remoto a los datos. Se puede completar con la parte de la ruta que se desee y terminar con asterisco (\u2018*\u2019) para determinar cualquier origen en esa ruta. https://: URL con esquema HTTPS para el acceso remoto a los datos. Se puede completar con la parte de la ruta que se desee y terminar con asterisco (\u2018*\u2019) para determinar cualquier origen en esa ruta. ftp://: URL para el acceso remoto a los datos en un FTP. Se puede completar con la parte de la ruta que se desee y terminar con asterisco (\u2018*\u2019) para determinar cualquier origen en esa ruta. Por ejemplo: base64;https://www.midominio.com/datos/* Admite datos en base 64 y datos proporcionados a trav\u00e9s de una direcci\u00f3n HTTPS determinada. docmanager.legacybatch.checksslcerts: Indica si se debe comprobar la confianza en el certificado SSL de las fuentes de datos en los que se encuentre el canal cifrado. Si se establece con valor true, se realizar\u00e1 la comprobaci\u00f3n y se se establece a false, no. docmanager.legacybatch.maxDocSize: Permite limitar a un tama\u00f1o m\u00e1ximo los ficheros que se quieren firmar. El tama\u00f1o se indicar\u00e1 en bytes. Si el fichero supera este tama\u00f1o, no se firmar\u00e1. Consulte el apartado II.2.2 Gestor de documentos \u201cLegacyBatchDocumentManager\u201d para obtener informaci\u00f3n sobre c\u00f3mo integrar el uso de este gestor de documentos en su aplicaci\u00f3n. Un desarrollador Java podr\u00eda crear nuevos gestores de documentos e integrarlos en el servicio. Esto le permitir\u00eda crear procesos \u00f3ptimos que accediesen a sus entornos para recoger los datos y guardar las firmas y as\u00ed se evitase la descarga de los datos redujese la transferencia de datos entre el cliente de firma y los servidores del por red. Gestores de documentos personalizados Desarrollo de un gestor de documentos personalizado S\u00f3lo el responsable de un entorno conoce los requisitos de acceso al mismo, el proceso adecuado para acceder y las medidas de seguridad que es necesario implementar. Es por esto por lo que el servicio trif\u00e1sico permite que los integradores desarrollen su propia clase gestora de documentos y configurar en el servicio de firma trif\u00e1sica el que se utilice esta. Por ejemplo, si los documentos a firmar se almacenasen en un repositorio de contenidos remoto y las firmas se deben guardar en base de datos, podremos implementar la l\u00f3gica de nuestra clase gestora de documentos para que acceda a estos entornos usando las credenciales adecuadas, recupere los documentos y almacene las firmas. Para implementar un gestor de documentos, se deber\u00e1 implementar la interfaz es.gob.afirma.triphase.server.DocumentManager o es.gob.afirma.triphase.server.BatchDocumentManager (que hereda de la anterior), disponibles en el m\u00f3dulo \u201cafirma-server-triphase-signer-document\u201d del proyecto. Si se desea, se puede importar a su proyecto mediante la siguiente referencia de Maven: <dependency> <groupId>es.gob.afirma</groupId> <artifactId>afirma-server-triphase-signer-document</artifactId> <version>1.8.0</version> </dependency> La interfaz DocumentManager define los siguientes m\u00e9todos que deberemos implementar: byte[] getDocument(String dataRef, X509Certificate[] certChain, Properties prop) throws IOException; M\u00e9todo para la obtenci\u00f3n del documento que se desea firmar. Los par\u00e1metros recibidos en este m\u00e9todo ser\u00e1n: dataRef: Referencia a los datos que se deben firmar. Esta cadena es la que se introduce en el m\u00e9todo de firma o agregar documento a un lote. certChain: Cadena de certificaci\u00f3n del certificado utilizado para firmar. Seg\u00fan el tipo de operaci\u00f3n, la aplicaci\u00f3n utilizada y el almac\u00e9n del usuario, es posible que este valor s\u00f3lo contenga el certificado de firma o incluso que el par\u00e1metro sea nulo. prop: Par\u00e1metros para la configuraci\u00f3n de firma. Este es par\u00e1metro extraParams proporcionado en el m\u00e9todo de firma del Cliente @firma o el de agregar documento al lote. Se podr\u00edan incluir aqu\u00ed par\u00e1metros que no entren en conflicto con los de firma y que nos sirvan para proporcionar mayor informaci\u00f3n a la clase gestora de documentos. Esta funci\u00f3n debe devolver el binario del documento a firmar. En caso de producirse un error al recuperar el documento, la clase gestora deber\u00e1 lanzar una excepci\u00f3n de tipo IOException. String storeDocument(String dataRef, X509Certificate[] certChain, byte[] data, Properties prop) throws IOException; M\u00e9todo para el tratamiento y guardado de la firma generada. Adem\u00e1s del guardado, en este m\u00e9todo se podr\u00edan implementar funciones adicionales de las que se quiera liberar a las distintas aplicaciones que hagan uso del gestor. Por ejemplo, se podr\u00eda implementar aqu\u00ed el proceso de validaci\u00f3n de la firma o la agregaci\u00f3n de un sello de tiempo (agregar un un sello de tiempo con @firma lleva impl\u00edcito el validar la firma). De esta forma, si fallase este proceso, el Cliente @firma nortificar\u00eda al usuario de forma inmediata. Los par\u00e1metros recibidos en este m\u00e9todo ser\u00e1n: dataRef: Identificador de los datos que se firmaron. Es el mismo valor que se debi\u00f3 recibir en el m\u00e9todo getDocument. certChain: Cadena de certificaci\u00f3n del certificado utilizado para firmar. Seg\u00fan el tipo de operaci\u00f3n, la aplicaci\u00f3n utilizada y el almac\u00e9n del usuario, es posible que este valor s\u00f3lo contenga el certificado de firma o incluso que el par\u00e1metro sea nulo. data: Firma electr\u00f3nica generada. Son los datos que se deber\u00e1n tratar y guardar. prop: Par\u00e1metros para la configuraci\u00f3n de firma. Este es par\u00e1metro extraParams proporcionado en el m\u00e9todo de firma del Cliente @ firma o el de agregar documento al lote. Se podr\u00edan incluir aqu\u00ed par\u00e1metros que no entren en conflicto con los de firma y que nos sirvan para proporcionar mayor informaci\u00f3n a la clase gestora de documentos. Este m\u00e9todo debe devolver una cadena en Base 64, que ser\u00e1 la que se reciba como par\u00e1metro de datos en el m\u00e9todo de \u00e9xito de firma de la aplicaci\u00f3n que invoc\u00f3 al Cliente @firma. Esta cadena no tiene que ser un dato significativo si no es necesario. Por ejemplo, podr\u00eda limitarse a devolver la cadena \u201cOK\u201d (codificada en base 64), \u00fanicamente para que la aplicaci\u00f3n sepa que ha finalizado correctamente. Este valor de retorno no se devuelve a la aplicaci\u00f3n cuando se ha realizado una firma de lote. En este caso, se obtiene una estructura JSON con el estado en el que ha terminado cada una de las firmas del lote. En caso de producirse un error al tratar y guardar el documento, la clase gestora deber\u00e1 lanzar una excepci\u00f3n de tipo IOException. Por su parte, la interfaz BatchDocumentManager declara los siguientes m\u00e9todos adicionales: void rollback(String dataRef, X509Certificate[] certChain, Properties prop) throws IOException Este m\u00e9todo revierte el proceso de guardado de una firma mediante el m\u00e9todo storeDocument. Este m\u00e9todo se utilizar\u00eda si se produjese un fallo en el guardado de un documento del lote y la aplicaci\u00f3n hubiese indicado que se desea detener el proceso en caso de error, ya que se deb\u00eda guardar todo o nada. Los par\u00e1metros recibidos en este m\u00e9todo son los mismos usados en el de guardado: dataRef: Referencia a los datos firmados. Esta cadena es la que se introduce en el m\u00e9todo de firma o agregar documento a un lote. certChain: Cadena de certificaci\u00f3n del certificado utilizado para firmar. Seg\u00fan el tipo de operaci\u00f3n, la aplicaci\u00f3n utilizada y el almac\u00e9n del usuario, es posible que este valor s\u00f3lo contenga el certificado de firma o incluso que el par\u00e1metro sea nulo. config: Par\u00e1metros para la configuraci\u00f3n de firma. Este es par\u00e1metro extraParams proporcionado en el m\u00e9todo de firma del Cliente @ firma o el de agregar documento al lote. Se podr\u00edan incluir aqu\u00ed par\u00e1metros que no entren en conflicto con los de firma y que nos sirvan para proporcionar mayor informaci\u00f3n a la clase gestora de documentos. En caso de producirse un error al revertir el guardado, se deber\u00e1 lanzar una excepci\u00f3n de tipo IOException. void init (Properties config) Este m\u00e9todo inicializa el gestor con los par\u00e1metros de configuraci\u00f3n establecidos en el fichero de configuraci\u00f3n del servidor trif\u00e1sico (\u201ctps_config.properties\u201d). Esto permite configurar el comportamiento del gestor por medio de este fichero. Si no se implementa la interfaz BatchDocumentManager, pero a\u00fan se quiere poder configurar el gestor con las propiedades del fichero de configuraci\u00f3n del servicio, se puede implementar en la clase gestora un constructor que reciba un objeto Properties. El servicio de firma trif\u00e1sica har\u00e1 uso de este constructor para inicializar la clase y le proporcionar\u00e1 a trav\u00e9s de este par\u00e1metro todas las propiedades del fichero de configuraci\u00f3n. Si se implementa la interfaz BatchDocumentmanager, siempre se utilizar\u00e1 el constructor vac\u00edo y el m\u00e9todo init de la clase. Una clase que herede de DocumentManager tambi\u00e9n se puede usar como gestor de documentos en las operaciones de firma de lote, pero al no tener definido esta interfaz el m\u00e9todo rollback, el uso con el par\u00e1metro stopOnError de la firma de lotes estar\u00eda desaconsejado, ya que no se deshar\u00edan los guardados que se hiciesen. Configuraci\u00f3n de un gestor de documentos personalizado Para configurar una clase gestora de documentos personalizada se deber\u00e1 incluir esta como parte del servicio de firma trif\u00e1sica. Esto se puede hacer generando una JAR con las clases y recursos necesarios del conector e incluy\u00e9ndola dentro del WAR del servicio de firma trif\u00e1sica. Para esto, se debe abrir el WAR \u201cafirma-server-triphase-signer.war\u201d con una aplicaci\u00f3n de compresi\u00f3n de ficheros y agregar el JAR en el subdirectorio \u201c\\WEB-INF\\lib\\. Esta versi\u00f3n modificada del WAR es la que se deber\u00e1 desplegar en lugar del WAR por proporcionado. Seguidamente, se deber\u00e1n establecer en el fichero de configuraci\u00f3n del servicio (\u201ctps_config.properties\u201d) la propiedad \u201cdocument.manager\u201d con el nombre completo de nuestra clase gestora de documentos y todas aquellas propiedades adicionales que quieran tomar de este fichero. Puede consultar m\u00e1s informaci\u00f3n sobre este fichero en el apartado 5.3.2.1 Configuraci\u00f3n del servicio trif\u00e1sico . Si la recuperaci\u00f3n de los documentos del gestor de documentos puede cosiderarse una tarea pesada, puede valorarse activar la cach\u00e9 del servicio de firma trif\u00e1sica. Consulte m\u00e1s acerca de esta propiedad en el apartado 5.3.2.1 Configuraci\u00f3n del servicio trif\u00e1sico . Uso de la firma trif\u00e1sica con los gestores de documentos En este apartado se describe c\u00f3mo deben utilizarse las operaciones de firma trif\u00e1sica y de lotes con cada uno de los gestores de documentos incluidos por defecto en el servicio. Gestor de documentos \u201cFileSystemDocumentManager\u201d Par\u00e1metros de uso y descripci\u00f3n del funcionamiento La clase gestora de documentos FileSystemDocumentManager permite gestionar la firma de ficheros almacenados en servidor. Esta clase utiliza como identificador de documento el nombre de fichero, tanto en la entrada (fichero a firmar) como en la salida (fichero de firma). Esta clase gestora est\u00e1 preparada para recibir el nombre de los ficheros codificados en Base 64. Por ejemplo: El documento \u201cdocumento.pdf\u201d se indicar\u00eda con la cadena \u201cZG9jdW1lbnRvLnBkZg==\u201d. El documento \u201cfirma.xsig\u201d se indicar\u00eda con la cadena \u201cZmlybWEueHNpZw==\u201d. El resultado depende del tipo de operaci\u00f3n. En la funci\u00f3n callback de \u00e9xito de la operaci\u00f3n de firma se proporcionar\u00e1 el nombre del fichero codificado en Base64. En la funci\u00f3n callback de \u00e9xito de la firma del lote, se proporcionar\u00e1 \u00fanicamente el JSON con el resultado de la operaci\u00f3n del lote, independientemente de la clase gestora de documentos empleada. Es importante tener en cuenta que los nombres de fichero utilizados deben cumplir las restricciones del sistema de ficheros donde se almacenen los documentos. As\u00ed, por ejemplo, en un sistema de ficheros NTFS no deber\u00edamos indicar nunca un nombre de ficheros que contuviese el car\u00e1cter dos puntos (\u201c:\u201d). Por ejemplo, si quisi\u00e9ramos realizar una firma trif\u00e1sica con el Cliente @firma y nuestro servicio de firma trif\u00e1sica tuviese configurado el gestor de documentos FileSystemDocumentManager podr\u00edamos firmar as\u00ed: \u2026 var params = \"expPolicy=FirmaAGE\\nserverUrl=https://miweb.com/afirma-server-triphase-signer/SignatureService \"; // Queremos firmar el documento \"12345678.pdf\" del directorio de entrada AutoScript.sign (AutoScript.getBase64FromText(\"12345678.pdf\"), \"SHA512withRSA\", \"PAdEStri\", params, successCallback, errorCallback); \u2026 function successCallback(filenameB64, certB64) { // filenameB64 es el nombre del fichero de firma codificado en Base 64 } En una operaci\u00f3n de firma de lote, se usar\u00eda de la siguiente manera: \u2026 // Creamos el lote AutoScript.createBatch(\"SHA512withRSA\", \"PAdES\", \"sign\", null ); // Agregamos los documentos que queramos al lote AutoScript.addDocumentToBatch(\"1\", AutoScript.getBase64FromText(\"12345678.pdf\")); \u2026 // Iniciamos la firma var baseUrl = \" https://miweb.com/afirma-server-triphase-signer/\" AutoScript.signBatchProcess ( false , baseUrl + \"presign\", baseUrl + \"postsign\", null , successCallback, errorCallback); \u2026 function successCallback(jsonResult, certB64) { // jsonResult estructura JSON con el resultado de cada // operaci\u00f3n de firma del lote } Advertencia : Este gestor de documentos se incluye a modo ilustrativo. Si se desea utilizar en un entorno productivo, es necesario tener en cuenta algunos requisitos de seguridad. Por ejemplo, los documentos s\u00f3lo deber\u00edan almacenarse en el directorio de entrada del servidor en el que se vaya a iniciar el proceso de firma y deber\u00eda eliminarse del mismo una vez finalizada. De otra forma, este documento podr\u00eda ser recuperado por una aplicaci\u00f3n malintencionada mediante llamadas al servicio trif\u00e1sico. Las firmas en el directorio de salida tambi\u00e9n se deber\u00edan retirar una vez generadas. Configuraci\u00f3n en alta disponibilidad con varios nodos Los directorios configurados para el uso de este gestor deben ser siempre directorios visibles y compartidos por todas las instancias en ejecuci\u00f3n. Este aspecto es especialmente importante en configuraciones de servidores de aplicaciones en alta disponibilidad, donde puede haber varios nodos que presten el servicio trif\u00e1sico, cada uno de ellos en un sistema de ficheros diferente. En este entorno, si se especifica una ruta local, puede ocurrir que esta ruta apunte a un directorio distinto en cada nodo (distinto servidor, disco diferente, otro sistema de ficheros, etc.). El que todos los nodos accedan al mismo directorio referenciado en la configuraci\u00f3n se puede lograr usando un almacenamiento compartido entre todos ellos (con el mismo punto de montaje), mediante enlaces simb\u00f3licos, etc. Es importante tambi\u00e9n asegurarse de que todos los nodos tienen los permisos adecuados sobre los directorios configurados. Gestor de documentos \u201cLegacyBatchDocumentManager\u201d El gestor de documentos LegacyBatchDocumentManager permite emular el funcionamiento del antiguo mecanismo de firma de lotes, facilitando as\u00ed la migraci\u00f3n al mecanismo descrito en el apartado 6.5 Firma de lotes predefinidos . Este gestor permite reutilizar los modos de referenciaci\u00f3n de documentos y los SignSaver que se usaban con el mecanismo anterior. Sin embargo, este gestor s\u00f3lo se deber\u00eda utilizar cuando no se puede abordar el desarrollo de un DocumentManager que implemente las funciones que se necesiten, ya que este gestor es un mero intermediario para comunicar un sistema con otro. Tenga en cuenta que, a pesar de emular el funcionamiento antiguo, la configuraci\u00f3n de este gestor de documentos debe encontrarse en el fichero \u201ctps_config.properties\u201d. El antiguo fichero \u201csignbatch_config.properties\u201d s\u00f3lo es necesario si se utiliza el antiguo mecanismo de firma de lotes. Par\u00e1metros de uso y descripci\u00f3n del funcionamiento Este gestor de documentos admite varias fuentes de datos: Permite recibir los datos directamente codificados en Base 64. Permite recibir una URL para el acceso a los datos (HTTP, HTTPS, FTP o FILE). Por ejemplo, referencias v\u00e1lidas que se pueden utilizar son: wqFIb2xhIE11bmRvIQ== Firma la cadena \u201c\u00a1Hola Mundo!\u201d, que se obtiene al decodificar este Base 64. https://servidor.es/aplicacion/datos/prueba.txt Firma el contenido del fichero prueba.txt obtenido al descargarlo a trav\u00e9s de la URL. file://C:/datos/prueba.txt Firma el contenido del fichero prueba.txt cargado desde disco. En el fichero de configuraci\u00f3n \u201ctps_config.properties\u201d se puede configurar la propiedad \u201cdocmanager.legacybatch.allowedsources\u201d para establecer qu\u00e9 protocolos se pueden usar para el acceso a los datos y si se permite indicar los datos en Base 64 o no. Consulte el apartado 5.3.2.1 Configuraci\u00f3n del servicio trif\u00e1sico para conocer el listado completo de opciones de configuraci\u00f3n. El procesado y guardado de la firma lo realiza este gestor de documentos a trav\u00e9s de los SignSaver que se utilizaban en el antiguo mecanismo de firma de lotes. Para seleccionar y configurar el SignSaver, se deber\u00e1n proporcionar una serie de propiedades de configuraci\u00f3n a trav\u00e9s del par\u00e1metro extraParams del m\u00e9todo de creaci\u00f3n del lote o, si var\u00eda la configuraci\u00f3n para cada uno de los documentos, a trav\u00e9s del extraParam del m\u00e9todo de agregar documentos al lote. El SignSaver a utilizar se configurar\u00e1 por medio de la propiedad \u201csignSaver\u201d. Con esta propiedad el administrador podr\u00e1 configurar que clase de guardado se utilizar\u00e1. Esta puede ser una agregada por el al servicio o una de las que se encuentran ya integradas. Las clases integradas son: es.gob.afirma.signers.batch.SignSaverFile Clase para el guardado de la firma en disco en el servidor. Esta clase admite adem\u00e1s la siguiente propiedad para su configuraci\u00f3n: FileName Establece la ruta de guardado de la firma. es.gob.afirma.signers.batch.SignSaverHttpPost Clase para el env\u00edo de la firma a un servidor remoto. Esta clase admite adem\u00e1s las siguientes propiedades para su configuraci\u00f3n: PostUrl Configura la URL del servicio de guardado. PostParamName Nombre del par\u00e1metro en el que se agregar\u00e1 la firma. Un ejemplo de llamada al m\u00e9todo de agregar a documentos al lote cuando se encuentre este gestor de documentos configurado podr\u00eda ser: var ref1 = Base64.encode(\"Hola Mundo!!\"); var params1 = \"mode=implicit\\nsignSaver=es.gob.afirma.signers.batch.SignSaverFile\\nFileName=C:/Users/miusuario/firmas/firma1.csig\"; AutoScript.addDocumentToBatch(\"1\", ref1, \"CAdES\", \"sign\", params1); var ref2 = \"https://www.google.es\"; var params2 = \"format=XAdES Detached\\nsignSaver=es.gob.afirma.signers.batch.SignSaverFile\\nFileName=C:/Users/miusuario/firmas/firma2.xsig\"; AutoScript.addDocumentToBatch(\"2\", ref2, \"XAdES\", \"sign\", params2); Si ya dispon\u00eda de una clase SignSaver propia, podr\u00e1 seguir utiliz\u00e1ndola a trav\u00e9s de esta clase gestora de documentos. Para ello, configure a trav\u00e9s del par\u00e1metro de configuraci\u00f3n la propiedad \u201csignSaver\u201d con el nombre completo de su clase y agregue al mismo par\u00e1metro cualquier propiedad adicional que deba cargar su clase a trav\u00e9s de su m\u00e9todo init. < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"MCF manual integrador ES"},{"location":"markdown_strict/MCF_manual-integrador_ES/#introduccion","text":"El Cliente @firma es una soluci\u00f3n de firma electr\u00f3nica que permite a sus usuarios generar firmas con sus certificados locales. El Cliente est\u00e1 especialmente orientado a ser integrado dentro de tr\u00e1mites web de tal forma que una aplicaci\u00f3n web pueda solicitar al usuario la firma de unos datos a trav\u00e9s del Cliente y obtener como respuesta la firma de esos datos. El Cliente @firma est\u00e1 formado principalmente por dos componentes: Una aplicaci\u00f3n nativa (AutoFirma, para equipos es de sobremesa; el Cliente m\u00f3vil Android, para dispositivos Android; o el Cliente m\u00f3vil iOS, para dispositivos iOS). Esta aplicaci\u00f3n debe estar instalada en el dispositivo del usuario antes de iniciar el proceso de firma. Un JavaScript de despliegue para la integraci\u00f3n del proceso de firma dentro del tr\u00e1mite web. Adem\u00e1s de los componentes mencionados, el uso de determinadas funciones del Cliente @firma o su compatibilidad con determinados entornos puede requerir el despliegue de diversos servicios auxiliares a los que deber\u00e1 conectar la aplicaci\u00f3n cliente. El Cliente @firma hace uso de los certificados digitales X.509v3 y de las claves privadas asociadas a estos que est\u00e9n instalados en el repositorio o almac\u00e9n de claves y certificados ( KeyStore ) del sistema operativo o del navegador Web (Internet Explorer, Mozilla Firefox, etc.) del usuario. Tambi\u00e9n se permite el uso de certificados en dispositivos criptogr\u00e1ficos (tarjetas inteligentes, dispositivos USB) instalados en el sistema y con controlador CSP/PKCS#11 compatible (como, por ejemplo, el DNI Electr\u00f3nico o DNIe) y certificados en almacenes software (PKCS#12/PFX). La clave privada del usuario no abandona en ning\u00fan caso el almac\u00e9n de claves ni sale del equipo del usuario. El Cliente @firma no almacena ning\u00fan tipo de informaci\u00f3n personal del usuario, ni hace uso de cookies ni ning\u00fan otro mecanismo para la gesti\u00f3n de datos de sesi\u00f3n. AutoFirma s\u00ed almacena el log de su \u00faltima ejecuci\u00f3n a efectos de ofrecer soporte al usuario si se encontrase alg\u00fan error durante su ejecuci\u00f3n. El Cliente @firma forma parte de la suite de productos de @firma, pero no interacciona con ninguno de los servicios del resto de productos. El Cliente @firma s\u00f3lo generar firmas electr\u00f3nicas con los certificados de usuario. La validaci\u00f3n de estas firmas y su promoci\u00f3n a firmas longevas, por ejemplo, son operaciones que deber\u00e1n realizarse de forma independiente con otros productos de la suite (@firma, VALIDe, Integr@...)","title":"Introducci\u00f3n"},{"location":"markdown_strict/MCF_manual-integrador_ES/#licencia","text":"El Cliente @firma es software libre y puede usarse, seg\u00fan se desee, bajo licencia GNU General Public License versi\u00f3n 2 (GPLv2) o bajo licencia European Software License 1.1 (EUPL 1.1) o superior. El Cliente @firma incluye, entre otros, los siguientes productos de terceros con licencias compatibles: JXAdES ( https://github.com/universitatjaumei/jxades ) SpongyCastle ( https://rtyley.github.io/spongycastle/ ) C\u00f3digo derivado de iText v2.1.7 ( http://itextpdf.com/ ) C\u00f3digo derivado de Java Mime Magic Library ( http://jmimemagic.sourceforge.net/ ) Apache Santuario ( https://santuario.apache.org/ ) Proxy Vole ( https://github.com/MarkusBernhardt/proxy-vole ) Java WebSocket ( https://github.com/TooTallNate/Java-WebSocket )","title":"Licencia"},{"location":"markdown_strict/MCF_manual-integrador_ES/#licencias-java","text":"AutoFirma, en sus versiones para Windows y macOS, incluye una m\u00e1quina virtual de Java (JVM) para la ejecuci\u00f3n de la aplicaci\u00f3n. Microsoft Windows (64bits): OpenJDK JRE 17.0.2 (licencia GPL v2) macOS OpenJDK JRE 17.0.2 (licencia GPL v2) Las licencias de las JVM incluidas en AutoFirma permiten su uso sin coste de licencia. En caso de utilizar el antiguo MiniApplet (disponible hasta el Cliente @firma 1.6.5), la entidad encargada de la implantaci\u00f3n de la soluci\u00f3n ser\u00e1 la responsable de la proporcionar la JVM necesaria a sus empleados y las licencias que esta pueda requerir. En el caso de los ciudadanos o usuarios que no lo utilicen en el desempe\u00f1o de su actividad laboral, no se requerir\u00e1 el pago de licencias independientemente de que se utilice OpenJDK u Oracle Java. Los Clientes m\u00f3viles para Android e iOS utilizan \u00fanicamente el entorno de ejecuci\u00f3n proporcionado por el del sistema y no requieren licencia.","title":"Licencias Java"},{"location":"markdown_strict/MCF_manual-integrador_ES/#recursos","text":"Puede consultar la informaci\u00f3n relativa al proyecto Cliente @firma y descargar el c\u00f3digo fuente y los binarios de la aplicaci\u00f3n en la siguiente direcci\u00f3n Web: http://administracionelectronica.gob.es/ctt/clienteafirma As\u00ed mismo, el c\u00f3digo del Cliente se encuentra disponible en GitHub y sus distintos m\u00f3dulos se encuentran disponibles en el repositorio central de Maven: Fuentes: https://github.com/ctt-gob-es/clienteafirma Binarios: https://search.maven.org/search?q=es.gob.afirma","title":"Recursos"},{"location":"markdown_strict/MCF_manual-integrador_ES/#adecuacion-al-esquema-nacional-de-seguridad","text":"Los productos de la Suite @firma pueden permitir el uso de algoritmos no recomendados por la Gu\u00eda 807 del Esquema Nacional de Seguridad (ENS; editada por el Centro Criptol\u00f3gico Nacional, CCN) vigente en el momento de publicaci\u00f3n de este documento. Queda bajo la responsabilidad de las aplicaciones que hacen uso de estos productos el configurar adecuadamente las llamadas a los mismos para generar el resultado esperado, v\u00e1lido y adecuado para ese momento y el nivel de seguridad deseado, utilizando para ello algoritmos de la familia SHA-2 tal y como especifica dicha norma para la generaci\u00f3n de firmas electr\u00f3nicas. Puede consultar la norma vigente desde el siguiente enlace: https://www.ccn-cert.cni.es/series-ccn-stic/800-guia-esquema-nacional-de-seguridad/513-ccn-stic-807-criptologia-de-empleo-en-el-ens/file.html","title":"Adecuaci\u00f3n al Esquema Nacional de Seguridad"},{"location":"markdown_strict/MCF_manual-integrador_ES/#requisitos-minimos","text":"","title":"Requisitos m\u00ednimos"},{"location":"markdown_strict/MCF_manual-integrador_ES/#entorno-cliente","text":"Los requisitos m\u00ednimos del entorno cliente depender\u00e1 de la aplicaci\u00f3n nativa utilizada para firmar. Debido a la amplia variedad de navegadores del mercado, s\u00f3lo se citar\u00e1n para cada aplicaci\u00f3n cliente aquellos navegadores para los que se han realizado pruebas espec\u00edficas. No excluye esto que pueda funcionar correctamente con otros entornos.","title":"Entorno Cliente"},{"location":"markdown_strict/MCF_manual-integrador_ES/#autofirma","text":"El uso de AutoFirma como herramienta de firma integrada dentro del proceso de firma de tr\u00e1mites web tiene los siguientes requerimientos en cuanto a entorno operativo: Sistema Operativo Microsoft Windows 7 o superior. Soportado directamente en 7, 8, 8.1, 10 y 11. En 32 o 64 bits. Linux. Soportado directamente en Ubuntu 20.04 LTS, Fedora 35 y OpenSUSE 15.3. macOS Catalina o superior. Soportado directamente en Catalina, Big Sur y Monterrey. Navegadores Web (Cuando es invocada desde una aplicaci\u00f3n web) Microsoft Windows Google Chrome 46 o superior. Mozilla Firefox 41.0.1 o superior. Microsoft Internet Explorer 8 o superior. Microsoft Edge Legacy v20 o superior (EdgeHTML). Microsoft Edge (Edge Chromium). Linux Mozilla Firefox 41.0.1 o superior. macOS Apple Safari 9.0 o superior. Google Chrome 46 o superior. Mozilla Firefox 41.0.1 o superior. En entornos macOS y Windows no es necesario que el usuario tenga instalado un entorno de ejecuci\u00f3n de Java, ya que viene incluido en la propia aplicaci\u00f3n. En Linux se necesita un entorno de ejecuci\u00f3n de Java OpenJDK (marcado como recomendac\u00edon en el instalador de AutoFirma para permitir el uso de la compilaci\u00f3n preferida del usuario de la JRE (versi\u00f3n 8 o superior). Para el acceso al almac\u00e9n de Firefox en algunas versiones de Windows puede ser necesario instalar los entornos de ejecuci\u00f3n redistribuibles de Microsoft Visual C++ 2015. Si AutoFirma no puede cargar los certificados de su almac\u00e9n de claves, siga las instrucciones descritas en el apartado de errores conocidos No se puede acceder al almac\u00e9n de claves de Firefox 49.0 y superiores .","title":"AutoFirma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#cliente-movil-android","text":"El uso de Cliente m\u00f3vil Android como herramienta de firma integrada dentro del proceso de firma de tr\u00e1mites web tiene los siguientes requerimientos en cuanto a entorno operativo: Sistema Operativo Android 4.3 o superior. Navegadores Web (para la invocaci\u00f3n por protocolo) Google Chrome. Navegador webkit.","title":"Cliente m\u00f3vil Android"},{"location":"markdown_strict/MCF_manual-integrador_ES/#cliente-movil-ios","text":"El uso de Cliente m\u00f3vil iOS como herramienta de firma integrada dentro del proceso de firma de tr\u00e1mites web tiene los siguientes requerimientos en cuanto a entorno operativo: Sistema Operativo iOS 13 o superior. Navegadores Web (para la invocaci\u00f3n por protocolo) Apple Safari.","title":"Cliente m\u00f3vil iOS"},{"location":"markdown_strict/MCF_manual-integrador_ES/#entorno-servidor","text":"El Cliente @firma requiere de una serie de servicios auxiliares para el uso de ciertas funcionalidades y la compatibilidad con determinados entornos. Los requisitos de estos servicios son los siguientes: Servidor de aplicaciones JEE compatible con Servlets de Java. Apache Tomcat, WildFly, RedHat JBoss, IBM WebSphere, Oracle GlassFish, Oracle Application Server, etc. JRE 1.7 o superior. Puede saber m\u00e1s acerca de los servicios auxiliares del Cliente @firma, consulte el apartado 5.3 Servicios del Cliente @firma .","title":"Entorno Servidor"},{"location":"markdown_strict/MCF_manual-integrador_ES/#operaciones-soportadas","text":"El Cliente @firma proporciona funcionalidades de firma electr\u00f3nica (incluyendo firmas m\u00faltiples) con certificados locales, pero no otras operaciones de firma o criptograf\u00eda como validaci\u00f3n de firmas, promoci\u00f3n a formatos longevos, sellado de tiempo, creaci\u00f3n de sobres digitales o cifrado. Adicionalmente, el Cliente @firma proporciona un conjunto de m\u00e9todos de utilidad y opciones de operaci\u00f3n. Las operaciones soportadas por el Cliente @firma son: Firma electr\u00f3nica. Firmas electr\u00f3nicas m\u00faltiples (m\u00e1s de un firmante por documento). Cofirma. Contrafirma. Firma de lotes de documentos. Selecci\u00f3n de certificado. Funciones de utilidad: Conversi\u00f3n de una cadena Base64 a texto. Conversi\u00f3n de un texto a una cadena Base64. Guardado de datos en disco. Carga de fichero local. Carga de multiples ficheros. Si su aplicaci\u00f3n requiere una funcionalidad de firma no soportada por el Cliente @firma, consulte el cat\u00e1logo de aplicaciones de @firma para determinar cu\u00e1l es la m\u00e1s apropiada para sus necesidades.","title":"Operaciones soportadas"},{"location":"markdown_strict/MCF_manual-integrador_ES/#despliegue-del-cliente-firma","text":"Para integrar el Cliente @firma en su aplicaci\u00f3n web se debe publicar junto a la misma el fichero \u201cautoscript.js\u201d. En este fichero se encuentra el objeto JavaScript que deberemos utilizar para invocar a las distintas operaciones del Cliente y obtener su resultado. Adicionalmente y seg\u00fan el entorno de ejecuci\u00f3n del usuario, es posible que para la comunicaci\u00f3n entre el JavaScript de despliegue y el Cliente @firma sea necesario el uso de dos servicios de comunicaci\u00f3n. Estos dos servicios, se distribuyen junto al JavaScript de despliegue en forma de archivos WAR (\u201cafirma-signature-retriever.war\u201d y \u201cafirma-signature-storage.war\u201d) y deber\u00edan desplegarse en el mismo dominio que la p\u00e1gina web desde la que se use el Cliente. Las funcionalidades de firma trif\u00e1sica y firma de lotes tambi\u00e9n requieren el despliegue de un servicio adicional (\u201cafirma-server-triphase-signer.war\u201d). Consulte en el apartado 5.3 Servicios del Cliente @firma en qu\u00e9 casos son necesarios estos servicios y as\u00ed determinar si debe realizar su despliegue.","title":"Despliegue del Cliente @firma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#informacion-preliminar","text":"En este apartado se presentan distintos aspectos que el integrador del Cliente @firma debe tener en cuenta antes del despliegue del Cliente @firma: Como medida de seguridad, AutoFirma no permite el despliegue en p\u00e1ginas a las que se acceda mediante \u201c127.0.0.1\u201d o \u201clocalhost\u201d. Si va a realizar pruebas en su equipo local, deber\u00e1 tomar alguna de las siguientes alternativas: Acceda a su p\u00e1gina y a los servicios del cliente a trav\u00e9s de la IP de red que tenga asignada su equipo. Configure en el fichero hosts de su equipo un alias para \u201c127.0.0.1\u201d y util\u00edcelo como nombre de dominio. La localizaci\u00f3n del fichero hosts seg\u00fan el sistema operativo es: En Windows: UNIDAD:\\Windows\\System32\\drivers\\etc\\ En Linux y macOS: /etc/hosts La p\u00e1gina web, el JavaScript de despliegue y los servicios del Cliente @firma deben ser accesibles desde el mismo dominio. De esta forma se evitar\u00e1n errores debido a los mecanismos de seguridad del navegador para bloquear ataques de Cross-Site Scripting (XSS). Esto es especialmente importante cuando se hace uso de los servicos auxiliares de comunicaci\u00f3n (StorageService y RetrieveService). Despliegue una instancia de los servicios auxiliares de comunicaci\u00f3n por cada aplicaci\u00f3n en la que integre el cliente o, al menos, por cada dominio. Siempre que se utilice el Cliente @firma ha de tenerse en cuenta que la aplicaci\u00f3n nativa debe poder confiar en los certificos SSL utilizados por cualquier servicio externo al que se deda conectar. En caso contrario, fallar\u00eda la conexi\u00f3n. Esto es cr\u00edtico cuando se hace uso de la comunicaci\u00f3n por servidor intermedio o se utiliza la operaci\u00f3n de firma trif\u00e1sica. En el caso de usar AutoFirma, puede evitar problemas durante el desarrollo y pruebas desactivando la comprobaci\u00f3n de los certificados SSL o agregando su dominio a la lista de dominios seguros. Puede hacer esto desde el panel de preferencias, en la pesta\u00f1a \u201cGeneral\u201d, desactivando la casilla de verificaci\u00f3n \u201cAceptar s\u00f3lo conexiones con sitios seguros (Recomendado)\u201d o accediento al apartado \u201cDominios seguros\u201d. En el caso de aplicaciones de firma m\u00f3vil Android, puede desactivar la validaci\u00f3n de certicados o agregar el dominio a la lista de dominios seguros desde el men\u00fa \u201cConfiguraci\u00f3n\u201d. Codificaci\u00f3n UTF-8 de las p\u00e1ginas cuando se proporcionen o recojan textos del cliente. El Cliente @firma interpreta todos los textos, tanto los recibidos como los devueltos en las respuestas, usando el juego de caracteres UTF-8. Para poder transmitirlos y mostrarlos correctamente desde una p\u00e1gina web es necesario que esta se encuentre codificada en UTF-8 y lo declare como tal. En caso de no ser posible, se recomienda: Que el Base64 de los textos a proporcionar al Cliente se hayan obtenido desde un entorno en el que se pueda gantizar que originalmente estaban codificados en UTF-8. Por ejemplo, que el texto ya estuviese previamente codificado o que se codifique a trav\u00e9s de un servicio. No mostrar directamente al usuario los mensajes devueltos por el propio Cliente.","title":"Informaci\u00f3n preliminar"},{"location":"markdown_strict/MCF_manual-integrador_ES/#importacion-del-javascript-de-despliegue","text":"Para integrar el Cliente @firma en su p\u00e1gina Web debe importar en ella la biblioteca JavaScript \u201cautoscript.js\u201d. Puede hacer referencia a la misma mediante una URL absoluta o mediante una URL relativa a partir de la direcci\u00f3n de publicaci\u00f3n de su p\u00e1gina Web. Por ejemplo, se puede introducir la carga de la biblioteca en la secci\u00f3n head del HTML, tal y como se muestra en el siguiente ejemplo: \u2026 <head> <script src= \"https://miweb.com/afirma/js/autoscript.js\" ></script> \u2026 Si la p\u00e1gina Web en la que deseamos cargar el Cliente @firma estuviese tambi\u00e9n en la ruta \u201c https://miweb.com/afirma \u201d se podr\u00eda hacer referencia a la biblioteca \u201cautoscript.js\u201d de forma relativa indicando: \u2026 <head> <script src= \"js/autoscript.js\" ></script> \u2026 Cualquier p\u00e1gina Web con esta biblioteca JavaScript importada est\u00e1 lista para utilizar el Cliente @firma.","title":"Importaci\u00f3n del JavaScript de despliegue"},{"location":"markdown_strict/MCF_manual-integrador_ES/#importacion-en-paginas-web-generadas-dinamicamente","text":"En un sistema Web actual, lo habitual es que las p\u00e1ginas Web no residan pre-construidas en directorios Web, sino que estas se generen din\u00e1micamente mediante alguna de las muchas tecnolog\u00edas disponibles de aplicaciones Web (JSP, ASP, PHP, etc.). En estos casos es necesario tener en cuenta que la direcci\u00f3n de la biblioteca JavaScript deber\u00eda establecerse en base a la URL de despliegue de la p\u00e1gina si se hace de forma relativa. En caso de duda, utilice la URL absoluta.","title":"Importaci\u00f3n en p\u00e1ginas Web generadas din\u00e1micamente"},{"location":"markdown_strict/MCF_manual-integrador_ES/#servicios-del-cliente-firma","text":"La compatibilidad del Cliente @firma con determinados entornos y funciones puede requerir el despliegue de una serie de servicios auxiliares. Estos servicios se distribuyen en forma de archivos WAR junto al JavaScript de espliegue del Cliente @firma y deber\u00edan desplegarse por cada aplicaci\u00f3n o sistema que desee utilizarlos. Los archivos WAR en los que se distribuyen estos servicios no requieren el uso de un software servidor de aplicaciones concreto. Consulte el apartado 3.2 Entorno Servidor para saber m\u00e1s de los requisitos de despliegue y la documentaci\u00f3n de su servidor de aplicaciones para saber c\u00f3mo desplegarlos. En caso de que su aplicaci\u00f3n no tenga que ser compatible con los entornos o las funcionalidades listadas a continuaci\u00f3n, no ser\u00e1 necesario el despliegue de ning\u00fan servicio. Esto es, que no tendr\u00e1 que desplegarlos en los siguientes casos: Si no se requiere compatibilidad con Internet Explorer 10 ni con Safari 10 ni versiones anteriores de ambas aplicaciones. Si no se requiere compatibilidad con dispositivos m\u00f3viles. Si no se utilizan operaciones de firma trif\u00e1sica o firma de lotes. Cada uno de estos servicios requiere un fichero de configuraci\u00f3n, pero la l\u00f3gica para definir la ubicaci\u00f3n de estos ficheros es la misma para todos ellos. Este aspecto de la configuraci\u00f3n se detalla en el apartado 5.3.3 Configuraci\u00f3n de los servicios .","title":"Servicios del Cliente @firma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#servicios-auxiliares-de-comunicacion","text":"Para la comunicaci\u00f3n entre el JavaScript de despliegue del Cliente @firma y la propia aplicaci\u00f3n de firma se utilizan diversos mecanismos. Uno de estos requiere del uso de dos servicos auxiliares de comunicaci\u00f3n. Deber\u00e1 utilizar estos servicios cuando: Desee que su despliegue sea compatible con entornos m\u00f3viles. Desee que su despliegue sea compatible con Internet Explorer 10 y anteriores (o una versi\u00f3n superior en modo compatibilidad con estas versiones). Cuando la aplicaci\u00f3n fuerce intencionadamente la comunicaci\u00f3n a trav\u00e9s de estos servicios. Estos servicios se distribuyen junto con el JavaScript de despliegue del Cliente @firma y son los siguientes: StorageService Este Servlet permite almacenar datos en un directorio temporal del servidor. Este servicio se despliega por medio del WAR \u201cafirma-signature-storage.war\u201d. RetrieveService Este Servlet permite recuperar datos de un servidor. Los datos devueltos deben estar almacenados en un directorio temporal predefinido y, tras devolver los datos, el servicio borrar\u00e1 el fichero temporal en donde se almacenaban. Este servicio nunca devolver\u00e1 datos que se guardasen hace m\u00e1s de un tiempo m\u00e1ximo configurado, devolviendo error tal como si no hubiese encontrado el fichero de datos. Igualmente, borrar\u00e1 todos aquellos ficheros del directorio temporal que hayan sobrepasado este tiempo m\u00e1ximo desde su creaci\u00f3n. Este servicio se despliega por medio del WAR \u201cafirma-signature- retriever.war\u201d. En cualquier el resto de los casos, el JavaScript de despliegue y AutoFirma se comunicar\u00e1n a trav\u00e9s de Sockets. Consulte el apartado ANEXO I Comunicaci\u00f3n JavaScript de despliegue \u2013 Cliente @firma para saber m\u00e1s sobre los mecanismos de comunicaci\u00f3n entre el JavaScript de despliegue y el Cliente @firma. Importante: Los servicios de almacenamiento y guardado en servidor deben ser accesibles desde el mismo dominio en el que se encuentre la p\u00e1gina de firma. Si no se hiciese as\u00ed, el navegador web puede bloquear la conexi\u00f3n con ellos interpretando que se trata de un ataque de cross-site scripting (XSS) .","title":"Servicios auxiliares de comunicaci\u00f3n"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-de-los-servicios-de-almacenaje-y-recuperacion","text":"Los servicios de almacenaje y recuperaci\u00f3n sirven para comunicar el JavaScript de despliegue y el Cliente @firma mediante el guardado temporal de los datos en un directorio concreto del servidor. Este directorio temporal debe ser visible y accesible por todas las instancias en ejecuci\u00f3n de los servicios. Este aspecto es especialmente importante en configuraciones de servidores de aplicaciones en alta disponibilidad, donde puede haber varios nodos que presten el servicio, cada uno de ellos en un sistema de ficheros diferente. El que todos los nodos accedan al mismo directorio referenciado en la configuraci\u00f3n se puede lograr f\u00e1cilmente usando un almacenamiento compartido entre todos ellos (con el mismo punto de montaje), mediante enlaces simb\u00f3licos, etc. Es importante tambi\u00e9n asegurarse de que todos los nodos tienen los permisos adecuados sobre los directorios configurados. Los servicios de almacenaje y recuperaci\u00f3n de datos para la comunicaci\u00f3n entre el JavaScript de despliegue y el Cliente @firma (StorageService y RetrieveService, respectivamente), utilizan el mismo fichero de configuraci\u00f3n. Este fichero es \u201cintermediate_config.properties\u201d, que debe encontrarse en un directorio indetificado por la ruta absoluta transmitida a trav\u00e9s de un par\u00e1metro \u201c-Dclienteafirma.config.path\u201d. Las propiedades disponibles en este fichero de configuraci\u00f3n son las siguientes: tmpDir : Es el directorio del servidor en donde se almacenar\u00e1n los datos temporales. Debe contener el mismo valor en los servicios de guardado y recogida de datos si estos se desplegasen por separado. A este directorio s\u00f3lo necesitan acceder los servicios de guardado y recuperaci\u00f3n de datos, por lo que el administrador del sistema puede determinar que s\u00f3lo estos servicios pueden acceder a dicho directorio. En caso de realizarse un despliegue en m\u00faltiples nodos, el directorio deber\u00eda encontrarse en una unidad compartida por todos ellos. Si no se configura esta propiedad, se usar\u00e1 el directorio temporal del servidor. expTime : Es el tiempo de caducidad en milisegundos de los ficheros del directorio. Una vez superado ese tiempo desde la creaci\u00f3n del fichero, el servicio de recuperaci\u00f3n se negar\u00e1 a devolverlo y lo eliminar\u00e1. Si no se configura esta propiedad, se usar\u00e1 por defecto el valor \u201c60000\u201d (1 minuto) maxFileSize : Es el tama\u00f1o m\u00e1ximo de fichero permitido expresado en bytes. Su utilidad responde principalmente a motivos de seguridad, para evitar que el directorio del servidor se quede sin espacio si comienzan a subirse datos de gran tama\u00f1o. Si no se configura esta propiedad, se usar\u00e1 por defecto el valor \u201c0\u201d, que indica que no hay l\u00edmite de tama\u00f1o de fichero. debug : Habilita el modo debug cuando se configura el valor \u201ctrue\u201d. El modo debug s\u00f3lo deber\u00eda habilitarse durante la fase de integraci\u00f3n y nunca en entornos productivos. En este modo: Se muestran traza de log adicionales. No se eliminan los ficheros recuperados del servicior intermedio. No se eliminan los ficheros caducados del directorio temporal del servidor intermedio. No se limita el tama\u00f1o m\u00e1ximo de los ficheros a guardar. Un ejemplo de fichero de configuraci\u00f3n podr\u00eda ser: # Directorio para el guardado de los ficheros. Por defecto: Directorio temporal tmpdir=C:/clienteafirma/temp # Tiempo de caducidad de los mensajes. Por defecto: 60000 (1 minuto) expTime=60000 # Tamano maximo de fichero en bytes. Por defecto: 0 (Sin limite) maxFileSize=1048576","title":"Configuraci\u00f3n de los servicios de almacenaje y recuperaci\u00f3n"},{"location":"markdown_strict/MCF_manual-integrador_ES/#consideraciones-de-seguridad","text":"Un posible ataque de denegaci\u00f3n de servicio sobre este sistema de almacenaje temporal es simplemente hacer muchas peticiones de almacenaje hasta que se alcance la capacidad total del sistema de ficheros. Los servicios proporcionados no incorporan ninguna medida contra estos ataques m\u00e1s que la limitaci\u00f3n del tama\u00f1o de fichero, por lo que debe ser el integrador el que las implemente. Algunas de estas medidas podr\u00edan ser: Establecer cuotas de disco para el directorio configurado en tmpDir . Detectar (y prevenir) m\u00faltiples llamadas al servicio de almacenamiento desde una misma direcci\u00f3n sin estar acompa\u00f1adas de las respectivas llamadas de recuperaci\u00f3n. Detectar (y prevenir) m\u00faltiples llamadas al servicio de almacenamiento en una frecuencia inusualmente alta.","title":"Consideraciones de seguridad"},{"location":"markdown_strict/MCF_manual-integrador_ES/#servicios-de-firma-trifasica-y-firma-de-lotes","text":"Estos servicios se distribuyen en el archivo desplegable \u201cafirma-server-triphase-signer.war\u201d y deber\u00e1n desplegarse cuando: Desee que su despliegue sea compatible con entornos m\u00f3viles. Para m\u00e1s informaci\u00f3n, consulte el apartado 9 Compatibilidad con dispositivos m\u00f3viles y AutoFirma . Desee utilizar las funciones de firma trif\u00e1sica del cliente @firma. Para m\u00e1s informaci\u00f3n, consulte el apartado 6.2.2 Firma trif\u00e1sica . Desee utilizar las funciones de firma de lotes. Para m\u00e1s informaci\u00f3n, consulte el apartado 6.5 Firma de lotes predefinidos . Los servicios en cuesti\u00f3n son los siguientes: SignatureService Servicio para la ejecuci\u00f3n de operaciones de firma trif\u00e1sica. Requerido cuando deseamos utilizar este tipo de operaci\u00f3n y cuando se realizan firmas desde las aplicaciones cliente m\u00f3vil. presign Servicio para la carga de documentos y prefirma en los procesos de firma de lotes. postsign Servicio para la postfirma en los procesos de firma de lotes y guardado de las firmas. Advertencia: AutoFirma 1.7 y anteriores hac\u00edan uso de un mecanismo de firma de lotes distinto al actual, que usaba sus propios servicios y se configuraban de forma separada. Estos servicios siguen incluy\u00e9ndose en el \u201cafirma-server-triphase-signer.war\u201d, pero se consideran obsoletos y s\u00f3lo deber\u00edan seguir us\u00e1ndose para dar soporte a los antiguos despliegues de firma trif\u00e1sica, tambi\u00e9n soportados por AutoFirma 1.8 y superiores. Si desea utilizar el antiguo sistema de firma de lotes, consulte la documentaci\u00f3n de AutoFirma 1.7.","title":"Servicios de firma trif\u00e1sica y firma de lotes"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-del-servicio-trifasico","text":"Los servicios de firma trif\u00e1sica y de lotes se configuran a trav\u00e9s del fichero \u201ctps_config.properties\u201d, que debe encontrarse en un directorio identificado por la ruta absoluta transmitida al servidor de aplicaciones a trav\u00e9s de un par\u00e1metro \u201c-Dclienteafirma.config.path\u201d. Se puede proporcionar este par\u00e1metro en el arranque del servidor de aplicaciones. Las propiedades que pueden establecerse en este fichero son: Access-Control-Allow-Origin Permite establecer el origen permitido de las peticiones. Los servicios agregar\u00e1n el valor de esta propiedad en las respuestas del servicio. Si se establece como valor un asterisco (\u2018*\u2019), se indica que se pueden realizar peticiones desde cualquier dominio. Valor por defecto: * xml.provider.apache Permite forzar el proveedor de firma XML que se debe utilizar. Si se indica false, se forzar\u00e1 el proveedor de Sun. Cualquier otro valor, har\u00e1 que se utilice el proveedor de Apache. Esto puede ser \u00fatil para evitar problemas de compatibilidad con bibliotecas de procesado de XML (como XERCES y XALAN) que puedan encontrarse en el classpath del servidor de aplicaciones. Este tipo de bibliotecas pueden interferir con las que incluye el propio Oracle Java e impedir realizar firmas XAdES. Valor por defecto: true document.manager Clase que se encargar\u00e1 de gestionar los documentos que se deben firmar y las firmas generadas en los procesos de firma trif\u00e1sica y de lote. Valor por defecto: es.gob.afirma.triphase.server.document.SelfishDocumentManager El gestor de documentos ( Document Manager) por defecto imita un proceso de firma monof\u00e1sica, lo cual quiere decir que se deber\u00e1n proporcionar los datos a firmar en las llamadas a las operaciones de firma y de lote. Para saber m\u00e1s de la firma trif\u00e1sica y las ventajas que ofrece consulte el apartado ANEXO II Firma trif\u00e1sica . verification.key Clave utilizada para generar el c\u00f3digo de verificaci\u00f3n de las firmas. Si se configura aqu\u00ed un valor (puede ser cualquiera), se utilizar\u00e1 este para generar un c\u00f3digo de verificaci\u00f3n de los datos enviados a firmar. Este c\u00f3digo se genera en la prefirma en base a los datos y se comprueba en la postfirma para garantizar que la firma generada se realiz\u00f3 sobre los datos originalmente prefirmados. Por defecto, no se configura ning\u00fan valor y no se realizar\u00e1 est\u00e1 validaci\u00f3n. cacheEnabled Establece si se deben guardar en cach\u00e9 los documentos durante la firma. Se habilita con el valor \u201ctrue\u201d y se mantiene deshabilitada con cualquier otro valor. Por regla general, el documento a firmar es necesario tanto en la prefirma como en la postfirma. Esto quiere decir que se deber\u00e1 recuperar en dos ocasiones mediante el gestor de documentos configurado. Si recuperarlo del entorno en el que se encuentre es un proceso pesado, se puede configurar que guard\u00e9 en cach\u00e9 el documento durante la prefirma para no tener que volverlo a recuperar durante la posfirma. Valor por defecto: false La implementaci\u00f3n de la cach\u00e9 se determina mediante la propiedad \u201cdocument.cache.manager\u201d de este mismo fichero. T\u00e9ngase en cuenta que seg\u00fan el gestor de documentos y la implementaci\u00f3n de cach\u00e9 puede o no ser conveniente habilitar el uso de la cach\u00e9. Por regla general, s\u00f3lo se deber\u00eda habilitar la cach\u00e9 cuando se implemente un gestor de documentos personalizado, no los incluidos por defecto en el servicio de firma trif\u00e1sica, y cuando la recuperaci\u00f3n de este documento del gestor de documentos sea m\u00e1s costosa que la recuperaci\u00f3n de los datos de la cach\u00e9, lo cual depender\u00e1 de la implementaci\u00f3n de cach\u00e9 utilizada. document.cache.manager Clase que se encargar\u00e1 de guardar y recuperar datos de la cach\u00e9. La implementaci\u00f3n por defecto usa el disco c\u00f3mo cach\u00e9, ya que el guardado en memoria puede sobrepasar los l\u00edmites establecidos para el servicio cuando se procesen varias peticiones simult\u00e1neamente. Valor por defecto: es.gob.afirma.triphase.server.cache.FileSystemCacheManager Este propiedad solo se tendr\u00e1 en cuenta si se activase la cach\u00e9 mediante la propiedad \u201ccacheEnabled\u201d. maxPagesToCheckShadowAttack N\u00famero m\u00e1ximo de p\u00e1ginas sobre las que comprobar el PDF Shadow Attack. Se puede omitir la comprobaci\u00f3n indicando \"0\" paginas o permitir que se haga sobre todo el documento indicando el valor \"all\". Por defecto, 10. Se puede consultar m\u00e1s informaci\u00f3n sobre la validaci\u00f3n de PDF Shadow Attack en el apartado 8.3.7 Comprobaci\u00f3n de PDF Shadow Attack . tmpdir Directorio para el guardado de los ficheros temporales. Si no se indica, se usar\u00e1 el del usuario, aunque es recomendable el uso de un directorio espec\u00edfico para este fin. concurrent.enable Determina como procesar las firmas en las operaciones de firma de lotes. Puede tener dos valores: true Indica que se permite el proceso en paralelo de las entradas del lote. false Las firmas del lote se procesar\u00e1n secuencialmente. Este es el valor por defecto. concurrent.timeout Numero de segundos que debera durar como maximo cada fase de una operacion de firma en modo concurrente. Si se excediese este tiempo, se detendria y se consideraria que se produjo un error. Valor por defecto: 30 concurrent.maxsigns N\u00famero m\u00e1ximo de firmas que se procesaran concurrentemente en caso de estar activo el modo concurrente. Valor por defecto: 10 batch.maxDocuments Indica el numero m\u00e1ximo de documentos que se pueden enviar en una petici\u00f3n. Valor por defecto: 15 batch.maxSize Indica el tama\u00f1o m\u00e1ximo global en bytes que puede tener la petici\u00f3n en bytes. Valor por defecto: 100000 batch.maxReferenceSize Indica el tama\u00f1o m\u00e1ximo en bytes que puede tener la referencia a los ficheros dentro de la petici\u00f3. Valor por defecto: 50000 batch.maxDocSize Indica el tama\u00f1o m\u00e1ximo en bytes que puede tener un fichero que se est\u00e9 procesando a trav\u00e9s del mecanismo antiguo de firma por lotes. Valor por defecto: 100000 El fichero de configuraci\u00f3n b\u00e1sico por defecto ser\u00e1: # Or\u00edgenes permitidos Access-Control-Allow-Origin=* # Permite indicar si se debe usar el proveedor de firma XML de Apache. xml.provider.apache=true # Clase del gestor de documentos a utilizar (debe implementar DocumentManager) document.manager=es.gob.afirma.triphase.server.document.SelfishDocumentManager # Clave de verificacion verification.key= # Habilitar cach\u00e9 cacheEnabled=false # Clase de implementacion de cache a utilizar (debe implementar DocumentCacheManager) document.cache.manager=es.gob.afirma.triphase.server.cache.FileSystemCacheManager # Numero maximo de paginas sobre las que comprobar el PDF Shadow Attack. maxPagesToCheckShadowAttack=10 # Directorio para el guardado de temporales tmpdir= # Operacion concurrente (true) o en serie (false) concurrent.enable=false # Numero de segundos maximos para cada operacion de firma concurrent.timeout=30 # Numero maximo de firmas procesadas concurrentemente concurrent.maxsigns=10 # Limite del tamano del documento en bytes en antiguo mecanismo de firma de lotes batch.maxDocSize=50000 Adicionalmente, en este fichero se podr\u00e1n configurar todas aquellas propiedades que se deseen establecer para el gestor de documentos y la implementaci\u00f3n de cach\u00e9 configurados. As\u00ed, por ejemplo, en el gestor de documentos a trav\u00e9s de sistema de ficheros (\u201cFileSystemDocumentManager\u201d) que se proporciona junto al servicio como muestra, se puede configurar un directorio de entrada de los datos y uno de salida para las firmas, as\u00ed como si se desean sobreescribir los datos en el directorio de salida. Tambi\u00e9n se incluye junto al servicio el gestor \u201cLegacyBatchDocumentManager\u201d, orientado a proporcionar al sistema de firma de lotes actual la misma funcionalidad que proporcionaba el sistema de firma de lotes de AutoFirma 1.7 y anteriores. Consulte el apartado II.1.1 Gestor de documentos del servicio para saber m\u00e1s acerca de los gestores de documentos y sobre el gestor de documentos a trav\u00e9s de sistema de ficheros. Si se activase el uso de la cach\u00e9 y se configurase la implementaci\u00f3n por defecto (es.gob.afirma.triphase.server.cache.FileSystemCacheManager), se usar\u00edan las siguientes propiedades adicionales del fichero de configuraci\u00f3n: cache.tmpDir: Ruta absoluta del directorio del servidor donde se almacenar\u00e1n temporalmente los documentos guardados en cach\u00e9. cache.expTime: Tiempo de caducidad en milisegundos de los archivos cacheados. Debe ser un n\u00famero entero y positivo. Valor por defecto: 60000. cache.maxUseToCleaning: Configura cada cu\u00e1ntos usos se limpiar\u00e1 la cach\u00e9. Durante el proceso de limpieza, se eliminar\u00e1 un fichero de la cach\u00e9 si ha excedido el tiempo de caducidad. Valor por defecto: 300. Un desarrollador Java podr\u00eda crear nuevos sistemas de cach\u00e9 e integrarlos en el servicio. Esto le permitir\u00eda a crear procesos optimos que redujesen las transferencias de datos por red. Para implementar un sistema de cach\u00e9, se deber\u00e1 implementar la interfaz es.gob.afirma.triphase.server.cache.DocumentCacheManager, disponible en el m\u00f3dulo \u201cafirma-server-triphase-signer-document\u201d del proyecto. Puede importar este m\u00f3dulo a su proyecto Maven mediante la referencia: <dependency> <groupId>es.gob.afirma</groupId> <artifactId>afirma-server-triphase-signer-document</artifactId> <version>1.8</version> </dependency>","title":"Configuraci\u00f3n del servicio trif\u00e1sico"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-de-los-servicios","text":"Independientemente de su funci\u00f3n, todos los servicios que acompa\u00f1an al Cliente @firma siguen la misma l\u00f3gica para localizar su fichero de configuraci\u00f3n y el uso de variables de entorno. En este apartado se explica c\u00f3mo configurar estos aspectos comunes a todos ellos. Los servicios del Cliente utilizan uno o varios ficheros de propiedades para su configuraci\u00f3n. Estos ficheros tienen nombres prefijados, pero el integrador puede definir su ubicaci\u00f3n mediante la variable de entorno \u201cclienteafirma.config.path\u201d. El valor asignado a esta variable debe ser la ruta del directorio en el que se encontrar\u00e1n esos ficheros. La variable puede establecerse, por ejemplo, por medio de la variable $JAVA_OPTS al levantar el servidor de aplicaciones. Por ejemplo: JAVA_OPTS=\u201c%JAVA_OPTS% -Dclienteafirma.config.path=/opt/usuarios/cliente/conf\u201d Tambi\u00e9n se puede hacer uso de otras variables declaradas por uno mismo o por el propio servidor de aplicaciones. Por ejemplo: JAVA_OPTS=\u201c%JAVA_OPTS% -Dclienteafirma.config.path=%CATALINA_HOME%/conf/afirma\u201d En caso de no declararse la variable de entorno, se buscar\u00e1n los ficheros en el classpath de la aplicaci\u00f3n, por lo que podr\u00eda introducirse el fichero de configuraci\u00f3n dentro de los WAR de los servicios. Cada uno de los ficheros de configuraci\u00f3n de los servicios del Cliente @firma est\u00e1 compuesto por una serie de propiedades con valores asignados. El valor establecido en esas propiedades ser\u00e1 el utilizado por los servicios, pero tambi\u00e9n es posible heredar parte de la configuraci\u00f3n mediante variables de entorno. Para utilizar el valor de una variable de entorno como parte o todo el valor de una de las propiedades de configuraci\u00f3n, estableceremos en el fichero el nombre de la variable en cuesti\u00f3n delimitado por las part\u00edculas \u201c${\u201d y \u201c}\u201d. Por ejemplo: Se podr\u00eda establecer una propiedad en el arranque del servidor de aplicaciones: JAVA_OPTS=\u201c%JAVA_OPTS% -Dclienteafirma.config.path=%CATALINA_HOME%/conf/afirma \u2013DtempDir=%CATALINA_HOME%/temp/afirma\u201d Mientras, en nuestro fichero de configuraci\u00f3n podr\u00edamos establecer el valor de una propiedad vali\u00e9ndonos de esa propiedad del sistema que hemos establecido: # Se usar\u00e1 como directorio temporal, el subdirectorio \"temp\", localizado # en el directorio configurado por medio de la propiedad de sistema \"tempDir\". tmpdir=${tempDir}/temp Los ficheros de configuraci\u00f3n se leen una \u00fanica vez durante la carga de los servicios por lo que, tras realizar un cambio en ellos, ser\u00e1 necesario reiniciar el servidor de aplicaciones para que los servicios los apliquen.","title":"Configuraci\u00f3n de los servicios"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-del-content-security-policy","text":"AutoFirma y los clientes m\u00f3viles atienden las peticiones realizadas desde el JavaScript de despliegue por medio del protocolo \u201cafirma\u201d. Si su servidor web utiliza cabeceras CSP (Content Security Policy) para limitar las fuentes de las que cargar los recursos de sus p\u00e1ginas web, es probable que algunos navegadores Web (se ha identificado el caso concreto de Mozilla Firefox) rechacen la llamada a estas URL externas. En caso de que el servidor no utilice cabeceras CSP, no ser\u00e1 necesario hacer nada para el funcionamiento del Cliente @firma. Si, en cambio, s\u00ed se utilizan, ser\u00e1 necesario agregar a esta cabecera el esquema \u201cafirma://\u201d para garantizar que el navegador permite el acceso a este tipo de URL. Para hacer esto, se agregar\u00e1 la part\u00edcula \u201cafirma://*\u201d en la fuente por defecto de la pol\u00edtica de seguridad. Por ejemplo, si la cabecera con la pol\u00edtica de seguridad fuese: Content-Security-Policy: default-src 'self' *.site.com; img-src * Se modificar\u00eda para convertirlo en: Content-Security-Policy: default-src 'self' *.site.com afirma://*; img-src *","title":"Configuraci\u00f3n del Content Security Policy"},{"location":"markdown_strict/MCF_manual-integrador_ES/#integracion-del-cliente-firma-en-un-tramite-web","text":"El API del Cliente @firma se expone autom\u00e1ticamente al entorno JavaScript al importar en la p\u00e1gina web la biblioteca \u201cautoscript.js\u201d. En esta biblioteca est\u00e1 definido el objeto \u201cAutoScript\u201d y a partir de \u00e9l se podr\u00e1 invocar a todas las operaciones del Cliente. Por ejemplo, para inicializar el Cliente: AutoScript.cargarAppAfirma(); O, para firmar: AutoScript.sign(\u2026); La operaci\u00f3n de inicializaci\u00f3n del cliente no implica una llamada al Cliente @firma, \u00fanicamente inicializa el objeto JavaScript, por lo que puede realizarse durante la carga de la p\u00e1gina. El resto de las llamadas, sin embargo, pueden implicar la invocaci\u00f3n a una aplicaci\u00f3n externa como es el Cliente @firma. La comunicaci\u00f3n con el Cliente @firma se realiza de forma as\u00edncrona. Para poder gestionar esto, todas las funciones que implican llamar al Cliente permiten que se les proporcione una funci\u00f3n callback a trav\u00e9s de la cual obtener el resultado. Para el correcto uso del Cliente @firma deben seguirse siempre las siguientes normas: No lanzar operaciones de forma autom\u00e1tica. Todas las operaciones deber\u00edan desencadenarse a ra\u00edz de una acci\u00f3n del usuario. Por ejemplo, no se debe llamar al m\u00e9todo de firma durante la carga de la p\u00e1gina web. En su lugar, por ejemplo, se deber\u00eda mostrar un bot\u00f3n \u201cFirmar\u201d y, cuando el usuario pulse dicho bot\u00f3n, llamar a la operaci\u00f3n de firma. No se deben lanzar simult\u00e1neamente varias operaciones del Cliente. Hasta que no se obtenga el resultado de una operaci\u00f3n a trav\u00e9s de su funci\u00f3n callback , no se deber\u00eda llamar a la siguiente. As\u00ed, por ejemplo, no se permitir\u00eda hacer lo siguiente: AutoScript.sign(\u2026); // ERROR: La segunda funci\u00f3n se llamar\u00e1 antes de AutoScript.sign(\u2026); // terminar la anterior En su lugar, se deber\u00eda usar: // Funcion callback ejecutada al procesar el resultado de la Firma 1 function callbackFirma1(\u2026) { AutoScript.sign(\u2026); // Firma 2 } \u2026 AutoScript.sign(\u2026, callbackFirma1, \u2026); // Firma 1","title":"Integraci\u00f3n del Cliente @firma en un tr\u00e1mite web"},{"location":"markdown_strict/MCF_manual-integrador_ES/#carga-de-la-aplicacion","text":"Una vez importado el JavaScript en la p\u00e1gina Web, deberemos inicializar el objeto de comunicaci\u00f3n con el cliente mediante el m\u00e9todo: cargarAppAfirma() Es necesario haber llamado al m\u00e9todo de carga del Cliente antes de realizar cualquier otra de las operaciones soportadas por la aplicaci\u00f3n. A continuaci\u00f3n, se muestran diferentes ejemplos de carga del Cliente: Carga directa desde el c\u00f3digo HTML: \u2026 <body> <script type= \"text/javascript\" > AutoScript.cargarAppAfirma(); </script> \u2026 Carga desde una funci\u00f3n invocada en el momento de firmar: function firmar() { AutoScript.cargarAppAfirma(); AutoScript.sign( dataB64, \" SHA512withRSA \" , \" PAdES \" , null , firmaCorrectaCallback, firmaErrorCallback); } La funci\u00f3n de carga del Cliente s\u00f3lo se deber\u00eda invocar una \u00fanica vez por p\u00e1gina web. As\u00ed, no se debe utilizar este \u00faltimo ejemplo si se va a llamar varias veces al m\u00e9todo de firma.","title":"Carga de la aplicaci\u00f3n"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-de-los-puertos-de-comunicacion","text":"El tr\u00e1mite web y AutoFirma se comunicar\u00e1n com\u00fanmente a trav\u00e9s de un socket abierto en el equipo. Por defecto, es el propio JavaScript de despliegue el que gestiona qu\u00e9 n\u00famero de puerto debe usar para la apertura del socket, pero el propio tr\u00e1mite web puede establecer una configuraci\u00f3n espec\u00edfica si conoce el entorno de sus usuarios y lo considera conveniente. La aplicaci\u00f3n puede configurar los puertos a utilizar mediante el m\u00e9todo: setPortRange (port1, port2) La llamada a este m\u00e9todo configura que para la comunicaci\u00f3n debe seleccionarse un puerto aleatorio de entre los determinados por el rango port1-port2, ambos inclusive. Si s\u00f3lo se indicase un par\u00e1metro en el m\u00e9todo o si ambos fuesen el mismo n\u00famero de puerto, se utilizar\u00eda siempre ese puerto para la comunicaci\u00f3n. Por defecto, el javascript escoger\u00e1 un puerto en el rango 49152-65535. Sin embargo, al utilizar este m\u00e9todo, se puede establecer cualquier subrango de entre los puertos 2014 y 65535. Este m\u00e9todo puede ser llamado antes o despu\u00e9s del m\u00e9todo de carga, pero debe llamarse antes de invocar a la primera operaci\u00f3n que requiera la apertura de la aplicaci\u00f3n. Una vez invocada una operaci\u00f3n el puerto no se puede establecer ni cambiar. Ejemplos de uso de este m\u00e9todo ser\u00edan: Configuraci\u00f3n de un rango de puertos espec\u00edfico: \u2026 <body> <script type= \"text/javascript\" > AutoScript.setPortRange(61000, 62000); AutoScript.cargarAppAfirma(); </script> \u2026 Configuraci\u00f3n de un puerto concreto: \u2026 <body> <script type= \"text/javascript\" > AutoScript.setPortRange(63117); AutoScript.cargarAppAfirma(); </script> \u2026","title":"Configuraci\u00f3n de los puertos de comunicaci\u00f3n"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-de-los-servicios-auxiliares-de-comunicacion","text":"La comunicaci\u00f3n entre la p\u00e1gina del tr\u00e1mite web y los clientes de firma m\u00f3viles se realizar\u00e1 a trav\u00e9s de los servicios auxiliares de almacenamiento y recuperaci\u00f3n que habr\u00e1 que desplegar junto a la p\u00e1gina de firma. Tambi\u00e9n se utilizan estos con AutoFirma cuando la aplicaci\u00f3n lo indica expresamente. Por regla general, es buena pr\u00e1ctica desplegar siempre estos servicios y configurarlos en nuestra aplicaci\u00f3n, ya que posibilitan que el tr\u00e1mite de firma sea compatible con diversos entornos de usuario, como con dispositivos m\u00f3viles y versiones antiguas de Internet Explorer y Microsoft Edge Legacy. Para la configuraci\u00f3n de los servicios de comunicaci\u00f3n se usar\u00e1 el m\u00e9todo: setServlets (storageServiceUrl, retrieveServiceUrl) Un ejemplo de configuraci\u00f3n de los servicios auxiliares es: \u2026 <body> <script type= \"text/javascript\" > AutoScript.setServlets( \" https://gobierno.es/afirma-signature-storage/StorageService \", \" https://gobierno.es/afirma-signature-retriever/RetrieveService \" ); AutoScript.cargarAppAfirma(); </script> \u2026 Recuerde que, para evitar que se produzcan errores de cross-site scripting (XSS), los servicios auxiliares de comunicaci\u00f3n deben estar disponibles desde el mismo dominio que la p\u00e1gina web desde la que se realiza la firma. Consulte el apartado 5.3.1 Servicios auxiliares de comunicaci\u00f3n para saber m\u00e1s acerca de los servicios auxiliares de comunicaci\u00f3n y los entornos de usuario para los que son necesarios.","title":"Configuraci\u00f3n de los servicios auxiliares de comunicaci\u00f3n"},{"location":"markdown_strict/MCF_manual-integrador_ES/#forzado-de-la-comunicacion-a-traves-de-los-servicios-auxiliares","text":"Una aplicaci\u00f3n puede forzar a que siempre se utilice la comunicaci\u00f3n a trav\u00e9s de los servicios auxiliares, ya sea para mantener un comportamiento homog\u00e9neo en todos los entornos, para evitar problemas espec\u00edficos con alg\u00fan entorno o para optimizar alg\u00fan proceso de firma concreto. Esto, sin embargo, deber\u00eda evitarse en la medida de lo posible. Se puede forzar la comunicaci\u00f3n a trav\u00e9s de los servicios auxiliares invocando al m\u00e9todo: setForceWSMode(force) Al invocar a este m\u00e9todo con el par\u00e1metro true antes de invocar al m\u00e9todo de carga , el mecanismo de comunicaci\u00f3n quedar\u00e1 prefijado al de servicios auxiliares. Sin embargo, no se recomienda usar este m\u00e9todo salvo en casos muy espec\u00edficos, como cuando se utilizan operaciones de firma trif\u00e1sica con un gestor de documentos a medida. Advertencia: Diversas caracter\u00edsticas y medidas de seguridad de los navegadores Firefox, Chrome y Edge afectan al uso de AutoFirma cuando se comunican a trav\u00e9s de los servicios auxiliares. Si se forzarse al uso de estos servicios, debe evitarse realizar dos o m\u00e1s llamadas a las funciones que invoquen al Cliente a ra\u00edz de una \u00fanica interacci\u00f3n del usuario. Por ejemplo, no se podr\u00eda invocar una llamada a una operaci\u00f3n del Cliente desde la funci\u00f3n callback de una operaci\u00f3n anterior. Google Chrome y Microsoft Edge imponen restricciones adicionales que tambi\u00e9n afectan a la compatibilidad del despliegue con dispositivos m\u00f3viles. Para saber m\u00e1s acerca de estas restricciones y la comunicaci\u00f3n con servidor intermedio, consulte el apartado \u00a1Error! No se encuentra el origen de la referencia. \u00a1Error! No se encuentra el origen de la referencia. . Un ejemplo de forzado de la comunicaci\u00f3n a trav\u00e9s de los servicios auxiliares es: \u2026 <body> <script type= \"text/javascript\" > AutoScript.setForceWSMode( true ); AutoScript.setServlets( \" https://gobierno.es/afirma-signature-storage/StorageService \", \" https://gobierno.es/afirma-signature-retriever/RetrieveService \" ); AutoScript.cargarAppAfirma(); </script> \u2026","title":"Forzado de la comunicaci\u00f3n a trav\u00e9s de los servicios auxiliares"},{"location":"markdown_strict/MCF_manual-integrador_ES/#restriccion-segun-desfase-horario-con-el-servidor","text":"Al realizar una firma en el equipo del usuario, se registra en la propia firma la hora del propio equipo (esto no aplica a las operaciones de firma trif\u00e1sicas). En caso de que la hora y/o fecha del equipo se encuentren mal configuradas, es posible que una validaci\u00f3n posterior de la firma provoque errores, sobre todo si se trabaja tambi\u00e9n con sellos de tiempo. Por norma general, esto s\u00f3lo ocurre en casos extremos y no suele ser necesario aplicar ninguna medida para evitar esto. El JavaScript de despliegue del Cliente @firma incluye una funci\u00f3n que compara la hora del equipo del usuario con la del servidor web para as\u00ed detectar el desfase horario que hay entre ambos. En caso de detectar un desfase se puede advertir al usuario o incluso bloquear la operaci\u00f3n de firma. Para hacer la comprobaci\u00f3n de desfase horario puede utilizar el m\u00e9todo JavaScript: checkTime(checkType, maxMillis, checkURL) Este m\u00e9todo debe invocarse antes del m\u00e9todo de carga del Cliente y puede recibir como par\u00e1metros: checkType Tipo de verificaci\u00f3n que se desea realizar. Admite los valores: AutoScript.CHECKTIME_NO: No realiza ning\u00fan tipo de comprobaci\u00f3n. Este es el valor por defecto. AutoScript.CHECKTIME_RECOMMENDED: Realiza la comprobaci\u00f3n horaria y, en caso de encontrar un desfase, pedir\u00e1 al usuario que lo corrija antes de continuar. AutoScript.CHECKTIME_OBLIGATORY: Realiza la comprobaci\u00f3n horaria y, en caso de encontrar un desfase, pedir\u00e1 al usuario que lo corrija y evitar\u00e1 que el Cliente se ejecute en cualquier llamada posterior. maxMillis Milisegundos m\u00e1ximos que se permiten de desfase. Se recomienda que se indique un periodo m\u00ednimo de 1 minuto (60.000 milisegundos) para facilitar la correcci\u00f3n de la hora en el equipo del usuario. El valor por defecto son 5 minutos (300.000 milisegundos). checkURL URL contra la que se realizara la petici\u00f3n para obtener la hora del servidor. Por defecto, se usar\u00e1 la URL de la p\u00e1gina cargada en el navegador. Si cree que es posible que esto ocasione un mal funcionamiento por parte de su aplicaci\u00f3n, indique otra URL dentro de su dominio. Un ejemplo de uso ser\u00eda: \u2026 <body> <script type= \"text/javascript\" > AutoScript.checkTime(AutoScript.CHECKTIME_RECOMMENDED, 300000); AutoScript.cargarAppAfirma(); </script> \u2026 Debe notarse que, seg\u00fan la configuraci\u00f3n del servidor web, es posible que no se pueda determinar la hora a trav\u00e9s de la informaci\u00f3n que este proporciona. De ser as\u00ed, no se mostrar\u00e1 ninguna advertencia al usuario para no perjudicar la realizaci\u00f3n del tr\u00e1mite. Tambi\u00e9n es posible que un servidor s\u00f3lo transmita la hora en la primera carga de la p\u00e1gina y no cuando esta se refresca. Si ese fuese el caso, s\u00f3lo se advertir\u00eda de la diferencia horaria en la primera carga de la p\u00e1gina y no si el usuario refrescase la p\u00e1gina desde su navegador. T\u00e9ngase en cuenta tambi\u00e9n que el desfase horario se calcula en el momento de invocar al m\u00e9todo checkTime. As\u00ed pues, si el usuario modificase la hora de su sistema despu\u00e9s de la comprobaci\u00f3n, podr\u00eda realizar operaciones de firma sin que se le mostrasen advertencias. En caso de que desee bloquear de forma completa la firma de datos cuando se detecte una hora incorrecta en el sistema, aseg\u00farese de que el servidor de la p\u00e1gina web de comprobaci\u00f3n de hora siempre env\u00eda la hora en las respuestas de sus peticiones y llame al m\u00e9todo checkTime antes de cada operaci\u00f3n de firma.","title":"Restricci\u00f3n seg\u00fan desfase horario con el servidor"},{"location":"markdown_strict/MCF_manual-integrador_ES/#seleccion-del-almacen-de-claves","text":"El Cliente @firma accede al almac\u00e9n de claves del navegador web o el sistema operativo del usuario para ofrecer sus certificados en las operaciones de firma. Los almacenes utilizados por defecto por cada una de las aplicaciones son: AutoFirma : Si se utiliza Firefox, se acceder\u00e1 al almac\u00e9n de claves interno del navegador y se buscar\u00e1n las tarjetas inteligentes configuradas como dispositivos de seguridad en este. En cualquier otro caso, se usar\u00e1 el del sistema operativo. Windows: CAPI ( Cryptography Application Programming Interface ) macOS: Llavero de macOS Linux: Almac\u00e9n compartido NSS Cuando se detecte un DNIe o una tarjeta CERES conectada al equipo, AutoFirma acceder\u00e1 a ella y dar\u00e1 la posibilidad de firmar con sus certificados, independendientemente de que tambi\u00e9n se muestren los certificados del navegador o del sistema operativo. Cliente m\u00f3vil Android : Utiliza el almac\u00e9n de claves de Android. Cliente m\u00f3vil iOS : Utiliza el almac\u00e9n de la propia aplicaci\u00f3n. Aunque se recomienda no seleccionar el uso de un almac\u00e9n de claves distinto al por defecto , AutoFirma permite que se configure otro de los almacenes soportados. Los Cliente m\u00f3viles, en cambio, s\u00f3lo admiten el almac\u00e9n por defecto. Para establecer el almac\u00e9n de claves al que debe acceder AutoFirma, se deber\u00e1 utilizar el siguiente m\u00e9todo antes de invocar a cualquier operaci\u00f3n de firma o selecci\u00f3n de certificado: setKeyStore (keystore); En esta funci\u00f3n: keystore Tipo de almac\u00e9n al que se debe URL de acceso a los datos a descargar. En el objeto AutoScript se han definido las siguientes claves para configurar almacenes de claves: KEYSTORE_WINDOWS Almac\u00e9n de certificados CAPI. Compatible \u00fanicamente con sistemas Microsoft Windows. KEYSTORE_APPLE Llavero de macOS. Compatible \u00fanicamente con sistemas Apple macOS. KEYSTORE_SHARED_NSS Almac\u00e9n NSS del sistema. Compatible \u00fanicamente con sistemas Linux. KEYSTORE_MOZILLA Almac\u00e9n NSS de Mozilla (Mozilla Firefox, Mozilla Thunderbird, etc.). KEYSTORE_PKCS12 Almac\u00e9n en fichero PKCS#12 / PFX (Personal File Exchange). KEYSTORE_JAVA Almac\u00e9n en fichero JKS (Java KeyStore). KEYSTORE_JCEKS Almac\u00e9n en fichero JCEKS (Java Cryptography Extension KeyStore). KEYSTORE_JAVACE Almac\u00e9n en fichero de tipo CaseExactJKS (Case Exact Java KeyStore). KEYSTORE_PKCS11 Almac\u00e9n de claves compatible PKCS#11 (tarjetas inteligentes, aceleradora criptogr\u00e1fica\u2026). Si se selecciona un almac\u00e9n no disponible en el entorno del usuario, AutoFirma dar\u00e1 error al intentar acceder al almac\u00e9n de claves. Los clientes m\u00f3viles \u00fanicamente ignorar\u00e1n esta opci\u00f3n de la configuraci\u00f3n. Determinados tipos de almac\u00e9n permiten indicar el fichero o biblioteca en disco asociado al almac\u00e9n. Este fichero o biblioteca debe indicarse mediante su ruta absoluta en el sistema del usuario, como parte del mismo par\u00e1metro, a continuaci\u00f3n del tipo de almac\u00e9n y separados por signo dos puntos (\u2018:\u2019), siguiendo el patr\u00f3n: TIPO_ALMACEN:RUTA_ALMACEN Los almacenes que permiten indicar el fichero o biblioteca que se debe utilizar son: KEYSTORE_APPLE Permite indicar un fichero de tipo llavero en el que se encuentran los certificados de firma. Si no se indica ning\u00fan fichero se usa el llavero general del sistema. KEYSTORE_PKCS12 Permite indicar el almac\u00e9n en fichero de tipo PKCS#12/PFX (normalmente con extensiones \u201cp12\u201d o \u201cpfx\u201d) en el que se encuentran los certificados de firma. Si no se indica ning\u00fan fichero AutoFirma solicitar\u00e1 al usuario que seleccione uno mediante un di\u00e1logo gr\u00e1fico. KEYSTORE_PKCS11 Permite indicar la biblioteca que se debe utilizar para acceder al dispositivo que almacena los certificados de firma. Si no se indica ning\u00fan fichero, el Cliente @firma solicitar\u00e1 al usuario que seleccione uno mediante un di\u00e1logo gr\u00e1fico. Es importante rese\u00f1ar que la biblioteca PKCS#11 es dependiente del sistema operativo y de su arquitectura, por lo que, si se indica, por ejemplo, una biblioteca PKCS#11 como una DLL (Dynamic Link Library) de 32 bits, no funcionar\u00e1 ni en Linux ni en macOS, pero tampoco en Windows si se utiliza AutoFirma 64 bits. Advertencia : Los almacenes que hacen uso de un fichero o biblioteca requieren una contrase\u00f1a de acceso. Esta contrase\u00f1a se preguntar\u00e1 directamente al usuario cuando se requiera el acceso al almac\u00e9n. A continuaci\u00f3n, se muestran ejemplos de selecci\u00f3n del almac\u00e9n de claves: Configuraci\u00f3n del almac\u00e9n de Windows: AutoScript.cargarAppAfirma(); AutoScript.setKeyStore(AutoScript.KEYSTORE_WINDOWS); \u2026 AutoFirma.sign (dataB64, \"SHA512withRSA\", \"CAdES\", null , successCallback, errorCallback); Configuraci\u00f3n de un almac\u00e9n PKCS#12 en una ruta conocida: AutoScript.cargarAppAfirma(); AutoScript.setKeyStore(AutoScript.KEYSTORE_PKCS12 + \":/usr/home/usuario/almacen.p12\"); \u2026 AutoFirma.sign (dataB64, \"SHA512withRSA\", \"CAdES\", null, successCallback, errorCallback); Configuraci\u00f3n de un controlador PKCS#11 para el acceso de dispositivo critprogr\u00e1fico: AutoScript.cargarAppAfirma(); AutoScript.setKeyStore(AutoScript.KEYSTORE_PKCS11 + \":C:\\\\Windows\\\\System32\\\\PkcsV2GK.dll\"); \u2026 AutoFirma.sign (dataB64, \"SHA512withRSA\", \"CAdES\", null, successCallback, errorCallback); En sistemas Windows, puede darse el caso de que el usuario utilice un perfil temporal, con lo que el usuario no contar\u00e1 con certificados ni tarjetas instaladas en el almac\u00e9n de Windows. Cuando el Cliente @firma detecte este caso, har\u00e1 uso del controlador de tarjetas integrado en la aplicaci\u00f3n (JMulticard) para acceder a un DNIe o tarjeta CERES insertada en un lector del equipo. Adem\u00e1s, buscar\u00e1 en el sistema una serie predeterminada de bibliotecas PKCS#11 y tratar\u00e1 de utilizar las tarjetas inteligentes insertadas y asociadas a estas bibliotecas.","title":"Selecci\u00f3n del almac\u00e9n de claves"},{"location":"markdown_strict/MCF_manual-integrador_ES/#uso-de-tarjetas-inteligentes","text":"AutoFirma tiene acceso a las claves de las tarjetas inteligentes a partir de sus controladores cuando est\u00e1n instalados en el sistema. Para utilizar los certificados en tarjeta en las operaciones de firma, se puede acceder a ellos desde un almac\u00e9n PKCS#11 configurado o desde cualquiera de los almacenes de sistema disponibles: KEYSTORE_WINDOWS: El almac\u00e9n de Windows carga autom\u00e1ticamente todas las tarjetas insertadas para las que se haya instalado su controlador CSP o el MiniDriver correspondiente de Windows Update. En caso de detectarse un DNIe insertado o una tarjeta CERES, se har\u00e1 uso de los mismos a partir de un controlador interno de la aplicaci\u00f3n para corregir problemas detectados con Java en los controladores oficiales. KEYSTORE_MOZILLA/ KEYSTORE_SHARED_NSS: Los almacenes de Mozilla se componen de un almac\u00e9n interno y el conjunto de controladores PKCS#11 de las tarjetas instaladas en el sistema. AutoFirma cargar\u00e1 autom\u00e1ticamente el almac\u00e9n interno y todos los dispositivos detectados. Debido a problemas de incompatibilidad detectados entre Java y los controladores oficiales de DNIe y tarjetas CERES, en caso de detectarse insertada cualquiera de estas tarjetas se utilizar\u00e1 un controlador interno de la aplicaci\u00f3n, ignor\u00e1ndose los PKCS#11 configurados en el almac\u00e9n de Mozilla. En caso de detectar alguna de estas tarjetas tambi\u00e9n se ignorar\u00e1n el resto de los dispositivos insertados para evitar problemas entre los distintos controladores. KEYSTORE_APPLE: El llavero de macOS se compone de un almac\u00e9n internos y el conjunto de controladores de las tarjetas insertadas. Debido a problemas detectados con Java y los controladores oficiales de DNIe y tarjetas CERES, en caso de detectarse insertada cualquiera de estas tarjetas se utilizar\u00e1 un controlador interno de la aplicaci\u00f3n. Por regla general, se considera que s\u00f3lo deber\u00eda haber una tarjeta inteligente insertada en el momento de firmar. En caso de encontrarse varias, se dar\u00e1 prioridad al DNIe y las tarjetas CERES. En dichos casos, es posible que los certificados del resto de tarjetas no aparezcan disponibles para firmar o den error durante la firma. El uso de las tarjetas CERES de la FNMT y del DNIe se realiza a trav\u00e9s de las bibliotecas de JMulticard, por lo que no es necesario tener instalados sus controladores en el equipo para poder firmar con ellas. Advertencia : Existen controladores de tarjetas inteligentes que, tras la inserci\u00f3n de la tarjeta, registran en el almac\u00e9n de Windows los certificados que contiene. A partir de entonces, los certificados se muestran en el almac\u00e9n incluso sin tener la tarjeta insertada. Se ha encontrado que en Windows 10 21H1 y superiores este comportamiento produce problemas con Java y AutoFirma, ya que al intentar cargar el almac\u00e9n de claves se intentan cargar esos certificados que en realidad no se encuentran en el almac\u00e9n. El resultado es que el proceso de carga puede llevar varios minutos, lo que se traduce en que se tarda ese tiempo en mostrarse el di\u00e1logo de selecci\u00f3n de certificados o realizar la firma si el certificado se seleccionaba directamente. Subsiguientes firmas no conllevan esperar este tiempo, ya que para entonces el almac\u00e9n ya est\u00e1 cargado, pero volver\u00e1 a suceder si se recarga el almac\u00e9n. Para solventar esta situaci\u00f3n es necesario eliminar esos certificados del almac\u00e9n de Windows cuando la tarjeta no se encuentra insertada. Advertencia: A partir de cierta versi\u00f3n del controlador de la tarjeta CERES se ha apreciado que, si se tiene en el almac\u00e9n de Windows instalado un certificado que tambi\u00e9n se encuentra en el almac\u00e9n de la tarjeta inteligente, el certificado local se elimina tras el uso de la tarjeta. Este comportamiento no est\u00e1 relacionado con el uso de AutoFirma.","title":"Uso de tarjetas inteligentes"},{"location":"markdown_strict/MCF_manual-integrador_ES/#uso-del-dnie","text":"AutoFirma utiliza la biblioteca JMulticard para permitir firmar con DNIe sin necesidad de que los usuarios tengan instalados los controladores de la tarjeta. Esta biblioteca se utilizar\u00e1 siempre que se encuentre un DNIe insertado en un lector del equipo y se inserte su PIN en el di\u00e1logo de JMulticard. La aplicaci\u00f3n solicita el PIN del DNIe antes de listar los certificados del almac\u00e9n y de que el usuario indique qu\u00e9 certificado desea utilizarla para firmar. Este comportamiento emula el de los controladores PKCS#11 de las tarjetas en donde el PIN es necesario para listar los certificados contenidos por la tarjeta y sigue la l\u00f3gica de que si un usuario ha insertado el DNIe en el lector es porque lo desea utilizar. Cuando el usuario inserta el PIN, se listan sus certificados y se abre el canal seguro con la tarjeta y, en el momento de firmar, se utiliza este canal seguro para realizar la operaci\u00f3n de firma. A continuaci\u00f3n, se cierra el canal seguro. Las operaciones de firma realizadas posteriormente desde la misma instancia del AutoFirma, solicitar\u00e1n el PIN de la tarjeta s\u00f3lo en el momento de realizar la firma, momento en el cual se volver\u00e1 a abrir el canal seguro con la tarjeta. Si se recargase el almac\u00e9n por medio de la opci\u00f3n correspondiente del di\u00e1logo de selecci\u00f3n de certificados, el controlador se reiniciar\u00eda y volver\u00eda a pedir el PIN de la tarjeta para listar los certificados. El di\u00e1logo de solicitud de PIN de JMulticard mostrar\u00e1 una casilla para indicar que se desea recordar la contrase\u00f1a de la tarjeta durante el resto de la sesi\u00f3n. Esta casilla funciona cuando las firmas se realizan dentro de la misma operaci\u00f3n (firma de lotes, contrafirmas de varios nodos\u2026). Para que se recuerde la contrase\u00f1a a lo largo de distintas operaciones es necesario que se utilice simult\u00e1neamente la funci\u00f3n \u201csetStickySignatory()\u201d, descrita en el apartado 6.2.1 Firma de m\u00faltiples documentos (firma masiva) . En el momento en el que se cierra la instancia de AutoFirma (se cambia de p\u00e1gina, se utiliza comunicaci\u00f3n por servidor intermedio, se cumple el tiempo m\u00e1ximo de inactividad en la comunicaci\u00f3n por sockets, etc.), dejar\u00e1 de surtir efecto la configuraci\u00f3n de \u201csetStickySignatory()\u201d y se volver\u00e1 a pedir el PIN de la tarjeta. En el caso de ejecutar Autofirma usando el almac\u00e9n de Windows y cancelar el di\u00e1logo de PIN del DNIe de JMulticard, se cargar\u00e1 el almac\u00e9n del sistema normalmente. Si se tiene instalado el controlador oficial del DNIe en el equipo esto puede implicar que los certificados del DNIe se listen tambi\u00e9n en el di\u00e1logo de selecci\u00f3n de certificados ya que ser\u00e1 el controlador oficial el que los cargue. En estos casos, tambi\u00e9n se usar\u00e1 el controlador oficial para realizar la firma.","title":"Uso del DNIe"},{"location":"markdown_strict/MCF_manual-integrador_ES/#firma-electronica","text":"La operaci\u00f3n de firma electr\u00f3nica nos permite generar la firma electr\u00f3nica de unos datos, que pueden haber sido proporcionados por la aplicaci\u00f3n o seleccionados por el usuario. Para ejecutar la operaci\u00f3n de firma se utiliza la funci\u00f3n JavaScript: sign(dataB64, algorithm, format, params, successCb, errorCb); En esta funci\u00f3n: dataB64 Datos que se desean firmar codificados en Base64. Si los datos que necesita firmar son un texto (texto plano, XML, JSON, etc), puede convertirlos a Base64 por medio de las funciones de utilidad proporcionadas en el JavaScript de despliegue, descritas en el apartado 6.9.2 Conversi\u00f3n de un texto a cadena Base64 . Si no se proporciona este par\u00e1metro (se usa null) o si se pasa una cadena vac\u00eda, el Cliente @firma mostrar\u00e1 al usuario un di\u00e1logo de selecci\u00f3n de fichero para que seleccione el documento que desea firmar. Salvo en casos concretos, no se recomienda dejar en manos del usuario la selecci\u00f3n del fichero a firmar. Incluso si es necesario hacerlo, se recomienda hacer que el usuario cargue los datos previamente en servidor mediante un componente HTML y seguidamente se realice una operaci\u00f3n de firma trif\u00e1sica. Para la compatibilidad con dispositivos m\u00f3viles, nunca se deben proporcionar nulos o cadena vac\u00eda. algorithm Algoritmo de firma. Consulte el apartado dedicado a los algorirmos de firma soportados para el formato de firma que desee utilizar. format Formato de firma. Consulte el apartado 8 Formatos de firma para consultar aquellos disponibles. params Par\u00e1metros adicionales para la configuraci\u00f3n de la operaci\u00f3n de firma y caracter\u00edsticas particulares del formato de firma seleccionado. Si se introduce un nulo, se usar\u00e1 la configuraci\u00f3n por defecto para el formato de firma establecido. Consulte el apartado 7.1 Paso de par\u00e1metros adicionales para saber c\u00f3mo realizar el paso de par\u00e1metros y el apartado de informaci\u00f3n espec\u00edfica del formato de firma que desee realizar para saber los par\u00e1metros soportados por el formato en cuesti\u00f3n. successCb Funci\u00f3n callback JavaScript que se ejecutar\u00e1 una vez se obtenga el resultado de la operaci\u00f3n de firma. Esta funci\u00f3n recibir\u00e1 hasta tres par\u00e1metros: En el primer par\u00e1mero se recibe la firma resultante codificada en Base64. En el segundo par\u00e1metro se recibe el certificado usado para firmar codificado en Base64. En el tercer par\u00e1metro, opcionalmente, se recibir\u00e1 un objeto JSON con el nombre del fichero firmado (en caso de que lo haya seleccionado el usuario). errorCb Funci\u00f3n callback JavaScript que se ejecutar\u00e1 cuando ocurra un error durante la operaci\u00f3n de firma. Esta funci\u00f3n recibir\u00e1 hasta dos par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. A continuaci\u00f3n, se muestran distintos ejemplos de firma electr\u00f3nica: Firma electr\u00f3nica de datos: \u2026 var dataB64 = \"SG9sYSBNdW5kbyE=\"; // Datos a firmar AutoScript.sign (dataB64, \"SHA512withRSA\", \"CAdES\", \"mode=implicit\\nexpPolicy=FirmaAGE\", successCallback, errorCallback); \u2026 Firma electr\u00f3nica de un texto: \u2026 var dataB64 = AutoScript.getBase64FromText(\"Hola Mundo!!\"); AutoScript.sign (dataB64, \"SHA512withRSA\", \"XAdES\", null , successCallback, errorCallback); \u2026 Firma electr\u00f3nica cargando datos desde un fichero: \u2026 // Funci\u00f3n que se ejecutar\u00e1 cuando la firma termine correctamente. // Almacenara la firma, el certificado y el nombre del fichero firmado en // campos de un formulario y lo enviar\u00e1 a servidor function sendSignatureCallback (signatureB64, certificateB64, extraData) { // Obtenemos el nombre del fichero cargado para var filename = !!extraData ? extraData.filename : null ; document.getElementByName(\"signatureField\").value = signatureB64; document.getElementByName(\"certificateField\").value = certificadteB64; if (filename) { document.getElementByName(\"filenameField\").value = filename; } document.getElementByName(\"formulario\").submit(); } // Funcion que se ejecutara cuando el proceso de firma falle function showErrorCallback (type, message) { showError(message); // Funcion de la aplicaci\u00f3n para mostrar errores } \u2026 // Llamamos a la operacion de firma AutoScript.sign ( null , \"SHA512withRSA\", \"CAdES\", null , sendSignatureCallback, showErrorCallback); \u2026 Es importante recalcar que la aplicaci\u00f3n que solicita la firma no sabr\u00e1 del resultado de la operaci\u00f3n hasta que el JavaScript de despliegue invoque a la funci\u00f3n callback de \u00e9xito o de error. Es probable que no se desee que el usuario interaccione de ninguna manera con la aplicaci\u00f3n hasta haber finalizado la firma, por lo que se recomienda que se le muestre un mensaje de espera justo antes de llamar a la operaci\u00f3n de firma (pudiendo incluso bloquear la posibilidad de interaccionar con la interfaz de la aplicaci\u00f3n). Este mensaje no deber\u00eda retirarse hasta recibir una respuesta de la aplicaci\u00f3n, por lo que se eliminar\u00eda en las funciones callback de \u00e9xito y de error. A partir de entonces, el usuario podr\u00eda navegar de nuevo libremente. La espera de la aplicaci\u00f3n a la respuesta del cliente de firma deber\u00eda aplicarse a cualquier operaci\u00f3n de firma, cofirma, contrafirma o firma de lote y es especialmente importante cuando se fueza el modo de comunicaci\u00f3n entre la aplicaci\u00f3n y el cliente sea a trav\u00e9s de servidor intermedio o cuando se desea que nuestra aplicaci\u00f3n sea compatible con los Clientes m\u00f3viles.","title":"Firma electr\u00f3nica"},{"location":"markdown_strict/MCF_manual-integrador_ES/#firma-de-multiples-documentos-firma-masiva","text":"Cuando se deseen firmar multiples datos a trav\u00e9s del Cliente @firma debe tenerse en cuenta un aspecto importante: el env\u00edo de datos a firmar debe realizarse siempre secuencialmente, nunca en paralelo. Es decir, no enviaremos a firmar un dato hasta no haber recibido el resultado de una operaci\u00f3n anterior. El modo com\u00fan y recomendado de realizar la firma secuencial de m\u00faltiples documentos es solicitar la firma de un documento en la funci\u00f3n callback en la que se recibe el resultado de la operaci\u00f3n anterior. Un ejemplo de uso es: // Posicion del elemento que se esta procesando var idx = 0; // Array con los valores a firmar var dataArray = [ \"UHJpbWVyIGRhdG8gZGUgcHJ1ZWJh\", \"U2VndW5kbyBkYXRvIGRlIHBydWViYQ==\", \"VGVyY2VyIGRhdG8gZGUgcHJ1ZWJh\", \"Q3VhcnRvIGRhdG8gZGUgcHJ1ZWJh\" ]; // Iniciamos la firma del primer dato a firmar AutoScript.setStickySignatory( true ); AutoScript.sign( dataArray[idx], \"SHA512withRSA\", \"CAdES\", paramsParam, successCallback, showErrorCallback); \u2026 // Funci\u00f3n callback a ejecutar cuando termine correctamente una firma function successCallback (signatureB64) { // Procesamos la firma \u2026 // Mandamos a firmar el siguiente dato (si quedase alguno) ++idx; if (idx < dataArray.length) { AutoScript.sign( dataArray[idx], \"SHA512withRSA\", \"CAdES\", paramsParam, successCallback, showErrorCallback); } else { // Ya se han generado todas las firmas \u2026 } } // Funci\u00f3n callback a ejecutar cuando falle la firma function showErrorCallback (errorType, errorMsg) { // Mostramos el error alert(\u201cError durante la firma de un documento. Se interrumpir\u00e1 el proceso de firma.\u201d); } Para posibilitar que el usuario s\u00f3lo deba seleccionar el certificado de firma en una ocasi\u00f3n y no para operaci\u00f3n individual, se deber\u00e1 dejar prefijado este certificado mediante el m\u00e9todo: setStickySignatory (sticky); En esta funci\u00f3n: sticky Indica si se debe fijar el siguiente certificado que se utilice. Si se indica el valor \u201ctrue\u201d, el pr\u00f3ximo certificado que seleccione mediante un filtro o que seleccione directamente el usuario (en una operaci\u00f3n de firma o selecci\u00f3n de certificado) quedar\u00e1 fijado y se utilizar\u00e1 para todas las operaciones posteriores. Si se indica el valor false, se libera el certificado y se volver\u00e1 a solicitar al usuario en cada una de las siguientes operaciones. Esta funci\u00f3n no devuelve nada y s\u00f3lo es compatible con AutoFirma. En una operaci\u00f3n de firma con los clientes m\u00f3viles, el usuario deber\u00e1 seleccionar el certificado por cada operaci\u00f3n de firma individual. Al realizar m\u00faltiples firmas con tarjetas inteligentes, es posible que se pida el PIN de la tarjeta por cada operaci\u00f3n individual, seg\u00fan sea el comportamiento definido por el controlador de la propia tarjeta. En caso de usarse una tarjeta CERES o el DNIe, el controlador ser\u00e1 JMulticard y este mostrar\u00e1 en el di\u00e1logo de selecci\u00f3n de PIN una casilla que podr\u00e1 seleccionarse para que la aplicaci\u00f3n recuerde el PIN y no lo vuelva a solicitar si se ha llamado a la funci\u00f3n \u201csetStickySignatory()\u201d con el valor \u201ctrue\u201d. Adicionalmente, para la generaci\u00f3n de multifirmas dentro de un procedimiento masivo es interesante indicar el valor \u201cAUTO\u201d como formato de firma. Al hacerlo, las cofirmas y contrafirmas se realizar\u00e1n en el mismo formato que la firma sobre la que se opera. El valor \u201cAUTO\u201d no es v\u00e1lido para firmas simples. Puede saber m\u00e1s sobre esta opci\u00f3n en el apartado 8 Formatos de firma . Otra alternativa para firmar m\u00faltiples documentos es la operaci\u00f3n de 6.5 Firma de lotes predefinidos .","title":"Firma de m\u00faltiples documentos (firma masiva)"},{"location":"markdown_strict/MCF_manual-integrador_ES/#firma-trifasica","text":"Una operaci\u00f3n de firma requiere preparar la estructura de la firma conforme el formato de firma seleccionado, cifrar con la clave privada del certificado del usuario parte de esa estructura e introducir esos datos cifrados dentro de la misma estructura. Habitualmente, estos tres pasos se ejecutan de forma conjunta en el cliente y por eso decimos que la firma se ha ejecutado en una \u00fanica fase (monof\u00e1sica). Una alternativa a lo anterior ser\u00eda separar estos tres pasos y delegar en un servidor aquello que no requiera datos del usuario. As\u00ed, preparar la estructura e introducir los datos cifrados en ella (fases 1 y 3) se puede realizar en servidor, mientras que el cifrado de los datos con la clave privada del certificado del usuario se realizar\u00eda en local (la clave del certificado nunca sale del equipo del usuario). Este mecanismo en tres pasos es lo que se denomina firma trif\u00e1sica. Las firmas realizadas por AutoFirma se realizan, por defecto, de forma monof\u00e1sica. Sin embargo, el AutoFirma tambi\u00e9n permite realizar las firmas de forma trif\u00e1sica y los clientes m\u00f3viles las realizar\u00e1n casi en todos los casos de este modo. Las operaciones de firma trif\u00e1sicas ayudan a reducir el env\u00edo de informaci\u00f3n entre el Cliente y el servidor cuando los datos a firmar se encuentran en servidor y/o cuando la firma generada por el usuario va a enviarse a ese servidor. Sin embargo, ya que parte de la operaci\u00f3n trif\u00e1sica se realiza en servidor, puede suponer un problema si se recibe un volumen de peticiones mayor al que puede procesar, ya que aumentan sus necesidades de memor\u00eda y procesador. La realizaci\u00f3n de firmas trif\u00e1sicas requiere el despliegue del servicio de firma trif\u00e1sica descrito en el apartado 5.3.2 Servicios de firma trif\u00e1sica y firma de lotes . As\u00ed mismo, se deber\u00e1n cumplir las siguientes condiciones en la operaci\u00f3n de firma: Se podr\u00e1 proporcionar una referencia a los datos a firmar en lugar de los propios datos. El tipo de referencia variar\u00e1 seg\u00fan la clase gestora de documentos configurada en el servicio de firma trif\u00e1sica. Con la clase gestora por defecto se seguir\u00e1n requiriendo los propios datos. Se usar\u00e1 el nombre del formato de firma trif\u00e1sica en lugar del nombre de formato tradicional: Para firmas CAdES: CAdEStri Para firmas XAdES: XAdEStri Para firmas PAdES: PAdEStri Para firmas de factura electr\u00f3nica: FacturaEtri NOTA: En los clientes m\u00f3viles se realizar\u00e1 firma trif\u00e1sica indepedencientemente de que se use el nombre monof\u00e1sico del formato cuando la aplicaci\u00f3n cliente no soporte su generaci\u00f3n monof\u00e1sica. Se configurar\u00e1 el par\u00e1metro adicional \u201cserverUrl\u201d con la URL del servicio de firma trif\u00e1sica. Para saber m\u00e1s de los par\u00e1metros adicionales de configuraci\u00f3n consulte el apartado 7.1 Paso de par\u00e1metros adicionales . Un ejemplo de operaci\u00f3n de firma trif\u00e1sica ser\u00eda: \u2026 // Configuramos una firma CAdES trif\u00e1sica implicita var params = \"mode=implicit\\nserverUrl=https://servidor.com/afirma/afirma-server-triphase-signer/SignatureService\"; AutoScript.sign (dataRefB64, \"SHA512withRSA\", \"CAdEStri\", params, showSignResultCallback, showErrorCallback); \u2026 El proceso trif\u00e1sico de firma se encuentra disponible para las operaciones de firma, cofirma y contrafirma. Consulte m\u00e1s informaci\u00f3n sobre la operativa interna del proceso de firma trif\u00e1sica en el apartado ANEXO II Firma trif\u00e1sica .","title":"Firma trif\u00e1sica"},{"location":"markdown_strict/MCF_manual-integrador_ES/#cofirma-electronica","text":"La cofirma es la operaci\u00f3n mediante la cual se agrega una nueva firma a una firma previa. La firma generada est\u00e1 al mismo nivel que la firma original. Esta ser\u00eda la operaci\u00f3n mediante la cual dos o m\u00e1s firmantes muestran su acuerdo con un documento. La cofirma consiste en agregar la informaci\u00f3n de firma de un firmante a una firma ya existente. As\u00ed, ser\u00e1 necesario que una persona firme el documento generando as\u00ed la informaci\u00f3n de firma. El segundo firmante deber\u00e1 cofirmar la firma generada por el primer firmante, el tercero cofirmar\u00e1 la firma generada por el segundo y as\u00ed sucesivamente. Esta operaci\u00f3n se puede realizar por entero en el lado cliente o a trav\u00e9s del proceso de firma trif\u00e1sica descrito en el ANEXO II Firma trif\u00e1sica . La funci\u00f3n JavaScript mediante la cual se realizan las cofirmas es: cosign(signB64, algorithm, format, params, successCb, errorCb); En esta funci\u00f3n: signB64 Firma electr\u00f3nica que se desea cofirmar codificada en Base64. Una firma en Base64 puede ser el resultado obtenido por cualquier operaci\u00f3n de firma, cofirma o contrafirma previa. Si no se proporciona este par\u00e1metro (se usa null) o si se pasa una cadena vac\u00eda, el Cliente @firma mostrar\u00e1 al usuario un di\u00e1logo de selecci\u00f3n de fichero para que seleccione el fichero de firma que desea cofirmar. Salvo en casos concretos, no se recomienda dejar en manos del usuario la selecci\u00f3n del fichero de firma. Incluso si es necesario hacerlo, se recomienda hacer que el usuario cargue la firma previamente en servidor mediante un componente HTML y seguidamente se realice una operaci\u00f3n de cofirma trif\u00e1sica. Para la compatibilidad con dispositivos m\u00f3viles, nunca se deben proporcionar nulos o cadena vac\u00eda. algorithm Algoritmo de firma. Consulte el apartado dedicado a los algorirmos de firma soportados para el formato de firma que desee utilizar. format Formato de firma. Consulte el apartado 8 Formatos de firma para consultar aquellos disponibles. Si no conoce el formato de firma utilizado en la firma original, indique el valor \u201cAUTO\u201d para especificar que se utilice el mismo formato que la firma original. Por norma general, no se puede cofirmar una firma en un formato distinto al que se us\u00f3 para generar dicha firma. params Par\u00e1metros adicionales para la configuraci\u00f3n de la operaci\u00f3n de cofirma y caracter\u00edsticas particulares del formato de firma seleccionado. Si se introduce un nulo, se usar\u00e1 la configuraci\u00f3n por defecto para el formato de firma establecido. Consulte el apartado 7.1 Paso de par\u00e1metros adicionales para saber c\u00f3mo realizar el paso de par\u00e1metros y el apartado de informaci\u00f3n espec\u00edfica del formato de firma que desee realizar para saber los par\u00e1metros soportados por el formato en cuesti\u00f3n. successCb Funci\u00f3n callback JavaScript que se ejecutar\u00e1 una vez se obtenga el resultado de la operaci\u00f3n de cofirma. Esta funci\u00f3n recibir\u00e1 hasta tres par\u00e1metros: En el primer par\u00e1mero se recibe la firma resultante codificada en Base64. En el segundo par\u00e1metro se recibe el certificado usado para cofirmar codificado en Base64. En el tercer par\u00e1metro, opcionalmente, se recibir\u00e1 un objeto JSON con el nombre del fichero de firma cofirmado en caso de que lo haya seleccionado el usuario. errorCb Funci\u00f3n callback JavaScript que se ejecutar\u00e1 cuando ocurra un error durante la operaci\u00f3n de firma. Esta funci\u00f3n recibir\u00e1 hasta dos par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. A continuaci\u00f3n, se muestran distintos ejemplos de operaciones de cofirma: Cofirma electr\u00f3nica de una firma ya cargada: \u2026 var signatureB64 = \u2026 // Firma electr\u00f3nica a cofirmar AutoScript.cosign(signatureB64, \u201cSHA512withRSA\u201d, \u201cAUTO\u201d, null , successCallback, errorCallback); \u2026 Cofirma electr\u00f3nica cargando una firma desde un fichero: \u2026 AutoScript.cosign( null , \u201cSHA512withRSA\u201d, \u201cXAdES\u201d, null , successCallback, errorCallback); \u2026 Cofirma electr\u00f3nica del resultado de una firma: \u2026 // Funcion que realiza la cofirma a partir de los datos de firma function cosignCallback (signatureB64) { AutoScript.cosign( signatureB64, \u201cSHA512withRSA\u201d, \u201cXAdES\u201d, null , sendDataCallback, showErrorCallback ); } \u2026 // Funci\u00f3n que almacena los datos generados por la cofirma en el campo // \u201cresultId\u201d de un formulario y lo envia function sendDataCallback (cosignB64, certificateB64) { document.getElementById(\u201cresultId\u201d).value = cosignB64; document.getElementById(\u201cfirmante\u201d).value = certificateB64; document.getElementById(\u201cformulario\u201d).submmit(); } \u2026 // Funci\u00f3n para firmar datos. Si termina correctamente la operaci\u00f3n de firma // se llama a la funci\u00f3n \u201ccosignFunction\u201d con el resultado de la operaci\u00f3n y, // si \u00e9sta tambi\u00e9n termina correctamente, se llama a la funci\u00f3n // \u201csaveDataFunction\u201d con el resultado de la cofirma. Si falla alguna de // estas funciones se llama al m\u00e9todo \u201cshowError\u201d function firmar(dataB64) { AutoScript.sign(dataB64, \u201cSHA512withRSA\u201d, \u201cXAdES\u201d, \u201cformat=XAdES Detached\u201d, cosignCallback, showErrorCallback); } \u2026","title":"Cofirma electr\u00f3nica"},{"location":"markdown_strict/MCF_manual-integrador_ES/#contrafirma-electronica","text":"La contrafirma es la operaci\u00f3n mediante la cual se refrenda una firma electr\u00f3nica previa. En t\u00e9rminos generales, es el firmar una firma electr\u00f3nica. Este es el tipo de operaci\u00f3n que realizar\u00eda un organismo, por ejemplo, como prueba de registro de una firma electr\u00f3nica en su sistema. La contrafirma no es una operaci\u00f3n que soporten todos los formatos de firma. Consulte el apartado dedicado a los algorirmos de firma soportados para el formato de firma que desee utilizar. La contrafirma se puede realizar por entero en el lado cliente o a trav\u00e9s del proceso de firma trif\u00e1sica descrito en el ANEXO II Firma trif\u00e1sica . La funci\u00f3n JavaScript mediante la cual se realizan las contrafirmas es: countersign(signB64, algorithm, format, params, successCb, errorCb); En esta funci\u00f3n: signB64 Firma electr\u00f3nica que se desea contrafirmar codificada en Base64. Una firma en Base64 puede ser el resultado obtenido por cualquier operaci\u00f3n de firma, cofirma o contrafirma previa. Si no se proporciona este par\u00e1metro (se usa null) o si se pasa una cadena vac\u00eda, el Cliente @firma mostrar\u00e1 al usuario un di\u00e1logo de selecci\u00f3n de fichero para que seleccione el fichero de firma que desea contrafirmar. Salvo en casos concretos, no se recomienda dejar en manos del usuario la selecci\u00f3n del fichero de firma. Incluso si es necesario hacerlo, se recomienda hacer que el usuario cargue la firma previamente en servidor mediante un componente HTML y seguidamente se realice una operaci\u00f3n de cofirma trif\u00e1sica. Para la compatibilidad con dispositivos m\u00f3viles, nunca se deben proporcionar nulos o cadena vac\u00eda. algorithm Algoritmo de firma. Consulte el apartado dedicado a los algorirmos de firma soportados para el formato de firma que desee utilizar. format Formato de firma. Consulte el apartado 8 Formatos de firma para consultar aquellos disponibles. Si no conoce el formato de firma utilizado en la firma original, indique el valor \u201cAUTO\u201d para especificar que se utilice el mismo formato que la firma original. Por norma general, no se puede contrafirmar una firma en un formato distinto al que se us\u00f3 para generar dicha firma. params Par\u00e1metros adicionales para la configuraci\u00f3n de la operaci\u00f3n de contrafirma y caracter\u00edsticas particulares del formato de firma seleccionado. Si se introduce un nulo, se usar\u00e1 la configuraci\u00f3n por defecto para el formato de firma establecido. La operaci\u00f3n de contrafirma admite un par\u00e1metro adicional concreto para configurar qu\u00e9 firmas dentro del fichero de firma se quieren contrafirmar. Consulte el apartado 6.4.1 Selecci\u00f3n de nodos para m\u00e1s detalle. Consulte el apartado 7.1 Paso de par\u00e1metros adicionales para saber c\u00f3mo realizar el paso de par\u00e1metros y el apartado de informaci\u00f3n espec\u00edfica del formato de firma que desee realizar para saber los par\u00e1metros soportados por el formato en cuesti\u00f3n. successCb Funci\u00f3n callback JavaScript que se ejecutar\u00e1 una vez se obtenga el resultado de la operaci\u00f3n de cofirma. Esta funci\u00f3n recibir\u00e1 hasta tres par\u00e1metros: En el primer par\u00e1mero se recibe la firma resultante codificada en Base64. En el segundo par\u00e1metro se recibe el certificado usado para cofirmar codificado en Base64. En el tercer par\u00e1metro, opcionalmente, se recibir\u00e1 un objeto JSON con el nombre del fichero de firma cofirmado en caso de que lo haya seleccionado el usuario. errorCb Funci\u00f3n callback JavaScript que se ejecutar\u00e1 cuando ocurra un error durante la operaci\u00f3n de firma. Esta funci\u00f3n recibir\u00e1 hasta dos par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. A continuaci\u00f3n, se muestran distintos ejemplos de contrafirma: Contrafirma electr\u00f3nica de una firma \u2026 var signatureB64 = \u2026 // Firma electr\u00f3nica a cofirmar AutoScript.countersign(signatureB64, \u201cSHA512withRSA\u201d, \u201cAUTO\u201d, \u201ctarget=true\u201d, successCallback, errorCallback); \u2026 Contrafirma electr\u00f3nica del resultado de una firma \u2026 // Funcion callback que desencadena la operaci\u00f3n de contrafirma function counterSignCallback (signatureB64) { AutoScript.countersign( signatureB64, \u201cSHA512withRSA\u201d, \u201cXAdES\u201d, null , successCallback, errorCallback ); } \u2026 // Iniciamos la operacion de firma que despu\u00e9s se contrafirmar\u00e1 AutoScript.sign( dataB64, \u201cSHA512withRSA\u201d, \u201cXAdES\u201d, null , counterSignCallback, errorCallback); \u2026","title":"Contrafirma electr\u00f3nica"},{"location":"markdown_strict/MCF_manual-integrador_ES/#seleccion-de-nodos","text":"La operaci\u00f3n de contrafirma se realiza sobre una firma. Esta puede ser una firma simple, una cofirma u otra contrafirma. Estas operaciones de firma, cofirma y contrafirma van agregando firmas a un documento y, ya que las contrafirmas se realizan sobre firmas previas, se forma lo que se ha dado en llamar \u201c\u00e1rbol de firmas\u201d. As\u00ed, por ejemplo, despu\u00e9s de realizar varias cofirmas y contrafirmas sobre una firma se podr\u00eda obtener una estructura como la siguiente: < En esta estructura se refleja que se han firmado los datos dos veces (firma y cofirma) y que una de esas firmas tiene una contrafirma. Debe tenerse en cuenta que las firmas y las cofirmas son equivalentes (ambas firman los datos) y por tanto ambas se pueden considerar cofirmas entre s\u00ed. En relaci\u00f3n a esto, el Cliente @firma permite configurar que las contrafirmas se realicen seg\u00fan una de las siguientes pol\u00edticas de firma: Firma de nodos hoja del \u00e1rbol (LEAFS): Se firmar\u00e1n s\u00f3lo las firmas del \u00e1rbol que no tienen ninguna contrafirma. Firma de todo el \u00e1rbol de firma (TREE): Se firman todas las firmas del \u00e1rbol. La configuraci\u00f3n de qu\u00e9 nodos se desean firmar se realiza a trav\u00e9s del par\u00e1metro params de la funci\u00f3n de contrafirma, al que, adem\u00e1s de toda la configuraci\u00f3n espec\u00edfica del formato de firma, se le puede agregar la propiedad target con la pol\u00edtica de selecci\u00f3n de nodos. Los valores que admite esta propiedad son: leafs Contrafirma todas las firmas que sean nodos hoja del \u00e1rbol. Este es el valor por defecto. tree Contrafirma todas las firmas del \u00e1rbol. Por ejemplo, si tomamos como base la estructura de firma anterior, as\u00ed quedar\u00eda al contrafirmarla con cada uno de los par\u00e1metros adminitidos: target=leafs < target=tree <","title":"Selecci\u00f3n de nodos"},{"location":"markdown_strict/MCF_manual-integrador_ES/#firma-de-lotes-predefinidos","text":"AutoFirma incorpora una funcionalidad de firma de lotes de documentos, lo que permite a las aplicaciones enviar a firmar un grupo de datos en una \u00fanica llamada. Esta operaci\u00f3n permite que se pueda ordenar la firma de todos los documentos en una sola llamada al cliente de firma y que el usuario pueda seleccionar el certificado de firma una \u00fanica vez. Las firmas de un lote de firma se realizan de forma trif\u00e1sica, lo cual se traduce en que buena parte del proceso de firma se realiza en servidor y es necesario utilizar los servicios del WAR \u201cafirma-server-triphase-signer.war\u201d. Consulte el apartado 5.3.2 Servicios de firma trif\u00e1sica y firma de lotes para saber m\u00e1s sobre el despliegue y configuraci\u00f3n de este servicio. Al igual que ocurre con las firmas trif\u00e1sicas, el sistema de firma de lotes permite que tanto el origen de los datos como el destino de la firma est\u00e9n en servidor. Este origen y destino se determina por medio de un gestor de documentos configurado en el servicio de firma trif\u00e1sica. En los lotes de firma no tienen porqu\u00e9 agregarse el contenido de los documentos a firmar, se puede (y se deber\u00eda) agregar la referencia a esos documentos y que sea el servidor el encargado de acceder a ellos para firmarlos y despu\u00e9s guardar la firma. Esto lo hace el servicio de firma trif\u00e1sica a trav\u00e9s de la clase a la que llamamos \u201cgestor de documentos\u201d. Estos gestores de documentos son los mismos utilizados para las operaciones de firma trif\u00e1sica. El servicio de firma trif\u00e1sica incluye varios gestores de documentos gen\u00e9ricos y permite que se le agreguen otros desarrollados expresamente para cualquier entorno (la opci\u00f3n recomendada). Consulte el ANEXO II Firma trif\u00e1sica para saber m\u00e1s sobre los gestores de documentos disponibles y c\u00f3mo desarrollar el suyo propio. Es importante entender que la aplicaci\u00f3n que solicita la firma de un lote recibe como resultado el listado de resultados de las firmas generadas, es decir, si terminaron bien o mal, pero no las propias firmas. Las firmas se deben procesar o almacenar en servidor y esto se har\u00e1 mediante el gestor de documentos configurado. Tenga en cuenta que el valor de retorno del gestor de documentos despu\u00e9s de procesar la firma no se utiliza en la firma de lotes, por lo que el gestor de documentos configurado por defecto (SelfishDocumentManager) no devuelve las firmas (ni hace nada con ellas, as\u00ed que este nunca se debe usar con la firma de lotes) y el gestor de muestra que guarda en disco (FileSystemDocumentManager) no proporciona el nombre del fichero de salida. Es necesario configurar un gestor acorde a nuestra l\u00f3gica de negocio, preferiblemente creado para tal fin tal como se describe en el apartado II.1.2 Gestores de documentos personalizados . Generar una firma de lote con el Cliente @firma requiere de tres pasos: Crear un lote de firma con la configuraci\u00f3n de firma que deber\u00e1 aplicarse sobre cada uno de los documentos a firmar. Agregar los documentos (referencias a los datos) al lote. Si un documento del lote tuviese que firmarse con una configuraci\u00f3n distinto a la del resto, se podr\u00eda proporcionar una configuraci\u00f3n espec\u00edfica para \u00e9l. Enviar a firmar el lote. Esto conlleva la llamada al Cliente de firma y definir los m\u00e9todos callback que se deber\u00e1n ejecutar en caso de que se complete la firma del lote o si se produce un error bloqueante durante su procesado.","title":"Firma de lotes predefinidos"},{"location":"markdown_strict/MCF_manual-integrador_ES/#creacion-del-lote","text":"Para la creaci\u00f3n del lote de firma se llamar\u00e1 al m\u00e9todo JavaScript: createBatch (algorithm, format, suboperation, extraparams) Este m\u00e9todo creaa el lote y establece la configuraci\u00f3n de firma que se aplicar\u00e1 por defecto a cada uno de los documentos que se agregue al mismo. Al agregar documentos al lote se podr\u00e1 establecer una configuraci\u00f3n espec\u00edfica para su firma, salvo para el algoritmo de firma. El algoritmo indicado en el m\u00e9todo de creaci\u00f3n del lote ser\u00e1 el utilizado para firmar todos los documentos del lote. Los par\u00e1metros utilizados en este m\u00e9todo son los siguientes: algorithm Indica el algoritmo de firma a usar para todo el lote. Los valores permitidos son: SHA256withRSA SHA384withRSA SHA512withRSA SHA1withRSA ( No se recomienda su uso por obsoleto ) format Indicar el formato de firma que se usar\u00e1 por defecto para los documentos del lote. Los valores permitidos son: CAdES XAdES PAdES FacturaE NONE A pesar del nombre del formato, todas las firmas se realizar\u00e1n de forma trif\u00e1sica. suboperation Indica la operaci\u00f3n de firma a realizar por defecto. Los valores permitidos son: sign Firma. cosign Cofirma. countersign Contrafirma. extraparams Cadena con el listado de propiedades que configurar\u00e1n las firmas por defecto. Se compondr\u00e1 de una serie de tuplas \u201cCLAVE=VALOR\u201d separadas por \u201c\\n\u201d, en donde la CLAVE ser\u00e1 la propiedad a configurar y VALOR el valor asignado. Por ejemplo: \u201cmode=implicit\\nsignerClaimedRoles=Adjudicatario|Responsable\\nsignatureProductionCity=Madrid\u201d Las propiedades admitidas por cada uno de los formatos de firma se indican en los siguientes apartados: 8.1.3 Par\u00e1metros adicionales para las firmas CAdES. 8.2.7 Par\u00e1metros adicionales para las firmas XAdES. 8.3.8 Par\u00e1metros adicionales para las firmas PAdES. 8.4.3 Par\u00e1metros adicionales para las firmas FacturaE.","title":"Creaci\u00f3n del lote"},{"location":"markdown_strict/MCF_manual-integrador_ES/#agregar-documentos-al-lote","text":"Para agregar documentos al lote se utilizar\u00e1 el m\u00e9todo: addDocumentToBatch (id, datareference, format, suboperation, extraparams) Este m\u00e9todo agrega al lote un documento a firmar, pudiendo definir una configuraci\u00f3n espec\u00edfica para firmar con \u00e9l u omitir esta configuraci\u00f3n para utilizar la configuraci\u00f3n por defecto establecida durante la creaci\u00f3n del lote. El algoritmo de firma siempre ser\u00e1 el establecido durante la creaci\u00f3n del lote. Los par\u00e1metros utilizados en este m\u00e9todo son los siguientes: id Identificador con el que referenciar el documento. Cuando se devuelva el resultado de la firma del lote, se podr\u00e1 saber cual ha sido el resultado de la firma de este documento porque vendr\u00e1 referenciado con este mismo identificador. Esta propiedad es obligatoria y no puede ser el mismo para dos documentos del lote. datareference Referencia a los datos a firmar. El tipo de referencia depende del gestor de documentos configurado en el servicio de firma trif\u00e1sica. Por ejemplo: Con el gestor DefaultDocumentManager, la referencia debe ser el propio documento codificado en Base 64. Con el gestor FileSystemDocumentManager, la referencia indicada en este par\u00e1metro ser\u00eda un nombre de fichero y el servicio de firma se encargar\u00eda de cargar ese fichero del directorio configurado en el servidor. Con el gestor LegacyBatchDocumentManager, la referencia podr\u00eda ser el propio documento en Base 64 o una URL. Si fuese el documento en Base 64, el servicio s\u00f3lo tendr\u00eda que decodificarlo, y si fuese una URL, el servicio acceder\u00eda a la misma para descargar los datos. Un desarrollador puede (y deber\u00eda) agregar nuevos gestores de documentos al servicio de firma trif\u00e1sica para optimizar la integraci\u00f3n con sus sistemas. Por ejemplo, si los documentos se guardan en un repositorio de documentos, se podr\u00eda crear un gestor de documentos que recibiese el identificador con el que se referencia al documento en el gestor y obtenerlo del mismo. Consulte el anexo II.1.2 Gestores de documentos personalizados para conocer como crear y configurar su propio gestor de documentos. format Formato de firma a utilizar para este documento particular. Si no se indica ninguno, se usar\u00e1 el que se indic\u00f3 en el m\u00e9todo createBatch. Los formatos permitidos son: CAdES XAdES PAdES FacturaE NONE A pesar del nombre del formato, todas las firmas se realizar\u00e1n de forma trif\u00e1sica. suboperation Indica la operaci\u00f3n de firma a aplicar sobre este documento. Si no se indica ninguna, se usar\u00e1 la que se indic\u00f3 en el m\u00e9todo createBatch. Los valores permitidos son: sign Firma. cosign Cofirma. countersign Contrafirma. extraparams Cadena con el listado de propiedades que configurar\u00e1n esta firma particular. Si no se indica ninguna, se usar\u00e1 la que se indic\u00f3 en el m\u00e9todo createBatch. Se compondr\u00e1 de una serie de tuplas \u201cCLAVE=VALOR\u201d separadas por \u201c\\n\u201d, en donde la CLAVE ser\u00e1 la propiedad a configurar y VALOR el valor asignado. Por ejemplo: \u201cmode=implicit\\nsignerClaimedRoles=Adjudicatario|Responsable\\nsignatureProductionCity=Madrid\u201d. Las propiedades admitidas por cada uno de los formatos de firma se indican en los siguientes apartados: 8.1.3 Par\u00e1metros adicionales para las firmas CAdES. 8.2.7 Par\u00e1metros adicionales para las firmas XAdES. 8.3.8 Par\u00e1metros adicionales para las firmas PAdES. 8.4.3 Par\u00e1metros adicionales para las firmas FacturaE.","title":"Agregar documentos al lote"},{"location":"markdown_strict/MCF_manual-integrador_ES/#firma-del-lote","text":"Para iniciar el proceso de firma del lote se usar\u00e1 el m\u00e9todo: signBatchProcess (stopOnError, batchPreSignerUrl, batchPostSignerUrl, certFilters, successCallback, errorCallback) Este m\u00e9todo inicia el proceso de firma del lote y establece una serie de par\u00e1metros necesarios para su funcionamiento. Los par\u00e1metros utilizados en este m\u00e9todo son los siguientes: stopOnError Indica si la firma del lote deber\u00eda detenerse en el momento en el que se encuentre que una firma no es v\u00e1lida. Esto es \u00fatil cuando se d\u00e9 el caso en el que se deseen firmar todos los documentos o ninguno. Cuando se establece a \u201cfalse\u201d se indica que el proceso debe continuar incluso si alguna de las firmas del lote no puede completarse, y cuando se establece a \u201ctrue\u201d el proceso se para en el momento en el que se produce el primer error. Cuando se establece a \u201ctrue\u201d, no se guardar\u00e1 ninguna firma generada hasta que no se hayan generado todas. En caso de error no se guardar\u00e1 ninguna. Si fallase el guardado de una firma, se ejecutar\u00eda el m\u00e9todo rollback() del gestor de documentos sobre cada una de las firmas ya guardadas para deshacer este guardado. batchPreSignerUrl URL del servicio de prefirma de lotes. Este servicio se despliega junto con el servicio de firma trif\u00e1sica y, por defecto, tendr\u00e1 el nombre presign. Por ejemplo: https://servidor.gob.es/aplicacion/afirma-server-triphase-signer/presign batchPostSignerUrl URL del servicio de postfirma de lotes. Este servicio se despliega junto con el servicio de firma trif\u00e1sica y, por defecto, tendr\u00e1 el nombre postsign. Por ejemplo: https://servidor.gob.es/aplicacion/afirma-server-triphase-signer/postsign certFilters Permite definir los filtros para determinar qu\u00e9 certificados se pueden utilizar para firmar. Esta propiedad es opcional. Se compondr\u00e1 de una serie de tuplas \u201cCLAVE=VALOR\u201d separadas por \u201c\\n\u201d, en donde la CLAVE ser\u00e1 la propiedad a configurar y VALOR el valor asignado. Por ejemplo: \u201cfilters= subject.contains:Juan;nonexpired:true\\nheadless=true\u201d. Las propiedades admitidas son las propiedades de filtros descritas en el apartado 7.2 Configuraci\u00f3n de los filtros de certificados y la propiedad headless del apartado 7.3 Selecci\u00f3n autom\u00e1tica de certificados . successCallback M\u00e9todo callback JavaScript que se debe ejecutar en caso de que se complete la firma del lote. Si no se configura que se detenga el proceso en caso de error mediante el par\u00e1metro stopOnError, este m\u00e9todo se llamar\u00e1 incluso si falla alguna de las firmas del lote. En ese caso, \u00fanicamente se devolver\u00e1 en el listado de resultados que esa firma produjo un error. Esta funci\u00f3n recibir\u00e1 como par\u00e1metros: Una estructura JSON con el resultado de cada firma del lote. En el caso de que fallase una firma, se indica una descripci\u00f3n del error que se produjo. No se reciben las firmas generadas, el destino de estas es determinado por el gestor de documentos configurado en servidor. El certificado utilizado para firmar codificado en Base64. errorCallback M\u00e9todo callback JavaScript que se debe ejecutar en caso de que no se pueda procesar la firma del lote o si falla alguna de las firmas cuando se indica que debe deternerse el proceso de firma en caso de error. Esta funci\u00f3n recibir\u00e1 dos par\u00e1metros: El tipo de error producido. Un texto descriptivo del error.","title":"Firma del lote"},{"location":"markdown_strict/MCF_manual-integrador_ES/#resultado-de-la-firma-del-lote","text":"Cuando se termina de procesa correctamente un lote de firma, el cliente recibe como respuesta en el m\u00e9todo callback de \u00e9xito una estructura JSON que describe como ha resultado el proceso. Esta estructura JSON es acorde al siguiente esquema: { \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"type\": \"object\", \"properties\": { \"signs\": { \"type\": \"array\", \"items\": [ { \"type\": \"object\", \"properties\": { \"id\": { \"type\": \"string\" }, \"result\": { \"type\": \"string\" }, \"description\": { \"type\": \"string\" } }, \"required\": [ \"id\", \"result\" ] } ] } }, \"required\": [ \"signs\" ] } Un ejemplo de JSON devuelto podr\u00eda ser el siguiente: { \"signs\":[ {\"id\":\"7725374e-728d-4a33-9db9-3a4efea4cead\", \"result\":\"DONE_AND_SAVED\" } , {\"id\":\"93d1531c-cd32-4c8e-8cc8-1f1cfe66f64a\", \"result\":\"DONE_BUT_ERROR_SAVING\", \"description\":\"java.io.IOException: No se pudo guardar el fichero\" } ] } En \u00e9l distinguimos un elemento \u201csigns\u201d con el listado de firmas del lote. Cada uno de estos elementos tiene los siguientes atributos: id Identificador del documento al cual corresponde el resultado. Los identificadores ser\u00e1n los mismos utilizados al agregar los documentos al lote. Debe tenerse en cuenta que los resultados pueden no estar listados en el el mismo orden en el que se agregaron los documentos al lote. Por eso es importante usar este ID para asociar cada documento firmado a su resultado. result Resultado de realizar la firma. Esta propiedad puede adoptar uno de entre los siguientes estados: Estado de \u00e9xito DONE_AND_SAVED La firma se gener\u00f3 y proces\u00f3 correctamente. Estados de error DONE_BUT_ERROR_SAVING Error al guardar la firma. ERROR_PRE Error en la primera fase del proceso de firma trif\u00e1sica. ERROR_POST Error en la tercera fase del proceso de firma trif\u00e1sica. Estados intermedios NOT_STARTED La firma no se ha iniciado. DONE_BUT_NOT_SAVED_YET La firma se ha generado, pero a\u00fan no se ha guardado. DONE_BUT_SAVED_SKIPPED La firma se gener\u00f3 correctamente pero no se guardar\u00e1. SKIPPED No se realizar\u00e1 la firma. SAVE_ROLLBACKED La firma se guard\u00f3, pero se volvi\u00f3 a eliminar. En el caso de que no se indique que el proceso se interrumpa al detectar un error en una firma, todas las firmas aparecer\u00e1n con el estado de \u00e9xito como resultado o con alguno de los resultados de error. En el caso de que s\u00ed se indique que el proceso se interrumpa, cuando se detecte un error las firmas pueden quedar en alguno de los estados intermedios. description Descripci\u00f3n del resultado del proceso (opcional). Se utiliza para ampliar informaci\u00f3n cuando se devuelve un estado de error. Cuando se obtiene el resultado DONE_AND_SAVED en una firma de un lote, se sabe que la firma se ha generado y se ha procesado correctamente seg\u00fan lo establece el gestor de documentos configurado en el servicio de firma trif\u00e1sica.","title":"Resultado de la firma del lote"},{"location":"markdown_strict/MCF_manual-integrador_ES/#ejemplo-de-operacion-de-firma-de-lote","text":"Aqu\u00ed se incluye un ejemplo de c\u00f3digo JavaScript que ejecuta una operaci\u00f3n de firma de lote: // M\u00e9todo callback para procesar el resultado del lote function exitoCallback(result, certB64) { // Mostramos por consola el resultado de cada firma for ( var i = 0; i < result.signs.length; i++) { console.log(\"Id: \" + result.signs[i].id + \". Result: \" + result.signs[i].result + \". Description: \" + result.signs[i].description); } } // M\u00e9todo callback para tratar los errores function errorCallback(errorType, errorMessage) { // Mostramos por consola el error producido console.log(\"Tipo: \" + errorType + \"\\nMensaje: \" + errorMessage); } // M\u00e9todo de firma function firmarLote() { // Creamos lote con el algoritmo de firma y una configuraci\u00f3n de firma // por defecto AutoScript.createBatch(\"SHA512withRSA\", \"CAdES\", \"sign\", \"mode=implicit\"); // Definimos las referencias a los datos. En este caso, usaremos nombres de // ficheros codificados en Base64, ya que en el servicio de firma trif\u00e1sica // tendr\u00edamos configurado el gestor de documentos FileSystemDocumentManager var ref1 = Base64.encode(\"Entrada.txt\"); var ref2 = Base64.encode(\"Firma_cades.csig\"); var ref3 = Base64.encode(\"Entrada.pdf\"); var ref4 = Base64.encode(\"Entrada.jpg\"); // Agregamos los documentos al lote, estableciendo par\u00e1metros de // configuraci\u00f3n particulares para los documentos que queramos AutoScript.addDocumentToBatch(\"1\", ref1); AutoScript.addDocumentToBatch(\"2\", ref2, \"CAdES\", \"cosign\", \"mode=explicit\"); AutoScript.addDocumentToBatch(\"3\", ref3, \"PAdES\"); AutoScript.addDocumentToBatch(\"4\", ref4, \"XAdES\", \"sign\", \"format=XAdES Detached\\nsignatureProductionCountry=Espa\u00f1a\\nsignatureProductionCity=Madrid\"); // Enviamos a firmar el lote var baseUrl = \"https://servidor.gob.es/afirma-server-triphase-signer/\" AutoScript.signBatchProcess( false , baseUrl + \"presign\", baseUrl + \"postsign\", \"filters=nonexpired:true\\nheadless=true\", exitoCallback, errorCallback); }","title":"Ejemplo de operaci\u00f3n de firma de lote"},{"location":"markdown_strict/MCF_manual-integrador_ES/#firma-de-lotes-sin-servidor-monofasica","text":"A pesar de que el funcionamiento normal de la firma de lotes es trif\u00e1sico (los datos y las firmas se procesan en servidor), es posible configurar el despliegue para que AutoFirma haga la firma de los datos en local y devuelva directamente las firmas generadas. Este modo de funcionamiento est\u00e1 orientado a aquellas operaciones que firmen unos pocos datos de peque\u00f1o tama\u00f1o ya residentes en cliente y por tanto no obtengan beneficio en evitar la descarga de los datos del servidor y subida de las firmas. Para activar el modo de firma se deber\u00e1 llamar al siguiente m\u00e9todo de configuraci\u00f3n antes de la llamada al m\u00e9todo de firma del lote: AutoScript.setLocalBatchProcess(true) Al realizarse por completo en local, la firma monof\u00e1sica de lotes NO requiere: Desplegar el servicio de firma trif\u00e1sica y de lotes. Configurar las URL de los servicios en la llamada al m\u00e9todo signBatchProcess. Ha de tenerse en cuenta que esta operaci\u00f3n NO es compatible con los clientes de firma m\u00f3vil. Si desea que su despliegue sea compatible con dispositivos m\u00f3viles, no utilice este modo. Si se hiciese y se ejecutase la operaci\u00f3n desde un m\u00f3vil, se ignorar\u00eda el uso del m\u00e9todo setLocalBatchProcess y se requerir\u00eda despliegue y configuraci\u00f3n del servicio de firma trif\u00e1sica. Una vez activado este modo, hay que tener en cuenta los siguientes aspectos: Los datos indicados en el par\u00e1metro datareference de las llamadas para agregar documentos al lote deber\u00e1n ser los propios datos que se van a firmar. En la llamada al m\u00e9todo de firma del lote, los par\u00e1metros batchPreSignerUrl y batchPostSignerUrl deber\u00e1n ser nulos. El JSON de respuesta de la operaci\u00f3n incluir\u00e1 un atributo \u201csignature\u201d por cada operaci\u00f3n completada correctamente. Este atributo contendr\u00e1 el Base 64 de la firma generada. Los c\u00f3digos de resultado de las operaciones son un subconjunto de los de la operaci\u00f3n de firma de lotes trif\u00e1sica, a pesar de que conceptualmente puedan no sean exactos. De esta forma la \u00fanica diferencia que hay que tener en cuenta en el procesado de la respuesta de una operaci\u00f3n u otra es de d\u00f3nde se obtiene la firma. Los c\u00f3digos de resultado devueltos podr\u00e1n ser: DONE_AND_SAVED La firma se gener\u00f3 correctamente y se devuelve el resultado en el atributo \u201csignature\u201d. ERROR_PRE Error durante la firma. SKIPPED No se realizar\u00e1 la firma o se ignor\u00f3 el resultado por haber encontrado un error en otra firma. Advertencia: La generaci\u00f3n de firma de lotes monof\u00e1sica obliga a que el JavaScript de la p\u00e1gina del tr\u00e1mite cargue en memoria los documentos y las firmas generadas. Esto supone un problema para el navegador, que puede no ser capaz de manejar estos datos debido a limitaciones de memoria. No se recomienda usar este sistema si se trabaja con m\u00faltiples documentos o tama\u00f1os de documentos de m\u00e1s de unos pocos megabytes.","title":"Firma de lotes sin servidor (monof\u00e1sica)"},{"location":"markdown_strict/MCF_manual-integrador_ES/#ejemplo-de-operacion-de-firma-monofasica-de-lote","text":"Aqu\u00ed se incluye un ejemplo de c\u00f3digo JavaScript que ejecuta una operaci\u00f3n de firma monof\u00e1sica de lote: // M\u00e9todo callback para procesar el resultado del lote function exitoCallback(result, certB64) { // Comprobamos que todas las firmas han terminado correctamente var allSignaturesOk = true ; for ( var i = 0; i < result.signs.length && allSignaturesOk; i++) { if (\"DONE_AND_SAVED\" != result.signs[i].result) { allSignaturesOk = false ; } } // Si todas las firmas son correctas, las enviamos a trav\u00e9s de un formulario if (allSignaturesOk) { for ( var i = 0; i < result.signs.length; i++) { addToForm(result.signs[i].id, result.signs[i].signature); } getForm().submit(); } // Si alguna de las firmas fallo, mostramos un error else { alert(\"Ocurri\u00f3 un error al procesar algunas de las firmas\"); } } // M\u00e9todo callback para tratar los errores function errorCallback(errorType, errorMessage) { // Alertamos al usuario del error alert(\"Error durante la firma del lote: \" + errorMessage); } // M\u00e9todo de firma function firmarLote() { // Creamos lote con el algoritmo de firma y una configuraci\u00f3n de firma // por defecto AutoScript.createBatch(\"SHA512withRSA\", \"CAdES\", \"sign\", \"mode=explicit\"); // Activamos el modo de firma de lote monof\u00e1sica AutoScript. setLocalBatchProcess( true ); // Agregamos al lote los datos AutoScript.addDocumentToBatch(\"1\", base64Dato1); AutoScript.addDocumentToBatch(\"2\", base64Dato2, \"CAdES\", \"sign\", \"mode=implicit\"); AutoScript.addDocumentToBatch(\"3\", base64Dato3); AutoScript.addDocumentToBatch(\"4\", base64Dato4); // Enviamos a firmar el lote AutoScript.signBatchProcess( true , null , null , \"filters=nonexpired:true\", exitoCallback, errorCallback); }","title":"Ejemplo de operaci\u00f3n de firma monof\u00e1sica de lote"},{"location":"markdown_strict/MCF_manual-integrador_ES/#resultado-de-la-firma-monofasica-del-lote","text":"El resultado de la firma monof\u00e1sica del lote es igual al de su firma trif\u00e1sica, salvo porque se agrega un elemento signatura con el resultado de la operaci\u00f3n. Esta estructura JSON es acorde al siguiente esquema: { \"$schema\": \"http://json-schema.org/draft-04/schema#\", \"type\": \"object\", \"properties\": { \"signs\": { \"type\": \"array\", \"items\": [ { \"type\": \"object\", \"properties\": { \"id\": { \"type\": \"string\" }, \"result\": { \"type\": \"string\" }, \"signature\": { \"type\": \"string\" }, \"description\": { \"type\": \"string\" } }, \"required\": [ \"id\", \"result\" ] } ] } }, \"required\": [ \"signs\" ] } Un ejemplo de JSON de resultado (con parte de las cadenas base 64 omitidas) podr\u00eda ser el siguiente: { \"signs\":[ {\"id\":\"7725374e-728d-4a33-9db9-3a4efea4cead\", \"result\":\"DONE_AND_SAVED\", \"signature\":\"MII\u2026JAN4saJN=\" } , {\"id\":\"93d1531c-cd32-4c8e-8cc8-1f1cfe66f64a\", \"result\":\" ERROR_PRE\", \"description\":\"java.io.IOException: No se pudo guardar el fichero\" } ] }","title":"Resultado de la firma monof\u00e1sica del lote"},{"location":"markdown_strict/MCF_manual-integrador_ES/#antiguo-mecanismo-de-firma-de-lotes","text":"AutoFirma 1.7 y anteriores no dispon\u00edan del mecanismo de firma de lotes que se ha descrito. En su lugar, dispon\u00edan de un mecanismo que constaba de un \u00fanico m\u00e9todo que recib\u00eda un XML con todos los par\u00e1metros de configuraci\u00f3n del lote. Este mecanismo de firma de lotes sigue existiendo en AutoFirma 1.8 y superiores, pero se considera obsoleto y no se documenta para alentar a que los nuevos despliegues utilicen el mecanismo de firma de lotes aqu\u00ed descrito, m\u00e1s eficiente y sencillo de usar. Si su aplicaci\u00f3n usaba el antiguo mecanismo y no desea migrar, no tiene que hacer ning\u00fan cambio. Su aplicaci\u00f3n seguir\u00e1 funcionando con AutoFirma 1.8 y superiores. Aquellos despliegues que usasen el antiguo mecanismo de firma de lotes y quieran migrar al nuevo, tienen la opci\u00f3n de adaptar tanto el despliegue como la l\u00f3gica en servidor para optimizarla a sus fines. Para quien desee evitar desarrollar de nuevo la l\u00f3gica en servidor o reutilizar uno de los mecanismos que ya exist\u00edan, se ha incluido en el nuevo servicio de firma trif\u00e1sica un gestor de documentos que permitir\u00e1 seguir utilizando los antiguos mecanismos de carga de datos (Base 64 o a trav\u00e9s de URL) y los SignSavers para el guardado de las firmas (ya fuese alguno de los incluidos por defecto para el guardado en fichero o env\u00edo a un servicio, o uno creado a medida). Consulte el apartado II.2.2 Gestor de documentos \u201cLegacyBatchDocumentManager\u201d para m\u00e1s informaci\u00f3n sobre el nuevo gestor de documentos que permite la compatibilidad con los antiguos SignSavers. Advertencia: Las aplicaciones m\u00f3viles de firma Android y iOS son compatibles con el nuevo mecanismo de firma de lotes, mientras que no lo son con el mecanismo antiguo.","title":"Antiguo mecanismo de firma de lotes"},{"location":"markdown_strict/MCF_manual-integrador_ES/#seleccion-de-certificado","text":"El Cliente @firma permite a las aplicaciones solicitar un certificado a los usuarios sin necesidad de realizar una operaci\u00f3n de firma. Esta operaci\u00f3n puede ser \u00fatil para construir filtros de certificados para operaciones posteriores, realizar validaciones previas sobre el certificado y/o mostrar informaci\u00f3n de este en su aplicaci\u00f3n web. Sin embargo, esta operaci\u00f3n nunca debe usarse para autenticar a los usuarios , ya que lo que se obtiene es \u00fanicamente la parte p\u00fablica de los certificados y un mecanismo de autenticaci\u00f3n que usase s\u00f3lo eso podr\u00eda ser f\u00e1cilmente sorteado mediante un ataque simple de inyecci\u00f3n de c\u00f3digo. La funci\u00f3n JavaScript para permitir seleccionar un certificado de usuario es: function selectCertificate(params, successCallback, errorCallback); En esta funci\u00f3n: params Par\u00e1metros de configuraci\u00f3n de la operaci\u00f3n que afecten a la selecci\u00f3n de certificados. Se pueden configurar filtros de certificados, como se indica en el apartado 7.2 Configuraci\u00f3n de los filtros de certificados, y la selecci\u00f3n autom\u00e1tica de certificado, como se describe en el apartado 7.3 Selecci\u00f3n autom\u00e1tica de certificados . successCallback Funci\u00f3n callback JavaScript que se ejecutar\u00e1 cuando se seleccione un certificado. Esta funci\u00f3n recibir\u00e1 los siguientes par\u00e1metros: El certificado seleccionado codificado en Base64. errorCallback Funci\u00f3n callback JavaScript que se ejecutar\u00e1 cuando ocurra un error al seleccionar el certificado. Esta funci\u00f3n recibir\u00e1 hasta dos par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. El m\u00e9todo de selecci\u00f3n de certificado solicitar\u00e1 la contrase\u00f1a de los almacenes utilizados si es necesario para poder listar los certificados que contienen, pero nunca utilizar\u00e1 las claves privadas de los certificados, as\u00ed que en ning\u00fan caso pedir\u00e1 las contrase\u00f1as para ello. Este m\u00e9todo tambi\u00e9n es compatible con la funci\u00f3n setStickySignatory(boolean) (v\u00e9ase el apartado 6.2.1 Firma de m\u00faltiples documentos (firma masiva) ) con la cual es posible fijar el certificado seleccionado por el usuario. De esta forma se utilizar\u00e1 el mismo certificado durante las siguientes operaciones de firma o selecci\u00f3n, siempre y cuando no se utilice la misma instancia de AutoFirma. A continuaci\u00f3n, se muestran distintos ejemplos de la operaci\u00f3n de selecci\u00f3n de certificado: Selecci\u00f3n de certificado y env\u00edo a servidor para su an\u00e1lisis: \u2026 var mostrarError = function (errorType, errorMessage) { alert(\u201cError en la descarga de los datos: \u201d + errorMessage); } var enviarCertificado = function (certB64) { document.getElementById(\u201ccert\u201d).value = certB64; document.getElementById(\u201cformulario\u201d).submit(); } var extraParams = \u201cfilters.0=issuer.contains:FNMT\\n\u201d + \u201cfilters.1=issuer.contains:Policia\u201d; AutoScript.selectCertificate (extraParams, enviarCertificado, mostrarError); \u2026","title":"Selecci\u00f3n de certificado"},{"location":"markdown_strict/MCF_manual-integrador_ES/#recuperacion-de-log","text":"AutoFirma permite obtener las trazas de su propia ejecuci\u00f3n para despu\u00e9s para ayudar a las aplicaciones a identificar los problemas que sufran sus usuarios. Para poder obtener sus trazas de ejecuci\u00f3n es necesario que se haya establecido la comunicaci\u00f3n entre AutoFirma y el navegador web, por lo que este mecanismo no ayuda a identificar errores en el propio proceso de comunicaci\u00f3n. Este m\u00e9todo deber\u00eda utilizarse s\u00f3lo de modo excepcional para identificar errores que se den AutoFirma al ejecutarse en el equipo del usuario y que sean susceptibles de ser atendidos por el equipo de soporte de su aplicaci\u00f3n o por el propio equipo de soporte de AutoFirma. Advertencia : La operaci\u00f3n recuperaci\u00f3n de logs no es compatible con los clientes de firma de Android e iOS, ni con AutoFirma cuando se comunica con el navegador a trav\u00e9s de los servicios auxiliares. La funci\u00f3n JavaScript para recuperar las trazas de ejecuci\u00f3n es: getCurrentLog (successCallback, errorCallback); En esta funci\u00f3n: successCallback Nombre de la funci\u00f3n callback que se invocar\u00e1 en caso de recuperar correctamente la traza de ejecuci\u00f3n. Esta funci\u00f3n recibir\u00e1 los siguientes par\u00e1metros: Texto plano la traza de ejecuci\u00f3n. errorCallback Nombre de la funci\u00f3n callback que se invocar\u00e1 en caso de finalizar con errores la carga de la traza de ejecuci\u00f3n. Esta funci\u00f3n recibir\u00e1 como par\u00e1metros: El tipo de error que se produjo. El mensaje de error asociado. A continuaci\u00f3n, se un ejemplo de la operaci\u00f3n recuperaci\u00f3n de la traza de error: Envio de la traza de error tras un error en la firma \u2026 // Funci\u00f3n que se ejecutar\u00e1 cuando el proceso de firma falle function signErrorCallback (errorType, errorMessage) { // Llamamos a la funci\u00f3n de la aplicaci\u00f3n para mostrar errores showError(errorMessage); // Recuperamos y enviamos las trazas si no es un error de cancelaci\u00f3n if (errorType == \"es.gob.afirma.core.AOCancelledOperationException\") { // No hacemos nada si falla la recuperaci\u00f3n de las trazas AutoScript.getCurrentLog(enviarTrazasCallback); } } // Funci\u00f3n callback que se ejecutara cuando se recuperen las trazas de error function enviarTrazasCallback (trace) { document.getElementById(\"trz\").value = AutoScript.getBase64FromText(trace); document.getElementById(\"formulario\").submit(); } \u2026 // Llamamos a la operaci\u00f3n de firma AutoScript.sign( null , \"SHA512withRSA\", \"CAdES\", null , successCallback, signErrorCallback); \u2026","title":"Recuperaci\u00f3n de log"},{"location":"markdown_strict/MCF_manual-integrador_ES/#operaciones-de-gestion-de-ficheros","text":"Advertencia : Las operaciones de gesti\u00f3n de ficheros no son compatibles con los clientes de firma de Android e iOS. En cada uno de los siguientes subapartados se describen casos de uso alternativos para suplir el uso de los m\u00e9todos aqu\u00ed descritos y as\u00ed mantener la compatibilidad con dispositivos m\u00f3viles. AutoFirma permite hacer uso de varias operaciones de carga y guardado de ficheros en disco. Estas operaciones est\u00e1n orientadas a facilitar a las aplicaciones la integraci\u00f3n de las operaciones del cliente, sobre todo cuando se desea firmar un fichero que el usuario tenga en su posesi\u00f3n o cuando se desee permitir al usuario, justo despu\u00e9s de firmar, guardar copia de la firma que haya generado. El uso de estas operaciones se puede evitar mediante JavaScript y desarrollos en servidor, lo que por regla general dar\u00edan lugar a aplicaciones m\u00e1s estables y una mejor experiencia de usuario. Tambi\u00e9n es probable que su aplicaci\u00f3n sea candidata a obtener beneficiosos del uso de la firma trif\u00e1sica. Consulte el apartado ANEXO II Firma trif\u00e1sica para obtener m\u00e1s informaci\u00f3n sobre este tipo de operaciones. En los siguientes apartados se plantean tambi\u00e9n alternativas para el uso de las distintas operaciones, lo cual tambi\u00e9n har\u00e1 la soluci\u00f3n compatible con aplicaciones m\u00f3viles.","title":"Operaciones de gesti\u00f3n de ficheros"},{"location":"markdown_strict/MCF_manual-integrador_ES/#guardado-de-datos-en-disco","text":"La funci\u00f3n de guardado permite proporcionar a AutoFirma unos datos codificados en Base64 para que este ofrezca al usuario almacenarlo en disco mediante un di\u00e1logo de guardado. Un uso com\u00fan de este m\u00e9todo es guardar las firmas generadasalmacene el binario correspondiente en disco. El integrador puede seleccionar los datos que desea almacenar, la propuesta de nombre para el fichero y otros par\u00e1metros para el di\u00e1logo de guardado. Sin embargo, ser\u00e1 el usuario el \u00fanico que podr\u00e1 decidir donde desea almacenar los datos y qu\u00e9 nombre tendr\u00e1 el fichero. Los datos guardados son los datos indicados en Base64 ya descodificados. Es decir, si deseamos almacenar el texto \u201cSOY UN TEXTO A FIRMAR\u201d, convertiremos este texto a Base64 con lo que obtendr\u00edamos la cadena \u201cU09ZIFVOIFRFWFRPIEEgRklSTUFS\u201d y se la pasar\u00edamos al m\u00e9todo de guardado. Si abrimos el fichero resultante encontraremos que este contiene la cadena \u201cSOY UN TEXTO A FIRMAR\u201d. Si lo que deseamos guardar es una firma o un certificado obtenido en una de las funciones callback de las operaciones del Cliente, proporcionaremos al m\u00e9todo de carga tal como se recibe en la funci\u00f3n. La funci\u00f3n JavaScript para el guardado de datos en disco es: saveDataToFile (dataB64, title, fileName, extension, description, successCb, errorCb); En esta funci\u00f3n: dataB64 Datos que deseamos almacenar codificados como cadena Base64. Com\u00fanmente, esto ser\u00e1 el resultado de una operaci\u00f3n de firma o unos datos que se habr\u00e1n procesado previamente para codificarlos a este formato. title T\u00edtulo del di\u00e1logo de guardado. Algunos sistemas operativos podr\u00edan no mostrar el t\u00edtulo del di\u00e1logo. fileName Nombre de fichero que aparecer\u00e1 por defecto en el di\u00e1logo de guardado. extension Extensi\u00f3n de fichero que se propone para el guardado. Los ficheros visibles del di\u00e1logo se filtrar\u00e1n para s\u00f3lo visualizar los que tienen esta extensi\u00f3n mientras est\u00e9 seleccionada en el di\u00e1logo. Un ejemplo de extensi\u00f3n es: pdf description Descripci\u00f3n del tipo de fichero que se va a almacenar. Esta descripci\u00f3n aparecer\u00e1 asociada a la extensi\u00f3n indicada. sucessCb Nombre de la funci\u00f3n callback JavaScript que se ejecutar\u00e1 en caso de que el guardado de datos finalice correctamente. Si se omite este par\u00e1metro, o se establece a null, no se ejecutar\u00e1 ninguna funci\u00f3n al terminar la operaci\u00f3n. Esta funci\u00f3n no recibe par\u00e1metros. errorCb Nombre de la funci\u00f3n callback JavaScript que se ejecutar\u00e1 en caso de que el guardado de datos finalice con errores o cuando el usuario cancele el di\u00e1logo de guardado. Si se omite este par\u00e1metro, o se establece a null, no se ejecutar\u00e1 ninguna funci\u00f3n al terminar la operaci\u00f3n. Esta funci\u00f3n recibe los siguientes par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. A continuaci\u00f3n, se muestran distintos ejemplos de operaciones de guardado de fichero: Guardado de una firma electr\u00f3nica: \u2026 function saveDataCb (dataB64, certB64) { AutoScript.saveDataToFile (dataB64, \u201cGuardar firma electr\u00f3nica\u201d, \u201cfirma.csig\u201d, \u201ccsig\u201d, \u201cFirma binaria\u201d); } \u2026 AutoScript.cosign (dataB64, \u201cSHA512withRSA\u201d, \u201cCAdES\u201d, null , saveDataCb, errorCb); \u2026 Guardado de datos insertados por el usuario: \u2026 var text = document.getElementById(\u201cuserText\u201d).value; var dataB64 = AutoScript.getBase64FromText(text); AutoScript.saveDataToFile (dataB64, \u201cGuardar\u201d, \u201cfichero.txt\u201d, \u201ctxt\u201d, \u201cTexto plano\u201d); \u2026 <!-- Formulario HTML con el texto que desea guardar --> <form> <textarea name=\"userText\" cols=\"50\" rows=\"5\">Texto</textarea> </form> \u2026 La funci\u00f3n de guardado permite \u00fanicamente almacenar en disco un dato que ya tenemos cargado en la p\u00e1gina web y que, probablemente, ya est\u00e9 en servidor o se desee enviar al mismo (como en el caso de las firmas electr\u00f3nicas). Seg\u00fan el caso, se pueden implementar alternativas en la aplicaci\u00f3n que eviten el uso de la funci\u00f3n de guardado del Cliente @firma. Por ejemplo: Si tenemos que deseamos guardar en servidor, en lugar de cargarlos en la p\u00e1gina y luego usar esta funci\u00f3n, se podr\u00eda habilitar un servicio para descargarlos directamente desde el navegador. Si tenemos los datos cargados en la p\u00e1gina, como una firma reci\u00e9n generada, podemos enviarla primeramente al servidor para procesarla y guardarla. A continuaci\u00f3n, podr\u00edamos informar al usuario del resultado de la operaci\u00f3n y ofrecerle el descargar una copia utilizando el mismo m\u00e9todo que en el punto anterior. Si tenemos los datos en la p\u00e1gina p\u00e1gina y no deseamos enviarla a servidor, podemos utilizar JavaScript para permitir al usuario descargar estos datos mediante un objeto Blob y un enlace creado al vuelo.","title":"Guardado de datos en disco"},{"location":"markdown_strict/MCF_manual-integrador_ES/#seleccion-y-recuperacion-de-un-fichero-por-parte-del-usuario","text":"AutoFirma permite que un usuario cargue un fichero de su sistema local y recuperar su nombre y contenido. Este m\u00e9todo nos permite cargar ficheros para firmarlos, multifirmarlos u operar con ellos de cualquier otro modo. La funci\u00f3n JavaScript para la carga de ficheros en disco es: getFileNameContentBase64 (title, extensions, description, filePath, successCb, errorCb); En esta funci\u00f3n: title T\u00edtulo del di\u00e1logo de selecci\u00f3n. extensions Listado de extensiones de fichero permitidas. Estas aparecer\u00e1n separadas por una coma (\u2018,\u2019) y sin espacios entre ellas. Por ejemplo: pdf,jpg,txt. El di\u00e1logo s\u00f3lo mostrar\u00e1 los ficheros con estas extensiones, salvo que el usuario establezca lo contrario manualmente en el di\u00e1logo. description Descripci\u00f3n del tipo de fichero que se espera cargar. Esta descripci\u00f3n aparecer\u00e1 asociada a las extensiones indicadas. filePath Ruta absoluta del fichero que se deber\u00eda seleccionar por defecto o s\u00f3lo el nombre de fichero sugerido. successCb Funci\u00f3n callback JavaScript que se invocar\u00e1 cuando se cargue correctamente un fichero. Esta funci\u00f3n recibe los siguientes par\u00e1metros: En el primer par\u00e1metro se recibe el nombre del fichero seleccionado. En el segundo par\u00e1metro se recibe el contenido del fichero codificado en Base64. errorCb Funci\u00f3n callback JavaScript de error que se invocar\u00e1 cuando ocurra un error al cargar un fichero o cuando el usuario cancele el di\u00e1logo de selecci\u00f3n. Esta funci\u00f3n recibe los siguientes par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. A continuaci\u00f3n, se muestra un ejemplo de carga de fichero: Carga de un fichero y recogida de su nombre: \u2026 var fileName; var fileContentB64; AutoScript.getFileNameContentBase64( \u201cSeleccionar fichero\u201d, \u201cjpg,gif,png\u201d, \u201cImagen\u201d, null , loadDataSuccessCallback, loadDataErrorCallback ..); \u2026 function loadDataSuccessCallback(name, contentB64) { filename = name; fileContentB64 = contentB64; } function loadDataErrorCallback(errorType, errorMsg) { alert(\u201cError: \u201d + errorMsg); } \u2026 La funci\u00f3n de carga de fichero permite cargar un fichero del disco del usuario y obtener su contenido y nombre en la p\u00e1gina web. Sin embargo, este fichero no deber\u00eda ser tramitado directamente sin haberse realizado las comprobaciones necesarias para saber que es v\u00e1lido para el objetivo que se desee, salvo que no tengamos ning\u00fan tipo de restricci\u00f3n sobre el tipo de fichero. Tambi\u00e9n hay que tener en cuenta que, cuando cargamos datos para firmar, lo com\u00fan suele ser enviar posteriormente a servidor esos datos junto con la firma generada. Seg\u00fan el caso, el uso del m\u00e9todo de carga de ficheros se podr\u00eda sustituir por alguna de las siguientes l\u00f3gicas de negocio: Si queremos firmar un fichero y no tenemos ning\u00fan tipo de restricci\u00f3n sobre el tipo de datos que debe cargarse, podr\u00eda omitirse la carga independiente de los datos y llamar al m\u00e9todo de firma en cuesti\u00f3n sin pasarle datos. En ese caso, ser\u00e1 la propia aplicaci\u00f3n de firma la que ofrecer\u00e1 al usuario cargar un fichero para firmarlo. Advertencia : Este caso de uso no es compatible con el Cliente iOS. Si queremos cargar un fichero para firmarlo, pero antes queremos comprobar que sea un fichero v\u00e1lido, podr\u00edamos permitir que el usuario cargue los datos en la aplicaci\u00f3n primeramente mediante un componente HTML de carga de fichero. Una vez cargado el documento en servidor podemos realizar las comprobaciones necesarias sobre \u00e9l y cargar su contenido en el HTML de la p\u00e1gina en Base64 para firmarlo. Despu\u00e9s s\u00f3lo deber\u00edamos enviar al servidor la firma generada, ya que los datos ya estar\u00edan cargados. Una versi\u00f3n mejorada de esto ser\u00eda generar la firma de forma trif\u00e1sica de tal forma que la aplicaci\u00f3n no tenga que cargar el contenido del fichero en la p\u00e1gina, se pueda firmar el documento mediante un identificador (haciendo uso de un DocumentManager a medida) y la firma se genere directamente en servidor, con lo cual tampoco ser\u00eda necesario enviarla a posteriori. Consulte el apartado ANEXO II Firma trif\u00e1sica para saber m\u00e1s sobre este tipo de firmas.","title":"Selecci\u00f3n y recuperaci\u00f3n de un fichero por parte del usuario"},{"location":"markdown_strict/MCF_manual-integrador_ES/#seleccion-y-recuperacion-de-multiples-ficheros-por-parte-del-usuario","text":"Adem\u00e1s de la operaci\u00f3n de carga de un fichero, AutoFirma incorpora una funci\u00f3n para la carga de m\u00faltiples ficheros que funciona de forma an\u00e1loga a la anterior. La funci\u00f3n JavaScript para la carga de m\u00faltiples ficheros en disco es: getMultiFileNameContentBase64 (title, extensions, description, filePath, successCb, errorCb); En esta funci\u00f3n: title T\u00edtulo del di\u00e1logo de selecci\u00f3n. extensions Listado de extensiones de fichero permitidas. Estas aparecer\u00e1n separadas por una coma (\u2018,\u2019) y sin espacios entre ellas. Por ejemplo: pdf,jpg,txt. El di\u00e1logo s\u00f3lo mostrar\u00e1 los ficheros con estas extensiones, salvo que el usuario establezca lo contrario manualmente en el di\u00e1logo. description Descripci\u00f3n del tipo de fichero que se espera cargar. Esta descripci\u00f3n aparecer\u00e1 asociada a las extensiones indicadas. filePath Ruta absoluta de uno de los ficheros que se deber\u00eda seleccionar por defecto o s\u00f3lo el nombre sugerido de uno de los ficheros. successCb Funci\u00f3n callback JavaScript de \u00e9xito que se invocar\u00e1 cuando se cargue al menos un fichero. Esta funci\u00f3n recibe los siguientes par\u00e1metros: En el primer par\u00e1metro se recibe un array con los nombres de los ficheros seleccionados. En el segundo par\u00e1metro se recibe un array con el contenido en Base64 de los ficheros seleccionados. El contenido de los par\u00e1metros recibidos ser\u00e1 tal que el nombre del primer elemento del array de nombres se corresponder\u00e1 con el contenido del primer elemento del array de contenidos, y as\u00ed para cada uno de los elementos de ambos arrays . errorCb Funci\u00f3n callback JavaScript de error que se invocar\u00e1 cuando no se seleccionen ficheros o cuando se produzca un error durante su carga. Esta funci\u00f3n recibe los siguientes par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. A continuaci\u00f3n, se muestra un ejemplo de carga de fichero: Carga de ficheros y recogida de sus nombres: \u2026 var fileNames; var fileContentB64s; AutoScript.getMultiFileNameContentBase64( \u201cSeleccionar fichero\u201d, \u201cjpg,gif,png\u201d, \u201cImagen\u201d, null , loadDataSuccessCallback, loadDataErrorCallback ); \u2026 function loadDataSuccessCallback(namesArray, contentB64sArray) { fileNames = namesArray; fileContentB64s = contentB64sArray; } function loadDataErrorCallback(type, msg) { /* Mostramos todos los errores menos el de cancelaci\u00f3n del di\u00e1logo. */ if (!\u201ces.gob.afirma.core.AOCancelledOperationException\u201d.equals(type)) { /* M\u00e9todo del integrador para mostrar logs */ showLog(msg); } } \u2026","title":"Selecci\u00f3n y recuperaci\u00f3n de m\u00faltiples ficheros por parte del usuario"},{"location":"markdown_strict/MCF_manual-integrador_ES/#metodos-de-utilidad-javascript","text":"Las siguientes secciones muestran diversas funciones de utilidad que incorpora el JavaScript de despliegue de Cliente @firma. Estas funciones no se comunican con la aplicaci\u00f3n nativa de firma y pueden ser implementadas por su propia aplicaci\u00f3n. Se suministran \u00fanicamente para facilitar la integraci\u00f3n del Cliente. Entre estas funciones est\u00e1n: Conversi\u00f3n de texto a Base64 y viceversa. Descarga de datos.","title":"M\u00e9todos de utilidad JavaScript"},{"location":"markdown_strict/MCF_manual-integrador_ES/#conversion-de-una-cadena-base64-a-texto","text":"El JavaScript de despliegue del Cliente @firma proporciona un m\u00e9todo para la conversi\u00f3n de una cadena Base64 a un texto plano. Este m\u00e9todo permite mostrar al usuario en texto plano informaci\u00f3n que se posea Base64. Casos en los que puede ser necesario esto son cuando se carga el contenido de un fichero de texto plano desde disco por medio de alguno de los m\u00e9todos de carga o cuando los datos son el resultado de una firma XML, por ejemplo. El juego de caracteres que se usar\u00e1 para interpretar el texto siempre ser\u00e1 UTF-8. La funci\u00f3n JavaScript para recuperar el texto plano correspondiente a la cadena en Base64 es: getTextFromBase64(dataB64); En esta funci\u00f3n: dataB64 Son los datos Base64 que se quieren mostrar como texto plano. Este m\u00e9todo devuelve una cadena con el texto plano correspondiente. A continuaci\u00f3n, se muestra un ejemplo de decodificaci\u00f3n de un texto Base64: Decodificaci\u00f3n de una firma XML generada previamente \u2026 function showTextCallback (xmlSignB64) { var text = AutoScript.getTextFromBase64(xmlSignB64); alert(text); } \u2026 AutoScript.sign(dataB64, \u201cSHA1withRSA\u201d, \u201cXAdES\u201d, \u201cformat=XAdES Enveloped\u201d, showTextCallback, errorCallback); \u2026","title":"Conversi\u00f3n de una cadena Base64 a texto"},{"location":"markdown_strict/MCF_manual-integrador_ES/#conversion-de-un-texto-a-cadena-base64","text":"El JavaScript de despliegue del Cliente @firma proporciona un m\u00e9todo para la conversi\u00f3n de un texto plano a una cadena Base64. Este m\u00e9todo permite pasar al m\u00e9todo de firma un texto insertado por el usuario, por ejemplo. Se interpretar\u00e1 que el texto proporcionado es UTF-8. La funci\u00f3n JavaScript para convertir de texto plano a Base64 es: getBase64FromText(plaintText); En esta funci\u00f3n: plainText Es el texto plano que se desea convertir a Base64. Este m\u00e9todo devuelve una cadena Base64 que es la codificaci\u00f3n del texto plano indicado. A continuaci\u00f3n, se muestra un ejemplo de decodificaci\u00f3n de un texto Base64: Firma de un texto insertado por el usuario \u2026 var text = \"Hola Mundo!!\"; var dataB64 = AutoScript.getBase64FromText(text); AutoScript.sign (dataB64, \"SHA512withRSA\", \"CAdES\", null , successCallback, errorCallback); \u2026","title":"Conversi\u00f3n de un texto a cadena Base64"},{"location":"markdown_strict/MCF_manual-integrador_ES/#descarga-de-datos-remotos","text":"El JavaScript de despliegue proporciona un m\u00e9todo para la descarga de datos remotos. Este m\u00e9todo accede a una URL establecida por el integrador, descarga el contenido que en ella se encuentra e invoca a un m\u00e9todo callback al que le proporciona los datos descargados en Base64. La descarga de los datos se realiza desde JavaScript y sufre las limitaciones que aplican los navegadores a este tipo de descargar. Por norma, s\u00f3lo podr\u00e1n descargarse datos accesibles desde una URL con el mismo dominio y esquema (HTTP o HTTPS) que la web que integra el JavaScript de despliegue. La descarga de los datos se realiza por medio del m\u00e9todo GET de HTTP y se realiza de forma as\u00edncrona. Es decir, se descargan los datos en un hilo de ejecuci\u00f3n distinto al proceso principal. Una vez termina el proceso de descarga, se invoca a un m\u00e9todo callback establecido por el integrador, de tal forma que se pueda recuperar el resultado de la operaci\u00f3n. La funci\u00f3n JavaScript para descarga de datos remotos es: downloadRemoteData (url, successCallback, errorCallback); En esta funci\u00f3n: url URL de acceso a los datos a descargar. successCallback Nombre de la funci\u00f3n callback que se invocar\u00e1 cuando se terminen de descargar los datos. Esta funci\u00f3n recibir\u00e1 como \u00fanico par\u00e1metro los datos descargados en Base64. errorCallback Nombre de la funci\u00f3n callback que se invocar\u00e1 cuando se produczca un error al descargar los datos. Esta funci\u00f3n recibir\u00e1 como par\u00e1metros: En el primer par\u00e1metro se recibe un texto con el tipo del error. En el segundo par\u00e1metro se recibe un texto con el mensaje de error. Este m\u00e9todo devuelve no devuelve nada y su ejecuci\u00f3n es as\u00edncrona. A continuaci\u00f3n, se muestra un ejemplo de descarga de datos: Descarga de datos y posterior firma \u2026 var mostrarError = function (e) { alert(\u201cError en la descarga de los datos: \u201d + e); } var iniciarFirma = function (datosB64) { AutoScript.sign (datosB64, algorithm, format, null , successCallback, errorCallback); } var url = \u201chttp://midominio.com/informe.pdf\u201d; AutoScript.downloadRemoteData (url, iniciarFirma, mostrarError); \u2026","title":"Descarga de datos remotos"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-de-las-operaciones","text":"","title":"Configuraci\u00f3n de las operaciones"},{"location":"markdown_strict/MCF_manual-integrador_ES/#paso-de-parametros-adicionales","text":"Los m\u00e9todos del API JavaScript para el uso del Cliente @firma trasladan los datos a la aplicaci\u00f3n de firma en forma de cadenas de texto. Algunas de estas cadenas son datos binarios codificados en Base64 (como el par\u00e1metro de datos a firmar), mientras que otras son textos planos (como los nombres del formato y el algoritmo de firma). En muchas de las operaciones del API existe un par\u00e1metro concreto, usualmente denominado params o estraParams, que se utiliza para establecer una serie de propiedades de configuraci\u00f3n opcionales. Estos par\u00e1metros se expresan en texto plano en forma de tuplas de claves y valores, emulando el formato de los objetos de propiedades de Java (Properties). Los mencionados objetos de propiedades tienen un formato como el que sigue: nombreParam1=valorParam1 nombreParam2=valorParam2 \u2026 Para expresar cadenas en este formato desde JavaScript, se concatenar\u00e1n cada una de las l\u00edneas usando el car\u00e1cter especial de nueva l\u00ednea (\\n) como separador: var params=\u2019nombreParam1=valorParam1\\nnombreParam2=valorParam2\u2019; Es importante especificar el nombre de las propiedades exactamente como se indique, ya que puede existir diferenciaci\u00f3n entre may\u00fasculas y min\u00fasculas. Cualquier par\u00e1metro no soportado por la operaci\u00f3n invocada, simplemente, se ignorar\u00e1. Nota: El Cliente @firma interpreta todos los textos, tanto los recibidos como los devueltos en las respuestas, usando el juego de caracteres UTF-8. Para poder transmitirlos y mostrarlos correctamente desde una p\u00e1gina web es necesario que esta se encuentre codificada en UTF-8 y lo declare como tal. En caso de no ser posible, se recomienda: Que el Base64 de los textos a proporcionar al Cliente se hayan obtenido desde un entorno en el que se pueda gantizar que originalmente estaban codificados en UTF-8. Por ejemplo, que el texto ya estuviese previamente codificado o que se codifique a trav\u00e9s de un servicio. No mostrar directamente al usuario los mensajes devueltos por el propio Cliente. Ejemplo de uso: \u2026 AutoScript.cargarAppAfirma(); // Configuramos 3 par\u00e1metros adicionales: // - expPolicy: Pol\u00edtica de firma // - filters: Filtros de certificados vigentes // - signerClaimedRoles: Roles del firmante var extraParams = \"expPolicy=FirmaAGE\\nfilters=nonRepudiation:\\n\" + \"signerClaimedRoles=Apoderado\"; // Ejecutamos la operaci\u00f3n de firma AutoScript.sign (dataB64, \"CAdES\", \"SHA512withRSA\", extraParams, successCallback, errorCallback); \u2026","title":"Paso de par\u00e1metros adicionales"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-de-los-filtros-de-certificados","text":"El Cliente @firma dispone de filtros de certificados que se pueden aplicar para restringir los certificados que podr\u00e1 seleccionar el usuario para realizar una operaci\u00f3n de firma o multifirma. Los filtros de certificados se pueden establecer como par\u00e1metros adicionales en las distintas operaciones de firma y selecci\u00f3n de certificados. Por defecto, AutoFirma no mostrar\u00e1 al usuario los certificados caducados. Sin embargo, si se establecen filtros de certificados, se mostrar\u00e1n todos aquellos certificados disponibles que cumplan con las condiciones dadas, incluidos los certificados caducados. Para omitir expresamente estos certificados se puede utilizar el filtro \u201cnonexpired:\u201d, explicado m\u00e1s adelante en este apartado. Advertencia: El uso de filtros de certificados no esta soportado por los clientes de firma m\u00f3vil. Las propiedades de configuraci\u00f3n de filtros ser\u00e1n ignoradas por las aplicaciones m\u00f3viles. Las claves que nos permiten establecer filtros de certificados son: filters : Esta clave permite establecer uno o m\u00e1s de los filtros de certificados que se listan m\u00e1s adelante en este apartado. Los certificados deber\u00e1n cumplir las condiciones establecidas en todos los filtros listados, o de lo contrario no se mostrar\u00e1n. Los distintos filtros se deben separar mediante el car\u00e1cter punto y coma (\u2018;\u2019). Ejemplos: filters=nonexpired:false Motrar todos los certificados, incluso los caducados. filters=issuer.rfc2254: (O=DIRECCION GENERAL DE LA POLICIA);keyusage.nonrepudiation:true Mostrar s\u00f3lo certificados de firma del DNIe. filters=issuer.rfc2254: (O=DIRECCION GENERAL DE LA POLICIA);keyusage.nonrepudiation:true;nonexpired: Mostrar s\u00f3lo certificados de firma del DNIe no caducados. filters.X : En esta clave \u2018X\u2019 ser\u00e1 un entero igual o mayor que 1. El Cliente @firma leer\u00e1 la clave filters.1 , a continuaci\u00f3n, filters.2 y as\u00ed hasta que no encuentre una de las claves de la secuencia. Al contrario que con la clave filters , basta con que el certificado cumpla uno de estos filtros para que se muestre. No es necesario cumplirlos todos. Cada una de estas claves puede declarar varios filtros separados por punto y coma (\u2018;\u2019) de tal forma que s\u00ed se deber\u00e1n cumplir todos ellos para satisfacer ese sub-filtro concreto. Ejemplos: Mostrar los certificados no caducados del ciudadano con NIF 11111111H: filters.1=subject.rfc2254:(SERIALNUMBER=*11111111H);nonexpired: filters.2=subject.rfc2254:(CN=*11111111H*);nonexpired: IMPORTANTE: Las autoridades certificadoras pueden agregar el DNI del ciudadano en distintos campos del certificado y AutoFirma no dispone de un modo de localizarlo. Sin embargo, la mayor de ellas ya agrega el DNI como parte del RDN \u201cSERIALNUMBER\u201d del subject del certificado. Algunas tambi\u00e9n lo agregan como parte del CN. As\u00ed, este ejemplo, englobar\u00eda funcionaria con buena parte de los certificados personales emitidos por autoridades espa\u00f1olas, pero puede que no con todas. Mostrar los certificados CERES y el certificado de firma del DNIe: filters.1=nonexpired:;issuer.rfc2254:(O=DIRECCION GENERAL DE LA POLICIA);keyusage.nonrepudiation:true filters.2=nonexpired:;issuer.rfc2254:(O=FNMT-RCM) Estas claves de definici\u00f3n de filtros son excluyentes y tienen prioridad seg\u00fan el orden en el que se han listado ( filters y filters.X ). Es decir, si se establece la propiedad filters, no se procesar\u00e1n las propiedades del tipo filters.1 , por ejemplo. Los filtros disponibles en AutoFirma son: Filtro de certificados caducados: Filtra los certificados para que no se muestren aquellos que se encuentren fuera de su periodo de validez, que son los \u00fanicos que pueden generar una firma v\u00e1lida. El filtro determina si un certificado est\u00e1 vigente en base a la fecha/hora del equipo del usuario. Para establecer este filtro se usar\u00e1 el valor \u201c nonexpired: \u201d. Ejemplo: filters=nonexpired: Un integrador tambi\u00e9n puede habilitar o deshabilitar expresamente este filtro sigui\u00e9ndolo de las palabras \u201c true \u201d o \u201c false \u201d, respectivamente. Por defecto, si no se indica ning\u00fan filtro de certificados, AutoFirma omitir\u00e1 los certificados que est\u00e9n fuera de su periodo de validez. Si se desea que se muestren los certificados caducados sin indicar ning\u00fan otro filtro, se puede configurar la propiedad de filtrado de la siguiente manera: filters=nonexpired:false Filtro por n\u00famero de serie de certificados cualificados de firma: Filtra los certificados del almac\u00e9n para que s\u00f3lo se muestre aquellos con un n\u00famero de serie concreto, lo que com\u00fanmente har\u00e1 que se muestre un \u00fanico certificado. En el caso de que el certificado identificado por el filtro no sea un certificado cualificado para firma, se buscar\u00e1 en el almac\u00e9n un certificado parejo que s\u00ed lo est\u00e9. Si se encontrase se seleccionar\u00eda este nuevo certificado y, si no, se seleccionar\u00e1 el certificado al que corresponde el n\u00famero de serie. Para establecer este filtro se usar\u00e1 el valor \u201c qualified: \u201d seguido por el n\u00famero de serie del certificado en hexadecimal. Ejemplos: filters=qualified:45553a61 filters=qualified:03ea Filtro en base a certificado codificado: Filtra los certificados para seleccionar uno concreto proporcionado a trav\u00e9s del filtro. Esto es de utilidad cuando, despu\u00e9s de una operaci\u00f3n realizada con un certificado, se quiere restringir futuras operaciones para que se realicen con el mismo certificado. Para establecer este filtro se usar\u00e1 el valor \u201c encodedcert: \u201d seguido del certificado codificado en Base64. Esto es, tal como se devuelve a trav\u00e9s del callback en los m\u00e9todos de firma y selecci\u00f3n de certificado. Ejemplo: filters=encodedcert:MIIIcjCCBlqgAwIB\u2026\u2026\u2026\u2026\u2026radvEjJ= Este filtro mostrar\u00e1 s\u00f3lo aquel certificado que hemos proporcionado en el filtro, en caso de que exista en el almac\u00e9n. Filtro por huella digital ( Thumbprint ): Filtra los certificados de tal forma que s\u00f3lo se mostrar\u00e1 aquel que tenga la huella digital indicada. Hay que tener en cuenta que esta huella digital no debe calcularse en base a un fichero (por ejemplo, un \u201c.cer\u201d), sino que es la huella digital de la codificaci\u00f3n del certificado. Para establecer este filtro se usar\u00e1 el valor \u201c thumbprint: \u201d seguido del algoritmo de huella digital utilizado y, separado por el car\u00e1cter dos puntos (\u2018:\u2019) la huella digital que se busque en hexadecimal. Ejemplo: filters=thumbprint:SHA1:30 3a bb 15 44 3a fd d7 c5 a2 52 dc a5 54 f4 c5 ee 8a a5 4d Este filtro s\u00f3lo mostrar\u00e1 el certificado cuya huella digital en SHA1 sea la indicada. Filtro DNIe: Filtra los certificados del almac\u00e9n para que s\u00f3lo se muestren los certificados de firma de los DNIe disponibles desde ese almac\u00e9n. Para establecer este filtro se usar\u00e1 el valor \u201c dnie: \u201d. Ejemplo: filters=dnie: Filtro de certificados SSCD: Filtra los certificados del almac\u00e9n para que se muestren s\u00f3lo aquellos generados en un dispositivo SSCD (dispositivo seguro de creaci\u00f3n de firma), como es el caso de los certificados del DNIe. Hay que tener en cuenta que el filtrado se realiza a partir de un atributo QCStatement declarado en el propio certificado. Si la autoridad de certificaci\u00f3n no incluye este atributo, no ser\u00e1 posible realizar la distinci\u00f3n. Para establecer este filtro se usar\u00e1 el valor \u201c sscd: \u201d . Ejemplo: filters=sscd: Filtro de certificados de firma: Filtra los certificados del almac\u00e9n para que se muestren todos los certificados salvo el certificado de autenticaci\u00f3n del DNIe. Este filtro se crea para evitar excluir algunos tipos de certificados con los KeyUsage mal declarados. Para establecer este filtro se usar\u00e1 el valor \u201csigningCert:\u201d. Ejemplo: filters=signingCert: Para un filtrado m\u00e1s correcto de los certificados de firma, utilice el filtro \u201c keyusage.nonrepudiation: \u201d. Filtro de certificados de autenticaci\u00f3n: Filtra los certificados del almac\u00e9n para que se muestren todos los certificados salvo el certificado de firma del DNIe. Este filtro se crea para evitar excluir algunos tipos de certificados con los KeyUsage mal declarados. Para establecer este filtro se usar\u00e1 el valor \u201c authCert: \u201d . Ejemplo: filters=authCert: Para un filtrado m\u00e1s correcto de los certificados de autenticaci\u00f3n, utilice el filtro \u201c keyusage.digitalsignature: \u201d. Filtro RFC2254 en base al Subject del certificado: Filtra los certificados a partir de una expresi\u00f3n regular creada seg\u00fan la RFC2254 que se aplica sobre el Subject del certificado. Para establecer este filtro se usar\u00e1 el valor \u201c subject.rfc2254: \u201c seguido de la expresi\u00f3n RFC2254. Puede revisarse la normativa RFC 2254 en http://www.faqs.org/rfcs/rfc2254.html Ejemplo: filters=subject.rfc2254:(CN=*12345678z*) Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados en los que aparezca la cadena \u201c12345678z\u201d en el CommonName de su Subject . Filtro RFC2254 en base al Issuer del certificado: Filtra los certificados a partir de una expresi\u00f3n regular creada seg\u00fan la RFC2254 que se aplica sobre el Issuer del certificado. Para establecer este filtro se usar\u00e1 el valor \u201c issuer.rfc2254: \u201d seguido de la expresi\u00f3n RFC2254. Puede revisarse la normativa RFC 2254 en http://www.faqs.org/rfcs/rfc2254.html Ejemplo: filters=issuer.rfc2254:(|(O=FNMT-RCM)(O=DIRECCION GENERAL DE LA POLICIA)) Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados cuyo Issuer tenga establecido como organizaci\u00f3n \u201cFNMT\u201d o \u201cDIRECCION GENERAL DE LA POLICIA\u201d, es decir, s\u00f3lo mostrar\u00e1 los certificados del DNIe y los de la FNMT. Este filtro puede aplicarse de forma recursiva, de tal forma que permitir\u00e1 el uso del certificado si cualquier de los certificados de la cadena de certificaci\u00f3n por encima de \u00e9l mismo cumple con la expresi\u00f3n indicada. Para utilizar recursivamente este filtro se usar\u00e1 el valor issuer.rfc2254.recurse: seguido de la expresi\u00f3n RFC2254. Ejemplo: filters=issuer.rfc2254.recurse:(CN=*FNMT*) Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados en los que alguno de los certificados de su cadena de certificaci\u00f3n tenga la part\u00edcula \u201cFNMT\u201d en el nombre com\u00fan Filtro de texto en base al Subject del certificado: Filtra los certificados seg\u00fan si contienen o no una cadena de texto en el Principal de su Subject . Para establecer este filtro se usar\u00e1 el valor \u201c subject.contains: \u201d seguido de la cadena de texto que debe contener. Ejemplo: filters=subject.contains:JUAN ESPA\u00d1OL ESPA\u00d1OL Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados en los que aparezca la cadena \u201cJUAN ESPA\u00d1OL ESPA\u00d1OL\u201d en el Subject . Filtro de texto en base al Issuer del certificado: Filtra los certificados seg\u00fan si contienen o no una cadena de texto en el Principal de su Issuer . Para establecer este filtro se usar\u00e1 el valor \u201c issuer.contains: \u201d seguido de la cadena de texto que debe contener. Ejemplo: filters=issuer.contains:O=EMPRESA Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados en los que el Principal del Issuer muestre el texto \u201cO=EMPRESA\u201d. Filtros por uso declarado de los certificados ( KeyUsage ): Colecci\u00f3n de filtros que permiten filtrar seg\u00fan el uso declarado de los certificados. Para establecer estos filtros usaremos las siguientes claves seg\u00fan los usos que se quieran comprobar. Las claves ir\u00e1n seguidas de los valores \u201ctrue\u201d o \u201cfalse\u201d, seg\u00fan se desee que el uso est\u00e9 habilitado o no lo est\u00e9, respectivamente: keyusage.digitalsignature: keyusage.nonrepudiation: keyusage.keyencipherment: keyusage.dataencipherment: keyusage.keyagreement: keyusage.keycertsign: keyusage.crlsign: keyusage.encipheronly: keyusage.decipheronly: Los KeyUsages que no se declaren en el filtro no se tendr\u00e1n en cuenta. Ejemplos: filters=keyusage.digitalsignature:true;keyusage. keyencipherment:true Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados que tengan establecidos a true los KeyUsage digitalsignature (autenticaci\u00f3n) y keyencipherment (sobres electr\u00f3nicos), ignorando el valor del resto de KeyUsages . filters=keyusage.nonrepudiation:false Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados que no declaren el KeyUsage de firma avanzada. Filtro por identificador de directiva: Filtra los certificados por aquellos que poseen un identificador de directiva concreto. Esto es \u00fatil para mostrar s\u00f3lo determinado tipo de certificados de una autoridad de certificaci\u00f3n. Para establecer este filtro se usar\u00e1 el valor \u201c policyid: \u201d seguido por el listado de OIDs, separados por comas (\u2018,\u2019), por los que se quieran filtrar. Ejemplo: filters=policyid:1.3.6.1.4.1.18332.3.4.1.2.11 Este filtro mostrar\u00e1 s\u00f3lo aquellos certificados con el identificador de directiva \u201c1.3.6.1.4.1.18332.3.4.1.2.11\u201d. Filtro de seud\u00f3nimo: Permite filtrar los certificados permitiendo que el usuario se centre en los certificados de pseud\u00f3nimo, lo que permite que su nombre real del usuario quede excluido de la firma. Para establecer este filtro se usar\u00e1 uno de los siguientes valores: pseudonym:only Establece que s\u00f3lo se muestren los certificados de pseud\u00f3nimo. pseudonym:andothers Establece que se muestren los certificados de pseud\u00f3nimo y aquellos que no tienen un certificado de seud\u00f3nimo asociado. As\u00ed, quedan ocultos los certificados que tienen un certificado equivalente de seud\u00f3nimo. Es es el valor por defecto y se utilizar\u00e1 incluso si se escribe \u201c pseudonym: \u201d a secas o seguido de cualquier valor que no coincida con otro de los valores permitidos. Ejemplo: filters=pseudonym: Filtro de almacenes externos: Permite deshabilitar el bot\u00f3n de carga de almacenes PKCS#12 en el di\u00e1logo de selecci\u00f3n de certificados. De esta forma s\u00f3lo podr\u00e1n usarse los certificados del almac\u00e9n seleccionado por el integrador o los por defecto del navegador en caso de que el integrador ni especificase ning\u00fan almac\u00e9n. Para establecer este filtro se usar\u00e1 el valor \u201c disableopeningexternalstores \u201c. Ejemplo: filters=disableopeningexternalstores Se ignorar\u00e1 cualquier valor establecido como filtro de certificados distinto a los que se han listado. Si ning\u00fan certificado cumple los criterios de filtrado, se ejecutar\u00e1 la operaci\u00f3n de error indicando que no se ha encontrado ning\u00fan certificado que cumpla con los criterios indicados. Si m\u00e1s de un certificado cumple los criterios de filtrado, se mostrar\u00e1n todos ellos en el di\u00e1logo de selecci\u00f3n de certificados. Si tan s\u00f3lo un certificado cumple con las condiciones de los filtros establecidos y se ha configurado la opci\u00f3n \u201c headless \u201d en las propiedades adicionales de la operaci\u00f3n, se seleccionar\u00e1 autom\u00e1ticamente ese certificado sin mostrar el di\u00e1logo de selecci\u00f3n al usuario. Consulte el apartado 7.3 Selecci\u00f3n autom\u00e1tica de certificados para conocer c\u00f3mo configurar la propiedad \u201c headless \u201d.","title":"Configuraci\u00f3n de los filtros de certificados"},{"location":"markdown_strict/MCF_manual-integrador_ES/#seleccion-automatica-de-certificados","text":"Para aquellos casos en los que s\u00f3lo exista un certificado en el almac\u00e9n de certificados o cuando se descarten certificados mediante filtros y s\u00f3lo haya uno que es posible seleccionar, es posible indicar a AutoFirma que lo seleccione autom\u00e1ticamente en lugar de mostrar al usuario el di\u00e1logo de selecci\u00f3n con este \u00fanico certificado. Esto podemos configurarlo mediante la propiedad headless . headless=true Por defecto, si no se establece la propiedad headless o se indica un valor distinto de true , se mostrar\u00e1 el di\u00e1logo de selecci\u00f3n de certificados aun cuando s\u00f3lo haya un certificado para seleccionar. Los clientes de firma m\u00f3vil ignoran la propiedad headless por las restricciones de seguridad de los propios sistemas.","title":"Selecci\u00f3n autom\u00e1tica de certificados"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-de-la-politica-de-firma","text":"La pol\u00edtica de firma de una firma electr\u00f3nica identifica diversos criterios que se han cumplido durante la construcci\u00f3n de esta firma o requisitos que cumple la propia firma. Los formatos de firma CAdES, PAdES y XAdES permiten declarar la pol\u00edtica de firma que se ha seguido para su generaci\u00f3n. Tenga en cuenta que el que una firma incluya los atributos correspondientes a una pol\u00edtica de firma concreta no significa que cumpla los criterios de la pol\u00edtica. Si desea que sus firmas se ajusten a una pol\u00edtica de firma lea las restricciones impuestas por esa pol\u00edtica y genere firmas acordes a ella antes de configurarla. De esta forma, podr\u00e1 asegurarse de que sus firmas son compatibles con otros sistemas y entornos en los que se utilicen firmas acordes a la pol\u00edtica en cuesti\u00f3n.","title":"Configuraci\u00f3n de la pol\u00edtica de firma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#politica-de-firma-de-la-age-v19","text":"En el Cliente @firma se ha incluido un mecanismo para la configuraci\u00f3n r\u00e1pida y sencilla de la pol\u00edtica de firma de la Administraci\u00f3n General del Estado (AGE) v1.9. Para configurar esta pol\u00edtica concreta basta con indicar la siguiente propiedad propiedad adicional en la operaci\u00f3n de firma deseada. expPolicy=FirmaAGE Esta propiedad se expandir\u00e1 a las necesarias para el cumplimiento de la pol\u00edtica de firma de la AGE, lo que equivale a introducir las propiedades manualmente. Los par\u00e1metros de esta pol\u00edtica para cada uno de los formatos comprendidos en la misma los siguientes: CAdES policyIdentifier=2.16.724.1.3.1.1.2.1.9 policyIdentifierHash=G7roucf600+f03r/o0bAOQ6WAs0= policyIdentifierHashAlgorithm=http://www.w3.org/2000/09/xmldsig#sha1 policyQualifier=https://sede.administracion.gob.es/politica_de_firma_anexo_1.pdf mode=implicit XAdES policyIdentifier=urn:oid:2.16.724.1.3.1.1.2.1.9 policyIdentifierHash=G7roucf600+f03r/o0bAOQ6WAs0= policyIdentifierHashAlgorithm=http://www.w3.org/2000/09/xmldsig#sha1 policyQualifier=https://sede.administracion.gob.es/politica_de_firma_anexo_1.pdf format=XAdES Detached PAdES policyIdentifier=2.16.724.1.3.1.1.2.1.9 policyIdentifierHash=G7roucf600+f03r/o0bAOQ6WAs0= policyIdentifierHashAlgorithm=http://www.w3.org/2000/09/xmldsig#sha1 policyQualifier=https://sede.administracion.gob.es/politica_de_firma_anexo_1.pdf La propiedad format, s\u00f3lo se aplicar\u00e1 cuando el formato de firma sea XAdES. La propiedad mode, s\u00f3lo se aplicar\u00e1 cuando el formato de firma sea CAdES y los datos ocupen menos de 1 MB. Los datos no se incluir\u00e1n en la firma cuando su tama\u00f1o sea mayor, siguiendo, de forma general, la especificaci\u00f3n establecida por la pol\u00edtica de firma de la AGE: En el caso de que, debido al tama\u00f1o de los datos a firmar, no resulte t\u00e9cnicamente posible o aconsejable realizar las firmas con el formato anteriormente descrito (que la firma contenga los datos firmados) , se generar\u00e1 la estructura de firma detached, que incluye el hash del documento original en la firma. Debido a la generalidad de la especificaci\u00f3n, se permite al integrador definir qu\u00e9 tama\u00f1os de datos pueden incluirse dentro de la firma y cu\u00e1les no para su aplicaci\u00f3n, por lo que, en caso de haberse indicado expresamente un modo de firma (par\u00e1metro mode), se utilizar\u00e1 el valor establecido por el integrador. Si se configura para la operaci\u00f3n alguna propiedad individual que entre en conflicto con la pol\u00edtica indicada (por ejemplo, indicando un formato prohibido por esta), se ignorar\u00e1 esa propiedad individual y prevalecer\u00e1 el valor impuesto por la pol\u00edtica. Por ejemplo, si se configurasen las propiedades expPolicy=FirmaAGE y format=XAdES Enveloping, para una operaci\u00f3n de firma con formato XAdES, se generar\u00eda una firma XAdES Detached con la pol\u00edtica de firma de la AGE establecida. Es decir, se ignorar\u00eda que se estableci\u00f3 la propiedad format=XAdES Enveloping. Para m\u00e1s informaci\u00f3n sobre la pol\u00edtica de firma de la AGE puede consultar la gu\u00eda de implementaci\u00f3n de la pol\u00edtica: https://administracionelectronica.gob.es/ctt/politicafirma#.YBEdyzr0mbg . Para saber c\u00f3mo configurar propiedades en las operaciones de firma, consulte el apartado 7.1 Paso de par\u00e1metros adicionales .","title":"Pol\u00edtica de firma de la AGE v1.9"},{"location":"markdown_strict/MCF_manual-integrador_ES/#politica-de-firma-de-factura-electronica-facturae","text":"Para la firma de facturas electr\u00f3nicas se deber\u00e1 utilizar siempre el formato de firma FacturaE. Configurar este formato establecer\u00e1 autom\u00e1ticamente las propiedades necesarias para la firma de facturas electr\u00f3nicas, incluida la pol\u00edtica de firma. Las firmas generadas con este formato siempre son seg\u00fan la especificaci\u00f3n 3.1 de factura electr\u00f3nica.","title":"Pol\u00edtica de firma de Factura electr\u00f3nica (Facturae)"},{"location":"markdown_strict/MCF_manual-integrador_ES/#validacion-de-firmas-previas","text":"Las operaciones de cofirma y contrafirma se realizan sobre firmas generadas anteriormente. Salvo en casos concretos, el Cliente @Firma permite agregar nuevas firmas a cualquier firma compatible sin restricci\u00f3n. Esto implica que, por ejemplo, se podr\u00eda contrafirmar una firma que no sea v\u00e1lida por haberse caducado su certificado. Es posible que desde su aplicaci\u00f3n quiera restringirse, en la medida de lo posible, el que se cofirmen y contrafirmen firmas inv\u00e1lidas, para lo cual puede usarse la opci\u00f3n checkSignatures . checkSignatures=true Esta propiedad realiza una verificaci\u00f3n criptogr\u00e1fica de la firma y comprueba la caducidad de los certificados utilizados en ella. Esto no es una validaci\u00f3n completa de firma , ya que para considerar que la firma es v\u00e1lida deben realizarse otras operaciones no soportadas por el Cliente @firma, como la comprobaci\u00f3n del estado de revocaci\u00f3n de los certificados o la adhesi\u00f3n de la firma a la pol\u00edtica de firma que declare. Esta propiedad debe usarse para reducir la posibilidad de procesar firmas inv\u00e1lidas, pero es responsabilidad de la aplicaci\u00f3n saber si son v\u00e1lidas antes de enviarse a procesar o, si es el usuario el que selecciona expresamente estas firmas, el realizar una validaci\u00f3n posterior. Si durante el proceso de cofirma o contrafirma se detecta que la firma de entrada no es v\u00e1lida, el nuevo proceso de firma fallar\u00e1 y se notificar\u00e1 el error a trav\u00e9s del m\u00e9todo callback configurado. Si se pude completar este proceso de validaci\u00f3n, la multifirma continuar\u00e1 normalmente. La verificaci\u00f3n de las firmas previas es una operaci\u00f3n compatible con los siguientes formatos de firma: CAdES XAdES PAdES La verficaci\u00f3n se realiza tanto en la generaci\u00f3n de firmas monof\u00e1sicas en AutoFirma como trif\u00e1sicas con cualquiera de las aplicaciones de firma. En el caso de las firmas monof\u00e1sicas, la validaci\u00f3n se realiza al inicio del proceso de firma, mientras que en las firmas trif\u00e1sicas el proceso se realiza en servidor. Por este motivo, al realizar firmas trif\u00e1sicas se le pedir\u00e1 el certificado al usuario incluso si la firma no es v\u00e1lida, ya que esto es algo que no se identificar\u00e1 hasta m\u00e1s adelante en el proceso de firma. Si su despliegue es compatible con aplicaciones m\u00f3viles y desea que estas tambi\u00e9n validen la firma previa antes de agregar otra nueva, aseg\u00farese de que en estos entornos m\u00f3viles se configura el nombre de formato de firma que obliga a la generaci\u00f3n de la firma de forma trif\u00e1sica (CAdEStri, XAdEStri o PAdEStri).","title":"Validaci\u00f3n de firmas previas"},{"location":"markdown_strict/MCF_manual-integrador_ES/#formatos-de-firma","text":"El Cliente @firma permite la generaci\u00f3n de firmas en diversos formatos con diversos perfiles b\u00e1sicos. Las firmas en estos formatos pueden ser mejoradas a posteriori con otros productos para incluir la informaci\u00f3n longeva de firma. Los formatos avanzados soportados son: CAdES Formato avanzado de firma binaria. XAdES Formato avanzado de firma XML. PAdES Formato avanzado de firma de documentos PDF. FacturaE Formato para la firma de facturas electr\u00f3nicas. Se trata de una firma XAdES especialmente adaptada para cumplir los requisitos de firma de las facturas electr\u00f3nicas. El Cliente @firma soporta por retrocompatibilidad otros formatos de firma, pero ninguno de estos formatos se recoge en la pol\u00edtica de firma de la AGE, su uso est\u00e1 desaconsejado y no se proporciona soporte sobre los mismos: CMS Formato de firma binaria no avanzado. Se recomienda sustituir por el formato CAdES, con el que es compatible. XMLdSig Formato de firma XML no avanzado. Se recomienda sustituir por el formato XAdES, con el que es compatible. ODF Formato de firma basado en XMLdSig y utilizado por OpenOffice/LibreOffice. Se recomienda sustituirlo por firmas PAdES sobre documentos PDF para seguir gestion\u00e1ndolas junto al documento firmado o por firmas CAdES o XAdES si su sistema puede gestionar por separado el documento y la firma electronica. OOXML Formato de firma basado en XAdES y utilizado por Microsoft Office. Se recomienda sustituirlo por firmas PAdES sobre documentos PDF para seguir gestion\u00e1ndolas junto al documento firmado o por firmas CAdES o XAdES si su sistema puede gestionar por separado el documento y la firma electronica. Adicionalmente, se soporta el nombre de formato \u201cNONE\u201d para permitir realizar una firma sin formato (PKCS#1). La utilidad de esto es permitir generar el formato de firma externa y utilizar el Cliente @firma \u00fanicamente para generar el cifrado con el certificado del usuario. En los siguientes apartados, se proporciona informaci\u00f3n adicional de los principales formatos de firma soportados, junto con el listado de opciones del Cliente @firma para configurarlos.","title":"Formatos de firma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-de-firmas-cades","text":"Las firmas CAdES generadas por el Cliente @firma son, por defecto, acordes a todas las siguientes versiones del formato de firma: v1.7.3 (ETSI TS 101 733 v1.7.3) v1.7.4 (ETSI TS 101 733 v1.7.4) v1.8.1 (ETSI TS 101 733 v1.8.1) v1.8.3 (ETSI TS 101 733 v1.8.3) v2.1.1 (ETSI TS 101 733 v2.1.1) v2.2.1 (ETSI TS 101 733 v2.2.1) Las firmas CAdES no declaran cu\u00e1l es su versi\u00f3n de formato de firma, por lo que puede considerarse que una misma firma se ajusta a todas las versiones anteriormente listadas. El Cliente @firma permite generar firmas CAdES acordes a los siguientes perfiles de firma: CAdES-BES Todas las firmas CAdES generadas por el Cliente @firma sin pol\u00edtica de firma son consideradas CAdES-BES. CAdES-EPES Todas las firmas CAdES generadas por el Cliente @firma con pol\u00edtica de firma son consideradas CAdES-EPES. Hay que tener en cuenta que algunas de las firmas CAdES generadas por el Cliente @firma tambi\u00e9n pueden considerarse de tipo B-Level. Sin embargo, el Cliente @firma no incluye un modo de operaci\u00f3n que permita asegurar que las firmas generadas sean acordes a este perfil. Algunas de las propiedades de configuraci\u00f3n listadas en el apartado 8.1.3 Par\u00e1metros adicionales pueden afectar a la compatibilidad de las firmas generadas con algunas versiones o perfiles del formato. Consulte el apartado espec\u00edfico de cada propiedad para saber si esta afecta o no a la compatibilidad. Las firmas CAdES que el Cliente @firma genera por defecto no incluyen ni los datos firmados (firma expl\u00edcita) ni pol\u00edtica de firma y se ajusta al perfil CAdES-BES.","title":"Configuraci\u00f3n de firmas CAdES"},{"location":"markdown_strict/MCF_manual-integrador_ES/#algoritmos-de-firma","text":"Las firmas CAdES generadas por el Cliente @firma aceptan los siguientes algoritmos de firma: SHA512withRSA SHA384withRSA SHA256withRSA SHA1withRSA (No recomendado) No es recomendable usar el algoritmo SHA1withRSA por estar obsoleto y ser vulnerable. El algoritmo m\u00e1s seguro y, por lo tanto, el recomendado para su uso es SHA512withRSA. Si los certificados del usuario se encuentran en tarjeta inteligente, aseg\u00farese de disponer de la \u00faltima versi\u00f3n de su controlador para garantizar la compatibilidad con estos algoritmos de firma. En caso de que, a\u00fan as\u00ed, no pueda utilizar este algoritmo con su tarjeta inteligente, consulte la informaci\u00f3n de compatibilidad de su tarjeta y/o pruebe con otro algoritmo.","title":"Algoritmos de firma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#firmas-cades-implicitas-o-explicitas","text":"Las firmas CAdES pueden incluir internamente una copia de los datos firmados (firmas impl\u00edcitas o \u201c attached \u201d) o no incluirlos (firmas expl\u00edcitas o \u201c detached \u201d). El Cliente @firma por defecto genera firmas expl\u00edcitas, m\u00e1s peque\u00f1as en tama\u00f1o, pero es posible que desee generar firmas impl\u00edcitas para disponer en un s\u00f3lo fichero de los datos y la firma electr\u00f3nica, as\u00ed como tener toda la informaci\u00f3n necesaria para la validaci\u00f3n completa de la firma. Para generar firmas impl\u00edcitas, debe indicar el siguiente par\u00e1metro adicional: mode=implicit","title":"Firmas CAdES impl\u00edcitas o expl\u00edcitas"},{"location":"markdown_strict/MCF_manual-integrador_ES/#parametros-adicionales","text":"A continuaci\u00f3n, se detallan los par\u00e1metros adicionales que aceptan cada una de las operaciones de firma. Es posible que el uso de par\u00e1metros no contemplados en las siguientes tablas provoque otros cambios de funcionamiento del Cliente o en la informaci\u00f3n contenida en las firmas CAdES. No obstante, no se dar\u00e1 soporte al aplicativo si se usan par\u00e1metros no documentados, asumiendo el integrador todo el riesgo y responsabilidad derivados del uso de par\u00e1metros o valores distintos de los aqu\u00ed descritos.","title":"Par\u00e1metros adicionales"},{"location":"markdown_strict/MCF_manual-integrador_ES/#firma-y-cofirma","text":"Nombre del par\u00e1metro Valores posibles Descripci\u00f3n mode explicit La firma resultante no incluir\u00e1 los datos firmados. Si no se indica el par\u00e1metro mode se configura autom\u00e1ticamente este comportamiento. implicit La firma resultante incluir\u00e1 internamente una copia de los datos firmados. El uso de este valor podr\u00eda generar firmas de gran tama\u00f1o. En las cofirmas, este par\u00e1metro se ignorar\u00e1 si los datos ya estaban contenidos en la firma original o si no se proporcionan los datos. contentTypeOid OID Identificador del tipo de dato firmado. contentDescription [Texto] Descripci\u00f3n textual del tipo de datos firmado. includeMimeTypeAttribute true Incluye en la firma el atributo id-aa-ets-mimeType definido en CAdES v2.1.1 y superiores (v\u00e1lido en firmas baseline). El valor de mimetype se tomar\u00e1 de la propiedad mimetype o, si no se incluyo, se extrapolar\u00e1 de la propiedad contentTypeOid. Si tampoco fuese posible, se tratar\u00e1n de obtener estos valores de alguna de las firmas previas (en caso de cofirmas). Si tampoco fuese posible, se obtendr\u00e1 el tipo del an\u00e1lisis de los datos (que podr\u00eda no ser correcto o concreto). En caso de que no se pueda obtener el tipo de ninguna manera, se usar\u00e1 el mimetype application/octet-stream. false No incluye el atributo id-aa-ets-mimeType en la firma. Valor por defecto. mimeType [Texto en formato MIME-Type] MIME-Type de los datos a firmar. S\u00f3lo se incluye cuando se indica la propiedad includeMimeTypeAttribute. policyIdentifier [OID o URN de tipo OID] Identificador de la pol\u00edtica de firma, necesario para generar firmas CAdES-EPES. policyIdentifierHash [Valor en Base64] Huella digital de la pol\u00edtica de firma. Es obligatorio indicar este par\u00e1metro si de indic\u00f3 tambi\u00e9n policyIdentifier, al igual que es obligatorio tambi\u00e9n dar valor al par\u00e1metro policyIdentifierHashAlgorithm. policyIdentifierHashAlgorithm SHA1 Indica que la huella digital indicada en la propiedad policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA1. SHA-256 Indica que la huella digital indicada en la propiedad policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-256. SHA-384 Indica que la huella digital indicada en la propiedad policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-284. SHA-512 Indica que la huella digital indicada en la propiedad policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-512. policyQualifier [URL hacia documento] URL (universalmente accesible) hacia el documento (normalmente PDF) que contiene una descripci\u00f3n textual de la pol\u00edtica de firma. Esta propiedad es opcional incluso si se desea generar firmas CAdES-EPES. includeOnlySignningCertificate true Indica que debe incluirse en la firma \u00fanicamente el certificado del firmante. false Indica que debe incluirse en la firma toda la cadena de certificaci\u00f3n del certificado firmante. Valor por defecto. signatureProductionCity [Texto] Agrega a la firma un campo con la ciudad en la que se realiza la firma. La codificaci\u00f3n debe ser UTF-8. signatureProductionPostalCode [Texto] Agrega a la firma un campo con el c\u00f3digo postal en donde se realiza la firma. La codificaci\u00f3n debe ser UTF-8. signatureProductionCountry [Texto] Agrega a la firma un campo con el pa\u00eds en la que se realiza la firma. La codificaci\u00f3n debe ser UTF-8. signerClaimedRoles [Texto] Agrega a la firma campos con los cargos atribuidos al firmante. Deben separarse los cargos con el car\u00e1cter \u201c|\u201d (y este no puede estar en el propio texto de ning\u00fan cargo). commitmentTypeIndications [Entero] Indica el n\u00famero de CommitmentTypeIndications que se van a declarar. Estos son los motivos que se declaran para la firma. Los valores concretos se especifican con commitmentTypeIndication n Identifier y commitmentTypeIndication n Description, donde \u2018 n \u2019 va desde 0 hasta el valor indicado en esta propiedad menos 1. commitmentTypeIndication n Identifier 1 Establece que el CommitmentTypeIndications n\u00famero n (contando desde cero) es \u201c Prueba de origen \u201d. 2 Establece que el CommitmentTypeIndications n\u00famero n (contando desde cero) es \u201c Prueba de recepci\u00f3n \u201d. 3 Establece que el CommitmentTypeIndications n\u00famero n (contando desde cero) es \u201c Prueba de entrega \u201d. 4 Establece que el CommitmentTypeIndications n\u00famero n (contando desde cero) es \u201c Prueba de env\u00edo \u201d. 5 Establece que el CommitmentTypeIndications n\u00famero n (contando desde cero) es \u201c Prueba de aprobaci\u00f3n \u201d. 6 Establece que el CommitmentTypeIndications n\u00famero n (contando desde cero) es \u201c Prueba de creaci\u00f3n \u201d. commitmentTypeIndication n CommitmentTypeQualifiers [Texto] Lista de indicadores textuales separados por el car\u00e1cter '|' que se aportan como calificadores adicionales del CommitmentTypeIndication n\u00famero n (atributo opcional). Normalmente son OID. Los elementos de la lista no pueden contener el car\u00e1cter '|' (ya que este se usa como separador). signingCertificateV2 true Se incluir\u00e1 el atributo SigningCertificateV2 en la firma. false (U otro valor) Se incluir\u00e1 el atributo SigningCertificate en la firma Sin especificar Se incluir\u00e1 SigningCertificate si la firma utiliza un algoritmo de firma SHA1 y SigningCertificateV2 para el resto de los algoritmos. includeSigningTimeAttribute true Se incluye en la firma la marca de tiempo con la hora del equipo. Valor por defecto. false No se incluye la marca de tiempo en la firma. Esta opci\u00f3n s\u00f3lo se deber\u00eda usar para generar una firma apta para componer una firma PAdES. includeContentHintAttribute true Se incluye el atributo content-hints en la firma con la informaci\u00f3n de los datos firmados. Este valor se ignorar\u00e1 cuando se configure expresamente un tipo de firma que no permite este atributo. Valor por defecto. false No se incluye el atributo content-hints en la firma. Esta opci\u00f3n s\u00f3lo se deber\u00eda usar para generar una firma apta para componer una firma PAdES. allowSignLTSignature true Se permite la cofirma/contrafirma de firmas de archivo longevo, a pesar de que estas no ser\u00e1n v\u00e1lidas posteriormente. false (U otro valor) No se permite la cofirma/contrafirma de firmas de archivo longevo. Sin especificar Se consultar\u00e1 al usuario en caso de intentar confirmarse/contrafirmarse una firma de archivo longevo.","title":"Firma y cofirma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#contrafirma","text":"Nombre del par\u00e1metro Valores posibles Descripci\u00f3n policyIdentifier [OID o URN de tipo OID] Identificador de la pol\u00edtica de firma, necesario para generar firmas CAdES-EPES. policyIdentifierHash [Valor en Base64] Huella digital de la pol\u00edtica de firma. Es obligatorio indicar esta propiedad si de indic\u00f3 tambi\u00e9n policyIdentifier, al igual que es obligatorio tambi\u00e9n dar valor al par\u00e1metro policyIdentifierHashAlgorithm. policyIdentifierHashAlgorithm SHA1 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA1. SHA-256 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-256. SHA-384 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-284. SHA-512 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-512. policyQualifier [URL hacia documento] URL (universalmente accesible) hacia el documento (normalmente PDF) que contiene una descripci\u00f3n textual de la pol\u00edtica de firma. Esta propiedad es opcional incluso si se desea generar firmas CAdES-EPES. includeOnlySignningCertificate true Indica que debe incluirse en la firma \u00fanicamente el certificado del firmante. false Indica que debe incluirse en la firma toda la cadena de certificaci\u00f3n del certificado firmante. Valor por defecto. signerClaimedRoles [Texto] Agrega a la firma campos con los cargos atribuidos al firmante. Deben separarse los cargos con el car\u00e1cter \u201c|\u201d (y este no puede estar en el propio texto de ning\u00fan cargo). signatureProductionCity [Texto] Agrega a la firma un campo con la ciudad en la que se realiza la firma. La codificaci\u00f3n debe ser UTF-8. signatureProductionPostalCode [Texto] Agrega a la firma un campo con el c\u00f3digo postal en donde se realiza la firma. La codificaci\u00f3n debe ser UTF-8. signatureProductionCountry [Texto] Agrega a la firma un campo con el pa\u00eds en la que se realiza la firma. La codificaci\u00f3n debe ser UTF-8. commitmentTypeIndications [Entero] Indica el n\u00famero de CommitmentTypeIndications que se van a declarar. Estos son los motivos que se declaran para la firma. Los valores concretos se especifican con commitmentTypeIndication n Identifier y commitmentTypeIndication n Description, donde \u2018 n \u2019 va desde 0 hasta el valor menos 1 indicado en esta propiedad. commitmentTypeIndication n Identifier 1 Establece que el CommitmentTypeIndication n\u00famero n es \u201c Prueba de origen \u201d. 2 Establece que el CommitmentTypeIndication n\u00famero n es \u201c Prueba de recepci\u00f3n \u201d. 3 Establece que el CommitmentTypeIndication n\u00famero n es \u201c Prueba de entrega \u201d. 4 Establece que el CommitmentTypeIndication n\u00famero n es \u201c Prueba de env\u00edo \u201d. 5 Establece que el CommitmentTypeIndication n\u00famero n es \u201c Prueba de aprobaci\u00f3n \u201d. 6 Establece que el CommitmentTypeIndication n\u00famero n es \u201c Prueba de creaci\u00f3n \u201d. commitmentTypeIndication n CommitmentTypeQualifiers [OID] Lista de OID separados por el caracter '|' que se aportan como calificadores adicionales del CommitmentTypeIndication n\u00famero n (atributo opcional). allowSignLTSignature true Se permite la cofirma/contrafirma de firmas de archivo longevo, a pesar de que estas no ser\u00e1n v\u00e1lidas posteriormente. false (U otro valor) No se permite la cofirma/contrafirma de firmas de archivo longevo. Sin especificar Se consultar\u00e1 al usuario en caso de intentar confirmarse/contrafirmarse una firma de archivo longevo.","title":"Contrafirma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-de-firmas-xades","text":"Las firmas XAdES generadas por defecto con el Cliente @firma son acordes a la versi\u00f3n 1.3.2 del formato de firma (ETSI TS 101 903 v1.3.2). Es posible configurar las operaciones de firma para que se generen conforme a la versi\u00f3n 1.4.1 del formato (ETSI TS 101 903 v1.4.1). Para ello, ser\u00e1 necesario configurar los par\u00e1metros adicionales xadesNamespace y signedPropertiesTypeUrl. El Cliente @firma permite generar firmas acordes a los siguientes perfiles: XAdES-BES Todas las firmas XAdES generadas por el Cliente @firma sin pol\u00edtica de firma son consideradas XAdES-BES. XAdES-EPES Todas las firmas XAdES generadas por el Cliente @firma con pol\u00edtica de firma son consideradas XAdES-EPES. Hay que tener en cuenta que algunas de las firmas XAdES generadas por el Cliente @firma tambi\u00e9n pueden considerarse de tipo B-Level. Sin embargo, El Cliente @firma versi\u00f3n 1.7 no incluye un modo de operaci\u00f3n que permita asegurar que las firmas generadas sean acordes a este perfil. Con independencia del perfil de firma, es posible realizar las firmas XAdES en cuatro modos diferentes: Enveloping (Por defecto) Enveloped Internally Detached (tambi\u00e9n referida en este documento como Detached ) Externally Detached Algunas de las propiedades de configuraci\u00f3n listadas en el apartado 8.2.7 Par\u00e1metros adicionales pueden afectar a la compatibilidad de las firmas generadas con algunas versiones del formato o perfiles de firma. Consulte el apartado espec\u00edfico de cada propiedad para saber si esta afecta o no a la compatibilidad.","title":"Configuraci\u00f3n de firmas XAdES"},{"location":"markdown_strict/MCF_manual-integrador_ES/#algoritmos-de-firma_1","text":"Las firmas XAdES aceptan los siguientes algoritmos de firma (deben escribirse exactamente como aqu\u00ed se muestran): SHA512withRSA SHA384withRSA SHA256withRSA SHA1withRSA (No recomendado) No es recomendable usar el algoritmo SHA1withRSA por estar obsoleto y ser vulnerable. El algoritmo m\u00e1s seguro y, por lo tanto, el recomendado para su uso es SHA512withRSA. Si los certificados del usuario se encuentran en tarjeta inteligente, aseg\u00farese de disponer de la \u00faltima versi\u00f3n de su controlador para garantizar la compatibilidad con estos algoritmos de firma. En caso de que, a\u00fan as\u00ed, no pueda utilizar este algoritmo con su tarjeta inteligente, consulte la informaci\u00f3n de compatibilidad de su tarjeta y/o pruebe con otro algoritmo.","title":"Algoritmos de firma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#algoritmos-de-huella-digital-para-las-referencias","text":"XAdES hace c\u00e1lculos de huella digital ( hash ) para cada una de las referencias firmadas. El algoritmo por defecto para estas huellas es SHA-512. Este puede cambiarse mediante el par\u00e1metro adicional referencesDigestMethod. En el caso de las referencias de las firmas con manifest, el algoritmo de huella se toma del par\u00e1metro adicional precalculatedHashAlgorithm. En caso de que esta propiedad no se indique, se utilizar\u00eda el algoritmo del par\u00e1metro referencesDigestMethod o, de no estar configurado, el algoritmo SHA-512. Consulte el apartado 8.2.7 Par\u00e1metros adicionales para conocer los valores que pueden adoptar estos par\u00e1metros.","title":"Algoritmos de huella digital para las referencias"},{"location":"markdown_strict/MCF_manual-integrador_ES/#situacion-del-nodo-de-firma-en-xades-enveloped","text":"Cliente @firma sit\u00faa por defecto la firma electr\u00f3nica en las firmas XAdES Enveloped en un nodo \u201cSignature\u201d directamente como hijo de la ra\u00edz del XML. No obstante, hay situaciones en las que puede interesar situar este nodo de firma en otra posici\u00f3n del XML. Para ello, puede usarse el par\u00e1metro adicional insertEnvelopedSignatureOnNodeByXPath, en el que, mediante una expresi\u00f3n XPath v1, podemos indicar el nodo en el que queremos se inserte la firma (el nodo \u201cSignature\u201d pasar\u00e1 a ser el primer hijo de este). Si la expresi\u00f3n XPath resolviese varios nodos, se usar\u00e1 el primero de ellos. Por ejemplo, en el siguiente XML: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <bookstore> <book category= \"COOKING\" > <title lang= \"en\" >Everyday Italian</title> <author>Giada De Laurentiis</author> <year>2005</year> <price>30.00</price> </book> <book category= \"CHILDREN\" > <title lang= \"en\" >Harry Potter</title> <author>J K. Rowling</author> <year>2005</year> <price>29.99</price> </book> </bookstore> Si indicamos el par\u00e1metro con este valor: insertEnvelopedSignatureOnNodeByXPath = /bookstore/book[1]/title La firma se insertar\u00e1 como nodo hijo del t\u00edtulo del primer libro: <?xml version= \"1.0\" encoding= \"UTF-8\" ?> <bookstore> <book category= \"COOKING\" > <title lang= \"en\" > Everyday Italian <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" Id=\"S1\"> \u2026 </ds:Signature> </title> <author>Giada De Laurentiis</author> <year>2005</year> <price>30.00</price> </book> <book category= \"CHILDREN\" > <title lang= \"en\" >Harry Potter</title> <author>J K. Rowling</author> <year>2005</year> <price>29.99</price> </book> </bookstore> Si en la expresi\u00f3n XPath desea referenciar nodos dentro de un espacio de nombres, debe usar funciones XPath como namespace-uri() o local-name(). Por ejemplo, para seleccionar el primer nodo dentro del espacio de nombres de factura electr\u00f3nica podr\u00edamos usar la expresi\u00f3n: //*[namespace-uri()='http://www.facturae.es/Facturae/2007/v3.1/Facturae']","title":"Situaci\u00f3n del nodo de firma en XAdES Enveloped"},{"location":"markdown_strict/MCF_manual-integrador_ES/#transformaciones-sobre-el-contenido-a-firmar","text":"Es posible declarar transformaciones adicionales sobre el contenido a firmar. Esto se realizar\u00e1 mediante las siguientes propiedades: xmlTransform n Type Tipo de transformaci\u00f3n. xmlTransform n Subtype Subtipo de transformaci\u00f3n. xmlTransformnBody: Transformaci\u00f3n espec\u00edfica. Las combinaciones de valores que pueden adoptar estas propiedades son: Transformaci\u00f3n XPATH Tipo: http://www.w3.org/TR/1999/REC-xpath-19991116 Subtipos: No tiene subtipos. Cuerpo: Especificado mediante sentencias de tipo XPATH. Transformaci\u00f3n XPATH2 Tipo: http://www.w3.org/2002/06/xmldsig-filter2 Subtipos: subtract: Resta. intersect: Intersecci\u00f3n union: Uni\u00f3n Cuerpo: Especificado mediante sentencias de tipo XPATH2. Transformaci\u00f3n BASE64. La transformaci\u00f3n es inversa, es decir, los datos se decodifican desde Base64 antes de firmarse, por lo que estos deben estar previamente codificados en Base64 e indicarse mediante el par\u00e1metro adicional \u201cencodign=base64\u201c. Tipo: http://www.w3.org/2000/09/xmldsig#base64 Subtipos: No tiene subtipos. Cuerpo: No tiene cuerpo. No es posible especificar transformaciones complejas que incluyan varias sentencias. En su lugar, puede declararse una sucesi\u00f3n de transformaciones simples que produzcan el mismo resultado. Cada una de las transformaciones se aplicar\u00e1 de forma ordenada sobre el resultado de la anterior. El listado de transformaciones se inicia con aquella declarada con el \u00edndice 0. Por ejemplo, si se desean insertar 2 transformaciones adicionales, se deber\u00e1n establecer los par\u00e1metros: xmlTransforms=2 xmlTransform0Type=\u2026 xmlTransform0Subtype=\u2026 (Opcional) xmlTransform0Body=\u2026 xmlTransform1Type=\u2026 xmlTransform1Subtype=\u2026 (Opcional) xmlTransform1Body=\u2026","title":"Transformaciones sobre el contenido a firmar"},{"location":"markdown_strict/MCF_manual-integrador_ES/#uso-de-estructuras-manifest-en-firmas-xades","text":"Es posible crear firmas XAdES en las que, siguiendo el punto 2.3 de la especificaci\u00f3n XMLDSig ( http://www.w3.org/TR/2000/WD-xmldsig-core-20000510/#sec-o-Manifest ), las referencias XML no se firmen directamente, sino que se firme una estructura de tipo Manifest que a su vez contenga las referencias a firmar. De esta forma, tal y como indica la normativa, la resoluci\u00f3n de las referencias incluidas dentro de una estructura Manifest no es responsabilidad del sistema validador, sino de la aplicaci\u00f3n que gener\u00f3 la firma o una delegada por la misma. Al unir esto con el uso de referencias a datos externos a la firma, obtenemos la ventaja de que la firma no contendr\u00e1 los datos firmados (muy recomendable para trabajar con datos grandes) y que la plataforma validadora no tiene que acceder a los datos para comprobar la validez de la propia firma. Consulte la especificaci\u00f3n XMLDSig para m\u00e1s informaci\u00f3n. De igual manera que el sistema validador no tiene que acceder a los datos referenciados desde el manifest , no ser\u00e1 responsabilidad del Cliente @firma acceder a estos datos para su an\u00e1lisis y el c\u00e1lculo de su huella digital. La propia aplicaci\u00f3n que ordena la firma ser\u00e1 la encargada de proporcionar al Cliente @firma las referencias a los datos y la huella digital de los mismos. Las referencias a los datos firmados en un Manifest se expresan mediante direcciones URI. Estas URI no tiene necesariamente que ser una URL, as\u00ed puede estructurarse de la manera necesaria para ayudar a determinar inequ\u00edvocamente cuales son los datos que se firman. Por ejemplo, podr\u00edamos construir una URI en forma de URN, en la que referenci\u00e1semos a un recurso concreto dentro de uno de nuestros gestores de contenido, para lo que podr\u00edamos crear una URN a medida que tuviese los datos necesarios para identificar el repositorio de datos y el recurso en cuesti\u00f3n: urn:rp:mirp:asset:CDC8D258 Un sistema de validaci\u00f3n externo no resolver\u00e1 la URI que referencia a los datos desde un Manifest , ya que puede que esta s\u00f3lo sea accesible y/o comprensible desde el entorno en el que se gener\u00f3 la firma. Por ende, la propia aplicaci\u00f3n que firma los datos mediante Manifest o una aplicaci\u00f3n delegada por la misma debe poder asegurar que los datos referenciados mediante la URI no cambiaran y ser capaz de comprobarlos calculando su huella digital ( hash ). Para aprovechar todas las ventajas de las firmas Manifest , todas las firmas Manifest generadas por el Cliente @firma ser\u00e1n externally detached , independientemente de la configuraci\u00f3n establecida. Un ejemplo muy simplificado de la estructura de una firma con Manifest ser\u00eda: <ds:Signature Id= \"Signature-02553\" > <ds:SignedInfo> <ds:Reference Id= \"Reference-894bfd39\" Type= http://www.w3.org/2000/09/xmldsig#Manifest URI= \"#Manifest-36e2de7b\" > \u2026 </ds:Reference> </ds:SignedInfo> \u2026 <ds:Object Id= \"ManifestObject-ffd54e53\" > <ds:Manifest Id= \"Manifest-36e2de7b\" > <ds:Reference Id= \"Reference-894bfd39\" URI= \"myscheme://path/file\" > <ds:DigestMethod Algorithm= \"http://www.w3.org/2001/04/xmlenc#sha512\" /> <ds:DigestValue>\u2026</ds:DigestValue> </ds:Reference> </ds:Manifest> </ds:Object> \u2026 </ds:Signature> En este ejemplo, el contenido firmado es \u201c myscheme://path/file \u201d, pero al firmar no se ha intentado acceder a ese fichero, y se ha asignado la huella digital proporcionada como la correspondiente a los datos.","title":"Uso de estructuras Manifest en firmas XAdES"},{"location":"markdown_strict/MCF_manual-integrador_ES/#generar-firma-manifest-con-el-cliente-firma","text":"Para crear firmas XAdES con estructuras manifest desde el Cliente @firma debe especificarse el par\u00e1metro adicional useManifest con el valor \u201ctrue\u201d. Adicionalmente, se deber\u00e1 indicar la URI y la huella digital ( hash ) de los datos firmados. El Cliente @firma permite firmar m\u00e1s de un dato simult\u00e1neamente mediante manifest as\u00ed que ser\u00e1 posible indicar m\u00e1s de una URI y huella digital al configurar una firma manifest . Como resultado, se obtendr\u00e1 una \u00fanica firma que engloba todas las referencias. Para que esta firma tuviese validez completa, todos los datos referenciarlos deber\u00edan mantenerse sin cambios a lo largo del tiempo. Para generar firmas manifest deber\u00e1n indicarse a trav\u00e9s de los par\u00e1metros adicionales de la aplicaci\u00f3n las propiedades que se listan a continuaci\u00f3n por cada referencia a firmar. Para ello, se sustituir\u00e1 la \u2018X\u2019 del nombre del par\u00e1metro por el n\u00famero de referencia en cuesti\u00f3n (empezando en 1): uriX Obligatorio. URI que referencia a los datos. mdX Obligatorio. Huella digital ( hash ) en Base64 de los datos. El algoritmo de huella digital se indicar\u00e1 mediante el par\u00e1metro \u201cprecalculatedHashAlgorithm\u201d. mimeTypeX Opcional. MimeType correspondiente a los datos referenciados. Si no se indica, se usar\u00e1 \u201capplication/octet-stream\u201d. contentTypeOidX Opcional. OID correspondiente al tipo de dato referenciado. Si no se indica, se intentar\u00e1 extrapolar a partir del MimeType. En caso de no conseguirlo, no se usar\u00e1 ninguno. encodingX Opcional. URI identificadora de la codificaci\u00f3n de los datos si estuviesen codificados. Por defecto, no se usa ninguna. precalculatedHashAlgorithm Algoritmo de huella digital que se ha utilizado para calcular la huella de los datos. Esta propiedad aplica a todas las referencias insertadas. Si no se indica, se hereda la configuraci\u00f3n del par\u00e1metro \u201creferencesDigestMethod\u201d. Si este otro par\u00e1metro tampoco se indicase se interpretar\u00e1 que las huellas digitales se han calculado con el algoritmo SHA-512. Al realizar firmas manifest no ser\u00e1 necesario indicar datos en el par\u00e1metro de datos del m\u00e9todo de firma del Cliente. El propio Cliente detectar\u00e1 que se va a realizar una firma manifest y no solicitar\u00e1 estos datos al usuario. Por ejemplo, podr\u00edamos hacer una firma manifest de unos datos usando los siguientes par\u00e1metros adicionales ( extraParams ): useManifest=true uri1=urn:id:3086 md1=4hrn/3Y9c/fn/uyq12w+D9A2aKc= mimeType1=plain/xml precalculatedHashAlgorithm=SHA-1 En la llamada al m\u00e9todo de firma, adem\u00e1s de estos extraParams , indicar\u00edamos null como el par\u00e1metro de datos a firmar: AutoScript.sign ( null , \"SHA512withRSA\", \"XAdES\", extraParams, successCallback, errorCallback); Como resultado, obtendremos una firma XAdES Detached con un manifest , en el que aparecer\u00e1 la referencia indicada a los datos y su huella digital.","title":"Generar firma manifest con el Cliente @firma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#tratamiento-de-las-hojas-de-estilo-xsl-de-los-xml-a-firmar","text":"Cuando se firma o cofirma (no aplica a la contrafirma) un XML que contiene hojas de estilo, estas se firman igualmente a menos que se indique lo contrario con el par\u00e1metro ignoreStyleSheets. Las reglas que se siguen para procesar las hojas de estilo son las siguientes: Referencia / Formato XAdES Enveloped XAdES Enveloping XAdES Internally Detached XAdES Externally Detached Ruta relativa a la hoja de estilo No se firma No se firma No se firma No se firma Ruta absoluta a la hoja de estilo Se incluye la declaraci\u00f3n a la hoja de estilo y se firma una referencia canonizada a la hoja de estilo. Se firma una referencia canonizada a la hoja de estilo. Se firma una referencia canonizada a la hoja de estilo. No se firma Hoja de estilo empotrada Se incluye la declaraci\u00f3n a la hoja de estilo No es necesaria ninguna acci\u00f3n No es necesaria ninguna acci\u00f3n No se firma","title":"Tratamiento de las hojas de estilo XSL de los XML a firmar"},{"location":"markdown_strict/MCF_manual-integrador_ES/#parametros-adicionales_1","text":"A continuaci\u00f3n, se detallan los par\u00e1metros adicionales que aceptan cada una de las operaciones de firma. Es posible que el uso de par\u00e1metros no contemplados en las siguientes tablas provoque otros cambios de funcionamiento. No obstante, no se dar\u00e1 soporte al aplicativo si se usan par\u00e1metros no documentados, asumiendo el integrador todo el riesgo y responsabilidad derivados del uso de par\u00e1metros o valores distintos de los aqu\u00ed descritos.","title":"Par\u00e1metros adicionales"},{"location":"markdown_strict/MCF_manual-integrador_ES/#firma-y-cofirma_1","text":"Nombre del par\u00e1metro Valores posibles Descripci\u00f3n insertEnvelopedSignatureOnNodeByXPath [Texto (expresi\u00f3n XPath v1)] Indica, mediante una expresi\u00f3n XPath (v1), el nodo bajo el cual debe insertarse el nodo de firma en el caso de una firma Enveloped . Si la expresi\u00f3n devuelve m\u00e1s de un nodo, se usa solo el primero. Si la expresi\u00f3n no devuelve nodos o est\u00e1 mal construida se lanzar\u00e1 una excepci\u00f3n. Esta propiedad solo tiene efecto en firmas Enveloped . useManifest true Usa un Manifest de XMLDSig con las referencias de firma en vez de firmar directamente estas referencias. Se ignora en la operaci\u00f3n de cofirma. Esto permite que sea opcional la comprobaci\u00f3n del destino y huellas digitales de las referencias. false Genera las firmas normalmente, sin Manifest (comportamiento por defecto) uri [URI] URI que referencia a los datos que se desean firmar en una firma Externally Detached . La huella de los datos se proporcionar\u00e1 en el propio par\u00e1metro de datos y el algoritmo de huella a trav\u00e9s de \u201cprecalculatedHashAlgorithm\u201d. uri n [URI] URI que referencia a los datos que se desean firmar dentro de una firma manifest . \u2018 n \u2019 indica el n\u00famero de referencia de entre las que se quieren firmar, empezando en \u20181\u2019. md n [Texto Base64] Huella digital de los datos asociados a la referencia \u2018 n \u2019 en una firma manifest . mimeType n [Texto en formato MIME-Type] MIME-Type de los datos asociados a la referencia \u2018 n \u2019 en una firma manifest . Si no se indica esta propiedad, se utilizar\u00e1 el tipo \u2018application/octet-stream\u2019. contentTypeOid n [OID o URN de tipo OID] Identificador del tipo de dato firmado para la referencia n\u00famero \u2018 n \u2019 en una firma manifest . Esta propiedad es complementaria (que no excluyente) al par\u00e1metro mimeTypeX. encoding n [URI] Codificaci\u00f3n de los datos asociados a la referencia n\u00famero \u2018 n \u2019 en una firma manifest. Un uso incorrecto de esta propiedad puede provocar la generaci\u00f3n de una firma inv\u00e1lida. precalculatedHashAlgorithm SHA1 Indica que las huellas digitales de los datos referenciados en el manifest se calcularon mediante el algoritmo SHA1. SHA-256 Indica que las huellas digitales de los datos referenciados en el manifest se calcularon mediante el algoritmo SHA-256. SHA-384 Indica que las huellas digitales de los datos referenciados en el manifest se calcularon mediante el algoritmo SHA-384. SHA-512 Indica que las huellas digitales de los datos referenciados en el manifest se calcularon mediante el algoritmo SHA-512. addKeyInfoKeyValue true Incluye el nodo KeyValue dentro de KeyInfo de XAdES (comportamiento por defecto). false No incluye el nodo KeyValue dentro de KeyInfo de XAdES. addKeyInfoKeyName true Incluye el nodo KeyName dentro de KeyInfo de XAdES. false No incluye el nodo KeyName dentro de KeyInfo de XAdES (comportamiento por defecto). avoidXpathExtraTransformsOnEnveloped true Evita la inclusi\u00f3n de la transformaci\u00f3n XPATH2 que normalmente se a\u00f1ade para posibilitar las cofirmas y que elimina todas las firmas del documento para dejar \u00fanicamente el contenido. ADVERTENCIA: La cofirma de un documento en el que al menos una de las firmas no incluye la transformaci\u00f3n XPATH, dar\u00e1 lugar a un documento de firma que potencialmente ser\u00e1 validado incorrectamente por los validadores de firma. Por este motivo, s\u00f3lo se permite el uso de esta propiedad en la operaci\u00f3n de firma (no en la de cofirma). false Incluye la transformaci\u00f3n XPATH2 posibilita las cofirmas eliminando todas las firmas del documento para dejar \u00fanicamente el contenido (comportamiento por defecto). format XAdES Enveloping Genera firmas en formato Enveloping . Este es el formato que se utiliza por defecto cuando no se indica ninguno. XAdES Enveloped Genera firmas en formato Enveloped . XAdES Detached Genera firmas en formato Internally Detached . XAdES Externally Detached Genera firmas en formato Externally Detached . includeOnlySignningCertificate true Indica que debe incluirse en la firma \u00fanicamente el certificado del firmante. false Indica que debe incluirse en la firma toda la cadena de certificaci\u00f3n del certificado firmante. Valor por defecto. policyIdentifier [URL] Identificador de la pol\u00edtica de firma (normalmente una URL hacia la pol\u00edtica en formato XML procesable), necesario para generar firmas XAdES-EPES. policyIdentifierHash [Valor en Base64] Huella digital de la pol\u00edtica de firma. Es obligatorio indicar esta propiedad si el valor indicado en policyIdentifier no es universalmente accesible. Si se da valor a esta propiedad es obligatorio tambi\u00e9n dar valor al par\u00e1metro policyIdentifierHashAlgorithm. policyIdentifierHashAlgorithm SHA1 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA1. SHA-256 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-256. SHA-384 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-384. SHA-512 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-512. policyQualifier [URL hacia documento] URL (universalmente accesible) hacia el documento (normalmente PDF) que contiene una descripci\u00f3n textual de la pol\u00edtica de firma. Esta propiedad es opcional incluso si se desea generar firmas XAdES-EPES. policyDescription [Texto] Descripci\u00f3n textual de la pol\u00edtica de firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. Esta propiedad es opcional incluso si se desea generar firmas XAdES-EPES. signerClaimedRoles [Texto] Agrega a la firma campos con los cargos atribuidos al firmante. Deben separarse los cargos con el car\u00e1cter \u201c|\u201d (y este no puede estar en el propio texto de ning\u00fan cargo). En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionCity [Texto] Agrega a la firma un campo con la ciudad en la que se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionProvince [Texto] Agrega a la firma un campo con la provincia en la que se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionPostalCode [Texto] Agrega a la firma un campo con el c\u00f3digo postal en donde se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionCountry [Texto] Agrega a la firma un campo con el pa\u00eds en el que se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. referencesDigestMethod http://www.w3.org/2000/09/xmldsig#sha1 Usa el algoritmo SHA1 para el c\u00e1lculo de las huellas digitales de las referencias XML firmadas. http://www.w3.org/2001/04/xmlenc#sha256 Usa el algoritmo SHA-256 para el c\u00e1lculo de las huellas digitales de las referencias XML firmadas. http://www.w3.org/2001/04/xmlenc#sha512 Usa el algoritmo SHA-512 para el c\u00e1lculo de las huellas digitales de las referencias XML firmadas. Este es el comportamiento por defecto. mimeType [Texto en formato MIME-Type] MIME-Type de los datos a firmar. Si no se indica esta propiedad el sistema intenta auto-detectar el tipo, estableciendo el m\u00e1s aproximado (que puede no ser el estrictamente correcto). encoding [URI] Codificaci\u00f3n de los datos a firmar (vease la documentaci\u00f3n del elemento Object de XMLDSig para m\u00e1s informaci\u00f3n). Un uso incorrecto de esta propiedad puede provocar la generaci\u00f3n de una firma inv\u00e1lida. Si se proporcionan datos a firmar previamente codificados en Base 64 pero se desea sean considerados como su forma descodificada, debe establecerse este valor a http://www.w3.org/2000/09/xmldsig#base64 y especificarse el tipo real en el par\u00e1metro mimeType. Por ejemplo, para firmar una imagen PNG haciendo que la firma se refiera a su forma binaria directa, puede proporcionarse la imagen directamente codificada en Base64 indicando el encoding como http://www.w3.org/2000/09/xmldsig#base64 y el mimeType como image/png. El valor debe ser siempre una URI. outputXmlEncoding [Texto] Codificaci\u00f3n del XML de salida. Si no se indica este valor se intenta auto-detectar a partir del XML de entrada (si los datos a firmar son un XML). contentTypeOid [OID o URN de tipo OID] Identificador del tipo de dato firmado. Esta propiedad es complementaria (que no excluyente) al par\u00e1metro mimeType. canonicalizationAlgorithm http://www.w3.org/TR/2001/REC-xml-c14n-20010315 Se firma el XML con canonizado XML 1.0 inclusivo (valor por defecto). http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments Se firma el XML con canonizado XML 1.0 inclusivo con comentarios. http://www.w3.org/2001/10/xml-exc-c14n# Se firma el XML con canonizado XML 1.0 exclusivo. http://www.w3.org/2001/10/xml-exc-c14n#WithComments Se firma el XML con canonizado XML 1.0 exclusivo con comentarios. xadesNamespace http://uri.etsi.org/01903/v1.3.2# Establece el espacio de nombres correspondiente a la versi\u00f3n 1.3.2 de XAdES. Este es el valor por defecto. http://uri.etsi.org/01903/v1.2.2# Establece el espacio de nombres correspondiente a la versi\u00f3n 1.2.2 de XAdES. Si se establece esta propiedad es posible que se necesite establecer tambi\u00e9n el par\u00e1metro signedPropertiesTypeUrl para evitar incoherencias en la versi\u00f3n de XAdES. El uso de estas propiedades no garantiza que la firma generada sea acorde a esta versi\u00f3n de XAdES. signedPropertiesTypeUrl http://uri.etsi.org/01903#SignedProperties Establece la URL de definici\u00f3n del tipo de las propiedades firmadas ( Signed Properties ) de XAdES. Este es el valor por defecto. http://uri.etsi.org/01903/1.3.2#SignedProperties Establece la URL de definici\u00f3n del tipo de las propiedades firmadas ( Signed Properties ) de XAdES v1.3.2. http://uri.etsi.org/01903/1.2.2#SignedProperties Establece la URL de definici\u00f3n del tipo de las propiedades firmadas ( Signed Properties ) de XAdES v1.2.2. Si se establece esta propiedad es posible que se necesite establecer tambi\u00e9n el par\u00e1metro xadesNamespace para evitar incoherencias en la versi\u00f3n de XAdES. El uso de estas propiedades no garantiza que la firma generada sea acorde a esta versi\u00f3n de XAdES. ignoreStyleSheets true Si se firma un XML con hojas de estilo, ignora \u00e9stas dej\u00e1ndolas sin firmar. false Si se firma un XML con hojas de estilo, firma tambi\u00e9n las hojas de estilo (valor por defecto, consultar notas adicionales sobre firma de hojas de estilo). avoidBase64Transforms true No declara transformaciones Base64 incluso si son necesarias. false Declara las transformaciones Base64 cuando se han codificado internamente los datos a firmar en Base64 (valor por defecto). headless true Evita que se muestren di\u00e1logos gr\u00e1ficos adicionales al usuario (como, por ejemplo, para la dereferenciaci\u00f3n de hojas de estilo enlazadas con rutas relativas). false Permite que se muestren di\u00e1logos gr\u00e1ficos adicionales al usuario. xmlTransforms [N\u00famero] N\u00famero de transformaciones a aplicar al contenido firmado. Debe indicarse posteriormente igual n\u00famero de par\u00e1metros xmlTransformnType, sustituyendo n por un ordinal consecutivo, comenzando en 0 (ver notas adicionales sobre indicaci\u00f3n de transformaciones adicionales). xmlTransform n Type http://www.w3.org/2000/09/xmldsig#base64 Indica que los datos que se proporcionan para firmar ya est\u00e1n codificados en Base64 y se debe declarar esta transformaci\u00f3n adicional para que se decodifiquen antes de firmarlos. Esta transformaci\u00f3n Base64 es adicional a la transformaci\u00f3n necesaria para pasar los datos a trav\u00e9s de los m\u00e9todos de firma del cliente. http://www.w3.org/TR/1999/REC-xpath-19991116 El contenido se debe procesar mediante esta transformaci\u00f3n XPATH antes de ser firmado. \u00danicamente es aplicable cuando se firma contenido XML. http://www.w3.org/2002/06/xmldsig-filter2 El contenido se debe procesar mediante esta transformaci\u00f3n XPATH2 antes de ser firmado. \u00danicamente es aplicable cuando se firma contenido XML. xmlTransform n Subtype [Texto] Subtipo de la transformaci\u00f3n n . Los valores aceptados y sus funcionalidades dependen del valor indicado en xmlTransformnType. xmlTransform n Body [Texto] Cuerpo de la transformaci\u00f3n n . Los valores aceptados y sus funcionalidades dependen de los valores indicados en xmlTransform n Type y en xmlTransform n Subtype. nodeToSign [Texto] Identificador del nodo (establecido mediante el atributo \u201cId\u201d) que se desea firmar dentro de un XML. commitmentTypeIndications [Entero] Indica el n\u00famero de CommitmentTypeIndications que se van a declarar. Estos son los motivos que se declaran para la firma. Los valores concretos se especifican con commitmentTypeIndication n Identifier y commitmentTypeIndication n Description, donde \u2018 n \u2019 va desde 0 hasta el valor menos 1 indicado en esta propiedad. commitmentTypeIndication n Identifier 1 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de origen \u201d. 2 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de recepci\u00f3n \u201d. 3 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de entrega \u201d. 4 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de env\u00edo \u201d. 5 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de aprobaci\u00f3n \u201d. 6 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de creaci\u00f3n \u201d. commitmentTypeIndication n Description [Texto] Establece la descripci\u00f3n del CommitmentTypeIndications n\u00famero n .. Este atributo es opcional. commitmentTypeIndication n DocumentationReferences [Texto] Lista de URL separadas por el car\u00e1cter '|' que se aportan como referencias documentales del CommitmentTypeIndication n\u00famero n (atributo opcional). Las URL de la lista no pueden contener el car\u00e1cter '|' (ya que este se usa como separador). commitmentTypeIndication n CommitmentTypeQualifiers [Texto] Lista de indicadores textuales separados por el car\u00e1cter '|' que se aportan como calificadores adicionales del CommitmentTypeIndication n\u00famero n (atributo opcional). Normalmente son OID. Los elementos de la lista no pueden contener el car\u00e1cter '|' (ya que este se usa como separador). allowSignLTSignature true Se permite la cofirma/contrafirma de firmas de archivo longevo, a pesar de que estas pueden no ser v\u00e1lidas posteriormente. false (o cualquier otro valor) No se permite la cofirma/contrafirma de firmas de archivo longevo. Sin indicar Se consultar\u00e1 al usuario en caso de intentar confirmarse/contrafirmarse una firma de archivo longevo.","title":"Firma y cofirma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#contrafirma_1","text":"Nombre del par\u00e1metro Valores posibles Descripci\u00f3n addKeyInfoKeyValue true Incluye el nodo KeyValue dentro de KeyInfo de XAdES (comportamiento por defecto). false No incluye el nodo KeyValue dentro de KeyInfo de XAdES. addKeyInfoKeyName true Incluye el nodo KeyName dentro de KeyInfo de XAdES. false No incluye el nodo KeyName dentro de KeyInfo de XAdES (comportamiento por defecto). policyIdentifier [URL] Identificador de la pol\u00edtica de firma (normalmente una URL hacia la pol\u00edtica en formato XML procesable), necesario para generar firmas XAdES-EPES. policyIdentifierHash [Texto Base64] Huella digital de la pol\u00edtica de firma. Es obligatorio indicar esta propiedad si el valor indicado en policyIdentifier no es universalmente accesible. Si se da valor a esta propiedad es obligatorio tambi\u00e9n dar valor al par\u00e1metro policyIdentifierHashAlgorithm. policyIdentifierHashAlgorithm SHA1 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA1. SHA-256 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-256. SHA-384 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-384. SHA-512 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-512. policyQualifier [URL hacia documento] URL (universalmente accesible) hacia el documento (normalmente PDF) que contiene una descripci\u00f3n textual de la pol\u00edtica de firma. Esta propiedad es opcional incluso si se desea generar firmas XAdES-EPES. policyDescription [Texto] Descripci\u00f3n textual de la pol\u00edtica de firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. Esta propiedad es opcional incluso si se desea generar firmas XAdES-EPES. signerClaimedRoles [Texto] Agrega a la firma campos con los cargos atribuidos al firmante. Deben separarse los cargos con el car\u00e1cter \u201c|\u201d (y este no puede estar en el propio texto de ning\u00fan cargo). En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionCity [Texto] Agrega a la firma un campo con la ciudad en la que se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionProvince [Texto] Agrega a la firma un campo con la provincia en la que se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionPostalCode [Texto] Agrega a la firma un campo con el c\u00f3digo postal en donde se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML firmado. signatureProductionCountry [Texto] Agrega a la firma un campo con el pa\u00eds en el que se realiza la firma. En el caso de que se firme un XML, la codificaci\u00f3n del texto usado debe adecuarse al XML contrafirmado. encoding [Texto] Fuerza una codificaci\u00f3n para la firma resultante. Un uso incorrecto de esta propiedad puede provocar la generaci\u00f3n de una firma inv\u00e1lida. commitmentTypeIndications [Entero] Indica el n\u00famero de CommitmentTypeIndications que se van a declarar. Estos son los motivos que se declaran para la firma. Los valores concretos se especifican con commitmentTypeIndicationnIdentifier y commitmentTypeIndicationnDescription, donde \u2018n\u2019 va desde 0 hasta el valor menos 1 indicado en esta propiedad. commitmentTypeIndication n Identifier 1 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de origen \u201d. 2 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de recepci\u00f3n \u201d. 3 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de entrega \u201d. 4 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de env\u00edo \u201d. 5 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de aprobaci\u00f3n \u201d. 6 Establece que el CommitmentTypeIndications n\u00famero n es \u201c Prueba de creaci\u00f3n \u201d. commitmentTypeIndication n Description [Texto] Establece la descripci\u00f3n del CommitmentTypeIndications n\u00famero n . Este atributo es opcional. commitmentTypeIndication n DocumentationReferences [Texto] Lista de URL separadas por el car\u00e1cter '|' que se aportan como referencias documentales del CommitmentTypeIndication n\u00famero n (atributo opcional). Las URL de la lista no pueden contener el car\u00e1cter '|' (ya que este se usa como separador). commitmentTypeIndication n CommitmentTypeQualifiers [Texto] Lista de indicadores textuales separados por el car\u00e1cter '|' que se aportan como calificadores adicionales del CommitmentTypeIndication n\u00famero n (atributo opcional). Normalmente son OID. Los elementos de la lista no pueden contener el car\u00e1cter '|' (ya que este se usa como separador). allowSignLTSignature true Se permite la cofirma/contrafirma de firmas de archivo longevo, a pesar de que estas no ser\u00e1n v\u00e1lidas posteriormente. false (o cualquier otro valor) No se permite la cofirma/contrafirma de firmas de archivo longevo. Sin indicar Se consultar\u00e1 al usuario en caso de intentar confirmarse/contrafirmarse una firma de archivo longevo.","title":"Contrafirma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-de-firmas-pades","text":"El Cliente @firma permite generar firmas PAdES acordes a las partes 2 y 3 del est\u00e1ndar ETSI TS 102 778 V1.2.1. Los perfiles de firma soportados son los descritos en el mencionado est\u00e1ndar: PAdES-B\u00e1sico Las firmas PAdES en las que se declara el subfiltro \u201cadbe.pkcs7.detached\u201d. PAdES-BES Las firmas PAdES en las que se declara el subfiltro \u201cETSI.CAdES.detached\u201d son PAdES-BES. Estas son las firmas por defecto. PAdES-EPES Las firmas PAdES en las que se configura pol\u00edtica de firma son PAdES-EPES. Hay que tener en cuenta que algunas de las firmas PAdES generadas por el Cliente @firma tambi\u00e9n pueden considerarse de tipo B-Level. Sin embargo, no se incluye un modo de operaci\u00f3n que permita asegurar que las firmas generadas sean acordes a este perfil. Una salvedad en la realizaci\u00f3n de firmas PAdES con respecto al est\u00e1ndar, es que no se soporta la firma de ficheros adjuntos o empotrados en los documentos PDF.","title":"Configuraci\u00f3n de firmas PAdES"},{"location":"markdown_strict/MCF_manual-integrador_ES/#algoritmos-de-firma_2","text":"Las firmas PAdES aceptan los siguientes algoritmos de firma: SHA512withRSA SHA384withRSA SHA256withRSA SHA1withRSA (No recomendado) El est\u00e1ndar PAdES recomienda no usar el algoritmo SHA1withRSA por no ser el m\u00e1s seguro. Si los certificados del usuario se encuentran en tarjeta inteligente, aseg\u00farese de disponer de la \u00faltima versi\u00f3n de su controlador para garantizar la compatibilidad con estos algoritmos de firma. En caso de que, a\u00fan as\u00ed, no pueda utilizar este algoritmo con su tarjeta inteligente, consulte la informaci\u00f3n de compatibilidad de su tarjeta y/o pruebe con otro algoritmo.","title":"Algoritmos de firma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#operaciones-no-soportadas-y-notas-de-interes","text":"Las firmas PAdES no admiten contrafirmas. Una cofirma PAdES consiste en la adici\u00f3n de una firma adicional al documento PDF, sin que se establezca ninguna relaci\u00f3n de interdependencia con las firmas existentes. Cofirmar un documento PDF es completamente equivalente a firmar un documento PDF ya firmado. Versiones antiguas de Adobe Acrobat/Reader no soportan m\u00faltiples firmas cuando hay firmas PAdES-BES. El formato PAdES s\u00f3lo puede utilizarse sobre documentos PDF. No se firman los posibles adjuntos o empotrados que pudiese contener el documento PDF.","title":"Operaciones no soportadas y notas de inter\u00e9s"},{"location":"markdown_strict/MCF_manual-integrador_ES/#creacion-de-una-firma-visible","text":"El Cliente @firma permite la creaci\u00f3n de firmas visibles dentro de un documento PDF, que lo son tanto en pantalla (por ejemplo, usando Adobe Reader) como en papel una vez impreso el documento. < Para ello debemos indicar mediante par\u00e1metros adicionales la p\u00e1gina o las p\u00e1ginas del documento en donde situar la visualizaci\u00f3n de la firma y las coordenadas con la posici\u00f3n en la que debe mostrarse. S\u00f3lo es posible establecer una posici\u00f3n para la firma visible, por lo que la posici\u00f3n ser\u00e1 la misma en todas las p\u00e1ginas en las que se muestre la firma. Las coordenadas de la visualizaci\u00f3n se indican partiendo de la esquina inferior izquierda, seg\u00fan el siguiente diagrama: < Las coordenadas del campo de firma y la p\u00e1gina en la que se desea insertar se establecen usando los par\u00e1metros adicionales, por ejemplo: signaturePositionOnPageLowerLeftX = 100 signaturePositionOnPageLowerLeftY = 100 signaturePositionOnPageUpperRightX = 200 signaturePositionOnPageUpperRightY = 200 signaturePages = 1,5,10--1 Los documentos PDF comienzan su numeraci\u00f3n de p\u00e1ginas desde uno (1). Si se indica un valor de p\u00e1gina negativo, se empezar\u00e1 a contar desde la \u00faltima p\u00e1gina del documento hacia atr\u00e1s. Por ejemplo, si se configura en el n\u00famero de p\u00e1gina el valor -1, la firma se insertar\u00e1 en la \u00faltima p\u00e1gina del documento. Si se configura el valor -2, se insertar\u00e1 en la pen\u00faltima p\u00e1gina. Una firma se puede mostrar en m\u00e1s de una p\u00e1gina de un documento. Para ello se permite indicar un listado de p\u00e1ginas y/o rangos de p\u00e1ginas en las que debe mostrarse. Tambi\u00e9n se puede indicar directamente que se muestre en todas las p\u00e1ginas del documento o en una nueva p\u00e1gina al final de este. La forma de indicar la p\u00e1gina o p\u00e1ginas donde firmar ser\u00e1 posible indicarla a trav\u00e9s del par\u00e1metro signaturePages. Tal y como se explica en el p\u00e1rrafo anterior, est\u00e9 par\u00e1metro se puede configurar para indicar la firma visible en una o varias p\u00e1ginas: all: Para indicar que la firma visible aparezca en todas las p\u00e1ginas del documento, se le deber\u00e1 de dar este valor al par\u00e1metro signaturePages. append: Si la firma visible debe de aparecer en una nueva p\u00e1gina en blanco a\u00f1adida al final del documento, se le deber\u00e1 de dar este valor al par\u00e1metro signaturePages. P\u00e1gina o listado de p\u00e1ginas: Si se desea indicar una p\u00e1gina o varias p\u00e1ginas donde estampar la firma visible, es posible indicando p\u00e1gina a p\u00e1gina con una separaci\u00f3n de comas (1,4,7: Se estampa en las p\u00e1ginas 1, 4 y 7) o indicando un rango de p\u00e1ginas a trav\u00e9s de un gui\u00f3n (1-8: Se estampa en las p\u00e1ginas desde la 1 hasta la 8). Tal y como se explica en el p\u00e1rrafo anterior, se permite indicar las p\u00e1ginas con un valor negativo, donde se comenzar\u00e1 desde el final (1,-1: Se estampar\u00e1 en la primera y \u00faltima p\u00e1gina). Tambi\u00e9n es posible combinar p\u00e1ginas individuales con rangos de p\u00e1ginas, como, por ejemplo: 3-6, 8, 10: Indica que se estampar\u00e1 en las p\u00e1ginas desde la 3 a la 6 y tambi\u00e9n en la 8 y 10. Dentro del recuadro marcado por las coordenadas indicadas, es posible mostrar distintos elementos: < Una imagen: En este caso debe indicarse qu\u00e9 imagen usar aportando el binario en formato JPEG codificado en Base64. La imagen de firma se configura a trav\u00e9s del par\u00e1metro adicional signatureRubricImage. La imagen se adapta al recuadro marcado por las coordenadas para ocupar el mayor espacio posible sin deformarse, por lo que se deber\u00eda configurarse un tama\u00f1o de firma adecuado para que la imagen se ajuste al mismo sin dejar espacio vac\u00edo. NOTA : No se soportan im\u00e1genes con transparencias. Incluso si la imagen no incluye transparencias, internamente se convertir\u00e1 a JPEG si no lo era, por lo que se recomienda que se proporcione directamente la image en JPEG para garantizar que la visualizaci\u00f3n ser\u00e1 la deseada. < Texto (que puede combinarse con una imagen) Es necesario indicar no solo el texto a sobreimprimir en el cuadro visible, sino tambi\u00e9n indicaciones sobre su formato (tipo de letra, tama\u00f1o, color, etc.). El texto introduce de forma autom\u00e1tica los retornos de carro necesarios para adaptarse al recuadro. El texto aparece siempre sobre la imagen indicada, si se indic\u00f3 alguna. El texto puede incluir una serie de patrones que ser\u00e1n sustituidos en el momento de la firma: $$SUBJECTCN$$ Nombre com\u00fan (CN, Common Name) dentro del X.500 Principal del titular del certificado de firma. Salvo que se indique lo contrario, los identificadores de usuario encontrados en esta propiedad se procesar\u00e1n para ocultar parte de sus caracteres. $$ISSUERCN$$ Nombre com\u00fan (CN, Common Name) dentro del X.500 Principal del emisor del certificado de firma. $$CERTSERIAL$$ N\u00famero de serie del certificado de firma. $$SIGNDATE= PATR\u00d3N $$ Fecha de la firma, donde PATR\u00d3N debe indicar el formato en el que debe mostrarse la fecha, siguiendo el esquema definido por Oracle para la clase SimpleDateFormat. As\u00ed, por ejemplo, el texto \" Firmado por $$SUBJECTCN$$ el d\u00eda $$SIGNDATE=dd/MM/yyyy$$. \" resultar\u00e1 finalmente en el PDF como \" Firmado por Tom\u00e1s Garc\u00eda-Mer\u00e1s el d\u00eda 04/01/2016. \" suponiendo que el CN del titular del certificado de firma es Tom\u00e1s Garc\u00eda-Mer\u00e1s y que la firma se realiza el 04/01/2016 . $$GIVENNAME$$ Nombre declarado del titular del certificado. Este valor podr\u00eda no aparecer en el certificado, en cuyo caso, el patr\u00f3n se sustituir\u00e1 por cadena vac\u00eda. $$SURNAME$$ Apellidos declarados del titular del certificado. Este valor podr\u00eda no aparecer en el certificado, en cuyo caso, el patr\u00f3n se sustituir\u00e1 por cadena vac\u00eda. $$ORGANIZATION$$ Organizaci\u00f3n declarada del titular en el certificado. Este valor podr\u00eda no aparecer en el certificado, en cuyo caso, el patr\u00f3n se sustituir\u00e1 por cadena vac\u00eda. $$REASON$$ Raz\u00f3n por la que se firma el PDF. Este valor podr\u00eda no aparecer en el certificado, en cuyo caso, el patr\u00f3n se sustituir\u00e1 por cadena vac\u00eda. $$LOCATION$$ Ciudad en la que se firma el PDF. Este valor podr\u00eda no aparecer en el certificado, en cuyo caso, el patr\u00f3n se sustituir\u00e1 por cadena vac\u00eda. $$CONTACT$$ Informaci\u00f3n de contacto del firmante del PDF. Este valor podr\u00eda no aparecer en el certificado, en cuyo caso, el patr\u00f3n se sustituir\u00e1 por cadena vac\u00eda. Las propiedades para configurar la visualizaci\u00f3n de un texto de la firma se listan a continuaci\u00f3n: layer2Text Texto que mostrar en la firma visible. layer2FontFamily Tipo de letra a usar en el texto de la firma visible. layer2FontSize Tama\u00f1o de letra a usar en el texto de la firma visible. layer2FontStyle Estilo del tipo de letra a usar en el texto de la firma visible. Cada estilo se identifica mediante un valor num\u00e9rico y es posible combinar estilos aplicando la operaci\u00f3n l\u00f3gica o sobre los valores num\u00e9ricos de cada uno de ellos. layer2FontColor Color del texto de la firma visible. obfuscateCertText Indica si deben ofuscarse o no los identificadores de usuario (como el DNI o NIE) localizados autom\u00e1ticamente en el texto visible del PDF. Por defecto, se ofuscar\u00e1n. signatureRotation N\u00famero de grados que rotar el texto y la imagen del campo de firma en sentido horario. includeQuestionMark Indica si debe permitirse al lector de PDF mostrar junto a la firma una marca que \u00edndique el resultado obtenido al validarla. La apariencia de esta marca depende completamente del lector de PDF utilizado y es este el que decide si se muestra. Por ejemplo, la marca podr\u00eda no mostrarse cuando se definiese una imagen de fondo en la firma. < Consulte el apartado 8.3.8 Par\u00e1metros adicionales para saber m\u00e1s sobre los valores que se pueden asignar a las propiedades anteriores.","title":"Creaci\u00f3n de una firma visible"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-de-la-firma-visible-por-usuario","text":"Existe la posibilidad de que la configuraci\u00f3n de la firma visible sea realizada por el usuario, y no por la aplicaci\u00f3n integradora. De este modo, es el usuario quien decide el \u00e1rea donde mostrar la firma y su aspecto. La aplicaci\u00f3n podr\u00e1 configurar que sea el usuario el que seleccione el \u00e1rea del documento en el que desea insertar la firma visible PDF y si es obligatorio o no que seleccione un \u00e1rea. Tambi\u00e9n podr\u00e1 configurar si quiere que el usuario seleccione el aspecto de la firma (texto, imagen, fuente, rotaci\u00f3n, etc.) o que se use el aspecto por defecto. Para la configuraci\u00f3n de la visible por parte del usuario se podr\u00e1n utilizar los siguientes par\u00e1metros adicionales: visibleSignature Permite configurar si se desea que el usuario seleccione el \u00e1rea de una firma visible PDF y si es obligatorio o no el realizar una firma visible. visibleAppearance Permite configurar que sea el usuario el que seleccione el aspecto de una firma visible PDF. Esta propiedad s\u00f3lo tiene efecto cuando tambi\u00e9n se indica el par\u00e1metro visibleSignature y siempre que el usuario termine seleccionado el \u00e1rea de firma. Consulte el apartado 8.3.8 Par\u00e1metros adicionales para saber m\u00e1s sobre estos par\u00e1metros de configuraci\u00f3n. Esta funcionalidad \u00fanicamente est\u00e1 disponible en AutoFirma. Los clientes m\u00f3viles siempre usar\u00e1n la configuraci\u00f3n de firma visible proporcionada por la aplicaci\u00f3n y no dar\u00e1n la posibilidad de configurarla al usuario.","title":"Configuraci\u00f3n de la firma visible por usuario"},{"location":"markdown_strict/MCF_manual-integrador_ES/#insercion-de-una-imagen-en-un-documento-pdf-antes-de-ser-firmado","text":"El Cliente @firma permite, principalmente como ayuda para la inserci\u00f3n de C\u00f3digos Seguros de Verificaci\u00f3n (CSV), insertar una imagen en un documento PDF justo antes de firmarlo. Para agregar una imagen debemos configurar una p\u00e1gina y una zona dentro de esta para insertarla, usando para ello el mismo sistema de coordenadas descrito en el apartado 8.3.3 Creaci\u00f3n de una firma visible , es decir, a partir de la esquina inferior izquierda. La imagen debe proporcionarse en formato JPEG codificado en Base64. Para indicar la p\u00e1gina, podemos usar su n\u00famero (empezando a contar desde uno como primera p\u00e1gina), usar -1 para referirnos a la \u00faltima p\u00e1gina del documento o 0 (cero) para insertar la imagen en todas las p\u00e1ginas. Debe tenerse en cuenta que el agregar im\u00e1genes al PDF puede invalidar firmas previas que tuviese el documento. Aseg\u00farese de no utilizar esta funcionalidad cuando el documento ya contenga firmas. Es importante recalcar tambi\u00e9n que la imagen se deforma para adaptarse al recuadro marcado por las coordenadas, siendo \u00fatil para evitar este efecto que ambos tengan la misma relaci\u00f3n de aspecto. Igualmente, no se proporcionan funcionalidades de rotado, por lo que si se quiere insertar una imagen de lado (por ejemplo, en el margen de la p\u00e1gina, esta debe venir rotada en origen. Los par\u00e1metros adicionales para la inserci\u00f3n de im\u00e1genes son: image Imagen que se desea insertar en el PDF. imagePage P\u00e1gina donde desea insertarse la imagen. imagePositionOnPageLowerLeftX Coordenada horizontal inferior izquierda de la posici\u00f3n de la imagen. imagePositionOnPageLowerLeftY Coordenada vertical inferior izquierda de la posici\u00f3n de la imagen. imagePositionOnPageUpperRightX Coordenada horizontal superior derecha de la posici\u00f3n de la imagen. imagePositionOnPageUpperRightY Coordenada vertical superior derecha de la posici\u00f3n de la imagen. Consulte el apartado 8.3.8 Par\u00e1metros adicionales para obtener m\u00e1s informaci\u00f3n sobre los posibles valores que pueden adoptar estos par\u00e1metros.","title":"Inserci\u00f3n de una imagen en un documento PDF antes de ser firmado"},{"location":"markdown_strict/MCF_manual-integrador_ES/#firma-de-documentos-pdf-cifrados-o-protegidos-con-contrasena","text":"Si bien es posible firmar documentos PDF cifrados o protegidos con contrase\u00f1a, deben tenerse en cuenta las siguientes limitaciones: No se pueden firmar como parte de un proceso de firma masiva documentos PDF cifrados. No se soporta la firma de PDF cifrados con certificados o con algoritmo AES256. Puede que no sea posible, en todos los casos, validar u obtener justificantes de validaci\u00f3n de documentos PDF cifrados o protegidos por contrase\u00f1a usando la plataforma de validaci\u00f3n VALIDE del Gobierno de Espa\u00f1a. https://valide.redsara.es/valide/","title":"Firma de documentos PDF cifrados o protegidos con contrase\u00f1a"},{"location":"markdown_strict/MCF_manual-integrador_ES/#documentos-certificados","text":"Las firmas de un PDF pueden ser catalogadas como firmas de aprobaci\u00f3n (por defecto) o firmas certificadas. Una firma de aprobaci\u00f3n o de formulario se realiza sobre un campo de firma de formulario del documento (preexistente o creado autom\u00e1ticamente en el momento de la firma). Un documento puede contener tantas firmas de aprobaci\u00f3n como necesite. Esta es la opci\u00f3n com\u00fan de firma. Una firma certificada o de documento se aplica sobre un campo de firma identificado como de documento (preexistente o creado autom\u00e1ticamente en el momento de la firma). Un documento puede contener un \u00fanico campo de este tipo y por tanto una \u00fanica firma certificada. En caso de agregarse una firma certificada al documento, esta debe ser la primera que se agregue. Si hubiese alguna firma previa el resultado no ser\u00eda v\u00e1lido. Independientemente de sus nombres, ambos tipos de firma aplican al conjunto de datos de todo el documento, nunca s\u00f3lo a los datos de un formulario. S\u00f3lo cambia la designaci\u00f3n del campo en el que se almacenan. Una firma certificada restringe modificaciones posteriores sobre el documento. Las modificaciones permitidas vendr\u00e1n determinadas por el nivel de certificaci\u00f3n aplicado a la firma. El Cliente @firma permite configurar el nivel de certificaci\u00f3n de una firma por medio del par\u00e1metro certificationLevel. Los tipos de firma que puede crear son: Firma sin certificar. Esta ser\u00eda una firma de aprobaci\u00f3n. Este es el tipo de firma generada por defecto por el Cliente y se configura con el valor: 0 Firma certificada de autor. Tras este tipo de firma certificada, no se permite ning\u00fan cambio posterior en el documento (no se pueden agregar firmas, ni rellenar formularios). Se configura con el valor: 1 Firma certificada de autor para formularios. Tras este tipo de firma certificada, s\u00f3lo se permite el relleno de los campos de formulario (no se pueden agregar firmas). Se configura con el valor: 2 Firma certificada com\u00fan. Tras este tipo de firma certificada, se permite el relleno de los campos de formulario y la creaci\u00f3n de firmas de aprobaci\u00f3n. Se configura con el valor: 3","title":"Documentos certificados"},{"location":"markdown_strict/MCF_manual-integrador_ES/#comprobacion-de-pdf-shadow-attack","text":"Existe una vulnerabilidad en el formato PDF que hace posible que una revisi\u00f3n de un documento altere la presentaci\u00f3n de un elemento de una revisi\u00f3n anterior, incluso si est\u00e1 firmada. Esto quiere decir que se podr\u00eda modificar un PDF firmado de tal forma que parezca a simple vista que se firm\u00f3 algo distinto a lo que realmente se firm\u00f3. Alterar de esta forma el documento firmado es lo que se conoce como PDF Shadow Attack y, aunque el propio formato proporciona los medios para comprobar cu\u00e1l es el contenido que realmente se firm\u00f3, un firmante posterior deber\u00e1 tener cuidado de no firmar un documento alterado creyendo que alguien firm\u00f3 anteriormente ese mismo contenido. AutoFirma 1.8 y superiores incorpora la comprobaci\u00f3n de PDF Shadow Attack en su operativa de validaci\u00f3n de firmas. Primeramente, para que se validen las firmas que se van a multifirmar se debe habilitar la validaci\u00f3n de firmas previas mediante el par\u00e1metro adicional checkSignatures, tal como se describe en el apartado 7.5 Validaci\u00f3n de firmas previas . Para configurar la comprobaci\u00f3n de PDF Shadow Attack se proporciona la propiedad allowShadowAttack, de tal forma que al validar una firma PDF pueden ocurrir los siguientes casos seg\u00fan su valor: Si se establece a true, se omite la validaci\u00f3n del PDF Shadow Attack durante la validaci\u00f3n de las firmas previas. Si se establece a false (o cualquier otro valor) y si se sospecha que el PDF puede haber sido modificado, se bloquea la firma dando por hecho que el PDF ha sido modificado. Si no se establece ning\u00fan valor y se sospecha que el PDF puede haber sido modificado, se muestra al usuario un di\u00e1logo solicit\u00e1ndole que compruebe el PDF y confirme que desea firmarlo a pesar de la sospecha de que haya sido modificado. Ya que la comprobaci\u00f3n del PDF Shadow Attack es computacionalmente costosa y no garantiza que se haya una modificado maliciosamente el documento, s\u00f3lo se aplicar\u00e1 la comprobaci\u00f3n sobre n n\u00famero de p\u00e1ginas determinado. El n\u00famero de p\u00e1ginas por defecto es de 10, pero la aplicaci\u00f3n puede configurar este n\u00famero mediante la propiedad pagesToCheckShadowAttack, que puede adoptar los siguientes valores: Entero positivo: N\u00famero de p\u00e1ginas que se comprobar\u00e1n. Entero negativo o 0: No se comprobar\u00e1n modificaciones de tipo PDF Shadow Attack. all: Todas las p\u00e1ginas. En el caso de la firma trif\u00e1sica, la carga de la comprobaci\u00f3n del PDF recae en el propio servidor, as\u00ed que el servicio puede limitar a trav\u00e9s de su configuraci\u00f3n el n\u00famero de p\u00e1ginas m\u00e1ximo que se deber\u00e1n comprobar. Consulte el apartado 5.3.2.1 Configuraci\u00f3n del servicio trif\u00e1sico para saber m\u00e1s de la configuraci\u00f3n del servicio. La comprobaci\u00f3n del PDF Shadow Attack tambi\u00e9n detectar\u00eda sin diferenciarlo cualquier cambio en los valores de un formulario realizados despu\u00e9s de firmar. Si el integrador o el usuario aceptasen que se permiten cambios en los valores de los formularios despu\u00e9s de firmar, estar\u00e1 aceptando que el documento puede cambiar, por lo que se desactivar\u00e1 la comprobaci\u00f3n de PDF Shadow Attack .","title":"Comprobaci\u00f3n de PDF Shadow Attack"},{"location":"markdown_strict/MCF_manual-integrador_ES/#parametros-adicionales_2","text":"A continuaci\u00f3n, se listan las propiedades adicionales que pueden configurarse en las firmas en formato PAdES con el Cliente @firma. Es posible que el uso de par\u00e1metros no contemplados en las siguientes tablas provoque otros cambios de funcionamiento. No obstante, no se dar\u00e1 soporte al aplicativo si se usan par\u00e1metros no documentados, asumiendo el integrador todo el riesgo y responsabilidad derivados del uso de par\u00e1metros o valores distintos de los aqu\u00ed descritos. Nombre del par\u00e1metro Valores posibles Descripci\u00f3n includeOnlySignningCertificate true Indica que debe incluirse en la firma \u00fanicamente el certificado del firmante. false Indica que debe incluirse en la firma toda la cadena de certificaci\u00f3n del certificado firmante. Valor por defecto. alwaysCreateRevision true Siempre crear\u00e1 una revisi\u00f3n al firmar. Requiere que el documento cumpla la especificaci\u00f3n PDF 1.7 (ISO 32000-1:2008) false No crear\u00e1 revisi\u00f3n en la primera firma y s\u00ed en las siguientes. image [Texto Base64] Imagen JPEG que insertar en el PDF. Esta opci\u00f3n s\u00f3lo se puede usar en la primera firma del documento. imagePage [Entero positivo] Insertar imagen en el n\u00famero de p\u00e1gina indicado. 0 Insertar en todas las p\u00e1ginas. -1 Insertar imagen en la \u00faltima p\u00e1gina. imagePositionOnPageLowerLeftX [Entero positivo] Coordenada horizontal desde la esquina inferior izquierda de la p\u00e1gina a la esquina inferior izquierda de la imagen. imagePositionOnPageLowerLeftY [Entero positivo] Coordenada vertical desde la esquina inferior izquierda de la p\u00e1gina a la esquina inferior izquierda de la imagen. imagePositionOnPageUpperRightX [Entero positivo] Coordenada horizontal desde la esquina inferior izquierda de la p\u00e1gina a la esquina superior derecha de la imagen. imagePositionOnPageUpperRightY [Entero positivo] Coordenada vertical desde la esquina inferior izquierda de la p\u00e1gina a la esquina superior derecha de la imagen. attach [Texto Base64] Contenido a a\u00f1adir como adjunto al PDF. Requiere establecer attachFileName. attachFileName [Texto] Nombre del que asignar al fichero adjunto. attachDescription [Texto] Descripci\u00f3n del documento adjunto. certificationLevel 0 Firma sin certificar. Esta ser\u00eda una firma de aprobaci\u00f3n. Es el valor por defecto. 1 Firma certificada de autor. Tras este tipo de firma certificada, no se permite ning\u00fan cambio posterior en el documento (no se pueden agregar firmas, ni rellenar formularios). 2 Firma certificada de autor para formularios. Tras este tipo de firma certificada, s\u00f3lo se permite el relleno de los campos de formulario (no se pueden agregar firmas). 3 Firma certificada com\u00fan. Tras este tipo de firma certificada, se permite el relleno de los campos de formulario y la creaci\u00f3n de firmas de aprobaci\u00f3n. compressPdf true Comprime el PDF firmado para que ocupe menos tama\u00f1o. S\u00f3lo se aplica si se trata de un PDF v4 o superior. Este es el valor por defecto. false Nunca se comprime el PDF firmado. pdfVersion 2 Se declara que la versi\u00f3n del PDF de salida es 1.2. 3 Se declara que la versi\u00f3n del PDF de salida es 1.3. 4 Se declara que la versi\u00f3n del PDF de salida es 1.4. 5 Se declara que la versi\u00f3n del PDF de salida es 1.5. 6 Se declara que la versi\u00f3n del PDF de salida es 1.6. 7 Se declara que la versi\u00f3n del PDF de salida es 1.7. signatureSubFilter [Texto] Subfiltro declarado. Por defecto se utiliza el de las firmas BES (\u201cETSI.CAdES.detached\u201d). Puede usarse la cadena \u201cadbe.pkcs7.detached\u201d para crear firmas basicas. signatureField [Texto] Nombre del campo de firma preexistente en el que insertar la firma. signaturePages [Cadena] P\u00e1gina o rango de p\u00e1ginas donde estampar la firma visible. Para m\u00e1s detalles consultar el apartado \u201c 8.3.3 Creaci\u00f3n de una firma visible \u201d. signaturePositionOnPageLowerLeftX [Entero positivo] Coordenada horizontal desde la esquina inferior izquierda de la p\u00e1gina a la esquina inferior izquierda del campo de firma visible. signaturePositionOnPageLowerLeftY [Entero positivo] Coordenada vertical desde la esquina inferior izquierda de la p\u00e1gina a la esquina inferior izquierda del campo de firma visible. signaturePositionOnPageUpperRightX [Entero positivo] Coordenada horizontal desde la esquina inferior izquierda de la p\u00e1gina a la esquina superior derecha del campo de firma visible. signaturePositionOnPageUpperRightY [Entero positivo] Coordenada vertical desde la esquina inferior izquierda de la p\u00e1gina a la esquina superior derecha del campo de firma visible. signatureRubricImage [Texto Base64] Imagen JPEG que mostrar en el campo de firma visible. layer2Text [Texto] Texto que mostrar en el campo de firma visible. layer2FontFamily 0 El texto de la firma visible se mostrar\u00e1 con fuente Courier. Este es el valor por defecto. 1 El texto de la firma visible se mostrar\u00e1 con fuente Helv\u00e9tica. 2 El texto de la firma visible se mostrar\u00e1 con fuente Times Roman. 3 El texto de la firma visible se mostrar\u00e1 con fuente Symbol. layer2FontSize [Entero positivo] Tama\u00f1o de fuente del texto de la firma visible. layer2FontStyle 0 Texto de la firma visible sin estilo. Valor por defecto. 1 Texto de la firma visible en negrita. 2 Texto de la firma visible en cursiva. 4 Texto de la firma visible subrayado. 8 Texto de la firma visible tachado. layer2FontColor black El texto de la firma visible ser\u00e1 de color negro. Este es el valor por defecto. white El texto de la firma visible ser\u00e1 de color blanco. gray El texto de la firma visible ser\u00e1 de color gris. lightGray El texto de la firma visible ser\u00e1 de color gris claro. darkGray El texto de la firma visible ser\u00e1 de color gris oscuro. red El texto de la firma visible ser\u00e1 de color rojo. pink El texto de la firma visible ser\u00e1 de color rosa. obfuscateCertText true Se ofuscan los identificadores de usuario extraidos del CN o DN del certificado y mostrados en la firma visible PDF. No se ofuscan los datos de los certificados de seud\u00f3nimo. Este es el valor por defecto. false No se ofusca la informaci\u00f3n de los certificados. obfuscationMask [Texto] Criterios de ofuscaci\u00f3n de los identificadores de usuario en las firmas visibles PDF. Debe mostrar el siguiente patr\u00f3n: caracter;longitudDigitos;posiciones;desplazamiento En este patr\u00f3n: caracter: Es el car\u00e1cter que usar para ofuscar caracteres. longitudDigitos: N\u00famero m\u00ednimo de d\u00edgitos que debe tener una cadena de texto para que se considere que debe ofuscarse. posiciones: Listado de posiciones que indica qu\u00e9 caracteres deben mostrarse. El listado se expresa con una sucesi\u00f3n de true/false separados por comas (','), en donde true indica que el car\u00e1cter debe mostrarse y false que no. desplazamiento: Indica si se admite el desplazamiento de posiciones de la m\u00e1scara para mostrar todos los caracteres indicados (true) o si esta debe respetarse (false). visibleSignature default Se realizar\u00e1 firma visible PDF si se han proporcionado los par\u00e1metros con el \u00e1rea y la p\u00e1gina de firma. Este es el valor por defecto. want El usuario debe seleccionar el \u00e1rea de firma visible. En caso de cancelar el proceso: Si la petici\u00f3n tambi\u00e9n incluye los par\u00e1metros de \u00e1rea de firma visible (posici\u00f3n y p\u00e1gina), se usar\u00e1n dichos par\u00e1metros y se continuar\u00e1 con el proceso de firma. Si la petici\u00f3n no incluye los par\u00e1metros de \u00e1rea de firma visible, se cancelar\u00e1 el proceso de firma. optional El usuario podr\u00e1 elegir si desea incluir o no el \u00e1rea de firma visible. En caso de cancelar el proceso: Si la petici\u00f3n tambi\u00e9n incluye los par\u00e1metros de \u00e1rea de firma visible (posici\u00f3n y p\u00e1gina), se usar\u00e1n dichos par\u00e1metros y se continuar\u00e1 con el proceso de firma. Si la petici\u00f3n no incluye los par\u00e1metros de \u00e1rea de firma visible, se realizar\u00e1 una firma no visible. visibleAppearance default Se aplicar\u00e1 el aspecto por defecto para la firma visible PDF o, si se proporcionaron los par\u00e1metros de aspecto, el aspecto configurado. Este es el valor por defecto. custom El usuario puede elegir el aspecto de la firma visible. En caso de cancelar el proceso, se usar\u00e1 el aspecto por defecto. signatureRotation 0 No rota el campo de firma. Este es el valor por defecto. 90 Rota 90 grados en sentido horario el campo de firma. 180 Rota 180 grados en sentido horario el campo de firma. 270 Rota 270 grados en sentido horario el campo de firma. includeQuestionMark true Permitirse al lector de PDF mostrar junto a la firma visible una marca que \u00edndique el resultado obtenido al validarla. La apariencia de esta marca depende completamente del lector de PDF utilizado y es este el que decide si se muestra. Por ejemplo, la marca podr\u00eda no mostrarse cuando se definiese una imagen de fondo en la firma. false No permite mostrar la marca con el resultado de la validaci\u00f3n. Este es el valor por defecto. signReason [Texto] Raz\u00f3n por la que se realiza la firma. signatureProductionCity [Texto] Ciudad en la que se realiza la firma. signerContact [Texto] Informaci\u00f3n de contacto del firmante. signerClaimedRoles [Texto] Listado de roles declarados por el firmante (separados por \u201c|\u201d) policyIdentifier [URL] Identificador de la pol\u00edtica de firma (normalmente una URL hacia la pol\u00edtica en formato XML procesable), necesario para generar firmas XAdES-EPES. policyIdentifierHash [Texto Base64] Huella digital de la pol\u00edtica de firma. Es obligatorio indicar esta propiedad si el valor indicado en policyIdentifier no es universalmente accesible. Si se da valor a esta propiedad es obligatorio tambi\u00e9n dar valor al par\u00e1metro policyIdentifierHashAlgorithm. policyIdentifierHashAlgorithm SHA1 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA1. SHA-256 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-256. SHA-384 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-384. SHA-512 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA-512. policyQualifier [URL hacia documento] URL hacia el documento que contiene una descripci\u00f3n textual de la pol\u00edtica de firma. ownerPassword [Texto] Contrase\u00f1a de apertura del PDF. No se soporta la firma de documentos PDF cifrados con certificados o algoritmo AES-256. headless true No interrumpe el proceso de firma solicitando interacci\u00f3n del usuario. false Muestra di\u00e1logos al usuario si requiere de su autorizaci\u00f3n o alg\u00fan dato adicional para firmar. Este es el valor por defecto. allowSigningCertifiedPdfs true Permite la firma de documentos PDF certificados. El resultado podr\u00eda invalidar firmas anteriores del PDF. false Produce un error al firmar documentos PDF certificados. Se omite En caso de detectar que el documento PDF de entrada est\u00e1 certificado, se aplicar\u00e1 uno de los siguientes comportamientos: Si la firma es monof\u00e1sica (formato \u201cPAdES\u201d), se advertir\u00e1 al usuario de que la firma podr\u00eda invalidar firmas anteriores y se le permitir\u00e1 elegir si firmar o cancelar la operaci\u00f3n. Si la firma es trif\u00e1sica (formato \u201cPAdEStri\u201d), fallar\u00e1 la operaci\u00f3n de firma. Tenga en cuenta que, en los clientes m\u00f3viles, las firmas podr\u00edan ser trif\u00e1sicas independientemente del nombre de formato indicado. allowCosigningUnregisteredSignatures true Permite firmar documentos PDF con firmas previas no registradas. false No permite firmar documentos PDF con firmas previas no registradas. signingCertificateV2 true Se utiliza el atributo signingCertificateV2 en las firmas. false Se utiliza el atributo signingCertificateV1 en las firmas. Se omite Se utiliza el atributo signingCertificateV1 en las firmas SHA1withRSA y signingCertificateV2 en el resto. signReservedSize [Entero positivo] Tama\u00f1o m\u00e1ximo en bytes de la firma que se incorporar\u00e1 al PDF. Por defecto, 27000. allowShadowAttack true No se realizar\u00e1 la comprobaci\u00f3n de PDF Shadow Attack durante la validaci\u00f3n de las firmas previas (checkSignatures=true). false Se realizar\u00e1 la comprobaci\u00f3n de PDF Shadow Attack durante la validaci\u00f3n de las firmas previas (checkSignatures=true) y, en caso de detectarse, se dar\u00e1 la firma por inv\u00e1lida. Este valor bloquear\u00e1 tambi\u00e9n la operaci\u00f3n si se detecta cualquier modificaci\u00f3n de un campo de formulario posterior a la \u00faltima firma. Se omite Se realizar\u00e1 la comprobaci\u00f3n de PDF Shadow Attack durante la validaci\u00f3n de las firmas previas (checkSignatures=true) y, en caso de detectarse, se consultar\u00e1 al usuario si se debe continuar con la operaci\u00f3n. allowModifiedForm true No se realizar\u00e1 la comprobaci\u00f3n de cambios en los formularios durante la validaci\u00f3n de las firmas previas (checkSignatures=true). Este valor desactiva tambi\u00e9n la validaci\u00f3n de PDF Shadow Attack , ya que se estar\u00e1n permitiendo cambios en el documento posteriores a la firma. false Se realizar\u00e1 la comprobaci\u00f3n de cambios en los formularios del documento durante la validaci\u00f3n de las firmas previas (checkSignatures=true) y, en caso de detectarse, se dar\u00e1 la firma por inv\u00e1lida. Se omite Se realizar\u00e1 la comprobaci\u00f3n de cambios en los formularios del documento durante la validaci\u00f3n de las firmas previas (checkSignatures=true) y, en caso de detectarse, se consultar\u00e1 al usuario si se debe continuar con la operaci\u00f3n. Si el usuario acepta la operaci\u00f3n, estar\u00e1 aceptando cambios en documento posteriores a la firma, por lo que no se realizar\u00e1 la comprobaci\u00f3n de PDF Shadow Attack .","title":"Par\u00e1metros adicionales"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-de-firmas-de-factura-electronica","text":"El formato de factura electr\u00f3nica configura todas las propiedades imprescindibles para generar una firma v\u00e1lida de factura, como la pol\u00edtica de firma o las referencias a los nodos, por lo que no deber\u00e1n establecerse manualmente. Este formato s\u00f3lo puede utilizarse sobre facturas electr\u00f3nicas y \u00e9stas s\u00f3lo admiten la operaci\u00f3n de firma. No permiten cofirmarlas ni contrafirmarlas. La pol\u00edtica de firma utilizada por defecto para firmar es la 3.1, aunque puede configurarse para el uso de la pol\u00edtica 3.0 mediante los par\u00e1metros adicionales \u201cpolicyIdentifier\u201d y \u201cpolicyIdentifierHash\u201d.","title":"Configuraci\u00f3n de firmas de factura electr\u00f3nica"},{"location":"markdown_strict/MCF_manual-integrador_ES/#operaciones-no-soportadas-y-notas-de-interes_1","text":"Las facturas electr\u00f3nicas se firman con el formato XAdES Enveloped, pero con unas particularidades concretas que no es posible replicar configurando directamente el formato XAdES en el Cliente @firma. Es necesario utilizar el formato FacturaE para la firma de facturas. El formato FacturaE s\u00f3lo puede utilizarse sobre facturas electr\u00f3nicas acordes al est\u00e1ndar. Las facturas electr\u00f3nicas no soportan las operaciones de cofirma ni contrafirma. Si se intenta hacer una operaci\u00f3n de cofirma o contrafirma sobre una factura electr\u00f3nicas se notificar\u00e1 que no es posible porque \u00e9sta ya cuenta con una firma.","title":"Operaciones no soportadas y notas de inter\u00e9s"},{"location":"markdown_strict/MCF_manual-integrador_ES/#algoritmos-de-firma_3","text":"Las firmas de FacturaE aceptan los siguientes algoritmos de firma (deben escribirse exactamente como aqu\u00ed se muestran): SHA512withRSA SHA384withRSA SHA256withRSA SHA1withRSA (No recomendado) El algoritmo m\u00e1s seguro, y por lo tanto el recomendado para su uso es SHA512withRSA.","title":"Algoritmos de firma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#parametros-adicionales_3","text":"Aqu\u00ed se listan los par\u00e1metros adicionales que acepta el formato FacturaE para la configuraci\u00f3n de la operaci\u00f3n y de la firma electr\u00f3nica generada. Es posible que el uso de par\u00e1metros no contemplados en las siguientes tablas provoque otros cambios de funcionamiento. No obstante, no se dar\u00e1 soporte al aplicativo si se usan par\u00e1metros no documentados, asumiendo el integrador todo el riesgo y responsabilidad derivados del uso de par\u00e1metros o valores distintos de los aqu\u00ed descritos. Nombre del par\u00e1metro Valores posibles Descripci\u00f3n signatureProductionCity [Texto] Agrega a la firma un campo con la ciudad en la que se realiza la firma. signatureProductionProvince [Texto] Agrega a la firma un campo con la provincia en la que se realiza la firma. signatureProductionPostalCode [Texto] Agrega a la firma un campo con el c\u00f3digo postal en donde se realiza la firma. signatureProductionCountry [Texto] Agrega a la firma un campo con el pa\u00eds en el que se realiza la firma. xadesNamespace [URL] URL de definici\u00f3n del espacio de nombres de XAdES (el uso de esta propiedad puede condicionar la declaraci\u00f3n de versi\u00f3n de XAdES). Si se establece esta propiedad es posible que se necesite establecer tambi\u00e9n el par\u00e1metro signedPropertiesTypeUrl para evitar incoherencias en la versi\u00f3n de XAdES. signedPropertiesTypeUrl [URL] URL de definici\u00f3n del tipo de las propiedades firmadas ( Signed Properties ) de XAdES. Si se establece esta propiedad es posible que se necesite establecer tambi\u00e9n el par\u00e1metro xadesNamespace para evitar incoherencias en la versi\u00f3n de XAdES. Si no se establece se usa el valor por defecto: http://uri.etsi.org/01903#SignedProperties. signerClaimedRoles emisor Declara que el firmante es el emisor de la factura. Este es el valor por defecto. receptor Declara que el firmante es el receptor de la factura. tercero Declara que el firmante es un tercero con respecto a la factura. supplier Declara que el firmante es el emisor de la factura. Este es el valor por defecto. customer Declara que el firmante es el receptor de la factura. third party Declara que el firmante es un tercero con respecto a la factura. policyIdentifier http://www.facturae.es/politica_de_firma_formato_facturae/politica_de_firma_formato_facturae_v3_1.pdf Identificador de la pol\u00edtica de firma 3.1. Este es el valor por defecto. http://www.facturae.es/politica de firma formato facturae/politica de firma formato facturae v3_0.pdf Identificador de la pol\u00edtica de firma 3.0. policyIdentifierHash Ohixl6upD6av8N7pEvDABhEL6hM= Huella digital para configurar la pol\u00edtica de firma 3.1. Este es el valor por defecto. xmfh8D/Ec/hHeE1IB4zPd61zHIY= Huella digital para configurar la pol\u00edtica de firma 3.0. policyIdentifierHashAlgorithm SHA1 Indica que la huella digital indicada en el par\u00e1metro policyIdentifierHash se calcul\u00f3 mediante el algoritmo SHA1.","title":"Par\u00e1metros adicionales"},{"location":"markdown_strict/MCF_manual-integrador_ES/#compatibilidad-con-dispositivos-moviles-y-autofirma","text":"Una aplicaci\u00f3n web puede utilizar el JavaScript de despliegue para llamar al Cliente @firma y que este realice las operaciones de firma que se soliciten. Para que estas operaciones puedan ejecutarse, es necesario que se haya instalado previamente en el equipo la aplicaci\u00f3n del Cliente correspondiente a ese entorno. La aplicaci\u00f3n de firma puede ser: AutoFirma. En equipos de sobremesa (Windows, Linux o macOS). Cliente de firma Android. En disposivos Android. Cliente de firma iOS. En dispositivos iOS (iPhone y iPad). No todas estas aplicaciones funcionan de igual modo y las aplicaciones m\u00f3viles no soportan todas las operaciones del Cliente. Por este motivo, un desarrollador que desee que su despliegue funcione en entornos m\u00f3viles deber\u00e1 tener en cuenta una serie de restricciones a la hora de intregar las funciones en la aplicaci\u00f3n.","title":"Compatibilidad con dispositivos m\u00f3viles y AutoFirma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#requisitos-de-despliegue","text":"Para que nuestro despliegue del Cliente @firma sea compatible con los clientes m\u00f3viles, deben desplegarse tambi\u00e9n los servicios auxiliares de comunicaci\u00f3n y de firma trif\u00e1sica. Para ello se desplegarse los archivos: afirma-signature-storage.war afirma-signature-retriever.war afirma-server-triphase-signer.war La descripci\u00f3n de estos servicios puede encontrarse en el apartado 5.3 Servicios . Adem\u00e1s de su despliegue y configuraci\u00f3n, es necesario indicar al Cliente donde se encuentran los servicios desplegados: Para establecer la ubicaci\u00f3n de los servicios de comunicaci\u00f3n se utilizar\u00e1 el m\u00e9todo setServlets. La descripci\u00f3n del uso de este m\u00e9todo se realiza en el apartado 6.1.2 Configuraci\u00f3n de los servicios auxiliares de comunicaci\u00f3n . Para establecer la ubicaci\u00f3n del servicio de firma trif\u00e1sica se utilizar\u00e1 el par\u00e1metro adicional serverUrl, descrito en el apartado ANEXO II Firma trif\u00e1sica .","title":"Requisitos de despliegue"},{"location":"markdown_strict/MCF_manual-integrador_ES/#limitaciones","text":"Debe tenerse en cuenta que las versiones actuales de los distintos clientes m\u00f3viles no implementan toda la funcionalidad del Cliente @firma, y que los clientes m\u00f3viles de Android e iOS cuentan con distinta funcionalidad entre s\u00ed. Las limitaciones existentes, ya sea porque a\u00fan no se han desarrollado o por la imposibilidad de hacerlo para ese sistema concreto, son las siguientes:","title":"Limitaciones"},{"location":"markdown_strict/MCF_manual-integrador_ES/#limitaciones-de-formato","text":"Los clientes m\u00f3viles de Android y iOS son capaces de realizar firmas en todos los formatos avanzados soportados por AutoFirma: CAdES. XAdES. PAdES. FacturaE. Sin embargo, salvo en casos concretos, las firmas en los dispositivos m\u00f3viles siempre se realizar\u00e1n a trav\u00e9s del servicio de firma trif\u00e1sica, por lo cual la firma en dispositivo m\u00f3vil siempre requerir\u00e1: El despliegue de este servicio tal como se describe en el apartado 5.3.2 Servicios de firma trif\u00e1sica y firma de lotes . Configurar en los par\u00e1metros adicionales de las operaciones de firma la URL del servicio anterior a trav\u00e9s de la propiedad \u201cserverUrl\u201d. Los Clientes de firma m\u00f3vil realizar\u00e1n siempre la operaci\u00f3n de firma trif\u00e1sica, independientemente de que se configure el nombre de formato com\u00fan (XAdES, PAdES\u2026) o el trif\u00e1sico (XAdEStri, PAdEStri). Las \u00fanicas excepciones son los formatos de firma CAdES y PAdES con el Cliente de firma Android, que s\u00ed realizar\u00e1 la firma sin depender del servidor trif\u00e1sico cuando se use el nombre monof\u00e1sico de los formatos.","title":"Limitaciones de formato"},{"location":"markdown_strict/MCF_manual-integrador_ES/#limitaciones-funcionales","text":"Los clientes de firma m\u00f3vil no permiten la configuraci\u00f3n del almac\u00e9n de claves que deben utilizar ni su comportamiento: El cliente de firma Android siempre usar\u00e1 el almac\u00e9n del sistema o un DNIe por NFC (si se encuentra habilitada esta opci\u00f3n en la aplicaci\u00f3n). El Cliente de firma iOS siempre usar\u00e1 el almac\u00e9n de la propia aplicaci\u00f3n. Este comportamiento hace que ambas aplicaciones ignoren las llamadas a los siguientes m\u00e9todos de configuraci\u00f3n: setKeyStore(keystore) setStickySignatory(sticky) Tambi\u00e9n se ignorar\u00e1n las propiedades para la configuraci\u00f3n de filtros de certificados ( filters ) y la selecci\u00f3n autom\u00e1tica de certificados cuando s\u00f3lo haya uno en el almac\u00e9n ( headless ). Por otra parte, las aplicaciones m\u00f3viles no implementan las operaciones auxiliares para la carga de ficheros y la aplicaci\u00f3n iOS tampoco soporta la funci\u00f3n de guardado: getFileNameContentBase64(title, extension, description, filePath, successCallback, errorCallback) getMultiFileNameContentBase64(title, extension, description, filePath, successCallback, errorCallback) function saveDataToFile(dataB64, title, fileName, extension, description, successCallback, errorCallback) En el apartado 6.8 Operaciones de gesti\u00f3n de ficheros , se plantean casos de uso alternativos para evitar el uso de estos m\u00e9todos. Las aplicaciones m\u00f3viles tampoco son compatibles con la opci\u00f3n de llamar al m\u00e9todo de firma sin proporcionarle los datos a firmar para que sea la propia aplicaci\u00f3n la que se los solicite al usuario. Los datos deben proporcion\u00e1rselos siempre la aplicaci\u00f3n. Por \u00faltimo, las aplicaciones m\u00f3viles no son compatibles con el m\u00e9todo de recuperaci\u00f3n del log de la aplicaci\u00f3n: getCurrentLog (successCallback, errorCallback)","title":"Limitaciones funcionales"},{"location":"markdown_strict/MCF_manual-integrador_ES/#limitaciones-de-entono","text":"Las aplicaciones m\u00f3viles s\u00f3lo permiten las conexiones sin cifrado SSL a los dominios indicados de antemano. Sin embargo, el cliente m\u00f3vil puede conectarse con cualquier dominio, as\u00ed que no establece estas excepciones. Para que nuestro despliegue sea compatible con el cliente m\u00f3vil, deber\u00e1 accederse a nuestra web siempre a trav\u00e9s de HTTPS.","title":"Limitaciones de entono"},{"location":"markdown_strict/MCF_manual-integrador_ES/#recomendaciones-de-despliegue","text":"M\u00e1s all\u00e1 de lo anteriormente expuesto, existen una serie de limitaciones en los entornos m\u00f3viles que hacen que un despliegue que funcione correctamente en un equipo con AutoFirma pueda presentar problemas con un dispositivo y el cliente de firma m\u00f3vil. Buena parte de estas limitaciones viene por la necesidad de utilizar la comunicaci\u00f3n por servidor intermedio, el que se detengan los JavaScripts cuando el navegador est\u00e1 en segundo plano y varias restricciones de seguridad impuestas por algunos navegadores, como Google Chrome (no permite varias llamadas a una aplicaci\u00f3n externa sin interacci\u00f3n del usuario entre ellas y no permite que se haga esa llamada pasados unos segundos desde la interacci\u00f3n del usuario). Por este motivo, se recogen aqu\u00ed una serie de recomendaciones para garantizar el correcto funcionamiento de las aplicaciones: Forzar siempre el uso de firma trif\u00e1sica: Esto se consigue utilizando los nombres de formato de firma trif\u00e1sica (CAdEStri, PAdEStri, etc.) e indicando la URL del servidor trif\u00e1sico a trav\u00e9s de la propiedad \u201cserverUrl\u201d. De esta forma se garantiza que las firmas generadas por todas las aplicaciones sean siempre iguales, ya que la firma se ejecuta en servidor (que ser\u00e1 el mismo para todas las aplicaciones), mientras que en la firma monof\u00e1sica la ejecuta cada aplicaci\u00f3n y podr\u00eda haber diferencias en las implementaciones de los formatos de firma entre distintas versiones de las aplicaciones cliente. Configurar un gestor de documentos apropiado y utilizar referencias a los datos: Cuando se proporciona en la llamada de firma los datos a firmar y estos no pueden ser transferidos directamente a la aplicaci\u00f3n de firma, se subern al servidor intermedio y la aplicaci\u00f3n de firma los descarga de este. Sin embargo, en los dispositivos m\u00f3viles la subida de los datos puede quedar detenida en el momento de llamar a la aplicaci\u00f3n de firmam cuando el navegador web queda en segundo plano. Por otro lado, si se suben los datos antes de la llamada a la aplicaci\u00f3n, es probable que a partir de cierto tama\u00f1o la subida requiera cantidad de tiempo suficiente como para que la llamada a la aplicaci\u00f3n de firma se retrase, lo que har\u00e1 que las medidas de seguridad de algunos navegadores, como Google Chrome, bloqueen la apertura de la aplicaci\u00f3n. Para evitar estos problemas, en lugar de proporcionar al cliente los datos a firmar, se deber\u00eda proporcionar \u00fanicamente la referencia a los datos y configurar a trav\u00e9s de la propiedad \u201cdocument.manager\u201d del servicio de firma trif\u00e1sica un gestor de documentos capaz de obtener los datos a partir de estas referencias. Idealmente, se deber\u00eda programar un gestor de documentos optimizado para su aplicaci\u00f3n, pero se podr\u00eda utilizar alguno de los ya disponibles, como el es.gob.afirma.triphase.server.document.FileSystemDocumentManager, que carga los datos de un fichero en un directorio configurado en servidor y almacena la firma en un directorio distinto. El uso de es.gob.afirma.triphase.server.document.SelfishDocumentManager no ser\u00eda v\u00e1lido ya que este no obtiene los datos a partir de una referencia, sino que requiere que se le env\u00eden los datos completos. Si nuestra aplicaci\u00f3n requiere que sea el usuario el que proporcione los datos, se podr\u00eda organizar el tr\u00e1mite de firma para que primeramente se suban esos datos al servidor a trav\u00e9s de un formulario web y, una vez cargados, se le presente al usuario el bot\u00f3n para iniciar el proceso de firma, en donde se indicar\u00e1 la referencia a esos datos ya cargados. Evitar m\u00faltiples peticiones de firma: En dispositivos m\u00f3viles cada nueva operaci\u00f3n de firma implica una nueva llamada al cliente de firma. Sin embargo, algunos navegadores, como Google Chrome en dispositivos m\u00f3viles, bloquean el que se puedan hacer llamadas consecutivas a una aplicaci\u00f3n externa. Esto significa que, si tratamos de encadenar varias operaciones de firma consecutivas, por ejemplo, agregando la llamada a la operaci\u00f3n de firma en la funci\u00f3n callback que se ejecuta al finalizar una operaci\u00f3n anterior, s\u00f3lo se ejecutar\u00e1 la primera operaci\u00f3n. Para evitar este problema, si necesita ejecutar m\u00faltiples operaciones de firma, utilice la funcionalidad de firma de lotes.","title":"Recomendaciones de despliegue"},{"location":"markdown_strict/MCF_manual-integrador_ES/#notificaciones-al-usuario","text":"Es obligatorio que el usuario tenga instalado el Cliente de firma Android o iOS, seg\u00fan corresponda, antes de realizar una operaci\u00f3n de firma desde su dispositivo m\u00f3vil. Se recomienda por ello que se advierta al usuario antes de alcanzar la operaci\u00f3n de la firma de la necesidad de instalar esta aplicaci\u00f3n. El javascript de despliegue del Cliente facilita a las aplicaciones la labor de detectar el entorno del usuario mediante las siguientes funciones: function isAndroid() Detecta si el usuario accede a la p\u00e1gina web desde un dispositivo Android. function isIOS() Detecta si el usuario accede a la p\u00e1gina web desde un iPod, iPhone o iPad. Al detectar que el usuario accede a la aplicaci\u00f3n desde Android o iOS, la aplicaci\u00f3n puede, por ejemplo, mostrarle al usuario el enlace para la instalaci\u00f3n de la aplicaci\u00f3n desde la tienda de aplicaciones correspondiente Un ejemplo del uso de estas funciones ser\u00eda: // Si es Android, mostramos el mensaje de advertencia para Android if (AutoScript.isAndroid()) { document.getElementById(\u201candroidWarning\u201d).style.display = \"block\"; } // Si es iOS, mostramos el mensaje de advertencia para iOS else if (AutoScript.isIOS()) { document.getElementById(\u201ciOSWarning\u201d).style.display = \"block\"; } El integrador ser\u00eda el responsable de preparar esos mensajes de advertencia. Tambi\u00e9n se puede agregar a la p\u00e1gina web los enlaces para la descarga de las aplicaciones: Enlace a Google Play: <a href=\"https://play.google.com/store/apps/details?id=es.gob.afirma\"><img alt=\"Get it on Google Play\" src=\"https://play.google.com/intl/en_us/badges/images/generic/es-play-badge-border.png\" style=\"width: 140px;\"/></a> Enlace a la App Store: <a href=\"https://itunes.apple.com/us/app/cliente-firma-movil/id627410001?mt=8&uo=4\" target=\"itunes_store\" style=\"display:inline-block;overflow:hidden;background:url(https://linkmaker.itunes.apple.com/assets/shared/badges/es-es/appstore-lrg.svg) no-repeat;width:135px;height:40px;background-size:contain;\"></a>","title":"Notificaciones al usuario"},{"location":"markdown_strict/MCF_manual-integrador_ES/#problemas-conocidos","text":"Se han detectado una serie de situaciones problem\u00e1ticas asociadas al uso del Cliente @firma y sus servicios. Un usuario o aplicaci\u00f3n puede verse afectado por estas situaciones si obtiene los siguientes errores al utilizar el Cliente @firma: No se puede acceder al almac\u00e9n de claves de Firefox 49.0 y superiores No se puede acceder al almac\u00e9n de claves de Firefox 58 No se detecta la inserci\u00f3n/extracci\u00f3n del DNIe en el lector (u otra tarjeta inteligente) Falla la operaci\u00f3n de firma con DNIe o una tarjeta de la FNMT No se permite la firma de PDF con ciertos certificados El servicio de firma trif\u00e1sica genera un error al realizar firmas XAdES en servidores JBoss Las firmas con DNIe requieren que se introduzca el PIN del DNIe por cada operaci\u00f3n de firma Error al cargar el listado de certificados despu\u00e9s del cambio en caliente del almac\u00e9n por defecto AutoFirma no puede comunicarse con el navegador en macOS S\u00f3lo se realiza la firma del primer documento de una serie cuando se realizan las firmas desde Google Chrome No se abre la aplicaci\u00f3n de firma al realizar la firma desde Google Chrome No se abre la aplicaci\u00f3n de firma con Edge Legacy (EdgeHTML) No se abre la aplicaci\u00f3n de firma con Firefox cuando el servidor declara una pol\u00edtica de seguridad (CSP) A continuaci\u00f3n, se describen los problemas asociados a estos casos de error.","title":"Problemas conocidos"},{"location":"markdown_strict/MCF_manual-integrador_ES/#no-se-puede-acceder-al-almacen-de-claves-de-firefox-490-y-superiores","text":"Para el acceso al almac\u00e9n de claves y certificados de Firefox 49 y superiores en Windows necesita se que se tenga instalado el entorno de ejecuci\u00f3n redistribuible de Microsoft Visual C++ 2015. Si no consigue acceder a sus certificados y claves privadas desde AutoFirma, necesitar\u00e1 descargar este software e instalarlo manualmente. El entorno de ejecuci\u00f3n redistribuible de Microsoft Visual C++ 2015 puede descargarse desde: https://www.microsoft.com/en-us/download/details.aspx?id=53840 Una vez en el enlace, seleccione el idioma y la arquitectura adecuada para su sistema operativo. El proceso de instalaci\u00f3n puede requerir permisos de administrador.","title":"No se puede acceder al almac\u00e9n de claves de Firefox 49.0 y superiores"},{"location":"markdown_strict/MCF_manual-integrador_ES/#no-se-puede-acceder-al-almacen-de-claves-de-firefox-58","text":"El navegador web Firefox basa su almac\u00e9n de claves y certificados en NSS y, concretamente, en Firefox 58 se hace uso de NSS 3.34. Se han encontrado problemas de compatibilidad entre esta versi\u00f3n de NSS y Java que impiden que AutoFirma pueda acceder al almac\u00e9n de certificados internos del navegador. Este problema est\u00e1 relacionado con la forma en la que Firefox 58 genera los almacenes de claves. Un usuario que desee utilizar Firefox 58 puede, como soluci\u00f3n parcial, instalarse una versi\u00f3n previa de Firefox, por ejemplo, Firefox 56, instalar sus certificados en el almac\u00e9n y, a continuaci\u00f3n, actualizar el navegador. Por defecto, el propio navegador se actualizar\u00e1 al reiniciarlo, as\u00ed que los certificados deben instalarse en el momento de abrirlo la primera vez. Pueden descargarse versiones anteriores de Firefox desde: https://ftp.mozilla.org/pub/firefox/releases/","title":"No se puede acceder al almac\u00e9n de claves de Firefox 58"},{"location":"markdown_strict/MCF_manual-integrador_ES/#no-se-detecta-la-insercionextraccion-del-dnie-en-el-lector-u-otra-tarjeta-inteligente","text":"A veces puede ocurrir que el navegador no detecta la extracci\u00f3n o introducci\u00f3n del DNIe (u otra tarjeta inteligente) en el lector, por lo que, si no hemos introducido la tarjeta previamente a que se arranque el cliente de firma, no se encontrar\u00e1 el certificado. Otro posible caso es que una vez cargado el cliente, se extraiga la tarjeta y, al realizar una operaci\u00f3n de firma, el navegador muestre los certificados de la tarjeta (aunque ya no est\u00e9 presente) fallando al intentar utilizarlo. Puede forzar a la recarga del almac\u00e9n mediante el bot\u00f3n de actualizar del di\u00e1logo de selecci\u00f3n de certificados (< ). Si el cliente sigue sin detectar la tarjeta, pruebe a insertar la tarjeta antes de iniciar la operaci\u00f3n de firma.","title":"No se detecta la inserci\u00f3n/extracci\u00f3n del DNIe en el lector (u otra tarjeta inteligente)"},{"location":"markdown_strict/MCF_manual-integrador_ES/#falla-la-operacion-de-firma-con-dnie-o-una-tarjeta-de-la-fnmt","text":"Se conoce de cierta incompatibilidad de AutoFirma con los controladores de DNIe y las tarjetas de la FNMT. Esta incompatibilidad puede llevar a que no se pueda firmar con estas tarjetas o que s\u00f3lo se pueda realizar una firma y falle el proceso cuando se intente hacer alguna m\u00e1s. Para solventar este problema, AutoFirma incorpora la biblioteca JMulticard, un controlador Java para DNIe y algunas tarjetas de la FNMT. Si se produce alg\u00fan error al generar firmas con DNIe o tarjetas de la FNMT, abra AutoFirma, acceda al panel de \u201cPreferencias\u201d, pesta\u00f1a \u201cGeneral\u201d y verifique que en el panel \u201cOpciones generales\u201d se encuentra activada la opci\u00f3n \u201cHabilitar JMulticard para el uso de tarjetas de la FNMT y DNIe (requiere reiniciar AutoFirma)\u201d. Si sigue sin funcionar la operaci\u00f3n de firma, es posible que AutoFirma no sea compatible con su tarjeta inteligente. En ese caso, aseg\u00farese de que dispone de la \u00faltima versi\u00f3n de los controladores de la tarjeta.","title":"Falla la operaci\u00f3n de firma con DNIe o una tarjeta de la FNMT"},{"location":"markdown_strict/MCF_manual-integrador_ES/#no-se-permite-la-firma-de-pdf-con-ciertos-certificados","text":"Las firmas de documentos PDF realizadas externamente (que es el m\u00e9todo utilizado por el Cliente @firma) tienen un tama\u00f1o m\u00e1ximo de octetos que pueden ocupar dentro del PDF. Como la firma incluye la cadena de certificaci\u00f3n completa, si esta es muy extensa puede llegar a agotarse este espacio y resultar en una firma inv\u00e1lida o corrupta.","title":"No se permite la firma de PDF con ciertos certificados"},{"location":"markdown_strict/MCF_manual-integrador_ES/#el-servicio-de-firma-trifasica-genera-un-error-al-realizar-firmas-xades-en-servidores-jboss","text":"A partir de determinada versi\u00f3n del servidor de aplicaciones JBoss (7 / EAP 6), este incorpora de serie diversas bibliotecas Java que entran en conflicto con la versi\u00f3n de estas mismas bibliotecas incorporadas en el JRE/JDK de Oracle. A saber, las bibliotecas Xalan y Xerces de Apache. Esto deriva en que durante el proceso de firma se produce un error de casting o similar, seg\u00fan sea la operaci\u00f3n y versi\u00f3n de JBoss. El error se produce a que la JVM da preferencia a las bibliotecas proporcionadas por el servidor de aplicaciones frente a las suyas propias. Frente a esto, se propone una sucesi\u00f3n de posibles soluciones de tal forma que si la primera de ellas no es viable se intente la siguiente soluci\u00f3n y as\u00ed sucesivamente: Soluci\u00f3n 1: Revisar la documentaci\u00f3n del servidor de aplicaciones en cuesti\u00f3n para comprobar si existe un mecanismo documentado para dar preferencias a las bibliotecas de Java frente a las bibliotecas importadas por el propio servidor de aplicaciones. Soluci\u00f3n 2: Otra opci\u00f3n, no tan eficiente como la anterior, aunque puede que m\u00e1s sencilla, viene a ser identificar el fichero \u201crt.jar\u201d de la JVM de nuestro servidor e introducirlo en el directorio de bibliotecas del WAR del servicio de firma trif\u00e1sico (directorio WEB-INF/lib). Al igual que en el caso anterior, as\u00ed conseguiremos que la JVM d\u00e9 prioridad a la versi\u00f3n de Xalan/Xerces que incorpora este JAR, los por defecto de Java, en lugar de a las bibliotecas del servidor de aplicaciones. Soluci\u00f3n 3: Si todo lo anterior fracasase, pero supi\u00e9semos que ninguna otra aplicaci\u00f3n hace uso de estas bibliotecas del servidor de aplicaciones, podr\u00edamos sustituirlas por la versi\u00f3n 1.4.6 de Xerces y sus dependencias. De esta forma, se podr\u00eda ejecutar la operaci\u00f3n de firma, aunque varias funcionalidades de JBoss relacionadas con los despliegues seguros conforme a la arquitectura definida por RedHat podr\u00edan verse afectados.","title":"El servicio de firma trif\u00e1sica genera un error al realizar firmas XAdES en servidores JBoss"},{"location":"markdown_strict/MCF_manual-integrador_ES/#las-firmas-con-dnie-requieren-que-se-introduzca-el-pin-del-dnie-por-cada-operacion-de-firma","text":"El DNIe y los controladores que le dan soporte est\u00e1n desarrollados conforme a diversas normativas de seguridad, entre ellas, la norma europea EN14890. Esta norma define la necesidad de que el PIN del DNIe se presente ante cada una de las operaciones de firma. AutoFirma incorpora la biblioteca JMulticard, un controlador Java que le permite utilizar el DNIe sin necesidad de que se encuentre instalado el controlador oficial. As\u00ed mismo, permite activar o desactivar este controlador que, por defecto, se encuentra activado. Cuando se se utiliza JMulticard, el di\u00e1logo de inserci\u00f3n de PIN permitir\u00e1 seleccionar la opci\u00f3n de recordar la contrase\u00f1a, pero esta s\u00f3lo se recordar\u00e1 mientras AutoFirma se encuentre cargado y no se vuelva a pedir la selecci\u00f3n de certificado. Si desea que la contrase\u00f1a se recuerde durante varias operaciones, utilice el m\u00e9todo setStickySignatory() del JavaScript de despliegue para dejar preseleccionado el certificado despu\u00e9s de seleccionarlo. Cuando no se utilice JMulticard, la necesidad de volver a requerir el PIN de la tarjeta recaer\u00e1 sobre el propio controlador de DNIe, que podr\u00e1 o no recordarlo entre operaciones. Tenga en cuenta que la contrafirma de un documento con m\u00faltiples firmas puede implicar firmar varias veces, aunque s\u00f3lo se genere una \u00fanica firma electr\u00f3nica. As\u00ed pues, este tipo de firmas pueden requerir que el usuario inserte varias veces el PIN de su DNIe. Pueden consultar m\u00e1s informaci\u00f3n acerca del DNIe en el siguiente enlace: http://www.dnielectronico.es/PortalDNIe/","title":"Las firmas con DNIe requieren que se introduzca el PIN del DNIe por cada operaci\u00f3n de firma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#error-al-cargar-el-listado-de-certificados-despues-del-cambio-en-caliente-del-almacen-por-defecto","text":"Se ha detectado que despu\u00e9s de haber cargado el almac\u00e9n del sistema en Windows (realizando una operaci\u00f3n de firma, por ejemplo) puede producirse un error al cargar el almac\u00e9n de Mozilla Firefox despu\u00e9s de usar el m\u00e9todo setKeyStore para cambiar entre ellos. Este error se debe a que al realizar el cambio en caliente no se han cargado correctamente las dependencias necesarias del almac\u00e9n de Mozilla. Este problema no tiene soluci\u00f3n actualmente.","title":"Error al cargar el listado de certificados despu\u00e9s del cambio en caliente del almac\u00e9n por defecto"},{"location":"markdown_strict/MCF_manual-integrador_ES/#autofirma-no-puede-comunicarse-con-el-navegador-en-macos","text":"En algunos casos la instalaci\u00f3n de AutoFirma en macOS finaliza sin errores, pero no se instala el perfil de seguridad que permiten que AutoFirma se comunique de forma segura con el navegador web. En estos casos, al realizar una operaci\u00f3n de firma se arrancar\u00e1 correctamente AutoFirma pero este no ser\u00e1 capaz de transmitir el resultado de la firma al navegador web. Esto puede generar un error del navegador con el texto \u201cNo se ha podido conectar con AutoFirma.\u201d. Para solventar este problema ser\u00e1 necesario configurar manualmente la confianza en los certificados de AutoFirma. Para ello: Acceda a la aplicaci\u00f3n \u201cAcceso a llavero\u201d. Acceda al llavero \u201cSISTEMA\u201d y a la opci\u00f3n \u201cCertificados\u201d. En el listado de certificados mostrados deben aparecer los certificados \u201c127.0.0.1\u201d y \u201cAutoFirma ROOT\u201d. Si el icono que aparece junto a estos muestra el signo \u2018+\u2019, se conf\u00eda en los certificados y la comunicaci\u00f3n con AutoFirma deber\u00eda funcionar correctamente. Si no, continue con el proceso. Haga clic sobre el certificado \u201c127.0.0.1\u201d y pulse en la opci\u00f3n \u201cConfiar\u201d. En el di\u00e1logo que debe haber aparecido, despliegue el listado \u201cAl utilizar este certificado\u201d y seleccione la opci\u00f3n \u201cConfiar siempre\u201d. Repita los pasos 4 y 5 para el certificado \u201cAutoFirma ROOT\u201d. Compruebe que en ambos certificados aparece ahora el s\u00edmbolo \u2018+\u2019 junto a su icono. Cierre la ventana de los llaveros. Introduzca la contrase\u00f1a de su usuario en el di\u00e1logo para confirmar el cambio en la configuraci\u00f3n de seguridad.","title":"AutoFirma no puede comunicarse con el navegador en macOS"},{"location":"markdown_strict/MCF_manual-integrador_ES/#solo-se-realiza-la-firma-del-primer-documento-de-una-serie-cuando-se-realizan-las-firmas-desde-google-chrome","text":"El navegador Google Chrome dispone de un mecanismo de seguridad en base al cual no permite realizar m\u00e1s de una llamada a una URL externa ante una \u00fanica interacci\u00f3n del usuario, como la pulsaci\u00f3n de un bot\u00f3n, por ejemplo. Esta limitaci\u00f3n aplica a la llamada al Cliente @firma, tanto a AutoFirma en entornos de escritorio como a Cliente de firma m\u00f3vil en entornos Android, por lo que s\u00f3lo se podr\u00e1 abrir la aplicaci\u00f3n una s\u00f3la vez ante una \u00fanica operaci\u00f3n del usuario. La realizaci\u00f3n de firmas en serie con el cliente se debe realizar siempre invocando una operaci\u00f3n de firma una vez ha terminado la anterior (com\u00fanmente desde las funciones callback que notifican el final de una firma). En el caso por defecto de AutoFirma esta limitaci\u00f3n no afecta al usuario, ya que s\u00f3lo se invoca la aplicaci\u00f3n la primera vez y se le solicitan firmar los distintos documentos a trav\u00e9s de un socket. Sin embargo, la limitaci\u00f3n impuesta por Google Chrome s\u00ed afecta a AutoFirma cuando se fuerza que la comunicaci\u00f3n entre AutoFirma y el navegador se realice mediante servidor intermedio (mediante el uso de la sentencia \u201cAutoScript.setForceWSMode(true)\u201d) y afectar\u00e1 siempre al uso del Cliente de Firma Android. En estos casos, la aplicaci\u00f3n se abrir\u00e1 para procesar la primera firma de la serie, pero se ignorar\u00e1n las llamadas para procesar los siguientes documentos. Cuando se deba realizar la firma de m\u00faltiples documentos simult\u00e1neamente, se recomienda aplicar alguna de las siguientes directrices: Utilizar el modelo de firma de lotes de documentos. Nunca forzar la comunicaci\u00f3n por servidor intermedio. Recomendar a los usuarios de Android el uso de un navegador distinto a Google Chrome. Esta limitaci\u00f3n est\u00e1 relacionada con la descrita en el problema 10.11 No se abre la aplicaci\u00f3n de firma al realizar la firma desde Google Chrome .","title":"S\u00f3lo se realiza la firma del primer documento de una serie cuando se realizan las firmas desde Google Chrome"},{"location":"markdown_strict/MCF_manual-integrador_ES/#no-se-abre-la-aplicacion-de-firma-al-realizar-la-firma-desde-google-chrome","text":"El navegador Google Chrome dispone de un mecanismo de seguridad en base al cual no permite realizar una llamada a una URL externa pasados unos pocos segundos entre la interacci\u00f3n del usuario con la p\u00e1gina, como la pulsaci\u00f3n de un bot\u00f3n, y la propia llamada. Esta limitaci\u00f3n aplica a la llamada al Cliente @firma, tanto a AutoFirma en entornos de escritorio como a Cliente de firma m\u00f3vil en entornos Android, por lo que la aplicaci\u00f3n no se abrir\u00e1 si transcurre demasiado tiempo entre la solicitud de firma del usuario y la llamada a la aplicaci\u00f3n. Esto no debe afectar al uso de AutoFirma desde Chrome ya que, por defecto, la llamada a la aplicaci\u00f3n se realiza de forma inmediata y los datos se transmiten a trav\u00e9s de un socket. Sin embargo, la limitaci\u00f3n impuesta por Google Chrome s\u00ed puede afectar AutoFirma cuando se fuerza que la comunicaci\u00f3n entre AutoFirma y navegador se realice mediante servidor intermedio (mediante el uso de la sentencia \u201cAutoScript.setForceWSMode(true)\u201d) y en cualquier caso al uso del Cliente de Firma Android. En estos casos, si los datos no pueden enviarse a trav\u00e9s de la URL de invocaci\u00f3n a la aplicaci\u00f3n, deber\u00e1n subirse primeramente al servidor intermedio para que despu\u00e9s la aplicaci\u00f3n de firma los descague. Cuando esta subida de los datos dure m\u00e1s de unos pocos segundos, la aplicaci\u00f3n de firma no se abrir\u00e1. Por regla general, para evitar los problemas derivados de esta restricci\u00f3n de navegador Chrome, se deber\u00edan seguir las siguientes sugerencias: Utilizar el modelo de firma trif\u00e1sica con un DocumentManager a medida (no con el por defecto), para que los datos a transmitir entre el navegador y la aplicaci\u00f3n sean siempre peque\u00f1os. Nunca forzar la comunicaci\u00f3n por servidor intermedio. Recomendar a los usuarios de Android el uso de un navegador distinto a Google Chrome. Esta limitaci\u00f3n est\u00e1 relacionada con la descrita en el apartado 10.10 S\u00f3lo se realiza la firma del primer documento de una serie cuando se realizan las firmas desde Google Chrome .","title":"No se abre la aplicaci\u00f3n de firma al realizar la firma desde Google Chrome"},{"location":"markdown_strict/MCF_manual-integrador_ES/#no-se-abre-la-aplicacion-de-firma-con-edge-legacy-edgehtml","text":"Existen determinada configuraci\u00f3n de Microsoft Edge Legacy que impide el uso de sockets, lo que lleva a que la aplicaci\u00f3n no se pueda comunicar con el JavaScript de despliegue y este termine dando un error pasado un tiempo de espera. Este error se puede identificar cuando al inciar la operaci\u00f3n se muestra la imagen de inicio de AutoFirma ( splash) pero nunca se llega a mostrar la aplicaci\u00f3n. Adem\u00e1s, en la consola de Edge aparece recurrentemente un error con el mensaje: SCRIPT12029: SCRIPT12029: WebSocket Error: Network Error 12029, No se pudo establecer una conexi\u00f3n con el servidor Este problema se debe a que el navegador est\u00e1 aplicando ciertas restricciones a la aplicaci\u00f3n considerando que se trata de un servidor externo. Esto se produce cuando se encuentra en Windows habilitada la opci\u00f3n de considerar parte de la intranet los sitios a los que no se acceda a trav\u00e9s de un servidor proxy. Puede ver esta opci\u00f3n a trav\u00e9s del panel \u201cOpciones de Internet\u201d del sistema operativo, pesta\u00f1a \u201cSeguridad\u201d, al pulsar en la zona \u201cIntranet\u201d y seguidamente en el bot\u00f3n \u201cSitios\u201d. < Es probable que esta opci\u00f3n se encuentre habilitada como parte de una configuraci\u00f3n de maqueta corporativa. Si es as\u00ed, NO deshabilite esta opci\u00f3n, ya que podr\u00eda afectar negativamente a la seguridad de su equipo o el funcionamiento de aplicaciones coorporativas. Con esta opci\u00f3n habilitada no podr\u00e1 utilizar AutoFirma con Edge Legacy. Si es posible, actualice a Edge Chromium o utilice otro navegador web.","title":"No se abre la aplicaci\u00f3n de firma con Edge Legacy (EdgeHTML)"},{"location":"markdown_strict/MCF_manual-integrador_ES/#no-se-abre-la-aplicacion-de-firma-con-firefox-cuando-el-servidor-declara-una-politica-de-seguridad-csp","text":"Mozilla Firefox no abre por defecto las URL con esquemas personalizados cuando el servidor web declara una pol\u00edtica de seguridad. Para permitir las llamadas con protocolo \u201cafirma\u201d utilizadas por el Cliente @firma, ser\u00e1 necesario agregar a la pol\u00edtica de seguridad el esquema correspondiente. Consulte el apartado 5.4 Configuraci\u00f3n del Content Security Policy para m\u00e1s informaci\u00f3n.","title":"No se abre la aplicaci\u00f3n de firma con Firefox cuando el servidor declara una pol\u00edtica de seguridad (CSP)"},{"location":"markdown_strict/MCF_manual-integrador_ES/#comunicacion-javascript-de-despliegue-cliente-firma","text":"El JavaScript de despliegue del Cliente @firma es el que incluye la l\u00f3gica de comunicaci\u00f3n entre el navegador Web y el cliente de firma. Algunas de las operaciones solicitadas a trav\u00e9s del JavaScript de despliegue ser\u00e1n procesadas directamente por el propio JavaScript, mientras que otras s\u00ed requerir\u00e1n que traslade la solicitud al Cliente de firma. A pesar de que es el JavaScript de despliegue el que gestiona la delegaci\u00f3n de tareas en la aplicaci\u00f3n nativa correspondiente a cada entorno, deben cumplirse una serie de requisitos para que esto sea posible. AutoFirma es una herramienta nativa que puede instalarse en Windows, Linux y macOS como herramienta independiente de firma de datos locales. Sin embargo, al instalarse en el sistema tambi\u00e9n registran el protocolo \u201cafirma\u201c, mediante lo cual atienden a las llamadas realizadas a este protocolo. La llamada por protocolo es un mecanismo de invocaci\u00f3n de aplicaciones (si acaso la propia aplicaci\u00f3n que realiza la llamada no puede atender a este protocolo) mediante el que puede pasarse una cantidad limitada de informaci\u00f3n a modo de par\u00e1metros. Sin embargo, este protocolo s\u00f3lo permite la comunicaci\u00f3n en un sentido ya que la aplicaci\u00f3n invocada no puede hacer referencia a la instancia de aquella que la invoc\u00f3. Es por esto que, para permitir la comunicaci\u00f3n bidireccional, Autofirma establece 2 mecanismos distintos: La comunicaci\u00f3n mediante socket . Este sistema se utiliza cuando se ejecuta la operaci\u00f3n en un equipo sobremesa y navegador Chrome, Firefox, Safari, Internet Explorer 11 y Edge. La comunicaci\u00f3n mediante un servidor intermedio. Este sistema requiere el despliegue de los dos servicios auxiliares de comunicaci\u00f3n y puede utilizarse potencialmente en cualquier navegador. Consulte el apartado Servicios para m\u00e1s informaci\u00f3n. Dado que este sistema ofrece un peor rendimiento, por defecto s\u00f3lo se utiliza en entornos de usuario que no soportan la comunicaci\u00f3n por sockets o en los que puede dar problemas: dispositivos m\u00f3viles, Internet Explorer 10 e inferiores, Safari 10\u2026. Por regla general, siempre se deber\u00edan desplegar los servicios auxiliares para la comunicaci\u00f3n por servidor intermedio , ya que hay entornos que dependen de esos servicios, incluso si no son los m\u00e1s utilizados.","title":"Comunicaci\u00f3n JavaScript de despliegue \u2013 Cliente @firma"},{"location":"markdown_strict/MCF_manual-integrador_ES/#comunicacion-por-sockets","text":"En la comunicaci\u00f3n por socket , AutoFirma abre un socket local SSL y el JavaScript de despliegue traslada las peticiones de la aplicaci\u00f3n a trav\u00e9s del \u00e9l. Las respuestas se obtienen a trav\u00e9s del propio socket . < < < La arquitectura de comunicaci\u00f3n seguida en este proceso se describe a continuaci\u00f3n: Primeramente, el tr\u00e1mite ordena la operaci\u00f3n en cuesti\u00f3n por medio del JavaScript de despliegue del Cliente @firma, por ejemplo, una operaci\u00f3n de firma. A continuaci\u00f3n, el JavaScript detectar\u00e1 que el entorno del usuario soporta la comunicaci\u00f3n por sockets y lanzar\u00e1 AutoFirma mediante una invocaci\u00f3n por protocolo junto con las instrucciones para abrirlo. AutoFirma abrir\u00e1 este socket cifrando el canal mediante un certificado SSL y el JavaScript podr\u00e1 enviar la orden de firma a trav\u00e9s del este. Una vez abierta la aplicaci\u00f3n, cualquier petici\u00f3n posterior se realizar\u00e1 a trav\u00e9s del mismo socket, sin necesidad de relanzarla. AutoFirma se cerrar\u00e1 al detectar que el puerto se ha cerrado o, si no es posible detectarlo, cuando pase un tiempo sin haber recibido m\u00e1s peticiones desde el JavaScript. La comunicaci\u00f3n a trav\u00e9s del socket se cifra mediante el protocolo TLS v1.1/v1.2. Es necesario tener habilitados estos protocolos en el navegador para poder establecer la comunicaci\u00f3n con AutoFirma.","title":"Comunicaci\u00f3n por sockets"},{"location":"markdown_strict/MCF_manual-integrador_ES/#comunicacion-por-servidor-intermedio","text":"Este modo de comunicaci\u00f3n se basa en dos servicios disponibles en el mismo dominio que el tr\u00e1mite Web en el que se va a firmar. Cuando el JavaScript de despliegue y la aplicaci\u00f3n de firma necesiten comunicarse, subir\u00e1n la informaci\u00f3n de la operaci\u00f3n a realizar a un servidor, de donde tendr\u00e1 que descarg\u00e1rselo el destinatario de dichos datos. La comunicaci\u00f3n por servidor intermedio es la utilizada por defecto cuando se accede a la p\u00e1gina desde un dispositivo m\u00f3vil (en el que no podemos abrir un socket local) y cuando se accede desde otro entorno con un navegador no compatible con la comunicaci\u00f3n por sockets o en el que se han encontrado problemas. La arquitectura de comunicaci\u00f3n seguida en este proceso se describe a continuaci\u00f3n: < < < < Cuando el JavaScript de despliegue deba enviar a la aplicaci\u00f3n de firma la ejecuci\u00f3n de una operaci\u00f3n, subir\u00e1 los datos que deba enviarle al servidor intermedio por medio del servicio de guardado, invocar\u00e1 a la aplicaci\u00f3n de firma mediante una llamada por protocolo y \u00e9sta se descargar\u00e1 los datos por medio del servicio de recuperaci\u00f3n. Una vez procesados los datos, la aplicaci\u00f3n almacenar\u00e1 el resultado en el servidor intermedio y el JavaScript de despliegue descargar\u00e1 estos datos del servidor para obtener el resultado final. En este modo de comunicaci\u00f3n, el JavaScript de despliegue abre la aplicaci\u00f3n de firma por cada operaci\u00f3n. Despu\u00e9s de finalizar una operaci\u00f3n, la aplicaci\u00f3n se cierra o queda en segundo plano. Consulte el apartado 5.3.1 Servicios auxiliares de comunicaci\u00f3n para saber m\u00e1s de estos servicios del Cliente @firma y c\u00f3mo desplegarlos.","title":"Comunicaci\u00f3n por servidor intermedio"},{"location":"markdown_strict/MCF_manual-integrador_ES/#firma-trifasica_1","text":"Una firma electr\u00f3nica se compone de los siguientes pasos: Construir la estructura que el usuario debe firmar seg\u00fan el formato de firma y la configuraci\u00f3n seleccionada. Realizar la firma digital de esos datos con el certificado del usuario. Introducir la firma digital en la estructura de firma. En el comportamiento por defecto, AutoFirma realizar\u00eda todos estos pasos consecutivamente. Sin embargo, el proceso puede realizarse en tres fases separadas, en donde la primera y la tercera fase, que son las que no requieren la clave privada de firma, se realicen en un servidor remoto, mientras que la segunda seguir\u00eda realiz\u00e1ndose en el equipo cliente. Este proceso de firma dividido en 3 fases es lo que se denomina firma trif\u00e1sica. Esta operativa resulta de mucho inter\u00e9s en determinados casos: El origen y/o el destino de la informaci\u00f3n es un servidor , de tal forma que se pueden pre-procesar los datos en servidor (Fase I) y mandar al usuario s\u00f3lo la informaci\u00f3n m\u00ednima necesaria; el usuario la firmar\u00eda en su sistema (Fase II) y el resultado se enviar\u00eda de vuelva a servidor; en donde se compondr\u00eda la firma (Fase III) y podr\u00eda postprocesarse y almacenarse. Se necesita firmar documentos muy grandes . La firma trif\u00e1sica interesa en este caso porque la mayor carga de proceso recaer\u00eda sobre el servidor y no sobre el sistema del usuario que presuntamente tendr\u00e1 menos recursos. El uso de la firma trif\u00e1sica en estos casos conlleva una serie de ventajas y desventajas: Ventajas El documento no viaja a trav\u00e9s de la red. Mayor facilidad para desarrollos sobre dispositivos m\u00f3viles y similares, ya que no es necesario programar la l\u00f3gica del formato para el dispositivo, s\u00f3lo es necesaria la fase del cifrado de los datos con la clave del usuario. Menos propenso a errores debido a que la parte cliente no se ver\u00eda expuesta a las muchas variables del entorno que pueden afectar a los distintos formatos de firma (versiones preinstaladas de bibliotecas, cambios en Java, \u2026). Las operaciones m\u00e1s complejas se realizan en servidor, un entorno mucho m\u00e1s controlado. Desventajas: Implica un mayor n\u00famero de conexiones de red, aunque el tr\u00e1fico de red, seg\u00fan el caso, podr\u00eda sea menor. Requiere el despliegue de un servicio en el servidor que se encargue de realizar las fases 1 y 3. Debe recalcarse que el procedimiento de firma trif\u00e1sica es \u00fatil cuando los datos a firmar residen en servidor y la firma generada se necesita tambi\u00e9n en servidor. En estos casos, se podr\u00eda indicar al servidor de donde obtener los datos a firmar y qu\u00e9 hacer con la firma generada. Si los datos y/o la firma deben estar en cliente, no solo se produce un innecesario tr\u00e1fico de red, sino que se aumenta la posibilidad de fallo y se incrementan las necesidades de memoria del cliente de firma. El proceso de firma de lotes del Cliente @firma realiza siempre firmas trif\u00e1sicas, ya que en un escenario en el que se deben cargar m\u00faltiples datos y se generan m\u00faltiples firmas se puede volver inviable el conservar en memoria toda la informaci\u00f3n, adem\u00e1s del hecho de que probablemente haya que descargarla y luego subirla de nuevo al servidor. Cuando se hable de un proceso de firma de lotes se debe entender que se usar\u00e1n firmas trif\u00e1sicas, s\u00f3lo que se har\u00e1 uso de los servicios de prefirma y postfirma de lotes en lugar del servicio de firma trif\u00e1sica tradicional. Por lo dem\u00e1s, todas las consideraciones de firma trif\u00e1sica afectan de igual manera al proceso de firma de lotes.","title":"Firma trif\u00e1sica"},{"location":"markdown_strict/MCF_manual-integrador_ES/#servicios-de-firma-trifasica-y-de-lotes","text":"Los servicios de firma trif\u00e1sica y de lotes realizan en servidor la primera y tercera fase del proceso de firma. Junto al Cliente @firma se distribuye el archivo WAR \u201cafirma-server-triphase-signer.war\u201d que despliega los servicios con las funcionalidades de firma trif\u00e1sica. Estoa servicios no es dependientes de ning\u00fan servidor de aplicaciones concreto. Consulte el manual de su servidor de aplicaciones para saber c\u00f3mo desplegar este fichero WAR y el apartado 5.3.2 Servicios de firma trif\u00e1sica y firma de lotes para saber como configurar los servicios. Estos servicios soportan la generaci\u00f3n de firmas en formato CAdES, XAdES, PAdES y FacturaE y admiten las mismas opciones de configuraci\u00f3n que las firmas monof\u00e1sicas de estos formatos. Desplegar y configurar estos servicios es necesario para la generaci\u00f3n expresa de firmas trif\u00e1sicas, el uso de la operativa de firma de lotes, en la que todas las firmas se generan de forma trif\u00e1sica. Tambi\u00e9n puede ser necesario para el uso del Cliente de firma m\u00f3vil, ya que este delega en el servicio trif\u00e1sico la generaci\u00f3n de las firmas en los formatos que no soportan nativamente. Para saber m\u00e1s acerca del Cliente @firma m\u00f3vil, consulte el apartado 9 Compatibilidad con dispositivos m\u00f3viles y AutoFirma .","title":"Servicios de firma trif\u00e1sica y de lotes"},{"location":"markdown_strict/MCF_manual-integrador_ES/#gestor-de-documentos-del-servicio","text":"La principal ventaja del proceso de firma trif\u00e1sica es que no es necesario descargar a la p\u00e1gina web los datos a firmar para luego pas\u00e1rselos al m\u00e9todo de firma, ni ser\u00e1 necesario recoger la firma en un m\u00e9todo callback para luego enviarla al servidor. Los datos pueden cargarse directamente en servidor, no es necesario que viajen al equipo del usuario, y la firma puede guardarse directamente, sin necesidad de que la recoja nuestra aplicaci\u00f3n. Esta l\u00f3gica de cargar los datos y guardar la firma la gestiona el servicio de firma trif\u00e1sica por medio de lo que llamaremos \u201cgestor de documentos\u201d ( Document Manager ). Nuestro servicio de firma trif\u00e1sica tendr\u00e1 configurado un gestor de documentos que le dir\u00e1 c\u00f3mo obtener los datos y guardar las firmas. Este gestor de documentos se configura a trav\u00e9s de la propiedad \u201cdocument.manager\u201d del fichero de configuraci\u00f3n del servicio. Este gestor se utilizar\u00e1 tanto para las operaciones de firma trif\u00e1sica individuales como para las operaciones de firma de lotes. Un desarrollador puede crear un gestor de documentos optimizado para el proceso en el que se va a utilizar, pero el servicio de firma trif\u00e1sica se distribuye con varios gestores de documento ya integrados: es.gob.afirma.triphase.server.document.SelfishDocumentManager Es el Document Manager por defecto y emula el comportamiento de la firma monof\u00e1sica del cliente. Si no tenemos inter\u00e9s en la firma trif\u00e1sica, pero s\u00ed queremos que nuestra aplicaci\u00f3n sea compatible con la operaci\u00f3n de firma de los clientes m\u00f3viles de firma, deberemos desplegar el servicio de firma trif\u00e1sica con este gestor de documentos configurado. Este servicio permitir\u00e1 completar la firma cuando se utilice un formato no soportado por la aplicaci\u00f3n m\u00f3vil en cuesti\u00f3n: Cliente @firma Android: XAdES y FacturaE. Cliente @firma iOS: XAdES, FacturaE y PAdES. Nota : Este gestor de documentos carece de valor en las operaciones de firma de lotes, ya que no hace nada con las firmas y estas se pierden. Recibe: Los datos a firmar. Devuelve: La firma generada. es.gob.afirma.triphase.server.document.FileSystemDocumentManager Permite cargar los datos a firmar desde un directorio de entrada y guarda las firmas resultantes en un directorio de salida. Recibe: El nombre del fichero de datos a firmar. Devuelve: El nombre con el que se ha guardado el fichero de firma. Si se configura este Document Manager , se pueden configurar otras cuatro propiedades en el fichero de configuraci\u00f3n del servicio: docmanager.filesystem.indir: Directorio del servidor en donde se encuentran los documentos de datos. docmanager.filesystem.outdir: Directorio del servidor en donde se almacenan las firmas generadas. docmanager.filesystem.overwrite: Configura si se deben sobrescribir los ficheros de firma si ya existe una con el mismo nombre (true) o no (false). docmanager.filesystem.maxDocSize: Permite limitar a un tama\u00f1o m\u00e1ximo los ficheros que se quieren firmar. El tama\u00f1o se indicar\u00e1 en bytes. Si el fichero supera este tama\u00f1o, no se firmar\u00e1. Advertencia: La inclusi\u00f3n del FileSystemDocumentManager busca servir como ejemplo de gestor de documentos. Este gestor no deber\u00eda usarse salvo que se ajuste muy concretamente a sus necesidades. Si no es as\u00ed, lo correcto es que implemente su propio gestor de documentos optimizado para la carga y el guardado de documentos en sus sistemas. Consulte el apartado II.2.1 Gestor de documentos \u201cFileSystemDocumentManager\u201d para obtener informaci\u00f3n sobre c\u00f3mo integrar el uso de este gestor de documentos en su aplicaci\u00f3n. es.gob.afirma.triphase.server.document.LegacyBatchDocumentManager Permite mantener la compatibilidad con los SaveSigner del antiguo mecanismo de lotes. Este gestor no se deber\u00eda utilizar m\u00e1s que para esta finalidad. Permite los dos mecanismos de entrada que permit\u00eda el antiguo sistema de firmas (datos en Base64 o URL), y es compatible con los SignSaver que exist\u00edan por defecto y cualquier otro agregado a posteriori. Recibe: Los datos coficiados en Base 64 o una URL a los mismos. Devuelve: La cadena \u201cOK\u201d. Si se configura este Document Manager , tambi\u00e9n se puede configurar las siguientes propiedades en el fichero de configuraci\u00f3n del servicio: docmanager.legacybatch.allowedsources: Fuentes de datos de entrada admitidos. Deber\u00e1 indicar las distintas fuentes de datos separadas por punto y coma (\u2018;\u2019). Los valores admitidos son: base64: Datos de entrada en Base 64. file:/: URL de un fichero de datos en servidor. Se puede completar con la parte de la ruta que se desee y terminar con asterisco (\u2018*\u2019) para determinar cualquier fichero en esa ruta. (No se recomienda el uso de este esquema) http://: URL con esquema HTTP para el acceso remoto a los datos. Se puede completar con la parte de la ruta que se desee y terminar con asterisco (\u2018*\u2019) para determinar cualquier origen en esa ruta. https://: URL con esquema HTTPS para el acceso remoto a los datos. Se puede completar con la parte de la ruta que se desee y terminar con asterisco (\u2018*\u2019) para determinar cualquier origen en esa ruta. ftp://: URL para el acceso remoto a los datos en un FTP. Se puede completar con la parte de la ruta que se desee y terminar con asterisco (\u2018*\u2019) para determinar cualquier origen en esa ruta. Por ejemplo: base64;https://www.midominio.com/datos/* Admite datos en base 64 y datos proporcionados a trav\u00e9s de una direcci\u00f3n HTTPS determinada. docmanager.legacybatch.checksslcerts: Indica si se debe comprobar la confianza en el certificado SSL de las fuentes de datos en los que se encuentre el canal cifrado. Si se establece con valor true, se realizar\u00e1 la comprobaci\u00f3n y se se establece a false, no. docmanager.legacybatch.maxDocSize: Permite limitar a un tama\u00f1o m\u00e1ximo los ficheros que se quieren firmar. El tama\u00f1o se indicar\u00e1 en bytes. Si el fichero supera este tama\u00f1o, no se firmar\u00e1. Consulte el apartado II.2.2 Gestor de documentos \u201cLegacyBatchDocumentManager\u201d para obtener informaci\u00f3n sobre c\u00f3mo integrar el uso de este gestor de documentos en su aplicaci\u00f3n. Un desarrollador Java podr\u00eda crear nuevos gestores de documentos e integrarlos en el servicio. Esto le permitir\u00eda crear procesos \u00f3ptimos que accediesen a sus entornos para recoger los datos y guardar las firmas y as\u00ed se evitase la descarga de los datos redujese la transferencia de datos entre el cliente de firma y los servidores del por red.","title":"Gestor de documentos del servicio"},{"location":"markdown_strict/MCF_manual-integrador_ES/#gestores-de-documentos-personalizados","text":"","title":"Gestores de documentos personalizados"},{"location":"markdown_strict/MCF_manual-integrador_ES/#desarrollo-de-un-gestor-de-documentos-personalizado","text":"S\u00f3lo el responsable de un entorno conoce los requisitos de acceso al mismo, el proceso adecuado para acceder y las medidas de seguridad que es necesario implementar. Es por esto por lo que el servicio trif\u00e1sico permite que los integradores desarrollen su propia clase gestora de documentos y configurar en el servicio de firma trif\u00e1sica el que se utilice esta. Por ejemplo, si los documentos a firmar se almacenasen en un repositorio de contenidos remoto y las firmas se deben guardar en base de datos, podremos implementar la l\u00f3gica de nuestra clase gestora de documentos para que acceda a estos entornos usando las credenciales adecuadas, recupere los documentos y almacene las firmas. Para implementar un gestor de documentos, se deber\u00e1 implementar la interfaz es.gob.afirma.triphase.server.DocumentManager o es.gob.afirma.triphase.server.BatchDocumentManager (que hereda de la anterior), disponibles en el m\u00f3dulo \u201cafirma-server-triphase-signer-document\u201d del proyecto. Si se desea, se puede importar a su proyecto mediante la siguiente referencia de Maven: <dependency> <groupId>es.gob.afirma</groupId> <artifactId>afirma-server-triphase-signer-document</artifactId> <version>1.8.0</version> </dependency> La interfaz DocumentManager define los siguientes m\u00e9todos que deberemos implementar: byte[] getDocument(String dataRef, X509Certificate[] certChain, Properties prop) throws IOException; M\u00e9todo para la obtenci\u00f3n del documento que se desea firmar. Los par\u00e1metros recibidos en este m\u00e9todo ser\u00e1n: dataRef: Referencia a los datos que se deben firmar. Esta cadena es la que se introduce en el m\u00e9todo de firma o agregar documento a un lote. certChain: Cadena de certificaci\u00f3n del certificado utilizado para firmar. Seg\u00fan el tipo de operaci\u00f3n, la aplicaci\u00f3n utilizada y el almac\u00e9n del usuario, es posible que este valor s\u00f3lo contenga el certificado de firma o incluso que el par\u00e1metro sea nulo. prop: Par\u00e1metros para la configuraci\u00f3n de firma. Este es par\u00e1metro extraParams proporcionado en el m\u00e9todo de firma del Cliente @firma o el de agregar documento al lote. Se podr\u00edan incluir aqu\u00ed par\u00e1metros que no entren en conflicto con los de firma y que nos sirvan para proporcionar mayor informaci\u00f3n a la clase gestora de documentos. Esta funci\u00f3n debe devolver el binario del documento a firmar. En caso de producirse un error al recuperar el documento, la clase gestora deber\u00e1 lanzar una excepci\u00f3n de tipo IOException. String storeDocument(String dataRef, X509Certificate[] certChain, byte[] data, Properties prop) throws IOException; M\u00e9todo para el tratamiento y guardado de la firma generada. Adem\u00e1s del guardado, en este m\u00e9todo se podr\u00edan implementar funciones adicionales de las que se quiera liberar a las distintas aplicaciones que hagan uso del gestor. Por ejemplo, se podr\u00eda implementar aqu\u00ed el proceso de validaci\u00f3n de la firma o la agregaci\u00f3n de un sello de tiempo (agregar un un sello de tiempo con @firma lleva impl\u00edcito el validar la firma). De esta forma, si fallase este proceso, el Cliente @firma nortificar\u00eda al usuario de forma inmediata. Los par\u00e1metros recibidos en este m\u00e9todo ser\u00e1n: dataRef: Identificador de los datos que se firmaron. Es el mismo valor que se debi\u00f3 recibir en el m\u00e9todo getDocument. certChain: Cadena de certificaci\u00f3n del certificado utilizado para firmar. Seg\u00fan el tipo de operaci\u00f3n, la aplicaci\u00f3n utilizada y el almac\u00e9n del usuario, es posible que este valor s\u00f3lo contenga el certificado de firma o incluso que el par\u00e1metro sea nulo. data: Firma electr\u00f3nica generada. Son los datos que se deber\u00e1n tratar y guardar. prop: Par\u00e1metros para la configuraci\u00f3n de firma. Este es par\u00e1metro extraParams proporcionado en el m\u00e9todo de firma del Cliente @ firma o el de agregar documento al lote. Se podr\u00edan incluir aqu\u00ed par\u00e1metros que no entren en conflicto con los de firma y que nos sirvan para proporcionar mayor informaci\u00f3n a la clase gestora de documentos. Este m\u00e9todo debe devolver una cadena en Base 64, que ser\u00e1 la que se reciba como par\u00e1metro de datos en el m\u00e9todo de \u00e9xito de firma de la aplicaci\u00f3n que invoc\u00f3 al Cliente @firma. Esta cadena no tiene que ser un dato significativo si no es necesario. Por ejemplo, podr\u00eda limitarse a devolver la cadena \u201cOK\u201d (codificada en base 64), \u00fanicamente para que la aplicaci\u00f3n sepa que ha finalizado correctamente. Este valor de retorno no se devuelve a la aplicaci\u00f3n cuando se ha realizado una firma de lote. En este caso, se obtiene una estructura JSON con el estado en el que ha terminado cada una de las firmas del lote. En caso de producirse un error al tratar y guardar el documento, la clase gestora deber\u00e1 lanzar una excepci\u00f3n de tipo IOException. Por su parte, la interfaz BatchDocumentManager declara los siguientes m\u00e9todos adicionales: void rollback(String dataRef, X509Certificate[] certChain, Properties prop) throws IOException Este m\u00e9todo revierte el proceso de guardado de una firma mediante el m\u00e9todo storeDocument. Este m\u00e9todo se utilizar\u00eda si se produjese un fallo en el guardado de un documento del lote y la aplicaci\u00f3n hubiese indicado que se desea detener el proceso en caso de error, ya que se deb\u00eda guardar todo o nada. Los par\u00e1metros recibidos en este m\u00e9todo son los mismos usados en el de guardado: dataRef: Referencia a los datos firmados. Esta cadena es la que se introduce en el m\u00e9todo de firma o agregar documento a un lote. certChain: Cadena de certificaci\u00f3n del certificado utilizado para firmar. Seg\u00fan el tipo de operaci\u00f3n, la aplicaci\u00f3n utilizada y el almac\u00e9n del usuario, es posible que este valor s\u00f3lo contenga el certificado de firma o incluso que el par\u00e1metro sea nulo. config: Par\u00e1metros para la configuraci\u00f3n de firma. Este es par\u00e1metro extraParams proporcionado en el m\u00e9todo de firma del Cliente @ firma o el de agregar documento al lote. Se podr\u00edan incluir aqu\u00ed par\u00e1metros que no entren en conflicto con los de firma y que nos sirvan para proporcionar mayor informaci\u00f3n a la clase gestora de documentos. En caso de producirse un error al revertir el guardado, se deber\u00e1 lanzar una excepci\u00f3n de tipo IOException. void init (Properties config) Este m\u00e9todo inicializa el gestor con los par\u00e1metros de configuraci\u00f3n establecidos en el fichero de configuraci\u00f3n del servidor trif\u00e1sico (\u201ctps_config.properties\u201d). Esto permite configurar el comportamiento del gestor por medio de este fichero. Si no se implementa la interfaz BatchDocumentManager, pero a\u00fan se quiere poder configurar el gestor con las propiedades del fichero de configuraci\u00f3n del servicio, se puede implementar en la clase gestora un constructor que reciba un objeto Properties. El servicio de firma trif\u00e1sica har\u00e1 uso de este constructor para inicializar la clase y le proporcionar\u00e1 a trav\u00e9s de este par\u00e1metro todas las propiedades del fichero de configuraci\u00f3n. Si se implementa la interfaz BatchDocumentmanager, siempre se utilizar\u00e1 el constructor vac\u00edo y el m\u00e9todo init de la clase. Una clase que herede de DocumentManager tambi\u00e9n se puede usar como gestor de documentos en las operaciones de firma de lote, pero al no tener definido esta interfaz el m\u00e9todo rollback, el uso con el par\u00e1metro stopOnError de la firma de lotes estar\u00eda desaconsejado, ya que no se deshar\u00edan los guardados que se hiciesen.","title":"Desarrollo de un gestor de documentos personalizado"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-de-un-gestor-de-documentos-personalizado","text":"Para configurar una clase gestora de documentos personalizada se deber\u00e1 incluir esta como parte del servicio de firma trif\u00e1sica. Esto se puede hacer generando una JAR con las clases y recursos necesarios del conector e incluy\u00e9ndola dentro del WAR del servicio de firma trif\u00e1sica. Para esto, se debe abrir el WAR \u201cafirma-server-triphase-signer.war\u201d con una aplicaci\u00f3n de compresi\u00f3n de ficheros y agregar el JAR en el subdirectorio \u201c\\WEB-INF\\lib\\. Esta versi\u00f3n modificada del WAR es la que se deber\u00e1 desplegar en lugar del WAR por proporcionado. Seguidamente, se deber\u00e1n establecer en el fichero de configuraci\u00f3n del servicio (\u201ctps_config.properties\u201d) la propiedad \u201cdocument.manager\u201d con el nombre completo de nuestra clase gestora de documentos y todas aquellas propiedades adicionales que quieran tomar de este fichero. Puede consultar m\u00e1s informaci\u00f3n sobre este fichero en el apartado 5.3.2.1 Configuraci\u00f3n del servicio trif\u00e1sico . Si la recuperaci\u00f3n de los documentos del gestor de documentos puede cosiderarse una tarea pesada, puede valorarse activar la cach\u00e9 del servicio de firma trif\u00e1sica. Consulte m\u00e1s acerca de esta propiedad en el apartado 5.3.2.1 Configuraci\u00f3n del servicio trif\u00e1sico .","title":"Configuraci\u00f3n de un gestor de documentos personalizado"},{"location":"markdown_strict/MCF_manual-integrador_ES/#uso-de-la-firma-trifasica-con-los-gestores-de-documentos","text":"En este apartado se describe c\u00f3mo deben utilizarse las operaciones de firma trif\u00e1sica y de lotes con cada uno de los gestores de documentos incluidos por defecto en el servicio.","title":"Uso de la firma trif\u00e1sica con los gestores de documentos"},{"location":"markdown_strict/MCF_manual-integrador_ES/#gestor-de-documentos-filesystemdocumentmanager","text":"","title":"Gestor de documentos \u201cFileSystemDocumentManager\u201d"},{"location":"markdown_strict/MCF_manual-integrador_ES/#parametros-de-uso-y-descripcion-del-funcionamiento","text":"La clase gestora de documentos FileSystemDocumentManager permite gestionar la firma de ficheros almacenados en servidor. Esta clase utiliza como identificador de documento el nombre de fichero, tanto en la entrada (fichero a firmar) como en la salida (fichero de firma). Esta clase gestora est\u00e1 preparada para recibir el nombre de los ficheros codificados en Base 64. Por ejemplo: El documento \u201cdocumento.pdf\u201d se indicar\u00eda con la cadena \u201cZG9jdW1lbnRvLnBkZg==\u201d. El documento \u201cfirma.xsig\u201d se indicar\u00eda con la cadena \u201cZmlybWEueHNpZw==\u201d. El resultado depende del tipo de operaci\u00f3n. En la funci\u00f3n callback de \u00e9xito de la operaci\u00f3n de firma se proporcionar\u00e1 el nombre del fichero codificado en Base64. En la funci\u00f3n callback de \u00e9xito de la firma del lote, se proporcionar\u00e1 \u00fanicamente el JSON con el resultado de la operaci\u00f3n del lote, independientemente de la clase gestora de documentos empleada. Es importante tener en cuenta que los nombres de fichero utilizados deben cumplir las restricciones del sistema de ficheros donde se almacenen los documentos. As\u00ed, por ejemplo, en un sistema de ficheros NTFS no deber\u00edamos indicar nunca un nombre de ficheros que contuviese el car\u00e1cter dos puntos (\u201c:\u201d). Por ejemplo, si quisi\u00e9ramos realizar una firma trif\u00e1sica con el Cliente @firma y nuestro servicio de firma trif\u00e1sica tuviese configurado el gestor de documentos FileSystemDocumentManager podr\u00edamos firmar as\u00ed: \u2026 var params = \"expPolicy=FirmaAGE\\nserverUrl=https://miweb.com/afirma-server-triphase-signer/SignatureService \"; // Queremos firmar el documento \"12345678.pdf\" del directorio de entrada AutoScript.sign (AutoScript.getBase64FromText(\"12345678.pdf\"), \"SHA512withRSA\", \"PAdEStri\", params, successCallback, errorCallback); \u2026 function successCallback(filenameB64, certB64) { // filenameB64 es el nombre del fichero de firma codificado en Base 64 } En una operaci\u00f3n de firma de lote, se usar\u00eda de la siguiente manera: \u2026 // Creamos el lote AutoScript.createBatch(\"SHA512withRSA\", \"PAdES\", \"sign\", null ); // Agregamos los documentos que queramos al lote AutoScript.addDocumentToBatch(\"1\", AutoScript.getBase64FromText(\"12345678.pdf\")); \u2026 // Iniciamos la firma var baseUrl = \" https://miweb.com/afirma-server-triphase-signer/\" AutoScript.signBatchProcess ( false , baseUrl + \"presign\", baseUrl + \"postsign\", null , successCallback, errorCallback); \u2026 function successCallback(jsonResult, certB64) { // jsonResult estructura JSON con el resultado de cada // operaci\u00f3n de firma del lote } Advertencia : Este gestor de documentos se incluye a modo ilustrativo. Si se desea utilizar en un entorno productivo, es necesario tener en cuenta algunos requisitos de seguridad. Por ejemplo, los documentos s\u00f3lo deber\u00edan almacenarse en el directorio de entrada del servidor en el que se vaya a iniciar el proceso de firma y deber\u00eda eliminarse del mismo una vez finalizada. De otra forma, este documento podr\u00eda ser recuperado por una aplicaci\u00f3n malintencionada mediante llamadas al servicio trif\u00e1sico. Las firmas en el directorio de salida tambi\u00e9n se deber\u00edan retirar una vez generadas.","title":"Par\u00e1metros de uso y descripci\u00f3n del funcionamiento"},{"location":"markdown_strict/MCF_manual-integrador_ES/#configuracion-en-alta-disponibilidad-con-varios-nodos","text":"Los directorios configurados para el uso de este gestor deben ser siempre directorios visibles y compartidos por todas las instancias en ejecuci\u00f3n. Este aspecto es especialmente importante en configuraciones de servidores de aplicaciones en alta disponibilidad, donde puede haber varios nodos que presten el servicio trif\u00e1sico, cada uno de ellos en un sistema de ficheros diferente. En este entorno, si se especifica una ruta local, puede ocurrir que esta ruta apunte a un directorio distinto en cada nodo (distinto servidor, disco diferente, otro sistema de ficheros, etc.). El que todos los nodos accedan al mismo directorio referenciado en la configuraci\u00f3n se puede lograr usando un almacenamiento compartido entre todos ellos (con el mismo punto de montaje), mediante enlaces simb\u00f3licos, etc. Es importante tambi\u00e9n asegurarse de que todos los nodos tienen los permisos adecuados sobre los directorios configurados.","title":"Configuraci\u00f3n en alta disponibilidad con varios nodos"},{"location":"markdown_strict/MCF_manual-integrador_ES/#gestor-de-documentos-legacybatchdocumentmanager","text":"El gestor de documentos LegacyBatchDocumentManager permite emular el funcionamiento del antiguo mecanismo de firma de lotes, facilitando as\u00ed la migraci\u00f3n al mecanismo descrito en el apartado 6.5 Firma de lotes predefinidos . Este gestor permite reutilizar los modos de referenciaci\u00f3n de documentos y los SignSaver que se usaban con el mecanismo anterior. Sin embargo, este gestor s\u00f3lo se deber\u00eda utilizar cuando no se puede abordar el desarrollo de un DocumentManager que implemente las funciones que se necesiten, ya que este gestor es un mero intermediario para comunicar un sistema con otro. Tenga en cuenta que, a pesar de emular el funcionamiento antiguo, la configuraci\u00f3n de este gestor de documentos debe encontrarse en el fichero \u201ctps_config.properties\u201d. El antiguo fichero \u201csignbatch_config.properties\u201d s\u00f3lo es necesario si se utiliza el antiguo mecanismo de firma de lotes.","title":"Gestor de documentos \u201cLegacyBatchDocumentManager\u201d"},{"location":"markdown_strict/MCF_manual-integrador_ES/#parametros-de-uso-y-descripcion-del-funcionamiento_1","text":"Este gestor de documentos admite varias fuentes de datos: Permite recibir los datos directamente codificados en Base 64. Permite recibir una URL para el acceso a los datos (HTTP, HTTPS, FTP o FILE). Por ejemplo, referencias v\u00e1lidas que se pueden utilizar son: wqFIb2xhIE11bmRvIQ== Firma la cadena \u201c\u00a1Hola Mundo!\u201d, que se obtiene al decodificar este Base 64. https://servidor.es/aplicacion/datos/prueba.txt Firma el contenido del fichero prueba.txt obtenido al descargarlo a trav\u00e9s de la URL. file://C:/datos/prueba.txt Firma el contenido del fichero prueba.txt cargado desde disco. En el fichero de configuraci\u00f3n \u201ctps_config.properties\u201d se puede configurar la propiedad \u201cdocmanager.legacybatch.allowedsources\u201d para establecer qu\u00e9 protocolos se pueden usar para el acceso a los datos y si se permite indicar los datos en Base 64 o no. Consulte el apartado 5.3.2.1 Configuraci\u00f3n del servicio trif\u00e1sico para conocer el listado completo de opciones de configuraci\u00f3n. El procesado y guardado de la firma lo realiza este gestor de documentos a trav\u00e9s de los SignSaver que se utilizaban en el antiguo mecanismo de firma de lotes. Para seleccionar y configurar el SignSaver, se deber\u00e1n proporcionar una serie de propiedades de configuraci\u00f3n a trav\u00e9s del par\u00e1metro extraParams del m\u00e9todo de creaci\u00f3n del lote o, si var\u00eda la configuraci\u00f3n para cada uno de los documentos, a trav\u00e9s del extraParam del m\u00e9todo de agregar documentos al lote. El SignSaver a utilizar se configurar\u00e1 por medio de la propiedad \u201csignSaver\u201d. Con esta propiedad el administrador podr\u00e1 configurar que clase de guardado se utilizar\u00e1. Esta puede ser una agregada por el al servicio o una de las que se encuentran ya integradas. Las clases integradas son: es.gob.afirma.signers.batch.SignSaverFile Clase para el guardado de la firma en disco en el servidor. Esta clase admite adem\u00e1s la siguiente propiedad para su configuraci\u00f3n: FileName Establece la ruta de guardado de la firma. es.gob.afirma.signers.batch.SignSaverHttpPost Clase para el env\u00edo de la firma a un servidor remoto. Esta clase admite adem\u00e1s las siguientes propiedades para su configuraci\u00f3n: PostUrl Configura la URL del servicio de guardado. PostParamName Nombre del par\u00e1metro en el que se agregar\u00e1 la firma. Un ejemplo de llamada al m\u00e9todo de agregar a documentos al lote cuando se encuentre este gestor de documentos configurado podr\u00eda ser: var ref1 = Base64.encode(\"Hola Mundo!!\"); var params1 = \"mode=implicit\\nsignSaver=es.gob.afirma.signers.batch.SignSaverFile\\nFileName=C:/Users/miusuario/firmas/firma1.csig\"; AutoScript.addDocumentToBatch(\"1\", ref1, \"CAdES\", \"sign\", params1); var ref2 = \"https://www.google.es\"; var params2 = \"format=XAdES Detached\\nsignSaver=es.gob.afirma.signers.batch.SignSaverFile\\nFileName=C:/Users/miusuario/firmas/firma2.xsig\"; AutoScript.addDocumentToBatch(\"2\", ref2, \"XAdES\", \"sign\", params2); Si ya dispon\u00eda de una clase SignSaver propia, podr\u00e1 seguir utiliz\u00e1ndola a trav\u00e9s de esta clase gestora de documentos. Para ello, configure a trav\u00e9s del par\u00e1metro de configuraci\u00f3n la propiedad \u201csignSaver\u201d con el nombre completo de su clase y agregue al mismo par\u00e1metro cualquier propiedad adicional que deba cargar su clase a trav\u00e9s de su m\u00e9todo init. < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"Par\u00e1metros de uso y descripci\u00f3n del funcionamiento"},{"location":"markdown_strict/MCF_roadmap_ES/","text":"Versi\u00f3n 2.0 Adopci\u00f3n de un modelo as\u00edncrono en el API JavaScript En la actualidad, el MiniApplet Cliente @firma usa un modelo s\u00edncrono en la comunicaci\u00f3n entre el Applet de Java y el c\u00f3digo JavaScript. Este modelo presenta ciertos problemas de importancia: El c\u00f3digo bloqueante (s\u00edncrono) ofrece una mala experiencia de usuario, y en ciertos navegadores (Firefox, etc.) autom\u00e1ticamente se le invita al usuario a detener la ejecuci\u00f3n del MiniApplet por considerarlo falto de respuesta. El c\u00f3digo bloqueante es incompatible con los modelos de ejecuci\u00f3n necesarios para implementar la operativa de firma prescindiendo de Java, como por ejemplo, con Apps en entornos m\u00f3viles. La tarea propuesta comprender\u00e1 una transici\u00f3n inicial a un modelo as\u00edncrono en el API JavaScript mediante el uso de punteros a funciones ( callbacks ). Soporte de Google Android 4 Ya con el modelo de API JavaScript as\u00edncrono implementado, se propone el dar soporte a Google Android (usando una App nativa en sustituci\u00f3n del Applet de Java) de al menos las siguientes caracter\u00edsticas del MiniApplet: Firmas CAdES simples Funciones auxiliares de conversi\u00f3n a y desde Base64 (la gesti\u00f3n de juegos de caracteres queda limitada al soporte que ofrece JavaScript, ya que no se cuenta con Java). Funciones auxiliares adicionales Quedar\u00eda directamente excluida la funcionalidad de filtro de certificados, ya que en los dispositivos m\u00f3viles Android la selecci\u00f3n de certificado es un proceso opaco sobre el cual no es posible incluir (es una medida de seguridad del sistema operativo). Soporte de Apple iOS Se propone la implementaci\u00f3n para Apple iOS de las caracter\u00edsticas anteriormente descritas para Google Android 4, con un soporte equivalente de funcionalidades: Uso del API JavaScript as\u00edncrono. Uso de una App nativa para la gesti\u00f3n de claves y certificados y la realizaci\u00f3n de la propia firma. Soporte de CAdES simple. Versi\u00f3n 2.1 Soporte de Windows 8 y Windows 8 RT en modo nativo Internet Explorer 10 en Windows 8 (modo Metro), Windows 8 RT y, en gran medida, en Windows Phone 8 no soportan Applets de Java en las p\u00e1ginas Web, por lo que es completamente incompatible con los actuales Applet y MiniApplet Cliente @firma. No obstante, Microsoft abre la puerta a una m\u00e1s segura integraci\u00f3n de aplicaciones externas con aplicaciones Web mediante la incorporaci\u00f3n en Windows 8 de los llamados \u201cContratos de Compartici\u00f3n\u201d ( Share Contracts ). Esta t\u00e9cnica de construcci\u00f3n de aplicaciones permite el traspaso de informaci\u00f3n entre aplicaciones Web basadas en JavaScript y aplicaciones nativas instaladas en Windows 8. Siguiendo este nuevo modelo, se propone la construcci\u00f3n de un m\u00f3dulo nativo (C#, .NET) Windows capaz de suplir las funcionalidades del MiniApplet Java y permitiendo una operativa equivalente al MiniApplet en plataformas Apple iOS o Google Android, de forma que sea posible la ejecuci\u00f3n del MiniApplet en Windows 8 (modo Metro) y Windows 8 RT, y sirviendo este desarrollo de base al soporte de Windows Phone 8. Soporte de PAdES en Google Android y Windows 8 Dado que el soporte propuesto para Windows 8 y Google Android se limitaba a firmas CAdES simples, se propone una ampliaci\u00f3n en estas plataformas para el soporte de PAdES, para lo cual se desarrollar\u00e1: Motor PAdES nativo para Android (Dalvik) Motor PAdES nativo para Windows 8 (C# .NET) El soporte de PAdES se har\u00e1 de una forma uniforme respecto al API actual para uso de PAdES con el MiniApplet (basado en Applet de Java). Soporte de multifirmas CAdES en Google Android y Windows 8 Dado que el soporte propuesto para Windows 8 y Google Android se limitaba a firmas CAdES simples, se propone una ampliaci\u00f3n de los motores CAdES para Android y Windows 8 para el adecuado soporte de multifirmas CAdES (cofirmas y contrafirmas). Versi\u00f3n 2.2 Soporte de PAdES en Apple iOS Dado que el soporte propuesto para Apple iOS se limitaba a firmas CAdES simples, se propone una ampliaci\u00f3n en estas plataformas para el soporte de PAdES, para lo cual se desarrollar\u00e1: Motor PAdES nativo para Apple iOS (Objective C / Xcode) El soporte de PAdES se har\u00e1 de una forma uniforme respecto al API actual para uso de PAdES en el resto de plataformas. Soporte de multifirmas CAdES en Apple iOS Dado que el soporte propuesto para Apple iOS se limitaba a firmas CAdES simples, se propone una ampliaci\u00f3n del motor CAdES para Apple iOS para el adecuado soporte de multifirmas CAdES (cofirmas y contrafirmas). Versi\u00f3n 2.3 Soporte de Mac OS X en modo nativo El soporte de Java como entorno de ejecuci\u00f3n para aplicaci\u00f3n Web es una caracter\u00edstica a extinguir en los sistemas operativos modernos, ya que es una fuente com\u00fan de entrada de software malintencionado y supone un serio problema de seguridad. En Mac OS X, la direcci\u00f3n en la que se avanza consiste en dificultar la ejecuci\u00f3n de Applets de Java, m\u00e1s que en impedir completamente su ejecuci\u00f3n (como ocurre en Windows 8): Apple ya no mantiene un entorno de ejecuci\u00f3n de Java (Java 7 en Mac OS X ya no es un producto Apple, como ocurr\u00eda con Java 5 y 6. Las actualizaciones del sistema operativo (Lion, Mountain Lion) desinstalan directamente el entorno de ejecuci\u00f3n de Java (JRE) sin consultar al usuario. Tras instalar Java, la ejecuci\u00f3n de Applets viene desactivada, y es necesario activarla manualmente. Tras activarla, se desactiva autom\u00e1ticamente y sin intervenci\u00f3n del usuario tras un tiempo sin usar Java, obligando al usuario a volver a activarla. Aun con la ejecuci\u00f3n de Applets activada, no es posible ejecutar un Applet descargado directamente de la Web de un organismo p\u00fablico espa\u00f1ol (descargado de cualquier sitio que no sea un servicio de distribuci\u00f3n de aplicaciones de la propia Apple), y para permitirlo el usuario debe relajar las restricciones de seguridad del sistema operativo (lo cual aumenta los riesgos de usos no autorizados, virus, software malintencionado, etc.). Con esas restricciones, la experiencia de usuario del MiniApplet (o Applet) Cliente @firma en Mac OS X es francamente deficiente, por lo que es conveniente plantear alternativas. Se propone el desarrollo de un complemento para navegadores Web en Apple Mac OS X para la realizaci\u00f3n de firmas electr\u00f3nicas sustituyendo de forma transparente al Applet Java del MiniApplet Cliente @firma, usando preferentemente NSAPI para proporcionar compatibilidad tanto a Apple Safari como a Mozilla Firefox o Google Chrome. Se propone un soporte inicial de CAdES simple. Soporte de claves y certificados en tarjeta SIM Uno de los problemas de la mayor\u00eda de los dispositivos m\u00f3viles a la hora de hacer firmas electr\u00f3nicas es la imposibilidad de usar SSCD (dispositivos seguros de creaci\u00f3n de firmas), ya que es dif\u00edcil, inc\u00f3modo o simplemente imposible el conectar un lector de tarjetas inteligentes, un SSCD en USB u otro SSCD al terminal. No obstante, una caracter\u00edstica com\u00fan de la mayor\u00eda de los terminales m\u00f3viles es que disponen de una tarjeta SIM/USIM para el acceso a la red, y estas tarjetas pueden ser adem\u00e1s un SSCD. La especificaci\u00f3n GSM (GSM 11.11 y GSM 11.14) especifican medios para el acceso a la tarjeta SIM (SIM Application Toolkit) desde o aplicaciones externas accediendo al API JavaCard. Se propone una tarea de investigaci\u00f3n sobre las posibilidades de soportar certificados y claves de firma en tarjeta SIM desde las aplicaciones m\u00f3viles del proyecto @firma.","title":"MCF roadmap ES"},{"location":"markdown_strict/MCF_roadmap_ES/#version-20","text":"","title":"Versi\u00f3n 2.0"},{"location":"markdown_strict/MCF_roadmap_ES/#adopcion-de-un-modelo-asincrono-en-el-api-javascript","text":"En la actualidad, el MiniApplet Cliente @firma usa un modelo s\u00edncrono en la comunicaci\u00f3n entre el Applet de Java y el c\u00f3digo JavaScript. Este modelo presenta ciertos problemas de importancia: El c\u00f3digo bloqueante (s\u00edncrono) ofrece una mala experiencia de usuario, y en ciertos navegadores (Firefox, etc.) autom\u00e1ticamente se le invita al usuario a detener la ejecuci\u00f3n del MiniApplet por considerarlo falto de respuesta. El c\u00f3digo bloqueante es incompatible con los modelos de ejecuci\u00f3n necesarios para implementar la operativa de firma prescindiendo de Java, como por ejemplo, con Apps en entornos m\u00f3viles. La tarea propuesta comprender\u00e1 una transici\u00f3n inicial a un modelo as\u00edncrono en el API JavaScript mediante el uso de punteros a funciones ( callbacks ).","title":"Adopci\u00f3n de un modelo as\u00edncrono en el API JavaScript"},{"location":"markdown_strict/MCF_roadmap_ES/#soporte-de-google-android-4","text":"Ya con el modelo de API JavaScript as\u00edncrono implementado, se propone el dar soporte a Google Android (usando una App nativa en sustituci\u00f3n del Applet de Java) de al menos las siguientes caracter\u00edsticas del MiniApplet: Firmas CAdES simples Funciones auxiliares de conversi\u00f3n a y desde Base64 (la gesti\u00f3n de juegos de caracteres queda limitada al soporte que ofrece JavaScript, ya que no se cuenta con Java). Funciones auxiliares adicionales Quedar\u00eda directamente excluida la funcionalidad de filtro de certificados, ya que en los dispositivos m\u00f3viles Android la selecci\u00f3n de certificado es un proceso opaco sobre el cual no es posible incluir (es una medida de seguridad del sistema operativo).","title":"Soporte de Google Android 4"},{"location":"markdown_strict/MCF_roadmap_ES/#soporte-de-apple-ios","text":"Se propone la implementaci\u00f3n para Apple iOS de las caracter\u00edsticas anteriormente descritas para Google Android 4, con un soporte equivalente de funcionalidades: Uso del API JavaScript as\u00edncrono. Uso de una App nativa para la gesti\u00f3n de claves y certificados y la realizaci\u00f3n de la propia firma. Soporte de CAdES simple.","title":"Soporte de Apple iOS"},{"location":"markdown_strict/MCF_roadmap_ES/#version-21","text":"","title":"Versi\u00f3n 2.1"},{"location":"markdown_strict/MCF_roadmap_ES/#soporte-de-windows-8-y-windows-8-rt-en-modo-nativo","text":"Internet Explorer 10 en Windows 8 (modo Metro), Windows 8 RT y, en gran medida, en Windows Phone 8 no soportan Applets de Java en las p\u00e1ginas Web, por lo que es completamente incompatible con los actuales Applet y MiniApplet Cliente @firma. No obstante, Microsoft abre la puerta a una m\u00e1s segura integraci\u00f3n de aplicaciones externas con aplicaciones Web mediante la incorporaci\u00f3n en Windows 8 de los llamados \u201cContratos de Compartici\u00f3n\u201d ( Share Contracts ). Esta t\u00e9cnica de construcci\u00f3n de aplicaciones permite el traspaso de informaci\u00f3n entre aplicaciones Web basadas en JavaScript y aplicaciones nativas instaladas en Windows 8. Siguiendo este nuevo modelo, se propone la construcci\u00f3n de un m\u00f3dulo nativo (C#, .NET) Windows capaz de suplir las funcionalidades del MiniApplet Java y permitiendo una operativa equivalente al MiniApplet en plataformas Apple iOS o Google Android, de forma que sea posible la ejecuci\u00f3n del MiniApplet en Windows 8 (modo Metro) y Windows 8 RT, y sirviendo este desarrollo de base al soporte de Windows Phone 8.","title":"Soporte de Windows 8 y Windows 8 RT en modo nativo"},{"location":"markdown_strict/MCF_roadmap_ES/#soporte-de-pades-en-google-android-y-windows-8","text":"Dado que el soporte propuesto para Windows 8 y Google Android se limitaba a firmas CAdES simples, se propone una ampliaci\u00f3n en estas plataformas para el soporte de PAdES, para lo cual se desarrollar\u00e1: Motor PAdES nativo para Android (Dalvik) Motor PAdES nativo para Windows 8 (C# .NET) El soporte de PAdES se har\u00e1 de una forma uniforme respecto al API actual para uso de PAdES con el MiniApplet (basado en Applet de Java).","title":"Soporte de PAdES en Google Android y Windows 8"},{"location":"markdown_strict/MCF_roadmap_ES/#soporte-de-multifirmas-cades-en-google-android-y-windows-8","text":"Dado que el soporte propuesto para Windows 8 y Google Android se limitaba a firmas CAdES simples, se propone una ampliaci\u00f3n de los motores CAdES para Android y Windows 8 para el adecuado soporte de multifirmas CAdES (cofirmas y contrafirmas).","title":"Soporte de multifirmas CAdES en Google Android y Windows 8"},{"location":"markdown_strict/MCF_roadmap_ES/#version-22","text":"","title":"Versi\u00f3n 2.2"},{"location":"markdown_strict/MCF_roadmap_ES/#soporte-de-pades-en-apple-ios","text":"Dado que el soporte propuesto para Apple iOS se limitaba a firmas CAdES simples, se propone una ampliaci\u00f3n en estas plataformas para el soporte de PAdES, para lo cual se desarrollar\u00e1: Motor PAdES nativo para Apple iOS (Objective C / Xcode) El soporte de PAdES se har\u00e1 de una forma uniforme respecto al API actual para uso de PAdES en el resto de plataformas.","title":"Soporte de PAdES en Apple iOS"},{"location":"markdown_strict/MCF_roadmap_ES/#soporte-de-multifirmas-cades-en-apple-ios","text":"Dado que el soporte propuesto para Apple iOS se limitaba a firmas CAdES simples, se propone una ampliaci\u00f3n del motor CAdES para Apple iOS para el adecuado soporte de multifirmas CAdES (cofirmas y contrafirmas).","title":"Soporte de multifirmas CAdES en Apple iOS"},{"location":"markdown_strict/MCF_roadmap_ES/#version-23","text":"","title":"Versi\u00f3n 2.3"},{"location":"markdown_strict/MCF_roadmap_ES/#soporte-de-mac-os-x-en-modo-nativo","text":"El soporte de Java como entorno de ejecuci\u00f3n para aplicaci\u00f3n Web es una caracter\u00edstica a extinguir en los sistemas operativos modernos, ya que es una fuente com\u00fan de entrada de software malintencionado y supone un serio problema de seguridad. En Mac OS X, la direcci\u00f3n en la que se avanza consiste en dificultar la ejecuci\u00f3n de Applets de Java, m\u00e1s que en impedir completamente su ejecuci\u00f3n (como ocurre en Windows 8): Apple ya no mantiene un entorno de ejecuci\u00f3n de Java (Java 7 en Mac OS X ya no es un producto Apple, como ocurr\u00eda con Java 5 y 6. Las actualizaciones del sistema operativo (Lion, Mountain Lion) desinstalan directamente el entorno de ejecuci\u00f3n de Java (JRE) sin consultar al usuario. Tras instalar Java, la ejecuci\u00f3n de Applets viene desactivada, y es necesario activarla manualmente. Tras activarla, se desactiva autom\u00e1ticamente y sin intervenci\u00f3n del usuario tras un tiempo sin usar Java, obligando al usuario a volver a activarla. Aun con la ejecuci\u00f3n de Applets activada, no es posible ejecutar un Applet descargado directamente de la Web de un organismo p\u00fablico espa\u00f1ol (descargado de cualquier sitio que no sea un servicio de distribuci\u00f3n de aplicaciones de la propia Apple), y para permitirlo el usuario debe relajar las restricciones de seguridad del sistema operativo (lo cual aumenta los riesgos de usos no autorizados, virus, software malintencionado, etc.). Con esas restricciones, la experiencia de usuario del MiniApplet (o Applet) Cliente @firma en Mac OS X es francamente deficiente, por lo que es conveniente plantear alternativas. Se propone el desarrollo de un complemento para navegadores Web en Apple Mac OS X para la realizaci\u00f3n de firmas electr\u00f3nicas sustituyendo de forma transparente al Applet Java del MiniApplet Cliente @firma, usando preferentemente NSAPI para proporcionar compatibilidad tanto a Apple Safari como a Mozilla Firefox o Google Chrome. Se propone un soporte inicial de CAdES simple.","title":"Soporte de Mac OS X en modo nativo"},{"location":"markdown_strict/MCF_roadmap_ES/#soporte-de-claves-y-certificados-en-tarjeta-sim","text":"Uno de los problemas de la mayor\u00eda de los dispositivos m\u00f3viles a la hora de hacer firmas electr\u00f3nicas es la imposibilidad de usar SSCD (dispositivos seguros de creaci\u00f3n de firmas), ya que es dif\u00edcil, inc\u00f3modo o simplemente imposible el conectar un lector de tarjetas inteligentes, un SSCD en USB u otro SSCD al terminal. No obstante, una caracter\u00edstica com\u00fan de la mayor\u00eda de los terminales m\u00f3viles es que disponen de una tarjeta SIM/USIM para el acceso a la red, y estas tarjetas pueden ser adem\u00e1s un SSCD. La especificaci\u00f3n GSM (GSM 11.11 y GSM 11.14) especifican medios para el acceso a la tarjeta SIM (SIM Application Toolkit) desde o aplicaciones externas accediendo al API JavaCard. Se propone una tarea de investigaci\u00f3n sobre las posibilidades de soportar certificados y claves de firma en tarjeta SIM desde las aplicaciones m\u00f3viles del proyecto @firma.","title":"Soporte de claves y certificados en tarjeta SIM"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/","text":"La aplicaci\u00f3n de firma manuscrita en tableta ha sido dise\u00f1ada para agilizar el tr\u00e1mite de firma presencial de documentos. Esta implementada en forma de Applet de Java y recibe como par\u00e1metros de configuraci\u00f3n un fichero XML. En este fichero se deben incluir los datos necesarios para llevar a cabo la operaci\u00f3n de firma y el almacenamiento del documento una vez haya sido firmado. A continuaci\u00f3n, se especifica c\u00f3mo se debe definir los datos de los firmantes, la ubicaci\u00f3n del espacio de firma en la tableta, el espacio de firma en el documento a firmar y, si fuera necesario, la firma adicional del documento por parte de una tercera entidad, como por ejemplo, un funcionario. Configuraci\u00f3n fichero de firma Como se ha comentado, se requiere la configuraci\u00f3n de un fichero XML de firma donde se especifiquen los datos del tr\u00e1mite. En caso de que no se desee incluir alguno de los datos descritos, se debe dejar la etiqueta vac\u00eda, pero en ning\u00fan caso suprimirla. Los siguientes puntos de este documento definen los tipos de datos que son necesarios especificar en el fichero XML: Datos del c\u00f3digo seguro de verificaci\u00f3n (CSV). Datos para el sellado de tiempo. Datos del documento a firmar. Datos de los firmantes. Firma adicional. Datos del CSV En las primeras l\u00edneas del documento XML se describe un c\u00f3digo de seguridad de verificaci\u00f3n (CSV), opcional, que debe contener las etiquetas descritas a continuaci\u00f3n. Estructura XML que describe un CSV para esta aplicaci\u00f3n: <CSV> <page></page> <text></text> <rotation></rotation> <positionOnPageLowerLeftX></positionOnPageLowerLeftX> <positionOnPageLowerLeftY></positionOnPageLowerLeftY> <positionOnPageUpperRightX></positionOnPageUpperRightX> <positionOnPageUpperRightY></positionOnPageUpperRightY> <fontSize></fontSize> </CSV> P\u00e1gina del CSV Descripci\u00f3n : Indicar en un n\u00famero entero la p\u00e1gina del documento a firmar en el que situar el c\u00f3digo CSV. Etiqueta: page. Texto Descripci\u00f3n: Introducir el contenido del CSV, una secuencia de caracteres. Etiqueta: text. Rotaci\u00f3n Descripci\u00f3n: Posici\u00f3n en la que debe aparecer el texto; se define como un n\u00famero entero entre 0 y 360, dependiendo del grado de rotaci\u00f3n con el que se quiera que el c\u00f3digo se dibuje en el documento firmado. Etiqueta: rotation Posici\u00f3n Descripci\u00f3n: Posici\u00f3n en la que se sit\u00faa el CSV, es decir, las coordenadas en las que se debe situar el texto dentro del documento. Etiqueta: positionOnPageLowerLeftX, positionOnPageLowerLeftY, positionOnPageUpperRightX, positionOnPageUpperRightY. Tama\u00f1o de la fuente del texto Descripci\u00f3n: Definir el tama\u00f1o del texto que se imprime en el documento firmado. Etiqueta: fontSize. Datos para el sellado de tiempo Con el objetivo de poder garantizar que el documento firmado no se ha modificado desde el momento en el que se gener\u00f3 la firma se solicita a la Autoridad de Sellado de Tiempo (TSA) que genere un sello de tiempo con la informaci\u00f3n del documento firmado, la fecha y hora y un certificado electr\u00f3nico de confianza. En esta secci\u00f3n se describen los par\u00e1metros de sellado de tiempo que responden a la siguiente estructura XML: <tsaParams> <tsaRequireCert></tsaRequireCert> <tsaPolicy></tsaPolicy> <tsaURL></tsaURL> <tsaUsr></tsaUsr> <tsaPwd></tsaPwd> <extensions> <extension> <oid></oid> <critical></critical> <value></value> </extension> </extensions> <tsaHashAlgorithm></tsaHashAlgorithm> <sslPkcs12File></sslPkcs12File> <sslPkcs12FilePassword></sslPkcs12FilePassword> </tsaParams> Certificado de TSA Descripci\u00f3n: Indicar con un booleano \u2013 true o false \u2013 si se requiere el certificado de la Autoridad de Sellado de Tiempo. En caso de que no se establezca, se considera que no se requiere certificado. Etiqueta: tsaRequireCert Autoridad de sellado de tiempo Descripci\u00f3n: URL de la autoridad de sello de tiempo, en caso de que no se indique, no se a\u00f1ade el sello de tiempo. Etiqueta: tsaURL Algoritmo de huella digital Descripci\u00f3n: Algoritmo de huella digital para el cifrado de la huella. E n caso de que no se establezca se toma por defecto el algoritmo SHA-1. Etiqueta: tsaHashAlgorithm Pol\u00edtica de sellado Descripci\u00f3n : Pol\u00edtica de sellado de tiempo, obligatoria si se define una Autoridad de Sellado de Tiempo para la etiqueta tsaUrl. Etiqueta : tsaPolicy Usuario de la TSA Descripci\u00f3n: Nombre y contrase\u00f1a del usuario de la TSA. Se ignora la contrase\u00f1a s i previamente no se ha establecido un nombre de usuario. Etiqueta: tsaUsr, tsaPwd Certificado SSL cliente Descripci\u00f3n : Se define un nombre y una contrase\u00f1a para el fichero PKCS#12 que contiene el certificado SSL cliente que pedir\u00e1 la TSA al establecer conexiones HTTPS. Etiqueta: tsaSslPkcs12File, tsaSslPkcs12FilePassword Datos del documento a firmar La aplicaci\u00f3n cifra los datos biom\u00e9tricos de los firmantes junto con la huella digital del documento original evitando de esta manera la r\u00e9plica de los datos en otros documentos. Se permite almacenar los documentos firmados tanto en un servidor, como en local, para ello es necesaria la especificaci\u00f3n del directorio remoto en el que almacenarlo y el directorio local. La aplicaci\u00f3n da la posibilidad de almacenar tanto en los dos directorios como en uno de ellos, no obstante, es imprescindible que se defina en el XML al menos uno de ellos. A continuaci\u00f3n se especifica la estructura del fichero XML en la que se describen los datos para la recuperaci\u00f3n y almacenamiento del documento firmado. <retrieveUrl></retrieveUrl> <saveUrl></saveUrl> <saveUrlPostParam></saveUrlPostParam> <saveId></saveId> <saveIdPostParam></saveIdPostParam> <saveDirectory></saveDirectory> <signedFileName></signedFileName> <writableDirectory></writableDirectory> <cert></cert> <showTabletButtons></showTabletButtons> Directorio del documento Descripci\u00f3n: Directorio desde d\u00f3nde se recupera el documento original que se desea firmar. Puede estar definido en un repositorio (\u201chttp://direccion.com/fichero.pdf\u201d) o como fichero local (\u201cfile://C:\\directorio\\fichero.pdf\u201d). Etiqueta: retrieveURL. Direcci\u00f3n URL para guardar el documento firmado Descripci\u00f3n: Indicar la direcci\u00f3n de almacenamiento del documento firmado. Los documentos se recibir\u00e1n por URL con un par\u00e1metro definido. Etiqueta: saveUrl, saveUrlPostParam. Identificador del documento Descripci\u00f3n: Indicar el identificador del documento, un n\u00famero entero. En caso de que no se defina ser\u00e1 nulo e indicar una etiqueta asignada a este identifacdor. Etiqueta: saveId, saveIdPostParam. Directorio para guardar el documento firmado Descripci\u00f3n : Indicar el directorio local en el que almacenar el documento firmado. Etiqueta: saveDirectory. Nombre del documento firmado Descripci\u00f3n: Nombre con el que se almacena el documento firmado. Este nombre se utiliza para guardar el documento tanto en local como en remoto. Etiqueta: signedFileName. Directorio para ficheros temporales Descripci\u00f3n: Nombre del directorio donde se almacenar los logs de las aplicaci\u00f3n y las dll de las tabletas de captura de firma. Etiqueta: writableDirectory Certificado Descripci\u00f3n: Indicar el certificado de cifrado de los datos. Este certificado debe incluirse codificado en base 64. Etiqueta: cert Mostrar botones en la tableta de firma Descripci\u00f3n: Indicar mediante un booleano si se desea mostrar los botones de la tablet de firma. Estos botones permitir\u00e1n al firmante aceptar, cancelar o repetir la operaci\u00f3n de firma. En caso de que no se desee mostrar al firmante la botonera, al funcionario que realice el tr\u00e1mite s\u00ed que le aparecer\u00e1 y por tanto, debe ser \u00e9ste el que realice la acci\u00f3n de aceptar, repetir o cancelar. Etiqueta: showTabletButtons. Figure 1 Imagen de una tableta de firma que contiene la botonera con las acciones de firma. Datos de los firmantes Los datos de los firmantes del documento se definen en este apartado. Para cada firmante se introducen sus datos personales, la plantilla correspondiente para cada tipo de tableta con la que se trabaje y las posiciones que ocupa la r\u00fabrica de la firma en el documento firmado. Los datos de los firmantes est\u00e1n definidos por la etiqueta bioSigns y cada firmante es descrito es por la etiqueta bioSign . Esta es la estructura XML que describe los datos de los firmantes del documento: <bioSigns> <bioSign> <signerData> <signerName></signerName> <signerSurname1></signerSurname1> <signerSurname2></signerSurname2> <signerId></signerId> </signerData> <signHeader></signHeader> <signFooter></signFooter> <tablet> <tabletType></tabletType> <htmlTemplate></htmlTemplate> <jpegTemplate></jpegTemplate> <tablet> <signatureArea> <x></x> <y></y> <width></width> <height></height> </signatureArea> <signatureRubricPositionOnPdf> <x></x> <y></y> <width></width> <height></height> </signatureRubricPositionOnPdf> <signatureRubricPageOnPdf></signatureRubricPageOnPdf> </bioSign> <bioSigns> Datos personales Descripci\u00f3n: Indicar los datos personales del firmante, estos datos se definen bajo la etiqueta signerData y debe especificarse el nombre, primer y segundo apellido, documento de identificaci\u00f3n (NIE/NIF) y puesto de trabajo del firmante. Etiquetas: sigenerName, signerSurname1, signerSurname2, signerId. Plantilla de firma Descripci\u00f3n : La plantilla que se muestra en la pantalla de la tableta de firma puede ser definida o bien mediante una imagen JPEG o bien por c\u00f3digo HTML. Para ello es necesario crear una plantilla de uno de los dos tipos (JEPG o HTML) para cada tableta de firma, seg\u00fan el modelo del dispositivo que se conecte. Por lo tanto, cada firmante tiene asociada una plantilla de firma para el modelo de del dispositivo con el que vaya a realizar la operaci\u00f3n. La plantilla dada en el documento anexo contiene los logos de la agencia tributaria, en caso de querer utilizar dicha plantilla es necesario cambiar la firma por la del firmante personalizando el campo. Este es el aspecto que muestra la tableta en la plantilla definida en el ejemplo adjunto en el anexo: Figure 2 Imagen de una tableta de firma con una plantilla personalizada. Etiqueta: tablet, tabletType, htmlTemplate, jpegTemplate. \u00c1rea de firma Descripci\u00f3n: Definir el \u00e1rea de firma de manera que quede determinada el \u00e1rea de la tableta en la que el usuario tiene que firmar y que est\u00e1 definida por una coordenada (x, y); punto en el que se sit\u00faa la esquina superior izquierda del rect\u00e1ngulo de firma y por las dimensiones del \u00e1rea: altura y anchura. Etiquetas: signature Area, x, y, width, height \u00c1rea de firma en el documento Descripci\u00f3n: \u00c1rea en la que se sit\u00faa la firma en el documento, dependiendo del firmante se ubicar\u00e1 en diferentes coordenadas, nunca correspondiendo dos firmas en la misma \u00e1rea. Se define una coordenadas (x,y) en la que se sit\u00faa la esquina inferior derecha de la firma, la altura y la anchura que ocupa dicha \u00e1rea. Cabe destacar que en los documentos PDF el espacio de coordenadas parte de la esquina inferior izquierda, siendo esta (0,0). Figure 3 Coordenadas en PDF P\u00e1gina de firma Descripci\u00f3n: P\u00e1gina del documento en la que aparece la firma. Etiqueta: signatureRubricPageOnPdf Firma adicional Los documentos que necesiten una firma adicional de una tercera entidad o de un funcionario deben tener completados los siguientes datos de la estructura XML: <completeWithCriptoSign></completeWithCriptoSign> <completeCriptoSignExtraParams> <entry> <key>pkcs12</key> <value></value> </entry> </completeCriptoSignExtraParams> <completeCriptoSignPkcs12></completeCriptoSignPkcs12> <completeCriptoSignPkcs12Alias></completeCriptoSignPkcs12Alias> <completeCriptoSignPkcs12Password></completeCriptoSignPkcs12Password/> La firma del funcionario puede realizarse a trav\u00e9s del certificado Pkcs12 que \u00e9ste tenga almacenado en al almac\u00e9n de claves o bien utilizando los par\u00e1metros de firma con certificado que se definan para el proceso de firma. Firma con par\u00e1metros adicionales Descripci\u00f3n: Para una firma con certificado, se indicar\u00e1 con un booleano \u2013true, false \u2013 en la etiqueta completeWithCriptoSign y se completar\u00e1n los par\u00e1metros adicionales definidos en entry. El conjunto de par\u00e1metros adicionales aceptado por la aplicaci\u00f3n para a\u00f1adir a una firma est\u00e1n descritos en el anexo . Etiquetas: completeWithCriptoSign, completeCriptoSignExtraParams Firma con almac\u00e9n PKCS12 Descripci\u00f3n: Esta aplicaci\u00f3n permite la firma utilizando un almac\u00e9n de claves Pkcs12. Para ello, se debe rellenar las etiquetas especificando el nombre del certificado PKCS12 almacenado en el almac\u00e9n de claves, el nombre y la contrase\u00f1a de la entidad a la que pertenece el certificado. En caso de que no se definan los tres par\u00e1metros, la firma no se realiza. Etiquetas: completeCriptoSignPkcs12, completeCriptoSignPkcs12Alias, completeCriptoSignPkcs12Password Plantilla de configuraci\u00f3n Plantilla de configuraci\u00f3n del fichero XML que deber\u00e1 codificarse en base 64 y definirlo en el applet de llamada a la aplicaci\u00f3n. <?xml version= \"1.0\" encoding= \"UTF-8\" standalone= \"yes\" ?> <ns2:signTask xmlns:ns2= \"es.gob.afirma.crypto.handwritten\" > <CSV> <page></page> <text></text> <rotation></rotation> <positionOnPageLowerLeftX></positionOnPageLowerLeftX> <positionOnPageLowerLeftY></positionOnPageLowerLeftY> <positionOnPageUpperRightX></positionOnPageUpperRightX> <positionOnPageUpperRightY></positionOnPageUpperRightY> <fontSize></fontSize> </CSV> <tsaParams> <tsaRequireCert></tsaRequireCert> <tsaPolicy></tsaPolicy> <tsaURL></tsaURL> <tsaUsr></tsaUsr> <tsaPwd></tsaPwd> <extensions> <extension> <oid></oid> <critical></critical> <value></value> </extension> </extensions> <tsaHashAlgorithm></tsaHashAlgorithm> <sslPkcs12File></sslPkcs12File> <sslPkcs12FilePassword></sslPkcs12FilePassword> </tsaParams> <writableDirectory></writableDirectory> <retrieveUrl></retrieveUrl> <saveUrl></saveUrl> <saveUrlPostParam></saveUrlPostParam> <saveId></saveId> <saveIdPostParam></saveIdPostParam> <saveDirectory></saveDirectory> <signedFileName></signedFileName> <cert></cert> <showTabletButtons></showTabletButtons> <bioSigns> <bioSign> <signerData> <signerName></signerName> <signerSurname1></signerSurname1> <signerSurname2></signerSurname2> <signerId></signerId> </signerData> <signHeader></signHeader> <signFooter></signFooter> <tablet> <tabletType></tabletType> <htmlTemplate></htmlTemplate> <jpegTemplate></jpegTemplate> <tablet> <signatureArea> <x></x> <y></y> <width></width> <height></height> </signatureArea> <signatureRubricPositionOnPdf> <x></x> <y></y> <width></width> <height></height> </signatureRubricPositionOnPdf> <signatureRubricPageOnPdf></signatureRubricPageOnPdf> </bioSign> </bioSigns> <completeWithCriptoSign></completeWithCriptoSign> <completeCriptoSignExtraParams> <entry> <key></key> <value></value> </entry> </completeCriptoSignExtraParams> <completeCriptoSignPkcs12></completeCriptoSignPkcs12> <completeCriptoSignPkcs12Alias></completeCriptoSignPkcs12Alias> <completeCriptoSignPkcs12Password></completeCriptoSignPkcs12Password/> </ns2:signTask> Anexo Listado de par\u00e1metros adicionales Valores aceptados como par\u00e1metros adicionales para las firmas PAdES: allowCosigningUnregisteredSignatures Si se establece a true se permite firmar un PDF incluso si este contiene firmas previas no registradas dentro de campos Acrobat ( AcroFields ), condici\u00f3n obligatoria sin la cual es muy probable que se corrompan las firmas previas. Si no se establece o se establece a o false, al intentar firmar un PDF que contenga firmas no registradas se lanza una excepci\u00f3n de tipo PdfHasUnregisteredSignaturesException. includeOnlySignningCertificate Si se establece a true se incluye en la firma \u00fanicamente el certificado del firmante (y no la cadena de certificaci\u00f3n completa). Si no se establece o se establece a o false se incluir\u00e1 toda la cadena de certificaci\u00f3n. alwaysCreateRevision Si se establece a true siempre crea una revisi\u00f3n del PDF incluso cuando el documento no contiene ninguna firma previa. Esto requiere que los documentos de entrada cumplan estrictamente la especificaci\u00f3n PDF 1.7 (ISO 32000-1:2008), y puede crear incompatibilidades con documentos PDF acordes a la especificaci\u00f3n 1.3 creados con bibliotecas antiguas, como por ejemplo QPDF . Si se establece a false, no crea revisiones en documentos que no contengan firmas previas y s\u00ed las crea en documentos que ya contengan alguna firma. image Imagen que se desea insertar en el PDF antes de que este sea firmado. La imagen debe proporcionarse en formato JPEG codificado en Base64. SI el documento ya contiene firmas es posible que se invaliden, por lo que conviene usarlo \u00fanicamente en documentos sin firmas previas. imagePage P\u00e1gina donde desea insertarse la imagen indicada mediante el par\u00e1metro image. La numeraci\u00f3n de las p\u00e1ginas comienza en uno. Si se indica -1 como n\u00famero de p\u00e1gina se inserta la imagen en la \u00faltima p\u00e1gina del documento. Si se indica 0 como n\u00famero de p\u00e1gina se inserta la imagen en todas las p\u00e1ginas del documento. Este par\u00e1metro es obligatorio, si no se indica una p\u00e1gina v\u00e1lida no se insertar\u00e1 la imagen. imagePositionOnPageLowerLeftX Coordenada horizontal inferior izquierda de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftY, imagePositionOnPageUpperRightX e imagePositionOnPageUpperRightY. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage. imagePositionOnPageLowerLeftY Coordenada vertical inferior izquierda de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftX, imagePositionOnPageUpperRightX e imagePositionOnPageUpperRightY. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage. imagePositionOnPageUpperRightX Coordenada horizontal superior derecha de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftX, imagePositionOnPageLowerLeftY e imagePositionOnPageUpperRightY. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage. imagePositionOnPageUpperRightY Coordenada vertical superior derecha de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftX, imagePositionOnPageLowerLeftY e imagePositionOnPageUpperRightX. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage. attach Contenido a a\u00f1adir como adjunto al PDF, en formato Base64 (el adjunto ser\u00e1 el binario decodificado). Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro attachFileName. attachFileName Nombre de fichero para adjuntar el contenido binario indicado mediante attach. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro attach. attachDescription Descripci\u00f3n del contenido binario indicado mediante attach. certificationLevel Nivel de certificaci\u00f3n de la firma PDF. Los valores admitidos son num\u00e9ricos, correspondiendo: 0 = Firma ordinaria no certificada (por defecto) 1 = Firma de autor. No se permite ning\u00fan cambio posterior en el documento 2 = Firma de autor certificada para formularios. Se permite \u00fanicamente el relleno posterior de los campos del formulario 3 = Firma certificada. Se permite \u00fanicamente el relleno posterior de los campos del formulario o el a\u00f1adido de firmas de aprobaci\u00f3n signatureSubFilter Nombre del sub-filtro en el diccionario PDF para indicar el tipo de la firma. Si no se indica este par\u00e1metro por defecto se usa adbe.pkcs7.detached (firma PAdES b\u00e1sica). Es posible indicar ETSI.CAdES.detached para generar una firma PAdES-BES, si bien el hacerlo puede causar que al a\u00f1adir firmas adicionales al PDF se invaliden las ya existentes. signatureField Nombre del campo en donde insertar la firma. Si el documento PDF tiene ya un campo de firma pre-creado es posible utilizarlo para insertar la firma generada, referenci\u00e1ndolo por su nombre. Si se indica un nombre de campo de firma que no exista en el documento PDF proporcionado, se generar\u00e1 una excepci\u00f3n. signaturePage P\u00e1gina del documento PDF donde insertar la firma. Puede usarse la constante LAST_PAGE para referirse a la \u00faltima p\u00e1gina del documento PDF si se desconoce el n\u00famero total de p\u00e1ginas de este. Este par\u00e1metro se ignora si se ha establecido valor al par\u00e1metro signatureField, y necesita que se establezcan valores v\u00e1lidos a los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY, signaturePositionOnPageUpperRightX y signaturePositionOnPageUpperRightY. signaturePositionOnPageLowerLeftX Coordenada horizontal inferior izquierda de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftY, signaturePositionOnPageUpperRightX y signaturePositionOnPageUpperRightY. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento. signaturePositionOnPageLowerLeftY Coordenada vertical inferior izquierda de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageUpperRightX y signaturePositionOnPageUpperRightY. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento. signaturePositionOnPageUpperRightX Coordenada horizontal superior derecha de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY y signaturePositionOnPageUpperRightY. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento. signaturePositionOnPageUpperRightY Coordenada vertical superior derecha de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY y signaturePositionOnPageUpperRightX. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento. signatureRubricImage Imagen JPEG codificada en Base64 de la r\u00fabrica de la firma manuscrita que se desea aparezca como firma visible en el PDF. layer2Text Texto a escribir dentro de la \"capa 2\" de la firma visible. Este texto se escribe \u00fanicamente si no se ha especificado una imagen de r\u00fabrica, y necesita que se indique la p\u00e1gina y la situaci\u00f3n d\u00f3nde mostrar el recuadro de firma mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY, signaturePositionOnPageUpperRightX, signaturePositionOnPageUpperRightY y signaturePage. layer2FontFamily Tipo de letra a usar en el texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos, correspondiendo: 0 = Courier (tipo por defecto) 1 = Helv\u00e9tica 2 = Times Roman 3 = Symbol 4 = ZapfDingBats layer2FontSize Tama\u00f1o de letra a usar en el texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos (y el valor por defecto es 12). layer2FontStyle Estilo del tipo de letra a usar en el texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos, correspondiendo: 0 = Normal (estilo por defecto) 1 = Negrita 2 = Cursiva 3 = Negrita y cursiva 4 = Subrayado 8 = Tachado Es posible combinar estilos aplicando la operaci\u00f3n l\u00f3gica o sobre los valores num\u00e9ricos a combinar. layer2FontColor Color del texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son textuales (se ignora entre may\u00fasculas y min\u00fasculas), soport\u00e1ndose: black = Negro (color por defecto) white = Blanco gray = Gris lightGray = Gris claro darkGray = Gris oscuro red = Rojo pink = Rosa signReason Raz\u00f3n por la que se realiza la firma (este dato se a\u00f1ade al diccionario PDF, y no a la propia firma). signatureProductionCity Ciudad en la que se realiza la firma (este dato se a\u00f1ade al diccionario PDF, y no a la propia firma). signerContact Contacto del firmante, usualmente una direcci\u00f3n de correo electr\u00f3nico (este dato se a\u00f1ade al diccionario PDF, y no a la propia firma). policyIdentifier Identificador de la pol\u00edtica de firma. Debe ser un OID (o una URN de tipo OID) que identifique un\u00edvocamente la pol\u00edtica en formato ASN.1 procesable. policyIdentifierHash Huella digital del documento de pol\u00edtica de firma (normalmente del mismo fichero en formato ASN.1 procesable). Si no se indica una huella digital y el par\u00e1metro policyIdentifier no es una URL accesible universalmente se usar\u00e1 0, mientras que si no se indica una huella digital pero el par\u00e1metro policyIdentifier es una URL accesible universalmente, se descargara el fichero apuntado por la URL para calcular la huella digital al vuelo . policyIdentifierHashAlgorithm Algoritmo usado para el c\u00e1lculo de la huella digital indicada en el par\u00e1metro policyIdentifierHash. Es obligatorio indicarlo cuando se proporciona una huella digital distinta de 0. policyQualifier URL que apunta al documento descriptivo de la pol\u00edtica de firma (normalmente un documento PDF con una descripci\u00f3n textual). ownerPassword Contrase\u00f1a de apertura del PDF (contrase\u00f1a del propietario) si este estaba cifrado. No se soporta la firma de documentos PDF cifrados con certificados o con algoritmo AES256. headLess Evita cualquier interacci\u00f3n con el usuario si se establece a true, si no se establece o se establece a false act\u00faa normalmente (puede mostrar di\u00e1logos, por ejemplo, para solicitar las contrase\u00f1as de los PDF cifrados). \u00datil para los procesos desatendidos y por lotes. avoidEncryptingSignedPdfs Si se establece a true no cifra los PDF firmados aunque el original estuviese firmado, si no se establece o se establece a false los PDF se cifran tras firmarse si el original lo estaba, usando la misma contrase\u00f1a y opciones que este. allowSigningCertifiedPdfs Si se establece a true permite la firma o cofirma de PDF certificados sin consultarlo al usuario, si se establece a false o cualquier otro valor se lanza una excepci\u00f3n en caso de intentar firmar o cofirmar un PDF certificado y si no se establece se mostrar\u00e1 un di\u00e1logo al usuario para que confirme que desea realizar la firma a pesar de que el resultado ser\u00e1n una firma no v\u00e1lida. Si el par\u00e1metro headLess est\u00e1 establecido a true, no podr\u00e1 mostrar el di\u00e1logo de confirmaci\u00f3n as\u00ed que llegados a este punto se lanzar\u00e1 una excepci\u00f3n. No se soporta el cifrado de documentos PDF con certificados o con algoritmo AES256. tsType Tipo de sello de tiempo a aplicar: 1 = Solo sello a nivel de firma. 2 = Solo sello a nivel de documento. 3 = Dos sellos, uno a nivel de firma y otro a nivel de documento. tsaURL URL de la autoridad de sello de tiempo (si no se indica no se a\u00f1ade sello de tiempo). tsaPolicy Pol\u00edtica de sellado de tiempo (obligatoria si se indica tsaURL). tsaHashAlgorithm Algoritmo de huella digital a usar para el sello de tiempo (si no se establece se usa SHA-1). tsaRequireCert true si se requiere el certificado de la TSA, false en caso contrario (si no se establece se asume true). tsaUsr Nombre de usuario de la TSA. tsaPwd Contrase\u00f1a del usuario de la TSA. Se ignora si no se ha establecido adem\u00e1s tsaUsr. tsaSslPkcs12File Nombre del fichero PKCS#12 que contiene el certificado SSL cliente que pedir\u00e1 la TSA al establecer la coneci\u00f3s HTTPS. tsaSslPkcs12FilePassword Contrase\u00f1a del fichero PKCS#12 que contiene el certificado SSL cliente para las conexiones HTTPS. signingCertificateV2 Si se indica a true se utilizar\u00e1 SigningCertificateV2, si se indica cualquier otra cosa SigningCertificateV1. Si no se indica nada, se utilizar\u00e1 V1 para las firmas SHA1 y V2 para el resto. Ejemplo Este documento anexo es un ejemplo de documento XML para la firma de un documento por una entidad firmante e incluye la firma del funcionario por medio de un certificado PKCS12 ya definido. Ejemplo: <?xml version= \"1.0\" encoding= \"UTF-8\" standalone= \"yes\" ?> <ns2:signTask xmlns:ns2= \"es.gob.afirma.crypto.handwritten\" > <!-- PARTE 1 --> <CSV> <page>1</page> <text>CSV123812347823748946</text> <rotation>90</rotation> <positionOnPageLowerLeftX>200</positionOnPageLowerLeftX> <positionOnPageLowerLeftY>20</positionOnPageLowerLeftY> <positionOnPageUpperRightX>200</positionOnPageUpperRightX> <positionOnPageUpperRightY>300</positionOnPageUpperRightY> <fontSize>15</fontSize> <text>CSV-1231208</text> <rotation>0</rotation> <positionOnPageLowerLeftX>100</positionOnPageLowerLeftX> <positionOnPageLowerLeftY>100</positionOnPageLowerLeftY> <positionOnPageUpperRightX>200</positionOnPageUpperRightX> <positionOnPageUpperRightY>200</positionOnPageUpperRightY> <fontSize>15</fontSize> </CSV> <!-- PARTE 2 --> <tsaParams> <tsaRequireCert>true</tsaRequireCert> <tsaPolicy>4.3.2.1</tsaPolicy> <tsaURL>http://aeat.aeat</tsaURL> <tsaUsr>user</tsaUsr> <tsaPwd>password</tsaPwd> <extensions> <extension> <oid>1.2.3.4</oid> <critical>false</critical> <value>//o=</value> </extension> </extensions> <tsaHashAlgorithm>SHA-512</tsaHashAlgorithm> <sslPkcs12File>AAECAw==</sslPkcs12File> <sslPkcs12FilePassword>p12password</sslPkcs12FilePassword> </tsaParams> <!-- PARTE 3 --> <writableDirectory>C:\\Temp</writableDirectory> <retrieveUrl>file://C:\\Temp\\formulario1.pdf</retrieveUrl> <saveUrl></saveUrl> <saveUrlPostParam></saveUrlPostParam> <saveId>001</saveId> <saveIdPostParam>id</saveIdPostParam> <saveDirectory>C:\\Temp</saveDirectory> <writableDirectory>C:\\Temp</writableDirectory> <retrieveUrl>file://C:\\Temp\\formulario1.pdf</retrieveUrl> <saveUrl></saveUrl> <saveUrlPostParam></saveUrlPostParam> <saveId>004</saveId> <saveIdPostParam>idd</saveIdPostParam> <saveDirectory>C:\\Temp\\/saveDirectory> <signedFileName>PDF firmado</signedFileName> <cert>MIIFnTCCBIWgAwIBAgICA+owDQYJKoZIhvcNAQEFBQAwgdoxCzAJBgNVBAYTAkVTMRIwEAYDVQQIEwlCYXJjZWxvbmExSDBGBgNVBAcMP0JhcmNlbG9uYSAoc2VlIGN1cnJlbnQgYWRkcmVzcyBhdCBodHRwczovL3d3dy5hbmYuZXMvYWRkcmVzcy8gKTEnMCUGA1UEChMeQU5GIEF1dG9yaWRhZCBkZSBDZXJ0aWZpY2FjaW9uMRcwFQYDVQQLEw5BTkYgQ2xhc2UgMSBDQTETMBEGA1UEBRMKRy02MzI4NzUxMDEWMBQGA1UEAxMNQU5GIFNlcnZlciBDQTAeFw0wNjEyMzEyMzAwMDBaFw0xNDEyMzEyMzAwMDBaMIGmMRswGQYDVQQDExJBTkYgVXN1YXJpbyBBY3Rpdm8xDDAKBgNVBCoTA0FORjEXMBUGA1UEBBMOVXN1YXJpbyBBY3Rpdm8xEjAQBgNVBAUTCTEyMzQ1Njc4WjEeMBwGCSqGSIb3DQEJARYPdGVzdEBwcnVlYmEuY29tMR8wHQYDVQQLExZDbGFzZSAyIHBlcnNvbmEgZmlzaWNhMQswCQYDVQQGEwJFUzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAj2qAceOf0pyATEM0BxBK7+eGA0HEZWDZpqdhCeVvsI1AqhLWQpWNg65TGXE8ijzxGU/yS94k/34gPgIkla+p/mrDaNsVY69RcLp1hWYcL61rM//In+hXlA3qUK6as942b55YyzNsbJSQPCNgkiGuIQTo1Xfsfk4XZDi+yNSRgUMCAwEAAaOCAiEwggIdMAkGA1UdEwQCMAAwCwYDVR0PBAQDAgbAMBMGCisGAQQBgY8cFAMEBQwDQU5GMBcGCisGAQQBgY8cFAQECQwHVXN1YXJpbzAWBgorBgEEAYGPHBQFBAgMBkFjdGl2bzAZBgorBgEEAYGPHBQGBAsMCTEyMzQ1Njc4WjCBiAYDVR0gBIGAMH4wfAYKKwYBBAGBjxwDBDBuMD0GCCsGAQUFBwICMDEaL0NlcnRpZmljYWRvIGVtaXRpZG8gcGFyYSByZWFsaXphY2nzbiBkZSBwcnVlYmFzMC0GCCsGAQUFBwIBFiFodHRwczovL3d3dy5hbmYuZXMvQUMvZG9jdW1lbnRvcy8wOAYIKwYBBQUHAQEELDAqMCgGCCsGAQUFBzABhhxodHRwOi8vd3d3LmFuZi5lcy9BQy9SQy9vY3NwMDkGA1UdHwQyMDAwLqAsoCqGKGh0dHA6Ly93d3cuYW5mLmVzL0FDL1JDL0FORkFDQ0xBU0VBMS5jcmwwFwYKKwYBBAGBjxwTAQQJDAcxMjMtMzIxMDEGCisGAQQBgY8cKgYEIwwhaHR0cHM6Ly93d3cuYW5mLmVzL0FDL0FDVEFTLzU2Nzg5MBYGCSsGAQQBgY8cEwQJDAczMjEtMTIzMB0GA1UdDgQWBBSxTxAznF2uoOtMW+fJUoDN6B+rJDAfBgNVHSMEGDAWgBS+O/a0MbdzJEg5xVcTlHWqn4E/LDANBgkqhkiG9w0BAQUFAAOCAQEATQgYAOwxrMRTT2Nhx7pqiNsoGT5dJmeunAv+iU5zx/VoEXB/mx+VtyLfMea3VS9LC23404XS7pz5oPwiVPLsMPZtzOcmfacVnSdRn5J7+qOO8MB+OVlXq/QmARn+1XeBCHaTQ6AMc/pdveEoGktaXwEjTslWyRD9dGDzLp04+FndQAbVcI5xRkb4vToRnhQmloUVddhQAO8usOAIb00GJFNTq4lsyZ1qT1HplQl+ngsSD1HBxkhx10Pm3KuvCunAh4um0QnSeeiq9qWIV0UZrFlMwNRXvH9OVTqSGC4PXjw2zOi2GLUfags1decu7gcGjidlELR/WHU/6lrztfdViQ==</cert> <showTabletButtons>false</showTabletButtons> <!-- PARTE 4 --> <bioSigns> <bioSign> <signerData> <signerName>Ana</signerName> <signerSurname1>P\u00e9rez</signerSurname1> <signerSurname2>Garc\u00eda</signerSurname2> <signerId>12345678Z</signerId> <signerPost></signerPost> </signerData> <signHeader>Ejemplo de cabecera</signHeader> <signFooter>Ejemplo de pie de firma</signFooter> <tablet> <tabletType>STU-430</tabletType> <htmlTemplate> <p style=\"font-weight: bold; font-size:12px; margin-left:20px;\"> Firme en el recuadro y pulse aceptar: </p> <div style=\"margin-left:20px; margin-top:58px;\" > <p style=\"font-weight: bold; font-size:12px;\"> Fdo. Ana P\u00e9rez Garc\u00eda </p> </div> </htmlTemplate> </tablet> <signatureArea> <x>20</x> <y>50</y> <width>275</width> <height>100</height> </signatureArea> <signatureRubricPositionOnPdf> <x>75</x> <y>220</y> <width>150</width> <height>55</height> </signatureRubricPositionOnPdf> <signatureRubricPageOnPdf>1</signatureRubricPageOnPdf> </bioSign> </bioSigns> <!-- PARTE 5 --> <completeWithCriptoSign>true</completeWithCriptoSign> <completeCriptoSignExtraParams> <entry> <key>clave</key> <value>valor</value> </entry> </completeCriptoSignExtraParams> <completeCriptoSignPkcs12>MIACAQMwgAYJKoZIhvcNAQcBoIAkgASCAz4wgDCABgkqhkiG9w0BBwGggCSABIIDJjCCAyIwggMeBgsqhkiG9w0BDAoBAqCCArEwggKtMCcGCiqGSIb3DQEMAQMwGQQUpRWJxSXSctC3HmVIR5EjLteSgtICAWQEggKAH173NfjSat+f5O7bP672xUM75cGnI0Gb5jWz6JP5oXsLf0PyxDUNrsrZ75H4iHmjrtfaaKoOj4Q6KXLPdMM9RlADPgksx4mqc9kk1jRnQUOCUGpFI0RWEv1zqxRpCr3JIHyyBwTq+1NDG7N5yT/8R3UNX6nYwZpqtPi4pMcOe4zTfXNnI/g4JK4Ui1JRLpl3e7d6tpYdH/l6Z4L+bdG74wPX8tqWE84wYYowpH5yaTtcqSyXCKU0+iK/D4atrmEklznPd/MP0DunT0YtoQYDuuT4hKM5bj34MeIVMXWQDr60ugvs1q8b5xtG/84udBH7QVjw/EYP7c0kEb3kPRUf49r/C71YgoGWBzSc/eJgzfg8XEvc5hFITbecQehq+Ho8g7Eh+XS3WsVjK0oA2CxXiwKD8gzDhaC4t3Kr5kCgwuhs5hlpbo0GF4uWK/j5LoeAgJWJqOD2MkTgiZo36Mu62VJ4fim0NU3wVZmTdFwTME+n4qEANvANrdBuZIkRaTFDsABFfXUUuM8Hc3p+TB3h/X1/DTFoO+Pdekfc3184/KfqhgIgsQhckzjA0lzbD44SzXwIePMOxCXcld4hHqwWDUCaRzvM7n1Jg29QPFJ6EcVkJnRRVfriV0mZLy3rd64rYYsAVhmgExvWhYwXY0+aF/K/fA6j8WWM4kInolYhUFPUeQ96T7J13dFzOdMpyQprsLUXtg7/PKFwZsxmJkvXpCC2l+qHYEOQRailhl7XxKfWDMj6vPD5dZXLXAfdHouB9LwLT6kHJzdLk9pFMxRYKHz+2Mttw0IM4dsqfnSfYxqNDOBRPZ+4pLHeKt0Kme9gUya9CGJiq8HRMIFsxu+jTjFaMCMGCSqGSIb3DQEJFTEWBBSxTxAznF2uoOtMW+fJUoDN6B+rJDAzBgkqhkiG9w0BCRQxJh4kAEEATgBGACAAVQBzAHUAYQByAGkAbwAgAEEAYwB0AGkAdgBvAAQBAAQBAAQBAAQBAASCDIIAMIAGCSqGSIb3DQEHBqCAMIACAQAwgAYJKoZIhvcNAQcBMCcGCiqGSIb3DQEMAQYwGQQUjiun539O59z/MBdiAAdAEWZRxL8CAWSggASCDDBaUYXHmvK0TSCVgVeR9VrQsKpzBnSLV+GNCHgE/JkwI/qcOUjpYkEwhLU2XoBQDArFY8qdI3FYWl1O+pEfKWiAPddek8Y2cJSGMaCrZ3Hobrg467V9G6v7oClpGFGQ2h1QtexFr5inutMS90xJFEXkYx8LVpPjBHJcBxvrQKV1ovakwG00oQcKHp+mXza+lLjRzMDu+tIk07Dfs04Ssc4N16MbyHwNrTi+wA/uCR1ToC9NrEgzndpZ5LEoDuHnWN9Tg3JUFAUC28CYjliyRkUckWdkNHaMM5dUuclw6IlXFfvPhDnIGRdX5NiaQHl3vZw5NrqXAzC8utwgtT4IUR+jQS2MK/BDFeMRLWDZAwfcGqgna3XBJ97YEbRVR0VG4IhBFXaXLXinH5kQy0AIdOJQ3soBLQTuomdIKXSLilPRWMtdmPY7hP6ci37HtNHlAaI1sWRJZZ4tIHld/L1t7F/eDMxcvX7bEh/Bi5bVTPWqYj/k0xobArYoHfDYz/IT58zHQKoRGzZ3V4DajfGfmXXsoeXV+IZeLXv4tPJYLE9Ed3gESPRRpUN0AGQkqZ1DLosuCtQNy20jwWFbttSuvPed9b7dD+v/XW2kedI0FIu1YeSVAzC84jsj9VBBEp5bWHZ6jvLRmKzknnWRnQtJ/wuNP+Uh3DHObOI+NMlt99DJIhi9TLPGeyRIzg7XbUWjFYU6fKRFVlEAm2HPmv9qxv2fejjlRgGB0Y69YbgasUoM4vo6LsyUvoEdLcxjGIElUPzUVuQ4fpqPvqq4+pogOwMOBFzzLKkDtl92BvwOOj3SHuagTZqSgl7NB2TNPIyncmbRrxnKm1iH+Sir9SDY3/NAp1Pp39Vu5inCAdD38DCbfKnMdC/LrTAmKc+41BVd4KtzSaiOd0e2WuxVXC7/TTUmK4ehkClesHMhvIhkl17/nIcPZYAdYFRuFEkOBPgse4DtFd77RvH2dxPYdUlG2zbxNbJoo59ao1S8a55tO54jAqoypGvTi9L9qFiw/YTBVzzWxjM+Kdfn2EaNL52rS0/EDbqUs57uTNK1aAu9ppQa6vRQFhjW38fmFsxMmsz1BeNPUXta+1gNa88LHHdENQ4RiQQPn5U2pHlNzjA038yDPjeAj264SOqR7vc25jp9e16vDIWM0srKpGC2WI9om1bINcVQSF/3UmGv0dCwAiAbsFAoqGHz5EdTuXhBo5rIRgT++lvbJ58sDkDW14aSB+M6JDfBOYHcXrZn1oU3aWNnrKodVmojoAPP2nSnqRRU3eFtH9f/F1cwSy5Qf5CNVhuQxL8sGxuUxO1622Rr9qOwWYHBRn1kUz4XqxFnJdoNPxUyzIWx6k4fxMjP8fHOJsb3gTji0r80wGk4tGyZyF0J4HQeXf7+nxR38jiq5EEUjVvHNlLQY4oNvQfblM343qRbxA1k297CKntu/+oWB01a4fVqLVIUPHGP/qOURa7DasCwND7NvKvG5uH2DQLMvx/MdedqStyJe+a31we9zxwZ7hkFwLtXqzi+nzs4F8leVoILGr6WygsmnlaDMjgVdlP/qm6/p/c2uya+5Rk4yHyEbPtxIg1e4trkmbjbG0AMsT5T2+trcnfGj8pM9p2u//fWPZgN08HgDtsQB8LuCxuZ5AWYM85Nnhtj6AYp6K09tf79HLoYEhQFVrzI0Mt2SPQladVzvyvcNyeetDeKBKGsHL54tW1Y+hWRn72hmqnKzPoF3Mj7Xp1zYfWYbSOdlnO6FV/Khz3YM9XaKIBr4XWBX8OWjL5hQa04LrPxeHO9Cl6jhM6EJ6gSF5QFEGN30lCXoz28McNiBsbxgvdq5sXQZWxuu7vdDfHvA4T63su1ckS1GjeT1IXGEvPuVneo76xeBBoWepOZcaU+6RWX7LhDvKL7JglcubcHcdFFQIcuZIeLwUN0vkVaDHoOx9mdVQKHJjcL1HPRXscTgDpJD080AGTJypxoA1QHX0DGQwAMJSMHWDX5Rds6Lsmhj+vVLzSG7DKe61KN0FOz6w031IZfL+jDSP+SZFk58cG1xPO/vuYvLD0kBy6VB66UiAkqhPbKJAH09ZDXORqesNt+w0lGNfB8jEwhhftsZAGH+nIyNe7Qr2e/+ZT70oX75wJ/IEafQiZG793d+b2B/PD6JBiY2H9mzR7lfowuVSvwqIOrpGfj7WuyX85U99OOLS0pHAkCGyPTf7ibCJGCXhCDSLp8deOE9vdogQGONvo14ct872seqaU2baQ0Z2QqDiAO4M4/Gt2AcGvjcQN05nl8Gvunw7I5NFTKeXg8PE4CuCKdD5OhvRaL6MnPIfomZ1CkchfE3zrDiczl8+tmiqd1INcDahx/Xs+net2qEe2m8Kq6xZszG3od0SsCAcytft4jzYDmySL4ZnP9r17/A1SmNXOx0CHMf2RgZ/oGvf5MPXQgL6eNevV5uZJssekLK0w6Z+O3VCMnPK14rN0u4nYhKg8l0wkoBUJnvMY5gzTARt/222tRwOVSKe2D5XHzUZfcxj2nzwt2WrcHVKYVtg1w/5N5QdLdcdwWRzdEFm4FrnqdZSMd5RX88TZqtIDNnnqBmMGQqUdSk7LoSAtbRlYANMZ9RDegobnEeiH82XNUMFkYknuWDVKrYMsFWh5IknVMmdImKVFmMg1RH2O+uNCIYNPhcZTBxx01b9mk0tfFoxN2x/laGD3Eh6/fTV4edAETz1EXLjtLMiHq2l1xQY8Qs0P2b2OfjTlWEzIxzpWNL38eapEhpwykB+lE3GioOJx77bGbe5403iVzVX9jynxzY1S3H/scXhgCvRZx2AhU1VyYgk4em+rDYyX64MAjL2059HLua+YvfvL+Qkx/17Uu2bGE4v0IMDpsX4pjRJB/+n7ZKBxcUWKQL7b3y+zrWxgPu6SiHDj8we+XqHxGIH/QP1hzX44CVDJ3+JFwTsunhX/nbDZ4jyyWxEZX3frMIYG1rqcb3Xy7SbvxsBmfNC3Ow05vmgQRQ1abBqFPKY2OeJEHkeAqLFUqOlulElA7Ugw7djVjZAdE1xGzY5D/DBOggvM04LvdvG1x5aPeZNscum93TOOoipMYYI3QyacedxUjMKWVd67yyUIOagbDT+NyTXKjbP9KUgw6eGz40Np4RKXGEam8oX9zYHXkM6SVNVcCTt1gzpAfh9OQYR1t3pRSZqUYKNKqKXMEjmKbMp6U6qHEz9XkfnuisClCQgIaCHJwCL2ZY7qc2mxdPaeGJf3ljH93dJOGbQp4k67RYJe3ZMASNTBsJ/PnHTIh0ppHDWzub5W7SqdL98tKXbUUdjGZpaFAX8Rk9CNCurenrvlGJxIHlFOLlSSga76gie8ZpUAUt7LIXL58XXKpmMvd4Qo+MJa0ADwn86F3f8LOOER94SstrQFB/Fq4iTCS04U7V9US6Qd8Csd5GEI2R+xlOrvwrCZIRyghYNvaiqa90dnD3d4pkafMngZ6GNCSgxb0fbggvziKkqvN3zwxyof3b9FgZ4yd/yhqmoxY7vL9duBzvYVen/J2MwhcwKvhTkwD2+THxEs7w2ktruhbuexE1E4XdhZHVLP9eVqVhl/q7boO8Xf5PgnET3tAABTmhmws613iadzpsxJyhxWVL2PUOtQcU6PXCLN8TlTYNHkJvZz8Hww5NBELTv/KDdoS/tRJ8yCVfNX1RG6qF4vgJA8UGI9X2QjoxxoZXc4ai+w+7l9mxuQZsNPgxb1+Dox3pe+yAm2vIwS6XcnHpbTuIXYH3t/9qLnD+XSqxEyn0NzuE1wbcHMpN+c9fGMqSJm5eqSufD5o2rTWPYqXojg9Q4jbyZR3rdjPrPohp3FXVZcTDSO7A84dIeoHqhn1ktFQ6jbPwcg6AGXFiwsdUQsXQhv/DbCxtd2zzB3uH4TkVHsR40i9U5l1ZQCIMxcEn02rKfPZUSALZFI4hJyToiK1X/BuJzgYs+zGe8ExUjvMRgkpKMi5x+pfFCdSby1aWTL1QQjnp/fEoBQxMCcBE6IbUZDkYBuLt4hqBW4QLl+J9AXC+kxXv+1UcIkR55zjsDq7oHreei5Z7/UzO7ZvqCidpuyzlhIPoA/ZWFzLwx+42VGH18F+YkZ1xaw7N1YvDX9OHYRzYDvBodnOha1vpEajaKbQ0HeaWuNGMkpMn9X1VI8TRv6qdYiv1UAABAEABAEABAEABAEABAEABAEABAEABAEABAEABAEABAEAAAAAAAAAMDwwITAJBgUrDgMCGgUABBREYImUbJEClYjvILAmEgiwTKezwAQUlbsn/2bN51H/kfti/auB7FAAVd4CAWQAAA==</completeCriptoSignPkcs12> <completeCriptoSignPkcs12Alias>anf usuario activo</completeCriptoSignPkcs12Alias> <completeCriptoSignPkcs12Password>12341234</completeCriptoSignPkcs12Password> </ns2:signTask>","title":"Manual para la configuraci\u00f3n de los campos de firma para la aplicaci\u00f3n de firma manuscrita en tableta"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#configuracion-fichero-de-firma","text":"Como se ha comentado, se requiere la configuraci\u00f3n de un fichero XML de firma donde se especifiquen los datos del tr\u00e1mite. En caso de que no se desee incluir alguno de los datos descritos, se debe dejar la etiqueta vac\u00eda, pero en ning\u00fan caso suprimirla. Los siguientes puntos de este documento definen los tipos de datos que son necesarios especificar en el fichero XML: Datos del c\u00f3digo seguro de verificaci\u00f3n (CSV). Datos para el sellado de tiempo. Datos del documento a firmar. Datos de los firmantes. Firma adicional.","title":"Configuraci\u00f3n fichero de firma"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#datos-del-csv","text":"En las primeras l\u00edneas del documento XML se describe un c\u00f3digo de seguridad de verificaci\u00f3n (CSV), opcional, que debe contener las etiquetas descritas a continuaci\u00f3n. Estructura XML que describe un CSV para esta aplicaci\u00f3n: <CSV> <page></page> <text></text> <rotation></rotation> <positionOnPageLowerLeftX></positionOnPageLowerLeftX> <positionOnPageLowerLeftY></positionOnPageLowerLeftY> <positionOnPageUpperRightX></positionOnPageUpperRightX> <positionOnPageUpperRightY></positionOnPageUpperRightY> <fontSize></fontSize> </CSV>","title":"Datos del CSV"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#pagina-del-csv","text":"Descripci\u00f3n : Indicar en un n\u00famero entero la p\u00e1gina del documento a firmar en el que situar el c\u00f3digo CSV. Etiqueta: page.","title":"P\u00e1gina del CSV"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#texto","text":"Descripci\u00f3n: Introducir el contenido del CSV, una secuencia de caracteres. Etiqueta: text.","title":"Texto"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#rotacion","text":"Descripci\u00f3n: Posici\u00f3n en la que debe aparecer el texto; se define como un n\u00famero entero entre 0 y 360, dependiendo del grado de rotaci\u00f3n con el que se quiera que el c\u00f3digo se dibuje en el documento firmado. Etiqueta: rotation","title":"Rotaci\u00f3n"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#posicion","text":"Descripci\u00f3n: Posici\u00f3n en la que se sit\u00faa el CSV, es decir, las coordenadas en las que se debe situar el texto dentro del documento. Etiqueta: positionOnPageLowerLeftX, positionOnPageLowerLeftY, positionOnPageUpperRightX, positionOnPageUpperRightY.","title":"Posici\u00f3n"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#tamano-de-la-fuente-del-texto","text":"Descripci\u00f3n: Definir el tama\u00f1o del texto que se imprime en el documento firmado. Etiqueta: fontSize.","title":"Tama\u00f1o de la fuente del texto"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#datos-para-el-sellado-de-tiempo","text":"Con el objetivo de poder garantizar que el documento firmado no se ha modificado desde el momento en el que se gener\u00f3 la firma se solicita a la Autoridad de Sellado de Tiempo (TSA) que genere un sello de tiempo con la informaci\u00f3n del documento firmado, la fecha y hora y un certificado electr\u00f3nico de confianza. En esta secci\u00f3n se describen los par\u00e1metros de sellado de tiempo que responden a la siguiente estructura XML: <tsaParams> <tsaRequireCert></tsaRequireCert> <tsaPolicy></tsaPolicy> <tsaURL></tsaURL> <tsaUsr></tsaUsr> <tsaPwd></tsaPwd> <extensions> <extension> <oid></oid> <critical></critical> <value></value> </extension> </extensions> <tsaHashAlgorithm></tsaHashAlgorithm> <sslPkcs12File></sslPkcs12File> <sslPkcs12FilePassword></sslPkcs12FilePassword> </tsaParams>","title":"Datos para el sellado de tiempo"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#certificado-de-tsa","text":"Descripci\u00f3n: Indicar con un booleano \u2013 true o false \u2013 si se requiere el certificado de la Autoridad de Sellado de Tiempo. En caso de que no se establezca, se considera que no se requiere certificado. Etiqueta: tsaRequireCert","title":"Certificado de TSA"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#autoridad-de-sellado-de-tiempo","text":"Descripci\u00f3n: URL de la autoridad de sello de tiempo, en caso de que no se indique, no se a\u00f1ade el sello de tiempo. Etiqueta: tsaURL","title":"Autoridad de sellado de tiempo"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#algoritmo-de-huella-digital","text":"Descripci\u00f3n: Algoritmo de huella digital para el cifrado de la huella. E n caso de que no se establezca se toma por defecto el algoritmo SHA-1. Etiqueta: tsaHashAlgorithm","title":"Algoritmo de huella digital"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#politica-de-sellado","text":"Descripci\u00f3n : Pol\u00edtica de sellado de tiempo, obligatoria si se define una Autoridad de Sellado de Tiempo para la etiqueta tsaUrl. Etiqueta : tsaPolicy","title":"Pol\u00edtica de sellado"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#usuario-de-la-tsa","text":"Descripci\u00f3n: Nombre y contrase\u00f1a del usuario de la TSA. Se ignora la contrase\u00f1a s i previamente no se ha establecido un nombre de usuario. Etiqueta: tsaUsr, tsaPwd","title":"Usuario de la TSA"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#certificado-ssl-cliente","text":"Descripci\u00f3n : Se define un nombre y una contrase\u00f1a para el fichero PKCS#12 que contiene el certificado SSL cliente que pedir\u00e1 la TSA al establecer conexiones HTTPS. Etiqueta: tsaSslPkcs12File, tsaSslPkcs12FilePassword","title":"Certificado SSL cliente"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#datos-del-documento-a-firmar","text":"La aplicaci\u00f3n cifra los datos biom\u00e9tricos de los firmantes junto con la huella digital del documento original evitando de esta manera la r\u00e9plica de los datos en otros documentos. Se permite almacenar los documentos firmados tanto en un servidor, como en local, para ello es necesaria la especificaci\u00f3n del directorio remoto en el que almacenarlo y el directorio local. La aplicaci\u00f3n da la posibilidad de almacenar tanto en los dos directorios como en uno de ellos, no obstante, es imprescindible que se defina en el XML al menos uno de ellos. A continuaci\u00f3n se especifica la estructura del fichero XML en la que se describen los datos para la recuperaci\u00f3n y almacenamiento del documento firmado. <retrieveUrl></retrieveUrl> <saveUrl></saveUrl> <saveUrlPostParam></saveUrlPostParam> <saveId></saveId> <saveIdPostParam></saveIdPostParam> <saveDirectory></saveDirectory> <signedFileName></signedFileName> <writableDirectory></writableDirectory> <cert></cert> <showTabletButtons></showTabletButtons>","title":"Datos del documento a firmar"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#directorio-del-documento","text":"Descripci\u00f3n: Directorio desde d\u00f3nde se recupera el documento original que se desea firmar. Puede estar definido en un repositorio (\u201chttp://direccion.com/fichero.pdf\u201d) o como fichero local (\u201cfile://C:\\directorio\\fichero.pdf\u201d). Etiqueta: retrieveURL.","title":"Directorio del documento"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#direccion-url-para-guardar-el-documento-firmado","text":"Descripci\u00f3n: Indicar la direcci\u00f3n de almacenamiento del documento firmado. Los documentos se recibir\u00e1n por URL con un par\u00e1metro definido. Etiqueta: saveUrl, saveUrlPostParam.","title":"Direcci\u00f3n URL para guardar el documento firmado"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#identificador-del-documento","text":"Descripci\u00f3n: Indicar el identificador del documento, un n\u00famero entero. En caso de que no se defina ser\u00e1 nulo e indicar una etiqueta asignada a este identifacdor. Etiqueta: saveId, saveIdPostParam.","title":"Identificador del documento"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#directorio-para-guardar-el-documento-firmado","text":"Descripci\u00f3n : Indicar el directorio local en el que almacenar el documento firmado. Etiqueta: saveDirectory.","title":"Directorio para guardar el documento firmado"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#nombre-del-documento-firmado","text":"Descripci\u00f3n: Nombre con el que se almacena el documento firmado. Este nombre se utiliza para guardar el documento tanto en local como en remoto. Etiqueta: signedFileName.","title":"Nombre del documento firmado"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#directorio-para-ficheros-temporales","text":"Descripci\u00f3n: Nombre del directorio donde se almacenar los logs de las aplicaci\u00f3n y las dll de las tabletas de captura de firma. Etiqueta: writableDirectory","title":"Directorio para ficheros temporales"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#certificado","text":"Descripci\u00f3n: Indicar el certificado de cifrado de los datos. Este certificado debe incluirse codificado en base 64. Etiqueta: cert","title":"Certificado"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#mostrar-botones-en-la-tableta-de-firma","text":"Descripci\u00f3n: Indicar mediante un booleano si se desea mostrar los botones de la tablet de firma. Estos botones permitir\u00e1n al firmante aceptar, cancelar o repetir la operaci\u00f3n de firma. En caso de que no se desee mostrar al firmante la botonera, al funcionario que realice el tr\u00e1mite s\u00ed que le aparecer\u00e1 y por tanto, debe ser \u00e9ste el que realice la acci\u00f3n de aceptar, repetir o cancelar. Etiqueta: showTabletButtons. Figure 1 Imagen de una tableta de firma que contiene la botonera con las acciones de firma.","title":"Mostrar botones en la tableta de firma"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#datos-de-los-firmantes","text":"Los datos de los firmantes del documento se definen en este apartado. Para cada firmante se introducen sus datos personales, la plantilla correspondiente para cada tipo de tableta con la que se trabaje y las posiciones que ocupa la r\u00fabrica de la firma en el documento firmado. Los datos de los firmantes est\u00e1n definidos por la etiqueta bioSigns y cada firmante es descrito es por la etiqueta bioSign . Esta es la estructura XML que describe los datos de los firmantes del documento: <bioSigns> <bioSign> <signerData> <signerName></signerName> <signerSurname1></signerSurname1> <signerSurname2></signerSurname2> <signerId></signerId> </signerData> <signHeader></signHeader> <signFooter></signFooter> <tablet> <tabletType></tabletType> <htmlTemplate></htmlTemplate> <jpegTemplate></jpegTemplate> <tablet> <signatureArea> <x></x> <y></y> <width></width> <height></height> </signatureArea> <signatureRubricPositionOnPdf> <x></x> <y></y> <width></width> <height></height> </signatureRubricPositionOnPdf> <signatureRubricPageOnPdf></signatureRubricPageOnPdf> </bioSign> <bioSigns>","title":"Datos de los firmantes"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#datos-personales","text":"Descripci\u00f3n: Indicar los datos personales del firmante, estos datos se definen bajo la etiqueta signerData y debe especificarse el nombre, primer y segundo apellido, documento de identificaci\u00f3n (NIE/NIF) y puesto de trabajo del firmante. Etiquetas: sigenerName, signerSurname1, signerSurname2, signerId.","title":"Datos personales"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#plantilla-de-firma","text":"Descripci\u00f3n : La plantilla que se muestra en la pantalla de la tableta de firma puede ser definida o bien mediante una imagen JPEG o bien por c\u00f3digo HTML. Para ello es necesario crear una plantilla de uno de los dos tipos (JEPG o HTML) para cada tableta de firma, seg\u00fan el modelo del dispositivo que se conecte. Por lo tanto, cada firmante tiene asociada una plantilla de firma para el modelo de del dispositivo con el que vaya a realizar la operaci\u00f3n. La plantilla dada en el documento anexo contiene los logos de la agencia tributaria, en caso de querer utilizar dicha plantilla es necesario cambiar la firma por la del firmante personalizando el campo. Este es el aspecto que muestra la tableta en la plantilla definida en el ejemplo adjunto en el anexo: Figure 2 Imagen de una tableta de firma con una plantilla personalizada. Etiqueta: tablet, tabletType, htmlTemplate, jpegTemplate.","title":"Plantilla de firma"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#area-de-firma","text":"Descripci\u00f3n: Definir el \u00e1rea de firma de manera que quede determinada el \u00e1rea de la tableta en la que el usuario tiene que firmar y que est\u00e1 definida por una coordenada (x, y); punto en el que se sit\u00faa la esquina superior izquierda del rect\u00e1ngulo de firma y por las dimensiones del \u00e1rea: altura y anchura. Etiquetas: signature Area, x, y, width, height","title":"\u00c1rea de firma"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#area-de-firma-en-el-documento","text":"Descripci\u00f3n: \u00c1rea en la que se sit\u00faa la firma en el documento, dependiendo del firmante se ubicar\u00e1 en diferentes coordenadas, nunca correspondiendo dos firmas en la misma \u00e1rea. Se define una coordenadas (x,y) en la que se sit\u00faa la esquina inferior derecha de la firma, la altura y la anchura que ocupa dicha \u00e1rea. Cabe destacar que en los documentos PDF el espacio de coordenadas parte de la esquina inferior izquierda, siendo esta (0,0). Figure 3 Coordenadas en PDF","title":"\u00c1rea de firma en el documento"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#pagina-de-firma","text":"Descripci\u00f3n: P\u00e1gina del documento en la que aparece la firma. Etiqueta: signatureRubricPageOnPdf","title":"P\u00e1gina de firma"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#firma-adicional","text":"Los documentos que necesiten una firma adicional de una tercera entidad o de un funcionario deben tener completados los siguientes datos de la estructura XML: <completeWithCriptoSign></completeWithCriptoSign> <completeCriptoSignExtraParams> <entry> <key>pkcs12</key> <value></value> </entry> </completeCriptoSignExtraParams> <completeCriptoSignPkcs12></completeCriptoSignPkcs12> <completeCriptoSignPkcs12Alias></completeCriptoSignPkcs12Alias> <completeCriptoSignPkcs12Password></completeCriptoSignPkcs12Password/> La firma del funcionario puede realizarse a trav\u00e9s del certificado Pkcs12 que \u00e9ste tenga almacenado en al almac\u00e9n de claves o bien utilizando los par\u00e1metros de firma con certificado que se definan para el proceso de firma.","title":"Firma adicional"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#firma-con-parametros-adicionales","text":"Descripci\u00f3n: Para una firma con certificado, se indicar\u00e1 con un booleano \u2013true, false \u2013 en la etiqueta completeWithCriptoSign y se completar\u00e1n los par\u00e1metros adicionales definidos en entry. El conjunto de par\u00e1metros adicionales aceptado por la aplicaci\u00f3n para a\u00f1adir a una firma est\u00e1n descritos en el anexo . Etiquetas: completeWithCriptoSign, completeCriptoSignExtraParams","title":"Firma con par\u00e1metros adicionales"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#firma-con-almacen-pkcs12","text":"Descripci\u00f3n: Esta aplicaci\u00f3n permite la firma utilizando un almac\u00e9n de claves Pkcs12. Para ello, se debe rellenar las etiquetas especificando el nombre del certificado PKCS12 almacenado en el almac\u00e9n de claves, el nombre y la contrase\u00f1a de la entidad a la que pertenece el certificado. En caso de que no se definan los tres par\u00e1metros, la firma no se realiza. Etiquetas: completeCriptoSignPkcs12, completeCriptoSignPkcs12Alias, completeCriptoSignPkcs12Password","title":"Firma con almac\u00e9n PKCS12"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#plantilla-de-configuracion","text":"Plantilla de configuraci\u00f3n del fichero XML que deber\u00e1 codificarse en base 64 y definirlo en el applet de llamada a la aplicaci\u00f3n. <?xml version= \"1.0\" encoding= \"UTF-8\" standalone= \"yes\" ?> <ns2:signTask xmlns:ns2= \"es.gob.afirma.crypto.handwritten\" > <CSV> <page></page> <text></text> <rotation></rotation> <positionOnPageLowerLeftX></positionOnPageLowerLeftX> <positionOnPageLowerLeftY></positionOnPageLowerLeftY> <positionOnPageUpperRightX></positionOnPageUpperRightX> <positionOnPageUpperRightY></positionOnPageUpperRightY> <fontSize></fontSize> </CSV> <tsaParams> <tsaRequireCert></tsaRequireCert> <tsaPolicy></tsaPolicy> <tsaURL></tsaURL> <tsaUsr></tsaUsr> <tsaPwd></tsaPwd> <extensions> <extension> <oid></oid> <critical></critical> <value></value> </extension> </extensions> <tsaHashAlgorithm></tsaHashAlgorithm> <sslPkcs12File></sslPkcs12File> <sslPkcs12FilePassword></sslPkcs12FilePassword> </tsaParams> <writableDirectory></writableDirectory> <retrieveUrl></retrieveUrl> <saveUrl></saveUrl> <saveUrlPostParam></saveUrlPostParam> <saveId></saveId> <saveIdPostParam></saveIdPostParam> <saveDirectory></saveDirectory> <signedFileName></signedFileName> <cert></cert> <showTabletButtons></showTabletButtons> <bioSigns> <bioSign> <signerData> <signerName></signerName> <signerSurname1></signerSurname1> <signerSurname2></signerSurname2> <signerId></signerId> </signerData> <signHeader></signHeader> <signFooter></signFooter> <tablet> <tabletType></tabletType> <htmlTemplate></htmlTemplate> <jpegTemplate></jpegTemplate> <tablet> <signatureArea> <x></x> <y></y> <width></width> <height></height> </signatureArea> <signatureRubricPositionOnPdf> <x></x> <y></y> <width></width> <height></height> </signatureRubricPositionOnPdf> <signatureRubricPageOnPdf></signatureRubricPageOnPdf> </bioSign> </bioSigns> <completeWithCriptoSign></completeWithCriptoSign> <completeCriptoSignExtraParams> <entry> <key></key> <value></value> </entry> </completeCriptoSignExtraParams> <completeCriptoSignPkcs12></completeCriptoSignPkcs12> <completeCriptoSignPkcs12Alias></completeCriptoSignPkcs12Alias> <completeCriptoSignPkcs12Password></completeCriptoSignPkcs12Password/> </ns2:signTask>","title":"Plantilla de configuraci\u00f3n"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#anexo","text":"","title":"Anexo"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#listado-de-parametros-adicionales","text":"Valores aceptados como par\u00e1metros adicionales para las firmas PAdES:","title":"Listado de par\u00e1metros adicionales"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#allowcosigningunregisteredsignatures","text":"Si se establece a true se permite firmar un PDF incluso si este contiene firmas previas no registradas dentro de campos Acrobat ( AcroFields ), condici\u00f3n obligatoria sin la cual es muy probable que se corrompan las firmas previas. Si no se establece o se establece a o false, al intentar firmar un PDF que contenga firmas no registradas se lanza una excepci\u00f3n de tipo PdfHasUnregisteredSignaturesException.","title":"allowCosigningUnregisteredSignatures"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#includeonlysignningcertificate","text":"Si se establece a true se incluye en la firma \u00fanicamente el certificado del firmante (y no la cadena de certificaci\u00f3n completa). Si no se establece o se establece a o false se incluir\u00e1 toda la cadena de certificaci\u00f3n.","title":"includeOnlySignningCertificate"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#alwayscreaterevision","text":"Si se establece a true siempre crea una revisi\u00f3n del PDF incluso cuando el documento no contiene ninguna firma previa. Esto requiere que los documentos de entrada cumplan estrictamente la especificaci\u00f3n PDF 1.7 (ISO 32000-1:2008), y puede crear incompatibilidades con documentos PDF acordes a la especificaci\u00f3n 1.3 creados con bibliotecas antiguas, como por ejemplo QPDF . Si se establece a false, no crea revisiones en documentos que no contengan firmas previas y s\u00ed las crea en documentos que ya contengan alguna firma.","title":"alwaysCreateRevision"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#image","text":"Imagen que se desea insertar en el PDF antes de que este sea firmado. La imagen debe proporcionarse en formato JPEG codificado en Base64. SI el documento ya contiene firmas es posible que se invaliden, por lo que conviene usarlo \u00fanicamente en documentos sin firmas previas.","title":"image"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#imagepage","text":"P\u00e1gina donde desea insertarse la imagen indicada mediante el par\u00e1metro image. La numeraci\u00f3n de las p\u00e1ginas comienza en uno. Si se indica -1 como n\u00famero de p\u00e1gina se inserta la imagen en la \u00faltima p\u00e1gina del documento. Si se indica 0 como n\u00famero de p\u00e1gina se inserta la imagen en todas las p\u00e1ginas del documento. Este par\u00e1metro es obligatorio, si no se indica una p\u00e1gina v\u00e1lida no se insertar\u00e1 la imagen.","title":"imagePage"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#imagepositiononpagelowerleftx","text":"Coordenada horizontal inferior izquierda de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftY, imagePositionOnPageUpperRightX e imagePositionOnPageUpperRightY. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage.","title":"imagePositionOnPageLowerLeftX"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#imagepositiononpagelowerlefty","text":"Coordenada vertical inferior izquierda de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftX, imagePositionOnPageUpperRightX e imagePositionOnPageUpperRightY. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage.","title":"imagePositionOnPageLowerLeftY"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#imagepositiononpageupperrightx","text":"Coordenada horizontal superior derecha de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftX, imagePositionOnPageLowerLeftY e imagePositionOnPageUpperRightY. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage.","title":"imagePositionOnPageUpperRightX"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#imagepositiononpageupperrighty","text":"Coordenada vertical superior derecha de la posici\u00f3n de la imagen (indicada mediante el par\u00e1metro image) dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas de la imagen mediante los par\u00e1metros imagePositionOnPageLowerLeftX, imagePositionOnPageLowerLeftY e imagePositionOnPageUpperRightX. Es necesario indicar tambi\u00e9n una p\u00e1gina de inserci\u00f3n en el par\u00e1metro imagePage.","title":"imagePositionOnPageUpperRightY"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#attach","text":"Contenido a a\u00f1adir como adjunto al PDF, en formato Base64 (el adjunto ser\u00e1 el binario decodificado). Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro attachFileName.","title":"attach"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#attachfilename","text":"Nombre de fichero para adjuntar el contenido binario indicado mediante attach. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro attach.","title":"attachFileName"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#attachdescription","text":"Descripci\u00f3n del contenido binario indicado mediante attach.","title":"attachDescription"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#certificationlevel","text":"Nivel de certificaci\u00f3n de la firma PDF. Los valores admitidos son num\u00e9ricos, correspondiendo: 0 = Firma ordinaria no certificada (por defecto) 1 = Firma de autor. No se permite ning\u00fan cambio posterior en el documento 2 = Firma de autor certificada para formularios. Se permite \u00fanicamente el relleno posterior de los campos del formulario 3 = Firma certificada. Se permite \u00fanicamente el relleno posterior de los campos del formulario o el a\u00f1adido de firmas de aprobaci\u00f3n","title":"certificationLevel"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#signaturesubfilter","text":"Nombre del sub-filtro en el diccionario PDF para indicar el tipo de la firma. Si no se indica este par\u00e1metro por defecto se usa adbe.pkcs7.detached (firma PAdES b\u00e1sica). Es posible indicar ETSI.CAdES.detached para generar una firma PAdES-BES, si bien el hacerlo puede causar que al a\u00f1adir firmas adicionales al PDF se invaliden las ya existentes.","title":"signatureSubFilter"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#signaturefield","text":"Nombre del campo en donde insertar la firma. Si el documento PDF tiene ya un campo de firma pre-creado es posible utilizarlo para insertar la firma generada, referenci\u00e1ndolo por su nombre. Si se indica un nombre de campo de firma que no exista en el documento PDF proporcionado, se generar\u00e1 una excepci\u00f3n.","title":"signatureField"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#signaturepage","text":"P\u00e1gina del documento PDF donde insertar la firma. Puede usarse la constante LAST_PAGE para referirse a la \u00faltima p\u00e1gina del documento PDF si se desconoce el n\u00famero total de p\u00e1ginas de este. Este par\u00e1metro se ignora si se ha establecido valor al par\u00e1metro signatureField, y necesita que se establezcan valores v\u00e1lidos a los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY, signaturePositionOnPageUpperRightX y signaturePositionOnPageUpperRightY.","title":"signaturePage"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#signaturepositiononpagelowerleftx","text":"Coordenada horizontal inferior izquierda de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftY, signaturePositionOnPageUpperRightX y signaturePositionOnPageUpperRightY. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento.","title":"signaturePositionOnPageLowerLeftX"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#signaturepositiononpagelowerlefty","text":"Coordenada vertical inferior izquierda de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageUpperRightX y signaturePositionOnPageUpperRightY. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento.","title":"signaturePositionOnPageLowerLeftY"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#signaturepositiononpageupperrightx","text":"Coordenada horizontal superior derecha de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY y signaturePositionOnPageUpperRightY. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento.","title":"signaturePositionOnPageUpperRightX"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#signaturepositiononpageupperrighty","text":"Coordenada vertical superior derecha de la posici\u00f3n del recuadro visible de la firma dentro de la p\u00e1gina. Es necesario indicar el resto de coordenadas del recuadro mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY y signaturePositionOnPageUpperRightX. Si no se indica una p\u00e1gina en el par\u00e1metro signaturePage la firma se inserta en la \u00faltima p\u00e1gina del documento.","title":"signaturePositionOnPageUpperRightY"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#signaturerubricimage","text":"Imagen JPEG codificada en Base64 de la r\u00fabrica de la firma manuscrita que se desea aparezca como firma visible en el PDF.","title":"signatureRubricImage"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#layer2text","text":"Texto a escribir dentro de la \"capa 2\" de la firma visible. Este texto se escribe \u00fanicamente si no se ha especificado una imagen de r\u00fabrica, y necesita que se indique la p\u00e1gina y la situaci\u00f3n d\u00f3nde mostrar el recuadro de firma mediante los par\u00e1metros signaturePositionOnPageLowerLeftX, signaturePositionOnPageLowerLeftY, signaturePositionOnPageUpperRightX, signaturePositionOnPageUpperRightY y signaturePage.","title":"layer2Text"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#layer2fontfamily","text":"Tipo de letra a usar en el texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos, correspondiendo: 0 = Courier (tipo por defecto) 1 = Helv\u00e9tica 2 = Times Roman 3 = Symbol 4 = ZapfDingBats","title":"layer2FontFamily"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#layer2fontsize","text":"Tama\u00f1o de letra a usar en el texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos (y el valor por defecto es 12).","title":"layer2FontSize"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#layer2fontstyle","text":"Estilo del tipo de letra a usar en el texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son num\u00e9ricos, correspondiendo: 0 = Normal (estilo por defecto) 1 = Negrita 2 = Cursiva 3 = Negrita y cursiva 4 = Subrayado 8 = Tachado Es posible combinar estilos aplicando la operaci\u00f3n l\u00f3gica o sobre los valores num\u00e9ricos a combinar.","title":"layer2FontStyle"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#layer2fontcolor","text":"Color del texto de la \"capa 2\" de la firma visible. Este par\u00e1metro requiere que se haya establecido tambi\u00e9n el par\u00e1metro layer2Text. Los valores admitidos son textuales (se ignora entre may\u00fasculas y min\u00fasculas), soport\u00e1ndose: black = Negro (color por defecto) white = Blanco gray = Gris lightGray = Gris claro darkGray = Gris oscuro red = Rojo pink = Rosa","title":"layer2FontColor"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#signreason","text":"Raz\u00f3n por la que se realiza la firma (este dato se a\u00f1ade al diccionario PDF, y no a la propia firma).","title":"signReason"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#signatureproductioncity","text":"Ciudad en la que se realiza la firma (este dato se a\u00f1ade al diccionario PDF, y no a la propia firma).","title":"signatureProductionCity"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#signercontact","text":"Contacto del firmante, usualmente una direcci\u00f3n de correo electr\u00f3nico (este dato se a\u00f1ade al diccionario PDF, y no a la propia firma).","title":"signerContact"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#policyidentifier","text":"Identificador de la pol\u00edtica de firma. Debe ser un OID (o una URN de tipo OID) que identifique un\u00edvocamente la pol\u00edtica en formato ASN.1 procesable.","title":"policyIdentifier"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#policyidentifierhash","text":"Huella digital del documento de pol\u00edtica de firma (normalmente del mismo fichero en formato ASN.1 procesable). Si no se indica una huella digital y el par\u00e1metro policyIdentifier no es una URL accesible universalmente se usar\u00e1 0, mientras que si no se indica una huella digital pero el par\u00e1metro policyIdentifier es una URL accesible universalmente, se descargara el fichero apuntado por la URL para calcular la huella digital al vuelo .","title":"policyIdentifierHash"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#policyidentifierhashalgorithm","text":"Algoritmo usado para el c\u00e1lculo de la huella digital indicada en el par\u00e1metro policyIdentifierHash. Es obligatorio indicarlo cuando se proporciona una huella digital distinta de 0.","title":"policyIdentifierHashAlgorithm"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#policyqualifier","text":"URL que apunta al documento descriptivo de la pol\u00edtica de firma (normalmente un documento PDF con una descripci\u00f3n textual).","title":"policyQualifier"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#ownerpassword","text":"Contrase\u00f1a de apertura del PDF (contrase\u00f1a del propietario) si este estaba cifrado. No se soporta la firma de documentos PDF cifrados con certificados o con algoritmo AES256.","title":"ownerPassword"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#headless","text":"Evita cualquier interacci\u00f3n con el usuario si se establece a true, si no se establece o se establece a false act\u00faa normalmente (puede mostrar di\u00e1logos, por ejemplo, para solicitar las contrase\u00f1as de los PDF cifrados). \u00datil para los procesos desatendidos y por lotes.","title":"headLess"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#avoidencryptingsignedpdfs","text":"Si se establece a true no cifra los PDF firmados aunque el original estuviese firmado, si no se establece o se establece a false los PDF se cifran tras firmarse si el original lo estaba, usando la misma contrase\u00f1a y opciones que este.","title":"avoidEncryptingSignedPdfs"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#allowsigningcertifiedpdfs","text":"Si se establece a true permite la firma o cofirma de PDF certificados sin consultarlo al usuario, si se establece a false o cualquier otro valor se lanza una excepci\u00f3n en caso de intentar firmar o cofirmar un PDF certificado y si no se establece se mostrar\u00e1 un di\u00e1logo al usuario para que confirme que desea realizar la firma a pesar de que el resultado ser\u00e1n una firma no v\u00e1lida. Si el par\u00e1metro headLess est\u00e1 establecido a true, no podr\u00e1 mostrar el di\u00e1logo de confirmaci\u00f3n as\u00ed que llegados a este punto se lanzar\u00e1 una excepci\u00f3n. No se soporta el cifrado de documentos PDF con certificados o con algoritmo AES256.","title":"allowSigningCertifiedPdfs"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#tstype","text":"Tipo de sello de tiempo a aplicar: 1 = Solo sello a nivel de firma. 2 = Solo sello a nivel de documento. 3 = Dos sellos, uno a nivel de firma y otro a nivel de documento.","title":"tsType"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#tsaurl","text":"URL de la autoridad de sello de tiempo (si no se indica no se a\u00f1ade sello de tiempo).","title":"tsaURL"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#tsapolicy","text":"Pol\u00edtica de sellado de tiempo (obligatoria si se indica tsaURL).","title":"tsaPolicy"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#tsahashalgorithm","text":"Algoritmo de huella digital a usar para el sello de tiempo (si no se establece se usa SHA-1).","title":"tsaHashAlgorithm"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#tsarequirecert","text":"true si se requiere el certificado de la TSA, false en caso contrario (si no se establece se asume true).","title":"tsaRequireCert"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#tsausr","text":"Nombre de usuario de la TSA.","title":"tsaUsr"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#tsapwd","text":"Contrase\u00f1a del usuario de la TSA. Se ignora si no se ha establecido adem\u00e1s tsaUsr.","title":"tsaPwd"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#tsasslpkcs12file","text":"Nombre del fichero PKCS#12 que contiene el certificado SSL cliente que pedir\u00e1 la TSA al establecer la coneci\u00f3s HTTPS.","title":"tsaSslPkcs12File"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#tsasslpkcs12filepassword","text":"Contrase\u00f1a del fichero PKCS#12 que contiene el certificado SSL cliente para las conexiones HTTPS.","title":"tsaSslPkcs12FilePassword"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#signingcertificatev2","text":"Si se indica a true se utilizar\u00e1 SigningCertificateV2, si se indica cualquier otra cosa SigningCertificateV1. Si no se indica nada, se utilizar\u00e1 V1 para las firmas SHA1 y V2 para el resto.","title":"signingCertificateV2"},{"location":"markdown_strict/Manual%20para%20la%20configuraci%C3%B3n%20de%20los%20campos%20de%20firma%20para%20la%20aplicaci%C3%B3n%20de%20firma%20manuscrita%20en%20tableta/#ejemplo","text":"Este documento anexo es un ejemplo de documento XML para la firma de un documento por una entidad firmante e incluye la firma del funcionario por medio de un certificado PKCS12 ya definido. Ejemplo: <?xml version= \"1.0\" encoding= \"UTF-8\" standalone= \"yes\" ?> <ns2:signTask xmlns:ns2= \"es.gob.afirma.crypto.handwritten\" > <!-- PARTE 1 --> <CSV> <page>1</page> <text>CSV123812347823748946</text> <rotation>90</rotation> <positionOnPageLowerLeftX>200</positionOnPageLowerLeftX> <positionOnPageLowerLeftY>20</positionOnPageLowerLeftY> <positionOnPageUpperRightX>200</positionOnPageUpperRightX> <positionOnPageUpperRightY>300</positionOnPageUpperRightY> <fontSize>15</fontSize> <text>CSV-1231208</text> <rotation>0</rotation> <positionOnPageLowerLeftX>100</positionOnPageLowerLeftX> <positionOnPageLowerLeftY>100</positionOnPageLowerLeftY> <positionOnPageUpperRightX>200</positionOnPageUpperRightX> <positionOnPageUpperRightY>200</positionOnPageUpperRightY> <fontSize>15</fontSize> </CSV> <!-- PARTE 2 --> <tsaParams> <tsaRequireCert>true</tsaRequireCert> <tsaPolicy>4.3.2.1</tsaPolicy> <tsaURL>http://aeat.aeat</tsaURL> <tsaUsr>user</tsaUsr> <tsaPwd>password</tsaPwd> <extensions> <extension> <oid>1.2.3.4</oid> <critical>false</critical> <value>//o=</value> </extension> </extensions> <tsaHashAlgorithm>SHA-512</tsaHashAlgorithm> <sslPkcs12File>AAECAw==</sslPkcs12File> <sslPkcs12FilePassword>p12password</sslPkcs12FilePassword> </tsaParams> <!-- PARTE 3 --> <writableDirectory>C:\\Temp</writableDirectory> <retrieveUrl>file://C:\\Temp\\formulario1.pdf</retrieveUrl> <saveUrl></saveUrl> <saveUrlPostParam></saveUrlPostParam> <saveId>001</saveId> <saveIdPostParam>id</saveIdPostParam> <saveDirectory>C:\\Temp</saveDirectory> <writableDirectory>C:\\Temp</writableDirectory> <retrieveUrl>file://C:\\Temp\\formulario1.pdf</retrieveUrl> <saveUrl></saveUrl> <saveUrlPostParam></saveUrlPostParam> <saveId>004</saveId> <saveIdPostParam>idd</saveIdPostParam> <saveDirectory>C:\\Temp\\/saveDirectory> <signedFileName>PDF firmado</signedFileName> <cert>MIIFnTCCBIWgAwIBAgICA+owDQYJKoZIhvcNAQEFBQAwgdoxCzAJBgNVBAYTAkVTMRIwEAYDVQQIEwlCYXJjZWxvbmExSDBGBgNVBAcMP0JhcmNlbG9uYSAoc2VlIGN1cnJlbnQgYWRkcmVzcyBhdCBodHRwczovL3d3dy5hbmYuZXMvYWRkcmVzcy8gKTEnMCUGA1UEChMeQU5GIEF1dG9yaWRhZCBkZSBDZXJ0aWZpY2FjaW9uMRcwFQYDVQQLEw5BTkYgQ2xhc2UgMSBDQTETMBEGA1UEBRMKRy02MzI4NzUxMDEWMBQGA1UEAxMNQU5GIFNlcnZlciBDQTAeFw0wNjEyMzEyMzAwMDBaFw0xNDEyMzEyMzAwMDBaMIGmMRswGQYDVQQDExJBTkYgVXN1YXJpbyBBY3Rpdm8xDDAKBgNVBCoTA0FORjEXMBUGA1UEBBMOVXN1YXJpbyBBY3Rpdm8xEjAQBgNVBAUTCTEyMzQ1Njc4WjEeMBwGCSqGSIb3DQEJARYPdGVzdEBwcnVlYmEuY29tMR8wHQYDVQQLExZDbGFzZSAyIHBlcnNvbmEgZmlzaWNhMQswCQYDVQQGEwJFUzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAj2qAceOf0pyATEM0BxBK7+eGA0HEZWDZpqdhCeVvsI1AqhLWQpWNg65TGXE8ijzxGU/yS94k/34gPgIkla+p/mrDaNsVY69RcLp1hWYcL61rM//In+hXlA3qUK6as942b55YyzNsbJSQPCNgkiGuIQTo1Xfsfk4XZDi+yNSRgUMCAwEAAaOCAiEwggIdMAkGA1UdEwQCMAAwCwYDVR0PBAQDAgbAMBMGCisGAQQBgY8cFAMEBQwDQU5GMBcGCisGAQQBgY8cFAQECQwHVXN1YXJpbzAWBgorBgEEAYGPHBQFBAgMBkFjdGl2bzAZBgorBgEEAYGPHBQGBAsMCTEyMzQ1Njc4WjCBiAYDVR0gBIGAMH4wfAYKKwYBBAGBjxwDBDBuMD0GCCsGAQUFBwICMDEaL0NlcnRpZmljYWRvIGVtaXRpZG8gcGFyYSByZWFsaXphY2nzbiBkZSBwcnVlYmFzMC0GCCsGAQUFBwIBFiFodHRwczovL3d3dy5hbmYuZXMvQUMvZG9jdW1lbnRvcy8wOAYIKwYBBQUHAQEELDAqMCgGCCsGAQUFBzABhhxodHRwOi8vd3d3LmFuZi5lcy9BQy9SQy9vY3NwMDkGA1UdHwQyMDAwLqAsoCqGKGh0dHA6Ly93d3cuYW5mLmVzL0FDL1JDL0FORkFDQ0xBU0VBMS5jcmwwFwYKKwYBBAGBjxwTAQQJDAcxMjMtMzIxMDEGCisGAQQBgY8cKgYEIwwhaHR0cHM6Ly93d3cuYW5mLmVzL0FDL0FDVEFTLzU2Nzg5MBYGCSsGAQQBgY8cEwQJDAczMjEtMTIzMB0GA1UdDgQWBBSxTxAznF2uoOtMW+fJUoDN6B+rJDAfBgNVHSMEGDAWgBS+O/a0MbdzJEg5xVcTlHWqn4E/LDANBgkqhkiG9w0BAQUFAAOCAQEATQgYAOwxrMRTT2Nhx7pqiNsoGT5dJmeunAv+iU5zx/VoEXB/mx+VtyLfMea3VS9LC23404XS7pz5oPwiVPLsMPZtzOcmfacVnSdRn5J7+qOO8MB+OVlXq/QmARn+1XeBCHaTQ6AMc/pdveEoGktaXwEjTslWyRD9dGDzLp04+FndQAbVcI5xRkb4vToRnhQmloUVddhQAO8usOAIb00GJFNTq4lsyZ1qT1HplQl+ngsSD1HBxkhx10Pm3KuvCunAh4um0QnSeeiq9qWIV0UZrFlMwNRXvH9OVTqSGC4PXjw2zOi2GLUfags1decu7gcGjidlELR/WHU/6lrztfdViQ==</cert> <showTabletButtons>false</showTabletButtons> <!-- PARTE 4 --> <bioSigns> <bioSign> <signerData> <signerName>Ana</signerName> <signerSurname1>P\u00e9rez</signerSurname1> <signerSurname2>Garc\u00eda</signerSurname2> <signerId>12345678Z</signerId> <signerPost></signerPost> </signerData> <signHeader>Ejemplo de cabecera</signHeader> <signFooter>Ejemplo de pie de firma</signFooter> <tablet> <tabletType>STU-430</tabletType> <htmlTemplate> <p style=\"font-weight: bold; font-size:12px; margin-left:20px;\"> Firme en el recuadro y pulse aceptar: </p> <div style=\"margin-left:20px; margin-top:58px;\" > <p style=\"font-weight: bold; font-size:12px;\"> Fdo. Ana P\u00e9rez Garc\u00eda </p> </div> </htmlTemplate> </tablet> <signatureArea> <x>20</x> <y>50</y> <width>275</width> <height>100</height> </signatureArea> <signatureRubricPositionOnPdf> <x>75</x> <y>220</y> <width>150</width> <height>55</height> </signatureRubricPositionOnPdf> <signatureRubricPageOnPdf>1</signatureRubricPageOnPdf> </bioSign> </bioSigns> <!-- PARTE 5 --> <completeWithCriptoSign>true</completeWithCriptoSign> <completeCriptoSignExtraParams> <entry> <key>clave</key> <value>valor</value> </entry> </completeCriptoSignExtraParams> <completeCriptoSignPkcs12>MIACAQMwgAYJKoZIhvcNAQcBoIAkgASCAz4wgDCABgkqhkiG9w0BBwGggCSABIIDJjCCAyIwggMeBgsqhkiG9w0BDAoBAqCCArEwggKtMCcGCiqGSIb3DQEMAQMwGQQUpRWJxSXSctC3HmVIR5EjLteSgtICAWQEggKAH173NfjSat+f5O7bP672xUM75cGnI0Gb5jWz6JP5oXsLf0PyxDUNrsrZ75H4iHmjrtfaaKoOj4Q6KXLPdMM9RlADPgksx4mqc9kk1jRnQUOCUGpFI0RWEv1zqxRpCr3JIHyyBwTq+1NDG7N5yT/8R3UNX6nYwZpqtPi4pMcOe4zTfXNnI/g4JK4Ui1JRLpl3e7d6tpYdH/l6Z4L+bdG74wPX8tqWE84wYYowpH5yaTtcqSyXCKU0+iK/D4atrmEklznPd/MP0DunT0YtoQYDuuT4hKM5bj34MeIVMXWQDr60ugvs1q8b5xtG/84udBH7QVjw/EYP7c0kEb3kPRUf49r/C71YgoGWBzSc/eJgzfg8XEvc5hFITbecQehq+Ho8g7Eh+XS3WsVjK0oA2CxXiwKD8gzDhaC4t3Kr5kCgwuhs5hlpbo0GF4uWK/j5LoeAgJWJqOD2MkTgiZo36Mu62VJ4fim0NU3wVZmTdFwTME+n4qEANvANrdBuZIkRaTFDsABFfXUUuM8Hc3p+TB3h/X1/DTFoO+Pdekfc3184/KfqhgIgsQhckzjA0lzbD44SzXwIePMOxCXcld4hHqwWDUCaRzvM7n1Jg29QPFJ6EcVkJnRRVfriV0mZLy3rd64rYYsAVhmgExvWhYwXY0+aF/K/fA6j8WWM4kInolYhUFPUeQ96T7J13dFzOdMpyQprsLUXtg7/PKFwZsxmJkvXpCC2l+qHYEOQRailhl7XxKfWDMj6vPD5dZXLXAfdHouB9LwLT6kHJzdLk9pFMxRYKHz+2Mttw0IM4dsqfnSfYxqNDOBRPZ+4pLHeKt0Kme9gUya9CGJiq8HRMIFsxu+jTjFaMCMGCSqGSIb3DQEJFTEWBBSxTxAznF2uoOtMW+fJUoDN6B+rJDAzBgkqhkiG9w0BCRQxJh4kAEEATgBGACAAVQBzAHUAYQByAGkAbwAgAEEAYwB0AGkAdgBvAAQBAAQBAAQBAAQBAASCDIIAMIAGCSqGSIb3DQEHBqCAMIACAQAwgAYJKoZIhvcNAQcBMCcGCiqGSIb3DQEMAQYwGQQUjiun539O59z/MBdiAAdAEWZRxL8CAWSggASCDDBaUYXHmvK0TSCVgVeR9VrQsKpzBnSLV+GNCHgE/JkwI/qcOUjpYkEwhLU2XoBQDArFY8qdI3FYWl1O+pEfKWiAPddek8Y2cJSGMaCrZ3Hobrg467V9G6v7oClpGFGQ2h1QtexFr5inutMS90xJFEXkYx8LVpPjBHJcBxvrQKV1ovakwG00oQcKHp+mXza+lLjRzMDu+tIk07Dfs04Ssc4N16MbyHwNrTi+wA/uCR1ToC9NrEgzndpZ5LEoDuHnWN9Tg3JUFAUC28CYjliyRkUckWdkNHaMM5dUuclw6IlXFfvPhDnIGRdX5NiaQHl3vZw5NrqXAzC8utwgtT4IUR+jQS2MK/BDFeMRLWDZAwfcGqgna3XBJ97YEbRVR0VG4IhBFXaXLXinH5kQy0AIdOJQ3soBLQTuomdIKXSLilPRWMtdmPY7hP6ci37HtNHlAaI1sWRJZZ4tIHld/L1t7F/eDMxcvX7bEh/Bi5bVTPWqYj/k0xobArYoHfDYz/IT58zHQKoRGzZ3V4DajfGfmXXsoeXV+IZeLXv4tPJYLE9Ed3gESPRRpUN0AGQkqZ1DLosuCtQNy20jwWFbttSuvPed9b7dD+v/XW2kedI0FIu1YeSVAzC84jsj9VBBEp5bWHZ6jvLRmKzknnWRnQtJ/wuNP+Uh3DHObOI+NMlt99DJIhi9TLPGeyRIzg7XbUWjFYU6fKRFVlEAm2HPmv9qxv2fejjlRgGB0Y69YbgasUoM4vo6LsyUvoEdLcxjGIElUPzUVuQ4fpqPvqq4+pogOwMOBFzzLKkDtl92BvwOOj3SHuagTZqSgl7NB2TNPIyncmbRrxnKm1iH+Sir9SDY3/NAp1Pp39Vu5inCAdD38DCbfKnMdC/LrTAmKc+41BVd4KtzSaiOd0e2WuxVXC7/TTUmK4ehkClesHMhvIhkl17/nIcPZYAdYFRuFEkOBPgse4DtFd77RvH2dxPYdUlG2zbxNbJoo59ao1S8a55tO54jAqoypGvTi9L9qFiw/YTBVzzWxjM+Kdfn2EaNL52rS0/EDbqUs57uTNK1aAu9ppQa6vRQFhjW38fmFsxMmsz1BeNPUXta+1gNa88LHHdENQ4RiQQPn5U2pHlNzjA038yDPjeAj264SOqR7vc25jp9e16vDIWM0srKpGC2WI9om1bINcVQSF/3UmGv0dCwAiAbsFAoqGHz5EdTuXhBo5rIRgT++lvbJ58sDkDW14aSB+M6JDfBOYHcXrZn1oU3aWNnrKodVmojoAPP2nSnqRRU3eFtH9f/F1cwSy5Qf5CNVhuQxL8sGxuUxO1622Rr9qOwWYHBRn1kUz4XqxFnJdoNPxUyzIWx6k4fxMjP8fHOJsb3gTji0r80wGk4tGyZyF0J4HQeXf7+nxR38jiq5EEUjVvHNlLQY4oNvQfblM343qRbxA1k297CKntu/+oWB01a4fVqLVIUPHGP/qOURa7DasCwND7NvKvG5uH2DQLMvx/MdedqStyJe+a31we9zxwZ7hkFwLtXqzi+nzs4F8leVoILGr6WygsmnlaDMjgVdlP/qm6/p/c2uya+5Rk4yHyEbPtxIg1e4trkmbjbG0AMsT5T2+trcnfGj8pM9p2u//fWPZgN08HgDtsQB8LuCxuZ5AWYM85Nnhtj6AYp6K09tf79HLoYEhQFVrzI0Mt2SPQladVzvyvcNyeetDeKBKGsHL54tW1Y+hWRn72hmqnKzPoF3Mj7Xp1zYfWYbSOdlnO6FV/Khz3YM9XaKIBr4XWBX8OWjL5hQa04LrPxeHO9Cl6jhM6EJ6gSF5QFEGN30lCXoz28McNiBsbxgvdq5sXQZWxuu7vdDfHvA4T63su1ckS1GjeT1IXGEvPuVneo76xeBBoWepOZcaU+6RWX7LhDvKL7JglcubcHcdFFQIcuZIeLwUN0vkVaDHoOx9mdVQKHJjcL1HPRXscTgDpJD080AGTJypxoA1QHX0DGQwAMJSMHWDX5Rds6Lsmhj+vVLzSG7DKe61KN0FOz6w031IZfL+jDSP+SZFk58cG1xPO/vuYvLD0kBy6VB66UiAkqhPbKJAH09ZDXORqesNt+w0lGNfB8jEwhhftsZAGH+nIyNe7Qr2e/+ZT70oX75wJ/IEafQiZG793d+b2B/PD6JBiY2H9mzR7lfowuVSvwqIOrpGfj7WuyX85U99OOLS0pHAkCGyPTf7ibCJGCXhCDSLp8deOE9vdogQGONvo14ct872seqaU2baQ0Z2QqDiAO4M4/Gt2AcGvjcQN05nl8Gvunw7I5NFTKeXg8PE4CuCKdD5OhvRaL6MnPIfomZ1CkchfE3zrDiczl8+tmiqd1INcDahx/Xs+net2qEe2m8Kq6xZszG3od0SsCAcytft4jzYDmySL4ZnP9r17/A1SmNXOx0CHMf2RgZ/oGvf5MPXQgL6eNevV5uZJssekLK0w6Z+O3VCMnPK14rN0u4nYhKg8l0wkoBUJnvMY5gzTARt/222tRwOVSKe2D5XHzUZfcxj2nzwt2WrcHVKYVtg1w/5N5QdLdcdwWRzdEFm4FrnqdZSMd5RX88TZqtIDNnnqBmMGQqUdSk7LoSAtbRlYANMZ9RDegobnEeiH82XNUMFkYknuWDVKrYMsFWh5IknVMmdImKVFmMg1RH2O+uNCIYNPhcZTBxx01b9mk0tfFoxN2x/laGD3Eh6/fTV4edAETz1EXLjtLMiHq2l1xQY8Qs0P2b2OfjTlWEzIxzpWNL38eapEhpwykB+lE3GioOJx77bGbe5403iVzVX9jynxzY1S3H/scXhgCvRZx2AhU1VyYgk4em+rDYyX64MAjL2059HLua+YvfvL+Qkx/17Uu2bGE4v0IMDpsX4pjRJB/+n7ZKBxcUWKQL7b3y+zrWxgPu6SiHDj8we+XqHxGIH/QP1hzX44CVDJ3+JFwTsunhX/nbDZ4jyyWxEZX3frMIYG1rqcb3Xy7SbvxsBmfNC3Ow05vmgQRQ1abBqFPKY2OeJEHkeAqLFUqOlulElA7Ugw7djVjZAdE1xGzY5D/DBOggvM04LvdvG1x5aPeZNscum93TOOoipMYYI3QyacedxUjMKWVd67yyUIOagbDT+NyTXKjbP9KUgw6eGz40Np4RKXGEam8oX9zYHXkM6SVNVcCTt1gzpAfh9OQYR1t3pRSZqUYKNKqKXMEjmKbMp6U6qHEz9XkfnuisClCQgIaCHJwCL2ZY7qc2mxdPaeGJf3ljH93dJOGbQp4k67RYJe3ZMASNTBsJ/PnHTIh0ppHDWzub5W7SqdL98tKXbUUdjGZpaFAX8Rk9CNCurenrvlGJxIHlFOLlSSga76gie8ZpUAUt7LIXL58XXKpmMvd4Qo+MJa0ADwn86F3f8LOOER94SstrQFB/Fq4iTCS04U7V9US6Qd8Csd5GEI2R+xlOrvwrCZIRyghYNvaiqa90dnD3d4pkafMngZ6GNCSgxb0fbggvziKkqvN3zwxyof3b9FgZ4yd/yhqmoxY7vL9duBzvYVen/J2MwhcwKvhTkwD2+THxEs7w2ktruhbuexE1E4XdhZHVLP9eVqVhl/q7boO8Xf5PgnET3tAABTmhmws613iadzpsxJyhxWVL2PUOtQcU6PXCLN8TlTYNHkJvZz8Hww5NBELTv/KDdoS/tRJ8yCVfNX1RG6qF4vgJA8UGI9X2QjoxxoZXc4ai+w+7l9mxuQZsNPgxb1+Dox3pe+yAm2vIwS6XcnHpbTuIXYH3t/9qLnD+XSqxEyn0NzuE1wbcHMpN+c9fGMqSJm5eqSufD5o2rTWPYqXojg9Q4jbyZR3rdjPrPohp3FXVZcTDSO7A84dIeoHqhn1ktFQ6jbPwcg6AGXFiwsdUQsXQhv/DbCxtd2zzB3uH4TkVHsR40i9U5l1ZQCIMxcEn02rKfPZUSALZFI4hJyToiK1X/BuJzgYs+zGe8ExUjvMRgkpKMi5x+pfFCdSby1aWTL1QQjnp/fEoBQxMCcBE6IbUZDkYBuLt4hqBW4QLl+J9AXC+kxXv+1UcIkR55zjsDq7oHreei5Z7/UzO7ZvqCidpuyzlhIPoA/ZWFzLwx+42VGH18F+YkZ1xaw7N1YvDX9OHYRzYDvBodnOha1vpEajaKbQ0HeaWuNGMkpMn9X1VI8TRv6qdYiv1UAABAEABAEABAEABAEABAEABAEABAEABAEABAEABAEABAEAAAAAAAAAMDwwITAJBgUrDgMCGgUABBREYImUbJEClYjvILAmEgiwTKezwAQUlbsn/2bN51H/kfti/auB7FAAVd4CAWQAAA==</completeCriptoSignPkcs12> <completeCriptoSignPkcs12Alias>anf usuario activo</completeCriptoSignPkcs12Alias> <completeCriptoSignPkcs12Password>12341234</completeCriptoSignPkcs12Password> </ns2:signTask>","title":"Ejemplo"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/","text":"< Manual Portafirmas Android Versi\u00f3n 1.8.0 El primer paso para el acceso al Portafirmas Android es la descarga de la aplicaci\u00f3n desde la Play Store. Para encontrarla podemos buscar por \u201cPort@firmas movil\u201d. < A continuaci\u00f3n, pulsaremos sobre el bot\u00f3n \u201cINSTALAR\u201d. Portafirmas Android El portafirmas de Asuntos Econ\u00f3micos y Transformaci\u00f3n Digital es una plataforma web para la gesti\u00f3n del flujo de peticiones de firma que permite a sus usuarios revisar dichas peticiones, firmarlas, darles el visto bueno o rechazarlas. El ministerio dispone de dos despliegues de su portafirmas, pero tambi\u00e9n lo distribuye para que otros organismos puedan implantarlo. La aplicaci\u00f3n m\u00f3vil del portafirmas permite el acceso a cualquier instancia del portafirmas del ministerio, o a cualquier instancia del mismo desplegada por otros organismos. La aplicaci\u00f3n m\u00f3vil permite a sus usuarios acceder y realizar las operaciones b\u00e1sicas sobre las peticiones de firma de dicho usuario. Un usuario s\u00f3lo podr\u00e1 acceder a una instancia del portafirmas si previamente se le ha creado una cuenta para el mismo. Cualquier persona que pueda acceder al portafirmas a trav\u00e9s de la web podr\u00e1 acceder al mismo portafirmas desde la aplicaci\u00f3n m\u00f3vil. El portafirmas m\u00f3vil utiliza certificados electr\u00f3nicos reconocidos tanto para el acceso a la cuenta del usuario como para la firma de sus peticiones. Estos pueden ser: Certificados locales instalados en el dispositivo. Certificados en la nube de Cl@ve Permanente. Por defecto, los accesos se realizar\u00e1n mediante certificados instalados en el dispositivo, pero un usuario puede activar el uso de los certificados remotos mediante la opci\u00f3n de men\u00fa \u201cUsar certificados remotos\u201d de la pantalla principal de la aplicaci\u00f3n m\u00f3vil. Su certificado, local o remoto, permite al portafirmas identificarle y con ello identificar su cuenta del portafirmas seleccionado. Esto quiere decir que no es necesario dar de alta este certificado en el servicio portafirmas y que, si tiene cuenta en m\u00e1s de un portafirmas, podr\u00e1 acceder a todos ellos con el mismo certificado. Primera ejecuci\u00f3n < Al ejecutar la aplicaci\u00f3n por primera vez se le mostrar\u00e1 al usuario la ventana de presentaci\u00f3n y el asistente de configuraci\u00f3n del Portafirmas m\u00f3vil. Este asistente le facilitar\u00e1 configurar algunas de las opciones de la aplicaci\u00f3n: Selecci\u00f3n de portafirmas : El Portafirmas m\u00f3vil le permite acceder a m\u00faltiples portafirmas y ya viene configurado con la ruta de acceso a dos de ellos. Desde la primera ventana del asistente el usuario podr\u00e1 seleccionar cu\u00e1l de estos portafirmas debe establecerse como el por defecto o indicar que se va a utilizar otro Portafirmas distinto. El usuario podr\u00e1 posteriormente cambiar entre los portafirmas configurados y agregar otros nuevos mediante la opci\u00f3n \u201cServidores Portafirmas\u201d del men\u00fa de la pantalla principal de la aplicaci\u00f3n. Para saber m\u00e1s, consulte el apartado \u201c 4.1 Selecci\u00f3n del servidor de Portafirmas \u201d. < Selecci\u00f3n de origen del certificado: El Portafirmas m\u00f3vil permite el uso tanto de certificados locales como de certificados remotos para para las operaciones de autenticaci\u00f3n y firma. Esta pantalla del asistente le permitir\u00e1 configurar si desea usar por defecto un certificado local, un certificado remoto o su DNIe. Para el uso de un certificado local deber\u00e1 haber importado el certificado tal como se describe en el \u201c ANEXO 1 Importar certificado de usuario \u201d. Para el uso de un certificado remoto, deber\u00e1 haberse registrado en Cl@ve mediante certificado electr\u00f3nico o de forma presencial ( https://clave.gob.es/clave_Home/registro/Como-puedo-registrarme.html ) y, posteriormente, activar su usuario de Cl@ve Permanente ( https://clave.gob.es/clave_Home/ Clave-Permanente/Procedimientos.html ). Para usar DNIe, su dispositivo deber\u00e1 contar con conexi\u00f3n NFC y usted disponer de un DNIe 3.0 o 4.0 con los certificados vigentes. Acceder al Portafirmas El Portafirmas m\u00f3vil permite conectar con m\u00faltiples Portafirmas compatibles y autenticarse y firmar tanto con certificados locales como certificados remotos. Al utilizar un certificado local, se usar\u00e1 este para la autenticaci\u00f3n del usuario y la firma de las peticiones. En el caso de usar certificados remotos, se utilizar\u00e1 Cl@ve para la autenticaci\u00f3n (con su certificado de Cl@ve Permanente) y FIRe para la firma (con su certificado de Cl@ve Firma). Selecci\u00f3n del servidor de Portafirmas El portafirmas m\u00f3vil permite tener configuradas m\u00faltiples instancias de Portafirmas. Si no se seleccion\u00f3 mediante el asistente a qu\u00e9 Portafirmas se desea acceder, se deber\u00e1 hacer en este momento. La aplicaci\u00f3n tiene configurados por defecto los dos siguientes servidores Portafirmas: Portafirmas General AGE Portafirmas RedSARA Un usuario puede acceder a cualquiera de estos portafirmas, dar de alta otros, editarlos o eliminarlos. El listado de servidores Portafirmas configurados puede verse desde la pantalla inicial de la aplicaci\u00f3n al pulsar el bot\u00f3n de men\u00fa y la opci\u00f3n \u201cServidores Portafirmas\u201d. Desde este di\u00e1logo se puede seleccionar un servidor, agregar uno nuevo, editarlos y eliminarlos. < Selecci\u00f3n del servidor Para seleccionar a qu\u00e9 servidor Portafirmas deseamos acceder basta con pulsar sobre el servidor deseado. Seguidamente, pulsaremos sobre el bot\u00f3n \u201cAceptar\u201d. Agregar nuevo servidor Para agregar un servidor distinto a los que vienen por defecto, pulsaremos en el bot\u00f3n \u201cNuevo servidor\u201d del listado de servidores. En el nuevo di\u00e1logo que aparecer\u00e1 se introducir\u00e1 el alias o nombre con el que queremos referirnos al servidor y la URL del mismo. A continuaci\u00f3n, pulsaremos el bot\u00f3n \u201cAceptar\u201d. < La URL de un servidor Portafirmas deber\u00e1 proporcionarla el organismo responsable del mismo. Modificar un servidor existente Para editar un servidor que ya tenemos dado de alta en la lista de servidores, debemos mantener pulsado el elemento correspondiente hasta que se abra el dialogo de edici\u00f3n. En este di\u00e1logo podemos modificar el nombre y la URL del servidor. Para aplicar los cambios, pulsaremos sobre el bot\u00f3n \u201cAceptar\u201d. < Eliminar un servidor Para eliminar un servidor portafirmas deberemos mantener pulsado el elemento de la lista de servidores hasta que aparezca el di\u00e1logo de edici\u00f3n. A continuaci\u00f3n, pulsaremos el bot\u00f3n \u201cEliminar\u201d. Si el usuario elimina todos los servidores de la lista, autom\u00e1ticamente se volver\u00e1n a agregar los servidores por defecto. Acceso con certificado local Para acceder al portafirmas seleccionado con certificado local, deberemos disponer previamente de un certificado instalado en el dispositivo tal como se indica en el apartado ANEXO 1 Importar certificado de usuario y haber seleccionado el servidor portafirmas deseado. Para el uso del certificado local, comprobaremos que la opci\u00f3n \u201cUsar certificados remotos\u201d del men\u00fa de la pantalla principal se encuentra desactivado. A continuaci\u00f3n, pulsaremos el bot\u00f3n \u201cAcceder\u201d. El sistema operativo abrir\u00e1 un di\u00e1logo con los certificados instalados en el sistema en el que deberemos seleccionar aquel que se deseemos utilizar. Despu\u00e9s deberemos pulsar el bot\u00f3n \u201cPermitir\u201d. < Advertencia: El certificado seleccionado es el que se utilizar\u00e1 tanto para la autenticaci\u00f3n del usuario (mediante un proceso de validaci\u00f3n realizado por el propio Portafirmas web), como para la firma de las peticiones. Por este motivo, se recomienda que se utilice siempre un certificado de firma (no repudio) para acceder a la aplicaci\u00f3n. Un usuario s\u00f3lo podr\u00e1 acceder a un servicio de portafirmas si dispone de una cuenta en el mismo . De no ser as\u00ed, se producir\u00e1 un error de conexi\u00f3n. La aplicaci\u00f3n m\u00f3vil establece una sesi\u00f3n con el Portafirmas web para permitir ver y firmar las peticiones del usuario. Si el establecimiento de sesi\u00f3n es correcto, el usuario ser\u00e1 redirigido a la pantalla de peticiones pendientes de firmar. Acceso con certificado remoto (Cl@ve Permanente) Para acceder al portafirmas seleccionado con certificado remoto, deberemos habernos dado previamente de alta en Cl@ve y activar Cl@ve Permanente. Puede obtener m\u00e1s informaci\u00f3n sobre los procedimientos necesarios en: https://clave.gob.es/clave_Home/clave.html Para configurar el Portafirmas m\u00f3vil para el uso del certificado remoto, marcaremos la opci\u00f3n \u201cUsar certificados remotos\u201d del men\u00fa de la pantalla principal de la aplicaci\u00f3n. A continuaci\u00f3n, pulsaremos el bot\u00f3n \u201cAcceder\u201d. La aplicaci\u00f3n m\u00f3vil acceder\u00e1 a su cuenta de portafirmas con certificado remoto por medio de Cl@ve Permanente que necesita que el usuario introduzca su DNI y los datos de autenticaci\u00f3n. La aplicaci\u00f3n mostrar\u00e1 para esto la p\u00e1gina web de Cl@ve Permanente en donde el usuario podr\u00e1 insertar su DNI, la contrase\u00f1a de Cl@ve y, si procede, el c\u00f3digo enviado a su tel\u00e9fono por SMS. < < Advertencia: No todos los servicios de portafirmas permiten el uso de certificado remoto. Consulte con el proveedor de su portafirmas si tiene dudas acerca de la disponibilidad de esta opci\u00f3n. Acceso con DNIe Para acceder con su DNIe deber\u00e1 disponer de un DNIe 3.0 o 4.0 con los certificados vigentes y su dispositivo m\u00f3vil deber\u00e1 contar con conexi\u00f3n NFC. En caso de que en el momento de iniciar la conexi\u00f3n con la tarjeta el NFC del dispositivo se encuentre apagado, se redirigir\u00e1 al usuario a la pantalla de gesti\u00f3n de conexiones de Android y se le pedir\u00e1 que lo active. Para poder conectar con su DNIe v\u00eda NFC, ser\u00e1 necesario que primero inserte el n\u00famero CAN de su tarjeta. Puede encontrar este n\u00famero de seis d\u00edgitos en la zona inferior derecha del frontal de su tarjeta. < < Una vez insertado el n\u00famero CAN deber\u00e1 acercar su DNIe al reverso de su dispositivo m\u00f3vil. Cuando Android detecte la tarjeta emitir\u00e1 un pitido y/o una vibraci\u00f3n, momento en el que se iniciar\u00e1 la conexi\u00f3n. Una vez establecida la conexi\u00f3n, se pedir\u00e1 al usuario que inserte el PIN del DNIe para poder acceder a sus certificados. < En caso de insertar incorrectamente el PIN se abortar\u00e1 la operaci\u00f3n de acceso o firma. El di\u00e1logo de inserci\u00f3n de PIN muestra cuantos intentos de inserci\u00f3n de PIN tiene disponible la tarjeta. Si ese n\u00famero llega a cero por haber introducido incorrectamente el PIN varias veces seguidas, su DNIe quedar\u00e1 bloqueado y deber\u00eda acudir a una comisar\u00eda de expedici\u00f3n de DNIe para desbloquearlo a trav\u00e9s de los kioscos habilitados. La aplicaci\u00f3n recordar\u00e1 el CAN y el PIN del DNIe para poder firmar las peticiones sin volverlos a solicitar mientras dure la sesi\u00f3n del usuario y no se interrumpa la conexi\u00f3n. Si en alg\u00fan momento se interrumpe la conexi\u00f3n entre el DNIe y la aplicaci\u00f3n, se le volver\u00e1 a pedir al usuario que vuelva a acercar el DNIe al dispositivo (para lo cual es posible que primero deba separarlo si no lo estaba para que el sistema operativo vuelva a detectar la tarjeta) y se le volver\u00e1 a pedir el PIN. Selecci\u00f3n de rol En caso de que el usuario tenga permitido el acceso con distintos roles, tras acceder a la aplicaci\u00f3n, se mostrar\u00e1 un listado con las distintas opciones disponibles. < El usuario podr\u00e1 seleccionar el rol con el que desea acceder a la aplicaci\u00f3n. Una vez dentro, podr\u00e1 cambiar de rol pulsando en la opci\u00f3n \u201cCambiar rol\u201d del men\u00fa. Bandejas de peticiones Al entrar en el portafirmas, se accede a la pantalla que muestra la bandeja de peticiones que el usuario tiene pendientes de procesar. Las peticiones que puede ver y las acciones que puede realizar sobre ellas depender\u00e1 de si accedi\u00f3 como usuario firmante o como validador de otro usuario. Posteriormente el usuario podr\u00e1 cambiar de rol desde la opci\u00f3n correspondiente del men\u00fa. Acceso como usuario firmante Se accede como usuario firmante cuando no se es validador de ning\u00fan otro usuario o cuando se selecciona expresamente en la pantalla de selecci\u00f3n de rol. Los usuarios firmantes ver\u00e1n por defecto el listado de peticiones que tiene pendiente de firmar o aprobar. Si hubiese peticiones pr\u00f3ximas a caducar, se mostrar\u00edan al principio del listado: < < En este listado se muestran al usuario las peticiones pendientes recibidas, qui\u00e9n la env\u00edo, el asunto del que trata, la criticidad y si la petici\u00f3n debe firmarse (< ) o aprobarse (< ). Se puede actualizar el listado arrastrando la lista hacia abajo cuando ya nos encontramos en la parte superior o mediante la opci\u00f3n de actualizar del men\u00fa. Para ver el detalle de una petici\u00f3n se puede pulsar sobre la misma. Debe tenerse en cuenta que, si el usuario tiene validadores asignados, por defecto s\u00f3lo se le mostrar\u00e1n las peticiones que estos hayan validado previamente. Para ver todas las peticiones dirigidas a \u00e9l, el usuario debe acceder al apartado de filtros mediante la opci\u00f3n \u201cFiltrar\u201d del men\u00fa de la pantalla, activarlos y seleccionar el tipo de petici\u00f3n \u201cTodos los tipos\u201d. Para firmar o aprobar peticiones desde este listado, un usuario puede activar la casilla que se muestra a la derecha de cada petici\u00f3n y pulsar el bot\u00f3n \u201cFirmar/V\u00baB\u00ba\u201d. Cuando se pulse el bot\u00f3n, se mostrar\u00e1 al usuario un resumen con el n\u00famero de peticiones que se van a procesar: < Tambi\u00e9n puede rechazarlas mediante el bot\u00f3n \u201cRechazar\u201d. Cuando se rechacen peticiones se permitir\u00e1 al usuario indicar el motivo por el que se rechazan. Indicar este dato es opcional. < Es posible seleccionar todas las peticiones de la pantalla mediante la opci\u00f3n \u201cSeleccionar todas\u201d del men\u00fa para as\u00ed procesarlas simult\u00e1neamente. Al procesar una petici\u00f3n, si el proceso se realiza correctamente, la petici\u00f3n pasa a la bandeja de \u201cFirmadas\u201d. Al rechazar peticiones, estas pasan a la bandeja de \u201cRechazadas\u201d. Pueden visualizarse estas bandejas de peticiones las opciones de men\u00fa \u201cVer solicitudes firmadas\u201d y \u201cVer solicitudes rechazadas\u201d, respectivamente. Firma de peticiones con certificado local La firma de peticiones con certificado local se realiza con el mismo certificado que se haya seleccionado para el acceso al Portafirmas. El uso de este certificado es transparente para el usuario. Firma de peticiones con certificado remoto La firma de peticiones con certificado remoto se realiza con el certificado de firma de Cl@ve Firma del usuario. Para hacer uso de este certificado se redirige al usuario a la p\u00e1gina de FIRe desde el que puede seleccionarlo. Seguidamente deber\u00e1 introducir su contrase\u00f1a de Cl@ve y el c\u00f3digo recibido por SMS a su n\u00famero de m\u00f3vil asociado. < < Firma de peticiones con DNIe La firma de peticiones con DNIe se realiza con el certificado de firma del DNIe. Si no se ha interrumpido la conexi\u00f3n con el DNIe desde el acceso o \u00faltima firma, la firma de las peticiones se realizar\u00e1 de forma transparente al usuario. Si se interrumpi\u00f3, se pedir\u00e1 al usuario que vuelva a acercar el DNIe al dispositivo y que inserte su PIN. Acceso como usuario validador Cuando un usuario accede como usuario validador no ve las peticiones que se le env\u00edan a \u00e9l, sino las peticiones enviadas al usuario del cual es validador. Su funci\u00f3n es la de revisar estas peticiones y validarlas para que as\u00ed aparezca en la bandeja de peticiones pendientes de la persona responsable de darles visto bueno o firmarlas. < El usuario validador ve por defecto \u00fanicamente las peticiones que est\u00e1n pendientes de validar. Si fuese necesario ver tambi\u00e9n las peticiones ya validadas, puede cambiarlo mediante el filtro \u201cTipo de petici\u00f3n\u201d, accesible mediante la opci\u00f3n \u201cFiltrar\u201d del men\u00fa del listado de peticiones pendientes. Se puede actualizar el listado arrastrando la lista hacia abajo cuando ya nos encontramos en la parte superior o mediante la opci\u00f3n de actualizar del men\u00fa. Filtrado de peticiones Desde cualquiera de las bandejas de peticiones podemos activar los filtros para que se muestren solamente aquellas peticiones que cumplan las condiciones establecidas en esos campos. Esto puede hacerse a trav\u00e9s de la opci\u00f3n \u201cFiltrar\u201d del men\u00fa contextual de los listados. Este di\u00e1logo tambi\u00e9n permite seleccionar el criterio de ordenaci\u00f3n del listado. < Detalle de petici\u00f3n Pulsando directamente en una petici\u00f3n accederemos a una pantalla para ver su informaci\u00f3n. Entre ella veremos el asunto, referencia, la fecha de env\u00edo, la fecha de caducidad (si aplica), la aplicaci\u00f3n desde la que se env\u00eda, el motivo de rechazo (si aplica), los remitentes y el mensaje asociado. < Desde esta pantalla tambi\u00e9n se puede firmar, dar visto bueno, rechazar o validar una petici\u00f3n pendiente a trav\u00e9s que los botones que aparecen en la parte superior de la pantalla. Estos procesos son an\u00e1logos a los realizados desde el listado de peticiones pendientes, pero afectar\u00e1n \u00fanicamente a esta petici\u00f3n y a sus documentos. La pesta\u00f1a \u201cL\u00edneas de firma\u201d muestra el flujo de vistos buenos y firmas que seguir\u00e1 la petici\u00f3n, quienes deber\u00e1n procesarla y la operaci\u00f3n en cuesti\u00f3n a realizar (Firma o Visto Bueno). Cuando se indica que la firma de una petici\u00f3n es \u201cen cascada\u201d, se indica que deber\u00e1 procesarla uno de los individuos de una l\u00ednea de firma antes que la petici\u00f3n llegue a los de la siguiente l\u00ednea. Cuando la petici\u00f3n sea \u201cen paralelo\u201d los individuos de las distintas l\u00edneas de firma podr\u00e1n procesarla en paralelo. < La pesta\u00f1a \u201cDocumentos\u201d contiene los documentos que se van a firmar y, si existen (y la versi\u00f3n del Portafirmas web al que se conecta lo soporta), los documentos anexos a la petici\u00f3n, los cuales no se firman nunca, pero pueden ayudar al usuario a determinar si debe firmar los documentos. Estos documentos se podr\u00e1n abrir o visualizar siempre que el dispositivo disponga de una aplicaci\u00f3n asociada al tipo de documento. Cuando se visualice el detalle de una petici\u00f3n firmada se podr\u00e1 tambi\u00e9n descargar las firmas generadas y visualizar los documentos con el detalle de las firmas (informes de firma). < Gesti\u00f3n de autorizaciones y validadores La aplicaci\u00f3n m\u00f3vil permite gestionar las autorizaciones y los validadores del usuario cuando se accede a una versi\u00f3n del Portafirmas que soporte esta funcionalidad. De ser el caso, podremos hacerlo a trav\u00e9s de la opci\u00f3n \u201cConfiguraci\u00f3n\u201d del men\u00fa del listado de peticiones. Esta opci\u00f3n s\u00f3lo est\u00e1 disponible cuando se accede como usuario firmante. Gesti\u00f3n de autorizaciones El listado de autorizaciones muestra todas aquellas autorizaciones que hemos concedido o que nos han concedido a nosotros, independientemente del estado en el que se encuentren. De cada autorizaci\u00f3n del listado podemos ver: Mediante el primer icono, si la autorizaci\u00f3n se ha enviado (< ) o recibido (< ). Mediante el segundo icono, el estado de la petici\u00f3n: activa (< ), revocada (< ) o pendiente de aprobar (< ). El emisor o receptor de la autorizaci\u00f3n, seg\u00fan si la hemos recibido o enviado, respectivamente. La fecha de revocaci\u00f3n de la autorizaci\u00f3n si ya no est\u00e1 activa o si est\u00e1 activa, pero tiene fecha de caducidad. < Al pulsar sobre una de las autorizaciones podremos ver el detalle de la misma: quien la env\u00eda o recibe, el estado, fecha de inicio y fin y descripci\u00f3n. En caso de tratarse de una autorizaci\u00f3n pendiente o activa, tambi\u00e9n aparecer\u00e1n los botones que nos permitir\u00e1n realizar las distintas opciones disponibles sobre ella: Cancelar aquellas peticiones activas o las peticiones pendientes que hayamos enviado nosotros. Aceptar o revocar las peticiones pendientes que nos hayan enviado. < < Se puede dar de alta una nueva autorizaci\u00f3n pulsando el bot\u00f3n \u201cA\u00f1adir nuevo\u201d cuando se est\u00e9 mostrando el listado de autorizaciones. A continuaci\u00f3n, se nos mostrar\u00e1 un buscador desde el que podremos buscar y seleccionar al usuario al que queremos autorizar. La b\u00fasqueda puede realizarse mediante nombre o DNI. < Una vez seleccionado el usuario, podremos configurar los datos relativos a la autorizaci\u00f3n: Fecha y hora de inicio. Si no se indican, se utilizar\u00e1 la fecha y hora actuales. Fecha y hora de caducidad. Si no se indican, la autorizaci\u00f3n no caducar\u00e1. Tipo de autorizaci\u00f3n: delegado o sustituto. Observaciones opcionales. < La autorizaci\u00f3n se crea al pulsar en el bot\u00f3n \u201cCrear autorizaci\u00f3n\u201d, pero no estar\u00e1 activa hasta que el usuario al que se ha enviado la acepte. Gesti\u00f3n de validadores El listado de validadores muestra los usuarios encargados de validar las peticiones que recibimos antes de que se nos muestren en nuestra bandeja de peticiones pendientes. El Portafirmas m\u00f3vil no distingue entre validadores generales o aquellos que s\u00f3lo gestionan aplicaciones concretas. < Se puede dar de alta a un nuevo validador pulsando el bot\u00f3n \u201cA\u00f1adir nuevo\u201d cuando se est\u00e9 mostrando el listado de validadores. A continuaci\u00f3n, se nos mostrar\u00e1 un buscador desde el que podremos buscar y seleccionar al usuario al que queremos nombrar validador. La b\u00fasqueda puede realizarse mediante nombre o DNI. Al pulsar sobre el usuario en cuesti\u00f3n, se nos pedir\u00e1 confirmaci\u00f3n para darlo de alta como validador. < < Podemos dar de baja a un validador con s\u00f3lo pulsar sobre el mismo en el listado de validadores. Al hacerlo, se nos pedir\u00e1 confirmaci\u00f3n antes de darlo de baja. Gesti\u00f3n del sistema de notificaciones Cuando el servidor Portafirmas al que se conecte lo soporte, en el men\u00fa contextual de los listados de peticiones le aparecer\u00e1 la opci\u00f3n \u201cHabilitar notificaciones\u201d o \u201cDeshabilitar notificaciones\u201d. En caso de habilitar esta opci\u00f3n, el usuario actual recibir\u00e1 notificaciones en su dispositivo cada vez que reciba una nueva petici\u00f3n en el Portafirmas al que est\u00e9 conectado. < Al pulsar sobre una de las notificaciones el usuario podr\u00e1 acceder al portafirmas web en cuesti\u00f3n. En caso de deshabilitarlas, se cancelar\u00e1 la subscripci\u00f3n al sistema de notificaciones. Importar certificado de usuario Para importar el certificado de usuario es necesario primero guardar el archivo del certificado en el sistema de ficheros. Este archivo debe contener la clave privada ya que se usar\u00e1 para firmar. En general la extensi\u00f3n de este fichero ser\u00e1 .pfx o .p12. El archivo se puede copiar desde el ordenador conectando el dispositivo o se puede enviar como adjunto en un correo. Con el archivo ya en el sistema de ficheros, pulsar en \u201cImportar Certificado\u201d. Se abrir\u00e1 una nueva pantalla que permite recorrer las carpetas del sistema y localizar el archivo anterior. La pantalla del di\u00e1logo de selecci\u00f3n de fichero puede variar seg\u00fan la versi\u00f3n de Android. < Seleccionamos el archivo, introducimos la clave que permite su uso y le asignamos un nombre que es el que se visualizar\u00e1 cuando queramos conectarnos al portafirmas: < < Al aceptar, el certificado se importa en el almac\u00e9n del dispositivo y ya est\u00e1 listo para ser usado. < Esta obra est\u00e1 bajo una licencia.","title":"PF Manual App Portafirmas Android"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#portafirmas-android","text":"El portafirmas de Asuntos Econ\u00f3micos y Transformaci\u00f3n Digital es una plataforma web para la gesti\u00f3n del flujo de peticiones de firma que permite a sus usuarios revisar dichas peticiones, firmarlas, darles el visto bueno o rechazarlas. El ministerio dispone de dos despliegues de su portafirmas, pero tambi\u00e9n lo distribuye para que otros organismos puedan implantarlo. La aplicaci\u00f3n m\u00f3vil del portafirmas permite el acceso a cualquier instancia del portafirmas del ministerio, o a cualquier instancia del mismo desplegada por otros organismos. La aplicaci\u00f3n m\u00f3vil permite a sus usuarios acceder y realizar las operaciones b\u00e1sicas sobre las peticiones de firma de dicho usuario. Un usuario s\u00f3lo podr\u00e1 acceder a una instancia del portafirmas si previamente se le ha creado una cuenta para el mismo. Cualquier persona que pueda acceder al portafirmas a trav\u00e9s de la web podr\u00e1 acceder al mismo portafirmas desde la aplicaci\u00f3n m\u00f3vil. El portafirmas m\u00f3vil utiliza certificados electr\u00f3nicos reconocidos tanto para el acceso a la cuenta del usuario como para la firma de sus peticiones. Estos pueden ser: Certificados locales instalados en el dispositivo. Certificados en la nube de Cl@ve Permanente. Por defecto, los accesos se realizar\u00e1n mediante certificados instalados en el dispositivo, pero un usuario puede activar el uso de los certificados remotos mediante la opci\u00f3n de men\u00fa \u201cUsar certificados remotos\u201d de la pantalla principal de la aplicaci\u00f3n m\u00f3vil. Su certificado, local o remoto, permite al portafirmas identificarle y con ello identificar su cuenta del portafirmas seleccionado. Esto quiere decir que no es necesario dar de alta este certificado en el servicio portafirmas y que, si tiene cuenta en m\u00e1s de un portafirmas, podr\u00e1 acceder a todos ellos con el mismo certificado.","title":"Portafirmas Android"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#primera-ejecucion","text":"< Al ejecutar la aplicaci\u00f3n por primera vez se le mostrar\u00e1 al usuario la ventana de presentaci\u00f3n y el asistente de configuraci\u00f3n del Portafirmas m\u00f3vil. Este asistente le facilitar\u00e1 configurar algunas de las opciones de la aplicaci\u00f3n: Selecci\u00f3n de portafirmas : El Portafirmas m\u00f3vil le permite acceder a m\u00faltiples portafirmas y ya viene configurado con la ruta de acceso a dos de ellos. Desde la primera ventana del asistente el usuario podr\u00e1 seleccionar cu\u00e1l de estos portafirmas debe establecerse como el por defecto o indicar que se va a utilizar otro Portafirmas distinto. El usuario podr\u00e1 posteriormente cambiar entre los portafirmas configurados y agregar otros nuevos mediante la opci\u00f3n \u201cServidores Portafirmas\u201d del men\u00fa de la pantalla principal de la aplicaci\u00f3n. Para saber m\u00e1s, consulte el apartado \u201c 4.1 Selecci\u00f3n del servidor de Portafirmas \u201d. < Selecci\u00f3n de origen del certificado: El Portafirmas m\u00f3vil permite el uso tanto de certificados locales como de certificados remotos para para las operaciones de autenticaci\u00f3n y firma. Esta pantalla del asistente le permitir\u00e1 configurar si desea usar por defecto un certificado local, un certificado remoto o su DNIe. Para el uso de un certificado local deber\u00e1 haber importado el certificado tal como se describe en el \u201c ANEXO 1 Importar certificado de usuario \u201d. Para el uso de un certificado remoto, deber\u00e1 haberse registrado en Cl@ve mediante certificado electr\u00f3nico o de forma presencial ( https://clave.gob.es/clave_Home/registro/Como-puedo-registrarme.html ) y, posteriormente, activar su usuario de Cl@ve Permanente ( https://clave.gob.es/clave_Home/ Clave-Permanente/Procedimientos.html ). Para usar DNIe, su dispositivo deber\u00e1 contar con conexi\u00f3n NFC y usted disponer de un DNIe 3.0 o 4.0 con los certificados vigentes.","title":"Primera ejecuci\u00f3n"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#acceder-al-portafirmas","text":"El Portafirmas m\u00f3vil permite conectar con m\u00faltiples Portafirmas compatibles y autenticarse y firmar tanto con certificados locales como certificados remotos. Al utilizar un certificado local, se usar\u00e1 este para la autenticaci\u00f3n del usuario y la firma de las peticiones. En el caso de usar certificados remotos, se utilizar\u00e1 Cl@ve para la autenticaci\u00f3n (con su certificado de Cl@ve Permanente) y FIRe para la firma (con su certificado de Cl@ve Firma).","title":"Acceder al Portafirmas"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#seleccion-del-servidor-de-portafirmas","text":"El portafirmas m\u00f3vil permite tener configuradas m\u00faltiples instancias de Portafirmas. Si no se seleccion\u00f3 mediante el asistente a qu\u00e9 Portafirmas se desea acceder, se deber\u00e1 hacer en este momento. La aplicaci\u00f3n tiene configurados por defecto los dos siguientes servidores Portafirmas: Portafirmas General AGE Portafirmas RedSARA Un usuario puede acceder a cualquiera de estos portafirmas, dar de alta otros, editarlos o eliminarlos. El listado de servidores Portafirmas configurados puede verse desde la pantalla inicial de la aplicaci\u00f3n al pulsar el bot\u00f3n de men\u00fa y la opci\u00f3n \u201cServidores Portafirmas\u201d. Desde este di\u00e1logo se puede seleccionar un servidor, agregar uno nuevo, editarlos y eliminarlos. <","title":"Selecci\u00f3n del servidor de Portafirmas"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#seleccion-del-servidor","text":"Para seleccionar a qu\u00e9 servidor Portafirmas deseamos acceder basta con pulsar sobre el servidor deseado. Seguidamente, pulsaremos sobre el bot\u00f3n \u201cAceptar\u201d.","title":"Selecci\u00f3n del servidor"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#agregar-nuevo-servidor","text":"Para agregar un servidor distinto a los que vienen por defecto, pulsaremos en el bot\u00f3n \u201cNuevo servidor\u201d del listado de servidores. En el nuevo di\u00e1logo que aparecer\u00e1 se introducir\u00e1 el alias o nombre con el que queremos referirnos al servidor y la URL del mismo. A continuaci\u00f3n, pulsaremos el bot\u00f3n \u201cAceptar\u201d. < La URL de un servidor Portafirmas deber\u00e1 proporcionarla el organismo responsable del mismo.","title":"Agregar nuevo servidor"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#modificar-un-servidor-existente","text":"Para editar un servidor que ya tenemos dado de alta en la lista de servidores, debemos mantener pulsado el elemento correspondiente hasta que se abra el dialogo de edici\u00f3n. En este di\u00e1logo podemos modificar el nombre y la URL del servidor. Para aplicar los cambios, pulsaremos sobre el bot\u00f3n \u201cAceptar\u201d. <","title":"Modificar un servidor existente"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#eliminar-un-servidor","text":"Para eliminar un servidor portafirmas deberemos mantener pulsado el elemento de la lista de servidores hasta que aparezca el di\u00e1logo de edici\u00f3n. A continuaci\u00f3n, pulsaremos el bot\u00f3n \u201cEliminar\u201d. Si el usuario elimina todos los servidores de la lista, autom\u00e1ticamente se volver\u00e1n a agregar los servidores por defecto.","title":"Eliminar un servidor"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#acceso-con-certificado-local","text":"Para acceder al portafirmas seleccionado con certificado local, deberemos disponer previamente de un certificado instalado en el dispositivo tal como se indica en el apartado ANEXO 1 Importar certificado de usuario y haber seleccionado el servidor portafirmas deseado. Para el uso del certificado local, comprobaremos que la opci\u00f3n \u201cUsar certificados remotos\u201d del men\u00fa de la pantalla principal se encuentra desactivado. A continuaci\u00f3n, pulsaremos el bot\u00f3n \u201cAcceder\u201d. El sistema operativo abrir\u00e1 un di\u00e1logo con los certificados instalados en el sistema en el que deberemos seleccionar aquel que se deseemos utilizar. Despu\u00e9s deberemos pulsar el bot\u00f3n \u201cPermitir\u201d. < Advertencia: El certificado seleccionado es el que se utilizar\u00e1 tanto para la autenticaci\u00f3n del usuario (mediante un proceso de validaci\u00f3n realizado por el propio Portafirmas web), como para la firma de las peticiones. Por este motivo, se recomienda que se utilice siempre un certificado de firma (no repudio) para acceder a la aplicaci\u00f3n. Un usuario s\u00f3lo podr\u00e1 acceder a un servicio de portafirmas si dispone de una cuenta en el mismo . De no ser as\u00ed, se producir\u00e1 un error de conexi\u00f3n. La aplicaci\u00f3n m\u00f3vil establece una sesi\u00f3n con el Portafirmas web para permitir ver y firmar las peticiones del usuario. Si el establecimiento de sesi\u00f3n es correcto, el usuario ser\u00e1 redirigido a la pantalla de peticiones pendientes de firmar.","title":"Acceso con certificado local"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#acceso-con-certificado-remoto-clve-permanente","text":"Para acceder al portafirmas seleccionado con certificado remoto, deberemos habernos dado previamente de alta en Cl@ve y activar Cl@ve Permanente. Puede obtener m\u00e1s informaci\u00f3n sobre los procedimientos necesarios en: https://clave.gob.es/clave_Home/clave.html Para configurar el Portafirmas m\u00f3vil para el uso del certificado remoto, marcaremos la opci\u00f3n \u201cUsar certificados remotos\u201d del men\u00fa de la pantalla principal de la aplicaci\u00f3n. A continuaci\u00f3n, pulsaremos el bot\u00f3n \u201cAcceder\u201d. La aplicaci\u00f3n m\u00f3vil acceder\u00e1 a su cuenta de portafirmas con certificado remoto por medio de Cl@ve Permanente que necesita que el usuario introduzca su DNI y los datos de autenticaci\u00f3n. La aplicaci\u00f3n mostrar\u00e1 para esto la p\u00e1gina web de Cl@ve Permanente en donde el usuario podr\u00e1 insertar su DNI, la contrase\u00f1a de Cl@ve y, si procede, el c\u00f3digo enviado a su tel\u00e9fono por SMS. < < Advertencia: No todos los servicios de portafirmas permiten el uso de certificado remoto. Consulte con el proveedor de su portafirmas si tiene dudas acerca de la disponibilidad de esta opci\u00f3n.","title":"Acceso con certificado remoto (Cl@ve Permanente)"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#acceso-con-dnie","text":"Para acceder con su DNIe deber\u00e1 disponer de un DNIe 3.0 o 4.0 con los certificados vigentes y su dispositivo m\u00f3vil deber\u00e1 contar con conexi\u00f3n NFC. En caso de que en el momento de iniciar la conexi\u00f3n con la tarjeta el NFC del dispositivo se encuentre apagado, se redirigir\u00e1 al usuario a la pantalla de gesti\u00f3n de conexiones de Android y se le pedir\u00e1 que lo active. Para poder conectar con su DNIe v\u00eda NFC, ser\u00e1 necesario que primero inserte el n\u00famero CAN de su tarjeta. Puede encontrar este n\u00famero de seis d\u00edgitos en la zona inferior derecha del frontal de su tarjeta. < < Una vez insertado el n\u00famero CAN deber\u00e1 acercar su DNIe al reverso de su dispositivo m\u00f3vil. Cuando Android detecte la tarjeta emitir\u00e1 un pitido y/o una vibraci\u00f3n, momento en el que se iniciar\u00e1 la conexi\u00f3n. Una vez establecida la conexi\u00f3n, se pedir\u00e1 al usuario que inserte el PIN del DNIe para poder acceder a sus certificados. < En caso de insertar incorrectamente el PIN se abortar\u00e1 la operaci\u00f3n de acceso o firma. El di\u00e1logo de inserci\u00f3n de PIN muestra cuantos intentos de inserci\u00f3n de PIN tiene disponible la tarjeta. Si ese n\u00famero llega a cero por haber introducido incorrectamente el PIN varias veces seguidas, su DNIe quedar\u00e1 bloqueado y deber\u00eda acudir a una comisar\u00eda de expedici\u00f3n de DNIe para desbloquearlo a trav\u00e9s de los kioscos habilitados. La aplicaci\u00f3n recordar\u00e1 el CAN y el PIN del DNIe para poder firmar las peticiones sin volverlos a solicitar mientras dure la sesi\u00f3n del usuario y no se interrumpa la conexi\u00f3n. Si en alg\u00fan momento se interrumpe la conexi\u00f3n entre el DNIe y la aplicaci\u00f3n, se le volver\u00e1 a pedir al usuario que vuelva a acercar el DNIe al dispositivo (para lo cual es posible que primero deba separarlo si no lo estaba para que el sistema operativo vuelva a detectar la tarjeta) y se le volver\u00e1 a pedir el PIN.","title":"Acceso con DNIe"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#seleccion-de-rol","text":"En caso de que el usuario tenga permitido el acceso con distintos roles, tras acceder a la aplicaci\u00f3n, se mostrar\u00e1 un listado con las distintas opciones disponibles. < El usuario podr\u00e1 seleccionar el rol con el que desea acceder a la aplicaci\u00f3n. Una vez dentro, podr\u00e1 cambiar de rol pulsando en la opci\u00f3n \u201cCambiar rol\u201d del men\u00fa.","title":"Selecci\u00f3n de rol"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#bandejas-de-peticiones","text":"Al entrar en el portafirmas, se accede a la pantalla que muestra la bandeja de peticiones que el usuario tiene pendientes de procesar. Las peticiones que puede ver y las acciones que puede realizar sobre ellas depender\u00e1 de si accedi\u00f3 como usuario firmante o como validador de otro usuario. Posteriormente el usuario podr\u00e1 cambiar de rol desde la opci\u00f3n correspondiente del men\u00fa.","title":"Bandejas de peticiones"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#acceso-como-usuario-firmante","text":"Se accede como usuario firmante cuando no se es validador de ning\u00fan otro usuario o cuando se selecciona expresamente en la pantalla de selecci\u00f3n de rol. Los usuarios firmantes ver\u00e1n por defecto el listado de peticiones que tiene pendiente de firmar o aprobar. Si hubiese peticiones pr\u00f3ximas a caducar, se mostrar\u00edan al principio del listado: < < En este listado se muestran al usuario las peticiones pendientes recibidas, qui\u00e9n la env\u00edo, el asunto del que trata, la criticidad y si la petici\u00f3n debe firmarse (< ) o aprobarse (< ). Se puede actualizar el listado arrastrando la lista hacia abajo cuando ya nos encontramos en la parte superior o mediante la opci\u00f3n de actualizar del men\u00fa. Para ver el detalle de una petici\u00f3n se puede pulsar sobre la misma. Debe tenerse en cuenta que, si el usuario tiene validadores asignados, por defecto s\u00f3lo se le mostrar\u00e1n las peticiones que estos hayan validado previamente. Para ver todas las peticiones dirigidas a \u00e9l, el usuario debe acceder al apartado de filtros mediante la opci\u00f3n \u201cFiltrar\u201d del men\u00fa de la pantalla, activarlos y seleccionar el tipo de petici\u00f3n \u201cTodos los tipos\u201d. Para firmar o aprobar peticiones desde este listado, un usuario puede activar la casilla que se muestra a la derecha de cada petici\u00f3n y pulsar el bot\u00f3n \u201cFirmar/V\u00baB\u00ba\u201d. Cuando se pulse el bot\u00f3n, se mostrar\u00e1 al usuario un resumen con el n\u00famero de peticiones que se van a procesar: < Tambi\u00e9n puede rechazarlas mediante el bot\u00f3n \u201cRechazar\u201d. Cuando se rechacen peticiones se permitir\u00e1 al usuario indicar el motivo por el que se rechazan. Indicar este dato es opcional. < Es posible seleccionar todas las peticiones de la pantalla mediante la opci\u00f3n \u201cSeleccionar todas\u201d del men\u00fa para as\u00ed procesarlas simult\u00e1neamente. Al procesar una petici\u00f3n, si el proceso se realiza correctamente, la petici\u00f3n pasa a la bandeja de \u201cFirmadas\u201d. Al rechazar peticiones, estas pasan a la bandeja de \u201cRechazadas\u201d. Pueden visualizarse estas bandejas de peticiones las opciones de men\u00fa \u201cVer solicitudes firmadas\u201d y \u201cVer solicitudes rechazadas\u201d, respectivamente.","title":"Acceso como usuario firmante"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#firma-de-peticiones-con-certificado-local","text":"La firma de peticiones con certificado local se realiza con el mismo certificado que se haya seleccionado para el acceso al Portafirmas. El uso de este certificado es transparente para el usuario.","title":"Firma de peticiones con certificado local"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#firma-de-peticiones-con-certificado-remoto","text":"La firma de peticiones con certificado remoto se realiza con el certificado de firma de Cl@ve Firma del usuario. Para hacer uso de este certificado se redirige al usuario a la p\u00e1gina de FIRe desde el que puede seleccionarlo. Seguidamente deber\u00e1 introducir su contrase\u00f1a de Cl@ve y el c\u00f3digo recibido por SMS a su n\u00famero de m\u00f3vil asociado. < <","title":"Firma de peticiones con certificado remoto"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#firma-de-peticiones-con-dnie","text":"La firma de peticiones con DNIe se realiza con el certificado de firma del DNIe. Si no se ha interrumpido la conexi\u00f3n con el DNIe desde el acceso o \u00faltima firma, la firma de las peticiones se realizar\u00e1 de forma transparente al usuario. Si se interrumpi\u00f3, se pedir\u00e1 al usuario que vuelva a acercar el DNIe al dispositivo y que inserte su PIN.","title":"Firma de peticiones con DNIe"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#acceso-como-usuario-validador","text":"Cuando un usuario accede como usuario validador no ve las peticiones que se le env\u00edan a \u00e9l, sino las peticiones enviadas al usuario del cual es validador. Su funci\u00f3n es la de revisar estas peticiones y validarlas para que as\u00ed aparezca en la bandeja de peticiones pendientes de la persona responsable de darles visto bueno o firmarlas. < El usuario validador ve por defecto \u00fanicamente las peticiones que est\u00e1n pendientes de validar. Si fuese necesario ver tambi\u00e9n las peticiones ya validadas, puede cambiarlo mediante el filtro \u201cTipo de petici\u00f3n\u201d, accesible mediante la opci\u00f3n \u201cFiltrar\u201d del men\u00fa del listado de peticiones pendientes. Se puede actualizar el listado arrastrando la lista hacia abajo cuando ya nos encontramos en la parte superior o mediante la opci\u00f3n de actualizar del men\u00fa.","title":"Acceso como usuario validador"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#filtrado-de-peticiones","text":"Desde cualquiera de las bandejas de peticiones podemos activar los filtros para que se muestren solamente aquellas peticiones que cumplan las condiciones establecidas en esos campos. Esto puede hacerse a trav\u00e9s de la opci\u00f3n \u201cFiltrar\u201d del men\u00fa contextual de los listados. Este di\u00e1logo tambi\u00e9n permite seleccionar el criterio de ordenaci\u00f3n del listado. <","title":"Filtrado de peticiones"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#detalle-de-peticion","text":"Pulsando directamente en una petici\u00f3n accederemos a una pantalla para ver su informaci\u00f3n. Entre ella veremos el asunto, referencia, la fecha de env\u00edo, la fecha de caducidad (si aplica), la aplicaci\u00f3n desde la que se env\u00eda, el motivo de rechazo (si aplica), los remitentes y el mensaje asociado. < Desde esta pantalla tambi\u00e9n se puede firmar, dar visto bueno, rechazar o validar una petici\u00f3n pendiente a trav\u00e9s que los botones que aparecen en la parte superior de la pantalla. Estos procesos son an\u00e1logos a los realizados desde el listado de peticiones pendientes, pero afectar\u00e1n \u00fanicamente a esta petici\u00f3n y a sus documentos. La pesta\u00f1a \u201cL\u00edneas de firma\u201d muestra el flujo de vistos buenos y firmas que seguir\u00e1 la petici\u00f3n, quienes deber\u00e1n procesarla y la operaci\u00f3n en cuesti\u00f3n a realizar (Firma o Visto Bueno). Cuando se indica que la firma de una petici\u00f3n es \u201cen cascada\u201d, se indica que deber\u00e1 procesarla uno de los individuos de una l\u00ednea de firma antes que la petici\u00f3n llegue a los de la siguiente l\u00ednea. Cuando la petici\u00f3n sea \u201cen paralelo\u201d los individuos de las distintas l\u00edneas de firma podr\u00e1n procesarla en paralelo. < La pesta\u00f1a \u201cDocumentos\u201d contiene los documentos que se van a firmar y, si existen (y la versi\u00f3n del Portafirmas web al que se conecta lo soporta), los documentos anexos a la petici\u00f3n, los cuales no se firman nunca, pero pueden ayudar al usuario a determinar si debe firmar los documentos. Estos documentos se podr\u00e1n abrir o visualizar siempre que el dispositivo disponga de una aplicaci\u00f3n asociada al tipo de documento. Cuando se visualice el detalle de una petici\u00f3n firmada se podr\u00e1 tambi\u00e9n descargar las firmas generadas y visualizar los documentos con el detalle de las firmas (informes de firma). <","title":"Detalle de petici\u00f3n"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#gestion-de-autorizaciones-y-validadores","text":"La aplicaci\u00f3n m\u00f3vil permite gestionar las autorizaciones y los validadores del usuario cuando se accede a una versi\u00f3n del Portafirmas que soporte esta funcionalidad. De ser el caso, podremos hacerlo a trav\u00e9s de la opci\u00f3n \u201cConfiguraci\u00f3n\u201d del men\u00fa del listado de peticiones. Esta opci\u00f3n s\u00f3lo est\u00e1 disponible cuando se accede como usuario firmante.","title":"Gesti\u00f3n de autorizaciones y validadores"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#gestion-de-autorizaciones","text":"El listado de autorizaciones muestra todas aquellas autorizaciones que hemos concedido o que nos han concedido a nosotros, independientemente del estado en el que se encuentren. De cada autorizaci\u00f3n del listado podemos ver: Mediante el primer icono, si la autorizaci\u00f3n se ha enviado (< ) o recibido (< ). Mediante el segundo icono, el estado de la petici\u00f3n: activa (< ), revocada (< ) o pendiente de aprobar (< ). El emisor o receptor de la autorizaci\u00f3n, seg\u00fan si la hemos recibido o enviado, respectivamente. La fecha de revocaci\u00f3n de la autorizaci\u00f3n si ya no est\u00e1 activa o si est\u00e1 activa, pero tiene fecha de caducidad. < Al pulsar sobre una de las autorizaciones podremos ver el detalle de la misma: quien la env\u00eda o recibe, el estado, fecha de inicio y fin y descripci\u00f3n. En caso de tratarse de una autorizaci\u00f3n pendiente o activa, tambi\u00e9n aparecer\u00e1n los botones que nos permitir\u00e1n realizar las distintas opciones disponibles sobre ella: Cancelar aquellas peticiones activas o las peticiones pendientes que hayamos enviado nosotros. Aceptar o revocar las peticiones pendientes que nos hayan enviado. < < Se puede dar de alta una nueva autorizaci\u00f3n pulsando el bot\u00f3n \u201cA\u00f1adir nuevo\u201d cuando se est\u00e9 mostrando el listado de autorizaciones. A continuaci\u00f3n, se nos mostrar\u00e1 un buscador desde el que podremos buscar y seleccionar al usuario al que queremos autorizar. La b\u00fasqueda puede realizarse mediante nombre o DNI. < Una vez seleccionado el usuario, podremos configurar los datos relativos a la autorizaci\u00f3n: Fecha y hora de inicio. Si no se indican, se utilizar\u00e1 la fecha y hora actuales. Fecha y hora de caducidad. Si no se indican, la autorizaci\u00f3n no caducar\u00e1. Tipo de autorizaci\u00f3n: delegado o sustituto. Observaciones opcionales. < La autorizaci\u00f3n se crea al pulsar en el bot\u00f3n \u201cCrear autorizaci\u00f3n\u201d, pero no estar\u00e1 activa hasta que el usuario al que se ha enviado la acepte.","title":"Gesti\u00f3n de autorizaciones"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#gestion-de-validadores","text":"El listado de validadores muestra los usuarios encargados de validar las peticiones que recibimos antes de que se nos muestren en nuestra bandeja de peticiones pendientes. El Portafirmas m\u00f3vil no distingue entre validadores generales o aquellos que s\u00f3lo gestionan aplicaciones concretas. < Se puede dar de alta a un nuevo validador pulsando el bot\u00f3n \u201cA\u00f1adir nuevo\u201d cuando se est\u00e9 mostrando el listado de validadores. A continuaci\u00f3n, se nos mostrar\u00e1 un buscador desde el que podremos buscar y seleccionar al usuario al que queremos nombrar validador. La b\u00fasqueda puede realizarse mediante nombre o DNI. Al pulsar sobre el usuario en cuesti\u00f3n, se nos pedir\u00e1 confirmaci\u00f3n para darlo de alta como validador. < < Podemos dar de baja a un validador con s\u00f3lo pulsar sobre el mismo en el listado de validadores. Al hacerlo, se nos pedir\u00e1 confirmaci\u00f3n antes de darlo de baja.","title":"Gesti\u00f3n de validadores"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#gestion-del-sistema-de-notificaciones","text":"Cuando el servidor Portafirmas al que se conecte lo soporte, en el men\u00fa contextual de los listados de peticiones le aparecer\u00e1 la opci\u00f3n \u201cHabilitar notificaciones\u201d o \u201cDeshabilitar notificaciones\u201d. En caso de habilitar esta opci\u00f3n, el usuario actual recibir\u00e1 notificaciones en su dispositivo cada vez que reciba una nueva petici\u00f3n en el Portafirmas al que est\u00e9 conectado. < Al pulsar sobre una de las notificaciones el usuario podr\u00e1 acceder al portafirmas web en cuesti\u00f3n. En caso de deshabilitarlas, se cancelar\u00e1 la subscripci\u00f3n al sistema de notificaciones.","title":"Gesti\u00f3n del sistema de notificaciones"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_Android/#importar-certificado-de-usuario","text":"Para importar el certificado de usuario es necesario primero guardar el archivo del certificado en el sistema de ficheros. Este archivo debe contener la clave privada ya que se usar\u00e1 para firmar. En general la extensi\u00f3n de este fichero ser\u00e1 .pfx o .p12. El archivo se puede copiar desde el ordenador conectando el dispositivo o se puede enviar como adjunto en un correo. Con el archivo ya en el sistema de ficheros, pulsar en \u201cImportar Certificado\u201d. Se abrir\u00e1 una nueva pantalla que permite recorrer las carpetas del sistema y localizar el archivo anterior. La pantalla del di\u00e1logo de selecci\u00f3n de fichero puede variar seg\u00fan la versi\u00f3n de Android. < Seleccionamos el archivo, introducimos la clave que permite su uso y le asignamos un nombre que es el que se visualizar\u00e1 cuando queramos conectarnos al portafirmas: < < Al aceptar, el certificado se importa en el almac\u00e9n del dispositivo y ya est\u00e1 listo para ser usado. < Esta obra est\u00e1 bajo una licencia.","title":"Importar certificado de usuario"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/","text":"< Manual del Portafirmas iOS Versi\u00f3n 1.6.5 El primer paso para el acceso al Portafirmas desde Apple iOS es la descarga de la aplicaci\u00f3n desde la App Store. Para encontrarla podemos buscar por \u201cPortafirmas @firma\u201d. < A continuaci\u00f3n, pulsaremos sobre el icono de instalaci\u00f3n: < Portafirmas iOS El portafirmas de Asuntos Econ\u00f3micos y Transformaci\u00f3n Digital es una plataforma web para la gesti\u00f3n del flujo de peticiones de firma que permite a sus usuarios revisar dichas peticiones, firmarlas, darles el visto bueno o rechazarlas. El ministerio dispone de dos despliegues de su portafirmas, pero tambi\u00e9n lo distribuye para que otros organismos puedan implantarlo. La aplicaci\u00f3n m\u00f3vil del portafirmas permite el acceso a cualquier instancia del portafirmas del ministerio, o a cualquier instancia del mismo desplegada por otros organismos. La aplicaci\u00f3n m\u00f3vil permite a sus usuarios acceder y realizar las operaciones b\u00e1sicas sobre las peticiones de firma de dicho usuario. Un usuario s\u00f3lo podr\u00e1 acceder a una instancia del portafirmas si previamente se le ha creado una cuenta para el mismo. Cualquier persona que pueda acceder al portafirmas a trav\u00e9s de la web podr\u00e1 acceder al mismo portafirmas desde la aplicaci\u00f3n m\u00f3vil. El portafirmas m\u00f3vil utiliza certificados electr\u00f3nicos reconocidos tanto para el acceso a la cuenta del usuario como para la firma de sus peticiones. Estos pueden ser: Certificados locales instalados en el dispositivo. Certificados en la nube de Cl@ve Permanente. Por defecto, los accesos se realizar\u00e1n mediante certificados instalados en el dispositivo, pero un usuario puede activar el uso de los certificados remotos mediante la opci\u00f3n \u201cUsar certificados remotos\u201d de la pantalla principal de la aplicaci\u00f3n m\u00f3vil. Su certificado, local o remoto, permite al portafirmas identificarle y con ello identificar su cuenta del portafirmas seleccionado. Esto quiere decir que no es necesario dar de alta este certificado en el servicio portafirmas y que, si tiene cuenta en m\u00e1s de un portafirmas, podr\u00e1 acceder a todos ellos con el mismo certificado. Primera ejecuci\u00f3n Al ejecutar la aplicaci\u00f3n por primera vez se le mostrar\u00e1 al usuario la ventana de presentaci\u00f3n y el asistente de configuraci\u00f3n del Portafirmas m\u00f3vil. Este asistente le facilitar\u00e1 configurar algunas de las opciones de la aplicaci\u00f3n: < Selecci\u00f3n de portafirmas : El Portafirmas m\u00f3vil le permite acceder a m\u00faltiples portafirmas y ya viene configurado con la ruta de acceso a dos de ellos. Desde la primera ventana del asistente el usuario podr\u00e1 seleccionar cu\u00e1l de estos portafirmas debe establecerse como el por defecto o indicar que se va a utilizar otro Portafirmas distinto. El usuario podr\u00e1 posteriormente cambiar entre los portafirmas configurados y agregar otros nuevos mediante la opci\u00f3n \u201cServidores Portafirmas\u201d del men\u00fa de la pantalla principal de la aplicaci\u00f3n. Para saber m\u00e1s, consulte el apartado \u201c 4.1 Selecci\u00f3n del servidor de Portafirmas \u201d. < Selecci\u00f3n de origen del certificado: El Portafirmas m\u00f3vil permite el uso tanto de certificados locales como de certificados remotos para para las operaciones de autenticaci\u00f3n y firma. Esta pantalla del asistente le permitir\u00e1 configurar si desea usar por defecto un certificado local o un certificado remoto. Para el uso de un certificado local deber\u00e1 haber importado el certificado tal como se describe en el \u201c \u00a1Error! No se encuentra el origen de la referencia. \u00a1Error! No se encuentra el origen de la referencia. \u201d. Para el uso de un certificado remoto, deber\u00e1 haberse registrado en Cl@ve mediante certificado electr\u00f3nico o de forma presencial ( https://clave.gob.es/clave_Home/registro/Como-puedo-registrarme.html ) y, posteriormente, activar su usuario de Cl@ve Permanente ( https://clave.gob.es/clave_Home/ Clave-Permanente/Procedimientos.html ). Acceder al Portafirmas El Portafirmas m\u00f3vil permite conectar con m\u00faltiples Portafirmas compatibles y autenticarse y firmar tanto con certificados locales como certificados remotos. Al utilizar un certificado local, se usar\u00e1 este para la autenticaci\u00f3n del usuario y la firma de las peticiones. En el caso de usar certificados remotos, se utilizar\u00e1 Cl@ve para la autenticaci\u00f3n (con su certificado de Cl@ve Permanente) y FIRe para la firma (con su certificado de Cl@ve Firma). Selecci\u00f3n del servidor de Portafirmas El portafirmas m\u00f3vil permite tener configuradas m\u00faltiples instancias de Portafirmas. Si no se seleccion\u00f3 mediante el asistente a qu\u00e9 Portafirmas se desea acceder, se deber\u00e1 hacer en este momento. La aplicaci\u00f3n tiene configurados por defecto los dos siguientes servidores Portafirmas: Portafirmas General AGE Portafirmas RedSARA Un usuario puede acceder a cualquiera de estos portafirmas, dar de alta otros, editarlos o eliminarlos. Desde la pantalla de inicio de la aplicaci\u00f3n se puede seleccionar Portafirmas al que se va a acceder mediante la opci\u00f3n \u201cSERVIDOR\u201d. < En el listado que se muestra al usuario, pulsaremos sobre el Portafirmas al que deseemos acceder y pulsaremos sobre la opci\u00f3n \u201cSeleccionar\u201d del men\u00fa contextual. Agregar nuevo servidor Para agregar un servidor distinto a los que vienen por defecto, pulsaremos en el s\u00edmbolo \u2018+\u2019, tras lo que se nos mostrar\u00e1 una pantalla en la que podremos introducir el alias o nombre con el que queremos referirnos al nuevo Portafirmas y la URL del mismo. A continuaci\u00f3n, pulsaremos el bot\u00f3n \u201cGuardar\u201d. < La URL de un servidor Portafirmas deber\u00e1 proporcionarla el organismo responsable del mismo. Modificar un servidor existente Para editar un servidor que ya tenemos dado de alta en la lista de servidores, debemos pulsar en el elemento correspondiente del listado y pulsar sobre la opci\u00f3n \u201cEditar\u201d del men\u00fa contextual. En este di\u00e1logo podemos modificar el nombre y la URL del servidor. Para aplicar los cambios, pulsaremos sobre el bot\u00f3n \u201cGuardar\u201d. Eliminar un servidor Para eliminar un servidor portafirmas deberemos desplazar hacia la izquierda el elemento correspondiente del listado de servidores, tras lo que aparecer\u00e1 un bot\u00f3n \u201cEliminar\u201d en el lado derecho del mismo. Al pulsar sobre este bot\u00f3n eliminaremos el servidor. Si eliminan todos los servidores del listado, la pr\u00f3xima vez que se inicie la aplicaci\u00f3n, se agregar\u00e1n de nuevo los servidores por defecto. Acceso con certificado local Para acceder al portafirmas seleccionado con certificado local, deberemos haber importado al dispositivo y registrado en la aplicaci\u00f3n el certificado. La importaci\u00f3n del certificado en la aplicaci\u00f3n se puede hacer directamente desde la aplicaci\u00f3n mediante la app \u201cArchivos\u201d o a trav\u00e9s de iTunes y un dispositivo de sobremesa al que se conecte el dispositivo m\u00f3vil. Ambas alternativas se describen en los apartados ANEXO 1 Importar certificado de usuario desde la aplicaci\u00f3n \u201cArchivos\u201d (\u201cFiles\u201d) y ANEXO 2 Importar certificado de usuario desde iTunes . Una vez a\u00f1adido un certificado a la aplicaci\u00f3n deberemos registrarlo. Desde la pantalla de inicio accederemos al apartado \u201cCERTIFICADO\u201d que aparecer\u00e1 con el valor \u201cSin especificar\u201d. En esa nueva pantalla nos aparecer\u00e1 el listado de certificados, primeramente, vac\u00eda. Para agregar el certificado importado, pulsaremos el s\u00edmbolo \u2018+\u2019 de la esquina superior derecha. En la nueva pantalla seleccionaremos el almac\u00e9n importado en la aplicaci\u00f3n, introducimos la contrase\u00f1a del almac\u00e9n y pulsamos el bot\u00f3n \u201cRegistrar\u201d. En el listado de certificados, ahora seleccionaremos el certificado registrado y la aplicaci\u00f3n nos mostrar\u00e1 un mensaje con el resultado del proceso. < < < Para el uso del certificado local, comprobaremos que la opci\u00f3n \u201cUsar certificados remotos\u201d de la pantalla principal se encuentra desactivada. A continuaci\u00f3n, pulsaremos el bot\u00f3n \u201cAcceder\u201d. Si el establecimiento de sesi\u00f3n es correcto, el usuario ser\u00e1 redirigido a la pantalla de peticiones pendientes de firmar. Advertencia: El certificado seleccionado es el que se utilizar\u00e1 tanto para la autenticaci\u00f3n del usuario (mediante un proceso de validaci\u00f3n realizado por el propio Portafirmas web), como para la firma de las peticiones. Por este motivo, se recomienda que se utilice siempre un certificado de firma (no repudio) para acceder a la aplicaci\u00f3n. Un usuario s\u00f3lo podr\u00e1 acceder a un servicio de portafirmas si dispone de una cuenta en el mismo . De no ser as\u00ed, se producir\u00e1 un error de conexi\u00f3n. Eliminar un certificado local Para eliminar uno de los certificados importados en la aplicaci\u00f3n, desde la pantalla de selecci\u00f3n de certificados a la que se accede desde la pantalla principal, arrastraremos el certificado hacia la izquierda. En el lado derecho del elemento debe aparecer la opci\u00f3n \u201cEliminar\u201d con la que se puede eliminar el certificado. < Acceso con certificado remoto (Cl@ve Permanente) Para acceder al portafirmas seleccionado con certificado remoto, deberemos habernos dado previamente de alta en Cl@ve y activar Cl@ve Permanente. Puede obtener m\u00e1s informaci\u00f3n sobre los procedimientos necesarios en: https://clave.gob.es/clave_Home/clave.html Para configurar el Portafirmas m\u00f3vil para el uso del certificado remoto, marcaremos la opci\u00f3n \u201cUsar certificados remotos\u201d de la pantalla principal de la aplicaci\u00f3n. A continuaci\u00f3n, pulsaremos el bot\u00f3n \u201cAcceder\u201d. < La aplicaci\u00f3n m\u00f3vil acceder\u00e1 a su cuenta de portafirmas con certificado remoto por medio de Cl@ve Permanente que necesita que el usuario introduzca su DNI y los datos de autenticaci\u00f3n. La aplicaci\u00f3n mostrar\u00e1 para esto la p\u00e1gina web de Cl@ve Permanente en donde el usuario podr\u00e1 insertar su DNI, la contrase\u00f1a de Cl@ve y, si procede, el c\u00f3digo enviado a su tel\u00e9fono por SMS. < Advertencia: No todos los servicios de portafirmas permiten el uso de certificado remoto. Consulte con el proveedor de su portafirmas si tiene dudas acerca de la disponibilidad de esta opci\u00f3n. Selecci\u00f3n de rol En caso de que el usuario tenga permitido el acceso con distintos roles, tras acceder a la aplicaci\u00f3n, se mostrar\u00e1 un listado con las distintas opciones disponibles. < El usuario podr\u00e1 seleccionar el rol con el que desea acceder a la aplicaci\u00f3n. Una vez dentro, podr\u00e1 cambiar de rol a trav\u00e9s de la opci\u00f3n Roles de la pantalla de configuraci\u00f3n de la aplicaci\u00f3n. Bandejas de peticiones Al entrar en el portafirmas, se accede a la pantalla que muestra la bandeja de peticiones que el usuario tiene pendientes de procesar. Las peticiones que puede ver y las acciones que puede realizar sobre ellas depender\u00e1 de si accedi\u00f3 como usuario firmante o como validador de otro usuario. Posteriormente el usuario podr\u00e1 cambiar de rol desde la opci\u00f3n correspondiente del men\u00fa. Acceso como usuario firmante Se accede como usuario firmante cuando no se es validador de ning\u00fan otro usuario o cuando se selecciona expresamente en la pantalla de selecci\u00f3n de rol. Los usuarios firmantes ver\u00e1n por defecto el listado de peticiones que tiene pendiente de firmar o aprobar. Si hubiese peticiones pr\u00f3ximas a caducar, se mostrar\u00edan al principio del listado. El usuario puede utilizar las opciones de la parte inferior del listado para cambiar entre los listados de peticiones pendientes, rechazadas y firmadas. En estos listados se pueden encontrar, respectivamente, las peticiones de firma y visto bueno que est\u00e1n pendientes de procesar, las que se han rechazado y las se han procesado correctamente. < En este listado se muestran al usuario las peticiones pendientes recibidas, qui\u00e9n la env\u00edo, el asunto del que trata, la criticidad y si la petici\u00f3n requiere firmar (< ) o aprobaci\u00f3n (< ). Se puede actualizar el listado arrastrando la lista hacia abajo cuando ya nos encontramos en la parte superior o mediante la opci\u00f3n de actualizar del men\u00fa. Para ver el detalle de una petici\u00f3n se puede pulsar sobre la misma. Debe tenerse en cuenta que, si el usuario tiene validadores asignados, por defecto s\u00f3lo se le mostrar\u00e1n las peticiones que estos hayan validado previamente. Para ver todas las peticiones dirigidas a \u00e9l, el usuario debe acceder al apartado de filtros mediante la opci\u00f3n \u201cFiltrar\u201d del men\u00fa de la pantalla, activarlos y seleccionar el tipo de petici\u00f3n \u201cTodos los tipos\u201d. Para procesar las peticiones de este listado, debemos pulsar el bot\u00f3n \u201cSeleccionar\u201d situado arriba a la derecha. Veremos c\u00f3mo, despu\u00e9s de hacerlo, la lista se nos muestra en modo edici\u00f3n de manera que podemos seleccionar las peticiones que queramos procesar. Una vez seleccionada alguna petici\u00f3n los botones inferiores de \u201cFirmar/Visto Bueno\u201d y \u201cRechazar\u201d se habilitar\u00e1n para que podamos pulsarlos y procesar como queramos las peticiones seleccionadas. < < < Fig. 3.1 Fig. 3.2 Fig. 3.3 Cuando un usuario pulsa el bot\u00f3n \u201cFirmar/Visto Bueno\u201d de la parte inferior de la pantalla despu\u00e9s de seleccionar una o m\u00e1s peticiones se le mostrar\u00e1 el n\u00famero de cada tipo y se le pedir\u00e1 confirmaci\u00f3n antes de procesarlas. Tambi\u00e9n puede rechazarlas mediante el bot\u00f3n \u201cRechazar\u201d. Cuando se rechacen peticiones se permitir\u00e1 al usuario indicar el motivo por el que se rechazan. Indicar este dato es opcional. Al procesar una petici\u00f3n, si el proceso se realiza correctamente, la petici\u00f3n pasa a la bandeja de \u201cFirmadas\u201d. Al rechazar peticiones, estas pasan a la bandeja de \u201cRechazadas\u201d. Pueden visualizarse las distintas bandejas mediante los botones inferiores del listado de peticiones: Pendientes, Rechazadas y Firmadas. Firma de peticiones con certificado local La firma de peticiones con certificado local se realiza con el mismo certificado que se haya seleccionado para el acceso al Portafirmas. El uso de este certificado es transparente para el usuario. Firma con certificado remoto La firma de peticiones con certificado remoto se realiza con el certificado de firma de Cl@ve Firma del usuario. Para hacer uso de este certificado se redirige al usuario a la p\u00e1gina de FIRe desde el que puede seleccionarlo. Seguidamente deber\u00e1 introducir su contrase\u00f1a de Cl@ve y el c\u00f3digo recibido por SMS a su n\u00famero de m\u00f3vil asociado. < < Acceso como usuario validador Cuando un usuario accede como usuario validador no ve las peticiones que se le env\u00edan a \u00e9l, sino las peticiones enviadas al usuario del cual es validador. Su funci\u00f3n es la de revisar estas peticiones y validarlas para que as\u00ed aparezca en la bandeja de peticiones pendientes de la persona responsable de darles visto bueno o firmarlas. < El usuario validador ve por defecto \u00fanicamente las peticiones que est\u00e1n pendientes de validar. Si fuese necesario ver tambi\u00e9n las peticiones ya validadas, puede cambiarlo mediante el filtro \u201cTipo de petici\u00f3n\u201d, accesible mediante la opci\u00f3n \u201cFiltrar\u201d del men\u00fa del listado de peticiones pendientes. Se puede actualizar el listado arrastrando la lista hacia abajo cuando ya nos encontramos en la parte superior o mediante la opci\u00f3n de actualizar del men\u00fa. Filtrado de peticiones Desde cualquiera de las bandejas de peticiones podemos activar los filtros para que se muestren solamente aquellas peticiones que cumplan las condiciones establecidas en esos campos. Esto puede hacerse desde el panel de configuraci\u00f3n de la pantalla del listado de peticiones. Este di\u00e1logo tambi\u00e9n permite seleccionar el criterio de ordenaci\u00f3n del listado. < Detalle de petici\u00f3n Pulsando directamente en una petici\u00f3n accederemos a una pantalla para ver su informaci\u00f3n. Entre ella veremos qui\u00e9n la env\u00eda, el asunto, referencia, la fecha de env\u00edo, la fecha de caducidad (si aplica), la aplicaci\u00f3n desde la que se env\u00eda, el motivo de rechazo (si aplica), los remitentes y el mensaje asociado. Desde esta pantalla tambi\u00e9n se puede firmar, dar visto bueno, rechazar o validar una petici\u00f3n pendiente. Para hacerlo, s\u00f3lo debemos pulsar sobre el bot\u00f3n superior derecho y despu\u00e9s sobre la opci\u00f3n deseada. < < La opci\u00f3n \u201cRemitentes\u201d muestra el flujo de vistos buenos y firmas que seguir\u00e1 la petici\u00f3n, quienes deber\u00e1n procesarla y la operaci\u00f3n en cuesti\u00f3n a realizar (Firma o Visto Bueno). Cuando se indica que la firma de una petici\u00f3n es \u201cen cascada\u201d, se indica que deber\u00e1 procesarla uno de los individuos de una l\u00ednea de firma antes que la petici\u00f3n llegue a los de la siguiente l\u00ednea. Cuando la petici\u00f3n sea \u201cen paralelo\u201d los individuos de las distintas l\u00edneas de firma podr\u00e1n procesarla en paralelo. < La pesta\u00f1a \u201cDocumentos\u201d contiene los documentos que se van a firmar y, si existen (y la versi\u00f3n del Portafirmas web al que se conecta lo soporta), los documentos anexos a la petici\u00f3n, los cuales no se firman nunca, pero pueden ayudar al usuario a determinar si debe firmar los documentos. Estos documentos se podr\u00e1n visualizar a trav\u00e9s de la propia aplicaci\u00f3n si tiene un formato compatible. < < Gesti\u00f3n de autorizaciones y validadores La aplicaci\u00f3n m\u00f3vil permite gestionar las autorizaciones y los validadores del usuario cuando se accede a una versi\u00f3n del Portafirmas que soporte esta funcionalidad. De ser el caso, podremos hacerlo accediendo a la pantalla de configuraci\u00f3n del listado de peticiones y pulsando en la opci\u00f3n \u201cGesti\u00f3n de Autorizaciones y Validadores\u201d. Gesti\u00f3n de autorizaciones El listado de autorizaciones muestra todas aquellas autorizaciones que hemos concedido o que nos han concedido a nosotros, independientemente del estado en el que se encuentren. De cada autorizaci\u00f3n del listado podemos ver: Mediante el primer icono, si la autorizaci\u00f3n se ha enviado (< ) o recibido (< ). Mediante el segundo icono, el estado de la petici\u00f3n: activa (< ), revocada (< ) o pendiente de aprobar (< ). El emisor o receptor de la autorizaci\u00f3n, seg\u00fan si la hemos recibido o enviado, respectivamente. La fecha de revocaci\u00f3n de la autorizaci\u00f3n si ya no est\u00e1 activa o si est\u00e1 activa, pero tiene fecha de caducidad. < Al pulsar sobre una de las autorizaciones podremos ver el detalle de la misma: quien la env\u00eda o recibe, el estado, fecha de inicio y fin y descripci\u00f3n. En caso de tratarse de una autorizaci\u00f3n pendiente o activa, tambi\u00e9n aparecer\u00e1n los botones que nos permitir\u00e1n realizar las distintas opciones disponibles sobre ella: Cancelar/rechazar aquellas peticiones activas o las peticiones pendientes que hayamos enviado nosotros. Aceptar o revocar las peticiones pendientes que nos hayan enviado. < < Se puede dar de alta una nueva autorizaci\u00f3n pulsando el bot\u00f3n \u201cA\u00f1adir nuevo\u201d cuando se est\u00e9 mostrando el listado de autorizaciones. A continuaci\u00f3n, se nos mostrar\u00e1 un buscador desde el que podremos buscar y seleccionar al usuario al que queremos autorizar. La b\u00fasqueda puede realizarse mediante nombre o DNI. < Una vez seleccionado el usuario, podremos configurar los datos relativos a la autorizaci\u00f3n: Fecha y hora de inicio. Si no se indican, se utilizar\u00e1 la fecha y hora actuales. Fecha y hora de caducidad. Si no se indican, la autorizaci\u00f3n no caducar\u00e1. Tipo de autorizaci\u00f3n: delegado o sustituto. Observaciones opcionales. < La autorizaci\u00f3n se crea al pulsar en el bot\u00f3n \u201cCrear autorizaci\u00f3n\u201d, pero no estar\u00e1 activa hasta que el usuario al que se ha enviado la acepte. Gesti\u00f3n de validadores El listado de validadores muestra los usuarios encargados de validar las peticiones que recibimos antes de que se nos muestren en nuestra bandeja de peticiones pendientes. El Portafirmas m\u00f3vil no distingue entre validadores generales o aquellos que s\u00f3lo gestionan aplicaciones concretas. < Se puede dar de alta a un nuevo validador pulsando el bot\u00f3n \u201cA\u00f1adir nuevo\u201d cuando se est\u00e9 mostrando el listado de validadores. A continuaci\u00f3n, se nos mostrar\u00e1 un buscador desde el que podremos buscar y seleccionar al usuario al que queremos nombrar validador. La b\u00fasqueda puede realizarse mediante nombre o DNI. Al pulsar sobre el usuario en cuesti\u00f3n, se nos pedir\u00e1 confirmaci\u00f3n para darlo de alta como validador. < Podemos dar de baja a un validador con s\u00f3lo pulsar sobre el mismo en el listado de validadores. Al hacerlo, se nos pedir\u00e1 confirmaci\u00f3n antes de darlo de baja. Importar certificado de usuario desde la aplicaci\u00f3n \u201cArchivos\u201d (\u201cFiles\u201d) Para importar en la aplicaci\u00f3n un certificado desde la aplicaci\u00f3n \u201cArchivos\u201d deberemos acceder al listado de certificados de la aplicaci\u00f3n a trav\u00e9s de la opci\u00f3n \u201cCERTIFICADO\u201d de la p\u00e1gina principal. Seguidamente pulsaremos sobre el s\u00edmbolo \u2018+\u2019 situado en la esquina superior derecha de la aplicaci\u00f3n. Desde esta pantalla seleccionaremos el enlace \u201c A\u00f1adir m\u00e1s almacenes desde Files App \u201d (Fig. A1.1), tras lo cual se nos abrir\u00e1 la aplicaci\u00f3n \u201cArchivos\u201d. Desde la aplicaci\u00f3n Archivos podremos seleccionar el archivo PKCS#12 que contenga nuestro certificado y que tengamos en nuestro dispositivo m\u00f3vil, en iCloud o en cualquier otra ubicaci\u00f3n disponible (Fig. A1.2 y A1.3). Al hacerlo, el archivo aparecer\u00e1 disponible en el listado de \u201cAlmacenes Disponibles\u201d de la aplicaci\u00f3n. < < < Fig. A1.1 Fig. A1.2 Fig. A1.3 Una vez importado el archivo de almac\u00e9n, se deber\u00e1 registrar el certificado en la aplicaci\u00f3n como se describe en el apartado 4.2 Acceso con certificado local . Importar certificado de usuario desde iTunes Para importar a la aplicaci\u00f3n un certificado desde iTunes, tendremos que conectar por cable nuestro dispositivo m\u00f3vil con el equipo macOS o Windows en el que tengamos instalada la aplicaci\u00f3n. Desde iTunes se debe seleccionar el dispositivo conectado (Paso 1), navegar hasta la pesta\u00f1a de \u201c Aplicaciones \u201d (Paso 2) y posicionarnos en el final de la p\u00e1gina. Una vez ah\u00ed deber\u00edamos ver la aplicaci\u00f3n Port@firmas en la parte izquierda de la pantalla dentro de la columna \u201c Aplicaciones \u201d. Si la seleccionamos (Paso 3), la columna de la derecha se actualizar\u00e1 para dejarnos a\u00f1adir archivos. Utilizamos el bot\u00f3n \u201c A\u00f1adir \u201d (Paso 4) para agregar los almacenes de certificados (ficheros .p12/.pfx) que queramos. < Una vez importado el archivo de almac\u00e9n, se deber\u00e1 registrar el certificado en la aplicaci\u00f3n como se describe en el apartado 4.2 Acceso con certificado local . < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"PF Manual App Portafirmas iOS"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#portafirmas-ios","text":"El portafirmas de Asuntos Econ\u00f3micos y Transformaci\u00f3n Digital es una plataforma web para la gesti\u00f3n del flujo de peticiones de firma que permite a sus usuarios revisar dichas peticiones, firmarlas, darles el visto bueno o rechazarlas. El ministerio dispone de dos despliegues de su portafirmas, pero tambi\u00e9n lo distribuye para que otros organismos puedan implantarlo. La aplicaci\u00f3n m\u00f3vil del portafirmas permite el acceso a cualquier instancia del portafirmas del ministerio, o a cualquier instancia del mismo desplegada por otros organismos. La aplicaci\u00f3n m\u00f3vil permite a sus usuarios acceder y realizar las operaciones b\u00e1sicas sobre las peticiones de firma de dicho usuario. Un usuario s\u00f3lo podr\u00e1 acceder a una instancia del portafirmas si previamente se le ha creado una cuenta para el mismo. Cualquier persona que pueda acceder al portafirmas a trav\u00e9s de la web podr\u00e1 acceder al mismo portafirmas desde la aplicaci\u00f3n m\u00f3vil. El portafirmas m\u00f3vil utiliza certificados electr\u00f3nicos reconocidos tanto para el acceso a la cuenta del usuario como para la firma de sus peticiones. Estos pueden ser: Certificados locales instalados en el dispositivo. Certificados en la nube de Cl@ve Permanente. Por defecto, los accesos se realizar\u00e1n mediante certificados instalados en el dispositivo, pero un usuario puede activar el uso de los certificados remotos mediante la opci\u00f3n \u201cUsar certificados remotos\u201d de la pantalla principal de la aplicaci\u00f3n m\u00f3vil. Su certificado, local o remoto, permite al portafirmas identificarle y con ello identificar su cuenta del portafirmas seleccionado. Esto quiere decir que no es necesario dar de alta este certificado en el servicio portafirmas y que, si tiene cuenta en m\u00e1s de un portafirmas, podr\u00e1 acceder a todos ellos con el mismo certificado.","title":"Portafirmas iOS"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#primera-ejecucion","text":"Al ejecutar la aplicaci\u00f3n por primera vez se le mostrar\u00e1 al usuario la ventana de presentaci\u00f3n y el asistente de configuraci\u00f3n del Portafirmas m\u00f3vil. Este asistente le facilitar\u00e1 configurar algunas de las opciones de la aplicaci\u00f3n: < Selecci\u00f3n de portafirmas : El Portafirmas m\u00f3vil le permite acceder a m\u00faltiples portafirmas y ya viene configurado con la ruta de acceso a dos de ellos. Desde la primera ventana del asistente el usuario podr\u00e1 seleccionar cu\u00e1l de estos portafirmas debe establecerse como el por defecto o indicar que se va a utilizar otro Portafirmas distinto. El usuario podr\u00e1 posteriormente cambiar entre los portafirmas configurados y agregar otros nuevos mediante la opci\u00f3n \u201cServidores Portafirmas\u201d del men\u00fa de la pantalla principal de la aplicaci\u00f3n. Para saber m\u00e1s, consulte el apartado \u201c 4.1 Selecci\u00f3n del servidor de Portafirmas \u201d. < Selecci\u00f3n de origen del certificado: El Portafirmas m\u00f3vil permite el uso tanto de certificados locales como de certificados remotos para para las operaciones de autenticaci\u00f3n y firma. Esta pantalla del asistente le permitir\u00e1 configurar si desea usar por defecto un certificado local o un certificado remoto. Para el uso de un certificado local deber\u00e1 haber importado el certificado tal como se describe en el \u201c \u00a1Error! No se encuentra el origen de la referencia. \u00a1Error! No se encuentra el origen de la referencia. \u201d. Para el uso de un certificado remoto, deber\u00e1 haberse registrado en Cl@ve mediante certificado electr\u00f3nico o de forma presencial ( https://clave.gob.es/clave_Home/registro/Como-puedo-registrarme.html ) y, posteriormente, activar su usuario de Cl@ve Permanente ( https://clave.gob.es/clave_Home/ Clave-Permanente/Procedimientos.html ).","title":"Primera ejecuci\u00f3n"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#acceder-al-portafirmas","text":"El Portafirmas m\u00f3vil permite conectar con m\u00faltiples Portafirmas compatibles y autenticarse y firmar tanto con certificados locales como certificados remotos. Al utilizar un certificado local, se usar\u00e1 este para la autenticaci\u00f3n del usuario y la firma de las peticiones. En el caso de usar certificados remotos, se utilizar\u00e1 Cl@ve para la autenticaci\u00f3n (con su certificado de Cl@ve Permanente) y FIRe para la firma (con su certificado de Cl@ve Firma).","title":"Acceder al Portafirmas"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#seleccion-del-servidor-de-portafirmas","text":"El portafirmas m\u00f3vil permite tener configuradas m\u00faltiples instancias de Portafirmas. Si no se seleccion\u00f3 mediante el asistente a qu\u00e9 Portafirmas se desea acceder, se deber\u00e1 hacer en este momento. La aplicaci\u00f3n tiene configurados por defecto los dos siguientes servidores Portafirmas: Portafirmas General AGE Portafirmas RedSARA Un usuario puede acceder a cualquiera de estos portafirmas, dar de alta otros, editarlos o eliminarlos. Desde la pantalla de inicio de la aplicaci\u00f3n se puede seleccionar Portafirmas al que se va a acceder mediante la opci\u00f3n \u201cSERVIDOR\u201d. < En el listado que se muestra al usuario, pulsaremos sobre el Portafirmas al que deseemos acceder y pulsaremos sobre la opci\u00f3n \u201cSeleccionar\u201d del men\u00fa contextual.","title":"Selecci\u00f3n del servidor de Portafirmas"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#agregar-nuevo-servidor","text":"Para agregar un servidor distinto a los que vienen por defecto, pulsaremos en el s\u00edmbolo \u2018+\u2019, tras lo que se nos mostrar\u00e1 una pantalla en la que podremos introducir el alias o nombre con el que queremos referirnos al nuevo Portafirmas y la URL del mismo. A continuaci\u00f3n, pulsaremos el bot\u00f3n \u201cGuardar\u201d. < La URL de un servidor Portafirmas deber\u00e1 proporcionarla el organismo responsable del mismo.","title":"Agregar nuevo servidor"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#modificar-un-servidor-existente","text":"Para editar un servidor que ya tenemos dado de alta en la lista de servidores, debemos pulsar en el elemento correspondiente del listado y pulsar sobre la opci\u00f3n \u201cEditar\u201d del men\u00fa contextual. En este di\u00e1logo podemos modificar el nombre y la URL del servidor. Para aplicar los cambios, pulsaremos sobre el bot\u00f3n \u201cGuardar\u201d.","title":"Modificar un servidor existente"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#eliminar-un-servidor","text":"Para eliminar un servidor portafirmas deberemos desplazar hacia la izquierda el elemento correspondiente del listado de servidores, tras lo que aparecer\u00e1 un bot\u00f3n \u201cEliminar\u201d en el lado derecho del mismo. Al pulsar sobre este bot\u00f3n eliminaremos el servidor. Si eliminan todos los servidores del listado, la pr\u00f3xima vez que se inicie la aplicaci\u00f3n, se agregar\u00e1n de nuevo los servidores por defecto.","title":"Eliminar un servidor"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#acceso-con-certificado-local","text":"Para acceder al portafirmas seleccionado con certificado local, deberemos haber importado al dispositivo y registrado en la aplicaci\u00f3n el certificado. La importaci\u00f3n del certificado en la aplicaci\u00f3n se puede hacer directamente desde la aplicaci\u00f3n mediante la app \u201cArchivos\u201d o a trav\u00e9s de iTunes y un dispositivo de sobremesa al que se conecte el dispositivo m\u00f3vil. Ambas alternativas se describen en los apartados ANEXO 1 Importar certificado de usuario desde la aplicaci\u00f3n \u201cArchivos\u201d (\u201cFiles\u201d) y ANEXO 2 Importar certificado de usuario desde iTunes . Una vez a\u00f1adido un certificado a la aplicaci\u00f3n deberemos registrarlo. Desde la pantalla de inicio accederemos al apartado \u201cCERTIFICADO\u201d que aparecer\u00e1 con el valor \u201cSin especificar\u201d. En esa nueva pantalla nos aparecer\u00e1 el listado de certificados, primeramente, vac\u00eda. Para agregar el certificado importado, pulsaremos el s\u00edmbolo \u2018+\u2019 de la esquina superior derecha. En la nueva pantalla seleccionaremos el almac\u00e9n importado en la aplicaci\u00f3n, introducimos la contrase\u00f1a del almac\u00e9n y pulsamos el bot\u00f3n \u201cRegistrar\u201d. En el listado de certificados, ahora seleccionaremos el certificado registrado y la aplicaci\u00f3n nos mostrar\u00e1 un mensaje con el resultado del proceso. < < < Para el uso del certificado local, comprobaremos que la opci\u00f3n \u201cUsar certificados remotos\u201d de la pantalla principal se encuentra desactivada. A continuaci\u00f3n, pulsaremos el bot\u00f3n \u201cAcceder\u201d. Si el establecimiento de sesi\u00f3n es correcto, el usuario ser\u00e1 redirigido a la pantalla de peticiones pendientes de firmar. Advertencia: El certificado seleccionado es el que se utilizar\u00e1 tanto para la autenticaci\u00f3n del usuario (mediante un proceso de validaci\u00f3n realizado por el propio Portafirmas web), como para la firma de las peticiones. Por este motivo, se recomienda que se utilice siempre un certificado de firma (no repudio) para acceder a la aplicaci\u00f3n. Un usuario s\u00f3lo podr\u00e1 acceder a un servicio de portafirmas si dispone de una cuenta en el mismo . De no ser as\u00ed, se producir\u00e1 un error de conexi\u00f3n.","title":"Acceso con certificado local"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#eliminar-un-certificado-local","text":"Para eliminar uno de los certificados importados en la aplicaci\u00f3n, desde la pantalla de selecci\u00f3n de certificados a la que se accede desde la pantalla principal, arrastraremos el certificado hacia la izquierda. En el lado derecho del elemento debe aparecer la opci\u00f3n \u201cEliminar\u201d con la que se puede eliminar el certificado. <","title":"Eliminar un certificado local"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#acceso-con-certificado-remoto-clve-permanente","text":"Para acceder al portafirmas seleccionado con certificado remoto, deberemos habernos dado previamente de alta en Cl@ve y activar Cl@ve Permanente. Puede obtener m\u00e1s informaci\u00f3n sobre los procedimientos necesarios en: https://clave.gob.es/clave_Home/clave.html Para configurar el Portafirmas m\u00f3vil para el uso del certificado remoto, marcaremos la opci\u00f3n \u201cUsar certificados remotos\u201d de la pantalla principal de la aplicaci\u00f3n. A continuaci\u00f3n, pulsaremos el bot\u00f3n \u201cAcceder\u201d. < La aplicaci\u00f3n m\u00f3vil acceder\u00e1 a su cuenta de portafirmas con certificado remoto por medio de Cl@ve Permanente que necesita que el usuario introduzca su DNI y los datos de autenticaci\u00f3n. La aplicaci\u00f3n mostrar\u00e1 para esto la p\u00e1gina web de Cl@ve Permanente en donde el usuario podr\u00e1 insertar su DNI, la contrase\u00f1a de Cl@ve y, si procede, el c\u00f3digo enviado a su tel\u00e9fono por SMS. < Advertencia: No todos los servicios de portafirmas permiten el uso de certificado remoto. Consulte con el proveedor de su portafirmas si tiene dudas acerca de la disponibilidad de esta opci\u00f3n.","title":"Acceso con certificado remoto (Cl@ve Permanente)"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#seleccion-de-rol","text":"En caso de que el usuario tenga permitido el acceso con distintos roles, tras acceder a la aplicaci\u00f3n, se mostrar\u00e1 un listado con las distintas opciones disponibles. < El usuario podr\u00e1 seleccionar el rol con el que desea acceder a la aplicaci\u00f3n. Una vez dentro, podr\u00e1 cambiar de rol a trav\u00e9s de la opci\u00f3n Roles de la pantalla de configuraci\u00f3n de la aplicaci\u00f3n.","title":"Selecci\u00f3n de rol"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#bandejas-de-peticiones","text":"Al entrar en el portafirmas, se accede a la pantalla que muestra la bandeja de peticiones que el usuario tiene pendientes de procesar. Las peticiones que puede ver y las acciones que puede realizar sobre ellas depender\u00e1 de si accedi\u00f3 como usuario firmante o como validador de otro usuario. Posteriormente el usuario podr\u00e1 cambiar de rol desde la opci\u00f3n correspondiente del men\u00fa.","title":"Bandejas de peticiones"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#acceso-como-usuario-firmante","text":"Se accede como usuario firmante cuando no se es validador de ning\u00fan otro usuario o cuando se selecciona expresamente en la pantalla de selecci\u00f3n de rol. Los usuarios firmantes ver\u00e1n por defecto el listado de peticiones que tiene pendiente de firmar o aprobar. Si hubiese peticiones pr\u00f3ximas a caducar, se mostrar\u00edan al principio del listado. El usuario puede utilizar las opciones de la parte inferior del listado para cambiar entre los listados de peticiones pendientes, rechazadas y firmadas. En estos listados se pueden encontrar, respectivamente, las peticiones de firma y visto bueno que est\u00e1n pendientes de procesar, las que se han rechazado y las se han procesado correctamente. < En este listado se muestran al usuario las peticiones pendientes recibidas, qui\u00e9n la env\u00edo, el asunto del que trata, la criticidad y si la petici\u00f3n requiere firmar (< ) o aprobaci\u00f3n (< ). Se puede actualizar el listado arrastrando la lista hacia abajo cuando ya nos encontramos en la parte superior o mediante la opci\u00f3n de actualizar del men\u00fa. Para ver el detalle de una petici\u00f3n se puede pulsar sobre la misma. Debe tenerse en cuenta que, si el usuario tiene validadores asignados, por defecto s\u00f3lo se le mostrar\u00e1n las peticiones que estos hayan validado previamente. Para ver todas las peticiones dirigidas a \u00e9l, el usuario debe acceder al apartado de filtros mediante la opci\u00f3n \u201cFiltrar\u201d del men\u00fa de la pantalla, activarlos y seleccionar el tipo de petici\u00f3n \u201cTodos los tipos\u201d. Para procesar las peticiones de este listado, debemos pulsar el bot\u00f3n \u201cSeleccionar\u201d situado arriba a la derecha. Veremos c\u00f3mo, despu\u00e9s de hacerlo, la lista se nos muestra en modo edici\u00f3n de manera que podemos seleccionar las peticiones que queramos procesar. Una vez seleccionada alguna petici\u00f3n los botones inferiores de \u201cFirmar/Visto Bueno\u201d y \u201cRechazar\u201d se habilitar\u00e1n para que podamos pulsarlos y procesar como queramos las peticiones seleccionadas. < < < Fig. 3.1 Fig. 3.2 Fig. 3.3 Cuando un usuario pulsa el bot\u00f3n \u201cFirmar/Visto Bueno\u201d de la parte inferior de la pantalla despu\u00e9s de seleccionar una o m\u00e1s peticiones se le mostrar\u00e1 el n\u00famero de cada tipo y se le pedir\u00e1 confirmaci\u00f3n antes de procesarlas. Tambi\u00e9n puede rechazarlas mediante el bot\u00f3n \u201cRechazar\u201d. Cuando se rechacen peticiones se permitir\u00e1 al usuario indicar el motivo por el que se rechazan. Indicar este dato es opcional. Al procesar una petici\u00f3n, si el proceso se realiza correctamente, la petici\u00f3n pasa a la bandeja de \u201cFirmadas\u201d. Al rechazar peticiones, estas pasan a la bandeja de \u201cRechazadas\u201d. Pueden visualizarse las distintas bandejas mediante los botones inferiores del listado de peticiones: Pendientes, Rechazadas y Firmadas.","title":"Acceso como usuario firmante"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#firma-de-peticiones-con-certificado-local","text":"La firma de peticiones con certificado local se realiza con el mismo certificado que se haya seleccionado para el acceso al Portafirmas. El uso de este certificado es transparente para el usuario.","title":"Firma de peticiones con certificado local"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#firma-con-certificado-remoto","text":"La firma de peticiones con certificado remoto se realiza con el certificado de firma de Cl@ve Firma del usuario. Para hacer uso de este certificado se redirige al usuario a la p\u00e1gina de FIRe desde el que puede seleccionarlo. Seguidamente deber\u00e1 introducir su contrase\u00f1a de Cl@ve y el c\u00f3digo recibido por SMS a su n\u00famero de m\u00f3vil asociado. < <","title":"Firma con certificado remoto"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#acceso-como-usuario-validador","text":"Cuando un usuario accede como usuario validador no ve las peticiones que se le env\u00edan a \u00e9l, sino las peticiones enviadas al usuario del cual es validador. Su funci\u00f3n es la de revisar estas peticiones y validarlas para que as\u00ed aparezca en la bandeja de peticiones pendientes de la persona responsable de darles visto bueno o firmarlas. < El usuario validador ve por defecto \u00fanicamente las peticiones que est\u00e1n pendientes de validar. Si fuese necesario ver tambi\u00e9n las peticiones ya validadas, puede cambiarlo mediante el filtro \u201cTipo de petici\u00f3n\u201d, accesible mediante la opci\u00f3n \u201cFiltrar\u201d del men\u00fa del listado de peticiones pendientes. Se puede actualizar el listado arrastrando la lista hacia abajo cuando ya nos encontramos en la parte superior o mediante la opci\u00f3n de actualizar del men\u00fa.","title":"Acceso como usuario validador"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#filtrado-de-peticiones","text":"Desde cualquiera de las bandejas de peticiones podemos activar los filtros para que se muestren solamente aquellas peticiones que cumplan las condiciones establecidas en esos campos. Esto puede hacerse desde el panel de configuraci\u00f3n de la pantalla del listado de peticiones. Este di\u00e1logo tambi\u00e9n permite seleccionar el criterio de ordenaci\u00f3n del listado. <","title":"Filtrado de peticiones"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#detalle-de-peticion","text":"Pulsando directamente en una petici\u00f3n accederemos a una pantalla para ver su informaci\u00f3n. Entre ella veremos qui\u00e9n la env\u00eda, el asunto, referencia, la fecha de env\u00edo, la fecha de caducidad (si aplica), la aplicaci\u00f3n desde la que se env\u00eda, el motivo de rechazo (si aplica), los remitentes y el mensaje asociado. Desde esta pantalla tambi\u00e9n se puede firmar, dar visto bueno, rechazar o validar una petici\u00f3n pendiente. Para hacerlo, s\u00f3lo debemos pulsar sobre el bot\u00f3n superior derecho y despu\u00e9s sobre la opci\u00f3n deseada. < < La opci\u00f3n \u201cRemitentes\u201d muestra el flujo de vistos buenos y firmas que seguir\u00e1 la petici\u00f3n, quienes deber\u00e1n procesarla y la operaci\u00f3n en cuesti\u00f3n a realizar (Firma o Visto Bueno). Cuando se indica que la firma de una petici\u00f3n es \u201cen cascada\u201d, se indica que deber\u00e1 procesarla uno de los individuos de una l\u00ednea de firma antes que la petici\u00f3n llegue a los de la siguiente l\u00ednea. Cuando la petici\u00f3n sea \u201cen paralelo\u201d los individuos de las distintas l\u00edneas de firma podr\u00e1n procesarla en paralelo. < La pesta\u00f1a \u201cDocumentos\u201d contiene los documentos que se van a firmar y, si existen (y la versi\u00f3n del Portafirmas web al que se conecta lo soporta), los documentos anexos a la petici\u00f3n, los cuales no se firman nunca, pero pueden ayudar al usuario a determinar si debe firmar los documentos. Estos documentos se podr\u00e1n visualizar a trav\u00e9s de la propia aplicaci\u00f3n si tiene un formato compatible. < <","title":"Detalle de petici\u00f3n"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#gestion-de-autorizaciones-y-validadores","text":"La aplicaci\u00f3n m\u00f3vil permite gestionar las autorizaciones y los validadores del usuario cuando se accede a una versi\u00f3n del Portafirmas que soporte esta funcionalidad. De ser el caso, podremos hacerlo accediendo a la pantalla de configuraci\u00f3n del listado de peticiones y pulsando en la opci\u00f3n \u201cGesti\u00f3n de Autorizaciones y Validadores\u201d.","title":"Gesti\u00f3n de autorizaciones y validadores"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#gestion-de-autorizaciones","text":"El listado de autorizaciones muestra todas aquellas autorizaciones que hemos concedido o que nos han concedido a nosotros, independientemente del estado en el que se encuentren. De cada autorizaci\u00f3n del listado podemos ver: Mediante el primer icono, si la autorizaci\u00f3n se ha enviado (< ) o recibido (< ). Mediante el segundo icono, el estado de la petici\u00f3n: activa (< ), revocada (< ) o pendiente de aprobar (< ). El emisor o receptor de la autorizaci\u00f3n, seg\u00fan si la hemos recibido o enviado, respectivamente. La fecha de revocaci\u00f3n de la autorizaci\u00f3n si ya no est\u00e1 activa o si est\u00e1 activa, pero tiene fecha de caducidad. < Al pulsar sobre una de las autorizaciones podremos ver el detalle de la misma: quien la env\u00eda o recibe, el estado, fecha de inicio y fin y descripci\u00f3n. En caso de tratarse de una autorizaci\u00f3n pendiente o activa, tambi\u00e9n aparecer\u00e1n los botones que nos permitir\u00e1n realizar las distintas opciones disponibles sobre ella: Cancelar/rechazar aquellas peticiones activas o las peticiones pendientes que hayamos enviado nosotros. Aceptar o revocar las peticiones pendientes que nos hayan enviado. < < Se puede dar de alta una nueva autorizaci\u00f3n pulsando el bot\u00f3n \u201cA\u00f1adir nuevo\u201d cuando se est\u00e9 mostrando el listado de autorizaciones. A continuaci\u00f3n, se nos mostrar\u00e1 un buscador desde el que podremos buscar y seleccionar al usuario al que queremos autorizar. La b\u00fasqueda puede realizarse mediante nombre o DNI. < Una vez seleccionado el usuario, podremos configurar los datos relativos a la autorizaci\u00f3n: Fecha y hora de inicio. Si no se indican, se utilizar\u00e1 la fecha y hora actuales. Fecha y hora de caducidad. Si no se indican, la autorizaci\u00f3n no caducar\u00e1. Tipo de autorizaci\u00f3n: delegado o sustituto. Observaciones opcionales. < La autorizaci\u00f3n se crea al pulsar en el bot\u00f3n \u201cCrear autorizaci\u00f3n\u201d, pero no estar\u00e1 activa hasta que el usuario al que se ha enviado la acepte.","title":"Gesti\u00f3n de autorizaciones"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#gestion-de-validadores","text":"El listado de validadores muestra los usuarios encargados de validar las peticiones que recibimos antes de que se nos muestren en nuestra bandeja de peticiones pendientes. El Portafirmas m\u00f3vil no distingue entre validadores generales o aquellos que s\u00f3lo gestionan aplicaciones concretas. < Se puede dar de alta a un nuevo validador pulsando el bot\u00f3n \u201cA\u00f1adir nuevo\u201d cuando se est\u00e9 mostrando el listado de validadores. A continuaci\u00f3n, se nos mostrar\u00e1 un buscador desde el que podremos buscar y seleccionar al usuario al que queremos nombrar validador. La b\u00fasqueda puede realizarse mediante nombre o DNI. Al pulsar sobre el usuario en cuesti\u00f3n, se nos pedir\u00e1 confirmaci\u00f3n para darlo de alta como validador. < Podemos dar de baja a un validador con s\u00f3lo pulsar sobre el mismo en el listado de validadores. Al hacerlo, se nos pedir\u00e1 confirmaci\u00f3n antes de darlo de baja.","title":"Gesti\u00f3n de validadores"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#importar-certificado-de-usuario-desde-la-aplicacion-archivos-files","text":"Para importar en la aplicaci\u00f3n un certificado desde la aplicaci\u00f3n \u201cArchivos\u201d deberemos acceder al listado de certificados de la aplicaci\u00f3n a trav\u00e9s de la opci\u00f3n \u201cCERTIFICADO\u201d de la p\u00e1gina principal. Seguidamente pulsaremos sobre el s\u00edmbolo \u2018+\u2019 situado en la esquina superior derecha de la aplicaci\u00f3n. Desde esta pantalla seleccionaremos el enlace \u201c A\u00f1adir m\u00e1s almacenes desde Files App \u201d (Fig. A1.1), tras lo cual se nos abrir\u00e1 la aplicaci\u00f3n \u201cArchivos\u201d. Desde la aplicaci\u00f3n Archivos podremos seleccionar el archivo PKCS#12 que contenga nuestro certificado y que tengamos en nuestro dispositivo m\u00f3vil, en iCloud o en cualquier otra ubicaci\u00f3n disponible (Fig. A1.2 y A1.3). Al hacerlo, el archivo aparecer\u00e1 disponible en el listado de \u201cAlmacenes Disponibles\u201d de la aplicaci\u00f3n. < < < Fig. A1.1 Fig. A1.2 Fig. A1.3 Una vez importado el archivo de almac\u00e9n, se deber\u00e1 registrar el certificado en la aplicaci\u00f3n como se describe en el apartado 4.2 Acceso con certificado local .","title":"Importar certificado de usuario desde la aplicaci\u00f3n \u201cArchivos\u201d (\u201cFiles\u201d)"},{"location":"markdown_strict/PF_Manual_App_Portafirmas_iOS/#importar-certificado-de-usuario-desde-itunes","text":"Para importar a la aplicaci\u00f3n un certificado desde iTunes, tendremos que conectar por cable nuestro dispositivo m\u00f3vil con el equipo macOS o Windows en el que tengamos instalada la aplicaci\u00f3n. Desde iTunes se debe seleccionar el dispositivo conectado (Paso 1), navegar hasta la pesta\u00f1a de \u201c Aplicaciones \u201d (Paso 2) y posicionarnos en el final de la p\u00e1gina. Una vez ah\u00ed deber\u00edamos ver la aplicaci\u00f3n Port@firmas en la parte izquierda de la pantalla dentro de la columna \u201c Aplicaciones \u201d. Si la seleccionamos (Paso 3), la columna de la derecha se actualizar\u00e1 para dejarnos a\u00f1adir archivos. Utilizamos el bot\u00f3n \u201c A\u00f1adir \u201d (Paso 4) para agregar los almacenes de certificados (ficheros .p12/.pfx) que queramos. < Una vez importado el archivo de almac\u00e9n, se deber\u00e1 registrar el certificado en la aplicaci\u00f3n como se describe en el apartado 4.2 Acceso con certificado local . < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"Importar certificado de usuario desde iTunes"},{"location":"markdown_strict/PF_manual-configuracion_servicios_ES/","text":"El Portafirmas m\u00f3vil es una app para dispositivos m\u00f3viles que permite realizar las operaciones m\u00e1s destacadas del Portafirmas web del Mineco. Esta app sirve \u00fanicamente como interfaz del Portafirmas web, de tal forma que toda la l\u00f3gica se mantiene en servidor a excepci\u00f3n de la operaci\u00f3n de firma, que se realiza con el certificado que el usuario tiene instalado en el dispositivo y con el que accede a la aplicaci\u00f3n. Las operaciones que permite realizar el Portafirmas m\u00f3vil es: Listado de solicitudes de firma (pendientes, firmadas y rechazadas). Visualizaci\u00f3n del detalle de las peticiones. Visualizaci\u00f3n de los documentos de las peticiones y de las firmas e informes de las peticiones ya firmadas. Firma, visto bueno y validaci\u00f3n de peticiones. Rechazo de peticiones. Gesti\u00f3n de validadores y autorizaciones del usuario. Para la ejecuci\u00f3n de estas operaciones, el Portafirmas m\u00f3vil requiere de una serie de servicios web. El presente manual trata de la configuraci\u00f3n de estos servicios. Servicios del Portafirmas m\u00f3vil La soluci\u00f3n de Portafirmas m\u00f3vil se soporta en una serie de servicios que le permiten comunicarse con el Portafirmas web y realizar las distintas operaciones de firma. Estos son los servicios de proxy y de firma trif\u00e1sica del Cliente @firma, respectivamente. Servicio Proxy El servicio proxy del portafirmas web es el que se encarga de recoger las peticiones del Portafirmas m\u00f3vil y redirigirlas al Portafirmas Web y/o al servicio de firma trif\u00e1sica cuando se trate de operaciones de firma. Este servicio se distribuye mediante el archivo afirma-signfolder-proxy.war. Configuraci\u00f3n del servicio El servicio de proxy se configura a trav\u00e9s del fichero pfmovil.properties. El servicio buscar\u00e1 este fichero en el directorio configurado mediante la propiedad Java pfmovil.config.path . Si no se configurase esta propiedad o no se encontrase en el directorio establecido, se buscar\u00e1 dentro del WAR del servicio (afirma-signfolder-proxy.war), en el subdirectorio \u201cWEB-INF/classes\u201d. Para establecer el directorio de configuraci\u00f3n, se podr\u00eda proporcionar la propiedad directamente al servidor de aplicaciones durante el arranque. Por ejemplo: -Dpfmovil.config.path=/opt/usuarios/portafirmas/config Las propiedades que se pueden configurar desde este fichero son: signfolder.ws.url Indica cual es la URL de los servicios web del Portafirmas que dan soporte al Portafirmas m\u00f3vil. La URL debe apuntar al WSDL publicado. Ejemplo: https://mihost.com/pf/servicesv2/MobileService?wsdl proxy.server.url URL base en el que se despliega el proxy del portafirmas. Necesario para las redirecciones en las autenticaciones con Cl@ve. Ejemplo: https://mihost.com/pf/afirma-signfolder-proxy triphase.server.url Indica la URL del servicio de firma trif\u00e1sica. IMPORTANTE: La ruta de acceso al servidor trif\u00e1sico deber\u00eda ser interna cuando ambos se encuentren en el mismo servidor, evitando que la comunicaci\u00f3n entre ambos servicios deba salir de la red o atravesar cualquier proxy. En caso de que el servicio cambiase de puerto en cada ejecuci\u00f3n del servidor de aplicaciones, es posible utilizar el s\u00edmbolo \u201c${tomcat.httpport}\u201d para cargar el puerto establecido en la variable de entorno Java \u201ctomcat.httpport\u201d. Ejemplo: http://192.168.1.24:${tomcat.httpport}/afirma-server-triphase-signer/SignatureService forced.extraparams Permite establecer par\u00e1metros de configuraci\u00f3n que se establecer\u00e1n para TODAS las firmas que se realicen a trav\u00e9s del Portafirmas m\u00f3vil. Estas propiedades se agregar\u00e1n a las especificadas para cada documento y sustituir\u00e1n a aquellas que se estableciese en origen. Los par\u00e1metros se establecer\u00e1n como una cadena de pares \u201cclave=valor\u201d. Las distintas propiedades se separar\u00e1n con el car\u00e1cter punto y coma (\u2018;\u2019). Por defecto: mode=implicit (Todas las firmas ser\u00e1 impl\u00edcitas) cache.enabled Habilita la cache para conservar los documentos entre las operaciones de prefirma y postfirma en lugar de tener que recuperarlo del Portafirmas en cada ocasi\u00f3n. Habilitar esta opci\u00f3n habitualmente reducir\u00e1 la velocidad del servicio y reducir\u00e1 el tr\u00e1fico de red entre el servicio proxy y el Portafirmas. Su desempe\u00f1o depender\u00e1 de la implementaci\u00f3n del sistema de cach\u00e9. Por defecto: false cache.system.expirationtime N\u00famero de milisegundos que deben transcurrir para considerar caducado un fichero en cache. A partir de ese momento el servicio podr\u00e1 borrarlo. Por defecto: 60000 (1 minuto) cache.system.class Nombre de la clase que gestiona la cache. S\u00f3lo se utiliza si la cache est\u00e1 habilitada. Opciones disponibles: es.gob.afirma.signfolder.server.proxy.FileSystemDocumentCache Almacena los documentos temporalmente en el sistema de ficheros. En caso de desplegarse el servicio en alta disponibilidad, se deber\u00eda utilizar una unidad compartida por todos los nodos. Por defecto: es.gob.afirma.signfolder.server.proxy.FileSystemDocumentCache cache.filesystem.dir Directorio para el guardado de datos en cache. Esta propiedad solo se utiliza cuando la cache est\u00e1 habilitada y se utiliza el sistema FileSystemDocumentCache . Si se despliega el servicio en varios nodos, deber\u00eda ser un directorio compartido por todos ellos. Si no se indica, se almacenar\u00e1n en el directorio temporal del usuario. share.sessions.enable Permite habilitar la compartici\u00f3n de sesiones en despliegues con varios nodos. Por defecto, esto s\u00f3lo habilita al sistema para el uso de certificados en la nube. Para habilitarlo tambi\u00e9n para certificados locales hay que habilitar la propiedad \"share.sessions.withcertificate.enable\". Por defecto: false share.sessions.withcertificate.enable Habilitar la compartici\u00f3n de sesiones para el uso de certificados locales con varios nodos. Requiere que se habilite tambi\u00e9n la propiedad \"share.sessions.enable\". Por defecto: true share.sessions.dir Ruta absoluta del directorio en el que se almacenaran las sesiones compartidas. Debe ser accesible por todos los nodos del despliegue. Si no se indica, se almacenar\u00e1n en el directorio temporal del usuario. share.sessions.requeststoclean N\u00famero de peticiones que se admiten hasta iniciar la limpieza del almac\u00e9n de sesiones compartidas. Por defecto: 1000 signfolder.ws.username Nombre de usuario para el acceso al web service del Portafirmas en caso de que se le haya establecido un usuario/contrase\u00f1a del acceso. Si no se indica, no se agregar\u00e1 la cabecera de seguridad para el acceso al servicio. signfolder.ws.password Contrase\u00f1a de acceso al web service del Portafirmas en caso de que se le haya establecido un usuario/contrase\u00f1a del acceso. Si no se indica, no se agregar\u00e1 la cabecera de seguridad para el acceso al servicio. Configuraci\u00f3n de los logs El servicio proxy utiliza la biblioteca SLF4J como fachada para la gesti\u00f3n de los logs e incluye las bibliotecas de Logback para imprimir los logs a trav\u00e9s de este framework . Por defecto los logs de la aplicaci\u00f3n se imprimir\u00e1n junto al resto de logs del servidor de aplicaciones, pero se puede alterar este comportamiento configurando el framework de logs. En el caso de Logback, se puede utilizar un fichero externo en el que se establezca la configuraci\u00f3n que se debe emplear. Se puede indicar a la aplicaci\u00f3n cual es el fichero de configuraci\u00f3n proporcionando durante el arranque del servicio la propiedad \u201clogback.configurationFile\u201d con la ruta del fichero en cuesti\u00f3n. Por ejemplo: -Dlogback.configurationFile=/opt/usuarios/portafirmas/proxy_logback.xml Un ejemplo de fichero de configuraci\u00f3n de Logback ser\u00eda: <configuration> <!-- Configuraci\u00f3n del log --> <appender name=\"ROLLING\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"> <!-- Ruta del fichero de log --> <file>RUTA_LOGS/proxy_log.txt</file> <!-- Rotado diario o por tama\u00f1o --> <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\"> <!-- Nombre del fichero de rotado --> <fileNamePattern> proxy_log -%d{yyyy-MM-dd}.%i.txt</fileNamePattern> <!-- Tama\u00f1o maximo de fichero de 50MB --> <maxFileSize>50MB</maxFileSize> <!-- M\u00e1ximo de 20 ficheros totales --> <maxHistory>20</maxHistory> <!-- Tama\u00f1o total no superior a 1GB --> <totalSizeCap>1GB</totalSizeCap> </rollingPolicy> <!-- Formato de las entradas de log --> <encoder> <pattern> %d %-5level [%thread] %logger{0}: %msg%n </pattern> </encoder> </appender> <!-- Nivel de log y configuraci\u00f3n a aplicar --> <root level=\"info\"> <appender-ref ref=\"ROLLING\" /> </root> </configuration> Consulte la documentaci\u00f3n de Logback para saber las opciones de configuraci\u00f3n que ofrece este framework: https://logback.qos.ch/ Configuraci\u00f3n de los logs Si un integrador tuviese inter\u00e9s en utilizar un framework de gesti\u00f3n de logs distinto a Logback (Java Logging API, Log4J 2...), puede modificar el WAR del servicio proxy eliminando las bibliotecas de Logback y agregando las del framework que desee utilizar y la biblioteca puente correspondiente para SLF4J. Consulte la documentaci\u00f3n de SLF4J para m\u00e1s informaci\u00f3n: https://www.slf4j.org/ Servicio de firma trif\u00e1sica El servicio de firma trif\u00e1sica permite realizar los procesos de firma del portafirmas m\u00f3vil. Este servicio se encarga de obtener la informaci\u00f3n que el usuario cifrara con su clave privada en su dispositivo y compondr\u00e1 la firma en servidor con el formato adecuado. Configuraci\u00f3n del servicio El servicio de firma trif\u00e1sica se distribuye ya configurado para que funcione correctamente con el Portafirmas m\u00f3vil. Existe la posibilidad, sin embargo, de configurar varias propiedades para ajustar su comportamiento a nuestro despliegue. Para configurar el servicio se utiliza el fichero tps_config.properties. Ese fichero se buscar\u00e1 en el directorio configurado a trav\u00e9s de la variable de entorno clienteafirma.config.path . Si no se proporciona esta variable, se buscar\u00e1 dentro del propio WAR del servicio (afirma-server-triphase-signer.war), en el subdirectorio \u201cWEB-INF/classes\u201d. Para establecer el directorio de configuraci\u00f3n, se podr\u00eda proporcionar la propiedad directamente al servidor de aplicaciones durante el arranque. Por ejemplo: -Dclienteafirma.config.path=/opt/usuarios/portafirmas/properties De entre todas las propiedades de configuraci\u00f3n que admite este servicio, para los despliegues del Portafirmas m\u00f3vil s\u00f3lo se recomienda modificar las siguientes: Access-Control-Allow-Origin Permite establecer el origen permitido de las peticiones. El servicio de firma trif\u00e1sica agregar\u00e1 el valor de esta propiedad en las respuestas del servicio. Si se establece como valor un asterisco (\u2018*\u2019), se indica que se pueden realizar peticiones desde cualquier dominio. Valor por defecto: * alternative.xmldsig Permite habilitar el modo de compatibilidad con bibliotecas de firma XML que puedan encontrarse en el classpath del servidor de aplicaciones. Este tipo de bibliotecas pueden interferir con las que incluye el propio Oracle Java e impedir realizar firmas XAdES. Ejemplos de bibliotecas que provocan estos errores son XERCES/XALAN. Al indicar el valor true, se habilitar\u00e1 el modo de compatibilidad con estas bibliotecas, lo que obligar\u00e1 al servicio a buscar diversos paquetes de clases para encontrar un modo de completar las firmas. No se garantiza la compatibilidad con todas las versiones de estas bibliotecas. Valor por defecto: false IMPORTANTE: Ser\u00e1 necesario establecer a true esta propiedad cuando se desplieguen los servicios sobre un servidor JBoss 6 o superior. < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"PF manual configuracion servicios ES"},{"location":"markdown_strict/PF_manual-configuracion_servicios_ES/#servicios-del-portafirmas-movil","text":"La soluci\u00f3n de Portafirmas m\u00f3vil se soporta en una serie de servicios que le permiten comunicarse con el Portafirmas web y realizar las distintas operaciones de firma. Estos son los servicios de proxy y de firma trif\u00e1sica del Cliente @firma, respectivamente.","title":"Servicios del Portafirmas m\u00f3vil"},{"location":"markdown_strict/PF_manual-configuracion_servicios_ES/#servicio-proxy","text":"El servicio proxy del portafirmas web es el que se encarga de recoger las peticiones del Portafirmas m\u00f3vil y redirigirlas al Portafirmas Web y/o al servicio de firma trif\u00e1sica cuando se trate de operaciones de firma. Este servicio se distribuye mediante el archivo afirma-signfolder-proxy.war.","title":"Servicio Proxy"},{"location":"markdown_strict/PF_manual-configuracion_servicios_ES/#configuracion-del-servicio","text":"El servicio de proxy se configura a trav\u00e9s del fichero pfmovil.properties. El servicio buscar\u00e1 este fichero en el directorio configurado mediante la propiedad Java pfmovil.config.path . Si no se configurase esta propiedad o no se encontrase en el directorio establecido, se buscar\u00e1 dentro del WAR del servicio (afirma-signfolder-proxy.war), en el subdirectorio \u201cWEB-INF/classes\u201d. Para establecer el directorio de configuraci\u00f3n, se podr\u00eda proporcionar la propiedad directamente al servidor de aplicaciones durante el arranque. Por ejemplo: -Dpfmovil.config.path=/opt/usuarios/portafirmas/config Las propiedades que se pueden configurar desde este fichero son: signfolder.ws.url Indica cual es la URL de los servicios web del Portafirmas que dan soporte al Portafirmas m\u00f3vil. La URL debe apuntar al WSDL publicado. Ejemplo: https://mihost.com/pf/servicesv2/MobileService?wsdl proxy.server.url URL base en el que se despliega el proxy del portafirmas. Necesario para las redirecciones en las autenticaciones con Cl@ve. Ejemplo: https://mihost.com/pf/afirma-signfolder-proxy triphase.server.url Indica la URL del servicio de firma trif\u00e1sica. IMPORTANTE: La ruta de acceso al servidor trif\u00e1sico deber\u00eda ser interna cuando ambos se encuentren en el mismo servidor, evitando que la comunicaci\u00f3n entre ambos servicios deba salir de la red o atravesar cualquier proxy. En caso de que el servicio cambiase de puerto en cada ejecuci\u00f3n del servidor de aplicaciones, es posible utilizar el s\u00edmbolo \u201c${tomcat.httpport}\u201d para cargar el puerto establecido en la variable de entorno Java \u201ctomcat.httpport\u201d. Ejemplo: http://192.168.1.24:${tomcat.httpport}/afirma-server-triphase-signer/SignatureService forced.extraparams Permite establecer par\u00e1metros de configuraci\u00f3n que se establecer\u00e1n para TODAS las firmas que se realicen a trav\u00e9s del Portafirmas m\u00f3vil. Estas propiedades se agregar\u00e1n a las especificadas para cada documento y sustituir\u00e1n a aquellas que se estableciese en origen. Los par\u00e1metros se establecer\u00e1n como una cadena de pares \u201cclave=valor\u201d. Las distintas propiedades se separar\u00e1n con el car\u00e1cter punto y coma (\u2018;\u2019). Por defecto: mode=implicit (Todas las firmas ser\u00e1 impl\u00edcitas) cache.enabled Habilita la cache para conservar los documentos entre las operaciones de prefirma y postfirma en lugar de tener que recuperarlo del Portafirmas en cada ocasi\u00f3n. Habilitar esta opci\u00f3n habitualmente reducir\u00e1 la velocidad del servicio y reducir\u00e1 el tr\u00e1fico de red entre el servicio proxy y el Portafirmas. Su desempe\u00f1o depender\u00e1 de la implementaci\u00f3n del sistema de cach\u00e9. Por defecto: false cache.system.expirationtime N\u00famero de milisegundos que deben transcurrir para considerar caducado un fichero en cache. A partir de ese momento el servicio podr\u00e1 borrarlo. Por defecto: 60000 (1 minuto) cache.system.class Nombre de la clase que gestiona la cache. S\u00f3lo se utiliza si la cache est\u00e1 habilitada. Opciones disponibles: es.gob.afirma.signfolder.server.proxy.FileSystemDocumentCache Almacena los documentos temporalmente en el sistema de ficheros. En caso de desplegarse el servicio en alta disponibilidad, se deber\u00eda utilizar una unidad compartida por todos los nodos. Por defecto: es.gob.afirma.signfolder.server.proxy.FileSystemDocumentCache cache.filesystem.dir Directorio para el guardado de datos en cache. Esta propiedad solo se utiliza cuando la cache est\u00e1 habilitada y se utiliza el sistema FileSystemDocumentCache . Si se despliega el servicio en varios nodos, deber\u00eda ser un directorio compartido por todos ellos. Si no se indica, se almacenar\u00e1n en el directorio temporal del usuario. share.sessions.enable Permite habilitar la compartici\u00f3n de sesiones en despliegues con varios nodos. Por defecto, esto s\u00f3lo habilita al sistema para el uso de certificados en la nube. Para habilitarlo tambi\u00e9n para certificados locales hay que habilitar la propiedad \"share.sessions.withcertificate.enable\". Por defecto: false share.sessions.withcertificate.enable Habilitar la compartici\u00f3n de sesiones para el uso de certificados locales con varios nodos. Requiere que se habilite tambi\u00e9n la propiedad \"share.sessions.enable\". Por defecto: true share.sessions.dir Ruta absoluta del directorio en el que se almacenaran las sesiones compartidas. Debe ser accesible por todos los nodos del despliegue. Si no se indica, se almacenar\u00e1n en el directorio temporal del usuario. share.sessions.requeststoclean N\u00famero de peticiones que se admiten hasta iniciar la limpieza del almac\u00e9n de sesiones compartidas. Por defecto: 1000 signfolder.ws.username Nombre de usuario para el acceso al web service del Portafirmas en caso de que se le haya establecido un usuario/contrase\u00f1a del acceso. Si no se indica, no se agregar\u00e1 la cabecera de seguridad para el acceso al servicio. signfolder.ws.password Contrase\u00f1a de acceso al web service del Portafirmas en caso de que se le haya establecido un usuario/contrase\u00f1a del acceso. Si no se indica, no se agregar\u00e1 la cabecera de seguridad para el acceso al servicio.","title":"Configuraci\u00f3n del servicio"},{"location":"markdown_strict/PF_manual-configuracion_servicios_ES/#configuracion-de-los-logs","text":"El servicio proxy utiliza la biblioteca SLF4J como fachada para la gesti\u00f3n de los logs e incluye las bibliotecas de Logback para imprimir los logs a trav\u00e9s de este framework . Por defecto los logs de la aplicaci\u00f3n se imprimir\u00e1n junto al resto de logs del servidor de aplicaciones, pero se puede alterar este comportamiento configurando el framework de logs. En el caso de Logback, se puede utilizar un fichero externo en el que se establezca la configuraci\u00f3n que se debe emplear. Se puede indicar a la aplicaci\u00f3n cual es el fichero de configuraci\u00f3n proporcionando durante el arranque del servicio la propiedad \u201clogback.configurationFile\u201d con la ruta del fichero en cuesti\u00f3n. Por ejemplo: -Dlogback.configurationFile=/opt/usuarios/portafirmas/proxy_logback.xml Un ejemplo de fichero de configuraci\u00f3n de Logback ser\u00eda: <configuration> <!-- Configuraci\u00f3n del log --> <appender name=\"ROLLING\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"> <!-- Ruta del fichero de log --> <file>RUTA_LOGS/proxy_log.txt</file> <!-- Rotado diario o por tama\u00f1o --> <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\"> <!-- Nombre del fichero de rotado --> <fileNamePattern> proxy_log -%d{yyyy-MM-dd}.%i.txt</fileNamePattern> <!-- Tama\u00f1o maximo de fichero de 50MB --> <maxFileSize>50MB</maxFileSize> <!-- M\u00e1ximo de 20 ficheros totales --> <maxHistory>20</maxHistory> <!-- Tama\u00f1o total no superior a 1GB --> <totalSizeCap>1GB</totalSizeCap> </rollingPolicy> <!-- Formato de las entradas de log --> <encoder> <pattern> %d %-5level [%thread] %logger{0}: %msg%n </pattern> </encoder> </appender> <!-- Nivel de log y configuraci\u00f3n a aplicar --> <root level=\"info\"> <appender-ref ref=\"ROLLING\" /> </root> </configuration> Consulte la documentaci\u00f3n de Logback para saber las opciones de configuraci\u00f3n que ofrece este framework: https://logback.qos.ch/","title":"Configuraci\u00f3n de los logs"},{"location":"markdown_strict/PF_manual-configuracion_servicios_ES/#configuracion-de-los-logs_1","text":"Si un integrador tuviese inter\u00e9s en utilizar un framework de gesti\u00f3n de logs distinto a Logback (Java Logging API, Log4J 2...), puede modificar el WAR del servicio proxy eliminando las bibliotecas de Logback y agregando las del framework que desee utilizar y la biblioteca puente correspondiente para SLF4J. Consulte la documentaci\u00f3n de SLF4J para m\u00e1s informaci\u00f3n: https://www.slf4j.org/","title":"Configuraci\u00f3n de los logs"},{"location":"markdown_strict/PF_manual-configuracion_servicios_ES/#servicio-de-firma-trifasica","text":"El servicio de firma trif\u00e1sica permite realizar los procesos de firma del portafirmas m\u00f3vil. Este servicio se encarga de obtener la informaci\u00f3n que el usuario cifrara con su clave privada en su dispositivo y compondr\u00e1 la firma en servidor con el formato adecuado.","title":"Servicio de firma trif\u00e1sica"},{"location":"markdown_strict/PF_manual-configuracion_servicios_ES/#configuracion-del-servicio_1","text":"El servicio de firma trif\u00e1sica se distribuye ya configurado para que funcione correctamente con el Portafirmas m\u00f3vil. Existe la posibilidad, sin embargo, de configurar varias propiedades para ajustar su comportamiento a nuestro despliegue. Para configurar el servicio se utiliza el fichero tps_config.properties. Ese fichero se buscar\u00e1 en el directorio configurado a trav\u00e9s de la variable de entorno clienteafirma.config.path . Si no se proporciona esta variable, se buscar\u00e1 dentro del propio WAR del servicio (afirma-server-triphase-signer.war), en el subdirectorio \u201cWEB-INF/classes\u201d. Para establecer el directorio de configuraci\u00f3n, se podr\u00eda proporcionar la propiedad directamente al servidor de aplicaciones durante el arranque. Por ejemplo: -Dclienteafirma.config.path=/opt/usuarios/portafirmas/properties De entre todas las propiedades de configuraci\u00f3n que admite este servicio, para los despliegues del Portafirmas m\u00f3vil s\u00f3lo se recomienda modificar las siguientes: Access-Control-Allow-Origin Permite establecer el origen permitido de las peticiones. El servicio de firma trif\u00e1sica agregar\u00e1 el valor de esta propiedad en las respuestas del servicio. Si se establece como valor un asterisco (\u2018*\u2019), se indica que se pueden realizar peticiones desde cualquier dominio. Valor por defecto: * alternative.xmldsig Permite habilitar el modo de compatibilidad con bibliotecas de firma XML que puedan encontrarse en el classpath del servidor de aplicaciones. Este tipo de bibliotecas pueden interferir con las que incluye el propio Oracle Java e impedir realizar firmas XAdES. Ejemplos de bibliotecas que provocan estos errores son XERCES/XALAN. Al indicar el valor true, se habilitar\u00e1 el modo de compatibilidad con estas bibliotecas, lo que obligar\u00e1 al servicio a buscar diversos paquetes de clases para encontrar un modo de completar las firmas. No se garantiza la compatibilidad con todas las versiones de estas bibliotecas. Valor por defecto: false IMPORTANTE: Ser\u00e1 necesario establecer a true esta propiedad cuando se desplieguen los servicios sobre un servidor JBoss 6 o superior. < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"Configuraci\u00f3n del servicio"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/","text":"El presente documento presenta la sintaxis de invocaci\u00f3n de las aplicaciones del Cliente @firma para permitir el uso de sus capacidades de firma desde una aplicaci\u00f3n externa. El documento expone los distintos mecanismos de comunicaci\u00f3n existentes entre la aplicaci\u00f3n cliente y la aplicaci\u00f3n de firma, las operaciones admitidas y los par\u00e1metros que se deben proporcionar para cada una de estas operaciones. Introducci\u00f3n El Cliente @firma es un conjunto de aplicaciones cliente que permiten al usuario ejecutar operaciones de firma con sus certificados electr\u00f3nicos locales. Las aplicaciones englobadas en la denominaci\u00f3n Cliente @firma son: AutoFirma: Aplicaci\u00f3n de escritorio para sistemas Windows, Linux y macOS. Puede ser invocada desde una aplicaci\u00f3n externa para la generaci\u00f3n de firmas electr\u00f3nicas o generar firmas directamente desde su interfaz gr\u00e1fica. Permite el uso de distintos almacenes de certificados del sistema, almacenes PKCS#12/JKS y tarjetas inteligentes. Cliente m\u00f3vil Android: Aplicaci\u00f3n de firma para sistemas Android. Puede ser invocada desde una aplicaci\u00f3n externa para la generaci\u00f3n de firmas electr\u00f3nicas o generar firmas directamente desde su interfaz gr\u00e1fica. Utiliza los certificados del almac\u00e9n del sistema. Cliente m\u00f3vil iOS: Aplicaci\u00f3n de firma para sistemas iOS. Puede ser invocada desde una aplicaci\u00f3n externa para la generaci\u00f3n de firmas electr\u00f3nicas. Utiliza certificados previamente importados en la aplicaci\u00f3n a trav\u00e9s del sistema de ficheros o iTunes. El modo com\u00fan de operaci\u00f3n es la invocaci\u00f3n de estas aplicaciones desde un tr\u00e1mite Web por medio del JavaScript de despliegue (autoscript.js) suministrado con el kit de integraci\u00f3n del Cliente @firma. Este modo de operaci\u00f3n permite a las aplicaciones web enviar datos al Cliente @firma para firmarlos y obtener las firmas resultantes como parte del flujo de un tr\u00e1mite online. El mecanismo de invocaci\u00f3n del Cliente @firma s\u00f3lo permite enviar a la aplicaci\u00f3n de firma una serie de par\u00e1metros, pero no obtener una respuesta. Esto obliga a establecer un mecanismo de comunicaci\u00f3n bidireccional que ser\u00e1 definido por la aplicaci\u00f3n que realiza la llamada al Cliente @firma. A lo largo de la vida del Cliente @firma, este mecanismo de comunicaci\u00f3n ha ido evolucionando, pero se ha mantenido la compatibilidad hacia atr\u00e1s para permitir la compatibilidad entre versiones del Cliente @firma y dadas las limitaciones del entorno de algunas de las aplicaciones. Los mecanismos de comunicaci\u00f3n que existen actualmente son: Comunicaci\u00f3n a trav\u00e9s de servidor intermedio: El paso de datos entre la aplicaci\u00f3n cliente y la aplicaci\u00f3n de firma se realizar\u00e1 directamente en la llamada de invocaci\u00f3n y la respuesta se subir\u00e1 a un servidor intermedio del que la descargar\u00e1 la aplicaci\u00f3n cliente. En caso de que los par\u00e1metros de la llamada sean demasiado grandes, estos se enviar\u00e1n al servidor intermedio para que los descargue la aplicaci\u00f3n de firma. El servidor intermedio lo proporcionar\u00e1 el organismo propietario de la aplicaci\u00f3n y los servicios para el guardado y la descarga de la informaci\u00f3n se distribuyen en el kit de despliegue del Cliente @firma. Las URL de acceso a los servicios de carga y descarga de datos del servidor los proporciona la aplicaci\u00f3n cliente en la llamada a la aplicaci\u00f3n de firma. Este modo de operaci\u00f3n obliga a que la aplicaci\u00f3n de firma se tenga que abrir por cada petici\u00f3n de la aplicaci\u00f3n cliente. Este mecanismo de comunicaci\u00f3n est\u00e1 soportado por todas las aplicaciones cliente. Comunicaci\u00f3n por Sockets: El paso de datos entre la aplicaci\u00f3n cliente y la aplicaci\u00f3n de firma se hace a trav\u00e9s de un socket abierto por la aplicaci\u00f3n de firma. Tras la invocaci\u00f3n por protocolo, la aplicaci\u00f3n de firma abrir\u00e1 el socket. La aplicaci\u00f3n cliente solicitar\u00e1 todas las peticiones a trav\u00e9s de ese socket y obtendr\u00e1 la respuesta del mismo. La aplicaci\u00f3n cliente env\u00eda tres n\u00fameros de puerto aleatorios a la aplicaci\u00f3n de firma en la llamada por protocolo y la aplicaci\u00f3n tratar\u00e1 de abrir el socket en uno de ellos. Si fallase la apertura del socket, lo intentar\u00eda con el siguiente puerto hasta conseguir abrir uno o fallar si no se pudo en ninguno de los puertos proporcionados. La aplicaci\u00f3n cliente tratar\u00e1 de comunicarse con la aplicaci\u00f3n de firma por medio de los 3 puertos hasta que identifique cual ser\u00e1 finalmente el puerto por el que se establecer\u00e1 la comunicaci\u00f3n. Este modo de operaci\u00f3n mantiene abierta la aplicaci\u00f3n cliente hasta que pasa un minuto de inactividad tras la \u00faltima llamada. Este mecanismo de comunicaci\u00f3n s\u00f3lo est\u00e1 soportado por AutoFirma. Comunicaci\u00f3n por WebSockets: El paso de datos entre la aplicaci\u00f3n cliente y la aplicaci\u00f3n de firma se hace a trav\u00e9s de un WebSocket abierto por la aplicaci\u00f3n de firma en el puerto 63117. Tras la invocaci\u00f3n por protocolo, la aplicaci\u00f3n de firma abrir\u00e1 el WebSocket. La aplicaci\u00f3n cliente solicitar\u00e1 todas las peticiones a trav\u00e9s de ese socket y obtendr\u00e1 la respuesta del mismo. Este modo de operaci\u00f3n mantiene abierta la aplicaci\u00f3n cliente hasta que la aplicaci\u00f3n cliente cierra la conexi\u00f3n. Este mecanismo de comunicaci\u00f3n s\u00f3lo est\u00e1 soportado por AutoFirma 1.7 y superiores. Todas las operaciones con el Cliente @firma deben hacerse de forma secuencial. No se debe realizar una nueva petici\u00f3n a la aplicaci\u00f3n hasta que no se ha recibido la respuesta de la petici\u00f3n anterior. Estructura de la URL de invocaci\u00f3n Durante la instalaci\u00f3n de las aplicaciones cliente de firma, estas registran el esquema \u201cafirma\u201d en el sistema. De esa manera, todas las llamadas que se realicen con ese protocolo abrir\u00e1n la aplicaci\u00f3n de firma instalada. Podemos distinguir las siguientes partes en la estructura de una URL: [scheme://][authority][path][?query][#fragment] [scheme://] Esquema de la URL: En las llamadas al Cliente @firma siempre ser\u00e1 \u2018afirma\u2019. [authority] Autoridad del protocolo: Com\u00fanmente puede contener una secci\u00f3n host , un puerto e informaci\u00f3n del usuario. En las llamadas al Cliente @firma este par\u00e1metro expresar\u00e1 la operaci\u00f3n a realizar. Los valores que se pueden establecer en las llamadas al Cliente @firma dependen de la operaci\u00f3n y del modo de comunicaci\u00f3n que se desee activar entre la aplicaci\u00f3n de firma y el cliente que lo solicita. [path] Ruta del protocolo: En la llamada al Cliente @firma, no se admite que figuren rutas. [?query] Consulta del protocolo: Son los par\u00e1metros que deseamos transmitir a la aplicaci\u00f3n. En las llamadas al Cliente @firma, contendr\u00e1 los par\u00e1metros que configuran la operaci\u00f3n indicada en el apartado de [authority]. Los par\u00e1metros se proporcionar\u00e1n con codificaci\u00f3n URL Encoded. En el caso de valores en Base 64, tambi\u00e9n se proporcionar\u00e1n con una codificaci\u00f3n URL SAFE (caracteres \u2018+\u2019 sustituidos por \u2018-\u2019 y caracteres \u2018/\u2019 sustituidos por \u2018_\u2019). [#fragment] Fragmento del protocolo: En la llamada al Cliente @firma, no se admite que figure el apartado de fragmento. Algunos ejemplos de llamadas al Cliente @firma son: afirma://websocket/?v=3 URL de invocaci\u00f3n para iniciar la comunicaci\u00f3n por WebSockets. afirma://sign/?ver=3&op=sign&id=yy1oMJsxoHSoMzLdJywW&key=71313199&stservlet=http%3A%2F%2Fappprueba%3A8080%2Fafirma-signature-storage%2FStorageService&format=CAdES&algorithm=SHA512withRSA&properties=c2VydmVyVXJsPWh0dHA6Ly9hcHBwcnVlYmE6ODA4MC9hZmlybWEtc2VydmVyLXRyaXBoYXNlLXNpZ25lci9TaWduYXR1cmVTZXJ2aWNl&aw=true URL de invocaci\u00f3n para solicitar la firma de un fichero seleccionado por el usuario con la configuraci\u00f3n proporcionada. En los siguientes apartados se describen las URL de invocaci\u00f3n que se pueden utilizar para la comunicaci\u00f3n con el Cliente @firma seg\u00fan el tipo de comunicaci\u00f3n escogido. Comunicaci\u00f3n por WebSockets La comunicaci\u00f3n por WebSockets requiere de una \u00fanica llamada por protocolo al Cliente @firma. Una vez se le invoca, el resto de la comunicaci\u00f3n se realizar\u00e1 a trav\u00e9s del websocket abierto. La composici\u00f3n de la URL para el inicio de la comunicaci\u00f3n por WebSockets es la siguiente: Esquema: afirma Host: websocket Par\u00e1metros: v N\u00famero de versi\u00f3n del protocolo. La versi\u00f3n actual de protocolo que se soporta es: 3 jvc Versi\u00f3n del JavaScript de despliegue que realiza la invocaci\u00f3n. La versi\u00f3n notificada actualmente es la: 2 mcv Opcional. Versi\u00f3n m\u00ednima exigida de AutoFirma (no aplicable a los clientes m\u00f3viles). La URL de llamada al Cliente @firma para el inicio de una comunicaci\u00f3n por WebSocket es la siguiente: afirma://websocket?v=3&jvc=2&mcv=1.7.0 Para ordenar a trav\u00e9s de WebSocket la ejecuci\u00f3n las distintas operaciones del Cliente @firma se enviar\u00e1n al WebSocket nuevas URL con los par\u00e1metros espec\u00edficos para la ejecuci\u00f3n de esa operaci\u00f3n. Se pueden consultar las distintas operaciones en el apartado 7 Peticiones de operaci\u00f3n . Adicionalmente a las peticiones de operaci\u00f3n, se puede enviar a trav\u00e9s del socket la cadena \u201cecho=\u201d para comprobar si el WebSocket est\u00e1 activo. La respuesta a esta petici\u00f3n deber ser la cadena \u201cOK\u201d. La comunicaci\u00f3n por WebSocket s\u00f3lo est\u00e1 soportada por AutoFirma 1.7 y superiores. Comunicaci\u00f3n por sockets La comunicaci\u00f3n por sockets requiere de una \u00fanica llamada por protocolo al Cliente @firma. Una vez se le invoca, el resto de la comunicaci\u00f3n se realizar\u00e1 a trav\u00e9s del socket abierto. La composici\u00f3n de la URL para el inicio de la comunicaci\u00f3n por sockets es la siguiente: Esquema: afirma Host: service Par\u00e1metros: v N\u00famero de versi\u00f3n del protocolo. La versi\u00f3n actual de AutoFirma soporta la versi\u00f3n: 1 jvc Versi\u00f3n del JavaScript de despliegue que realiza la invocaci\u00f3n. La versi\u00f3n notificada actualmente es la: 2 mcv Opcional. Versi\u00f3n m\u00ednima exigida de AutoFirma (no aplicable a los clientes m\u00f3viles). ports Listado de puertos (separados por comas) por los que se va a intentar establecer la comunicaci\u00f3n. idsession Cadena base 64 a modo de identificador de sesi\u00f3n. Todas las peticiones enviadas a trav\u00e9s del socket una vez abierto deber\u00e1n notificar este identificador de sesi\u00f3n. Una URL de ejemplo de llamada al Cliente @firma para el inicio de una comunicaci\u00f3n por sockets es la siguiente: afirma://service?ports=60572,64733,56552&v=1&jvc=2&idsession=CT8Dubp4IDxjSnhxh15A Para ordenar a trav\u00e9s de socket la ejecuci\u00f3n las distintas operaciones del Cliente @firma se enviar\u00e1n al socket nuevas URL con los par\u00e1metros espec\u00edficos para la ejecuci\u00f3n de esa operaci\u00f3n. Se pueden consultar las distintas operaciones en el apartado 7 Peticiones de operaci\u00f3n . La comunicaci\u00f3n por Sockets s\u00f3lo est\u00e1 soportada por AutoFirma. Comunicaci\u00f3n por servidor intermedio La comunicaci\u00f3n por servidor intermedio no permite abrir el cliente de firma y mantener una comunicaci\u00f3n con varios mensajes. Este modo requiere que se habr\u00e1 la aplicaci\u00f3n de firma por cada petici\u00f3n, motivo por el cual no permite el uso de algunas de las funciones auxiliares, ya que no est\u00e1 justificado el que se abra la aplicaci\u00f3n s\u00f3lo por ellas. Tampoco es adecuada para casos de uso en los que se realizan m\u00faltiples aplicaciones simultaneas. La comunicaci\u00f3n por servidor intermedio tiene las siguientes ventajas: Es compatible con los clientes m\u00f3viles Android e iOS. No requieren que en la instalaci\u00f3n de la aplicaci\u00f3n se instale un certificado SSL en el almac\u00e9n de confianza de los navegadores. Por el contrario, presenta las siguientes desventajas frente a las opciones anteriores: Requiere desplegar los servicios de intercambio de datos en un servidor accesible por la aplicaci\u00f3n cliente y la aplicaci\u00f3n de firma. M\u00e1s lento. Puede tener alg\u00fan recargo para el usuario si el uso de la red para la conexi\u00f3n con el servidor tiene un gasto asociado (como en el caso de la comunicaci\u00f3n por datos m\u00f3viles). No es apto para ser usado recurrentemente. Algunas aplicaciones, incluso, pueden haber establecido restricciones de seguridad que bloqueen las llamadas, como Google Chrome que establece un tiempo m\u00e1ximo que puede transcurrir entre una interacci\u00f3n del usuario y la llamada por protocolo. La principal particularidad de las llamadas para el uso del servidor intermedio es que requieren que se a la aplicaci\u00f3n de firma las URL de los servicios para el guardado del resultado de la operaci\u00f3n y, si aplica, la descarga de los datos de la petici\u00f3n. Adicionalmente, pueden darse dos casos de uso: Todos los par\u00e1metros de la operaci\u00f3n pueden enviarse en la URL. En este caso, se llama a la aplicaci\u00f3n de firma utilizando la URL correspondiente a la operaci\u00f3n que deseemos proporcion\u00e1ndole todos los par\u00e1metros. Este puede ser el caso de uso normal en muchos contextos, pero no en otros en los que se establece un tama\u00f1o m\u00e1ximo de la URL de entrada. Esto ocurre, por ejemplo, con los navegadores web. Los par\u00e1metros de la operaci\u00f3n no pueden enviarse en la URL. En este caso, los par\u00e1metros a enviar conforman una URL demasiado grande para ser transmitida directamente. Para poder transferir los datos a la aplicaci\u00f3n de firma, ser\u00e1 necesario que se suban estos datos al servidor intermedio y luego se llame a la aplicaci\u00f3n de firma para que se los descargue de ah\u00ed y pueda procesarlos a continuaci\u00f3n. La comunicaci\u00f3n con el servidor intermedio es as\u00edncrona, dado que la aplicaci\u00f3n cliente debe consultar activamente el servidor intermedio a trav\u00e9s del servicio de recuperaci\u00f3n de datos para saber si la operaci\u00f3n se ha procesado o no. En este caso, adem\u00e1s de la respuesta con el resultado de la operaci\u00f3n, la aplicaci\u00f3n podr\u00eda recuperar tambi\u00e9n alguna de las siguientes respuestas: Cadena que empieza por \u201cerr-06\u201d: Se\u00f1ala que el servidor intermedio no ha recibido el resultado de la operaci\u00f3n. La aplicaci\u00f3n cliente deber\u00eda esperar un poco m\u00e1s antes de volver a reintentar recuperar el resultado de la operaci\u00f3n. Cadena que empieza por \u201c#wait\u201d: Se\u00f1ala que la aplicaci\u00f3n de firma todav\u00eda no tiene el resultado de la aplicaci\u00f3n, pero ha indicado que la petici\u00f3n se est\u00e1 en proces\u00f3 y que la aplicaci\u00f3n cliente deber\u00eda seguir esperando el resultado. Este valor se usar\u00e1 cuando se haya invocado a AutoFirma con el par\u00e1metro \u201caw\u201d para que el Cliente @firma (solo soportado por AutoFirma) vaya notificando peri\u00f3dicamente si la aplicaci\u00f3n cliente deber\u00eda seguir esperando el resultado. URL con par\u00e1metros de operaci\u00f3n En el caso de llamar al Cliente @firma con los par\u00e1metros de la operaci\u00f3n, pasaremos todos los par\u00e1metros necesarios para la propia operaci\u00f3n m\u00e1s los par\u00e1metros necesarios para guardar el resultado en el servidor intermedio. La composici\u00f3n de la URL para este tipo de petici\u00f3n ser\u00eda la siguiente: Esquema: afirma Host: C\u00f3digo de la operaci\u00f3n en cuesti\u00f3n Par\u00e1metros: ver N\u00famero de versi\u00f3n del protocolo. La versi\u00f3n actual de protocolo que se soporta es: 3 jvc Versi\u00f3n del JavaScript de despliegue que realiza la invocaci\u00f3n. La versi\u00f3n notificada actualmente es la: 2 mcv Opcional. Versi\u00f3n m\u00ednima exigida de AutoFirma (no aplicable a los clientes m\u00f3viles). id Identificador de la transacci\u00f3n. Es el identificador con el que debe guardarse la respuesta en el servidor intermedio. Para m\u00e1s informaci\u00f3n sobre el guardado y la recuperaci\u00f3n de datos del servidor intermedio, consulte el apartado ANEXO I Servidor intermedio . stservlet URL del servicio para el guardado del resultado en el servidor intermedio. Para m\u00e1s informaci\u00f3n sobre el guardado y la recuperaci\u00f3n de datos del servidor intermedio, consulte el apartado ANEXO I Servidor intermedio . key Clave DES para el cifrado del fichero de configuraci\u00f3n. Los datos que se env\u00eden al servidor intermedio se deben cifrar con esta clave DES. La aplicaci\u00f3n cliente despu\u00e9s deber\u00e1 usar esta misma clave para descifrar el resultado. aw Booleano que indica si la aplicaci\u00f3n de firma debe notificar peri\u00f3dicamente a trav\u00e9s del servidor intermedio si a\u00fan est\u00e1 operando. Esto es \u00fatil para evitar esperar indefinidamente el resultado de la operaci\u00f3n, cuando es posible que esta haya fallado por alg\u00fan motivo y no se haya podio notificar a trav\u00e9s del servidor intermedio. Por ejemplo, si la aplicaci\u00f3n de firma no recibi\u00f3 la petici\u00f3n o si no pudo enviar el resultado al servidor intermedio. Por defecto, false. Par\u00e1metros de operaci\u00f3n Par\u00e1metros propios del tipo de operaci\u00f3n que deseemos realizar. Un ejemplo de URL para la invocaci\u00f3n de una operaci\u00f3n de firma ser\u00eda: afirma://sign/?jvc=2&mcv=1.7.0&ver=1&op=sign&id=llUQSzruWssVQxIeFNtV&key=72993139&stservlet=https%3A%2F%2Fvalide.redsara.es%2FfirmaMovil%2Fafirma-signature-storage%2FStorageService&format=CAdES&algorithm=SHA256withRSA&properties=bW9kZT1leHBsaWNpdApzZXJ2ZXJVcmw9aHR0cHM6Ly92YWxpZGUucmVkc2FyYS5lcy9maXJtYU1vdmlsL2FmaXJtYS1zZXJ2ZXItdHJpcGhhc2Utc2lnbmVyL1NpZ25hdHVyZVNlcnZpY2U%3D&aw=true Las operaciones disponibles y sus par\u00e1metros est\u00e1n indicadas en el apartado 7 Peticiones de operaci\u00f3n . URL sin par\u00e1metros de operaci\u00f3n En el caso de llamar al Cliente @firma sin los par\u00e1metros de la operaci\u00f3n, deberemos haber enviado estos par\u00e1metros previamente al servidor intermedio, y pasar al Cliente @firma los par\u00e1metros necesarios para que se los descargue. La composici\u00f3n de la URL para este tipo de petici\u00f3n ser\u00eda la siguiente: Esquema: afirma Host: C\u00f3digo de la operaci\u00f3n en cuesti\u00f3n Par\u00e1metros: fileId Identificador asignado al fichero de configuraci\u00f3n en el servidor remoto. Este es el identificador que se le asigna a la configuraci\u00f3n cuando se env\u00eda a almacenar en el servidor intermedio. Para m\u00e1s informaci\u00f3n sobre el guardado y la recuperaci\u00f3n de datos del servidor intermedio, consulte el apartado ANEXO I Servidor intermedio . rtservlet URL del servicio para la recuperaci\u00f3n del fichero de configuraci\u00f3n. Para m\u00e1s informaci\u00f3n sobre el guardado y la recuperaci\u00f3n de datos del servidor intermedio, consulte el apartado ANEXO I Servidor intermedio . key Clave DES para el descifrado del fichero de configuraci\u00f3n. Los datos que se env\u00edan al servidor intermedio deber\u00edan cifrarse con un cifrado DES. En caso de hacerlo, en este par\u00e1metro se deber\u00eda indicar la clave empleada (que deber\u00eda ser una cadena de texto). Un ejemplo de URL de invocaci\u00f3n ser\u00eda: afirma://sign/?fileid=1mlL13MJMKMU4KMUI4Co&rtservlet=https%3A%2F%2Fvalide.redsara.es%2FfirmaMovil%2Fafirma-signature-retriever%2FRetrieveService&key=56542304 Los par\u00e1metros que se deber\u00e1n enviar al servidor intermedio son los mismos que usar\u00edamos si todos los par\u00e1metros se enviasen en la URL de petici\u00f3n. Consulte el apartado anterior para comprobar los par\u00e1metros necesario y el apartado 7 Peticiones de operaci\u00f3n para ver el listado de operaciones disponibles y los par\u00e1metros que estas necesitan. Para el env\u00edo de los datos al servidor, los estructuraremos en forma de fichero XML con el formato: <COD_OPERACION> <e k=\u201dCLAVE1\u201d v=\u201dVALOR1\u201d /> <e k=\u201dCLAVE2\u201d v=\u201dVALOR2\u201d /> \u2026 <e k=\u201dCLAVEn\u201d v=\u201dVALORn\u201d /> </COD_OPERACION> En donde: COD_OPERACION : C\u00f3digo de la operaci\u00f3n que se configura. CLAVEx : Nombre del par\u00e1metro del listado de par\u00e1metros de configuraci\u00f3n de la operaci\u00f3n. VALORx : Valor que deseemos asignar a ese par\u00e1metro. Un ejemplo de XML es: <sign> <e k=\"id\" v=\"000987508929\"/> <e k=\"key\" v=\"39772569\"/> <e k=\"stservlet\" v=\"http://192.168.177.173:8080/afirma-signature-storage/StorageService\"/> <e k=\"format\" v=\"CAdES\"/> <e k=\"algorithm\" v=\"SHA1withRSA\"/> <e k=\"properties\" v=\"c2VydmVyVXJsPWh0dHA6Ly8xOTIuMTY4LjE3Ny4xNzM6ODA4MC9hZmlybWEtc2VydmVyLXRyaXBoYXNlLXNpZ25lci9TaWduYXR1cmVTZXJ2aWNlCgkJIA%3D%3D\"/> <e k=\"dat\" v=\"ZnVsYW5pdG9AYXRvcy5uZXQ%3D\"/> </sign> Este XML se enviar\u00e1, codificado en base 64 al mismo servicio de almacenamiento cuya ruta se establece a trav\u00e9s del par\u00e1metro \u201cstservlet\u201d. Esta cadena a su vez puede estar cifrada con una clave DES (la proporcionada en el par\u00e1metro \u201ckey\u201d de la llamada) y codificada en base 64. Es importante recordar que no todas las operaciones del Cliente @firma pueden ejecutarse cuando la comunicaci\u00f3n se realiza a trav\u00e9s de servidor intermedio. Operaciones del Cliente @firma Aqu\u00ed se listan todas las operaciones soportadas por el Cliente @firma cuando se le invoca por protocolo y los par\u00e1metros necesarios para configurar dichas operaciones. Algunas de ellas, sin embargo, no est\u00e1n disponibles en todas las aplicaciones. El listado completo de operaciones es el siguiente: Firma. Cofirma. Contrafirma. Firma de lote. S\u00f3lo disponible en AutoFirma. Selecci\u00f3n de certificado. Guardado. S\u00f3lo disponible en AutoFirma y la app de firma Android. Firma y guardado. S\u00f3lo disponible en AutoFirma. Carga de datos. S\u00f3lo disponible en AutoFirma. Recuperaci\u00f3n del log. S\u00f3lo disponible en AutoFirma. Los par\u00e1metros de las aplicaciones siempre se proporcionar\u00e1n codificados para URL (\u201c URL Encoded \u201d). Si el valor de un par\u00e1metro se expresase en forma de cadena Base 64, \u00e9sta siempre se codificar\u00e1 en forma URL SAFE (el s\u00edmbolo \u2018+\u2019 se sustituye por \u2018-\u2019 y el s\u00edmbolo \u2018/\u2019 se sustituye por \u2018_\u2019). Operaci\u00f3n de firma ( sign ) Operaci\u00f3n para la ejecuci\u00f3n de una firma electr\u00f3nica. C\u00f3digo de operaci\u00f3n: sign Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. En este caso, ser\u00e1: sign dat Datos a firmar codificados en Base 64 URL SAFE. Si no se indican y la aplicaci\u00f3n es AutoFirma, se permitir\u00e1 al usuario seleccionar un fichero. format Formato de firma. algorithm Algoritmo de firma. properties Propiedades de configuraci\u00f3n espec\u00edficas del formato de firma y configuraci\u00f3n de la operaci\u00f3n. Se proporcionar\u00e1n en forma cadena compuesta por duplas propiedad=valor separadas por \u2018\\n\u2019. La cadena resultante se proporcionar\u00e1 en Base 64 URL SAFE. ksb64 (opcional) Configuraci\u00f3n del almac\u00e9n de claves a utilizar codificada en base 64. S\u00f3lo se procesa en AutoFirma. sticky (opcional) Valor booleano que indica si debe recordarse el certificado de firma que se seleccione o, si ya se recuerda uno anterior, si debe usarse ese autom\u00e1ticamente (true); o si se debe permitir seleccionar un nuevo certificado y olvidar cualquiera que se recuerde (false). S\u00f3lo se procesa en AutoFirma. resetsticky (opcional) Valor booleano que indica si debe olvidarse cualquier certificado previamente seleccionado independientemente del valor del par\u00e1metro sticky (true), o si no (false, valor por defecto). Este valor se puede utilizar junto con sticky si ya ten\u00edamos un certificado seleccionado y queremos olvidar ese y recordar el nuevo que se seleccione. S\u00f3lo se procesa en AutoFirma. Para ver los formatos, algoritmos, par\u00e1metros de configuraci\u00f3n del formato de firma y los almacenes de claves a configurar, consulte el manual del integrador del Cliente @firma. En caso de finalizar correctamente, esta operaci\u00f3n obtiene como resultado una cadena con el formato: CERT_B64|FIRMA_B64|FILENAME_B64 En donde: CERT_B64 Certificado de firma utilizado codificado en Base 64 URL SAFE. FIRMA_B64 Firma generada codificada en Base 64 URL SAFE. FILENAME_B64 Si no se indicaron los datos a firmar y el usuario tuvo que seleccionar un fichero, este ser\u00e1 el nombre del fichero seleccionado codificado en Base 64 URL SAFE. Este valor solo se devolver\u00e1 en AutoFirma 1.7 y superiores. En caso de no aparecer, tampoco lo har\u00e1 el car\u00e1cter separador \u2018|\u2019. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de firma es: afirma://sign/?ver=1&op=sign&id=llUQSzruWssVQxIeFNtV&format=CAdES&algorithm=SHA256withRSA&properties=bW9kZT1leHBsaWNpdApzZXJ2ZXJVcmw9aHR0cHM6Ly92YWxpZGUucmVkc2FyYS5lcy9maXJtYU1vdmlsL2FmaXJtYS1zZXJ2ZXItdHJpcGhhc2Utc2lnbmVyL1NpZ25hdHVyZVNlcnZpY2U%3D Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n. Operaci\u00f3n de cofirma o firma en paralelo ( cosign ) Operaci\u00f3n para la ejecuci\u00f3n de una firma electr\u00f3nica. C\u00f3digo de operaci\u00f3n: cosign Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. En este caso, ser\u00e1: cosign dat Firma a cofirmar codificada Base64 URL SAFE. Si no se indican y la aplicaci\u00f3n es AutoFirma, se permitir\u00e1 al usuario seleccionar un fichero. format Formato de firma. algorithm Algoritmo de firma. properties Propiedades de configuraci\u00f3n espec\u00edficas del formato de firma y configuraci\u00f3n de la operaci\u00f3n. Se proporcionar\u00e1n en forma cadena compuesta por duplas propiedad=valor separadas por \u2018\\n\u2019. La cadena resultante se proporcionar\u00e1 en Base 64 URL SAFE. ksb64 (opcional) Configuraci\u00f3n del almac\u00e9n de claves a utilizar codificada en base 64. S\u00f3lo se procesa en AutoFirma. sticky (opcional) Valor booleano que indica si debe recordarse el certificado de firma que se seleccione o, si ya se recuerda uno anterior, si debe usarse ese autom\u00e1ticamente (true); o si se debe permitir seleccionar un nuevo certificado y olvidar cualquiera que se recuerde (false). S\u00f3lo se procesa en AutoFirma. resetsticky (opcional) Valor booleano que indica si debe olvidarse cualquier certificado previamente seleccionado independientemente del valor del par\u00e1metro sticky (true), o si no (false, valor por defecto). Este valor se puede utilizar junto con sticky si ya ten\u00edamos un certificado seleccionado y queremos olvidar ese y recordar el nuevo que se seleccione. S\u00f3lo se procesa en AutoFirma. Para ver los formatos, algoritmos, par\u00e1metros de configuraci\u00f3n del formato de firma y los almacenes de claves a configurar, consulte el manual del integrador del Cliente @firma. En caso de finalizar correctamente, esta operaci\u00f3n obtiene como resultado una cadena con el formato: CERT_B64|COFIRMA_B64|FILENAME_B64 En donde: CERT_B64 Certificado de firma utilizado codificado en Base 64 URL SAFE. COFIRMA_B64 Cofirma generada codificada en Base 64 URL SAFE. FILENAME_B64 Si no se indic\u00f3 una firma a cofirmar y el usuario tuvo que seleccionar un fichero, este ser\u00e1 el nombre del fichero seleccionado codificado en Base 64 URL SAFE. Este valor solo se devolver\u00e1 en AutoFirma 1.7 y superiores. En caso de no aparecer, tampoco lo har\u00e1 el car\u00e1cter separador \u2018|\u2019. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de cofirma (en la que se omite parte del par\u00e1metro de datos por legibilidad) es: afirma://cosign?op=cosign&algorithm=SHA512withRSA&format=XAdES&properties=c2VydmVyVXJsPWh0dHA6Ly9hcHBwcnVlYmE6ODA4MC9hZmlybWEtc2VydmVyLXRyaXBoYXNlLXNpZ25lci9TaWduYXR1cmVTZXJ2aWNl&sticky=false&dat=PD94bWwgdmVyc2lv\u2026B-PC9wcm9qZWN0Pg== Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n. Operaci\u00f3n de contrafirma o firma en cascada ( contersign ) Operaci\u00f3n para la ejecuci\u00f3n de una firma electr\u00f3nica. C\u00f3digo de operaci\u00f3n: countersign Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. En este caso, ser\u00e1: countersign dat Firma a contrafirmar codificada en Base64 URL SAFE. Si no se indican y la aplicaci\u00f3n es AutoFirma, se permitir\u00e1 al usuario seleccionar un fichero. format Formato de firma. algorithm Algoritmo de firma. properties Propiedades de configuraci\u00f3n espec\u00edficas del formato de firma y configuraci\u00f3n de la operaci\u00f3n. Se proporcionar\u00e1n en forma cadena compuesta por duplas propiedad=valor separadas por \u2018\\n\u2019. La cadena resultante se proporcionar\u00e1 en Base 64 URL SAFE. Para la operaci\u00f3n de contrafirma, se puede indicar la propiedad \u201ctarget\u201d con el valor \u201ctree\u201d para indicar que se desea contrafirmar todo el \u00e1rbol de firmas o con cualquier otro valor para indicar que s\u00f3lo se deben contrafirmas los nodos hoja. ksb64 (opcional) Configuraci\u00f3n del almac\u00e9n de claves a utilizar codificada en base 64. S\u00f3lo se procesa en AutoFirma. sticky (opcional) Valor booleano que indica si debe recordarse el certificado de firma que se seleccione o, si ya se recuerda uno anterior, si debe usarse ese autom\u00e1ticamente (true); o si se debe permitir seleccionar un nuevo certificado y olvidar cualquiera que se recuerde (false). S\u00f3lo se procesa en AutoFirma. resetsticky (opcional) Valor booleano que indica si debe olvidarse cualquier certificado previamente seleccionado independientemente del valor del par\u00e1metro sticky (true), o si no (false, valor por defecto). Este valor se puede utilizar junto con sticky si ya ten\u00edamos un certificado seleccionado y queremos olvidar ese y recordar el nuevo que se seleccione. S\u00f3lo se procesa en AutoFirma. Para ver los formatos, algoritmos, par\u00e1metros de configuraci\u00f3n del formato de firma y los almacenes de claves a configurar, consulte el manual del integrador del Cliente @firma. En caso de finalizar correctamente, esta operaci\u00f3n obtiene como resultado una cadena con el formato: CERT_B64|CONTRAFIRMA_B64|FILENAME_B64 En donde: CERT_B64 Certificado de firma utilizado codificado en Base 64 URL SAFE. CONTRAFIRMA_B64 Contrafirma generada codificada en Base 64 URL SAFE. FILENAME_B64 Si no se indic\u00f3 una firma a contrafirmar y el usuario tuvo que seleccionar un fichero, este ser\u00e1 el nombre del fichero seleccionado codificado en Base 64 URL SAFE. Este valor solo se devolver\u00e1 en AutoFirma 1.7 y superiores. En caso de no aparecer, tampoco lo har\u00e1 el car\u00e1cter separador \u2018|\u2019. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de contrafirma (en la que se omite parte del par\u00e1metro de datos por legibilidad) es: afirma://countersign?op=countersign&algorithm=SHA512withRSA&format=XAdES&properties=c2VydmVyVXJsPWh0dHA6Ly9hcHBwcnVlYmE6ODA4MC9hZmlybWEtc2VydmVyLXRyaXBoYXNlLXNpZ25lci9TaWduYXR1cmVTZXJ2aWNl&sticky=false&dat=C9hZmlybWEtc2Vy\u2026YXR1cmU-PC9wcm9qZWN0Pg== Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n. Firma en lote ( batch ) Operaci\u00f3n para la firma, cofirma o contrafirma de m\u00faltiples documentos en una \u00fanica operaci\u00f3n. Esta operaci\u00f3n s\u00f3lo es compatible con AutoFirma. C\u00f3digo de operaci\u00f3n: batch Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. En este caso, ser\u00e1: batch dat XML codificado en Base64 URL SAFE con la configuraci\u00f3n del lote de firma. Se consultar el formato del XML en el manual del integrador del Cliente @firma. batchpresignerurl URL del servicio de prefirma de lotes (disponible junto al servicio de firma trif\u00e1sica). batchpostsignerurl URL del servicio de postfirma de lotes (disponible junto al servicio de firma trif\u00e1sica). needcert Booleano para indicar si se debe devolver tambi\u00e9n en el resultado el certificado utilizado en la operaci\u00f3n (true) o si no (false, valor por defecto). ksb64 (opcional) Configuraci\u00f3n del almac\u00e9n de claves a utilizar codificada en base 64. S\u00f3lo se procesa en AutoFirma. sticky (opcional) Valor booleano que indica si debe recordarse el certificado de firma que se seleccione o, si ya se recuerda uno anterior, si debe usarse ese autom\u00e1ticamente (true); o si se debe permitir seleccionar un nuevo certificado y olvidar cualquiera que se recuerde (false). S\u00f3lo se procesa en AutoFirma. resetsticky (opcional) Valor booleano que indica si debe olvidarse cualquier certificado previamente seleccionado independientemente del valor del par\u00e1metro sticky (true), o si no (false, valor por defecto). Este valor se puede utilizar junto con sticky si ya ten\u00edamos un certificado seleccionado y queremos olvidar ese y recordar el nuevo que se seleccione. S\u00f3lo se procesa en AutoFirma. Para ver los formatos, algoritmos, par\u00e1metros de configuraci\u00f3n del formato de firma y los almacenes de claves a configurar, consulte el manual del integrador del Cliente @firma. En caso de finalizar correctamente, esta operaci\u00f3n obtiene como resultado una cadena con el formato: XML_B64|CERT_B64 En donde: XML_B64 XML codificado en Base 64 URL SAFE con el resultado de la firma del lote. Se consultar el formato del XML en el manual del integrador del Cliente @firma. CERT_B64 Certificado de firma utilizado codificado en Base 64 URL SAFE. Este valor solo se devolver\u00e1 en AutoFirma 1.7 y superiores. En caso de no aparecer, tampoco lo har\u00e1 el car\u00e1cter separador \u2018|\u2019. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de firma de lotes (en la que por legibilidad se omite parte del par\u00e1metro de datos) es: afirma://batch?op=batch&batchpresignerurl=http%3A%2F%2Fappprueba%3A8080%2Fafirma-server-triphase-signer%2FBatchPresigner&batchpostsignerurl=http%3A%2F%2Fappprueba%3A8080%2Fafirma-server-triphase-signer%2FBatchPostsigner&properties=c2VydmVyVXJsPWh0dHA6Ly9hcHBwcnVlYmE6ODA4MC9hZmlybWEtc2VydmVyLXRyaXBoYXNlLXNpZ25lci9TaWduYXR1cmVTZXJ2aWNl&sticky=false&needcert=true&dat=PD94bWwgdmVyc2lvbj0iMS4wIi\u2026WduPgo8L3NpZ25iYXRjaD4= Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n. Selecci\u00f3n de certificado ( selectcert ) Operaci\u00f3n para la obtenci\u00f3n de un certificado de firma. C\u00f3digo de operaci\u00f3n: selectcert Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. En este caso, ser\u00e1: selectcert ksb64 (opcional) Configuraci\u00f3n del almac\u00e9n de claves a utilizar codificada en base 64. S\u00f3lo se procesa en AutoFirma. properties (opcional) Propiedades con configuraci\u00f3n de filtros de certificados. sticky (opcional) Valor booleano que indica si debe recordarse el certificado de firma que se seleccione o, si ya se recuerda uno anterior, si debe usarse ese autom\u00e1ticamente (true); o si se debe permitir seleccionar un nuevo certificado y olvidar cualquiera que se recuerde (false). S\u00f3lo se procesa en AutoFirma. resetsticky (opcional) Valor booleano que indica si debe olvidarse cualquier certificado previamente seleccionado independientemente del valor del par\u00e1metro sticky (true), o si no (false, valor por defecto). Este valor se puede utilizar junto con sticky si ya ten\u00edamos un certificado seleccionado y queremos olvidar ese y recordar el nuevo que se seleccione. S\u00f3lo se procesa en AutoFirma. Para ver los formatos, algoritmos, par\u00e1metros de configuraci\u00f3n del formato de firma y los almacenes de claves a configurar, consulte el manual del integrador del Cliente @firma. En caso de finalizar correctamente, esta operaci\u00f3n obtiene como resultado el certificado seleccionado codificado en Base 64 URL SAFE. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de selecci\u00f3n de certificado es: afirma://selectcert?op=selectcert&properties=ZmlsdGVycz1ub25leHBpcmVkOmZhbHNl&sticky=true Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n. Operaci\u00f3n de guardado ( save ) Operaci\u00f3n para el guardado de datos en disco. Esta operaci\u00f3n s\u00f3lo est\u00e1 soportada por AutoFirma y el Cliente de firma Android. C\u00f3digo de operaci\u00f3n: save Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. En este caso, ser\u00e1: save dat Datos a guardar codificados en Base64 URL SAFE. title (opcional) T\u00edtulo del di\u00e1logo de guardado. filename (opcional) Nombre propuesto para el fichero que contendr\u00e1 los datos a guardar. exts (opcional) Lista de extensiones, separadas por coma, propuestas para el fichero. desc (opcional) Descripci\u00f3n del tipo de fichero. En caso de finalizar correctamente, esta operaci\u00f3n obtiene como resultado el valor \u201cOK\u201d o \u201cOK\\r\\n\u201d. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de guardado es: afirma://save?op=save&title=Guardar%20firma%20electr%C3%B3nica&dat=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiID8-CjxzaWducz4KIDxzaWducmVzdWx0IGlkPSI3NzAwMzAyIiByZXN1bHQ9IkRPTkVfQU5EX1NBVkVEIiBkZXNjcmlwdGlvbj0iIi8-CiA8c2lnbnJlc3VsdCBpZD0iNzAzOTg2OSIgcmVzdWx0PSJET05FX0FORF9TQVZFRCIgZGVzY3JpcHRpb249IiIvPgogPHNpZ25yZXN1bHQgaWQ9Ijg5ODMxMjIiIHJlc3VsdD0iRE9ORV9BTkRfU0FWRUQiIGRlc2NyaXB0aW9uPSIiLz4KIDxzaWducmVzdWx0IGlkPSI3OTk1MDciIHJlc3VsdD0iRE9ORV9BTkRfU0FWRUQiIGRlc2NyaXB0aW9uPSIiLz4KIDxzaWducmVzdWx0IGlkPSIzNDc1MjYzIiByZXN1bHQ9IkRPTkVfQU5EX1NBVkVEIiBkZXNjcmlwdGlvbj0iIi8-CiA8c2lnbnJlc3VsdCBpZD0iMTk3MjI5NCIgcmVzdWx0PSJET05FX0FORF9TQVZFRCIgZGVzY3JpcHRpb249IiIvPgogPHNpZ25yZXN1bHQgaWQ9IjQxNTk2MzEiIHJlc3VsdD0iRE9ORV9BTkRfU0FWRUQiIGRlc2NyaXB0aW9uPSIiLz4KIDxzaWducmVzdWx0IGlkPSIxMzA0NTYxIiByZXN1bHQ9IkRPTkVfQU5EX1NBVkVEIiBkZXNjcmlwdGlvbj0iIi8-Cjwvc2lnbnM- Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n. Carga de datos ( load ) Operaci\u00f3n para la carga de datos. Esta operaci\u00f3n s\u00f3lo es compatible con AutoFirma. C\u00f3digo de operaci\u00f3n: load Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. En este caso, ser\u00e1: load title (opcional) T\u00edtulo del di\u00e1logo de guardado. filePath (opcional) Ruta del directorio por defecto. exts (opcional) Lista de extensiones, separadas por coma, propuestas para el fichero. desc (opcional) Descripci\u00f3n del tipo de fichero. multiload (opcional) Booleano que indica si se debe permitir cargar m\u00e1s de un fichero (true) o s\u00f3lo uno (false, valor por defecto). En caso de finalizar correctamente, esta operaci\u00f3n obtiene como resultado los datos cargados codificados en Base 64 URL SAFE. En caso de ser una carga de m\u00faltiples ficheros, se recibir\u00e1 el contenido de cada uno de ellos codificado en Base64 URL SAFE y separados por el caracter \u2018|\u2019. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de carga de datos es: afirma://load?op=load&title=&exts=csig%2Cxsig%2Csig%2Cpdf%2Cxml&desc=Fichero%20de%20firma%20electr%C3%B3nica&multiload=false Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n. Firma y guardado ( signandsave ) Operaci\u00f3n para la ejecuci\u00f3n de una firma, cofirma o contrafirma electr\u00f3nica seguido del guardado del fichero resultante. Esta operaci\u00f3n s\u00f3lo es compatible con AutoFirma. C\u00f3digo de operaci\u00f3n: signandsave Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. Debe ser: signandsave cop Operaci\u00f3n de firma a ejecutar. Puede ser sign, cosign o countersign, seg\u00fan se desee realizar una firma, cofirma o contrafirma, respectivamente. dat Datos a firmar/multifirmar codificados en Base 64 URL SAFE. Si no se indican, se permitir\u00e1 al usuario seleccionar un fichero. format Formato de firma. algorithm Algoritmo de firma. properties Propiedades de configuraci\u00f3n espec\u00edficas del formato de firma. Se proporcionar\u00e1n en forma cadena compuesta por duplas propiedad=valor separadas por \u2018\\n\u2019. La cadena resultante se proporcionar\u00e1 en Base 64 URL SAFE. filename (opcional) Nombre propuesto para el fichero de salida. ksb64 (opcional) Configuraci\u00f3n del almac\u00e9n de claves a utilizar codificada en base 64. S\u00f3lo se procesa en AutoFirma. sticky (opcional) Valor booleano que indica si debe recordarse el certificado de firma que se seleccione o, si ya se recuerda uno anterior, si debe usarse ese autom\u00e1ticamente (true); o si se debe permitir seleccionar un nuevo certificado y olvidar cualquiera que se recuerde (false). S\u00f3lo se procesa en AutoFirma. resetsticky (opcional) Valor booleano que indica si debe olvidarse cualquier certificado previamente seleccionado independientemente del valor del par\u00e1metro sticky (true), o si no (false, valor por defecto). Este valor se puede utilizar junto con sticky si ya ten\u00edamos un certificado seleccionado y queremos olvidar ese y recordar el nuevo que se seleccione. S\u00f3lo se procesa en AutoFirma. En caso de \u00e9xito, esta operaci\u00f3n obtiene como resultado una cadena con el formato: CERT_B64|FIRMA_B64|FILENAME_B64 En donde: CERT_B64 Certificado de firma utilizado codificado en Base 64 URL SAFE. FIRMA_B64 Firma generada codificada en Base 64 URL SAFE. FILENAME_B64 Si no se indicaron los datos a firmar y el usuario tuvo que seleccionar un fichero, este ser\u00e1 el nombre del fichero seleccionado codificado en Base 64 URL SAFE. Este valor solo se devolver\u00e1 en AutoFirma 1.7 y superiores. En caso de no aparecer, tampoco lo har\u00e1 el car\u00e1cter separador \u2018|\u2019. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de firma y guardado es: afirma://signandsave?op=signandsave&cop=cosign&algorithm=SHA512withRSA&format=XAdES&properties=c2VydmVyVXJsPWh0dHA6Ly9hcHBwcnVlYmE6ODA4MC9hZmlybWEtc2VydmVyLXRyaXBoYXNlLXNpZ25lci9TaWduYXR1cmVTZXJ2aWNl&sticky=false&filename=cofirma.xsig Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n. Recuperaci\u00f3n del log de la aplicaci\u00f3n ( getLog ) Operaci\u00f3n para la recuperaci\u00f3n de las trazas de ejecuci\u00f3n de la aplicaci\u00f3n de firma. Esta operaci\u00f3n s\u00f3lo es compatible con AutoFirma. C\u00f3digo de operaci\u00f3n: getlog Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. Debe ser: getlog En caso de finalizar correctamente, se devuelve la cadena de texto con las trazas de ejecuci\u00f3n. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. La llamada a la operaci\u00f3n se realiza con la petici\u00f3n: afirma://getLog?op=getLog Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n. Servidor intermedio El servidor intermedio ser\u00e1 un servidor proporcionado por el organismo que hace integra el uso del Cliente @firma en su aplicaci\u00f3n y en el que se guardar\u00e1n temporalmente los datos que se transfieren entre la aplicaci\u00f3n cliente y la aplicaci\u00f3n de firma (Cliente @firma) cuando se utilice el modo de comunicaci\u00f3n a trav\u00e9s de servidor intermedio. Para el uso de este servidor se distribuye en el kit de integraci\u00f3n del Cliente @firma dos archivos WAR para la ejecuci\u00f3n de las operaciones de guardado y carga de datos del servidor: afirma-signature-storage.war Archivo con el servlet para la subida de datos al servidor intermedio. afirma-signature-retriever.war Archivo con el servlet para la descarga de datos del servidor intermedio. Guardado de datos La subida de datos al servidor intermedio se realiza mediante la llamada a la URL del servicio de guardado junto con varios par\u00e1metros de configuraci\u00f3n. El nombre por defecto del servicio de guardado es: StorageService Los par\u00e1metros necesarios son: op Operaci\u00f3n que se desea realizar. Se establecer\u00e1 el valor: put v Versi\u00f3n del servicio. Actualmente se debe configurar el valor: 1_0 id Identificador aleatorio asignado a los datos que se almacenan. dat Datos que se desean almacenar en base 64 URL SAFE y URL Encoded. Por ejemplo: http://miapp.com/afirma/afirma-signature-storage /StorageService ? op =put& v =1_0& id =000987508929& dat =ZnVsYW5pdG9AYXRvcy5uZXQ%3D Recuperaci\u00f3n de datos La descarga de datos del servidor intermedio se realiza mediante la llamada a la URL del servicio de recuperaci\u00f3n junto con varios par\u00e1metros de configuraci\u00f3n. El nombre por defecto del servicio de guardado es: RetrieveService Los par\u00e1metros necesarios son: op Operaci\u00f3n que se desea realizar. Se establecer\u00e1 el valor: get v Versi\u00f3n del servicio. Actualmente se debe configurar el valor: 1_0 id Identificador que se utiliz\u00f3 para el almacenamiento de los datos. Por ejemplo: http://miapp.com/ afirma/ afirma-signature-retriever /RetrieveService ? op =get& v =1_0& id =000987508929 < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"Sintaxis invocacion Cliente Afirma"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#introduccion","text":"El Cliente @firma es un conjunto de aplicaciones cliente que permiten al usuario ejecutar operaciones de firma con sus certificados electr\u00f3nicos locales. Las aplicaciones englobadas en la denominaci\u00f3n Cliente @firma son: AutoFirma: Aplicaci\u00f3n de escritorio para sistemas Windows, Linux y macOS. Puede ser invocada desde una aplicaci\u00f3n externa para la generaci\u00f3n de firmas electr\u00f3nicas o generar firmas directamente desde su interfaz gr\u00e1fica. Permite el uso de distintos almacenes de certificados del sistema, almacenes PKCS#12/JKS y tarjetas inteligentes. Cliente m\u00f3vil Android: Aplicaci\u00f3n de firma para sistemas Android. Puede ser invocada desde una aplicaci\u00f3n externa para la generaci\u00f3n de firmas electr\u00f3nicas o generar firmas directamente desde su interfaz gr\u00e1fica. Utiliza los certificados del almac\u00e9n del sistema. Cliente m\u00f3vil iOS: Aplicaci\u00f3n de firma para sistemas iOS. Puede ser invocada desde una aplicaci\u00f3n externa para la generaci\u00f3n de firmas electr\u00f3nicas. Utiliza certificados previamente importados en la aplicaci\u00f3n a trav\u00e9s del sistema de ficheros o iTunes. El modo com\u00fan de operaci\u00f3n es la invocaci\u00f3n de estas aplicaciones desde un tr\u00e1mite Web por medio del JavaScript de despliegue (autoscript.js) suministrado con el kit de integraci\u00f3n del Cliente @firma. Este modo de operaci\u00f3n permite a las aplicaciones web enviar datos al Cliente @firma para firmarlos y obtener las firmas resultantes como parte del flujo de un tr\u00e1mite online. El mecanismo de invocaci\u00f3n del Cliente @firma s\u00f3lo permite enviar a la aplicaci\u00f3n de firma una serie de par\u00e1metros, pero no obtener una respuesta. Esto obliga a establecer un mecanismo de comunicaci\u00f3n bidireccional que ser\u00e1 definido por la aplicaci\u00f3n que realiza la llamada al Cliente @firma. A lo largo de la vida del Cliente @firma, este mecanismo de comunicaci\u00f3n ha ido evolucionando, pero se ha mantenido la compatibilidad hacia atr\u00e1s para permitir la compatibilidad entre versiones del Cliente @firma y dadas las limitaciones del entorno de algunas de las aplicaciones. Los mecanismos de comunicaci\u00f3n que existen actualmente son: Comunicaci\u00f3n a trav\u00e9s de servidor intermedio: El paso de datos entre la aplicaci\u00f3n cliente y la aplicaci\u00f3n de firma se realizar\u00e1 directamente en la llamada de invocaci\u00f3n y la respuesta se subir\u00e1 a un servidor intermedio del que la descargar\u00e1 la aplicaci\u00f3n cliente. En caso de que los par\u00e1metros de la llamada sean demasiado grandes, estos se enviar\u00e1n al servidor intermedio para que los descargue la aplicaci\u00f3n de firma. El servidor intermedio lo proporcionar\u00e1 el organismo propietario de la aplicaci\u00f3n y los servicios para el guardado y la descarga de la informaci\u00f3n se distribuyen en el kit de despliegue del Cliente @firma. Las URL de acceso a los servicios de carga y descarga de datos del servidor los proporciona la aplicaci\u00f3n cliente en la llamada a la aplicaci\u00f3n de firma. Este modo de operaci\u00f3n obliga a que la aplicaci\u00f3n de firma se tenga que abrir por cada petici\u00f3n de la aplicaci\u00f3n cliente. Este mecanismo de comunicaci\u00f3n est\u00e1 soportado por todas las aplicaciones cliente. Comunicaci\u00f3n por Sockets: El paso de datos entre la aplicaci\u00f3n cliente y la aplicaci\u00f3n de firma se hace a trav\u00e9s de un socket abierto por la aplicaci\u00f3n de firma. Tras la invocaci\u00f3n por protocolo, la aplicaci\u00f3n de firma abrir\u00e1 el socket. La aplicaci\u00f3n cliente solicitar\u00e1 todas las peticiones a trav\u00e9s de ese socket y obtendr\u00e1 la respuesta del mismo. La aplicaci\u00f3n cliente env\u00eda tres n\u00fameros de puerto aleatorios a la aplicaci\u00f3n de firma en la llamada por protocolo y la aplicaci\u00f3n tratar\u00e1 de abrir el socket en uno de ellos. Si fallase la apertura del socket, lo intentar\u00eda con el siguiente puerto hasta conseguir abrir uno o fallar si no se pudo en ninguno de los puertos proporcionados. La aplicaci\u00f3n cliente tratar\u00e1 de comunicarse con la aplicaci\u00f3n de firma por medio de los 3 puertos hasta que identifique cual ser\u00e1 finalmente el puerto por el que se establecer\u00e1 la comunicaci\u00f3n. Este modo de operaci\u00f3n mantiene abierta la aplicaci\u00f3n cliente hasta que pasa un minuto de inactividad tras la \u00faltima llamada. Este mecanismo de comunicaci\u00f3n s\u00f3lo est\u00e1 soportado por AutoFirma. Comunicaci\u00f3n por WebSockets: El paso de datos entre la aplicaci\u00f3n cliente y la aplicaci\u00f3n de firma se hace a trav\u00e9s de un WebSocket abierto por la aplicaci\u00f3n de firma en el puerto 63117. Tras la invocaci\u00f3n por protocolo, la aplicaci\u00f3n de firma abrir\u00e1 el WebSocket. La aplicaci\u00f3n cliente solicitar\u00e1 todas las peticiones a trav\u00e9s de ese socket y obtendr\u00e1 la respuesta del mismo. Este modo de operaci\u00f3n mantiene abierta la aplicaci\u00f3n cliente hasta que la aplicaci\u00f3n cliente cierra la conexi\u00f3n. Este mecanismo de comunicaci\u00f3n s\u00f3lo est\u00e1 soportado por AutoFirma 1.7 y superiores. Todas las operaciones con el Cliente @firma deben hacerse de forma secuencial. No se debe realizar una nueva petici\u00f3n a la aplicaci\u00f3n hasta que no se ha recibido la respuesta de la petici\u00f3n anterior.","title":"Introducci\u00f3n"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#estructura-de-la-url-de-invocacion","text":"Durante la instalaci\u00f3n de las aplicaciones cliente de firma, estas registran el esquema \u201cafirma\u201d en el sistema. De esa manera, todas las llamadas que se realicen con ese protocolo abrir\u00e1n la aplicaci\u00f3n de firma instalada. Podemos distinguir las siguientes partes en la estructura de una URL: [scheme://][authority][path][?query][#fragment] [scheme://] Esquema de la URL: En las llamadas al Cliente @firma siempre ser\u00e1 \u2018afirma\u2019. [authority] Autoridad del protocolo: Com\u00fanmente puede contener una secci\u00f3n host , un puerto e informaci\u00f3n del usuario. En las llamadas al Cliente @firma este par\u00e1metro expresar\u00e1 la operaci\u00f3n a realizar. Los valores que se pueden establecer en las llamadas al Cliente @firma dependen de la operaci\u00f3n y del modo de comunicaci\u00f3n que se desee activar entre la aplicaci\u00f3n de firma y el cliente que lo solicita. [path] Ruta del protocolo: En la llamada al Cliente @firma, no se admite que figuren rutas. [?query] Consulta del protocolo: Son los par\u00e1metros que deseamos transmitir a la aplicaci\u00f3n. En las llamadas al Cliente @firma, contendr\u00e1 los par\u00e1metros que configuran la operaci\u00f3n indicada en el apartado de [authority]. Los par\u00e1metros se proporcionar\u00e1n con codificaci\u00f3n URL Encoded. En el caso de valores en Base 64, tambi\u00e9n se proporcionar\u00e1n con una codificaci\u00f3n URL SAFE (caracteres \u2018+\u2019 sustituidos por \u2018-\u2019 y caracteres \u2018/\u2019 sustituidos por \u2018_\u2019). [#fragment] Fragmento del protocolo: En la llamada al Cliente @firma, no se admite que figure el apartado de fragmento. Algunos ejemplos de llamadas al Cliente @firma son: afirma://websocket/?v=3 URL de invocaci\u00f3n para iniciar la comunicaci\u00f3n por WebSockets. afirma://sign/?ver=3&op=sign&id=yy1oMJsxoHSoMzLdJywW&key=71313199&stservlet=http%3A%2F%2Fappprueba%3A8080%2Fafirma-signature-storage%2FStorageService&format=CAdES&algorithm=SHA512withRSA&properties=c2VydmVyVXJsPWh0dHA6Ly9hcHBwcnVlYmE6ODA4MC9hZmlybWEtc2VydmVyLXRyaXBoYXNlLXNpZ25lci9TaWduYXR1cmVTZXJ2aWNl&aw=true URL de invocaci\u00f3n para solicitar la firma de un fichero seleccionado por el usuario con la configuraci\u00f3n proporcionada. En los siguientes apartados se describen las URL de invocaci\u00f3n que se pueden utilizar para la comunicaci\u00f3n con el Cliente @firma seg\u00fan el tipo de comunicaci\u00f3n escogido.","title":"Estructura de la URL de invocaci\u00f3n"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#comunicacion-por-websockets","text":"La comunicaci\u00f3n por WebSockets requiere de una \u00fanica llamada por protocolo al Cliente @firma. Una vez se le invoca, el resto de la comunicaci\u00f3n se realizar\u00e1 a trav\u00e9s del websocket abierto. La composici\u00f3n de la URL para el inicio de la comunicaci\u00f3n por WebSockets es la siguiente: Esquema: afirma Host: websocket Par\u00e1metros: v N\u00famero de versi\u00f3n del protocolo. La versi\u00f3n actual de protocolo que se soporta es: 3 jvc Versi\u00f3n del JavaScript de despliegue que realiza la invocaci\u00f3n. La versi\u00f3n notificada actualmente es la: 2 mcv Opcional. Versi\u00f3n m\u00ednima exigida de AutoFirma (no aplicable a los clientes m\u00f3viles). La URL de llamada al Cliente @firma para el inicio de una comunicaci\u00f3n por WebSocket es la siguiente: afirma://websocket?v=3&jvc=2&mcv=1.7.0 Para ordenar a trav\u00e9s de WebSocket la ejecuci\u00f3n las distintas operaciones del Cliente @firma se enviar\u00e1n al WebSocket nuevas URL con los par\u00e1metros espec\u00edficos para la ejecuci\u00f3n de esa operaci\u00f3n. Se pueden consultar las distintas operaciones en el apartado 7 Peticiones de operaci\u00f3n . Adicionalmente a las peticiones de operaci\u00f3n, se puede enviar a trav\u00e9s del socket la cadena \u201cecho=\u201d para comprobar si el WebSocket est\u00e1 activo. La respuesta a esta petici\u00f3n deber ser la cadena \u201cOK\u201d. La comunicaci\u00f3n por WebSocket s\u00f3lo est\u00e1 soportada por AutoFirma 1.7 y superiores.","title":"Comunicaci\u00f3n por WebSockets"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#comunicacion-por-sockets","text":"La comunicaci\u00f3n por sockets requiere de una \u00fanica llamada por protocolo al Cliente @firma. Una vez se le invoca, el resto de la comunicaci\u00f3n se realizar\u00e1 a trav\u00e9s del socket abierto. La composici\u00f3n de la URL para el inicio de la comunicaci\u00f3n por sockets es la siguiente: Esquema: afirma Host: service Par\u00e1metros: v N\u00famero de versi\u00f3n del protocolo. La versi\u00f3n actual de AutoFirma soporta la versi\u00f3n: 1 jvc Versi\u00f3n del JavaScript de despliegue que realiza la invocaci\u00f3n. La versi\u00f3n notificada actualmente es la: 2 mcv Opcional. Versi\u00f3n m\u00ednima exigida de AutoFirma (no aplicable a los clientes m\u00f3viles). ports Listado de puertos (separados por comas) por los que se va a intentar establecer la comunicaci\u00f3n. idsession Cadena base 64 a modo de identificador de sesi\u00f3n. Todas las peticiones enviadas a trav\u00e9s del socket una vez abierto deber\u00e1n notificar este identificador de sesi\u00f3n. Una URL de ejemplo de llamada al Cliente @firma para el inicio de una comunicaci\u00f3n por sockets es la siguiente: afirma://service?ports=60572,64733,56552&v=1&jvc=2&idsession=CT8Dubp4IDxjSnhxh15A Para ordenar a trav\u00e9s de socket la ejecuci\u00f3n las distintas operaciones del Cliente @firma se enviar\u00e1n al socket nuevas URL con los par\u00e1metros espec\u00edficos para la ejecuci\u00f3n de esa operaci\u00f3n. Se pueden consultar las distintas operaciones en el apartado 7 Peticiones de operaci\u00f3n . La comunicaci\u00f3n por Sockets s\u00f3lo est\u00e1 soportada por AutoFirma.","title":"Comunicaci\u00f3n por sockets"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#comunicacion-por-servidor-intermedio","text":"La comunicaci\u00f3n por servidor intermedio no permite abrir el cliente de firma y mantener una comunicaci\u00f3n con varios mensajes. Este modo requiere que se habr\u00e1 la aplicaci\u00f3n de firma por cada petici\u00f3n, motivo por el cual no permite el uso de algunas de las funciones auxiliares, ya que no est\u00e1 justificado el que se abra la aplicaci\u00f3n s\u00f3lo por ellas. Tampoco es adecuada para casos de uso en los que se realizan m\u00faltiples aplicaciones simultaneas. La comunicaci\u00f3n por servidor intermedio tiene las siguientes ventajas: Es compatible con los clientes m\u00f3viles Android e iOS. No requieren que en la instalaci\u00f3n de la aplicaci\u00f3n se instale un certificado SSL en el almac\u00e9n de confianza de los navegadores. Por el contrario, presenta las siguientes desventajas frente a las opciones anteriores: Requiere desplegar los servicios de intercambio de datos en un servidor accesible por la aplicaci\u00f3n cliente y la aplicaci\u00f3n de firma. M\u00e1s lento. Puede tener alg\u00fan recargo para el usuario si el uso de la red para la conexi\u00f3n con el servidor tiene un gasto asociado (como en el caso de la comunicaci\u00f3n por datos m\u00f3viles). No es apto para ser usado recurrentemente. Algunas aplicaciones, incluso, pueden haber establecido restricciones de seguridad que bloqueen las llamadas, como Google Chrome que establece un tiempo m\u00e1ximo que puede transcurrir entre una interacci\u00f3n del usuario y la llamada por protocolo. La principal particularidad de las llamadas para el uso del servidor intermedio es que requieren que se a la aplicaci\u00f3n de firma las URL de los servicios para el guardado del resultado de la operaci\u00f3n y, si aplica, la descarga de los datos de la petici\u00f3n. Adicionalmente, pueden darse dos casos de uso: Todos los par\u00e1metros de la operaci\u00f3n pueden enviarse en la URL. En este caso, se llama a la aplicaci\u00f3n de firma utilizando la URL correspondiente a la operaci\u00f3n que deseemos proporcion\u00e1ndole todos los par\u00e1metros. Este puede ser el caso de uso normal en muchos contextos, pero no en otros en los que se establece un tama\u00f1o m\u00e1ximo de la URL de entrada. Esto ocurre, por ejemplo, con los navegadores web. Los par\u00e1metros de la operaci\u00f3n no pueden enviarse en la URL. En este caso, los par\u00e1metros a enviar conforman una URL demasiado grande para ser transmitida directamente. Para poder transferir los datos a la aplicaci\u00f3n de firma, ser\u00e1 necesario que se suban estos datos al servidor intermedio y luego se llame a la aplicaci\u00f3n de firma para que se los descargue de ah\u00ed y pueda procesarlos a continuaci\u00f3n. La comunicaci\u00f3n con el servidor intermedio es as\u00edncrona, dado que la aplicaci\u00f3n cliente debe consultar activamente el servidor intermedio a trav\u00e9s del servicio de recuperaci\u00f3n de datos para saber si la operaci\u00f3n se ha procesado o no. En este caso, adem\u00e1s de la respuesta con el resultado de la operaci\u00f3n, la aplicaci\u00f3n podr\u00eda recuperar tambi\u00e9n alguna de las siguientes respuestas: Cadena que empieza por \u201cerr-06\u201d: Se\u00f1ala que el servidor intermedio no ha recibido el resultado de la operaci\u00f3n. La aplicaci\u00f3n cliente deber\u00eda esperar un poco m\u00e1s antes de volver a reintentar recuperar el resultado de la operaci\u00f3n. Cadena que empieza por \u201c#wait\u201d: Se\u00f1ala que la aplicaci\u00f3n de firma todav\u00eda no tiene el resultado de la aplicaci\u00f3n, pero ha indicado que la petici\u00f3n se est\u00e1 en proces\u00f3 y que la aplicaci\u00f3n cliente deber\u00eda seguir esperando el resultado. Este valor se usar\u00e1 cuando se haya invocado a AutoFirma con el par\u00e1metro \u201caw\u201d para que el Cliente @firma (solo soportado por AutoFirma) vaya notificando peri\u00f3dicamente si la aplicaci\u00f3n cliente deber\u00eda seguir esperando el resultado.","title":"Comunicaci\u00f3n por servidor intermedio"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#url-con-parametros-de-operacion","text":"En el caso de llamar al Cliente @firma con los par\u00e1metros de la operaci\u00f3n, pasaremos todos los par\u00e1metros necesarios para la propia operaci\u00f3n m\u00e1s los par\u00e1metros necesarios para guardar el resultado en el servidor intermedio. La composici\u00f3n de la URL para este tipo de petici\u00f3n ser\u00eda la siguiente: Esquema: afirma Host: C\u00f3digo de la operaci\u00f3n en cuesti\u00f3n Par\u00e1metros: ver N\u00famero de versi\u00f3n del protocolo. La versi\u00f3n actual de protocolo que se soporta es: 3 jvc Versi\u00f3n del JavaScript de despliegue que realiza la invocaci\u00f3n. La versi\u00f3n notificada actualmente es la: 2 mcv Opcional. Versi\u00f3n m\u00ednima exigida de AutoFirma (no aplicable a los clientes m\u00f3viles). id Identificador de la transacci\u00f3n. Es el identificador con el que debe guardarse la respuesta en el servidor intermedio. Para m\u00e1s informaci\u00f3n sobre el guardado y la recuperaci\u00f3n de datos del servidor intermedio, consulte el apartado ANEXO I Servidor intermedio . stservlet URL del servicio para el guardado del resultado en el servidor intermedio. Para m\u00e1s informaci\u00f3n sobre el guardado y la recuperaci\u00f3n de datos del servidor intermedio, consulte el apartado ANEXO I Servidor intermedio . key Clave DES para el cifrado del fichero de configuraci\u00f3n. Los datos que se env\u00eden al servidor intermedio se deben cifrar con esta clave DES. La aplicaci\u00f3n cliente despu\u00e9s deber\u00e1 usar esta misma clave para descifrar el resultado. aw Booleano que indica si la aplicaci\u00f3n de firma debe notificar peri\u00f3dicamente a trav\u00e9s del servidor intermedio si a\u00fan est\u00e1 operando. Esto es \u00fatil para evitar esperar indefinidamente el resultado de la operaci\u00f3n, cuando es posible que esta haya fallado por alg\u00fan motivo y no se haya podio notificar a trav\u00e9s del servidor intermedio. Por ejemplo, si la aplicaci\u00f3n de firma no recibi\u00f3 la petici\u00f3n o si no pudo enviar el resultado al servidor intermedio. Por defecto, false. Par\u00e1metros de operaci\u00f3n Par\u00e1metros propios del tipo de operaci\u00f3n que deseemos realizar. Un ejemplo de URL para la invocaci\u00f3n de una operaci\u00f3n de firma ser\u00eda: afirma://sign/?jvc=2&mcv=1.7.0&ver=1&op=sign&id=llUQSzruWssVQxIeFNtV&key=72993139&stservlet=https%3A%2F%2Fvalide.redsara.es%2FfirmaMovil%2Fafirma-signature-storage%2FStorageService&format=CAdES&algorithm=SHA256withRSA&properties=bW9kZT1leHBsaWNpdApzZXJ2ZXJVcmw9aHR0cHM6Ly92YWxpZGUucmVkc2FyYS5lcy9maXJtYU1vdmlsL2FmaXJtYS1zZXJ2ZXItdHJpcGhhc2Utc2lnbmVyL1NpZ25hdHVyZVNlcnZpY2U%3D&aw=true Las operaciones disponibles y sus par\u00e1metros est\u00e1n indicadas en el apartado 7 Peticiones de operaci\u00f3n .","title":"URL con par\u00e1metros de operaci\u00f3n"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#url-sin-parametros-de-operacion","text":"En el caso de llamar al Cliente @firma sin los par\u00e1metros de la operaci\u00f3n, deberemos haber enviado estos par\u00e1metros previamente al servidor intermedio, y pasar al Cliente @firma los par\u00e1metros necesarios para que se los descargue. La composici\u00f3n de la URL para este tipo de petici\u00f3n ser\u00eda la siguiente: Esquema: afirma Host: C\u00f3digo de la operaci\u00f3n en cuesti\u00f3n Par\u00e1metros: fileId Identificador asignado al fichero de configuraci\u00f3n en el servidor remoto. Este es el identificador que se le asigna a la configuraci\u00f3n cuando se env\u00eda a almacenar en el servidor intermedio. Para m\u00e1s informaci\u00f3n sobre el guardado y la recuperaci\u00f3n de datos del servidor intermedio, consulte el apartado ANEXO I Servidor intermedio . rtservlet URL del servicio para la recuperaci\u00f3n del fichero de configuraci\u00f3n. Para m\u00e1s informaci\u00f3n sobre el guardado y la recuperaci\u00f3n de datos del servidor intermedio, consulte el apartado ANEXO I Servidor intermedio . key Clave DES para el descifrado del fichero de configuraci\u00f3n. Los datos que se env\u00edan al servidor intermedio deber\u00edan cifrarse con un cifrado DES. En caso de hacerlo, en este par\u00e1metro se deber\u00eda indicar la clave empleada (que deber\u00eda ser una cadena de texto). Un ejemplo de URL de invocaci\u00f3n ser\u00eda: afirma://sign/?fileid=1mlL13MJMKMU4KMUI4Co&rtservlet=https%3A%2F%2Fvalide.redsara.es%2FfirmaMovil%2Fafirma-signature-retriever%2FRetrieveService&key=56542304 Los par\u00e1metros que se deber\u00e1n enviar al servidor intermedio son los mismos que usar\u00edamos si todos los par\u00e1metros se enviasen en la URL de petici\u00f3n. Consulte el apartado anterior para comprobar los par\u00e1metros necesario y el apartado 7 Peticiones de operaci\u00f3n para ver el listado de operaciones disponibles y los par\u00e1metros que estas necesitan. Para el env\u00edo de los datos al servidor, los estructuraremos en forma de fichero XML con el formato: <COD_OPERACION> <e k=\u201dCLAVE1\u201d v=\u201dVALOR1\u201d /> <e k=\u201dCLAVE2\u201d v=\u201dVALOR2\u201d /> \u2026 <e k=\u201dCLAVEn\u201d v=\u201dVALORn\u201d /> </COD_OPERACION> En donde: COD_OPERACION : C\u00f3digo de la operaci\u00f3n que se configura. CLAVEx : Nombre del par\u00e1metro del listado de par\u00e1metros de configuraci\u00f3n de la operaci\u00f3n. VALORx : Valor que deseemos asignar a ese par\u00e1metro. Un ejemplo de XML es: <sign> <e k=\"id\" v=\"000987508929\"/> <e k=\"key\" v=\"39772569\"/> <e k=\"stservlet\" v=\"http://192.168.177.173:8080/afirma-signature-storage/StorageService\"/> <e k=\"format\" v=\"CAdES\"/> <e k=\"algorithm\" v=\"SHA1withRSA\"/> <e k=\"properties\" v=\"c2VydmVyVXJsPWh0dHA6Ly8xOTIuMTY4LjE3Ny4xNzM6ODA4MC9hZmlybWEtc2VydmVyLXRyaXBoYXNlLXNpZ25lci9TaWduYXR1cmVTZXJ2aWNlCgkJIA%3D%3D\"/> <e k=\"dat\" v=\"ZnVsYW5pdG9AYXRvcy5uZXQ%3D\"/> </sign> Este XML se enviar\u00e1, codificado en base 64 al mismo servicio de almacenamiento cuya ruta se establece a trav\u00e9s del par\u00e1metro \u201cstservlet\u201d. Esta cadena a su vez puede estar cifrada con una clave DES (la proporcionada en el par\u00e1metro \u201ckey\u201d de la llamada) y codificada en base 64. Es importante recordar que no todas las operaciones del Cliente @firma pueden ejecutarse cuando la comunicaci\u00f3n se realiza a trav\u00e9s de servidor intermedio.","title":"URL sin par\u00e1metros de operaci\u00f3n"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#operaciones-del-cliente-firma","text":"Aqu\u00ed se listan todas las operaciones soportadas por el Cliente @firma cuando se le invoca por protocolo y los par\u00e1metros necesarios para configurar dichas operaciones. Algunas de ellas, sin embargo, no est\u00e1n disponibles en todas las aplicaciones. El listado completo de operaciones es el siguiente: Firma. Cofirma. Contrafirma. Firma de lote. S\u00f3lo disponible en AutoFirma. Selecci\u00f3n de certificado. Guardado. S\u00f3lo disponible en AutoFirma y la app de firma Android. Firma y guardado. S\u00f3lo disponible en AutoFirma. Carga de datos. S\u00f3lo disponible en AutoFirma. Recuperaci\u00f3n del log. S\u00f3lo disponible en AutoFirma. Los par\u00e1metros de las aplicaciones siempre se proporcionar\u00e1n codificados para URL (\u201c URL Encoded \u201d). Si el valor de un par\u00e1metro se expresase en forma de cadena Base 64, \u00e9sta siempre se codificar\u00e1 en forma URL SAFE (el s\u00edmbolo \u2018+\u2019 se sustituye por \u2018-\u2019 y el s\u00edmbolo \u2018/\u2019 se sustituye por \u2018_\u2019).","title":"Operaciones del Cliente @firma"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#operacion-de-firma-sign","text":"Operaci\u00f3n para la ejecuci\u00f3n de una firma electr\u00f3nica. C\u00f3digo de operaci\u00f3n: sign Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. En este caso, ser\u00e1: sign dat Datos a firmar codificados en Base 64 URL SAFE. Si no se indican y la aplicaci\u00f3n es AutoFirma, se permitir\u00e1 al usuario seleccionar un fichero. format Formato de firma. algorithm Algoritmo de firma. properties Propiedades de configuraci\u00f3n espec\u00edficas del formato de firma y configuraci\u00f3n de la operaci\u00f3n. Se proporcionar\u00e1n en forma cadena compuesta por duplas propiedad=valor separadas por \u2018\\n\u2019. La cadena resultante se proporcionar\u00e1 en Base 64 URL SAFE. ksb64 (opcional) Configuraci\u00f3n del almac\u00e9n de claves a utilizar codificada en base 64. S\u00f3lo se procesa en AutoFirma. sticky (opcional) Valor booleano que indica si debe recordarse el certificado de firma que se seleccione o, si ya se recuerda uno anterior, si debe usarse ese autom\u00e1ticamente (true); o si se debe permitir seleccionar un nuevo certificado y olvidar cualquiera que se recuerde (false). S\u00f3lo se procesa en AutoFirma. resetsticky (opcional) Valor booleano que indica si debe olvidarse cualquier certificado previamente seleccionado independientemente del valor del par\u00e1metro sticky (true), o si no (false, valor por defecto). Este valor se puede utilizar junto con sticky si ya ten\u00edamos un certificado seleccionado y queremos olvidar ese y recordar el nuevo que se seleccione. S\u00f3lo se procesa en AutoFirma. Para ver los formatos, algoritmos, par\u00e1metros de configuraci\u00f3n del formato de firma y los almacenes de claves a configurar, consulte el manual del integrador del Cliente @firma. En caso de finalizar correctamente, esta operaci\u00f3n obtiene como resultado una cadena con el formato: CERT_B64|FIRMA_B64|FILENAME_B64 En donde: CERT_B64 Certificado de firma utilizado codificado en Base 64 URL SAFE. FIRMA_B64 Firma generada codificada en Base 64 URL SAFE. FILENAME_B64 Si no se indicaron los datos a firmar y el usuario tuvo que seleccionar un fichero, este ser\u00e1 el nombre del fichero seleccionado codificado en Base 64 URL SAFE. Este valor solo se devolver\u00e1 en AutoFirma 1.7 y superiores. En caso de no aparecer, tampoco lo har\u00e1 el car\u00e1cter separador \u2018|\u2019. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de firma es: afirma://sign/?ver=1&op=sign&id=llUQSzruWssVQxIeFNtV&format=CAdES&algorithm=SHA256withRSA&properties=bW9kZT1leHBsaWNpdApzZXJ2ZXJVcmw9aHR0cHM6Ly92YWxpZGUucmVkc2FyYS5lcy9maXJtYU1vdmlsL2FmaXJtYS1zZXJ2ZXItdHJpcGhhc2Utc2lnbmVyL1NpZ25hdHVyZVNlcnZpY2U%3D Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n.","title":"Operaci\u00f3n de firma (sign)"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#operacion-de-cofirma-o-firma-en-paralelo-cosign","text":"Operaci\u00f3n para la ejecuci\u00f3n de una firma electr\u00f3nica. C\u00f3digo de operaci\u00f3n: cosign Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. En este caso, ser\u00e1: cosign dat Firma a cofirmar codificada Base64 URL SAFE. Si no se indican y la aplicaci\u00f3n es AutoFirma, se permitir\u00e1 al usuario seleccionar un fichero. format Formato de firma. algorithm Algoritmo de firma. properties Propiedades de configuraci\u00f3n espec\u00edficas del formato de firma y configuraci\u00f3n de la operaci\u00f3n. Se proporcionar\u00e1n en forma cadena compuesta por duplas propiedad=valor separadas por \u2018\\n\u2019. La cadena resultante se proporcionar\u00e1 en Base 64 URL SAFE. ksb64 (opcional) Configuraci\u00f3n del almac\u00e9n de claves a utilizar codificada en base 64. S\u00f3lo se procesa en AutoFirma. sticky (opcional) Valor booleano que indica si debe recordarse el certificado de firma que se seleccione o, si ya se recuerda uno anterior, si debe usarse ese autom\u00e1ticamente (true); o si se debe permitir seleccionar un nuevo certificado y olvidar cualquiera que se recuerde (false). S\u00f3lo se procesa en AutoFirma. resetsticky (opcional) Valor booleano que indica si debe olvidarse cualquier certificado previamente seleccionado independientemente del valor del par\u00e1metro sticky (true), o si no (false, valor por defecto). Este valor se puede utilizar junto con sticky si ya ten\u00edamos un certificado seleccionado y queremos olvidar ese y recordar el nuevo que se seleccione. S\u00f3lo se procesa en AutoFirma. Para ver los formatos, algoritmos, par\u00e1metros de configuraci\u00f3n del formato de firma y los almacenes de claves a configurar, consulte el manual del integrador del Cliente @firma. En caso de finalizar correctamente, esta operaci\u00f3n obtiene como resultado una cadena con el formato: CERT_B64|COFIRMA_B64|FILENAME_B64 En donde: CERT_B64 Certificado de firma utilizado codificado en Base 64 URL SAFE. COFIRMA_B64 Cofirma generada codificada en Base 64 URL SAFE. FILENAME_B64 Si no se indic\u00f3 una firma a cofirmar y el usuario tuvo que seleccionar un fichero, este ser\u00e1 el nombre del fichero seleccionado codificado en Base 64 URL SAFE. Este valor solo se devolver\u00e1 en AutoFirma 1.7 y superiores. En caso de no aparecer, tampoco lo har\u00e1 el car\u00e1cter separador \u2018|\u2019. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de cofirma (en la que se omite parte del par\u00e1metro de datos por legibilidad) es: afirma://cosign?op=cosign&algorithm=SHA512withRSA&format=XAdES&properties=c2VydmVyVXJsPWh0dHA6Ly9hcHBwcnVlYmE6ODA4MC9hZmlybWEtc2VydmVyLXRyaXBoYXNlLXNpZ25lci9TaWduYXR1cmVTZXJ2aWNl&sticky=false&dat=PD94bWwgdmVyc2lv\u2026B-PC9wcm9qZWN0Pg== Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n.","title":"Operaci\u00f3n de cofirma o firma en paralelo (cosign)"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#operacion-de-contrafirma-o-firma-en-cascada-contersign","text":"Operaci\u00f3n para la ejecuci\u00f3n de una firma electr\u00f3nica. C\u00f3digo de operaci\u00f3n: countersign Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. En este caso, ser\u00e1: countersign dat Firma a contrafirmar codificada en Base64 URL SAFE. Si no se indican y la aplicaci\u00f3n es AutoFirma, se permitir\u00e1 al usuario seleccionar un fichero. format Formato de firma. algorithm Algoritmo de firma. properties Propiedades de configuraci\u00f3n espec\u00edficas del formato de firma y configuraci\u00f3n de la operaci\u00f3n. Se proporcionar\u00e1n en forma cadena compuesta por duplas propiedad=valor separadas por \u2018\\n\u2019. La cadena resultante se proporcionar\u00e1 en Base 64 URL SAFE. Para la operaci\u00f3n de contrafirma, se puede indicar la propiedad \u201ctarget\u201d con el valor \u201ctree\u201d para indicar que se desea contrafirmar todo el \u00e1rbol de firmas o con cualquier otro valor para indicar que s\u00f3lo se deben contrafirmas los nodos hoja. ksb64 (opcional) Configuraci\u00f3n del almac\u00e9n de claves a utilizar codificada en base 64. S\u00f3lo se procesa en AutoFirma. sticky (opcional) Valor booleano que indica si debe recordarse el certificado de firma que se seleccione o, si ya se recuerda uno anterior, si debe usarse ese autom\u00e1ticamente (true); o si se debe permitir seleccionar un nuevo certificado y olvidar cualquiera que se recuerde (false). S\u00f3lo se procesa en AutoFirma. resetsticky (opcional) Valor booleano que indica si debe olvidarse cualquier certificado previamente seleccionado independientemente del valor del par\u00e1metro sticky (true), o si no (false, valor por defecto). Este valor se puede utilizar junto con sticky si ya ten\u00edamos un certificado seleccionado y queremos olvidar ese y recordar el nuevo que se seleccione. S\u00f3lo se procesa en AutoFirma. Para ver los formatos, algoritmos, par\u00e1metros de configuraci\u00f3n del formato de firma y los almacenes de claves a configurar, consulte el manual del integrador del Cliente @firma. En caso de finalizar correctamente, esta operaci\u00f3n obtiene como resultado una cadena con el formato: CERT_B64|CONTRAFIRMA_B64|FILENAME_B64 En donde: CERT_B64 Certificado de firma utilizado codificado en Base 64 URL SAFE. CONTRAFIRMA_B64 Contrafirma generada codificada en Base 64 URL SAFE. FILENAME_B64 Si no se indic\u00f3 una firma a contrafirmar y el usuario tuvo que seleccionar un fichero, este ser\u00e1 el nombre del fichero seleccionado codificado en Base 64 URL SAFE. Este valor solo se devolver\u00e1 en AutoFirma 1.7 y superiores. En caso de no aparecer, tampoco lo har\u00e1 el car\u00e1cter separador \u2018|\u2019. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de contrafirma (en la que se omite parte del par\u00e1metro de datos por legibilidad) es: afirma://countersign?op=countersign&algorithm=SHA512withRSA&format=XAdES&properties=c2VydmVyVXJsPWh0dHA6Ly9hcHBwcnVlYmE6ODA4MC9hZmlybWEtc2VydmVyLXRyaXBoYXNlLXNpZ25lci9TaWduYXR1cmVTZXJ2aWNl&sticky=false&dat=C9hZmlybWEtc2Vy\u2026YXR1cmU-PC9wcm9qZWN0Pg== Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n.","title":"Operaci\u00f3n de contrafirma o firma en cascada (contersign)"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#firma-en-lote-batch","text":"Operaci\u00f3n para la firma, cofirma o contrafirma de m\u00faltiples documentos en una \u00fanica operaci\u00f3n. Esta operaci\u00f3n s\u00f3lo es compatible con AutoFirma. C\u00f3digo de operaci\u00f3n: batch Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. En este caso, ser\u00e1: batch dat XML codificado en Base64 URL SAFE con la configuraci\u00f3n del lote de firma. Se consultar el formato del XML en el manual del integrador del Cliente @firma. batchpresignerurl URL del servicio de prefirma de lotes (disponible junto al servicio de firma trif\u00e1sica). batchpostsignerurl URL del servicio de postfirma de lotes (disponible junto al servicio de firma trif\u00e1sica). needcert Booleano para indicar si se debe devolver tambi\u00e9n en el resultado el certificado utilizado en la operaci\u00f3n (true) o si no (false, valor por defecto). ksb64 (opcional) Configuraci\u00f3n del almac\u00e9n de claves a utilizar codificada en base 64. S\u00f3lo se procesa en AutoFirma. sticky (opcional) Valor booleano que indica si debe recordarse el certificado de firma que se seleccione o, si ya se recuerda uno anterior, si debe usarse ese autom\u00e1ticamente (true); o si se debe permitir seleccionar un nuevo certificado y olvidar cualquiera que se recuerde (false). S\u00f3lo se procesa en AutoFirma. resetsticky (opcional) Valor booleano que indica si debe olvidarse cualquier certificado previamente seleccionado independientemente del valor del par\u00e1metro sticky (true), o si no (false, valor por defecto). Este valor se puede utilizar junto con sticky si ya ten\u00edamos un certificado seleccionado y queremos olvidar ese y recordar el nuevo que se seleccione. S\u00f3lo se procesa en AutoFirma. Para ver los formatos, algoritmos, par\u00e1metros de configuraci\u00f3n del formato de firma y los almacenes de claves a configurar, consulte el manual del integrador del Cliente @firma. En caso de finalizar correctamente, esta operaci\u00f3n obtiene como resultado una cadena con el formato: XML_B64|CERT_B64 En donde: XML_B64 XML codificado en Base 64 URL SAFE con el resultado de la firma del lote. Se consultar el formato del XML en el manual del integrador del Cliente @firma. CERT_B64 Certificado de firma utilizado codificado en Base 64 URL SAFE. Este valor solo se devolver\u00e1 en AutoFirma 1.7 y superiores. En caso de no aparecer, tampoco lo har\u00e1 el car\u00e1cter separador \u2018|\u2019. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de firma de lotes (en la que por legibilidad se omite parte del par\u00e1metro de datos) es: afirma://batch?op=batch&batchpresignerurl=http%3A%2F%2Fappprueba%3A8080%2Fafirma-server-triphase-signer%2FBatchPresigner&batchpostsignerurl=http%3A%2F%2Fappprueba%3A8080%2Fafirma-server-triphase-signer%2FBatchPostsigner&properties=c2VydmVyVXJsPWh0dHA6Ly9hcHBwcnVlYmE6ODA4MC9hZmlybWEtc2VydmVyLXRyaXBoYXNlLXNpZ25lci9TaWduYXR1cmVTZXJ2aWNl&sticky=false&needcert=true&dat=PD94bWwgdmVyc2lvbj0iMS4wIi\u2026WduPgo8L3NpZ25iYXRjaD4= Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n.","title":"Firma en lote (batch)"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#seleccion-de-certificado-selectcert","text":"Operaci\u00f3n para la obtenci\u00f3n de un certificado de firma. C\u00f3digo de operaci\u00f3n: selectcert Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. En este caso, ser\u00e1: selectcert ksb64 (opcional) Configuraci\u00f3n del almac\u00e9n de claves a utilizar codificada en base 64. S\u00f3lo se procesa en AutoFirma. properties (opcional) Propiedades con configuraci\u00f3n de filtros de certificados. sticky (opcional) Valor booleano que indica si debe recordarse el certificado de firma que se seleccione o, si ya se recuerda uno anterior, si debe usarse ese autom\u00e1ticamente (true); o si se debe permitir seleccionar un nuevo certificado y olvidar cualquiera que se recuerde (false). S\u00f3lo se procesa en AutoFirma. resetsticky (opcional) Valor booleano que indica si debe olvidarse cualquier certificado previamente seleccionado independientemente del valor del par\u00e1metro sticky (true), o si no (false, valor por defecto). Este valor se puede utilizar junto con sticky si ya ten\u00edamos un certificado seleccionado y queremos olvidar ese y recordar el nuevo que se seleccione. S\u00f3lo se procesa en AutoFirma. Para ver los formatos, algoritmos, par\u00e1metros de configuraci\u00f3n del formato de firma y los almacenes de claves a configurar, consulte el manual del integrador del Cliente @firma. En caso de finalizar correctamente, esta operaci\u00f3n obtiene como resultado el certificado seleccionado codificado en Base 64 URL SAFE. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de selecci\u00f3n de certificado es: afirma://selectcert?op=selectcert&properties=ZmlsdGVycz1ub25leHBpcmVkOmZhbHNl&sticky=true Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n.","title":"Selecci\u00f3n de certificado (selectcert)"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#operacion-de-guardado-save","text":"Operaci\u00f3n para el guardado de datos en disco. Esta operaci\u00f3n s\u00f3lo est\u00e1 soportada por AutoFirma y el Cliente de firma Android. C\u00f3digo de operaci\u00f3n: save Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. En este caso, ser\u00e1: save dat Datos a guardar codificados en Base64 URL SAFE. title (opcional) T\u00edtulo del di\u00e1logo de guardado. filename (opcional) Nombre propuesto para el fichero que contendr\u00e1 los datos a guardar. exts (opcional) Lista de extensiones, separadas por coma, propuestas para el fichero. desc (opcional) Descripci\u00f3n del tipo de fichero. En caso de finalizar correctamente, esta operaci\u00f3n obtiene como resultado el valor \u201cOK\u201d o \u201cOK\\r\\n\u201d. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de guardado es: afirma://save?op=save&title=Guardar%20firma%20electr%C3%B3nica&dat=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiID8-CjxzaWducz4KIDxzaWducmVzdWx0IGlkPSI3NzAwMzAyIiByZXN1bHQ9IkRPTkVfQU5EX1NBVkVEIiBkZXNjcmlwdGlvbj0iIi8-CiA8c2lnbnJlc3VsdCBpZD0iNzAzOTg2OSIgcmVzdWx0PSJET05FX0FORF9TQVZFRCIgZGVzY3JpcHRpb249IiIvPgogPHNpZ25yZXN1bHQgaWQ9Ijg5ODMxMjIiIHJlc3VsdD0iRE9ORV9BTkRfU0FWRUQiIGRlc2NyaXB0aW9uPSIiLz4KIDxzaWducmVzdWx0IGlkPSI3OTk1MDciIHJlc3VsdD0iRE9ORV9BTkRfU0FWRUQiIGRlc2NyaXB0aW9uPSIiLz4KIDxzaWducmVzdWx0IGlkPSIzNDc1MjYzIiByZXN1bHQ9IkRPTkVfQU5EX1NBVkVEIiBkZXNjcmlwdGlvbj0iIi8-CiA8c2lnbnJlc3VsdCBpZD0iMTk3MjI5NCIgcmVzdWx0PSJET05FX0FORF9TQVZFRCIgZGVzY3JpcHRpb249IiIvPgogPHNpZ25yZXN1bHQgaWQ9IjQxNTk2MzEiIHJlc3VsdD0iRE9ORV9BTkRfU0FWRUQiIGRlc2NyaXB0aW9uPSIiLz4KIDxzaWducmVzdWx0IGlkPSIxMzA0NTYxIiByZXN1bHQ9IkRPTkVfQU5EX1NBVkVEIiBkZXNjcmlwdGlvbj0iIi8-Cjwvc2lnbnM- Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n.","title":"Operaci\u00f3n de guardado (save)"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#carga-de-datos-load","text":"Operaci\u00f3n para la carga de datos. Esta operaci\u00f3n s\u00f3lo es compatible con AutoFirma. C\u00f3digo de operaci\u00f3n: load Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. En este caso, ser\u00e1: load title (opcional) T\u00edtulo del di\u00e1logo de guardado. filePath (opcional) Ruta del directorio por defecto. exts (opcional) Lista de extensiones, separadas por coma, propuestas para el fichero. desc (opcional) Descripci\u00f3n del tipo de fichero. multiload (opcional) Booleano que indica si se debe permitir cargar m\u00e1s de un fichero (true) o s\u00f3lo uno (false, valor por defecto). En caso de finalizar correctamente, esta operaci\u00f3n obtiene como resultado los datos cargados codificados en Base 64 URL SAFE. En caso de ser una carga de m\u00faltiples ficheros, se recibir\u00e1 el contenido de cada uno de ellos codificado en Base64 URL SAFE y separados por el caracter \u2018|\u2019. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de carga de datos es: afirma://load?op=load&title=&exts=csig%2Cxsig%2Csig%2Cpdf%2Cxml&desc=Fichero%20de%20firma%20electr%C3%B3nica&multiload=false Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n.","title":"Carga de datos (load)"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#firma-y-guardado-signandsave","text":"Operaci\u00f3n para la ejecuci\u00f3n de una firma, cofirma o contrafirma electr\u00f3nica seguido del guardado del fichero resultante. Esta operaci\u00f3n s\u00f3lo es compatible con AutoFirma. C\u00f3digo de operaci\u00f3n: signandsave Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. Debe ser: signandsave cop Operaci\u00f3n de firma a ejecutar. Puede ser sign, cosign o countersign, seg\u00fan se desee realizar una firma, cofirma o contrafirma, respectivamente. dat Datos a firmar/multifirmar codificados en Base 64 URL SAFE. Si no se indican, se permitir\u00e1 al usuario seleccionar un fichero. format Formato de firma. algorithm Algoritmo de firma. properties Propiedades de configuraci\u00f3n espec\u00edficas del formato de firma. Se proporcionar\u00e1n en forma cadena compuesta por duplas propiedad=valor separadas por \u2018\\n\u2019. La cadena resultante se proporcionar\u00e1 en Base 64 URL SAFE. filename (opcional) Nombre propuesto para el fichero de salida. ksb64 (opcional) Configuraci\u00f3n del almac\u00e9n de claves a utilizar codificada en base 64. S\u00f3lo se procesa en AutoFirma. sticky (opcional) Valor booleano que indica si debe recordarse el certificado de firma que se seleccione o, si ya se recuerda uno anterior, si debe usarse ese autom\u00e1ticamente (true); o si se debe permitir seleccionar un nuevo certificado y olvidar cualquiera que se recuerde (false). S\u00f3lo se procesa en AutoFirma. resetsticky (opcional) Valor booleano que indica si debe olvidarse cualquier certificado previamente seleccionado independientemente del valor del par\u00e1metro sticky (true), o si no (false, valor por defecto). Este valor se puede utilizar junto con sticky si ya ten\u00edamos un certificado seleccionado y queremos olvidar ese y recordar el nuevo que se seleccione. S\u00f3lo se procesa en AutoFirma. En caso de \u00e9xito, esta operaci\u00f3n obtiene como resultado una cadena con el formato: CERT_B64|FIRMA_B64|FILENAME_B64 En donde: CERT_B64 Certificado de firma utilizado codificado en Base 64 URL SAFE. FIRMA_B64 Firma generada codificada en Base 64 URL SAFE. FILENAME_B64 Si no se indicaron los datos a firmar y el usuario tuvo que seleccionar un fichero, este ser\u00e1 el nombre del fichero seleccionado codificado en Base 64 URL SAFE. Este valor solo se devolver\u00e1 en AutoFirma 1.7 y superiores. En caso de no aparecer, tampoco lo har\u00e1 el car\u00e1cter separador \u2018|\u2019. En caso de cancelarse la operaci\u00f3n, se obtiene como resultado la cadena \u201cCANCEL\u201d o \u201cCANCEL\\r\\n\u201d. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. Un ejemplo de llamada a la operaci\u00f3n de firma y guardado es: afirma://signandsave?op=signandsave&cop=cosign&algorithm=SHA512withRSA&format=XAdES&properties=c2VydmVyVXJsPWh0dHA6Ly9hcHBwcnVlYmE6ODA4MC9hZmlybWEtc2VydmVyLXRyaXBoYXNlLXNpZ25lci9TaWduYXR1cmVTZXJ2aWNl&sticky=false&filename=cofirma.xsig Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n.","title":"Firma y guardado (signandsave)"},{"location":"markdown_strict/Sintaxis_invocacion_Cliente_Afirma/#recuperacion-del-log-de-la-aplicacion-getlog","text":"Operaci\u00f3n para la recuperaci\u00f3n de las trazas de ejecuci\u00f3n de la aplicaci\u00f3n de firma. Esta operaci\u00f3n s\u00f3lo es compatible con AutoFirma. C\u00f3digo de operaci\u00f3n: getlog Par\u00e1metros admitidos: op C\u00f3digo de operaci\u00f3n. Debe ser: getlog En caso de finalizar correctamente, se devuelve la cadena de texto con las trazas de ejecuci\u00f3n. En caso de error, se obtiene una cadena que empieza por \u201cerr-\u201d. La llamada a la operaci\u00f3n se realiza con la petici\u00f3n: afirma://getLog?op=getLog Recuerde que, esta llamada deber\u00e1 incluir los par\u00e1metros necesarios para el uso del servidor intermedio si se utiliza este mecanismo de comunicaci\u00f3n. Servidor intermedio El servidor intermedio ser\u00e1 un servidor proporcionado por el organismo que hace integra el uso del Cliente @firma en su aplicaci\u00f3n y en el que se guardar\u00e1n temporalmente los datos que se transfieren entre la aplicaci\u00f3n cliente y la aplicaci\u00f3n de firma (Cliente @firma) cuando se utilice el modo de comunicaci\u00f3n a trav\u00e9s de servidor intermedio. Para el uso de este servidor se distribuye en el kit de integraci\u00f3n del Cliente @firma dos archivos WAR para la ejecuci\u00f3n de las operaciones de guardado y carga de datos del servidor: afirma-signature-storage.war Archivo con el servlet para la subida de datos al servidor intermedio. afirma-signature-retriever.war Archivo con el servlet para la descarga de datos del servidor intermedio. Guardado de datos La subida de datos al servidor intermedio se realiza mediante la llamada a la URL del servicio de guardado junto con varios par\u00e1metros de configuraci\u00f3n. El nombre por defecto del servicio de guardado es: StorageService Los par\u00e1metros necesarios son: op Operaci\u00f3n que se desea realizar. Se establecer\u00e1 el valor: put v Versi\u00f3n del servicio. Actualmente se debe configurar el valor: 1_0 id Identificador aleatorio asignado a los datos que se almacenan. dat Datos que se desean almacenar en base 64 URL SAFE y URL Encoded. Por ejemplo: http://miapp.com/afirma/afirma-signature-storage /StorageService ? op =put& v =1_0& id =000987508929& dat =ZnVsYW5pdG9AYXRvcy5uZXQ%3D Recuperaci\u00f3n de datos La descarga de datos del servidor intermedio se realiza mediante la llamada a la URL del servicio de recuperaci\u00f3n junto con varios par\u00e1metros de configuraci\u00f3n. El nombre por defecto del servicio de guardado es: RetrieveService Los par\u00e1metros necesarios son: op Operaci\u00f3n que se desea realizar. Se establecer\u00e1 el valor: get v Versi\u00f3n del servicio. Actualmente se debe configurar el valor: 1_0 id Identificador que se utiliz\u00f3 para el almacenamiento de los datos. Por ejemplo: http://miapp.com/ afirma/ afirma-signature-retriever /RetrieveService ? op =get& v =1_0& id =000987508929 < Esta obra est\u00e1 bajo una licencia Creative Commons Reconocimiento-NoComercial-CompartirIgual 3.0 Unported .","title":"Recuperaci\u00f3n del log de la aplicaci\u00f3n (getLog)"},{"location":"markdown_strict/afirma_movil_intro/","text":"<<img src=\"media/image1.jpeg\" style=\"width:2.41736in;height:2.26389in\" alt=\"https://encrypted-tbn2.google.com/images?q=tbn:ANd9GcSjE6inN_DbrwHuZE-lPoP4gVcN0gmXmQlLeFA50Y1NQAADxQwW\" /> El Cliente @firma en plataformas m\u00f3viles Introducci\u00f3n El actual Cliente @firma cubre con \u00e9xito la gran mayor\u00eda de plataformas cliente (Windows, Linux, Mac OS X, Solaris,\u2026) pero desde hace unos pocos a\u00f1os los usuarios han ido migrando paulatinamente desde sus dispositivos tipo PC hacia otros m\u00e1s port\u00e1tiles, peque\u00f1os y f\u00e1ciles de usar para muchas de sus operaciones en la red. Siendo este cambio de tendencia cada vez m\u00e1s acusado, se plante\u00f3 desde el Proyecto Cliente @firma la necesidad de soporte de estas nuevas plataformas (incompatibles con las tradicionales tipo PC) para poder ofertar servicios de administraci\u00f3n electr\u00f3nica y seguridad basada en firma acorde con las nuevas preferencias y h\u00e1bitos de ciudadanos y usuarios en general. El modelo de aplicaci\u00f3n de firma electr\u00f3nica en plataformas m\u00f3viles En el Proyecto Cliente @firma se ha trabajado con anterioridad en dos modelos de aplicaciones, por una parte aplicaciones Web en las que la firma electr\u00f3nica se integra directamente en las p\u00e1ginas mediante un Applet de Java y cierta l\u00f3gica en JavaScript, y por otra aplicaciones \u201cde escritorio\u201d que trabajan sin necesidad de conexiones de red con los ficheros locales del ordenador. Para los dispositivos m\u00f3viles de nueva generaci\u00f3n, estos modelos han sido adaptados para permitir una migraci\u00f3n sencilla por parte de los proveedores de servicios (AAPP, empresas, etc.) y una mayor cercan\u00eda a lo que pueden esperar los usuarios. Aplicaci\u00f3n Web El Proyecto Cliente @firma est\u00e1 desarrollando un modo de aplicaci\u00f3n Web que permite una provisi\u00f3n de servicios o aplicaciones con firma electr\u00f3nica de forma homog\u00e9nea para entornos tipo PC y entornos m\u00f3viles de nueva generaci\u00f3n. As\u00ed, una aplicaci\u00f3n Web puede desplegarse normalmente y, al ser accedida desde un entorno PC (Windows, Linux, Mac OS X, etc.), se cargar\u00e1 en forma de Applet de Java, mientras que en un entorno m\u00f3vil (Google Android, Apple iOS, etc.), se cargar\u00e1 como \u201cApp\u201d m\u00f3vil. Esta l\u00f3gica de decisi\u00f3n es trasparente para los usuarios. Este modo presenta grandes ventajas para los integradores, ya que permite mantener sus aplicaciones Web \u201ccl\u00e1sicas\u201d, con sus flujos de negocio asociados, pero dando servicio a una nueva colecci\u00f3n de dispositivos (y por lo tanto de usuarios) sin costes asociados de desarrollo, mantenimiento, distribuci\u00f3n o despliegue, etc. \u201cApp\u201d m\u00f3vil a medida Aunque la aplicaci\u00f3n Web puede adecuarse a pr\u00e1cticamente cualquier necesidad, las nuevas plataformas m\u00f3viles han instaurado con \u00e9xito un nuevo modelo en el cual cada servicio (o agrupaci\u00f3n de servicios cohesionados) se provee mediante una aplicaci\u00f3n independiente, que se denomina \u201cApp\u201d (denominaci\u00f3n acu\u00f1ada por Apple). En este nuevo modelo se descarta el Navegador Web como portal hacia las aplicaciones y se opta por multitud de aplicaciones nativas con interfaces de usuario avanzados, atractivos dise\u00f1os gr\u00e1ficos y potentes capacidades multimedia. Dado que de esta forma cada servicio necesita la codificaci\u00f3n de una \u201cApp\u201d independiente, no es ya responsabilidad del Cliente @firma el proporcionar una aplicaci\u00f3n completa y \u201cempaquetada\u201d (esto debe construirlo el propio proveedor de servicios), y el Proyecto Cliente @firma opta por poner en manos de los desarrolladores una serie de m\u00f3dulos funcionales independientes con los que pueden desarrollar aplicaciones basadas en firma electr\u00f3nica: Funcionalidades del n\u00facleo del Cliente @firma Gesti\u00f3n de almacenes de claves y certificados Firmas CAdES Firmas PAdES Firmas XAdES Etc. Aplicaci\u00f3n de firma independiente gen\u00e9rica La \u00faltima opci\u00f3n es la m\u00e1s simple y est\u00e1 orientada a solventar las necesidades m\u00e1s sencillas. Consiste simplemente en una aplicaci\u00f3n independiente (instalada como una \u201cApp\u201d m\u00e1s) que permite realizar firmas electr\u00f3nicas sobre ficheros almacenados en el dispositivo. Actualmente se trabaja tambi\u00e9n en la posibilidad de firmar ficheros remotos, como por ejemplo en la nube (Apple iCloud, Microsoft Skydrive, etc.), ficheros sincronizados (Apple iTunes, etc.), etc. Las plataformas m\u00f3viles En este nuevo ecosistema de dispositivos m\u00f3viles, nuevas plataformas se est\u00e1n r\u00e1pidamente posicionando y copando distintas cuotas de mercado: Google Android < El sistema operativo de Google para tel\u00e9fonos, tabletas y port\u00e1tiles ligeros es l\u00edder en cuota de mercado en nuestro pa\u00eds, aunque no en conexiones a Internet. Aun as\u00ed, es una de las prioridades en cuanto a soporte por parte del Proyecto Cliente @firma. Una de las peculiaridades de Google Android es que las aplicaciones se codifican en lenguaje Java y se ejecutan en una m\u00e1quina virtual similar a la JVM (Apache Harmony / Dalvik). Dado este entorno de ejecuci\u00f3n, el Proyecto @firma trabaj\u00f3 durante 2011 para tener una base Java que proporcionase una compatibilidad cruzada entre JSE (Linux, Mac OS X, Windows y Solaris) y Dalvik. Esta compatibilidad global ha permitido contar con una infraestructura de firma electr\u00f3nica muy robusta y depurada con una funcionalidad excepcional. En la actualidad, el Proyecto @firma cuenta con los siguientes productos para Google Android: M\u00f3dulos para desarrollo de aplicaciones Gesti\u00f3n de almacenes de claves y certificados. Actualmente en progreso el soporte de los nuevos almacenes centralizados de Android 4. M\u00f3dulo de firmas CAdES Soporte de firmas en una, dos y tres fases[1] M\u00f3dulo de firmas PAdES Soporte de firmas en una (en progreso), dos y tres fases 1 Aplicaci\u00f3n para firma desde Web (JavaScript + \u201cApp\u201d) Aplicaci\u00f3n de firma independiente Apple iOS (iPad, iPhone, iPod) < El sistema operativo de Apple es l\u00edder indiscutible en tabletas y en general en dispositivos m\u00f3viles conectados a Internet, y, gracias a su alt\u00edsimo nivel de innovaci\u00f3n y actualizaci\u00f3n tecnol\u00f3gica, se prev\u00e9 que mantendr\u00e1 en el medio plazo esta posici\u00f3n privilegiada, siendo objetivo obligado para el Proyecto Cliente @firma. Al contrario que Android, las aplicaciones iOS no se codifican en Java, sino en Objective C. Esta peculiaridad no permite la reutilizaci\u00f3n de c\u00f3digo desde la base JSE actual del Cliente @firma, y est\u00e1 obligando a una recodificaci\u00f3n completa de ciertos m\u00f3dulos. No obstante, la experiencia, conceptos e implementaciones de los est\u00e1ndares aprendidos en el desarrollo Java est\u00e1n permitiendo conseguir una implementaci\u00f3n de gran calidad. En la actualidad, el Proyecto @firma cuenta con los siguientes productos para Apple iOS: M\u00f3dulos para desarrollo de aplicaciones Gesti\u00f3n de almacenes de claves y certificados (en progreso). M\u00f3dulo de firmas CAdES (en progreso) Soporte de firmas en una y tres fases Aplicaci\u00f3n para firma desde Web (JavaScript + \u201cApp\u201d) (en progreso) Aplicaci\u00f3n de firma independiente (en progreso) RIM BlackBerry < La plataforma RIM BlackBerry, aunque en nuestro pa\u00eds ha mantenido una presencia destacable, sufre un severo retroceso frente a Apple iOS y Google Android, y es esta menor relevancia la que convierte a RIM en una prioridad secundaria para el Proyecto Cliente @firma. A nivel tecnol\u00f3gico, RIM BlackBerry cuenta con un entorno de ejecuci\u00f3n de aplicaciones basado en Java y en concreto en la plataforma JME. Esta compatibilidad con Java permite la reutilizaci\u00f3n directa de buena parte de los componentes del Cliente @firma, heredando sus funcionalidades y su excelente nivel de documentaci\u00f3n y pruebas. En la actualidad, no se prev\u00e9 la adaptaci\u00f3n del Cliente @firma a dispositivos RIM BlackBerry, aunque se ha cuidado el dise\u00f1o del Proyecto para dejar la puerta abierta a los siguientes productos: M\u00f3dulos para desarrollo de aplicaciones Gesti\u00f3n de almacenes de claves y certificados. M\u00f3dulo de firmas CAdES Soporte de firmas en tres fases M\u00f3dulo de firmas PAdES Soporte de firmas en tres fases Microsoft Windows Phone < Aunque Microsoft Windows Phone es un \u201creci\u00e9n llegado\u201d al ecosistema y apenas cuenta con base de usuarios, sus optimistas previsiones de crecimiento hacen que el Proyecto Cliente @firma se lo plantee como plataforma compatible en un futuro. A nivel tecnol\u00f3gico, Windows Phone incluye un entorno de ejecuci\u00f3n .NET, lo que obliga a recodificar los componentes del Cliente @firma necesarios, aunque la similitud entre .NET y Java hacen que estar tarea se pueda realizar con un riesgo limitado. En la actualidad, el Proyecto @firma no se plantea el desarrollo a corto-medio plazo de productos para Windows Phone. Sin embargo, en vista de la evoluci\u00f3n del mercado, se puede evaluar el desarrollo futuro de: M\u00f3dulos para desarrollo de aplicaciones Gesti\u00f3n de almacenes de claves y certificados. M\u00f3dulo de firmas CAdES Soporte de firmas en una y tres fases M\u00f3dulo de firmas PAdES Soporte de firmas en una y tres fases Diferentes alternativas en la firma multi-fase avanzada cliente-servidor Firma electr\u00f3nica en una fase Descripci\u00f3n La firma electr\u00f3nica en una \u00fanica fase es aquella en la que la totalidad del proceso re realiza en un mismo sistema, no existiendo comunicaci\u00f3n alguna con servicios o servidores externos. En este modelo, el sistema recibe los datos a firmas, obtiene el certificado y la clave privada localmente y firma los datos igualmente de forma local. Es el modo habitual de operaci\u00f3n del Cliente @firma. Firma electr\u00f3nica en tres fases Descripci\u00f3n La firma electr\u00f3nica en tres fases est\u00e1 pensada para entornos donde la clave privada reside en un sistema con al menos alguna de las siguientes restricciones: El sistema no es compatible con el Cliente @firma. En este caso, dado que el 95% del c\u00f3digo se ejecuta en un sistema externo, solo es necesario portar el 5% restante. El sistema tiene unas capacidades muy limitadas en cuanto a proceso computacional, memoria o comunicaciones por red. En este caso, el sistema solo realiza una operaci\u00f3n criptogr\u00e1fica, una firma PKCS#1, mucho menos demandante de potencia de proceso que una firma completa CAdES, y, adicionalmente, no trata el documento a firmar completo, sino \u00fanicamente una peque\u00f1a cantidad de datos resultante de un pre-proceso (la pre-firma) realizado por el sistema externo, lo que resulta en un enorme decremento en las necesidades de memoria y transmisi\u00f3n de datos (esto \u00faltimo si decide omitirse la transferencia del fichero a firmar). Por motivos de seguridad, el documento a firmar no puede salir de un sistema externo. Como se ha descrito en el punto anterior, en este caso es posible omitir por completo la salida del documento del sistema externo, y puede transferirse \u00fanicamente el resultado de la pre-firma, desde la cual es imposible reconstruir el documento original. Estos condicionantes convierten la firma trif\u00e1sica en una opci\u00f3n perfectamente adaptada a los dispositivos m\u00f3viles, donde se dan tanto la heterogeneidad de sistemas operativos (Apple iOS, Google Android, RIM BlackBerry, Microsoft Windows Phone, etc.) y las limitaciones en potencia de proceso, memoria y comunicaciones; en estas \u00faltimas hay que tener en cuenta el coste, especialmente si estamos haciendo uso de una red de otro operador en itinerancia ( roaming ). En una firma trif\u00e1sica, los datos que se transfieren entre servidor y cliente consisten en (previamente el cliente ha debido iniciar una petici\u00f3n de firma trif\u00e1sica indicando referencia de documento y enviando la cadena de certificados del firmante): Atributos firmados en el caso de CAdES. Atributos firmados m\u00e1s identificador de fichero PDF y fecha de inicio del proceso (para reutilizarla en todas sus fases) en el caso de PAdES. Nodo XML a firmar (que contiene las huellas digitales de las referencias a firmar) en el caso de XAdES. El cliente devuelve al servidor en todos los casos la firma PKCS#1, acompa\u00f1ada en el caso de PAdES de el identificador de fichero PDF y la fecha de inicio del proceso. El funcionamiento t\u00edpico de una firma trif\u00e1sica en la que intervienen un dispositivo m\u00f3vil, un servidor Web (que hace la pre-firma y la post-firma) y un servidor documental podr\u00eda ser el siguiente: Pre-firma: < El dispositivo m\u00f3vil solicita una pre-firma al servidor Web indicando un identificador de documento. El servidor Web solicita el documento a servidor documental. El servidor documental entrega el documento al servidor Web.\u2028 Es importante recalcar que el servidor documental no necesita almacenar ning\u00fan dato de sesi\u00f3n y que este no est\u00e1 expuesto a Internet de forma directa en ning\u00fan momento. El servidor Web calcula la pre-firma, entregando el resultado (muy peque\u00f1o en tama\u00f1o) al dispositivo. Es importante recalcar que el servidor Web no necesita almacenar ning\u00fan dato de sesi\u00f3n ni exponer los documentos directamente al dispositivo. Firma: < El dispositivo m\u00f3vil realiza, de forma completamente aislada una firma electr\u00f3nica simple (computacionalmente ligera) de los datos de la pre-firma. La clave privada del usuario nunca sale del dispositivo y no se expone externamente en ning\u00fan momento. Post-firma: < El dispositivo m\u00f3vil solicita una post-firma al servidor Web indicando un identificador de documento y proporcionando el resultado de su pre-firma firmada. El servidor Web solicita el documento a servidor documental. El servidor documental entrega el documento al servidor Web. El servidor Web calcula la post-firma y compone el documento final firmado, entregando el resultado al servidor documental para su almac\u00e9n. El servidor documental almacena el nuevo documento y devuelve un identificador al servidor Web. El servidor Web comunica al dispositivo el \u00e9xito de la operaci\u00f3n y el identificador del fichero ya firmado y almacenado. El esquema podr\u00eda ser igualmente implementado sin servidor documental, pudiendo obtener el Servidor Web el documento desde otro origen, incluyendo el propio dispositivo m\u00f3vil. Igualmente, una vez firmado el documento, su destino puede ser cualquiera, incluyendo de nuevo al propio dispositivo. Es conveniente tener en cuenta al usar firmas trif\u00e1sicas que es necesario disponer de un mecanismo para que el usuario pueda ver en todo momento los documentos que est\u00e1 firmando (una copia que refleje con fidelidad el contenido firmado puede ser suficiente) para evitar situaciones de repudio. Una ventaja adicional en las firmas trif\u00e1sicas es que, puesto que la \u00faltima fase la realiza el servidor y cuenta ya con el documento Implementaci\u00f3n La implementaci\u00f3n de la firma trif\u00e1sica es posible en cualquier caso, pero siempre teniendo en cuenta las siguientes consideraciones: CAdES La implementaci\u00f3n de firma trif\u00e1sica CAdES no presenta complicaciones extraordinarias: Dificultad: Baja No es necesaria la modificaci\u00f3n de ning\u00fan API externo a @firma. PAdES La implementaci\u00f3n de firma trif\u00e1sica PAdES presenta las siguientes peculiaridades: Dificultad: Media-Alta Es necesario modificar el API iText. Realmente, la modificaci\u00f3n de iText no supone una traba en la evoluci\u00f3n de @firma, ya que este usa una versi\u00f3n antigua concreta (2.1.7) por temas de licenciado. La dificultad de la implementaci\u00f3n de las firmas trif\u00e1sicas PAdES radica en la adici\u00f3n de elementos aleatorios (por ejemplo, el identificador de fichero) y fechas de creaci\u00f3n de secciones dentro de los documentos PDF que son necesario sincronizar entre cliente y servidor para asegurar que las huellas digitales no difieren. XAdES La implementaci\u00f3n de firma trif\u00e1sica XAdES presenta ciertas dificultades dado el encapsulamiento del API XMLDSig de Java, siendo necesario implementar el concepto de Facets de firma XML. Dificultad: Alta Es necesario modificar el API JXAdES. Realmente, la modificaci\u00f3n de iText no supone una traba en la evoluci\u00f3n de @firma, ya que estas modificaciones se realizar\u00edan conjuntamente con el equipo de JXAdES atendiendo espec\u00edficamente a las necesidades de @firma, y las modificaciones se incorporar\u00edan de forma definitiva a JXAdES. Firma electr\u00f3nica en dos fases La firma electr\u00f3nica en dos fases comparte algunos escenarios de uso preferente con la firma en tres fases, pero presenta diferencias significativas: El 90% del c\u00f3digo se ejecuta en servidor, lo que facilita migrar el 10% restante a plataforma actualmente no soportadas por el Cliente @firma. El documento inicia el proceso desde el dispositivo y lo finaliza tambi\u00e9n en el dispositivo, por lo que es adecuado para procesos donde no interviene un servidor de documentos. Se reducen las conexiones de red respecto a la firma trif\u00e1sica (solo se necesita una conexi\u00f3n), pero el tr\u00e1fico de estas aumenta, lo cual simplifica la operaci\u00f3n cuando el servidor Web requiere autenticaci\u00f3n. Se mantiene, tal y como ocurre en la firma trif\u00e1sica, una demanda baja en cuanto a potencia computacional en el dispositivo, pero no as\u00ed la demanda de memoria. Este traslado de necesidades de memoria del servidor al dispositivo permite a este primero tratar un alt\u00edsimo volumen de peticiones con un hardware de gama media. En una firma bif\u00e1sica, los datos que se transfieren entre cliente y servidor constan de: Documento a firmar. Cadena de certificados del firmante. Y la respuesta del servidor al cliente: Documento pre-firmado. Datos a firmar mediante PKCS#1. Informaci\u00f3n necesaria para insertar esta firma PKCS#1 en el documento pre-firmado. Desplazamiento ( offset ) dentro del binario donde debe colocarse la firma PKCS#1, cadena de texto a sustituir por la firma PKCS#1 (en Base64 o en su representaci\u00f3n ASCII del hexadecimal, etc.). El funcionamiento t\u00edpico de una firma bif\u00e1sica en la que intervienen un dispositivo m\u00f3vil y un servidor Web (que hace la pre-firma) podr\u00eda ser el siguiente: Pre-firma < El dispositivo m\u00f3vil solicita una pre-firma al servidor Web enviando la cadena de certificados del firmante (puede enviar igualmente el documento o el servidor Web puede obtenerlo de una fuente externa, como un servidor de documentos). El servidor Web devuelve la pre-firma al dispositivo (que contiene el documento preparado para la firma final y los datos binarios a firmar mediante PKCS#1) y da por finalizado el proceso en su extremo. Firma < El dispositivo m\u00f3vil realiza, de forma completamente aislada una firma electr\u00f3nica simple (computacionalmente ligera) PKCS#1 de los datos de la pre-firma y realiza \u00e9l mismo el proceso de inserci\u00f3n en el documento pre-firmado. Este proceso es relativamente ligero en cuanto a potencia computacional, pero puede requerir mucha memoria en el dispositivo. Implementaci\u00f3n de tecnolog\u00edas multi-fase dentro del Proyecto @firma Comunicaciones entre cliente y servidor y desarrollos en la parte servidora Para la comunicaci\u00f3n entre cliente y servidor se hace uso de tecnolog\u00edas REST (Transferencia de Estado Representacional). REST presenta numerosas ventajas respecto a otros sistemas en el \u00e1mbito de las firmas multi-fase: Es un protocolo sin estado. Combinado con una implementaci\u00f3n en la que no es necesario almacenar ning\u00fan dato de sesi\u00f3n en el servidor incrementa la seguridad del sistema, ya que en caso de compromiso de este no hay documentos del usuario almacenados susceptibles de apropiaci\u00f3n indebida. Es un protocolo simple. La ausencia de SOAP y las limitaciones en el uso de XML lo hacen apto para dispositivos con capacidades limitadas, a la vez que facilitan una implementaci\u00f3n r\u00e1pida y f\u00e1cil de mantener en el lado cliente. Se realiza una implementaci\u00f3n utilizando exclusivamente tecnolog\u00edas presentes en JEE 6 (sin usar API de productos externos), lo cual permite una completa independencia tecnol\u00f3gica en cuanto a servidores de aplicaciones y blinda en cierto modo la futura obsolescencia. El resultado es un servicio por completo independiente del resto de servicios de servidor de la plataforma @firma (que est\u00e1n ligados a versiones obsoletas de Axis, no aptas para implementar modernos servicios basados en REST). No obstante, la aplicaci\u00f3n servidora, en forma de EAR o WAR, podr\u00e1 desplegarse en el mismo servidor de aplicaciones que la plataforma @firma, siempre que este sea compatible JEE6. Para facilitar las labores de pruebas e implantaciones de referencia se ofrece adicionalmente un servidor GassFish Embedded configurado para el arranque autom\u00e1tico del servicio. Uso del Cliente @firma en un entorno servidor El servicio servidor hace uso del Cliente @firma a modo de bibliotecas, benefici\u00e1ndose de la organizaci\u00f3n en m\u00f3dulos actual. [1] Ver anexo sobre firma electr\u00f3nica en varias fases","title":"<<img src=\"media/image1.jpeg\""},{"location":"markdown_strict/afirma_movil_intro/#img-srcmediaimage1jpeg","text":"style=\"width:2.41736in;height:2.26389in\" alt=\"https://encrypted-tbn2.google.com/images?q=tbn:ANd9GcSjE6inN_DbrwHuZE-lPoP4gVcN0gmXmQlLeFA50Y1NQAADxQwW\" />","title":"&lt;&lt;img src=\"media/image1.jpeg\""},{"location":"markdown_strict/afirma_movil_intro/#el-cliente-firma-en-plataformas-moviles","text":"","title":"El Cliente @firma en plataformas m\u00f3viles"},{"location":"markdown_strict/afirma_movil_intro/#introduccion","text":"El actual Cliente @firma cubre con \u00e9xito la gran mayor\u00eda de plataformas cliente (Windows, Linux, Mac OS X, Solaris,\u2026) pero desde hace unos pocos a\u00f1os los usuarios han ido migrando paulatinamente desde sus dispositivos tipo PC hacia otros m\u00e1s port\u00e1tiles, peque\u00f1os y f\u00e1ciles de usar para muchas de sus operaciones en la red. Siendo este cambio de tendencia cada vez m\u00e1s acusado, se plante\u00f3 desde el Proyecto Cliente @firma la necesidad de soporte de estas nuevas plataformas (incompatibles con las tradicionales tipo PC) para poder ofertar servicios de administraci\u00f3n electr\u00f3nica y seguridad basada en firma acorde con las nuevas preferencias y h\u00e1bitos de ciudadanos y usuarios en general.","title":"Introducci\u00f3n"},{"location":"markdown_strict/afirma_movil_intro/#el-modelo-de-aplicacion-de-firma-electronica-en-plataformas-moviles","text":"En el Proyecto Cliente @firma se ha trabajado con anterioridad en dos modelos de aplicaciones, por una parte aplicaciones Web en las que la firma electr\u00f3nica se integra directamente en las p\u00e1ginas mediante un Applet de Java y cierta l\u00f3gica en JavaScript, y por otra aplicaciones \u201cde escritorio\u201d que trabajan sin necesidad de conexiones de red con los ficheros locales del ordenador. Para los dispositivos m\u00f3viles de nueva generaci\u00f3n, estos modelos han sido adaptados para permitir una migraci\u00f3n sencilla por parte de los proveedores de servicios (AAPP, empresas, etc.) y una mayor cercan\u00eda a lo que pueden esperar los usuarios.","title":"El modelo de aplicaci\u00f3n de firma electr\u00f3nica en plataformas m\u00f3viles"},{"location":"markdown_strict/afirma_movil_intro/#aplicacion-web","text":"El Proyecto Cliente @firma est\u00e1 desarrollando un modo de aplicaci\u00f3n Web que permite una provisi\u00f3n de servicios o aplicaciones con firma electr\u00f3nica de forma homog\u00e9nea para entornos tipo PC y entornos m\u00f3viles de nueva generaci\u00f3n. As\u00ed, una aplicaci\u00f3n Web puede desplegarse normalmente y, al ser accedida desde un entorno PC (Windows, Linux, Mac OS X, etc.), se cargar\u00e1 en forma de Applet de Java, mientras que en un entorno m\u00f3vil (Google Android, Apple iOS, etc.), se cargar\u00e1 como \u201cApp\u201d m\u00f3vil. Esta l\u00f3gica de decisi\u00f3n es trasparente para los usuarios. Este modo presenta grandes ventajas para los integradores, ya que permite mantener sus aplicaciones Web \u201ccl\u00e1sicas\u201d, con sus flujos de negocio asociados, pero dando servicio a una nueva colecci\u00f3n de dispositivos (y por lo tanto de usuarios) sin costes asociados de desarrollo, mantenimiento, distribuci\u00f3n o despliegue, etc.","title":"Aplicaci\u00f3n Web"},{"location":"markdown_strict/afirma_movil_intro/#app-movil-a-medida","text":"Aunque la aplicaci\u00f3n Web puede adecuarse a pr\u00e1cticamente cualquier necesidad, las nuevas plataformas m\u00f3viles han instaurado con \u00e9xito un nuevo modelo en el cual cada servicio (o agrupaci\u00f3n de servicios cohesionados) se provee mediante una aplicaci\u00f3n independiente, que se denomina \u201cApp\u201d (denominaci\u00f3n acu\u00f1ada por Apple). En este nuevo modelo se descarta el Navegador Web como portal hacia las aplicaciones y se opta por multitud de aplicaciones nativas con interfaces de usuario avanzados, atractivos dise\u00f1os gr\u00e1ficos y potentes capacidades multimedia. Dado que de esta forma cada servicio necesita la codificaci\u00f3n de una \u201cApp\u201d independiente, no es ya responsabilidad del Cliente @firma el proporcionar una aplicaci\u00f3n completa y \u201cempaquetada\u201d (esto debe construirlo el propio proveedor de servicios), y el Proyecto Cliente @firma opta por poner en manos de los desarrolladores una serie de m\u00f3dulos funcionales independientes con los que pueden desarrollar aplicaciones basadas en firma electr\u00f3nica: Funcionalidades del n\u00facleo del Cliente @firma Gesti\u00f3n de almacenes de claves y certificados Firmas CAdES Firmas PAdES Firmas XAdES Etc.","title":"\u201cApp\u201d m\u00f3vil a medida"},{"location":"markdown_strict/afirma_movil_intro/#aplicacion-de-firma-independiente-generica","text":"La \u00faltima opci\u00f3n es la m\u00e1s simple y est\u00e1 orientada a solventar las necesidades m\u00e1s sencillas. Consiste simplemente en una aplicaci\u00f3n independiente (instalada como una \u201cApp\u201d m\u00e1s) que permite realizar firmas electr\u00f3nicas sobre ficheros almacenados en el dispositivo. Actualmente se trabaja tambi\u00e9n en la posibilidad de firmar ficheros remotos, como por ejemplo en la nube (Apple iCloud, Microsoft Skydrive, etc.), ficheros sincronizados (Apple iTunes, etc.), etc.","title":"Aplicaci\u00f3n de firma independiente gen\u00e9rica"},{"location":"markdown_strict/afirma_movil_intro/#las-plataformas-moviles","text":"En este nuevo ecosistema de dispositivos m\u00f3viles, nuevas plataformas se est\u00e1n r\u00e1pidamente posicionando y copando distintas cuotas de mercado:","title":"Las plataformas m\u00f3viles"},{"location":"markdown_strict/afirma_movil_intro/#google-android","text":"< El sistema operativo de Google para tel\u00e9fonos, tabletas y port\u00e1tiles ligeros es l\u00edder en cuota de mercado en nuestro pa\u00eds, aunque no en conexiones a Internet. Aun as\u00ed, es una de las prioridades en cuanto a soporte por parte del Proyecto Cliente @firma. Una de las peculiaridades de Google Android es que las aplicaciones se codifican en lenguaje Java y se ejecutan en una m\u00e1quina virtual similar a la JVM (Apache Harmony / Dalvik). Dado este entorno de ejecuci\u00f3n, el Proyecto @firma trabaj\u00f3 durante 2011 para tener una base Java que proporcionase una compatibilidad cruzada entre JSE (Linux, Mac OS X, Windows y Solaris) y Dalvik. Esta compatibilidad global ha permitido contar con una infraestructura de firma electr\u00f3nica muy robusta y depurada con una funcionalidad excepcional. En la actualidad, el Proyecto @firma cuenta con los siguientes productos para Google Android: M\u00f3dulos para desarrollo de aplicaciones Gesti\u00f3n de almacenes de claves y certificados. Actualmente en progreso el soporte de los nuevos almacenes centralizados de Android 4. M\u00f3dulo de firmas CAdES Soporte de firmas en una, dos y tres fases[1] M\u00f3dulo de firmas PAdES Soporte de firmas en una (en progreso), dos y tres fases 1 Aplicaci\u00f3n para firma desde Web (JavaScript + \u201cApp\u201d) Aplicaci\u00f3n de firma independiente","title":"Google Android"},{"location":"markdown_strict/afirma_movil_intro/#apple-ios-ipad-iphone-ipod","text":"< El sistema operativo de Apple es l\u00edder indiscutible en tabletas y en general en dispositivos m\u00f3viles conectados a Internet, y, gracias a su alt\u00edsimo nivel de innovaci\u00f3n y actualizaci\u00f3n tecnol\u00f3gica, se prev\u00e9 que mantendr\u00e1 en el medio plazo esta posici\u00f3n privilegiada, siendo objetivo obligado para el Proyecto Cliente @firma. Al contrario que Android, las aplicaciones iOS no se codifican en Java, sino en Objective C. Esta peculiaridad no permite la reutilizaci\u00f3n de c\u00f3digo desde la base JSE actual del Cliente @firma, y est\u00e1 obligando a una recodificaci\u00f3n completa de ciertos m\u00f3dulos. No obstante, la experiencia, conceptos e implementaciones de los est\u00e1ndares aprendidos en el desarrollo Java est\u00e1n permitiendo conseguir una implementaci\u00f3n de gran calidad. En la actualidad, el Proyecto @firma cuenta con los siguientes productos para Apple iOS: M\u00f3dulos para desarrollo de aplicaciones Gesti\u00f3n de almacenes de claves y certificados (en progreso). M\u00f3dulo de firmas CAdES (en progreso) Soporte de firmas en una y tres fases Aplicaci\u00f3n para firma desde Web (JavaScript + \u201cApp\u201d) (en progreso) Aplicaci\u00f3n de firma independiente (en progreso)","title":"Apple iOS (iPad, iPhone, iPod)"},{"location":"markdown_strict/afirma_movil_intro/#rim-blackberry","text":"< La plataforma RIM BlackBerry, aunque en nuestro pa\u00eds ha mantenido una presencia destacable, sufre un severo retroceso frente a Apple iOS y Google Android, y es esta menor relevancia la que convierte a RIM en una prioridad secundaria para el Proyecto Cliente @firma. A nivel tecnol\u00f3gico, RIM BlackBerry cuenta con un entorno de ejecuci\u00f3n de aplicaciones basado en Java y en concreto en la plataforma JME. Esta compatibilidad con Java permite la reutilizaci\u00f3n directa de buena parte de los componentes del Cliente @firma, heredando sus funcionalidades y su excelente nivel de documentaci\u00f3n y pruebas. En la actualidad, no se prev\u00e9 la adaptaci\u00f3n del Cliente @firma a dispositivos RIM BlackBerry, aunque se ha cuidado el dise\u00f1o del Proyecto para dejar la puerta abierta a los siguientes productos: M\u00f3dulos para desarrollo de aplicaciones Gesti\u00f3n de almacenes de claves y certificados. M\u00f3dulo de firmas CAdES Soporte de firmas en tres fases M\u00f3dulo de firmas PAdES Soporte de firmas en tres fases","title":"RIM BlackBerry"},{"location":"markdown_strict/afirma_movil_intro/#microsoft-windows-phone","text":"< Aunque Microsoft Windows Phone es un \u201creci\u00e9n llegado\u201d al ecosistema y apenas cuenta con base de usuarios, sus optimistas previsiones de crecimiento hacen que el Proyecto Cliente @firma se lo plantee como plataforma compatible en un futuro. A nivel tecnol\u00f3gico, Windows Phone incluye un entorno de ejecuci\u00f3n .NET, lo que obliga a recodificar los componentes del Cliente @firma necesarios, aunque la similitud entre .NET y Java hacen que estar tarea se pueda realizar con un riesgo limitado. En la actualidad, el Proyecto @firma no se plantea el desarrollo a corto-medio plazo de productos para Windows Phone. Sin embargo, en vista de la evoluci\u00f3n del mercado, se puede evaluar el desarrollo futuro de: M\u00f3dulos para desarrollo de aplicaciones Gesti\u00f3n de almacenes de claves y certificados. M\u00f3dulo de firmas CAdES Soporte de firmas en una y tres fases M\u00f3dulo de firmas PAdES Soporte de firmas en una y tres fases Diferentes alternativas en la firma multi-fase avanzada cliente-servidor","title":"Microsoft Windows Phone"},{"location":"markdown_strict/afirma_movil_intro/#firma-electronica-en-una-fase","text":"","title":"Firma electr\u00f3nica en una fase"},{"location":"markdown_strict/afirma_movil_intro/#descripcion","text":"La firma electr\u00f3nica en una \u00fanica fase es aquella en la que la totalidad del proceso re realiza en un mismo sistema, no existiendo comunicaci\u00f3n alguna con servicios o servidores externos. En este modelo, el sistema recibe los datos a firmas, obtiene el certificado y la clave privada localmente y firma los datos igualmente de forma local. Es el modo habitual de operaci\u00f3n del Cliente @firma.","title":"Descripci\u00f3n"},{"location":"markdown_strict/afirma_movil_intro/#firma-electronica-en-tres-fases","text":"","title":"Firma electr\u00f3nica en tres fases"},{"location":"markdown_strict/afirma_movil_intro/#descripcion_1","text":"La firma electr\u00f3nica en tres fases est\u00e1 pensada para entornos donde la clave privada reside en un sistema con al menos alguna de las siguientes restricciones: El sistema no es compatible con el Cliente @firma. En este caso, dado que el 95% del c\u00f3digo se ejecuta en un sistema externo, solo es necesario portar el 5% restante. El sistema tiene unas capacidades muy limitadas en cuanto a proceso computacional, memoria o comunicaciones por red. En este caso, el sistema solo realiza una operaci\u00f3n criptogr\u00e1fica, una firma PKCS#1, mucho menos demandante de potencia de proceso que una firma completa CAdES, y, adicionalmente, no trata el documento a firmar completo, sino \u00fanicamente una peque\u00f1a cantidad de datos resultante de un pre-proceso (la pre-firma) realizado por el sistema externo, lo que resulta en un enorme decremento en las necesidades de memoria y transmisi\u00f3n de datos (esto \u00faltimo si decide omitirse la transferencia del fichero a firmar). Por motivos de seguridad, el documento a firmar no puede salir de un sistema externo. Como se ha descrito en el punto anterior, en este caso es posible omitir por completo la salida del documento del sistema externo, y puede transferirse \u00fanicamente el resultado de la pre-firma, desde la cual es imposible reconstruir el documento original. Estos condicionantes convierten la firma trif\u00e1sica en una opci\u00f3n perfectamente adaptada a los dispositivos m\u00f3viles, donde se dan tanto la heterogeneidad de sistemas operativos (Apple iOS, Google Android, RIM BlackBerry, Microsoft Windows Phone, etc.) y las limitaciones en potencia de proceso, memoria y comunicaciones; en estas \u00faltimas hay que tener en cuenta el coste, especialmente si estamos haciendo uso de una red de otro operador en itinerancia ( roaming ). En una firma trif\u00e1sica, los datos que se transfieren entre servidor y cliente consisten en (previamente el cliente ha debido iniciar una petici\u00f3n de firma trif\u00e1sica indicando referencia de documento y enviando la cadena de certificados del firmante): Atributos firmados en el caso de CAdES. Atributos firmados m\u00e1s identificador de fichero PDF y fecha de inicio del proceso (para reutilizarla en todas sus fases) en el caso de PAdES. Nodo XML a firmar (que contiene las huellas digitales de las referencias a firmar) en el caso de XAdES. El cliente devuelve al servidor en todos los casos la firma PKCS#1, acompa\u00f1ada en el caso de PAdES de el identificador de fichero PDF y la fecha de inicio del proceso. El funcionamiento t\u00edpico de una firma trif\u00e1sica en la que intervienen un dispositivo m\u00f3vil, un servidor Web (que hace la pre-firma y la post-firma) y un servidor documental podr\u00eda ser el siguiente: Pre-firma: < El dispositivo m\u00f3vil solicita una pre-firma al servidor Web indicando un identificador de documento. El servidor Web solicita el documento a servidor documental. El servidor documental entrega el documento al servidor Web.\u2028 Es importante recalcar que el servidor documental no necesita almacenar ning\u00fan dato de sesi\u00f3n y que este no est\u00e1 expuesto a Internet de forma directa en ning\u00fan momento. El servidor Web calcula la pre-firma, entregando el resultado (muy peque\u00f1o en tama\u00f1o) al dispositivo. Es importante recalcar que el servidor Web no necesita almacenar ning\u00fan dato de sesi\u00f3n ni exponer los documentos directamente al dispositivo. Firma: < El dispositivo m\u00f3vil realiza, de forma completamente aislada una firma electr\u00f3nica simple (computacionalmente ligera) de los datos de la pre-firma. La clave privada del usuario nunca sale del dispositivo y no se expone externamente en ning\u00fan momento. Post-firma: < El dispositivo m\u00f3vil solicita una post-firma al servidor Web indicando un identificador de documento y proporcionando el resultado de su pre-firma firmada. El servidor Web solicita el documento a servidor documental. El servidor documental entrega el documento al servidor Web. El servidor Web calcula la post-firma y compone el documento final firmado, entregando el resultado al servidor documental para su almac\u00e9n. El servidor documental almacena el nuevo documento y devuelve un identificador al servidor Web. El servidor Web comunica al dispositivo el \u00e9xito de la operaci\u00f3n y el identificador del fichero ya firmado y almacenado. El esquema podr\u00eda ser igualmente implementado sin servidor documental, pudiendo obtener el Servidor Web el documento desde otro origen, incluyendo el propio dispositivo m\u00f3vil. Igualmente, una vez firmado el documento, su destino puede ser cualquiera, incluyendo de nuevo al propio dispositivo. Es conveniente tener en cuenta al usar firmas trif\u00e1sicas que es necesario disponer de un mecanismo para que el usuario pueda ver en todo momento los documentos que est\u00e1 firmando (una copia que refleje con fidelidad el contenido firmado puede ser suficiente) para evitar situaciones de repudio. Una ventaja adicional en las firmas trif\u00e1sicas es que, puesto que la \u00faltima fase la realiza el servidor y cuenta ya con el documento","title":"Descripci\u00f3n"},{"location":"markdown_strict/afirma_movil_intro/#implementacion","text":"La implementaci\u00f3n de la firma trif\u00e1sica es posible en cualquier caso, pero siempre teniendo en cuenta las siguientes consideraciones: CAdES La implementaci\u00f3n de firma trif\u00e1sica CAdES no presenta complicaciones extraordinarias: Dificultad: Baja No es necesaria la modificaci\u00f3n de ning\u00fan API externo a @firma. PAdES La implementaci\u00f3n de firma trif\u00e1sica PAdES presenta las siguientes peculiaridades: Dificultad: Media-Alta Es necesario modificar el API iText. Realmente, la modificaci\u00f3n de iText no supone una traba en la evoluci\u00f3n de @firma, ya que este usa una versi\u00f3n antigua concreta (2.1.7) por temas de licenciado. La dificultad de la implementaci\u00f3n de las firmas trif\u00e1sicas PAdES radica en la adici\u00f3n de elementos aleatorios (por ejemplo, el identificador de fichero) y fechas de creaci\u00f3n de secciones dentro de los documentos PDF que son necesario sincronizar entre cliente y servidor para asegurar que las huellas digitales no difieren. XAdES La implementaci\u00f3n de firma trif\u00e1sica XAdES presenta ciertas dificultades dado el encapsulamiento del API XMLDSig de Java, siendo necesario implementar el concepto de Facets de firma XML. Dificultad: Alta Es necesario modificar el API JXAdES. Realmente, la modificaci\u00f3n de iText no supone una traba en la evoluci\u00f3n de @firma, ya que estas modificaciones se realizar\u00edan conjuntamente con el equipo de JXAdES atendiendo espec\u00edficamente a las necesidades de @firma, y las modificaciones se incorporar\u00edan de forma definitiva a JXAdES.","title":"Implementaci\u00f3n"},{"location":"markdown_strict/afirma_movil_intro/#firma-electronica-en-dos-fases","text":"La firma electr\u00f3nica en dos fases comparte algunos escenarios de uso preferente con la firma en tres fases, pero presenta diferencias significativas: El 90% del c\u00f3digo se ejecuta en servidor, lo que facilita migrar el 10% restante a plataforma actualmente no soportadas por el Cliente @firma. El documento inicia el proceso desde el dispositivo y lo finaliza tambi\u00e9n en el dispositivo, por lo que es adecuado para procesos donde no interviene un servidor de documentos. Se reducen las conexiones de red respecto a la firma trif\u00e1sica (solo se necesita una conexi\u00f3n), pero el tr\u00e1fico de estas aumenta, lo cual simplifica la operaci\u00f3n cuando el servidor Web requiere autenticaci\u00f3n. Se mantiene, tal y como ocurre en la firma trif\u00e1sica, una demanda baja en cuanto a potencia computacional en el dispositivo, pero no as\u00ed la demanda de memoria. Este traslado de necesidades de memoria del servidor al dispositivo permite a este primero tratar un alt\u00edsimo volumen de peticiones con un hardware de gama media. En una firma bif\u00e1sica, los datos que se transfieren entre cliente y servidor constan de: Documento a firmar. Cadena de certificados del firmante. Y la respuesta del servidor al cliente: Documento pre-firmado. Datos a firmar mediante PKCS#1. Informaci\u00f3n necesaria para insertar esta firma PKCS#1 en el documento pre-firmado. Desplazamiento ( offset ) dentro del binario donde debe colocarse la firma PKCS#1, cadena de texto a sustituir por la firma PKCS#1 (en Base64 o en su representaci\u00f3n ASCII del hexadecimal, etc.). El funcionamiento t\u00edpico de una firma bif\u00e1sica en la que intervienen un dispositivo m\u00f3vil y un servidor Web (que hace la pre-firma) podr\u00eda ser el siguiente: Pre-firma < El dispositivo m\u00f3vil solicita una pre-firma al servidor Web enviando la cadena de certificados del firmante (puede enviar igualmente el documento o el servidor Web puede obtenerlo de una fuente externa, como un servidor de documentos). El servidor Web devuelve la pre-firma al dispositivo (que contiene el documento preparado para la firma final y los datos binarios a firmar mediante PKCS#1) y da por finalizado el proceso en su extremo. Firma < El dispositivo m\u00f3vil realiza, de forma completamente aislada una firma electr\u00f3nica simple (computacionalmente ligera) PKCS#1 de los datos de la pre-firma y realiza \u00e9l mismo el proceso de inserci\u00f3n en el documento pre-firmado. Este proceso es relativamente ligero en cuanto a potencia computacional, pero puede requerir mucha memoria en el dispositivo.","title":"Firma electr\u00f3nica en dos fases"},{"location":"markdown_strict/afirma_movil_intro/#implementacion-de-tecnologias-multi-fase-dentro-del-proyecto-firma","text":"","title":"Implementaci\u00f3n de tecnolog\u00edas multi-fase dentro del Proyecto @firma"},{"location":"markdown_strict/afirma_movil_intro/#comunicaciones-entre-cliente-y-servidor-y-desarrollos-en-la-parte-servidora","text":"Para la comunicaci\u00f3n entre cliente y servidor se hace uso de tecnolog\u00edas REST (Transferencia de Estado Representacional). REST presenta numerosas ventajas respecto a otros sistemas en el \u00e1mbito de las firmas multi-fase: Es un protocolo sin estado. Combinado con una implementaci\u00f3n en la que no es necesario almacenar ning\u00fan dato de sesi\u00f3n en el servidor incrementa la seguridad del sistema, ya que en caso de compromiso de este no hay documentos del usuario almacenados susceptibles de apropiaci\u00f3n indebida. Es un protocolo simple. La ausencia de SOAP y las limitaciones en el uso de XML lo hacen apto para dispositivos con capacidades limitadas, a la vez que facilitan una implementaci\u00f3n r\u00e1pida y f\u00e1cil de mantener en el lado cliente. Se realiza una implementaci\u00f3n utilizando exclusivamente tecnolog\u00edas presentes en JEE 6 (sin usar API de productos externos), lo cual permite una completa independencia tecnol\u00f3gica en cuanto a servidores de aplicaciones y blinda en cierto modo la futura obsolescencia. El resultado es un servicio por completo independiente del resto de servicios de servidor de la plataforma @firma (que est\u00e1n ligados a versiones obsoletas de Axis, no aptas para implementar modernos servicios basados en REST). No obstante, la aplicaci\u00f3n servidora, en forma de EAR o WAR, podr\u00e1 desplegarse en el mismo servidor de aplicaciones que la plataforma @firma, siempre que este sea compatible JEE6. Para facilitar las labores de pruebas e implantaciones de referencia se ofrece adicionalmente un servidor GassFish Embedded configurado para el arranque autom\u00e1tico del servicio. Uso del Cliente @firma en un entorno servidor El servicio servidor hace uso del Cliente @firma a modo de bibliotecas, benefici\u00e1ndose de la organizaci\u00f3n en m\u00f3dulos actual. [1] Ver anexo sobre firma electr\u00f3nica en varias fases","title":"Comunicaciones entre cliente y servidor y desarrollos en la parte servidora"}]}